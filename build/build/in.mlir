builtin.module attributes  {"sym_name" = "ir"} {
  builtin.module attributes  {"sym_name" = "builtins"} {
    "mid.prelude"() : () -> ()
    "mid.typedef"() {"class_name" = "bool_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @bool_typ], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5801531371504802705 : i64, "base_typ" = i1, "data_size_fn" = "_data_size_bool_typ", "box_fn" = "_box_bool_typ", "unbox_fn" = "_unbox_bool_typ", "size_fn" = "_data_size_bool_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "i8_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @i8_typ], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 2582149688529881115 : i64, "base_typ" = i8, "data_size_fn" = "_data_size_i8_typ", "box_fn" = "_box_i8_typ", "unbox_fn" = "_unbox_i8_typ", "size_fn" = "_data_size_i8_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "i32_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, @i32_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 16193019123895293634 : i64, "base_typ" = i32, "data_size_fn" = "_data_size_i32_typ", "box_fn" = "_box_i32_typ", "unbox_fn" = "_unbox_i32_typ", "size_fn" = "_data_size_i32_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "i64_typ", "methods" = [], "hash_tbl" = [@any_typ, @Object, @i64_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 10976946829247779694 : i64, "base_typ" = i64, "data_size_fn" = "_data_size_i64_typ", "box_fn" = "_box_i64_typ", "unbox_fn" = "_unbox_i64_typ", "size_fn" = "_data_size_i64_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "i128_typ", "methods" = [], "hash_tbl" = [@Object, @i128_typ, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 9690865858240087975 : i64, "base_typ" = i128, "data_size_fn" = "_data_size_i128_typ", "box_fn" = "_box_i128_typ", "unbox_fn" = "_unbox_i128_typ", "size_fn" = "_data_size_i128_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "f64_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @f64_typ], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17689428533612252835 : i64, "base_typ" = f64, "data_size_fn" = "_data_size_f64_typ", "box_fn" = "_box_f64_typ", "unbox_fn" = "_unbox_f64_typ", "size_fn" = "_data_size_f64_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "nil_typ", "methods" = [], "hash_tbl" = [@nil_typ, @any_typ], "offset_tbl" = [10 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 13319937214253225933 : i64, "base_typ" = !llvm.array<0 x i8>, "data_size_fn" = "_data_size_nil_typ", "box_fn" = "_box_nil_typ", "unbox_fn" = "_unbox_nil_typ", "size_fn" = "_data_size_nil_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "any_typ", "methods" = [], "hash_tbl" = [@any_typ], "offset_tbl" = [10 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 3084208142191802847 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "data_size_fn" = "_data_size_any_typ", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_data_size_any_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "nothing_typ", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @nothing_typ], "offset_tbl" = [0 : i32, 10 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 15112287910276180238 : i64, "base_typ" = !llvm.array<0 x i8>, "data_size_fn" = "_data_size_nothing_typ", "box_fn" = "_box_nothing_typ", "unbox_fn" = "_unbox_nothing_typ", "size_fn" = "_data_size_nothing_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "coroutine_typ", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @coroutine_typ], "offset_tbl" = [0 : i32, 10 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 7194361020959218064 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_coroutine_typ", "box_fn" = "_box_coroutine_typ", "unbox_fn" = "_unbox_coroutine_typ", "size_fn" = "_data_size_coroutine_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "function_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, @function_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 7927147055246173914 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_function_typ", "box_fn" = "_box_function_typ", "unbox_fn" = "_unbox_function_typ", "size_fn" = "_data_size_function_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "buffer_typ", "methods" = [], "hash_tbl" = [@Object, @buffer_typ, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 18128551326514141379 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_buffer_typ", "box_fn" = "_box_buffer_typ", "unbox_fn" = "_unbox_buffer_typ", "size_fn" = "_data_size_buffer_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "tuple_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @tuple_typ], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 3422634369532007740 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_tuple_typ", "box_fn" = "_box_tuple_typ", "unbox_fn" = "_unbox_tuple_typ", "size_fn" = "_data_size_tuple_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "union_typ", "methods" = [], "hash_tbl" = [@union_typ, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 10903510294711884876 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, i8)>, "data_size_fn" = "_data_size_union_typ", "box_fn" = "_box_union_typ", "unbox_fn" = "_unbox_union_typ", "size_fn" = "_data_size_union_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "Object", "methods" = [], "hash_tbl" = [@Object, @any_typ], "offset_tbl" = [10 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 3282773614056351330 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Object", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Object", "types" = []} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_bool_typ", "types" = [i1]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_bool_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_bool_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_i8_typ", "types" = [i8]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_i8_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_i8_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_i32_typ", "types" = [i32]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_i32_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_i32_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_i64_typ", "types" = [i64]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_i64_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_i64_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_i128_typ", "types" = [i128]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_i128_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_i128_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_f64_typ", "types" = [f64]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_f64_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_f64_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_nil_typ", "types" = [!llvm.array<0 x i8>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_nil_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_nil_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_any_typ", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_nothing_typ", "types" = [!llvm.array<0 x i8>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_nothing_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_nothing_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_coroutine_typ", "types" = [!llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_coroutine_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_coroutine_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_function_typ", "types" = [!llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_function_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_function_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_buffer_typ", "types" = [!llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_buffer_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_buffer_typ"} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_tuple_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_tuple_typ"} : () -> ()
    "mid.box_union_def"() {"meth_name" = "_box_union_typ"} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "iteration"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Pair", "methods" = [@Pair_field_Pair_0, @Pair_field_Pair_1, @Pair_field_first, @Pair_field_second, @Pair_B_init_firstT_secondU, @Pair_B_first_, @Pair_B_second_, @Pair_init_firstT_secondU, @Pair_first_, @Pair_second_], "hash_tbl" = [@Object, @any_typ, @Pair, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9197944775169318296 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Pair", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Container", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9056556090793359372 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Container", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Iterator", "methods" = [], "hash_tbl" = [@Iterator, @any_typ, @Container, @Object], "offset_tbl" = [10 : i32, 10 : i32, 13 : i32, 13 : i32], "prime" = 4611686018427388349 : i64, "hash_id" = 8673632051301757104 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Iterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Iterable", "methods" = [], "hash_tbl" = [@Iterable, @any_typ, @Container, @Object], "offset_tbl" = [10 : i32, 10 : i32, 35 : i32, 35 : i32], "prime" = 4611686018427388477 : i64, "hash_id" = 3037712219555723519 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Iterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Enumeration", "methods" = [@Enumeration_field_Enumeration_0, @Enumeration_field_Enumeration_1, @Enumeration_field_iterable, @Enumeration_B_init_iterableIterableT, @Enumeration_B_iterator_, @Enumeration_B_each_fFunctionT_to_Nothing, @Enumeration_B_reduce_accumulatorT_fFunctionT._T_to_T, @Enumeration_B_all_fFunctionT_to_Bool, @Enumeration_B_any_fFunctionT_to_Bool, @Enumeration_B_enumerate_, @Enumeration_B_map_fFunctionT_to_U, @Enumeration_B_filter_fFunctionT_to_Bool, @Enumeration_B_chain_otherIterableT, @Enumeration_B_interleave_otherIterableT, @Enumeration_B_zip_otherIterableU, @Enumeration_B_product_otherIterableU, @Enumeration_init_iterableIterableT, @Enumeration_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Enumeration_field_Enumeration_1, @Enumeration_B_iterator_, @Enumeration_B_each_fFunctionT_to_Nothing, @Enumeration_B_reduce_accumulatorT_fFunctionT._T_to_T, @Enumeration_B_all_fFunctionT_to_Bool, @Enumeration_B_any_fFunctionT_to_Bool, @Enumeration_B_enumerate_, @Enumeration_B_map_fFunctionT_to_U, @Enumeration_B_filter_fFunctionT_to_Bool, @Enumeration_B_chain_otherIterableT, @Enumeration_B_interleave_otherIterableT, @Enumeration_B_zip_otherIterableU, @Enumeration_B_product_otherIterableU, @Enumeration_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Enumeration, @Object], "offset_tbl" = [10 : i32, 39 : i32, 0 : i32, 0 : i32, 64 : i32, 0 : i32, 10 : i32, 64 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 15641546954577583839 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Enumeration", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Enumerator", "methods" = [@Enumerator_field_Enumerator_0, @Enumerator_field_Enumerator_1, @Enumerator_field_iterator, @Enumerator_field_index, @Enumerator_B_init_iteratorIteratorT, @Enumerator_B_next_, @Enumerator_init_iteratorIteratorT, @Enumerator_next_, @Enumerator_field_Enumerator_1, @Enumerator_B_next_, @Enumerator_next_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @Enumerator], "offset_tbl" = [0 : i32, 0 : i32, 21 : i32, 18 : i32, 21 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 15011521941800397744 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_Enumerator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MapIterable", "methods" = [@MapIterable_field_MapIterable_0, @MapIterable_field_MapIterable_1, @MapIterable_field_iterable, @MapIterable_field_f, @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, @MapIterable_B_iterator_, @MapIterable_B_each_fFunctionT_to_Nothing, @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable_B_all_fFunctionT_to_Bool, @MapIterable_B_any_fFunctionT_to_Bool, @MapIterable_B_enumerate_, @MapIterable_B_map_fFunctionT_to_U, @MapIterable_B_filter_fFunctionT_to_Bool, @MapIterable_B_chain_otherIterableT, @MapIterable_B_interleave_otherIterableT, @MapIterable_B_zip_otherIterableU, @MapIterable_B_product_otherIterableU, @MapIterable_init_iterableIterableT_fFunctionT_to_U, @MapIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @MapIterable_field_MapIterable_1, @MapIterable_B_iterator_, @MapIterable_B_each_fFunctionT_to_Nothing, @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable_B_all_fFunctionT_to_Bool, @MapIterable_B_any_fFunctionT_to_Bool, @MapIterable_B_enumerate_, @MapIterable_B_map_fFunctionT_to_U, @MapIterable_B_filter_fFunctionT_to_Bool, @MapIterable_B_chain_otherIterableT, @MapIterable_B_interleave_otherIterableT, @MapIterable_B_zip_otherIterableU, @MapIterable_B_product_otherIterableU, @MapIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Container, @MapIterable, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @any_typ], "offset_tbl" = [0 : i32, 65 : i32, 10 : i32, 40 : i32, 65 : i32, 0 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 10957973502106259894 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MapIterator", "methods" = [@MapIterator_field_MapIterator_0, @MapIterator_field_MapIterator_1, @MapIterator_field_iterator, @MapIterator_field_f, @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, @MapIterator_B_next_, @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, @MapIterator_next_, @MapIterator_field_MapIterator_1, @MapIterator_B_next_, @MapIterator_next_], "hash_tbl" = [@Object, @any_typ, @MapIterator, @Container, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [21 : i32, 10 : i32, 10 : i32, 21 : i32, 0 : i32, 18 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18300190591082816834 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FilterIterable", "methods" = [@FilterIterable_field_FilterIterable_0, @FilterIterable_field_iterable, @FilterIterable_field_f, @FilterIterable_B_init_iterableIterableT_fFunctionT_to_Bool, @FilterIterable_B_iterator_, @FilterIterable_B_each_fFunctionT_to_Nothing, @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable_B_all_fFunctionT_to_Bool, @FilterIterable_B_any_fFunctionT_to_Bool, @FilterIterable_B_enumerate_, @FilterIterable_B_map_fFunctionT_to_U, @FilterIterable_B_filter_fFunctionT_to_Bool, @FilterIterable_B_chain_otherIterableT, @FilterIterable_B_interleave_otherIterableT, @FilterIterable_B_zip_otherIterableU, @FilterIterable_B_product_otherIterableU, @FilterIterable_init_iterableIterableT_fFunctionT_to_Bool, @FilterIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @FilterIterable_field_FilterIterable_0, @FilterIterable_B_iterator_, @FilterIterable_B_each_fFunctionT_to_Nothing, @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable_B_all_fFunctionT_to_Bool, @FilterIterable_B_any_fFunctionT_to_Bool, @FilterIterable_B_enumerate_, @FilterIterable_B_map_fFunctionT_to_U, @FilterIterable_B_filter_fFunctionT_to_Bool, @FilterIterable_B_chain_otherIterableT, @FilterIterable_B_interleave_otherIterableT, @FilterIterable_B_zip_otherIterableU, @FilterIterable_B_product_otherIterableU, @FilterIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @FilterIterable, 18446744073709551615 : i64, @Container, @Iterable, 18446744073709551615 : i64], "offset_tbl" = [0 : i32, 64 : i32, 10 : i32, 10 : i32, 0 : i32, 64 : i32, 39 : i32, 0 : i32], "prime" = 4611686018427388319 : i64, "hash_id" = 8498466713076104350 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FilterIterator", "methods" = [@FilterIterator_field_FilterIterator_0, @FilterIterator_field_iterator, @FilterIterator_field_f, @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_Bool, @FilterIterator_B_next_, @FilterIterator_init_iteratorIteratorT_fFunctionT_to_Bool, @FilterIterator_next_, @FilterIterator_field_FilterIterator_0, @FilterIterator_B_next_, @FilterIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterator, @FilterIterator, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 0 : i32, 17 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17225378576809247733 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ChainIterable", "methods" = [@ChainIterable_field_ChainIterable_0, @ChainIterable_field_first, @ChainIterable_field_second, @ChainIterable_B_init_firstIterableT_secondIterableT, @ChainIterable_B_iterator_, @ChainIterable_B_each_fFunctionT_to_Nothing, @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable_B_all_fFunctionT_to_Bool, @ChainIterable_B_any_fFunctionT_to_Bool, @ChainIterable_B_enumerate_, @ChainIterable_B_map_fFunctionT_to_U, @ChainIterable_B_filter_fFunctionT_to_Bool, @ChainIterable_B_chain_otherIterableT, @ChainIterable_B_interleave_otherIterableT, @ChainIterable_B_zip_otherIterableU, @ChainIterable_B_product_otherIterableU, @ChainIterable_init_firstIterableT_secondIterableT, @ChainIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ChainIterable_field_ChainIterable_0, @ChainIterable_B_iterator_, @ChainIterable_B_each_fFunctionT_to_Nothing, @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable_B_all_fFunctionT_to_Bool, @ChainIterable_B_any_fFunctionT_to_Bool, @ChainIterable_B_enumerate_, @ChainIterable_B_map_fFunctionT_to_U, @ChainIterable_B_filter_fFunctionT_to_Bool, @ChainIterable_B_chain_otherIterableT, @ChainIterable_B_interleave_otherIterableT, @ChainIterable_B_zip_otherIterableU, @ChainIterable_B_product_otherIterableU, @ChainIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, @ChainIterable, @Container, 18446744073709551615 : i64, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 39 : i32, 0 : i32, 10 : i32, 64 : i32, 0 : i32, 0 : i32, 64 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 16076497015278503801 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ChainIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ChainIterator", "methods" = [@ChainIterator_field_ChainIterator_0, @ChainIterator_field_first, @ChainIterator_field_second, @ChainIterator_field_on_first, @ChainIterator_B_init_firstIteratorT_secondIteratorT, @ChainIterator_B_next_, @ChainIterator_init_firstIteratorT_secondIteratorT, @ChainIterator_next_, @ChainIterator_field_ChainIterator_0, @ChainIterator_B_next_, @ChainIterator_next_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @ChainIterator], "offset_tbl" = [0 : i32, 0 : i32, 21 : i32, 18 : i32, 21 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6043157723929225452 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_ChainIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "InterleaveIterable", "methods" = [@InterleaveIterable_field_InterleaveIterable_0, @InterleaveIterable_field_first, @InterleaveIterable_field_second, @InterleaveIterable_B_init_firstIterableT_secondIterableT, @InterleaveIterable_B_iterator_, @InterleaveIterable_B_each_fFunctionT_to_Nothing, @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable_B_all_fFunctionT_to_Bool, @InterleaveIterable_B_any_fFunctionT_to_Bool, @InterleaveIterable_B_enumerate_, @InterleaveIterable_B_map_fFunctionT_to_U, @InterleaveIterable_B_filter_fFunctionT_to_Bool, @InterleaveIterable_B_chain_otherIterableT, @InterleaveIterable_B_interleave_otherIterableT, @InterleaveIterable_B_zip_otherIterableU, @InterleaveIterable_B_product_otherIterableU, @InterleaveIterable_init_firstIterableT_secondIterableT, @InterleaveIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @InterleaveIterable_field_InterleaveIterable_0, @InterleaveIterable_B_iterator_, @InterleaveIterable_B_each_fFunctionT_to_Nothing, @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable_B_all_fFunctionT_to_Bool, @InterleaveIterable_B_any_fFunctionT_to_Bool, @InterleaveIterable_B_enumerate_, @InterleaveIterable_B_map_fFunctionT_to_U, @InterleaveIterable_B_filter_fFunctionT_to_Bool, @InterleaveIterable_B_chain_otherIterableT, @InterleaveIterable_B_interleave_otherIterableT, @InterleaveIterable_B_zip_otherIterableU, @InterleaveIterable_B_product_otherIterableU, @InterleaveIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Container, @InterleaveIterable, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @any_typ], "offset_tbl" = [0 : i32, 64 : i32, 10 : i32, 39 : i32, 64 : i32, 0 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 4936782714255954462 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InterleaveIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "InterleaveIterator", "methods" = [@InterleaveIterator_field_InterleaveIterator_0, @InterleaveIterator_field_first, @InterleaveIterator_field_second, @InterleaveIterator_field_on_first, @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, @InterleaveIterator_B_next_, @InterleaveIterator_init_firstIteratorT_secondIteratorT, @InterleaveIterator_next_, @InterleaveIterator_field_InterleaveIterator_0, @InterleaveIterator_B_next_, @InterleaveIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, @InterleaveIterator, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [21 : i32, 10 : i32, 0 : i32, 21 : i32, 10 : i32, 18 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14522079715461027111 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_InterleaveIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ZipIterable", "methods" = [@ZipIterable_field_ZipIterable_0, @ZipIterable_field_ZipIterable_1, @ZipIterable_field_ZipIterable_2, @ZipIterable_field_first, @ZipIterable_field_second, @ZipIterable_B_init_firstIterableT_secondIterableU, @ZipIterable_B_iterator_, @ZipIterable_B_each_fFunctionT_to_Nothing, @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable_B_all_fFunctionT_to_Bool, @ZipIterable_B_any_fFunctionT_to_Bool, @ZipIterable_B_enumerate_, @ZipIterable_B_map_fFunctionT_to_U, @ZipIterable_B_filter_fFunctionT_to_Bool, @ZipIterable_B_chain_otherIterableT, @ZipIterable_B_interleave_otherIterableT, @ZipIterable_B_zip_otherIterableU, @ZipIterable_B_product_otherIterableU, @ZipIterable_init_firstIterableT_secondIterableU, @ZipIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ZipIterable_field_ZipIterable_2, @ZipIterable_B_iterator_, @ZipIterable_B_each_fFunctionT_to_Nothing, @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable_B_all_fFunctionT_to_Bool, @ZipIterable_B_any_fFunctionT_to_Bool, @ZipIterable_B_enumerate_, @ZipIterable_B_map_fFunctionT_to_U, @ZipIterable_B_filter_fFunctionT_to_Bool, @ZipIterable_B_chain_otherIterableT, @ZipIterable_B_interleave_otherIterableT, @ZipIterable_B_zip_otherIterableU, @ZipIterable_B_product_otherIterableU, @ZipIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @ZipIterable, @Object], "offset_tbl" = [10 : i32, 41 : i32, 0 : i32, 0 : i32, 66 : i32, 0 : i32, 10 : i32, 66 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 35232740166152944 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ZipIterator", "methods" = [@ZipIterator_field_ZipIterator_0, @ZipIterator_field_ZipIterator_1, @ZipIterator_field_ZipIterator_2, @ZipIterator_field_first, @ZipIterator_field_second, @ZipIterator_B_init_firstIteratorT_secondIteratorU, @ZipIterator_B_next_, @ZipIterator_init_firstIteratorT_secondIteratorU, @ZipIterator_next_, @ZipIterator_field_ZipIterator_2, @ZipIterator_B_next_, @ZipIterator_next_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @ZipIterator], "offset_tbl" = [0 : i32, 0 : i32, 22 : i32, 19 : i32, 22 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 16305629627969966298 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ProductIterable", "methods" = [@ProductIterable_field_ProductIterable_0, @ProductIterable_field_ProductIterable_1, @ProductIterable_field_ProductIterable_2, @ProductIterable_field_first, @ProductIterable_field_second, @ProductIterable_B_init_firstIterableT_secondIterableU, @ProductIterable_B_iterator_, @ProductIterable_B_each_fFunctionT_to_Nothing, @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable_B_all_fFunctionT_to_Bool, @ProductIterable_B_any_fFunctionT_to_Bool, @ProductIterable_B_enumerate_, @ProductIterable_B_map_fFunctionT_to_U, @ProductIterable_B_filter_fFunctionT_to_Bool, @ProductIterable_B_chain_otherIterableT, @ProductIterable_B_interleave_otherIterableT, @ProductIterable_B_zip_otherIterableU, @ProductIterable_B_product_otherIterableU, @ProductIterable_init_firstIterableT_secondIterableU, @ProductIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ProductIterable_field_ProductIterable_2, @ProductIterable_B_iterator_, @ProductIterable_B_each_fFunctionT_to_Nothing, @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable_B_all_fFunctionT_to_Bool, @ProductIterable_B_any_fFunctionT_to_Bool, @ProductIterable_B_enumerate_, @ProductIterable_B_map_fFunctionT_to_U, @ProductIterable_B_filter_fFunctionT_to_Bool, @ProductIterable_B_chain_otherIterableT, @ProductIterable_B_interleave_otherIterableT, @ProductIterable_B_zip_otherIterableU, @ProductIterable_B_product_otherIterableU, @ProductIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, @ProductIterable, @Container, 18446744073709551615 : i64, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [66 : i32, 10 : i32, 10 : i32, 66 : i32, 0 : i32, 41 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4128338911757318636 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ProductIterator", "methods" = [@ProductIterator_field_ProductIterator_0, @ProductIterator_field_ProductIterator_1, @ProductIterator_field_ProductIterator_2, @ProductIterator_field_first_iterator, @ProductIterator_field_second_iterator, @ProductIterator_field_second_iterable, @ProductIterator_field_current_first, @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, @ProductIterator_B_next_, @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, @ProductIterator_next_, @ProductIterator_field_ProductIterator_2, @ProductIterator_B_next_, @ProductIterator_next_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, @Container, @Object, 18446744073709551615 : i64, @ProductIterator], "offset_tbl" = [10 : i32, 0 : i32, 21 : i32, 0 : i32, 24 : i32, 24 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 1697250377212095568 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_ProductIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Pair", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Pair_field_Pair_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Pair_field_Pair_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Pair_getter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Pair_setter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Pair_field_first", "getter_name" = "Pair_getter_first", "setter_name" = "Pair_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Pair_getter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Pair_setter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Pair_field_second", "getter_name" = "Pair_getter_second", "setter_name" = "Pair_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : !llvm.struct<(!llvm.ptr, i160)>, %4 : !llvm.struct<(!llvm.ptr, i160)>):
      %5 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %6 = "hi.cast"(%5) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %7 = "mid.wrap"(%3) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Pair">
      %8 = "hi.cast"(%7) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      %9 = "hi.cast"(%8) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      "mid.set_field"(%6, %9) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, !hi.type_param<"T", !hi.any, "Pair">) -> ()
      %10 = "mid.wrap"(%4) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"U", !hi.any, "Pair">
      %11 = "hi.cast"(%10) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      %12 = "hi.cast"(%11) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      "mid.set_field"(%6, %12) {"offset" = 3 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, !hi.type_param<"U", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_init_firstT_secondU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %17 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb5:
      %18 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %19 = "mid.checkflag"(%18) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %20 = "llvm.load"(%19) : (!hi.bool) -> i1
      "cf.cond_br"(%20) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb2:
      %21 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %22 = "mid.checkflag"(%21) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %23 = "llvm.load"(%22) : (!hi.bool) -> i1
      "cf.cond_br"(%23) [^bb5, ^bb5] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %24 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %25 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %26 = "llvm.getelementptr"(%24, %25) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %27 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %28 = "llvm.getelementptr"(%26, %27) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%28) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_init_firstT_secondU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb6(%29 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %30 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %31 : !llvm.ptr):
      %32 = "mid.wrap"(%29) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %33 = "hi.cast"(%32) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %34 = "mid.get_field"(%33) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.type_param<"T", !hi.any, "Pair">
      %35 = "hi.cast"(%34) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      %36 = "hi.cast"(%35) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      "mid.return"(%36) : (!hi.type_param<"T", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_first_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb7(%37 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %38 : !llvm.ptr):
      %39 = "mid.invariant"(%38) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %40 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb8:
      %41 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%41, %40) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb9:
      %42 = "llvm.extractvalue"(%37) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %43 = "llvm.load"(%40) : (!llvm.ptr) -> i32
      %44 = "llvm.getelementptr"(%42, %43) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %45 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%46) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_first_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb10(%47 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %48 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %49 : !llvm.ptr):
      %50 = "mid.wrap"(%47) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %51 = "hi.cast"(%50) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %52 = "mid.get_field"(%51) {"offset" = 3 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.type_param<"U", !hi.any, "Pair">
      %53 = "hi.cast"(%52) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      %54 = "hi.cast"(%53) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      "mid.return"(%54) : (!hi.type_param<"U", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_second_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb11(%55 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %56 : !llvm.ptr):
      %57 = "mid.invariant"(%56) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %58 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb12] : () -> ()
    ^bb12:
      %59 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%59, %58) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %60 = "llvm.extractvalue"(%55) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %61 = "llvm.load"(%58) : (!llvm.ptr) -> i32
      %62 = "llvm.getelementptr"(%60, %61) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %63 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %64 = "llvm.getelementptr"(%62, %63) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%64) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_second_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Container", "types" = []} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Iterator", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterator_field_Iterator_0"} : () -> ()
    "mid.func"() ({
    ^bb14(%65 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %66 : !llvm.ptr):
      %67 = "mid.invariant"(%66) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %68 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb15] : () -> ()
    ^bb15:
      %69 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%69, %68) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      %70 = "llvm.extractvalue"(%65) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %71 = "llvm.load"(%68) : (!llvm.ptr) -> i32
      %72 = "llvm.getelementptr"(%70, %71) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %73 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %74 = "llvm.getelementptr"(%72, %73) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%74) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Iterable", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterable_field_Iterable_0"} : () -> ()
    "mid.func"() ({
    ^bb17(%75 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %76 : !llvm.ptr):
      %77 = "mid.invariant"(%76) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %78 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      %79 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%79, %78) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      %80 = "llvm.extractvalue"(%75) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %81 = "llvm.load"(%78) : (!llvm.ptr) -> i32
      %82 = "llvm.getelementptr"(%80, %81) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %83 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %84 = "llvm.getelementptr"(%82, %83) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%84) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb20(%85 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %86 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %87 : !llvm.ptr, %88 : !llvm.struct<(!llvm.ptr)>):
      %89 = "mid.wrap"(%85) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %90 = "hi.cast"(%89) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %91 = "mid.wrap"(%88) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>
      %92 = "hi.cast"(%91) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>
      %93 = "mid.unwrap"(%90) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %94 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %95 = "mid.method_call"(%94, %93) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %96 = "hi.cast"(%95) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %97 = "mid.refer"(%96) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %98 = "mid.unwrap"(%97) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %99 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %100 = "mid.method_call"(%99, %98) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %101 = "hi.cast"(%100) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %102 = "mid.get_type_field"(%90) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
        %103 = "mid.checkflag"(%101) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %104 = "mid.unwrap"(%103) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %105 = "hi.cast"(%101) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %106 = "hi.cast"(%105) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %107 = "mid.unwrap"(%106) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %108 = "mid.unwrap"(%92) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>) -> !llvm.ptr
        "mid.fptr_call"(%108, %107) {"ret_type" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %109 = "hi.cast"(%105) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%101, %109) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
      }) : () -> ()
    }) {"func_name" = "Iterable_each_fFunctionT_to_Nothing", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb21(%110 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %111 : !llvm.ptr):
      %112 = "mid.invariant"(%111) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %113 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %114 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%114, %113) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb24] : () -> ()
    ^bb22:
      %115 = "llvm.getelementptr"(%111) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %116 = "mid.checkflag"(%115) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %117 = "llvm.load"(%116) : (!hi.bool) -> i1
      "cf.cond_br"(%117) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %118 = "llvm.extractvalue"(%110) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %119 = "llvm.load"(%113) : (!llvm.ptr) -> i32
      %120 = "llvm.getelementptr"(%118, %119) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %121 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %122 = "llvm.getelementptr"(%120, %121) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%122) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb25(%123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %125 : !llvm.ptr, %126 : !llvm.struct<(!llvm.ptr, i160)>, %127 : !llvm.struct<(!llvm.ptr)>):
      %128 = "mid.wrap"(%123) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %129 = "hi.cast"(%128) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %130 = "mid.wrap"(%126) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Iterable">
      %131 = "hi.cast"(%130) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
      %132 = "mid.wrap"(%127) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>
      %133 = "hi.cast"(%132) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>
      %134 = "mid.unwrap"(%129) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %135 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %136 = "mid.method_call"(%135, %134) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %137 = "hi.cast"(%136) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %138 = "mid.refer"(%137) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %139 = "mid.unwrap"(%138) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %140 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %141 = "mid.method_call"(%140, %139) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %142 = "hi.cast"(%141) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %143 = "mid.get_type_field"(%129) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
        %144 = "mid.checkflag"(%142) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %145 = "mid.unwrap"(%144) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %146 = "hi.cast"(%142) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %147 = "hi.cast"(%131) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %148 = "mid.unwrap"(%147) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %149 = "hi.cast"(%146) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %150 = "mid.unwrap"(%149) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %151 = "mid.unwrap"(%133) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>) -> !llvm.ptr
        %152 = "mid.fptr_call"(%151, %148, %150) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %153 = "hi.cast"(%152) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%131, %153) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
        %154 = "hi.cast"(%146) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%142, %154) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
      }) : () -> ()
      %155 = "hi.cast"(%131) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
      "mid.return"(%155) : (!hi.type_param<"T", !hi.any, "Iterable">) -> ()
    }) {"func_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb26(%156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %157 : !llvm.ptr):
      %158 = "mid.invariant"(%157) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %159 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb27] : () -> ()
    ^bb28:
      %160 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%160, %159) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb29] : () -> ()
    ^bb30:
      %161 = "llvm.getelementptr"(%157) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %162 = "mid.checkflag"(%161) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %163 = "llvm.load"(%162) : (!hi.bool) -> i1
      "cf.cond_br"(%163) [^bb28, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %164 = "llvm.getelementptr"(%157) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %165 = "mid.checkflag"(%164) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %166 = "llvm.load"(%165) : (!hi.bool) -> i1
      "cf.cond_br"(%166) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb29:
      %167 = "llvm.extractvalue"(%156) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %168 = "llvm.load"(%159) : (!llvm.ptr) -> i32
      %169 = "llvm.getelementptr"(%167, %168) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %170 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %171 = "llvm.getelementptr"(%169, %170) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%171) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb31(%172 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %173 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %174 : !llvm.ptr, %175 : !llvm.struct<(!llvm.ptr)>):
      %176 = "mid.wrap"(%172) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %177 = "hi.cast"(%176) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %178 = "mid.wrap"(%175) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %179 = "hi.cast"(%178) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %180 = "mid.unwrap"(%177) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %181 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %182 = "mid.method_call"(%181, %180) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %183 = "hi.cast"(%182) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %184 = "mid.refer"(%183) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %185 = "mid.unwrap"(%184) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %186 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %187 = "mid.method_call"(%186, %185) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %188 = "hi.cast"(%187) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %189 = "mid.get_type_field"(%177) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
        %190 = "mid.checkflag"(%188) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %191 = "mid.unwrap"(%190) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %192 = "hi.cast"(%188) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %193 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %194 = "hi.cast"(%192) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %195 = "mid.unwrap"(%194) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %196 = "mid.unwrap"(%179) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.ptr
        %197 = "mid.fptr_call"(%196, %195) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %198 = "mid.unwrap"(%193) : (!hi.bool) -> i1
        %199 = "mid.unwrap"(%197) : (!hi.bool) -> i1
        %200 = "mid.comparison"(%198, %199) {"op" = "EQ"} : (i1, i1) -> i1
        %201 = "mid.wrap"(%200) : (i1) -> !hi.bool
        %202 = "mid.unwrap"(%201) : (!hi.bool) -> i1
        "mid.if"(%202) ({
          %203 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %204 = "hi.cast"(%203) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%204) : (!hi.bool) -> ()
        }) : (i1) -> ()
        %205 = "hi.cast"(%192) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%188, %205) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
      }) : () -> ()
      %206 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %207 = "hi.cast"(%206) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%207) : (!hi.bool) -> ()
    }) {"func_name" = "Iterable_all_fFunctionT_to_Bool", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb32(%208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %209 : !llvm.ptr):
      %210 = "mid.invariant"(%209) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %211 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb33] : () -> ()
    ^bb34:
      %212 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%212, %211) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb35] : () -> ()
    ^bb33:
      %213 = "llvm.getelementptr"(%209) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %214 = "mid.checkflag"(%213) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %215 = "llvm.load"(%214) : (!hi.bool) -> i1
      "cf.cond_br"(%215) [^bb34, ^bb34] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb35:
      %216 = "llvm.extractvalue"(%208) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %217 = "llvm.load"(%211) : (!llvm.ptr) -> i32
      %218 = "llvm.getelementptr"(%216, %217) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %219 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %220 = "llvm.getelementptr"(%218, %219) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%220) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb36(%221 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %222 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %223 : !llvm.ptr, %224 : !llvm.struct<(!llvm.ptr)>):
      %225 = "mid.wrap"(%221) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %226 = "hi.cast"(%225) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %227 = "mid.wrap"(%224) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %228 = "hi.cast"(%227) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %229 = "mid.unwrap"(%226) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %230 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %231 = "mid.method_call"(%230, %229) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %232 = "hi.cast"(%231) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %233 = "mid.refer"(%232) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %234 = "mid.unwrap"(%233) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %235 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %236 = "mid.method_call"(%235, %234) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %237 = "hi.cast"(%236) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %238 = "mid.get_type_field"(%226) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
        %239 = "mid.checkflag"(%237) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %240 = "mid.unwrap"(%239) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %241 = "hi.cast"(%237) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %242 = "hi.cast"(%241) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %243 = "mid.unwrap"(%242) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %244 = "mid.unwrap"(%228) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.ptr
        %245 = "mid.fptr_call"(%244, %243) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %246 = "mid.unwrap"(%245) : (!hi.bool) -> i1
        "mid.if"(%246) ({
          %247 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %248 = "hi.cast"(%247) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%248) : (!hi.bool) -> ()
        }) : (i1) -> ()
        %249 = "hi.cast"(%241) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%237, %249) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
      }) : () -> ()
      %250 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %251 = "hi.cast"(%250) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%251) : (!hi.bool) -> ()
    }) {"func_name" = "Iterable_any_fFunctionT_to_Bool", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb37(%252 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %253 : !llvm.ptr):
      %254 = "mid.invariant"(%253) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %255 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb39:
      %256 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%256, %255) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb40] : () -> ()
    ^bb38:
      %257 = "llvm.getelementptr"(%253) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %258 = "mid.checkflag"(%257) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %259 = "llvm.load"(%258) : (!hi.bool) -> i1
      "cf.cond_br"(%259) [^bb39, ^bb39] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb40:
      %260 = "llvm.extractvalue"(%252) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %261 = "llvm.load"(%255) : (!llvm.ptr) -> i32
      %262 = "llvm.getelementptr"(%260, %261) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %263 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %264 = "llvm.getelementptr"(%262, %263) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%264) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb41(%265 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %266 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %267 : !llvm.ptr):
      %268 = "mid.wrap"(%265) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %269 = "hi.cast"(%268) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %270 = "mid.unwrap"(%269) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %271 = "mid.get_type_field"(%269) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %272 = "mid.get_type_field"(%269) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %273 = "mid.parameterization"(%272) {"id_hierarchy" = ["Pair", ["i32_typ"], [0 : i32]], "name_hierarchy" = ["Pairi32._Iterable.T_subtype_Any", ["i32"], ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %274 = "mid.new"(%271, %273) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Enumeration", "num_data_fields" = 1 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %275 = "hi.cast"(%269) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %276 = "mid.unwrap"(%275) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %277 = "mid.unwrap"(%274) : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %278 = "mid.get_type_field"(%269) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %279 = "mid.parameterization"(%278) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %280 = "mid.parameterizations_array"(%279) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%280, %277, %276) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %281 = "hi.cast"(%274) {"from_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Iterable">]>]>, "from_typ_name" = "Enumeration", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Iterable">]>]>
      "mid.return"(%281) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_enumerate_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb42(%282 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %283 : !llvm.ptr):
      %284 = "mid.invariant"(%283) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %285 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      %286 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%286, %285) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb44] : () -> ()
    ^bb44:
      %287 = "llvm.extractvalue"(%282) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %288 = "llvm.load"(%285) : (!llvm.ptr) -> i32
      %289 = "llvm.getelementptr"(%287, %288) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %290 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %291 = "llvm.getelementptr"(%289, %290) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%291) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb45(%292 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %293 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %294 : !llvm.ptr, %295 : !llvm.struct<(!llvm.ptr)>):
      %296 = "mid.wrap"(%292) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %297 = "hi.cast"(%296) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %298 = "mid.wrap"(%295) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>
      %299 = "hi.cast"(%298) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>
      %300 = "mid.unwrap"(%297) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %301 = "mid.unwrap"(%299) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
      %302 = "mid.get_type_field"(%297) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %303 = "llvm.getelementptr"(%294) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %304 = "llvm.load"(%303) : (!llvm.ptr) -> !llvm.ptr
      %305 = "mid.parameterization_indexation"(%304) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %306 = "mid.new"(%302, %305) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %307 = "hi.cast"(%297) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %308 = "mid.unwrap"(%307) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %309 = "hi.cast"(%299) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %310 = "mid.unwrap"(%309) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !llvm.struct<(!llvm.ptr)>
      %311 = "mid.unwrap"(%306) : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %312 = "mid.get_type_field"(%297) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %313 = "mid.parameterization"(%312) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %314 = "llvm.getelementptr"(%294) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %315 = "llvm.load"(%314) : (!llvm.ptr) -> !llvm.ptr
      %316 = "mid.parameterization_indexation"(%315) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %317 = "mid.get_type_field"(%297) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %318 = "mid.parameterization"(%316, %317) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionIterable.T_subtype_Any_to_Iterable.U_subtype_Any", ["Iterable.U_subtype_Any"], ["Iterable.T_subtype_Any"]]} : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
      %319 = "mid.parameterizations_array"(%313, %318) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%319, %311, %308, %310) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %320 = "hi.cast"(%306) {"from_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      "mid.return"(%320) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb46(%321 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %322 : !llvm.ptr):
      %323 = "mid.invariant"(%322) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %324 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb47] : () -> ()
    ^bb48:
      %325 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%325, %324) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb49] : () -> ()
    ^bb47:
      %326 = "llvm.getelementptr"(%322) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %327 = "mid.checkflag"(%326) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %328 = "llvm.load"(%327) : (!hi.bool) -> i1
      "cf.cond_br"(%328) [^bb48, ^bb48] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb49:
      %329 = "llvm.extractvalue"(%321) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %330 = "llvm.load"(%324) : (!llvm.ptr) -> i32
      %331 = "llvm.getelementptr"(%329, %330) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %332 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %333 = "llvm.getelementptr"(%331, %332) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%333) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb50(%334 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %335 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %336 : !llvm.ptr, %337 : !llvm.struct<(!llvm.ptr)>):
      %338 = "mid.wrap"(%334) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %339 = "hi.cast"(%338) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %340 = "mid.wrap"(%337) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %341 = "hi.cast"(%340) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %342 = "mid.unwrap"(%339) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %343 = "mid.unwrap"(%341) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %344 = "mid.get_type_field"(%339) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %345 = "mid.new"(%344) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %346 = "hi.cast"(%339) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %347 = "mid.unwrap"(%346) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %348 = "hi.cast"(%341) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %349 = "mid.unwrap"(%348) : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %350 = "mid.unwrap"(%345) : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %351 = "mid.get_type_field"(%339) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %352 = "mid.parameterization"(%351) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %353 = "mid.get_type_field"(%339) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %354 = "mid.parameterization"(%353) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionIterable.T_subtype_Any_to_Bool", ["Bool"], ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %355 = "mid.parameterizations_array"(%352, %354) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%355, %350, %347, %349) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %356 = "hi.cast"(%345) {"from_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%356) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_filter_fFunctionT_to_Bool", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb51(%357 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %358 : !llvm.ptr):
      %359 = "mid.invariant"(%358) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %360 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb52] : () -> ()
    ^bb53:
      %361 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%361, %360) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb54] : () -> ()
    ^bb52:
      %362 = "llvm.getelementptr"(%358) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %363 = "mid.checkflag"(%362) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %364 = "llvm.load"(%363) : (!hi.bool) -> i1
      "cf.cond_br"(%364) [^bb53, ^bb53] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb54:
      %365 = "llvm.extractvalue"(%357) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %366 = "llvm.load"(%360) : (!llvm.ptr) -> i32
      %367 = "llvm.getelementptr"(%365, %366) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %368 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %369 = "llvm.getelementptr"(%367, %368) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%369) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb55(%370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %371 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %372 : !llvm.ptr, %373 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %374 = "mid.wrap"(%370) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %375 = "hi.cast"(%374) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %376 = "mid.wrap"(%373) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %377 = "hi.cast"(%376) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %378 = "mid.unwrap"(%375) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %379 = "mid.unwrap"(%377) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %380 = "mid.get_type_field"(%375) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %381 = "mid.new"(%380) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %382 = "hi.cast"(%375) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %383 = "mid.unwrap"(%382) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %384 = "hi.cast"(%377) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %385 = "mid.unwrap"(%384) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %386 = "mid.unwrap"(%381) : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %387 = "mid.get_type_field"(%375) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %388 = "mid.parameterization"(%387) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %389 = "mid.get_type_field"(%375) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %390 = "mid.parameterization"(%389) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %391 = "mid.parameterizations_array"(%388, %390) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%391, %386, %383, %385) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %392 = "hi.cast"(%381) {"from_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%392) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_chain_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb56(%393 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %394 : !llvm.ptr):
      %395 = "mid.invariant"(%394) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %396 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb57] : () -> ()
    ^bb58:
      %397 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%397, %396) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb59] : () -> ()
    ^bb57:
      %398 = "llvm.getelementptr"(%394) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %399 = "mid.checkflag"(%398) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %400 = "llvm.load"(%399) : (!hi.bool) -> i1
      "cf.cond_br"(%400) [^bb58, ^bb58] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb59:
      %401 = "llvm.extractvalue"(%393) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %402 = "llvm.load"(%396) : (!llvm.ptr) -> i32
      %403 = "llvm.getelementptr"(%401, %402) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %404 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %405 = "llvm.getelementptr"(%403, %404) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%405) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb60(%406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %407 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %408 : !llvm.ptr, %409 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %410 = "mid.wrap"(%406) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %411 = "hi.cast"(%410) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %412 = "mid.wrap"(%409) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %413 = "hi.cast"(%412) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %414 = "mid.unwrap"(%411) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %415 = "mid.unwrap"(%413) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %416 = "mid.get_type_field"(%411) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %417 = "mid.new"(%416) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleaveIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %418 = "hi.cast"(%411) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %419 = "mid.unwrap"(%418) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %420 = "hi.cast"(%413) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %421 = "mid.unwrap"(%420) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %422 = "mid.unwrap"(%417) : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %423 = "mid.get_type_field"(%411) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %424 = "mid.parameterization"(%423) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %425 = "mid.get_type_field"(%411) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %426 = "mid.parameterization"(%425) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %427 = "mid.parameterizations_array"(%424, %426) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%427, %422, %419, %421) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %428 = "hi.cast"(%417) {"from_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%428) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_interleave_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb61(%429 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %430 : !llvm.ptr):
      %431 = "mid.invariant"(%430) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %432 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb62] : () -> ()
    ^bb63:
      %433 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%433, %432) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb64] : () -> ()
    ^bb62:
      %434 = "llvm.getelementptr"(%430) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %435 = "mid.checkflag"(%434) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %436 = "llvm.load"(%435) : (!hi.bool) -> i1
      "cf.cond_br"(%436) [^bb63, ^bb63] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb64:
      %437 = "llvm.extractvalue"(%429) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %438 = "llvm.load"(%432) : (!llvm.ptr) -> i32
      %439 = "llvm.getelementptr"(%437, %438) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %440 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %441 = "llvm.getelementptr"(%439, %440) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%441) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb65(%442 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %443 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %444 : !llvm.ptr, %445 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %446 = "mid.wrap"(%442) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %447 = "hi.cast"(%446) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %448 = "mid.wrap"(%445) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %449 = "hi.cast"(%448) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %450 = "mid.unwrap"(%447) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %451 = "mid.unwrap"(%449) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %452 = "mid.get_type_field"(%447) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %453 = "mid.wrap"(%445) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %454 = "mid.get_type_field"(%453) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %455 = "mid.get_type_field"(%447) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %456 = "mid.wrap"(%445) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %457 = "mid.get_type_field"(%456) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %458 = "mid.parameterization"(%455, %457) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable.T_subtype_Any._Iterable.U_subtype_Any", ["Iterable.T_subtype_Any"], ["Iterable.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %459 = "mid.new"(%452, %454, %458) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %460 = "hi.cast"(%447) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %461 = "mid.unwrap"(%460) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %462 = "hi.cast"(%449) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %463 = "mid.unwrap"(%462) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %464 = "mid.unwrap"(%459) : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %465 = "mid.get_type_field"(%447) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %466 = "mid.parameterization"(%465) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %467 = "mid.wrap"(%445) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %468 = "mid.get_type_field"(%467) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %469 = "mid.parameterization"(%468) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.U_subtype_Any", ["Iterable.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %470 = "mid.parameterizations_array"(%466, %469) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%470, %464, %461, %463) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 56 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %471 = "hi.cast"(%459) {"from_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>
      "mid.return"(%471) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_zip_otherIterableU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb66(%472 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %473 : !llvm.ptr):
      %474 = "mid.invariant"(%473) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %475 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb67] : () -> ()
    ^bb68:
      %476 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%476, %475) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb69] : () -> ()
    ^bb67:
      %477 = "llvm.getelementptr"(%473) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %478 = "mid.checkflag"(%477) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %479 = "llvm.load"(%478) : (!hi.bool) -> i1
      "cf.cond_br"(%479) [^bb68, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %480 = "llvm.extractvalue"(%472) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %481 = "llvm.load"(%475) : (!llvm.ptr) -> i32
      %482 = "llvm.getelementptr"(%480, %481) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %483 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %484 = "llvm.getelementptr"(%482, %483) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%484) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb70(%485 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %486 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %487 : !llvm.ptr, %488 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %489 = "mid.wrap"(%485) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %490 = "hi.cast"(%489) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %491 = "mid.wrap"(%488) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %492 = "hi.cast"(%491) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %493 = "mid.unwrap"(%490) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %494 = "mid.unwrap"(%492) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %495 = "mid.get_type_field"(%490) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %496 = "mid.wrap"(%488) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %497 = "mid.get_type_field"(%496) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %498 = "mid.get_type_field"(%490) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %499 = "mid.wrap"(%488) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %500 = "mid.get_type_field"(%499) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %501 = "mid.parameterization"(%498, %500) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable.T_subtype_Any._Iterable.U_subtype_Any", ["Iterable.T_subtype_Any"], ["Iterable.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %502 = "mid.new"(%495, %497, %501) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %503 = "hi.cast"(%490) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %504 = "mid.unwrap"(%503) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %505 = "hi.cast"(%492) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %506 = "mid.unwrap"(%505) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %507 = "mid.unwrap"(%502) : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %508 = "mid.get_type_field"(%490) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %509 = "mid.parameterization"(%508) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %510 = "mid.wrap"(%488) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %511 = "mid.get_type_field"(%510) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %512 = "mid.parameterization"(%511) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.U_subtype_Any", ["Iterable.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %513 = "mid.parameterizations_array"(%509, %512) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%513, %507, %504, %506) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 56 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %514 = "hi.cast"(%502) {"from_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>
      "mid.return"(%514) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_product_otherIterableU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%515 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %516 : !llvm.ptr):
      %517 = "mid.invariant"(%516) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %518 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %519 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%519, %518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb72:
      %520 = "llvm.getelementptr"(%516) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %521 = "mid.checkflag"(%520) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %522 = "llvm.load"(%521) : (!hi.bool) -> i1
      "cf.cond_br"(%522) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %523 = "llvm.extractvalue"(%515) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %524 = "llvm.load"(%518) : (!llvm.ptr) -> i32
      %525 = "llvm.getelementptr"(%523, %524) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %526 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %527 = "llvm.getelementptr"(%525, %526) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%527) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Enumeration", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Enumeration_field_Enumeration_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Enumeration_field_Enumeration_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumeration_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableEnumeration.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumeration_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableEnumeration.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumeration_field_iterable", "getter_name" = "Enumeration_getter_iterable", "setter_name" = "Enumeration_setter_iterable"} : () -> ()
    "mid.func"() ({
    ^bb75(%528 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %529 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %530 : !llvm.ptr, %531 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %532 = "mid.wrap"(%528) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %533 = "hi.cast"(%532) {"from_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Enumeration", "to_typ_name" = "Enumeration"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %534 = "mid.wrap"(%531) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %535 = "hi.cast"(%534) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %536 = "hi.cast"(%535) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      "mid.set_field"(%533, %536) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> ()
    }) {"func_name" = "Enumeration_init_iterableIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb76(%537 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %538 : !llvm.ptr):
      %539 = "mid.invariant"(%538) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %540 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %541 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%541, %540) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb77:
      %542 = "llvm.getelementptr"(%538) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %543 = "mid.checkflag"(%542) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %544 = "llvm.load"(%543) : (!hi.bool) -> i1
      "cf.cond_br"(%544) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %545 = "llvm.extractvalue"(%537) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %546 = "llvm.load"(%540) : (!llvm.ptr) -> i32
      %547 = "llvm.getelementptr"(%545, %546) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %548 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %549 = "llvm.getelementptr"(%547, %548) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%549) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_init_iterableIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb80(%550 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %551 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %552 : !llvm.ptr):
      %553 = "mid.wrap"(%550) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %554 = "hi.cast"(%553) {"from_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Enumeration", "to_typ_name" = "Enumeration"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %555 = "mid.get_field"(%554) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %556 = "mid.unwrap"(%555) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %557 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %558 = "mid.method_call"(%557, %556) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %559 = "hi.cast"(%558) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %560 = "mid.unwrap"(%559) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %561 = "mid.get_type_field"(%554) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.reified_type
      %562 = "mid.get_type_field"(%554) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.reified_type
      %563 = "mid.parameterization"(%562) {"id_hierarchy" = ["Pair", ["i32_typ"], [0 : i32]], "name_hierarchy" = ["Pairi32._Enumeration.T_subtype_Any", ["i32"], ["Enumeration.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %564 = "mid.new"(%561, %563) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "Enumerator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %565 = "mid.get_field"(%554) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %566 = "mid.unwrap"(%565) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %567 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %568 = "mid.method_call"(%567, %566) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %569 = "hi.cast"(%568) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %570 = "hi.cast"(%569) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %571 = "mid.unwrap"(%570) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %572 = "mid.unwrap"(%564) : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %573 = "mid.get_type_field"(%554) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.reified_type
      %574 = "mid.parameterization"(%573) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorEnumeration.T_subtype_Any", ["Enumeration.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %575 = "mid.parameterizations_array"(%574) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%575, %572, %571) {"offset" = 4 : i32, "vptrs" = [#none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %576 = "hi.cast"(%564) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%576) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Enumeration_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb81(%577 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %578 : !llvm.ptr):
      %579 = "mid.invariant"(%578) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %580 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb82] : () -> ()
    ^bb82:
      %581 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%581, %580) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb83] : () -> ()
    ^bb83:
      %582 = "llvm.extractvalue"(%577) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %583 = "llvm.load"(%580) : (!llvm.ptr) -> i32
      %584 = "llvm.getelementptr"(%582, %583) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %585 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %586 = "llvm.getelementptr"(%584, %585) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%586) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb84(%587 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %588 : !llvm.ptr):
      %589 = "mid.invariant"(%588) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %590 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb85] : () -> ()
    ^bb86:
      %591 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%591, %590) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb87] : () -> ()
    ^bb85:
      %592 = "llvm.getelementptr"(%588) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %593 = "mid.checkflag"(%592) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %594 = "llvm.load"(%593) : (!hi.bool) -> i1
      "cf.cond_br"(%594) [^bb86, ^bb86] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %595 = "llvm.extractvalue"(%587) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %596 = "llvm.load"(%590) : (!llvm.ptr) -> i32
      %597 = "llvm.getelementptr"(%595, %596) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %598 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %599 = "llvm.getelementptr"(%597, %598) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%599) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb88(%600 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %601 : !llvm.ptr):
      %602 = "mid.invariant"(%601) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %603 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb89] : () -> ()
    ^bb90:
      %604 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%604, %603) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb91] : () -> ()
    ^bb92:
      %605 = "llvm.getelementptr"(%601) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %606 = "mid.checkflag"(%605) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %607 = "llvm.load"(%606) : (!hi.bool) -> i1
      "cf.cond_br"(%607) [^bb90, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb89:
      %608 = "llvm.getelementptr"(%601) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %609 = "mid.checkflag"(%608) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %610 = "llvm.load"(%609) : (!hi.bool) -> i1
      "cf.cond_br"(%610) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb91:
      %611 = "llvm.extractvalue"(%600) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %612 = "llvm.load"(%603) : (!llvm.ptr) -> i32
      %613 = "llvm.getelementptr"(%611, %612) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %614 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %615 = "llvm.getelementptr"(%613, %614) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%615) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb93(%616 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %617 : !llvm.ptr):
      %618 = "mid.invariant"(%617) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %619 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb94] : () -> ()
    ^bb95:
      %620 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%620, %619) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb96] : () -> ()
    ^bb94:
      %621 = "llvm.getelementptr"(%617) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %622 = "mid.checkflag"(%621) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %623 = "llvm.load"(%622) : (!hi.bool) -> i1
      "cf.cond_br"(%623) [^bb95, ^bb95] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb96:
      %624 = "llvm.extractvalue"(%616) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %625 = "llvm.load"(%619) : (!llvm.ptr) -> i32
      %626 = "llvm.getelementptr"(%624, %625) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %627 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %628 = "llvm.getelementptr"(%626, %627) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%628) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb97(%629 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %630 : !llvm.ptr):
      %631 = "mid.invariant"(%630) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %632 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb98] : () -> ()
    ^bb99:
      %633 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%633, %632) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb100] : () -> ()
    ^bb98:
      %634 = "llvm.getelementptr"(%630) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %635 = "mid.checkflag"(%634) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %636 = "llvm.load"(%635) : (!hi.bool) -> i1
      "cf.cond_br"(%636) [^bb99, ^bb99] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb100:
      %637 = "llvm.extractvalue"(%629) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %638 = "llvm.load"(%632) : (!llvm.ptr) -> i32
      %639 = "llvm.getelementptr"(%637, %638) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %640 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %641 = "llvm.getelementptr"(%639, %640) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%641) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb101(%642 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %643 : !llvm.ptr):
      %644 = "mid.invariant"(%643) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %645 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb102] : () -> ()
    ^bb102:
      %646 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%646, %645) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb103] : () -> ()
    ^bb103:
      %647 = "llvm.extractvalue"(%642) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %648 = "llvm.load"(%645) : (!llvm.ptr) -> i32
      %649 = "llvm.getelementptr"(%647, %648) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %650 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %651 = "llvm.getelementptr"(%649, %650) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%651) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb104(%652 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %653 : !llvm.ptr):
      %654 = "mid.invariant"(%653) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %655 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb105] : () -> ()
    ^bb106:
      %656 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%656, %655) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb107] : () -> ()
    ^bb105:
      %657 = "llvm.getelementptr"(%653) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %658 = "mid.checkflag"(%657) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %659 = "llvm.load"(%658) : (!hi.bool) -> i1
      "cf.cond_br"(%659) [^bb106, ^bb106] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb107:
      %660 = "llvm.extractvalue"(%652) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %661 = "llvm.load"(%655) : (!llvm.ptr) -> i32
      %662 = "llvm.getelementptr"(%660, %661) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %663 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %664 = "llvm.getelementptr"(%662, %663) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%664) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb108(%665 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %666 : !llvm.ptr):
      %667 = "mid.invariant"(%666) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %668 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb109] : () -> ()
    ^bb110:
      %669 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%669, %668) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb111] : () -> ()
    ^bb109:
      %670 = "llvm.getelementptr"(%666) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %671 = "mid.checkflag"(%670) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %672 = "llvm.load"(%671) : (!hi.bool) -> i1
      "cf.cond_br"(%672) [^bb110, ^bb110] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb111:
      %673 = "llvm.extractvalue"(%665) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %674 = "llvm.load"(%668) : (!llvm.ptr) -> i32
      %675 = "llvm.getelementptr"(%673, %674) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %676 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %677 = "llvm.getelementptr"(%675, %676) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%677) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb112(%678 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %679 : !llvm.ptr):
      %680 = "mid.invariant"(%679) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %681 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %682 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%682, %681) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb115] : () -> ()
    ^bb113:
      %683 = "llvm.getelementptr"(%679) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %684 = "mid.checkflag"(%683) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %685 = "llvm.load"(%684) : (!hi.bool) -> i1
      "cf.cond_br"(%685) [^bb114, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb115:
      %686 = "llvm.extractvalue"(%678) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %687 = "llvm.load"(%681) : (!llvm.ptr) -> i32
      %688 = "llvm.getelementptr"(%686, %687) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %689 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %690 = "llvm.getelementptr"(%688, %689) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%690) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb116(%691 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %692 : !llvm.ptr):
      %693 = "mid.invariant"(%692) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %694 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb117] : () -> ()
    ^bb118:
      %695 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%695, %694) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb119] : () -> ()
    ^bb117:
      %696 = "llvm.getelementptr"(%692) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %697 = "mid.checkflag"(%696) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %698 = "llvm.load"(%697) : (!hi.bool) -> i1
      "cf.cond_br"(%698) [^bb118, ^bb118] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb119:
      %699 = "llvm.extractvalue"(%691) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %700 = "llvm.load"(%694) : (!llvm.ptr) -> i32
      %701 = "llvm.getelementptr"(%699, %700) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %702 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %703 = "llvm.getelementptr"(%701, %702) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%703) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb120(%704 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %705 : !llvm.ptr):
      %706 = "mid.invariant"(%705) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %707 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb121] : () -> ()
    ^bb122:
      %708 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%708, %707) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb121:
      %709 = "llvm.getelementptr"(%705) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %710 = "mid.checkflag"(%709) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %711 = "llvm.load"(%710) : (!hi.bool) -> i1
      "cf.cond_br"(%711) [^bb122, ^bb122] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %712 = "llvm.extractvalue"(%704) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %713 = "llvm.load"(%707) : (!llvm.ptr) -> i32
      %714 = "llvm.getelementptr"(%712, %713) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %715 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %716 = "llvm.getelementptr"(%714, %715) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%716) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb124(%717 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %718 : !llvm.ptr):
      %719 = "mid.invariant"(%718) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %720 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb125] : () -> ()
    ^bb126:
      %721 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%721, %720) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb127] : () -> ()
    ^bb125:
      %722 = "llvm.getelementptr"(%718) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %723 = "mid.checkflag"(%722) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %724 = "llvm.load"(%723) : (!hi.bool) -> i1
      "cf.cond_br"(%724) [^bb126, ^bb126] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb127:
      %725 = "llvm.extractvalue"(%717) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %726 = "llvm.load"(%720) : (!llvm.ptr) -> i32
      %727 = "llvm.getelementptr"(%725, %726) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %728 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %729 = "llvm.getelementptr"(%727, %728) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%729) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Enumerator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Enumerator_field_Enumerator_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Enumerator_field_Enumerator_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumerator_getter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorEnumerator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumerator_setter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorEnumerator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumerator_field_iterator", "getter_name" = "Enumerator_getter_iterator", "setter_name" = "Enumerator_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumerator_getter_index", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumerator_setter_index", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumerator_field_index", "getter_name" = "Enumerator_getter_index", "setter_name" = "Enumerator_setter_index"} : () -> ()
    "mid.func"() ({
    ^bb128(%730 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %731 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %732 : !llvm.ptr, %733 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %734 = "mid.wrap"(%730) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %735 = "hi.cast"(%734) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Enumerator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %736 = "mid.wrap"(%733) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %737 = "hi.cast"(%736) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %738 = "hi.cast"(%737) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      "mid.set_field"(%735, %738) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> ()
      %739 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %740 = "hi.cast"(%739) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%735, %740) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Enumerator_init_iteratorIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb129(%741 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %742 : !llvm.ptr):
      %743 = "mid.invariant"(%742) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %744 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb130] : () -> ()
    ^bb131:
      %745 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%745, %744) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb132] : () -> ()
    ^bb130:
      %746 = "llvm.getelementptr"(%742) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %747 = "mid.checkflag"(%746) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %748 = "llvm.load"(%747) : (!hi.bool) -> i1
      "cf.cond_br"(%748) [^bb131, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb132:
      %749 = "llvm.extractvalue"(%741) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %750 = "llvm.load"(%744) : (!llvm.ptr) -> i32
      %751 = "llvm.getelementptr"(%749, %750) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %752 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %753 = "llvm.getelementptr"(%751, %752) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%753) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerator_B_init_iteratorIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb133(%754 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %755 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %756 : !llvm.ptr):
      %757 = "mid.wrap"(%754) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %758 = "hi.cast"(%757) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Enumerator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %759 = "mid.get_field"(%758) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %760 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %761 = "mid.unwrap"(%759) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %762 = "mid.unwrap"(%760) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %763 = "mid.arithmetic"(%761, %762) {"op" = "ADD"} : (i32, i32) -> i32
      %764 = "mid.wrap"(%763) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %765 = "hi.cast"(%764) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%758, %765) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %766 = "mid.get_field"(%758) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %767 = "mid.unwrap"(%766) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %768 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %769 = "mid.method_call"(%768, %767) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %770 = "hi.cast"(%769) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>
      %771 = "mid.get_type_field"(%758) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.reified_type
      %772 = "mid.checkflag"(%770) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %773 = "mid.unwrap"(%772) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %774 = "hi.cast"(%770) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>
      "mid.if"(%773) ({
        %775 = "hi.cast"(%774) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Enumerator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Enumerator">
        %776 = "mid.get_field"(%758) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %777 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %778 = "mid.unwrap"(%776) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %779 = "mid.unwrap"(%777) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %780 = "mid.arithmetic"(%778, %779) {"op" = "SUB"} : (i32, i32) -> i32
        %781 = "mid.wrap"(%780) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %782 = "mid.unwrap"(%781) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %783 = "mid.unwrap"(%775) : (!hi.type_param<"T", !hi.any, "Enumerator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %784 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %785 = "mid.get_type_field"(%758) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.reified_type
        %786 = "mid.new"(%784, %785) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !hi.reified_type) -> !hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>
        %787 = "mid.get_field"(%758) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %788 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %789 = "mid.unwrap"(%787) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %790 = "mid.unwrap"(%788) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %791 = "mid.arithmetic"(%789, %790) {"op" = "SUB"} : (i32, i32) -> i32
        %792 = "mid.wrap"(%791) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %793 = "hi.cast"(%792) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"T", !hi.any, "Pair">
        %794 = "mid.unwrap"(%793) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %795 = "hi.cast"(%775) {"from_typ" = !hi.type_param<"T", !hi.any, "Enumerator">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Enumerator">) -> !hi.type_param<"U", !hi.any, "Pair">
        %796 = "mid.unwrap"(%795) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %797 = "mid.unwrap"(%786) : (!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %798 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %799 = "mid.get_type_field"(%758) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.reified_type
        %800 = "mid.parameterizations_array"(%798, %799) : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
        "mid.method_call"(%800, %797, %794, %796) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %801 = "hi.cast"(%786) {"from_typ" = !hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        "mid.return"(%801) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
        %802 = "hi.cast"(%775) {"from_typ" = !hi.type_param<"T", !hi.any, "Enumerator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Enumerator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>
        "mid.assign"(%774, %802) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %803 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %804 = "hi.cast"(%803) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%804) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "Enumerator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb134(%805 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %806 : !llvm.ptr):
      %807 = "mid.invariant"(%806) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %808 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb135] : () -> ()
    ^bb135:
      %809 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%809, %808) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb136] : () -> ()
    ^bb136:
      %810 = "llvm.extractvalue"(%805) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %811 = "llvm.load"(%808) : (!llvm.ptr) -> i32
      %812 = "llvm.getelementptr"(%810, %811) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %813 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %814 = "llvm.getelementptr"(%812, %813) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%814) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MapIterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapIterable_field_MapIterable_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapIterable_field_MapIterable_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapIterable_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableMapIterable.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapIterable_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableMapIterable.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapIterable_field_iterable", "getter_name" = "MapIterable_getter_iterable", "setter_name" = "MapIterable_setter_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapIterable_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable.T_subtype_Any_to_MapIterable.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapIterable_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable.T_subtype_Any_to_MapIterable.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapIterable_field_f", "getter_name" = "MapIterable_getter_f", "setter_name" = "MapIterable_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb137(%815 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %816 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %817 : !llvm.ptr, %818 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %819 : !llvm.struct<(!llvm.ptr)>):
      %820 = "mid.wrap"(%815) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %821 = "hi.cast"(%820) {"from_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %822 = "mid.wrap"(%818) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %823 = "hi.cast"(%822) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %824 = "hi.cast"(%823) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      "mid.set_field"(%821, %824) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> ()
      %825 = "mid.wrap"(%819) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %826 = "hi.cast"(%825) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %827 = "hi.cast"(%826) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      "mid.set_field"(%821, %827) {"offset" = 3 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> ()
    }) {"func_name" = "MapIterable_init_iterableIterableT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb138(%828 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %829 : !llvm.ptr):
      %830 = "mid.invariant"(%829) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %831 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb139] : () -> ()
    ^bb140:
      %832 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%832, %831) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb141] : () -> ()
    ^bb142:
      %833 = "llvm.getelementptr"(%829) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %834 = "mid.checkflag"(%833) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %835 = "llvm.load"(%834) : (!hi.bool) -> i1
      "cf.cond_br"(%835) [^bb140, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %836 = "llvm.getelementptr"(%829) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %837 = "mid.checkflag"(%836) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %838 = "llvm.load"(%837) : (!hi.bool) -> i1
      "cf.cond_br"(%838) [^bb142, ^bb142] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb141:
      %839 = "llvm.extractvalue"(%828) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %840 = "llvm.load"(%831) : (!llvm.ptr) -> i32
      %841 = "llvm.getelementptr"(%839, %840) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %842 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %843 = "llvm.getelementptr"(%841, %842) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%843) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_init_iterableIterableT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb143(%844 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %846 : !llvm.ptr):
      %847 = "mid.wrap"(%844) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %848 = "hi.cast"(%847) {"from_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %849 = "mid.get_field"(%848) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %850 = "mid.unwrap"(%849) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %851 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %852 = "mid.method_call"(%851, %850) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %853 = "hi.cast"(%852) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %854 = "mid.get_field"(%848) {"offset" = 3 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %855 = "mid.unwrap"(%853) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %856 = "mid.unwrap"(%854) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !llvm.struct<(!llvm.ptr)>
      %857 = "mid.get_type_field"(%848) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.reified_type
      %858 = "mid.get_type_field"(%848) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.reified_type
      %859 = "mid.new"(%857, %858) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %860 = "mid.get_field"(%848) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %861 = "mid.unwrap"(%860) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %862 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %863 = "mid.method_call"(%862, %861) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %864 = "hi.cast"(%863) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %865 = "mid.get_field"(%848) {"offset" = 3 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %866 = "hi.cast"(%864) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %867 = "mid.unwrap"(%866) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %868 = "hi.cast"(%865) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      %869 = "mid.unwrap"(%868) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !llvm.struct<(!llvm.ptr)>
      %870 = "mid.unwrap"(%859) : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %871 = "mid.get_type_field"(%848) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.reified_type
      %872 = "mid.parameterization"(%871) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorMapIterable.T_subtype_Any", ["MapIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %873 = "mid.get_type_field"(%848) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.reified_type
      %874 = "mid.get_type_field"(%848) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.reified_type
      %875 = "mid.parameterization"(%873, %874) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionMapIterable.T_subtype_Any_to_MapIterable.U_subtype_Any", ["MapIterable.U_subtype_Any"], ["MapIterable.T_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %876 = "mid.parameterizations_array"(%872, %875) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%876, %870, %867, %869) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %877 = "hi.cast"(%859) {"from_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MapIterable">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MapIterable">]>
      "mid.return"(%877) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MapIterable">]>) -> ()
    }) {"func_name" = "MapIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb144(%878 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %879 : !llvm.ptr):
      %880 = "mid.invariant"(%879) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %881 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb145] : () -> ()
    ^bb145:
      %882 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%882, %881) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb146] : () -> ()
    ^bb146:
      %883 = "llvm.extractvalue"(%878) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %884 = "llvm.load"(%881) : (!llvm.ptr) -> i32
      %885 = "llvm.getelementptr"(%883, %884) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %886 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %887 = "llvm.getelementptr"(%885, %886) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%887) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb147(%888 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %889 : !llvm.ptr):
      %890 = "mid.invariant"(%889) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %891 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb148] : () -> ()
    ^bb149:
      %892 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%892, %891) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb150] : () -> ()
    ^bb148:
      %893 = "llvm.getelementptr"(%889) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %894 = "mid.checkflag"(%893) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %895 = "llvm.load"(%894) : (!hi.bool) -> i1
      "cf.cond_br"(%895) [^bb149, ^bb149] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb150:
      %896 = "llvm.extractvalue"(%888) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %897 = "llvm.load"(%891) : (!llvm.ptr) -> i32
      %898 = "llvm.getelementptr"(%896, %897) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %899 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %900 = "llvm.getelementptr"(%898, %899) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%900) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb151(%901 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %902 : !llvm.ptr):
      %903 = "mid.invariant"(%902) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %904 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb152] : () -> ()
    ^bb153:
      %905 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%905, %904) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb154] : () -> ()
    ^bb155:
      %906 = "llvm.getelementptr"(%902) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %907 = "mid.checkflag"(%906) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %908 = "llvm.load"(%907) : (!hi.bool) -> i1
      "cf.cond_br"(%908) [^bb153, ^bb153] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb152:
      %909 = "llvm.getelementptr"(%902) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %910 = "mid.checkflag"(%909) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %911 = "llvm.load"(%910) : (!hi.bool) -> i1
      "cf.cond_br"(%911) [^bb155, ^bb155] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb154:
      %912 = "llvm.extractvalue"(%901) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %913 = "llvm.load"(%904) : (!llvm.ptr) -> i32
      %914 = "llvm.getelementptr"(%912, %913) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %915 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %916 = "llvm.getelementptr"(%914, %915) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%916) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb156(%917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %918 : !llvm.ptr):
      %919 = "mid.invariant"(%918) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %920 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb157] : () -> ()
    ^bb158:
      %921 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%921, %920) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb159] : () -> ()
    ^bb157:
      %922 = "llvm.getelementptr"(%918) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %923 = "mid.checkflag"(%922) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %924 = "llvm.load"(%923) : (!hi.bool) -> i1
      "cf.cond_br"(%924) [^bb158, ^bb158] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb159:
      %925 = "llvm.extractvalue"(%917) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %926 = "llvm.load"(%920) : (!llvm.ptr) -> i32
      %927 = "llvm.getelementptr"(%925, %926) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %928 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %929 = "llvm.getelementptr"(%927, %928) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%929) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb160(%930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %931 : !llvm.ptr):
      %932 = "mid.invariant"(%931) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %933 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb161] : () -> ()
    ^bb162:
      %934 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%934, %933) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb163] : () -> ()
    ^bb161:
      %935 = "llvm.getelementptr"(%931) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %936 = "mid.checkflag"(%935) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %937 = "llvm.load"(%936) : (!hi.bool) -> i1
      "cf.cond_br"(%937) [^bb162, ^bb162] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb163:
      %938 = "llvm.extractvalue"(%930) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %939 = "llvm.load"(%933) : (!llvm.ptr) -> i32
      %940 = "llvm.getelementptr"(%938, %939) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %941 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %942 = "llvm.getelementptr"(%940, %941) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%942) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb164(%943 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %944 : !llvm.ptr):
      %945 = "mid.invariant"(%944) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %946 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb165] : () -> ()
    ^bb165:
      %947 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%947, %946) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb166] : () -> ()
    ^bb166:
      %948 = "llvm.extractvalue"(%943) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %949 = "llvm.load"(%946) : (!llvm.ptr) -> i32
      %950 = "llvm.getelementptr"(%948, %949) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %951 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %952 = "llvm.getelementptr"(%950, %951) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%952) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb167(%953 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %954 : !llvm.ptr):
      %955 = "mid.invariant"(%954) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %956 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb168] : () -> ()
    ^bb169:
      %957 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%957, %956) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb170] : () -> ()
    ^bb168:
      %958 = "llvm.getelementptr"(%954) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %959 = "mid.checkflag"(%958) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %960 = "llvm.load"(%959) : (!hi.bool) -> i1
      "cf.cond_br"(%960) [^bb169, ^bb169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb170:
      %961 = "llvm.extractvalue"(%953) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %962 = "llvm.load"(%956) : (!llvm.ptr) -> i32
      %963 = "llvm.getelementptr"(%961, %962) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %964 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %965 = "llvm.getelementptr"(%963, %964) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%965) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb171(%966 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %967 : !llvm.ptr):
      %968 = "mid.invariant"(%967) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %969 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb172] : () -> ()
    ^bb173:
      %970 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%970, %969) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb174] : () -> ()
    ^bb172:
      %971 = "llvm.getelementptr"(%967) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %972 = "mid.checkflag"(%971) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %973 = "llvm.load"(%972) : (!hi.bool) -> i1
      "cf.cond_br"(%973) [^bb173, ^bb173] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb174:
      %974 = "llvm.extractvalue"(%966) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %975 = "llvm.load"(%969) : (!llvm.ptr) -> i32
      %976 = "llvm.getelementptr"(%974, %975) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %977 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %978 = "llvm.getelementptr"(%976, %977) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%978) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb175(%979 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %980 : !llvm.ptr):
      %981 = "mid.invariant"(%980) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %982 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb176] : () -> ()
    ^bb177:
      %983 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%983, %982) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb178] : () -> ()
    ^bb176:
      %984 = "llvm.getelementptr"(%980) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %985 = "mid.checkflag"(%984) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %986 = "llvm.load"(%985) : (!hi.bool) -> i1
      "cf.cond_br"(%986) [^bb177, ^bb177] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb178:
      %987 = "llvm.extractvalue"(%979) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %988 = "llvm.load"(%982) : (!llvm.ptr) -> i32
      %989 = "llvm.getelementptr"(%987, %988) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %990 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %991 = "llvm.getelementptr"(%989, %990) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%991) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb179(%992 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %993 : !llvm.ptr):
      %994 = "mid.invariant"(%993) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %995 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb180] : () -> ()
    ^bb181:
      %996 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%996, %995) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb182] : () -> ()
    ^bb180:
      %997 = "llvm.getelementptr"(%993) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %998 = "mid.checkflag"(%997) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %999 = "llvm.load"(%998) : (!hi.bool) -> i1
      "cf.cond_br"(%999) [^bb181, ^bb181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb182:
      %1000 = "llvm.extractvalue"(%992) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1001 = "llvm.load"(%995) : (!llvm.ptr) -> i32
      %1002 = "llvm.getelementptr"(%1000, %1001) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1003 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1004 = "llvm.getelementptr"(%1002, %1003) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1004) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb183(%1005 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1006 : !llvm.ptr):
      %1007 = "mid.invariant"(%1006) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1008 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb184] : () -> ()
    ^bb185:
      %1009 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1009, %1008) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb186] : () -> ()
    ^bb184:
      %1010 = "llvm.getelementptr"(%1006) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1011 = "mid.checkflag"(%1010) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1012 = "llvm.load"(%1011) : (!hi.bool) -> i1
      "cf.cond_br"(%1012) [^bb185, ^bb185] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb186:
      %1013 = "llvm.extractvalue"(%1005) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1014 = "llvm.load"(%1008) : (!llvm.ptr) -> i32
      %1015 = "llvm.getelementptr"(%1013, %1014) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1016 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1017 = "llvm.getelementptr"(%1015, %1016) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1017) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb187(%1018 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1019 : !llvm.ptr):
      %1020 = "mid.invariant"(%1019) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1021 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb188] : () -> ()
    ^bb189:
      %1022 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1022, %1021) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb190] : () -> ()
    ^bb188:
      %1023 = "llvm.getelementptr"(%1019) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1024 = "mid.checkflag"(%1023) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1025 = "llvm.load"(%1024) : (!hi.bool) -> i1
      "cf.cond_br"(%1025) [^bb189, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb190:
      %1026 = "llvm.extractvalue"(%1018) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1027 = "llvm.load"(%1021) : (!llvm.ptr) -> i32
      %1028 = "llvm.getelementptr"(%1026, %1027) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1029 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1030 = "llvm.getelementptr"(%1028, %1029) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1030) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MapIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapIterator_field_MapIterator_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapIterator_field_MapIterator_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapIterator_getter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorMapIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapIterator_setter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorMapIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapIterator_field_iterator", "getter_name" = "MapIterator_getter_iterator", "setter_name" = "MapIterator_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapIterator_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator.T_subtype_Any_to_MapIterator.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapIterator_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator.T_subtype_Any_to_MapIterator.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapIterator_field_f", "getter_name" = "MapIterator_getter_f", "setter_name" = "MapIterator_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb191(%1031 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1032 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1033 : !llvm.ptr, %1034 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1035 : !llvm.struct<(!llvm.ptr)>):
      %1036 = "mid.wrap"(%1031) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>
      %1037 = "hi.cast"(%1036) {"from_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, "to_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>
      %1038 = "mid.wrap"(%1034) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %1039 = "hi.cast"(%1038) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %1040 = "hi.cast"(%1039) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      "mid.set_field"(%1037, %1040) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> ()
      %1041 = "mid.wrap"(%1035) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      %1042 = "hi.cast"(%1041) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      %1043 = "hi.cast"(%1042) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      "mid.set_field"(%1037, %1043) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> ()
    }) {"func_name" = "MapIterator_init_iteratorIteratorT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb192(%1044 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1045 : !llvm.ptr):
      %1046 = "mid.invariant"(%1045) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1047 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb193] : () -> ()
    ^bb194:
      %1048 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1048, %1047) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb195] : () -> ()
    ^bb196:
      %1049 = "llvm.getelementptr"(%1045) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1050 = "mid.checkflag"(%1049) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1051 = "llvm.load"(%1050) : (!hi.bool) -> i1
      "cf.cond_br"(%1051) [^bb194, ^bb194] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb193:
      %1052 = "llvm.getelementptr"(%1045) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1053 = "mid.checkflag"(%1052) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1054 = "llvm.load"(%1053) : (!hi.bool) -> i1
      "cf.cond_br"(%1054) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb195:
      %1055 = "llvm.extractvalue"(%1044) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1056 = "llvm.load"(%1047) : (!llvm.ptr) -> i32
      %1057 = "llvm.getelementptr"(%1055, %1056) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1058 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1059 = "llvm.getelementptr"(%1057, %1058) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1059) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb197(%1060 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1061 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1062 : !llvm.ptr):
      %1063 = "mid.wrap"(%1060) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>
      %1064 = "hi.cast"(%1063) {"from_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, "to_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>
      %1065 = "mid.get_field"(%1064) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %1066 = "mid.unwrap"(%1065) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1067 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1068 = "mid.method_call"(%1067, %1066) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1069 = "hi.cast"(%1068) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>
      %1070 = "mid.get_type_field"(%1064) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.reified_type
      %1071 = "mid.checkflag"(%1069) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1072 = "mid.unwrap"(%1071) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1073 = "hi.cast"(%1069) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>
      "mid.if"(%1072) ({
        %1074 = "hi.cast"(%1073) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "MapIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "MapIterator">
        %1075 = "hi.cast"(%1074) {"from_typ" = !hi.type_param<"T", !hi.any, "MapIterator">, "to_typ" = !hi.type_param<"T", !hi.any, "MapIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "MapIterator">) -> !hi.type_param<"T", !hi.any, "MapIterator">
        %1076 = "mid.unwrap"(%1075) : (!hi.type_param<"T", !hi.any, "MapIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1077 = "mid.get_field"(%1064) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
        %1078 = "mid.unwrap"(%1077) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !llvm.ptr
        %1079 = "mid.fptr_call"(%1078, %1076) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"U", !hi.any, "MapIterator">
        %1080 = "hi.cast"(%1079) {"from_typ" = !hi.type_param<"U", !hi.any, "MapIterator">, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"U", !hi.any, "MapIterator">) -> !hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>
        "mid.return"(%1080) : (!hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>) -> ()
        %1081 = "hi.cast"(%1074) {"from_typ" = !hi.type_param<"T", !hi.any, "MapIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "MapIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>
        "mid.assign"(%1073, %1081) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1082 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1083 = "hi.cast"(%1082) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>
      "mid.return"(%1083) : (!hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "MapIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb198(%1084 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1085 : !llvm.ptr):
      %1086 = "mid.invariant"(%1085) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1087 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb199] : () -> ()
    ^bb199:
      %1088 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1088, %1087) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb200] : () -> ()
    ^bb200:
      %1089 = "llvm.extractvalue"(%1084) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1090 = "llvm.load"(%1087) : (!llvm.ptr) -> i32
      %1091 = "llvm.getelementptr"(%1089, %1090) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1092 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1093 = "llvm.getelementptr"(%1091, %1092) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1093) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FilterIterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FilterIterable_field_FilterIterable_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FilterIterable_getter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableFilterIterable.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FilterIterable_setter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableFilterIterable.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FilterIterable_field_iterable", "getter_name" = "FilterIterable_getter_iterable", "setter_name" = "FilterIterable_setter_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FilterIterable_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable.T_subtype_Any_to_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FilterIterable_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable.T_subtype_Any_to_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FilterIterable_field_f", "getter_name" = "FilterIterable_getter_f", "setter_name" = "FilterIterable_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb201(%1094 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1095 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1096 : !llvm.ptr, %1097 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1098 : !llvm.struct<(!llvm.ptr)>):
      %1099 = "mid.wrap"(%1094) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1100 = "hi.cast"(%1099) {"from_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1101 = "mid.wrap"(%1097) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1102 = "hi.cast"(%1101) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1103 = "hi.cast"(%1102) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      "mid.set_field"(%1100, %1103) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> ()
      %1104 = "mid.wrap"(%1098) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %1105 = "hi.cast"(%1104) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %1106 = "hi.cast"(%1105) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      "mid.set_field"(%1100, %1106) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> ()
    }) {"func_name" = "FilterIterable_init_iterableIterableT_fFunctionT_to_Bool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb202(%1107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1108 : !llvm.ptr):
      %1109 = "mid.invariant"(%1108) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1110 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb203] : () -> ()
    ^bb204:
      %1111 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1111, %1110) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb205] : () -> ()
    ^bb206:
      %1112 = "llvm.getelementptr"(%1108) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1113 = "mid.checkflag"(%1112) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1114 = "llvm.load"(%1113) : (!hi.bool) -> i1
      "cf.cond_br"(%1114) [^bb204, ^bb204] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb203:
      %1115 = "llvm.getelementptr"(%1108) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1116 = "mid.checkflag"(%1115) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1117 = "llvm.load"(%1116) : (!hi.bool) -> i1
      "cf.cond_br"(%1117) [^bb206, ^bb206] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb205:
      %1118 = "llvm.extractvalue"(%1107) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1119 = "llvm.load"(%1110) : (!llvm.ptr) -> i32
      %1120 = "llvm.getelementptr"(%1118, %1119) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1121 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1122 = "llvm.getelementptr"(%1120, %1121) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1122) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_init_iterableIterableT_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb207(%1123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1125 : !llvm.ptr):
      %1126 = "mid.wrap"(%1123) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1127 = "hi.cast"(%1126) {"from_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1128 = "mid.get_field"(%1127) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1129 = "mid.unwrap"(%1128) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1130 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1131 = "mid.method_call"(%1130, %1129) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1132 = "hi.cast"(%1131) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1133 = "mid.get_field"(%1127) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %1134 = "mid.unwrap"(%1132) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1135 = "mid.unwrap"(%1133) : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1136 = "mid.get_type_field"(%1127) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.reified_type
      %1137 = "mid.new"(%1136) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1138 = "mid.get_field"(%1127) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1139 = "mid.unwrap"(%1138) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1140 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1141 = "mid.method_call"(%1140, %1139) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1142 = "hi.cast"(%1141) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1143 = "mid.get_field"(%1127) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %1144 = "hi.cast"(%1142) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1145 = "mid.unwrap"(%1144) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1146 = "hi.cast"(%1143) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
      %1147 = "mid.unwrap"(%1146) : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1148 = "mid.unwrap"(%1137) : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1149 = "mid.get_type_field"(%1127) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.reified_type
      %1150 = "mid.parameterization"(%1149) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorFilterIterable.T_subtype_Any", ["FilterIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1151 = "mid.get_type_field"(%1127) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.reified_type
      %1152 = "mid.parameterization"(%1151) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionFilterIterable.T_subtype_Any_to_Bool", ["Bool"], ["FilterIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1153 = "mid.parameterizations_array"(%1150, %1152) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1153, %1148, %1145, %1147) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1154 = "hi.cast"(%1137) {"from_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      "mid.return"(%1154) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> ()
    }) {"func_name" = "FilterIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb208(%1155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1156 : !llvm.ptr):
      %1157 = "mid.invariant"(%1156) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1158 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb209] : () -> ()
    ^bb209:
      %1159 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1159, %1158) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb210] : () -> ()
    ^bb210:
      %1160 = "llvm.extractvalue"(%1155) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1161 = "llvm.load"(%1158) : (!llvm.ptr) -> i32
      %1162 = "llvm.getelementptr"(%1160, %1161) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1163 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1164 = "llvm.getelementptr"(%1162, %1163) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1164) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb211(%1165 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1166 : !llvm.ptr):
      %1167 = "mid.invariant"(%1166) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1168 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb212] : () -> ()
    ^bb213:
      %1169 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1169, %1168) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb214] : () -> ()
    ^bb212:
      %1170 = "llvm.getelementptr"(%1166) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1171 = "mid.checkflag"(%1170) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1172 = "llvm.load"(%1171) : (!hi.bool) -> i1
      "cf.cond_br"(%1172) [^bb213, ^bb213] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb214:
      %1173 = "llvm.extractvalue"(%1165) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1174 = "llvm.load"(%1168) : (!llvm.ptr) -> i32
      %1175 = "llvm.getelementptr"(%1173, %1174) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1176 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1177 = "llvm.getelementptr"(%1175, %1176) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1177) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb215(%1178 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1179 : !llvm.ptr):
      %1180 = "mid.invariant"(%1179) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1181 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb216] : () -> ()
    ^bb217:
      %1182 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1182, %1181) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb218] : () -> ()
    ^bb219:
      %1183 = "llvm.getelementptr"(%1179) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1184 = "mid.checkflag"(%1183) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1185 = "llvm.load"(%1184) : (!hi.bool) -> i1
      "cf.cond_br"(%1185) [^bb217, ^bb217] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb216:
      %1186 = "llvm.getelementptr"(%1179) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1187 = "mid.checkflag"(%1186) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1188 = "llvm.load"(%1187) : (!hi.bool) -> i1
      "cf.cond_br"(%1188) [^bb219, ^bb219] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb218:
      %1189 = "llvm.extractvalue"(%1178) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1190 = "llvm.load"(%1181) : (!llvm.ptr) -> i32
      %1191 = "llvm.getelementptr"(%1189, %1190) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1192 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1193 = "llvm.getelementptr"(%1191, %1192) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1193) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb220(%1194 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1195 : !llvm.ptr):
      %1196 = "mid.invariant"(%1195) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1197 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb221] : () -> ()
    ^bb222:
      %1198 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1198, %1197) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb223] : () -> ()
    ^bb221:
      %1199 = "llvm.getelementptr"(%1195) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1200 = "mid.checkflag"(%1199) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1201 = "llvm.load"(%1200) : (!hi.bool) -> i1
      "cf.cond_br"(%1201) [^bb222, ^bb222] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb223:
      %1202 = "llvm.extractvalue"(%1194) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1203 = "llvm.load"(%1197) : (!llvm.ptr) -> i32
      %1204 = "llvm.getelementptr"(%1202, %1203) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1205 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1206 = "llvm.getelementptr"(%1204, %1205) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1206) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb224(%1207 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1208 : !llvm.ptr):
      %1209 = "mid.invariant"(%1208) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1210 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb225] : () -> ()
    ^bb226:
      %1211 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1211, %1210) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb227] : () -> ()
    ^bb225:
      %1212 = "llvm.getelementptr"(%1208) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1213 = "mid.checkflag"(%1212) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1214 = "llvm.load"(%1213) : (!hi.bool) -> i1
      "cf.cond_br"(%1214) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb227:
      %1215 = "llvm.extractvalue"(%1207) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1216 = "llvm.load"(%1210) : (!llvm.ptr) -> i32
      %1217 = "llvm.getelementptr"(%1215, %1216) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1218 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1219 = "llvm.getelementptr"(%1217, %1218) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1219) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb228(%1220 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1221 : !llvm.ptr):
      %1222 = "mid.invariant"(%1221) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1223 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb229] : () -> ()
    ^bb229:
      %1224 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1224, %1223) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb230] : () -> ()
    ^bb230:
      %1225 = "llvm.extractvalue"(%1220) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1226 = "llvm.load"(%1223) : (!llvm.ptr) -> i32
      %1227 = "llvm.getelementptr"(%1225, %1226) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1228 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1229 = "llvm.getelementptr"(%1227, %1228) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1229) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb231(%1230 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1231 : !llvm.ptr):
      %1232 = "mid.invariant"(%1231) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1233 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb232] : () -> ()
    ^bb233:
      %1234 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1234, %1233) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb234] : () -> ()
    ^bb232:
      %1235 = "llvm.getelementptr"(%1231) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1236 = "mid.checkflag"(%1235) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1237 = "llvm.load"(%1236) : (!hi.bool) -> i1
      "cf.cond_br"(%1237) [^bb233, ^bb233] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb234:
      %1238 = "llvm.extractvalue"(%1230) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1239 = "llvm.load"(%1233) : (!llvm.ptr) -> i32
      %1240 = "llvm.getelementptr"(%1238, %1239) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1241 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1242 = "llvm.getelementptr"(%1240, %1241) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1242) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb235(%1243 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1244 : !llvm.ptr):
      %1245 = "mid.invariant"(%1244) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1246 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb236] : () -> ()
    ^bb237:
      %1247 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1247, %1246) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb238] : () -> ()
    ^bb236:
      %1248 = "llvm.getelementptr"(%1244) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1249 = "mid.checkflag"(%1248) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1250 = "llvm.load"(%1249) : (!hi.bool) -> i1
      "cf.cond_br"(%1250) [^bb237, ^bb237] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb238:
      %1251 = "llvm.extractvalue"(%1243) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1252 = "llvm.load"(%1246) : (!llvm.ptr) -> i32
      %1253 = "llvm.getelementptr"(%1251, %1252) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1254 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1255 = "llvm.getelementptr"(%1253, %1254) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1255) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb239(%1256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1257 : !llvm.ptr):
      %1258 = "mid.invariant"(%1257) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1259 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb240] : () -> ()
    ^bb241:
      %1260 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1260, %1259) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb242] : () -> ()
    ^bb240:
      %1261 = "llvm.getelementptr"(%1257) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1262 = "mid.checkflag"(%1261) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1263 = "llvm.load"(%1262) : (!hi.bool) -> i1
      "cf.cond_br"(%1263) [^bb241, ^bb241] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb242:
      %1264 = "llvm.extractvalue"(%1256) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1265 = "llvm.load"(%1259) : (!llvm.ptr) -> i32
      %1266 = "llvm.getelementptr"(%1264, %1265) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1267 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1268 = "llvm.getelementptr"(%1266, %1267) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1268) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb243(%1269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1270 : !llvm.ptr):
      %1271 = "mid.invariant"(%1270) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1272 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb244] : () -> ()
    ^bb245:
      %1273 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1273, %1272) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb246] : () -> ()
    ^bb244:
      %1274 = "llvm.getelementptr"(%1270) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1275 = "mid.checkflag"(%1274) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1276 = "llvm.load"(%1275) : (!hi.bool) -> i1
      "cf.cond_br"(%1276) [^bb245, ^bb245] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb246:
      %1277 = "llvm.extractvalue"(%1269) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1278 = "llvm.load"(%1272) : (!llvm.ptr) -> i32
      %1279 = "llvm.getelementptr"(%1277, %1278) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1280 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1281 = "llvm.getelementptr"(%1279, %1280) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1281) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb247(%1282 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1283 : !llvm.ptr):
      %1284 = "mid.invariant"(%1283) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1285 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb248] : () -> ()
    ^bb249:
      %1286 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1286, %1285) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb250] : () -> ()
    ^bb248:
      %1287 = "llvm.getelementptr"(%1283) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1288 = "mid.checkflag"(%1287) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1289 = "llvm.load"(%1288) : (!hi.bool) -> i1
      "cf.cond_br"(%1289) [^bb249, ^bb249] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb250:
      %1290 = "llvm.extractvalue"(%1282) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1291 = "llvm.load"(%1285) : (!llvm.ptr) -> i32
      %1292 = "llvm.getelementptr"(%1290, %1291) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1293 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1294 = "llvm.getelementptr"(%1292, %1293) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1294) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb251(%1295 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1296 : !llvm.ptr):
      %1297 = "mid.invariant"(%1296) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1298 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb252] : () -> ()
    ^bb253:
      %1299 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1299, %1298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb254] : () -> ()
    ^bb252:
      %1300 = "llvm.getelementptr"(%1296) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1301 = "mid.checkflag"(%1300) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1302 = "llvm.load"(%1301) : (!hi.bool) -> i1
      "cf.cond_br"(%1302) [^bb253, ^bb253] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb254:
      %1303 = "llvm.extractvalue"(%1295) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1304 = "llvm.load"(%1298) : (!llvm.ptr) -> i32
      %1305 = "llvm.getelementptr"(%1303, %1304) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1306 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1307 = "llvm.getelementptr"(%1305, %1306) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1307) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FilterIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FilterIterator_field_FilterIterator_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FilterIterator_getter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorFilterIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FilterIterator_setter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorFilterIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FilterIterator_field_iterator", "getter_name" = "FilterIterator_getter_iterator", "setter_name" = "FilterIterator_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FilterIterator_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator.T_subtype_Any_to_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FilterIterator_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator.T_subtype_Any_to_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FilterIterator_field_f", "getter_name" = "FilterIterator_getter_f", "setter_name" = "FilterIterator_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb255(%1308 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1310 : !llvm.ptr, %1311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1312 : !llvm.struct<(!llvm.ptr)>):
      %1313 = "mid.wrap"(%1308) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1314 = "hi.cast"(%1313) {"from_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "to_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1315 = "mid.wrap"(%1311) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1316 = "hi.cast"(%1315) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1317 = "hi.cast"(%1316) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      "mid.set_field"(%1314, %1317) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> ()
      %1318 = "mid.wrap"(%1312) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
      %1319 = "hi.cast"(%1318) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
      %1320 = "hi.cast"(%1319) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
      "mid.set_field"(%1314, %1320) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> ()
    }) {"func_name" = "FilterIterator_init_iteratorIteratorT_fFunctionT_to_Bool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb256(%1321 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1322 : !llvm.ptr):
      %1323 = "mid.invariant"(%1322) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1324 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb257] : () -> ()
    ^bb258:
      %1325 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1325, %1324) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb259] : () -> ()
    ^bb260:
      %1326 = "llvm.getelementptr"(%1322) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1327 = "mid.checkflag"(%1326) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1328 = "llvm.load"(%1327) : (!hi.bool) -> i1
      "cf.cond_br"(%1328) [^bb258, ^bb258] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb257:
      %1329 = "llvm.getelementptr"(%1322) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1330 = "mid.checkflag"(%1329) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1331 = "llvm.load"(%1330) : (!hi.bool) -> i1
      "cf.cond_br"(%1331) [^bb260, ^bb260] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb259:
      %1332 = "llvm.extractvalue"(%1321) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1333 = "llvm.load"(%1324) : (!llvm.ptr) -> i32
      %1334 = "llvm.getelementptr"(%1332, %1333) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1335 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1336 = "llvm.getelementptr"(%1334, %1335) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1336) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb261(%1337 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1338 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1339 : !llvm.ptr):
      %1340 = "mid.wrap"(%1337) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1341 = "hi.cast"(%1340) {"from_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "to_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1342 = "mid.get_field"(%1341) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1343 = "mid.unwrap"(%1342) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1344 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1345 = "mid.method_call"(%1344, %1343) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1346 = "hi.cast"(%1345) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
      %1347 = "hi.cast"(%1346) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
      "mid.while"() ({
        %1348 = "mid.get_type_field"(%1341) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.reified_type
        %1349 = "mid.checkflag"(%1347) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1350 = "mid.unwrap"(%1349) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %1351 = "hi.cast"(%1347) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "FilterIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "FilterIterator">
        %1352 = "hi.cast"(%1351) {"from_typ" = !hi.type_param<"T", !hi.any, "FilterIterator">, "to_typ" = !hi.type_param<"T", !hi.any, "FilterIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FilterIterator">) -> !hi.type_param<"T", !hi.any, "FilterIterator">
        %1353 = "mid.unwrap"(%1352) : (!hi.type_param<"T", !hi.any, "FilterIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1354 = "mid.get_field"(%1341) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
        %1355 = "mid.unwrap"(%1354) : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> !llvm.ptr
        %1356 = "mid.fptr_call"(%1355, %1353) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %1357 = "mid.unwrap"(%1356) : (!hi.bool) -> i1
        "mid.if"(%1357) ({
          %1358 = "hi.cast"(%1351) {"from_typ" = !hi.type_param<"T", !hi.any, "FilterIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "FilterIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
          "mid.return"(%1358) : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1359 = "mid.get_field"(%1341) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
        %1360 = "mid.unwrap"(%1359) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1361 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1362 = "mid.method_call"(%1361, %1360) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1363 = "hi.cast"(%1362) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
        %1364 = "hi.cast"(%1363) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
        "mid.assign"(%1347, %1364) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> ()
      }) : () -> ()
      %1365 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1366 = "hi.cast"(%1365) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
      "mid.return"(%1366) : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "FilterIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb262(%1367 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1368 : !llvm.ptr):
      %1369 = "mid.invariant"(%1368) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1370 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb263] : () -> ()
    ^bb263:
      %1371 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1371, %1370) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb264] : () -> ()
    ^bb264:
      %1372 = "llvm.extractvalue"(%1367) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1373 = "llvm.load"(%1370) : (!llvm.ptr) -> i32
      %1374 = "llvm.getelementptr"(%1372, %1373) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1375 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1376 = "llvm.getelementptr"(%1374, %1375) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1376) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ChainIterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainIterable_field_ChainIterable_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterable_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterable_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterable_field_first", "getter_name" = "ChainIterable_getter_first", "setter_name" = "ChainIterable_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterable_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterable_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterable_field_second", "getter_name" = "ChainIterable_getter_second", "setter_name" = "ChainIterable_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb265(%1377 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1378 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1379 : !llvm.ptr, %1380 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1381 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1382 = "mid.wrap"(%1377) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1383 = "hi.cast"(%1382) {"from_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1384 = "mid.wrap"(%1380) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1385 = "hi.cast"(%1384) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1386 = "hi.cast"(%1385) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      "mid.set_field"(%1383, %1386) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> ()
      %1387 = "mid.wrap"(%1381) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1388 = "hi.cast"(%1387) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1389 = "hi.cast"(%1388) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      "mid.set_field"(%1383, %1389) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> ()
    }) {"func_name" = "ChainIterable_init_firstIterableT_secondIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb266(%1390 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1391 : !llvm.ptr):
      %1392 = "mid.invariant"(%1391) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1393 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb267] : () -> ()
    ^bb268:
      %1394 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1394, %1393) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb269] : () -> ()
    ^bb270:
      %1395 = "llvm.getelementptr"(%1391) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1396 = "mid.checkflag"(%1395) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1397 = "llvm.load"(%1396) : (!hi.bool) -> i1
      "cf.cond_br"(%1397) [^bb268, ^bb268] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb267:
      %1398 = "llvm.getelementptr"(%1391) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1399 = "mid.checkflag"(%1398) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1400 = "llvm.load"(%1399) : (!hi.bool) -> i1
      "cf.cond_br"(%1400) [^bb270, ^bb270] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb269:
      %1401 = "llvm.extractvalue"(%1390) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1402 = "llvm.load"(%1393) : (!llvm.ptr) -> i32
      %1403 = "llvm.getelementptr"(%1401, %1402) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1404 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1405 = "llvm.getelementptr"(%1403, %1404) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1405) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_init_firstIterableT_secondIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb271(%1406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1407 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1408 : !llvm.ptr):
      %1409 = "mid.wrap"(%1406) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1410 = "hi.cast"(%1409) {"from_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1411 = "mid.get_field"(%1410) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1412 = "mid.unwrap"(%1411) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1413 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1414 = "mid.method_call"(%1413, %1412) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1415 = "hi.cast"(%1414) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1416 = "mid.get_field"(%1410) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1417 = "mid.unwrap"(%1416) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1418 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1419 = "mid.method_call"(%1418, %1417) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1420 = "hi.cast"(%1419) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1421 = "mid.unwrap"(%1415) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1422 = "mid.unwrap"(%1420) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1423 = "mid.get_type_field"(%1410) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.reified_type
      %1424 = "mid.new"(%1423) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1425 = "mid.get_field"(%1410) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1426 = "mid.unwrap"(%1425) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1427 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1428 = "mid.method_call"(%1427, %1426) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1429 = "hi.cast"(%1428) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1430 = "mid.get_field"(%1410) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1431 = "mid.unwrap"(%1430) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1432 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1433 = "mid.method_call"(%1432, %1431) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1434 = "hi.cast"(%1433) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1435 = "hi.cast"(%1429) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1436 = "mid.unwrap"(%1435) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1437 = "hi.cast"(%1434) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1438 = "mid.unwrap"(%1437) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1439 = "mid.unwrap"(%1424) : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1440 = "mid.get_type_field"(%1410) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.reified_type
      %1441 = "mid.parameterization"(%1440) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChainIterable.T_subtype_Any", ["ChainIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1442 = "mid.get_type_field"(%1410) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.reified_type
      %1443 = "mid.parameterization"(%1442) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChainIterable.T_subtype_Any", ["ChainIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1444 = "mid.parameterizations_array"(%1441, %1443) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1444, %1439, %1436, %1438) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1445 = "hi.cast"(%1424) {"from_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      "mid.return"(%1445) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> ()
    }) {"func_name" = "ChainIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb272(%1446 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1447 : !llvm.ptr):
      %1448 = "mid.invariant"(%1447) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1449 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb273] : () -> ()
    ^bb273:
      %1450 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1450, %1449) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb274] : () -> ()
    ^bb274:
      %1451 = "llvm.extractvalue"(%1446) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1452 = "llvm.load"(%1449) : (!llvm.ptr) -> i32
      %1453 = "llvm.getelementptr"(%1451, %1452) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1454 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1455 = "llvm.getelementptr"(%1453, %1454) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1455) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb275(%1456 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1457 : !llvm.ptr):
      %1458 = "mid.invariant"(%1457) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1459 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb276] : () -> ()
    ^bb277:
      %1460 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1460, %1459) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb278] : () -> ()
    ^bb276:
      %1461 = "llvm.getelementptr"(%1457) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1462 = "mid.checkflag"(%1461) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1463 = "llvm.load"(%1462) : (!hi.bool) -> i1
      "cf.cond_br"(%1463) [^bb277, ^bb277] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb278:
      %1464 = "llvm.extractvalue"(%1456) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1465 = "llvm.load"(%1459) : (!llvm.ptr) -> i32
      %1466 = "llvm.getelementptr"(%1464, %1465) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1467 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1468 = "llvm.getelementptr"(%1466, %1467) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1468) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb279(%1469 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1470 : !llvm.ptr):
      %1471 = "mid.invariant"(%1470) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1472 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb280] : () -> ()
    ^bb281:
      %1473 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1473, %1472) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb282] : () -> ()
    ^bb283:
      %1474 = "llvm.getelementptr"(%1470) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1475 = "mid.checkflag"(%1474) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1476 = "llvm.load"(%1475) : (!hi.bool) -> i1
      "cf.cond_br"(%1476) [^bb281, ^bb281] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb280:
      %1477 = "llvm.getelementptr"(%1470) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1478 = "mid.checkflag"(%1477) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1479 = "llvm.load"(%1478) : (!hi.bool) -> i1
      "cf.cond_br"(%1479) [^bb283, ^bb283] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb282:
      %1480 = "llvm.extractvalue"(%1469) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1481 = "llvm.load"(%1472) : (!llvm.ptr) -> i32
      %1482 = "llvm.getelementptr"(%1480, %1481) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1483 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1484 = "llvm.getelementptr"(%1482, %1483) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1484) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb284(%1485 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1486 : !llvm.ptr):
      %1487 = "mid.invariant"(%1486) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1488 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb285] : () -> ()
    ^bb286:
      %1489 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1489, %1488) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb287] : () -> ()
    ^bb285:
      %1490 = "llvm.getelementptr"(%1486) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1491 = "mid.checkflag"(%1490) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1492 = "llvm.load"(%1491) : (!hi.bool) -> i1
      "cf.cond_br"(%1492) [^bb286, ^bb286] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb287:
      %1493 = "llvm.extractvalue"(%1485) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1494 = "llvm.load"(%1488) : (!llvm.ptr) -> i32
      %1495 = "llvm.getelementptr"(%1493, %1494) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1496 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1497 = "llvm.getelementptr"(%1495, %1496) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1497) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb288(%1498 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1499 : !llvm.ptr):
      %1500 = "mid.invariant"(%1499) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1501 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb289] : () -> ()
    ^bb290:
      %1502 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1502, %1501) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb291] : () -> ()
    ^bb289:
      %1503 = "llvm.getelementptr"(%1499) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1504 = "mid.checkflag"(%1503) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1505 = "llvm.load"(%1504) : (!hi.bool) -> i1
      "cf.cond_br"(%1505) [^bb290, ^bb290] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb291:
      %1506 = "llvm.extractvalue"(%1498) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1507 = "llvm.load"(%1501) : (!llvm.ptr) -> i32
      %1508 = "llvm.getelementptr"(%1506, %1507) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1509 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1510 = "llvm.getelementptr"(%1508, %1509) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1510) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb292(%1511 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1512 : !llvm.ptr):
      %1513 = "mid.invariant"(%1512) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1514 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb293] : () -> ()
    ^bb293:
      %1515 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1515, %1514) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb294] : () -> ()
    ^bb294:
      %1516 = "llvm.extractvalue"(%1511) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1517 = "llvm.load"(%1514) : (!llvm.ptr) -> i32
      %1518 = "llvm.getelementptr"(%1516, %1517) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1519 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1520 = "llvm.getelementptr"(%1518, %1519) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1520) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb295(%1521 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1522 : !llvm.ptr):
      %1523 = "mid.invariant"(%1522) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1524 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb296] : () -> ()
    ^bb297:
      %1525 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1525, %1524) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb298] : () -> ()
    ^bb296:
      %1526 = "llvm.getelementptr"(%1522) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1527 = "mid.checkflag"(%1526) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1528 = "llvm.load"(%1527) : (!hi.bool) -> i1
      "cf.cond_br"(%1528) [^bb297, ^bb297] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb298:
      %1529 = "llvm.extractvalue"(%1521) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1530 = "llvm.load"(%1524) : (!llvm.ptr) -> i32
      %1531 = "llvm.getelementptr"(%1529, %1530) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1532 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1533 = "llvm.getelementptr"(%1531, %1532) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1533) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb299(%1534 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1535 : !llvm.ptr):
      %1536 = "mid.invariant"(%1535) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1537 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb300] : () -> ()
    ^bb301:
      %1538 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1538, %1537) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb302] : () -> ()
    ^bb300:
      %1539 = "llvm.getelementptr"(%1535) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1540 = "mid.checkflag"(%1539) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1541 = "llvm.load"(%1540) : (!hi.bool) -> i1
      "cf.cond_br"(%1541) [^bb301, ^bb301] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb302:
      %1542 = "llvm.extractvalue"(%1534) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1543 = "llvm.load"(%1537) : (!llvm.ptr) -> i32
      %1544 = "llvm.getelementptr"(%1542, %1543) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1545 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1546 = "llvm.getelementptr"(%1544, %1545) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1546) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb303(%1547 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1548 : !llvm.ptr):
      %1549 = "mid.invariant"(%1548) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1550 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb304] : () -> ()
    ^bb305:
      %1551 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1551, %1550) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb306] : () -> ()
    ^bb304:
      %1552 = "llvm.getelementptr"(%1548) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1553 = "mid.checkflag"(%1552) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1554 = "llvm.load"(%1553) : (!hi.bool) -> i1
      "cf.cond_br"(%1554) [^bb305, ^bb305] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb306:
      %1555 = "llvm.extractvalue"(%1547) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1556 = "llvm.load"(%1550) : (!llvm.ptr) -> i32
      %1557 = "llvm.getelementptr"(%1555, %1556) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1558 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1559 = "llvm.getelementptr"(%1557, %1558) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1559) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb307(%1560 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1561 : !llvm.ptr):
      %1562 = "mid.invariant"(%1561) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1563 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb308] : () -> ()
    ^bb309:
      %1564 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1564, %1563) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb310] : () -> ()
    ^bb308:
      %1565 = "llvm.getelementptr"(%1561) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1566 = "mid.checkflag"(%1565) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1567 = "llvm.load"(%1566) : (!hi.bool) -> i1
      "cf.cond_br"(%1567) [^bb309, ^bb309] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb310:
      %1568 = "llvm.extractvalue"(%1560) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1569 = "llvm.load"(%1563) : (!llvm.ptr) -> i32
      %1570 = "llvm.getelementptr"(%1568, %1569) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1571 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1572 = "llvm.getelementptr"(%1570, %1571) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1572) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb311(%1573 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1574 : !llvm.ptr):
      %1575 = "mid.invariant"(%1574) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1576 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb312] : () -> ()
    ^bb313:
      %1577 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1577, %1576) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb314] : () -> ()
    ^bb312:
      %1578 = "llvm.getelementptr"(%1574) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1579 = "mid.checkflag"(%1578) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1580 = "llvm.load"(%1579) : (!hi.bool) -> i1
      "cf.cond_br"(%1580) [^bb313, ^bb313] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb314:
      %1581 = "llvm.extractvalue"(%1573) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1582 = "llvm.load"(%1576) : (!llvm.ptr) -> i32
      %1583 = "llvm.getelementptr"(%1581, %1582) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1584 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1585 = "llvm.getelementptr"(%1583, %1584) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1585) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb315(%1586 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1587 : !llvm.ptr):
      %1588 = "mid.invariant"(%1587) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1589 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb316] : () -> ()
    ^bb317:
      %1590 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1590, %1589) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb318] : () -> ()
    ^bb316:
      %1591 = "llvm.getelementptr"(%1587) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1592 = "mid.checkflag"(%1591) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1593 = "llvm.load"(%1592) : (!hi.bool) -> i1
      "cf.cond_br"(%1593) [^bb317, ^bb317] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb318:
      %1594 = "llvm.extractvalue"(%1586) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1595 = "llvm.load"(%1589) : (!llvm.ptr) -> i32
      %1596 = "llvm.getelementptr"(%1594, %1595) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1597 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1598 = "llvm.getelementptr"(%1596, %1597) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1598) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ChainIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainIterator_field_ChainIterator_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterator_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterator_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterator_field_first", "getter_name" = "ChainIterator_getter_first", "setter_name" = "ChainIterator_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterator_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterator_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterator_field_second", "getter_name" = "ChainIterator_getter_second", "setter_name" = "ChainIterator_setter_second"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterator_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterator_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterator_field_on_first", "getter_name" = "ChainIterator_getter_on_first", "setter_name" = "ChainIterator_setter_on_first"} : () -> ()
    "mid.func"() ({
    ^bb319(%1599 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1600 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1601 : !llvm.ptr, %1602 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1603 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1604 = "mid.wrap"(%1599) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1605 = "hi.cast"(%1604) {"from_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1606 = "mid.wrap"(%1602) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1607 = "hi.cast"(%1606) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1608 = "hi.cast"(%1607) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      "mid.set_field"(%1605, %1608) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> ()
      %1609 = "mid.wrap"(%1603) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1610 = "hi.cast"(%1609) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1611 = "hi.cast"(%1610) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      "mid.set_field"(%1605, %1611) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> ()
      %1612 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1613 = "hi.cast"(%1612) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1605, %1613) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, !hi.bool) -> ()
    }) {"func_name" = "ChainIterator_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb320(%1614 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1615 : !llvm.ptr):
      %1616 = "mid.invariant"(%1615) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1617 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb321] : () -> ()
    ^bb322:
      %1618 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1618, %1617) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb323] : () -> ()
    ^bb324:
      %1619 = "llvm.getelementptr"(%1615) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1620 = "mid.checkflag"(%1619) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1621 = "llvm.load"(%1620) : (!hi.bool) -> i1
      "cf.cond_br"(%1621) [^bb322, ^bb322] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb321:
      %1622 = "llvm.getelementptr"(%1615) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1623 = "mid.checkflag"(%1622) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1624 = "llvm.load"(%1623) : (!hi.bool) -> i1
      "cf.cond_br"(%1624) [^bb324, ^bb324] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb323:
      %1625 = "llvm.extractvalue"(%1614) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1626 = "llvm.load"(%1617) : (!llvm.ptr) -> i32
      %1627 = "llvm.getelementptr"(%1625, %1626) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1628 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1629 = "llvm.getelementptr"(%1627, %1628) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1629) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterator_B_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb325(%1630 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1631 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1632 : !llvm.ptr):
      %1633 = "mid.wrap"(%1630) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1634 = "hi.cast"(%1633) {"from_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1635 = "mid.get_field"(%1634) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.bool
      %1636 = "mid.unwrap"(%1635) : (!hi.bool) -> i1
      "mid.if"(%1636) ({
        %1637 = "mid.get_field"(%1634) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
        %1638 = "mid.unwrap"(%1637) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1639 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1640 = "mid.method_call"(%1639, %1638) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1641 = "hi.cast"(%1640) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
        %1642 = "mid.get_type_field"(%1634) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.reified_type
        %1643 = "mid.checkflag"(%1641) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1644 = "mid.unwrap"(%1643) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %1645 = "hi.cast"(%1641) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
        "mid.if"(%1644) ({
          %1646 = "hi.cast"(%1645) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "ChainIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "ChainIterator">
          %1647 = "hi.cast"(%1646) {"from_typ" = !hi.type_param<"T", !hi.any, "ChainIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ChainIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
          "mid.return"(%1647) : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> ()
          %1648 = "hi.cast"(%1646) {"from_typ" = !hi.type_param<"T", !hi.any, "ChainIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ChainIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
          "mid.assign"(%1645, %1648) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1649 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1650 = "hi.cast"(%1649) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.set_field"(%1634, %1650) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, !hi.bool) -> ()
      }) : (i1) -> ()
      %1651 = "mid.get_field"(%1634) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1652 = "mid.unwrap"(%1651) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1653 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1654 = "mid.method_call"(%1653, %1652) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1655 = "hi.cast"(%1654) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
      %1656 = "hi.cast"(%1655) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
      "mid.return"(%1656) : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ChainIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb326(%1657 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1658 : !llvm.ptr):
      %1659 = "mid.invariant"(%1658) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1660 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb327] : () -> ()
    ^bb327:
      %1661 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1661, %1660) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb328] : () -> ()
    ^bb328:
      %1662 = "llvm.extractvalue"(%1657) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1663 = "llvm.load"(%1660) : (!llvm.ptr) -> i32
      %1664 = "llvm.getelementptr"(%1662, %1663) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1665 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1666 = "llvm.getelementptr"(%1664, %1665) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1666) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_InterleaveIterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleaveIterable_field_InterleaveIterable_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterable_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterable_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterable_field_first", "getter_name" = "InterleaveIterable_getter_first", "setter_name" = "InterleaveIterable_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterable_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterable_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterable_field_second", "getter_name" = "InterleaveIterable_getter_second", "setter_name" = "InterleaveIterable_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb329(%1667 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1668 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1669 : !llvm.ptr, %1670 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1671 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1672 = "mid.wrap"(%1667) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1673 = "hi.cast"(%1672) {"from_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1674 = "mid.wrap"(%1670) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1675 = "hi.cast"(%1674) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1676 = "hi.cast"(%1675) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      "mid.set_field"(%1673, %1676) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> ()
      %1677 = "mid.wrap"(%1671) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1678 = "hi.cast"(%1677) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1679 = "hi.cast"(%1678) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      "mid.set_field"(%1673, %1679) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> ()
    }) {"func_name" = "InterleaveIterable_init_firstIterableT_secondIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb330(%1680 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1681 : !llvm.ptr):
      %1682 = "mid.invariant"(%1681) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1683 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb331] : () -> ()
    ^bb332:
      %1684 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1684, %1683) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb333] : () -> ()
    ^bb334:
      %1685 = "llvm.getelementptr"(%1681) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1686 = "mid.checkflag"(%1685) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1687 = "llvm.load"(%1686) : (!hi.bool) -> i1
      "cf.cond_br"(%1687) [^bb332, ^bb332] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb331:
      %1688 = "llvm.getelementptr"(%1681) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1689 = "mid.checkflag"(%1688) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1690 = "llvm.load"(%1689) : (!hi.bool) -> i1
      "cf.cond_br"(%1690) [^bb334, ^bb334] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb333:
      %1691 = "llvm.extractvalue"(%1680) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1692 = "llvm.load"(%1683) : (!llvm.ptr) -> i32
      %1693 = "llvm.getelementptr"(%1691, %1692) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1694 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1695 = "llvm.getelementptr"(%1693, %1694) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1695) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_init_firstIterableT_secondIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb335(%1696 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1697 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1698 : !llvm.ptr):
      %1699 = "mid.wrap"(%1696) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1700 = "hi.cast"(%1699) {"from_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1701 = "mid.get_field"(%1700) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1702 = "mid.unwrap"(%1701) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1703 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1704 = "mid.method_call"(%1703, %1702) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1705 = "hi.cast"(%1704) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1706 = "mid.get_field"(%1700) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1707 = "mid.unwrap"(%1706) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1708 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1709 = "mid.method_call"(%1708, %1707) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1710 = "hi.cast"(%1709) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1711 = "mid.unwrap"(%1705) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1712 = "mid.unwrap"(%1710) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1713 = "mid.get_type_field"(%1700) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.reified_type
      %1714 = "mid.new"(%1713) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1715 = "mid.get_field"(%1700) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1716 = "mid.unwrap"(%1715) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1717 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1718 = "mid.method_call"(%1717, %1716) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1719 = "hi.cast"(%1718) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1720 = "mid.get_field"(%1700) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1721 = "mid.unwrap"(%1720) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1722 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1723 = "mid.method_call"(%1722, %1721) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1724 = "hi.cast"(%1723) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1725 = "hi.cast"(%1719) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1726 = "mid.unwrap"(%1725) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1727 = "hi.cast"(%1724) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1728 = "mid.unwrap"(%1727) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1729 = "mid.unwrap"(%1714) : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1730 = "mid.get_type_field"(%1700) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.reified_type
      %1731 = "mid.parameterization"(%1730) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleaveIterable.T_subtype_Any", ["InterleaveIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1732 = "mid.get_type_field"(%1700) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.reified_type
      %1733 = "mid.parameterization"(%1732) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleaveIterable.T_subtype_Any", ["InterleaveIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1734 = "mid.parameterizations_array"(%1731, %1733) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1734, %1729, %1726, %1728) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1735 = "hi.cast"(%1714) {"from_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      "mid.return"(%1735) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> ()
    }) {"func_name" = "InterleaveIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb336(%1736 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1737 : !llvm.ptr):
      %1738 = "mid.invariant"(%1737) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1739 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb337] : () -> ()
    ^bb337:
      %1740 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1740, %1739) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb338] : () -> ()
    ^bb338:
      %1741 = "llvm.extractvalue"(%1736) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1742 = "llvm.load"(%1739) : (!llvm.ptr) -> i32
      %1743 = "llvm.getelementptr"(%1741, %1742) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1744 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1745 = "llvm.getelementptr"(%1743, %1744) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1745) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb339(%1746 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1747 : !llvm.ptr):
      %1748 = "mid.invariant"(%1747) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1749 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb340] : () -> ()
    ^bb341:
      %1750 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1750, %1749) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb342] : () -> ()
    ^bb340:
      %1751 = "llvm.getelementptr"(%1747) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1752 = "mid.checkflag"(%1751) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1753 = "llvm.load"(%1752) : (!hi.bool) -> i1
      "cf.cond_br"(%1753) [^bb341, ^bb341] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb342:
      %1754 = "llvm.extractvalue"(%1746) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1755 = "llvm.load"(%1749) : (!llvm.ptr) -> i32
      %1756 = "llvm.getelementptr"(%1754, %1755) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1757 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1758 = "llvm.getelementptr"(%1756, %1757) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1758) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb343(%1759 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1760 : !llvm.ptr):
      %1761 = "mid.invariant"(%1760) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1762 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb344] : () -> ()
    ^bb345:
      %1763 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1763, %1762) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb346] : () -> ()
    ^bb347:
      %1764 = "llvm.getelementptr"(%1760) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1765 = "mid.checkflag"(%1764) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1766 = "llvm.load"(%1765) : (!hi.bool) -> i1
      "cf.cond_br"(%1766) [^bb345, ^bb345] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb344:
      %1767 = "llvm.getelementptr"(%1760) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1768 = "mid.checkflag"(%1767) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1769 = "llvm.load"(%1768) : (!hi.bool) -> i1
      "cf.cond_br"(%1769) [^bb347, ^bb347] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb346:
      %1770 = "llvm.extractvalue"(%1759) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1771 = "llvm.load"(%1762) : (!llvm.ptr) -> i32
      %1772 = "llvm.getelementptr"(%1770, %1771) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1773 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1774 = "llvm.getelementptr"(%1772, %1773) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1774) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb348(%1775 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1776 : !llvm.ptr):
      %1777 = "mid.invariant"(%1776) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1778 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb349] : () -> ()
    ^bb350:
      %1779 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1779, %1778) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb351] : () -> ()
    ^bb349:
      %1780 = "llvm.getelementptr"(%1776) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1781 = "mid.checkflag"(%1780) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1782 = "llvm.load"(%1781) : (!hi.bool) -> i1
      "cf.cond_br"(%1782) [^bb350, ^bb350] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb351:
      %1783 = "llvm.extractvalue"(%1775) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1784 = "llvm.load"(%1778) : (!llvm.ptr) -> i32
      %1785 = "llvm.getelementptr"(%1783, %1784) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1786 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1787 = "llvm.getelementptr"(%1785, %1786) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1787) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb352(%1788 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1789 : !llvm.ptr):
      %1790 = "mid.invariant"(%1789) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1791 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb353] : () -> ()
    ^bb354:
      %1792 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1792, %1791) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb355] : () -> ()
    ^bb353:
      %1793 = "llvm.getelementptr"(%1789) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1794 = "mid.checkflag"(%1793) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1795 = "llvm.load"(%1794) : (!hi.bool) -> i1
      "cf.cond_br"(%1795) [^bb354, ^bb354] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb355:
      %1796 = "llvm.extractvalue"(%1788) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1797 = "llvm.load"(%1791) : (!llvm.ptr) -> i32
      %1798 = "llvm.getelementptr"(%1796, %1797) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1799 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1800 = "llvm.getelementptr"(%1798, %1799) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1800) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb356(%1801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1802 : !llvm.ptr):
      %1803 = "mid.invariant"(%1802) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1804 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb357] : () -> ()
    ^bb357:
      %1805 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1805, %1804) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb358] : () -> ()
    ^bb358:
      %1806 = "llvm.extractvalue"(%1801) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1807 = "llvm.load"(%1804) : (!llvm.ptr) -> i32
      %1808 = "llvm.getelementptr"(%1806, %1807) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1809 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1810 = "llvm.getelementptr"(%1808, %1809) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1810) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb359(%1811 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1812 : !llvm.ptr):
      %1813 = "mid.invariant"(%1812) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1814 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb360] : () -> ()
    ^bb361:
      %1815 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1815, %1814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb362] : () -> ()
    ^bb360:
      %1816 = "llvm.getelementptr"(%1812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1817 = "mid.checkflag"(%1816) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1818 = "llvm.load"(%1817) : (!hi.bool) -> i1
      "cf.cond_br"(%1818) [^bb361, ^bb361] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb362:
      %1819 = "llvm.extractvalue"(%1811) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1820 = "llvm.load"(%1814) : (!llvm.ptr) -> i32
      %1821 = "llvm.getelementptr"(%1819, %1820) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1822 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1823 = "llvm.getelementptr"(%1821, %1822) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1823) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb363(%1824 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1825 : !llvm.ptr):
      %1826 = "mid.invariant"(%1825) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1827 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb364] : () -> ()
    ^bb365:
      %1828 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1828, %1827) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb366] : () -> ()
    ^bb364:
      %1829 = "llvm.getelementptr"(%1825) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1830 = "mid.checkflag"(%1829) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1831 = "llvm.load"(%1830) : (!hi.bool) -> i1
      "cf.cond_br"(%1831) [^bb365, ^bb365] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb366:
      %1832 = "llvm.extractvalue"(%1824) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1833 = "llvm.load"(%1827) : (!llvm.ptr) -> i32
      %1834 = "llvm.getelementptr"(%1832, %1833) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1835 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1836 = "llvm.getelementptr"(%1834, %1835) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1836) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb367(%1837 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1838 : !llvm.ptr):
      %1839 = "mid.invariant"(%1838) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1840 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb368] : () -> ()
    ^bb369:
      %1841 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1841, %1840) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb370] : () -> ()
    ^bb368:
      %1842 = "llvm.getelementptr"(%1838) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1843 = "mid.checkflag"(%1842) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1844 = "llvm.load"(%1843) : (!hi.bool) -> i1
      "cf.cond_br"(%1844) [^bb369, ^bb369] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb370:
      %1845 = "llvm.extractvalue"(%1837) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1846 = "llvm.load"(%1840) : (!llvm.ptr) -> i32
      %1847 = "llvm.getelementptr"(%1845, %1846) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1848 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1849 = "llvm.getelementptr"(%1847, %1848) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1849) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb371(%1850 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1851 : !llvm.ptr):
      %1852 = "mid.invariant"(%1851) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1853 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb372] : () -> ()
    ^bb373:
      %1854 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1854, %1853) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb374] : () -> ()
    ^bb372:
      %1855 = "llvm.getelementptr"(%1851) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1856 = "mid.checkflag"(%1855) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1857 = "llvm.load"(%1856) : (!hi.bool) -> i1
      "cf.cond_br"(%1857) [^bb373, ^bb373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb374:
      %1858 = "llvm.extractvalue"(%1850) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1859 = "llvm.load"(%1853) : (!llvm.ptr) -> i32
      %1860 = "llvm.getelementptr"(%1858, %1859) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1861 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1862 = "llvm.getelementptr"(%1860, %1861) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1862) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb375(%1863 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1864 : !llvm.ptr):
      %1865 = "mid.invariant"(%1864) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1866 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb376] : () -> ()
    ^bb377:
      %1867 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1867, %1866) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb378] : () -> ()
    ^bb376:
      %1868 = "llvm.getelementptr"(%1864) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1869 = "mid.checkflag"(%1868) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1870 = "llvm.load"(%1869) : (!hi.bool) -> i1
      "cf.cond_br"(%1870) [^bb377, ^bb377] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb378:
      %1871 = "llvm.extractvalue"(%1863) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1872 = "llvm.load"(%1866) : (!llvm.ptr) -> i32
      %1873 = "llvm.getelementptr"(%1871, %1872) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1874 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1875 = "llvm.getelementptr"(%1873, %1874) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1875) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb379(%1876 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1877 : !llvm.ptr):
      %1878 = "mid.invariant"(%1877) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1879 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb380] : () -> ()
    ^bb381:
      %1880 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1880, %1879) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb382] : () -> ()
    ^bb380:
      %1881 = "llvm.getelementptr"(%1877) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1882 = "mid.checkflag"(%1881) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1883 = "llvm.load"(%1882) : (!hi.bool) -> i1
      "cf.cond_br"(%1883) [^bb381, ^bb381] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb382:
      %1884 = "llvm.extractvalue"(%1876) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1885 = "llvm.load"(%1879) : (!llvm.ptr) -> i32
      %1886 = "llvm.getelementptr"(%1884, %1885) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1887 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1888 = "llvm.getelementptr"(%1886, %1887) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1888) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_InterleaveIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleaveIterator_field_InterleaveIterator_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterator_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterator_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterator_field_first", "getter_name" = "InterleaveIterator_getter_first", "setter_name" = "InterleaveIterator_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterator_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterator_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterator_field_second", "getter_name" = "InterleaveIterator_getter_second", "setter_name" = "InterleaveIterator_setter_second"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterator_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterator_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterator_field_on_first", "getter_name" = "InterleaveIterator_getter_on_first", "setter_name" = "InterleaveIterator_setter_on_first"} : () -> ()
    "mid.func"() ({
    ^bb383(%1889 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1890 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1891 : !llvm.ptr, %1892 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1893 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1894 = "mid.wrap"(%1889) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1895 = "hi.cast"(%1894) {"from_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1896 = "mid.wrap"(%1892) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1897 = "hi.cast"(%1896) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1898 = "hi.cast"(%1897) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      "mid.set_field"(%1895, %1898) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> ()
      %1899 = "mid.wrap"(%1893) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1900 = "hi.cast"(%1899) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1901 = "hi.cast"(%1900) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      "mid.set_field"(%1895, %1901) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> ()
      %1902 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1903 = "hi.cast"(%1902) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1895, %1903) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.bool) -> ()
    }) {"func_name" = "InterleaveIterator_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb384(%1904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1905 : !llvm.ptr):
      %1906 = "mid.invariant"(%1905) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1907 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb385] : () -> ()
    ^bb386:
      %1908 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1908, %1907) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb387] : () -> ()
    ^bb388:
      %1909 = "llvm.getelementptr"(%1905) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1910 = "mid.checkflag"(%1909) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1911 = "llvm.load"(%1910) : (!hi.bool) -> i1
      "cf.cond_br"(%1911) [^bb386, ^bb386] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb385:
      %1912 = "llvm.getelementptr"(%1905) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1913 = "mid.checkflag"(%1912) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1914 = "llvm.load"(%1913) : (!hi.bool) -> i1
      "cf.cond_br"(%1914) [^bb388, ^bb388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb387:
      %1915 = "llvm.extractvalue"(%1904) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1916 = "llvm.load"(%1907) : (!llvm.ptr) -> i32
      %1917 = "llvm.getelementptr"(%1915, %1916) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1918 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1919 = "llvm.getelementptr"(%1917, %1918) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1919) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterator_B_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb389(%1920 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1921 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1922 : !llvm.ptr):
      %1923 = "mid.wrap"(%1920) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1924 = "hi.cast"(%1923) {"from_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1925 = "mid.get_field"(%1924) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.bool
      %1926 = "mid.unwrap"(%1925) : (!hi.bool) -> i1
      "mid.if"(%1926) ({
        %1927 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1928 = "hi.cast"(%1927) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.set_field"(%1924, %1928) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.bool) -> ()
        %1929 = "mid.get_field"(%1924) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
        %1930 = "mid.unwrap"(%1929) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1931 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1932 = "mid.method_call"(%1931, %1930) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1933 = "hi.cast"(%1932) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>
        %1934 = "hi.cast"(%1933) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>
        "mid.return"(%1934) : (!hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1935 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1936 = "hi.cast"(%1935) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1924, %1936) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.bool) -> ()
      %1937 = "mid.get_field"(%1924) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1938 = "mid.unwrap"(%1937) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1939 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1940 = "mid.method_call"(%1939, %1938) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1941 = "hi.cast"(%1940) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>
      %1942 = "hi.cast"(%1941) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>
      "mid.return"(%1942) : (!hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "InterleaveIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb390(%1943 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1944 : !llvm.ptr):
      %1945 = "mid.invariant"(%1944) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1946 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb391] : () -> ()
    ^bb391:
      %1947 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1947, %1946) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb392] : () -> ()
    ^bb392:
      %1948 = "llvm.extractvalue"(%1943) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1949 = "llvm.load"(%1946) : (!llvm.ptr) -> i32
      %1950 = "llvm.getelementptr"(%1948, %1949) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1951 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1952 = "llvm.getelementptr"(%1950, %1951) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1952) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ZipIterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZipIterable_field_ZipIterable_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZipIterable_field_ZipIterable_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterable_field_ZipIterable_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZipIterable_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZipIterable_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZipIterable_field_first", "getter_name" = "ZipIterable_getter_first", "setter_name" = "ZipIterable_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZipIterable_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZipIterable_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZipIterable_field_second", "getter_name" = "ZipIterable_getter_second", "setter_name" = "ZipIterable_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb393(%1953 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1954 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1955 : !llvm.ptr, %1956 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1958 = "mid.wrap"(%1953) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1959 = "hi.cast"(%1958) {"from_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1960 = "mid.wrap"(%1956) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1961 = "hi.cast"(%1960) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1962 = "hi.cast"(%1961) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      "mid.set_field"(%1959, %1962) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> ()
      %1963 = "mid.wrap"(%1957) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1964 = "hi.cast"(%1963) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1965 = "hi.cast"(%1964) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      "mid.set_field"(%1959, %1965) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> ()
    }) {"func_name" = "ZipIterable_init_firstIterableT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb394(%1966 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1967 : !llvm.ptr):
      %1968 = "mid.invariant"(%1967) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1969 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb395] : () -> ()
    ^bb396:
      %1970 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1970, %1969) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb397] : () -> ()
    ^bb398:
      %1971 = "llvm.getelementptr"(%1967) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1972 = "mid.checkflag"(%1971) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1973 = "llvm.load"(%1972) : (!hi.bool) -> i1
      "cf.cond_br"(%1973) [^bb396, ^bb396] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb395:
      %1974 = "llvm.getelementptr"(%1967) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1975 = "mid.checkflag"(%1974) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1976 = "llvm.load"(%1975) : (!hi.bool) -> i1
      "cf.cond_br"(%1976) [^bb398, ^bb398] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb397:
      %1977 = "llvm.extractvalue"(%1966) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1978 = "llvm.load"(%1969) : (!llvm.ptr) -> i32
      %1979 = "llvm.getelementptr"(%1977, %1978) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1980 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1981 = "llvm.getelementptr"(%1979, %1980) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1981) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_init_firstIterableT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb399(%1982 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1983 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1984 : !llvm.ptr):
      %1985 = "mid.wrap"(%1982) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1986 = "hi.cast"(%1985) {"from_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1987 = "mid.get_field"(%1986) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1988 = "mid.unwrap"(%1987) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1989 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1990 = "mid.method_call"(%1989, %1988) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1991 = "hi.cast"(%1990) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1992 = "mid.get_field"(%1986) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1993 = "mid.unwrap"(%1992) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1994 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1995 = "mid.method_call"(%1994, %1993) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1996 = "hi.cast"(%1995) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1997 = "mid.unwrap"(%1991) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1998 = "mid.unwrap"(%1996) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1999 = "mid.get_type_field"(%1986) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.reified_type
      %2000 = "mid.get_type_field"(%1986) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.reified_type
      %2001 = "mid.get_type_field"(%1986) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.reified_type
      %2002 = "mid.get_type_field"(%1986) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.reified_type
      %2003 = "mid.parameterization"(%2001, %2002) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairZipIterable.T_subtype_Any._ZipIterable.U_subtype_Any", ["ZipIterable.T_subtype_Any"], ["ZipIterable.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %2004 = "mid.new"(%1999, %2000, %2003) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %2005 = "mid.get_field"(%1986) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %2006 = "mid.unwrap"(%2005) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2007 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2008 = "mid.method_call"(%2007, %2006) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2009 = "hi.cast"(%2008) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %2010 = "mid.get_field"(%1986) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %2011 = "mid.unwrap"(%2010) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2012 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2013 = "mid.method_call"(%2012, %2011) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2014 = "hi.cast"(%2013) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %2015 = "hi.cast"(%2009) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %2016 = "mid.unwrap"(%2015) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2017 = "hi.cast"(%2014) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2018 = "mid.unwrap"(%2017) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2019 = "mid.unwrap"(%2004) : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2020 = "mid.get_type_field"(%1986) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.reified_type
      %2021 = "mid.parameterization"(%2020) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZipIterable.T_subtype_Any", ["ZipIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %2022 = "mid.get_type_field"(%1986) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.reified_type
      %2023 = "mid.parameterization"(%2022) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZipIterable.U_subtype_Any", ["ZipIterable.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %2024 = "mid.parameterizations_array"(%2021, %2023) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2024, %2019, %2016, %2018) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2025 = "hi.cast"(%2004) {"from_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%2025) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "ZipIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb400(%2026 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2027 : !llvm.ptr):
      %2028 = "mid.invariant"(%2027) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2029 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb401] : () -> ()
    ^bb401:
      %2030 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%2030, %2029) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb402] : () -> ()
    ^bb402:
      %2031 = "llvm.extractvalue"(%2026) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2032 = "llvm.load"(%2029) : (!llvm.ptr) -> i32
      %2033 = "llvm.getelementptr"(%2031, %2032) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2034 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2035 = "llvm.getelementptr"(%2033, %2034) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2035) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb403(%2036 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2037 : !llvm.ptr):
      %2038 = "mid.invariant"(%2037) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2039 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb404] : () -> ()
    ^bb405:
      %2040 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%2040, %2039) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb406] : () -> ()
    ^bb404:
      %2041 = "llvm.getelementptr"(%2037) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2042 = "mid.checkflag"(%2041) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2043 = "llvm.load"(%2042) : (!hi.bool) -> i1
      "cf.cond_br"(%2043) [^bb405, ^bb405] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb406:
      %2044 = "llvm.extractvalue"(%2036) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2045 = "llvm.load"(%2039) : (!llvm.ptr) -> i32
      %2046 = "llvm.getelementptr"(%2044, %2045) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2047 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2048 = "llvm.getelementptr"(%2046, %2047) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2048) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb407(%2049 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2050 : !llvm.ptr):
      %2051 = "mid.invariant"(%2050) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2052 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb408] : () -> ()
    ^bb409:
      %2053 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%2053, %2052) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb410] : () -> ()
    ^bb411:
      %2054 = "llvm.getelementptr"(%2050) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2055 = "mid.checkflag"(%2054) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2056 = "llvm.load"(%2055) : (!hi.bool) -> i1
      "cf.cond_br"(%2056) [^bb409, ^bb409] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb408:
      %2057 = "llvm.getelementptr"(%2050) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2058 = "mid.checkflag"(%2057) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %2059 = "llvm.load"(%2058) : (!hi.bool) -> i1
      "cf.cond_br"(%2059) [^bb411, ^bb411] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb410:
      %2060 = "llvm.extractvalue"(%2049) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2061 = "llvm.load"(%2052) : (!llvm.ptr) -> i32
      %2062 = "llvm.getelementptr"(%2060, %2061) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2063 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2064 = "llvm.getelementptr"(%2062, %2063) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2064) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb412(%2065 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2066 : !llvm.ptr):
      %2067 = "mid.invariant"(%2066) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2068 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb413] : () -> ()
    ^bb414:
      %2069 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%2069, %2068) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb415] : () -> ()
    ^bb413:
      %2070 = "llvm.getelementptr"(%2066) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2071 = "mid.checkflag"(%2070) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2072 = "llvm.load"(%2071) : (!hi.bool) -> i1
      "cf.cond_br"(%2072) [^bb414, ^bb414] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb415:
      %2073 = "llvm.extractvalue"(%2065) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2074 = "llvm.load"(%2068) : (!llvm.ptr) -> i32
      %2075 = "llvm.getelementptr"(%2073, %2074) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2076 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2077 = "llvm.getelementptr"(%2075, %2076) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2077) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb416(%2078 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2079 : !llvm.ptr):
      %2080 = "mid.invariant"(%2079) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2081 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb417] : () -> ()
    ^bb418:
      %2082 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%2082, %2081) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb419] : () -> ()
    ^bb417:
      %2083 = "llvm.getelementptr"(%2079) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2084 = "mid.checkflag"(%2083) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2085 = "llvm.load"(%2084) : (!hi.bool) -> i1
      "cf.cond_br"(%2085) [^bb418, ^bb418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb419:
      %2086 = "llvm.extractvalue"(%2078) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2087 = "llvm.load"(%2081) : (!llvm.ptr) -> i32
      %2088 = "llvm.getelementptr"(%2086, %2087) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2089 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2090 = "llvm.getelementptr"(%2088, %2089) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2090) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb420(%2091 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2092 : !llvm.ptr):
      %2093 = "mid.invariant"(%2092) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2094 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb421] : () -> ()
    ^bb421:
      %2095 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%2095, %2094) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb422] : () -> ()
    ^bb422:
      %2096 = "llvm.extractvalue"(%2091) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2097 = "llvm.load"(%2094) : (!llvm.ptr) -> i32
      %2098 = "llvm.getelementptr"(%2096, %2097) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2099 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2100 = "llvm.getelementptr"(%2098, %2099) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2100) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb423(%2101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2102 : !llvm.ptr):
      %2103 = "mid.invariant"(%2102) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2104 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb424] : () -> ()
    ^bb425:
      %2105 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%2105, %2104) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb426] : () -> ()
    ^bb424:
      %2106 = "llvm.getelementptr"(%2102) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2107 = "mid.checkflag"(%2106) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2108 = "llvm.load"(%2107) : (!hi.bool) -> i1
      "cf.cond_br"(%2108) [^bb425, ^bb425] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb426:
      %2109 = "llvm.extractvalue"(%2101) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2110 = "llvm.load"(%2104) : (!llvm.ptr) -> i32
      %2111 = "llvm.getelementptr"(%2109, %2110) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2112 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2113 = "llvm.getelementptr"(%2111, %2112) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2113) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb427(%2114 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2115 : !llvm.ptr):
      %2116 = "mid.invariant"(%2115) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2117 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb428] : () -> ()
    ^bb429:
      %2118 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%2118, %2117) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb430] : () -> ()
    ^bb428:
      %2119 = "llvm.getelementptr"(%2115) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2120 = "mid.checkflag"(%2119) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2121 = "llvm.load"(%2120) : (!hi.bool) -> i1
      "cf.cond_br"(%2121) [^bb429, ^bb429] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb430:
      %2122 = "llvm.extractvalue"(%2114) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2123 = "llvm.load"(%2117) : (!llvm.ptr) -> i32
      %2124 = "llvm.getelementptr"(%2122, %2123) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2125 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2126 = "llvm.getelementptr"(%2124, %2125) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2126) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb431(%2127 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2128 : !llvm.ptr):
      %2129 = "mid.invariant"(%2128) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2130 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb432] : () -> ()
    ^bb433:
      %2131 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%2131, %2130) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb434] : () -> ()
    ^bb432:
      %2132 = "llvm.getelementptr"(%2128) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2133 = "mid.checkflag"(%2132) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2134 = "llvm.load"(%2133) : (!hi.bool) -> i1
      "cf.cond_br"(%2134) [^bb433, ^bb433] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb434:
      %2135 = "llvm.extractvalue"(%2127) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2136 = "llvm.load"(%2130) : (!llvm.ptr) -> i32
      %2137 = "llvm.getelementptr"(%2135, %2136) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2138 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2139 = "llvm.getelementptr"(%2137, %2138) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2139) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb435(%2140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2141 : !llvm.ptr):
      %2142 = "mid.invariant"(%2141) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2143 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb436] : () -> ()
    ^bb437:
      %2144 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%2144, %2143) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb438] : () -> ()
    ^bb436:
      %2145 = "llvm.getelementptr"(%2141) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2146 = "mid.checkflag"(%2145) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2147 = "llvm.load"(%2146) : (!hi.bool) -> i1
      "cf.cond_br"(%2147) [^bb437, ^bb437] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb438:
      %2148 = "llvm.extractvalue"(%2140) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2149 = "llvm.load"(%2143) : (!llvm.ptr) -> i32
      %2150 = "llvm.getelementptr"(%2148, %2149) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2151 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2152 = "llvm.getelementptr"(%2150, %2151) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2152) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb439(%2153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2154 : !llvm.ptr):
      %2155 = "mid.invariant"(%2154) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2156 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb440] : () -> ()
    ^bb441:
      %2157 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%2157, %2156) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb442] : () -> ()
    ^bb440:
      %2158 = "llvm.getelementptr"(%2154) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2159 = "mid.checkflag"(%2158) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2160 = "llvm.load"(%2159) : (!hi.bool) -> i1
      "cf.cond_br"(%2160) [^bb441, ^bb441] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb442:
      %2161 = "llvm.extractvalue"(%2153) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2162 = "llvm.load"(%2156) : (!llvm.ptr) -> i32
      %2163 = "llvm.getelementptr"(%2161, %2162) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2164 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2165 = "llvm.getelementptr"(%2163, %2164) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2165) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb443(%2166 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2167 : !llvm.ptr):
      %2168 = "mid.invariant"(%2167) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2169 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb444] : () -> ()
    ^bb445:
      %2170 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%2170, %2169) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb446] : () -> ()
    ^bb444:
      %2171 = "llvm.getelementptr"(%2167) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2172 = "mid.checkflag"(%2171) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2173 = "llvm.load"(%2172) : (!hi.bool) -> i1
      "cf.cond_br"(%2173) [^bb445, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb446:
      %2174 = "llvm.extractvalue"(%2166) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2175 = "llvm.load"(%2169) : (!llvm.ptr) -> i32
      %2176 = "llvm.getelementptr"(%2174, %2175) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2177 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2178 = "llvm.getelementptr"(%2176, %2177) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2178) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ZipIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZipIterator_field_ZipIterator_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZipIterator_field_ZipIterator_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterator_field_ZipIterator_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZipIterator_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZipIterator_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZipIterator_field_first", "getter_name" = "ZipIterator_getter_first", "setter_name" = "ZipIterator_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZipIterator_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZipIterator_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZipIterator_field_second", "getter_name" = "ZipIterator_getter_second", "setter_name" = "ZipIterator_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb447(%2179 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2180 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2181 : !llvm.ptr, %2182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2184 = "mid.wrap"(%2179) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2185 = "hi.cast"(%2184) {"from_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2186 = "mid.wrap"(%2182) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %2187 = "hi.cast"(%2186) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %2188 = "hi.cast"(%2187) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      "mid.set_field"(%2185, %2188) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> ()
      %2189 = "mid.wrap"(%2183) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2190 = "hi.cast"(%2189) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2191 = "hi.cast"(%2190) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      "mid.set_field"(%2185, %2191) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> ()
    }) {"func_name" = "ZipIterator_init_firstIteratorT_secondIteratorU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb448(%2192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2193 : !llvm.ptr):
      %2194 = "mid.invariant"(%2193) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2195 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb449] : () -> ()
    ^bb450:
      %2196 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%2196, %2195) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb451] : () -> ()
    ^bb452:
      %2197 = "llvm.getelementptr"(%2193) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2198 = "mid.checkflag"(%2197) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2199 = "llvm.load"(%2198) : (!hi.bool) -> i1
      "cf.cond_br"(%2199) [^bb450, ^bb450] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb449:
      %2200 = "llvm.getelementptr"(%2193) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2201 = "mid.checkflag"(%2200) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2202 = "llvm.load"(%2201) : (!hi.bool) -> i1
      "cf.cond_br"(%2202) [^bb452, ^bb452] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb451:
      %2203 = "llvm.extractvalue"(%2192) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2204 = "llvm.load"(%2195) : (!llvm.ptr) -> i32
      %2205 = "llvm.getelementptr"(%2203, %2204) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2206 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2207 = "llvm.getelementptr"(%2205, %2206) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2207) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterator_B_init_firstIteratorT_secondIteratorU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb453(%2208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2209 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2210 : !llvm.ptr):
      %2211 = "mid.wrap"(%2208) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2212 = "hi.cast"(%2211) {"from_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2213 = "mid.get_field"(%2212) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %2214 = "mid.unwrap"(%2213) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2215 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2216 = "mid.method_call"(%2215, %2214) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2217 = "hi.cast"(%2216) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "ZipIterator">]>
      %2218 = "mid.get_field"(%2212) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2219 = "mid.unwrap"(%2218) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2220 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2221 = "mid.method_call"(%2220, %2219) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2222 = "hi.cast"(%2221) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>
      %2223 = "mid.get_type_field"(%2212) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.reified_type
      %2224 = "mid.checkflag"(%2217) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %2225 = "mid.unwrap"(%2224) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %2226 = "hi.cast"(%2217) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>
      "mid.if"(%2225) ({
        %2227 = "hi.cast"(%2226) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "ZipIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "ZipIterator">
        %2228 = "mid.get_type_field"(%2212) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.reified_type
        %2229 = "mid.checkflag"(%2222) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2230 = "mid.unwrap"(%2229) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %2231 = "hi.cast"(%2222) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>
        "mid.if"(%2230) ({
          %2232 = "hi.cast"(%2231) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"U", !hi.any, "ZipIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.type_param<"U", !hi.any, "ZipIterator">
          %2233 = "mid.unwrap"(%2227) : (!hi.type_param<"T", !hi.any, "ZipIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2234 = "mid.unwrap"(%2232) : (!hi.type_param<"U", !hi.any, "ZipIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2235 = "mid.get_type_field"(%2212) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.reified_type
          %2236 = "mid.get_type_field"(%2212) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.reified_type
          %2237 = "mid.new"(%2235, %2236) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
          %2238 = "hi.cast"(%2227) {"from_typ" = !hi.type_param<"T", !hi.any, "ZipIterator">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "ZipIterator">) -> !hi.type_param<"T", !hi.any, "Pair">
          %2239 = "mid.unwrap"(%2238) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2240 = "hi.cast"(%2232) {"from_typ" = !hi.type_param<"U", !hi.any, "ZipIterator">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "ZipIterator">) -> !hi.type_param<"U", !hi.any, "Pair">
          %2241 = "mid.unwrap"(%2240) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2242 = "mid.unwrap"(%2237) : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2243 = "mid.get_type_field"(%2212) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.reified_type
          %2244 = "mid.get_type_field"(%2212) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.reified_type
          %2245 = "mid.parameterizations_array"(%2243, %2244) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
          "mid.method_call"(%2245, %2242, %2239, %2241) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2246 = "hi.cast"(%2237) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
          "mid.return"(%2246) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
          %2247 = "hi.cast"(%2232) {"from_typ" = !hi.type_param<"U", !hi.any, "ZipIterator">, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"U", !hi.any, "ZipIterator">) -> !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>
          "mid.assign"(%2231, %2247) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %2248 = "hi.cast"(%2227) {"from_typ" = !hi.type_param<"T", !hi.any, "ZipIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ZipIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>
        "mid.assign"(%2226, %2248) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %2249 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %2250 = "hi.cast"(%2249) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%2250) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ZipIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb454(%2251 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2252 : !llvm.ptr):
      %2253 = "mid.invariant"(%2252) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2254 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb455] : () -> ()
    ^bb455:
      %2255 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%2255, %2254) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb456] : () -> ()
    ^bb456:
      %2256 = "llvm.extractvalue"(%2251) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2257 = "llvm.load"(%2254) : (!llvm.ptr) -> i32
      %2258 = "llvm.getelementptr"(%2256, %2257) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2259 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2260 = "llvm.getelementptr"(%2258, %2259) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2260) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ProductIterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductIterable_field_ProductIterable_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductIterable_field_ProductIterable_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterable_field_ProductIterable_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterable_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterable_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterable_field_first", "getter_name" = "ProductIterable_getter_first", "setter_name" = "ProductIterable_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterable_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterable_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterable_field_second", "getter_name" = "ProductIterable_getter_second", "setter_name" = "ProductIterable_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb457(%2261 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2262 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2263 : !llvm.ptr, %2264 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2265 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2266 = "mid.wrap"(%2261) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2267 = "hi.cast"(%2266) {"from_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2268 = "mid.wrap"(%2264) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2269 = "hi.cast"(%2268) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2270 = "hi.cast"(%2269) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      "mid.set_field"(%2267, %2270) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> ()
      %2271 = "mid.wrap"(%2265) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2272 = "hi.cast"(%2271) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2273 = "hi.cast"(%2272) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      "mid.set_field"(%2267, %2273) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> ()
    }) {"func_name" = "ProductIterable_init_firstIterableT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb458(%2274 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2275 : !llvm.ptr):
      %2276 = "mid.invariant"(%2275) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2277 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb459] : () -> ()
    ^bb460:
      %2278 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%2278, %2277) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb461] : () -> ()
    ^bb462:
      %2279 = "llvm.getelementptr"(%2275) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2280 = "mid.checkflag"(%2279) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2281 = "llvm.load"(%2280) : (!hi.bool) -> i1
      "cf.cond_br"(%2281) [^bb460, ^bb460] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb459:
      %2282 = "llvm.getelementptr"(%2275) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2283 = "mid.checkflag"(%2282) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2284 = "llvm.load"(%2283) : (!hi.bool) -> i1
      "cf.cond_br"(%2284) [^bb462, ^bb462] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb461:
      %2285 = "llvm.extractvalue"(%2274) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2286 = "llvm.load"(%2277) : (!llvm.ptr) -> i32
      %2287 = "llvm.getelementptr"(%2285, %2286) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2288 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2289 = "llvm.getelementptr"(%2287, %2288) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2289) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_init_firstIterableT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb463(%2290 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2291 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2292 : !llvm.ptr):
      %2293 = "mid.wrap"(%2290) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2294 = "hi.cast"(%2293) {"from_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2295 = "mid.get_field"(%2294) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2296 = "mid.unwrap"(%2295) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2297 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2298 = "mid.method_call"(%2297, %2296) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2299 = "hi.cast"(%2298) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2300 = "mid.get_field"(%2294) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2301 = "mid.unwrap"(%2299) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2302 = "mid.unwrap"(%2300) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2303 = "mid.get_type_field"(%2294) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.reified_type
      %2304 = "mid.get_type_field"(%2294) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.reified_type
      %2305 = "mid.get_type_field"(%2294) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.reified_type
      %2306 = "mid.get_type_field"(%2294) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.reified_type
      %2307 = "mid.parameterization"(%2305, %2306) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairProductIterable.T_subtype_Any._ProductIterable.U_subtype_Any", ["ProductIterable.T_subtype_Any"], ["ProductIterable.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %2308 = "mid.new"(%2303, %2304, %2307) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ProductIterator", "num_data_fields" = 4 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2309 = "mid.get_field"(%2294) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2310 = "mid.unwrap"(%2309) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2311 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2312 = "mid.method_call"(%2311, %2310) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2313 = "hi.cast"(%2312) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2314 = "mid.get_field"(%2294) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2315 = "hi.cast"(%2313) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %2316 = "mid.unwrap"(%2315) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2317 = "hi.cast"(%2314) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2318 = "mid.unwrap"(%2317) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2319 = "mid.unwrap"(%2308) : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2320 = "mid.get_type_field"(%2294) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.reified_type
      %2321 = "mid.parameterization"(%2320) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorProductIterable.T_subtype_Any", ["ProductIterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %2322 = "mid.get_type_field"(%2294) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.reified_type
      %2323 = "mid.parameterization"(%2322) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableProductIterable.U_subtype_Any", ["ProductIterable.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %2324 = "mid.parameterizations_array"(%2321, %2323) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2324, %2319, %2316, %2318) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2325 = "hi.cast"(%2308) {"from_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%2325) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "ProductIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb464(%2326 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2327 : !llvm.ptr):
      %2328 = "mid.invariant"(%2327) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2329 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb465] : () -> ()
    ^bb465:
      %2330 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%2330, %2329) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb466] : () -> ()
    ^bb466:
      %2331 = "llvm.extractvalue"(%2326) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2332 = "llvm.load"(%2329) : (!llvm.ptr) -> i32
      %2333 = "llvm.getelementptr"(%2331, %2332) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2334 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2335 = "llvm.getelementptr"(%2333, %2334) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2335) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb467(%2336 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2337 : !llvm.ptr):
      %2338 = "mid.invariant"(%2337) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2339 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb468] : () -> ()
    ^bb469:
      %2340 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%2340, %2339) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb470] : () -> ()
    ^bb468:
      %2341 = "llvm.getelementptr"(%2337) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2342 = "mid.checkflag"(%2341) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2343 = "llvm.load"(%2342) : (!hi.bool) -> i1
      "cf.cond_br"(%2343) [^bb469, ^bb469] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb470:
      %2344 = "llvm.extractvalue"(%2336) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2345 = "llvm.load"(%2339) : (!llvm.ptr) -> i32
      %2346 = "llvm.getelementptr"(%2344, %2345) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2347 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2348 = "llvm.getelementptr"(%2346, %2347) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2348) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb471(%2349 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2350 : !llvm.ptr):
      %2351 = "mid.invariant"(%2350) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2352 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb472] : () -> ()
    ^bb473:
      %2353 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%2353, %2352) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb474] : () -> ()
    ^bb475:
      %2354 = "llvm.getelementptr"(%2350) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2355 = "mid.checkflag"(%2354) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2356 = "llvm.load"(%2355) : (!hi.bool) -> i1
      "cf.cond_br"(%2356) [^bb473, ^bb473] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb472:
      %2357 = "llvm.getelementptr"(%2350) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2358 = "mid.checkflag"(%2357) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %2359 = "llvm.load"(%2358) : (!hi.bool) -> i1
      "cf.cond_br"(%2359) [^bb475, ^bb475] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb474:
      %2360 = "llvm.extractvalue"(%2349) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2361 = "llvm.load"(%2352) : (!llvm.ptr) -> i32
      %2362 = "llvm.getelementptr"(%2360, %2361) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2363 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2364 = "llvm.getelementptr"(%2362, %2363) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2364) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb476(%2365 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2366 : !llvm.ptr):
      %2367 = "mid.invariant"(%2366) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2368 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb477] : () -> ()
    ^bb478:
      %2369 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%2369, %2368) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb479] : () -> ()
    ^bb477:
      %2370 = "llvm.getelementptr"(%2366) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2371 = "mid.checkflag"(%2370) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2372 = "llvm.load"(%2371) : (!hi.bool) -> i1
      "cf.cond_br"(%2372) [^bb478, ^bb478] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb479:
      %2373 = "llvm.extractvalue"(%2365) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2374 = "llvm.load"(%2368) : (!llvm.ptr) -> i32
      %2375 = "llvm.getelementptr"(%2373, %2374) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2376 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2377 = "llvm.getelementptr"(%2375, %2376) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2377) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb480(%2378 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2379 : !llvm.ptr):
      %2380 = "mid.invariant"(%2379) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2381 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb481] : () -> ()
    ^bb482:
      %2382 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%2382, %2381) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb483] : () -> ()
    ^bb481:
      %2383 = "llvm.getelementptr"(%2379) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2384 = "mid.checkflag"(%2383) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2385 = "llvm.load"(%2384) : (!hi.bool) -> i1
      "cf.cond_br"(%2385) [^bb482, ^bb482] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb483:
      %2386 = "llvm.extractvalue"(%2378) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2387 = "llvm.load"(%2381) : (!llvm.ptr) -> i32
      %2388 = "llvm.getelementptr"(%2386, %2387) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2389 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2390 = "llvm.getelementptr"(%2388, %2389) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2390) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb484(%2391 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2392 : !llvm.ptr):
      %2393 = "mid.invariant"(%2392) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2394 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb485] : () -> ()
    ^bb485:
      %2395 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%2395, %2394) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb486] : () -> ()
    ^bb486:
      %2396 = "llvm.extractvalue"(%2391) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2397 = "llvm.load"(%2394) : (!llvm.ptr) -> i32
      %2398 = "llvm.getelementptr"(%2396, %2397) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2399 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2400 = "llvm.getelementptr"(%2398, %2399) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2400) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb487(%2401 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2402 : !llvm.ptr):
      %2403 = "mid.invariant"(%2402) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2404 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb488] : () -> ()
    ^bb489:
      %2405 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%2405, %2404) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb490] : () -> ()
    ^bb488:
      %2406 = "llvm.getelementptr"(%2402) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2407 = "mid.checkflag"(%2406) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2408 = "llvm.load"(%2407) : (!hi.bool) -> i1
      "cf.cond_br"(%2408) [^bb489, ^bb489] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb490:
      %2409 = "llvm.extractvalue"(%2401) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2410 = "llvm.load"(%2404) : (!llvm.ptr) -> i32
      %2411 = "llvm.getelementptr"(%2409, %2410) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2412 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2413 = "llvm.getelementptr"(%2411, %2412) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2413) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb491(%2414 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2415 : !llvm.ptr):
      %2416 = "mid.invariant"(%2415) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2417 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb492] : () -> ()
    ^bb493:
      %2418 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%2418, %2417) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb494] : () -> ()
    ^bb492:
      %2419 = "llvm.getelementptr"(%2415) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2420 = "mid.checkflag"(%2419) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2421 = "llvm.load"(%2420) : (!hi.bool) -> i1
      "cf.cond_br"(%2421) [^bb493, ^bb493] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb494:
      %2422 = "llvm.extractvalue"(%2414) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2423 = "llvm.load"(%2417) : (!llvm.ptr) -> i32
      %2424 = "llvm.getelementptr"(%2422, %2423) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2425 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2426 = "llvm.getelementptr"(%2424, %2425) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2426) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb495(%2427 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2428 : !llvm.ptr):
      %2429 = "mid.invariant"(%2428) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2430 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb496] : () -> ()
    ^bb497:
      %2431 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%2431, %2430) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb498] : () -> ()
    ^bb496:
      %2432 = "llvm.getelementptr"(%2428) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2433 = "mid.checkflag"(%2432) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2434 = "llvm.load"(%2433) : (!hi.bool) -> i1
      "cf.cond_br"(%2434) [^bb497, ^bb497] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb498:
      %2435 = "llvm.extractvalue"(%2427) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2436 = "llvm.load"(%2430) : (!llvm.ptr) -> i32
      %2437 = "llvm.getelementptr"(%2435, %2436) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2438 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2439 = "llvm.getelementptr"(%2437, %2438) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2439) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb499(%2440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2441 : !llvm.ptr):
      %2442 = "mid.invariant"(%2441) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2443 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb500] : () -> ()
    ^bb501:
      %2444 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%2444, %2443) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb502] : () -> ()
    ^bb500:
      %2445 = "llvm.getelementptr"(%2441) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2446 = "mid.checkflag"(%2445) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2447 = "llvm.load"(%2446) : (!hi.bool) -> i1
      "cf.cond_br"(%2447) [^bb501, ^bb501] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb502:
      %2448 = "llvm.extractvalue"(%2440) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2449 = "llvm.load"(%2443) : (!llvm.ptr) -> i32
      %2450 = "llvm.getelementptr"(%2448, %2449) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2451 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2452 = "llvm.getelementptr"(%2450, %2451) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2452) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb503(%2453 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2454 : !llvm.ptr):
      %2455 = "mid.invariant"(%2454) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2456 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb504] : () -> ()
    ^bb505:
      %2457 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%2457, %2456) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb506] : () -> ()
    ^bb504:
      %2458 = "llvm.getelementptr"(%2454) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2459 = "mid.checkflag"(%2458) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2460 = "llvm.load"(%2459) : (!hi.bool) -> i1
      "cf.cond_br"(%2460) [^bb505, ^bb505] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb506:
      %2461 = "llvm.extractvalue"(%2453) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2462 = "llvm.load"(%2456) : (!llvm.ptr) -> i32
      %2463 = "llvm.getelementptr"(%2461, %2462) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2464 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2465 = "llvm.getelementptr"(%2463, %2464) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2465) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb507(%2466 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2467 : !llvm.ptr):
      %2468 = "mid.invariant"(%2467) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2469 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb508] : () -> ()
    ^bb509:
      %2470 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%2470, %2469) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb510] : () -> ()
    ^bb508:
      %2471 = "llvm.getelementptr"(%2467) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2472 = "mid.checkflag"(%2471) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2473 = "llvm.load"(%2472) : (!hi.bool) -> i1
      "cf.cond_br"(%2473) [^bb509, ^bb509] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb510:
      %2474 = "llvm.extractvalue"(%2466) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2475 = "llvm.load"(%2469) : (!llvm.ptr) -> i32
      %2476 = "llvm.getelementptr"(%2474, %2475) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2477 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2478 = "llvm.getelementptr"(%2476, %2477) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2478) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ProductIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductIterator_field_ProductIterator_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductIterator_field_ProductIterator_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterator_field_ProductIterator_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterator_getter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterator_setter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterator_field_first_iterator", "getter_name" = "ProductIterator_getter_first_iterator", "setter_name" = "ProductIterator_setter_first_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterator", "getter_name" = "ProductIterator_getter_second_iterator", "setter_name" = "ProductIterator_setter_second_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterator.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterator.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterable", "getter_name" = "ProductIterator_getter_second_iterable", "setter_name" = "ProductIterator_setter_second_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterator_getter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator.T_subtype_Any_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterator_setter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator.T_subtype_Any_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterator_field_current_first", "getter_name" = "ProductIterator_getter_current_first", "setter_name" = "ProductIterator_setter_current_first"} : () -> ()
    "mid.func"() ({
    ^bb511(%2479 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2480 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2481 : !llvm.ptr, %2482 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2483 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2484 = "mid.wrap"(%2479) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2485 = "hi.cast"(%2484) {"from_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2486 = "mid.wrap"(%2482) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %2487 = "hi.cast"(%2486) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %2488 = "hi.cast"(%2487) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      "mid.set_field"(%2485, %2488) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> ()
      %2489 = "mid.wrap"(%2483) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2490 = "hi.cast"(%2489) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2491 = "hi.cast"(%2490) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      "mid.set_field"(%2485, %2491) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> ()
      %2492 = "mid.get_field"(%2485) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2493 = "mid.unwrap"(%2492) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2494 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2495 = "mid.method_call"(%2494, %2493) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2496 = "hi.cast"(%2495) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2497 = "hi.cast"(%2496) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      "mid.set_field"(%2485, %2497) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> ()
      %2498 = "mid.get_field"(%2485) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %2499 = "mid.unwrap"(%2498) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2500 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2501 = "mid.method_call"(%2500, %2499) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2502 = "hi.cast"(%2501) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      %2503 = "hi.cast"(%2502) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      "mid.set_field"(%2485, %2503) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb512(%2504 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2505 : !llvm.ptr):
      %2506 = "mid.invariant"(%2505) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2507 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb513] : () -> ()
    ^bb514:
      %2508 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%2508, %2507) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb515] : () -> ()
    ^bb516:
      %2509 = "llvm.getelementptr"(%2505) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2510 = "mid.checkflag"(%2509) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2511 = "llvm.load"(%2510) : (!hi.bool) -> i1
      "cf.cond_br"(%2511) [^bb514, ^bb514] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb513:
      %2512 = "llvm.getelementptr"(%2505) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2513 = "mid.checkflag"(%2512) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2514 = "llvm.load"(%2513) : (!hi.bool) -> i1
      "cf.cond_br"(%2514) [^bb516, ^bb516] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb515:
      %2515 = "llvm.extractvalue"(%2504) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2516 = "llvm.load"(%2507) : (!llvm.ptr) -> i32
      %2517 = "llvm.getelementptr"(%2515, %2516) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2518 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2519 = "llvm.getelementptr"(%2517, %2518) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2519) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb517(%2520 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2521 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2522 : !llvm.ptr):
      %2523 = "mid.wrap"(%2520) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2524 = "hi.cast"(%2523) {"from_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2525 = "mid.get_field"(%2524) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      %2526 = "mid.refer"(%2525) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      %2527 = "hi.cast"(%2526) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      "mid.while"() ({
        %2528 = "mid.get_type_field"(%2524) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.reified_type
        %2529 = "mid.checkflag"(%2527) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2530 = "mid.unwrap"(%2529) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %2531 = "hi.cast"(%2527) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "ProductIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "ProductIterator">
        %2532 = "mid.get_field"(%2524) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
        %2533 = "mid.unwrap"(%2532) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2534 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2535 = "mid.method_call"(%2534, %2533) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %2536 = "hi.cast"(%2535) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>
        %2537 = "mid.get_type_field"(%2524) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.reified_type
        %2538 = "mid.checkflag"(%2536) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2539 = "mid.unwrap"(%2538) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %2540 = "hi.cast"(%2536) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>
        "mid.if"(%2539) ({
          %2541 = "hi.cast"(%2540) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.type_param<"U", !hi.any, "ProductIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.type_param<"U", !hi.any, "ProductIterator">
          %2542 = "mid.unwrap"(%2531) : (!hi.type_param<"T", !hi.any, "ProductIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2543 = "mid.unwrap"(%2541) : (!hi.type_param<"U", !hi.any, "ProductIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2544 = "mid.get_type_field"(%2524) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.reified_type
          %2545 = "mid.get_type_field"(%2524) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.reified_type
          %2546 = "mid.new"(%2544, %2545) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
          %2547 = "hi.cast"(%2531) {"from_typ" = !hi.type_param<"T", !hi.any, "ProductIterator">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "ProductIterator">) -> !hi.type_param<"T", !hi.any, "Pair">
          %2548 = "mid.unwrap"(%2547) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2549 = "hi.cast"(%2541) {"from_typ" = !hi.type_param<"U", !hi.any, "ProductIterator">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "ProductIterator">) -> !hi.type_param<"U", !hi.any, "Pair">
          %2550 = "mid.unwrap"(%2549) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2551 = "mid.unwrap"(%2546) : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2552 = "mid.get_type_field"(%2524) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.reified_type
          %2553 = "mid.get_type_field"(%2524) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.reified_type
          %2554 = "mid.parameterizations_array"(%2552, %2553) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
          "mid.method_call"(%2554, %2551, %2548, %2550) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2555 = "hi.cast"(%2546) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
          "mid.return"(%2555) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
          %2556 = "hi.cast"(%2541) {"from_typ" = !hi.type_param<"U", !hi.any, "ProductIterator">, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"U", !hi.any, "ProductIterator">) -> !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>
          "mid.assign"(%2540, %2556) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> ()
        }) : (i1) -> ()
        %2557 = "mid.get_field"(%2524) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
        %2558 = "mid.unwrap"(%2557) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2559 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2560 = "mid.method_call"(%2559, %2558) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %2561 = "hi.cast"(%2560) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        %2562 = "hi.cast"(%2561) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        "mid.set_field"(%2524, %2562) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> ()
        %2563 = "mid.get_field"(%2524) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
        %2564 = "mid.unwrap"(%2563) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2565 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2566 = "mid.method_call"(%2565, %2564) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
        %2567 = "hi.cast"(%2566) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
        %2568 = "hi.cast"(%2567) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
        "mid.set_field"(%2524, %2568) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> ()
        %2569 = "mid.get_field"(%2524) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        %2570 = "mid.refer"(%2569) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        %2571 = "hi.cast"(%2570) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        "mid.assign"(%2527, %2571) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> ()
      }) : () -> ()
      %2572 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %2573 = "hi.cast"(%2572) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%2573) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ProductIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb518(%2574 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2575 : !llvm.ptr):
      %2576 = "mid.invariant"(%2575) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2577 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb519] : () -> ()
    ^bb519:
      %2578 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%2578, %2577) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb520] : () -> ()
    ^bb520:
      %2579 = "llvm.extractvalue"(%2574) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2580 = "llvm.load"(%2577) : (!llvm.ptr) -> i32
      %2581 = "llvm.getelementptr"(%2579, %2580) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2582 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2583 = "llvm.getelementptr"(%2581, %2582) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2583) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "collection"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Collection", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterable, 18446744073709551615 : i64, @Collection], "offset_tbl" = [67 : i32, 10 : i32, 0 : i32, 67 : i32, 0 : i32, 42 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 1375598993350293883 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Collection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "EnumeratedCollection", "methods" = [@EnumeratedCollection_field_EnumeratedCollection_0, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_field_collection, @EnumeratedCollection_B_init_collectionCollectionT, @EnumeratedCollection_B_size_, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherIterableU_product_otherCollectionU, @EnumeratedCollection_init_collectionCollectionT, @EnumeratedCollection_size_, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_size_, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherIterableU_product_otherCollectionU, @EnumeratedCollection_size_, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherIterableU_product_otherCollectionU, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherIterableU_product_otherCollectionU, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, @EnumeratedCollection, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Collection, @Object], "offset_tbl" = [10 : i32, 103 : i32, 10 : i32, 0 : i32, 128 : i32, 0 : i32, 46 : i32, 128 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 7081690788784801875 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_EnumeratedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MappedCollection", "methods" = [@MappedCollection_field_MappedCollection_0, @MappedCollection_field_MappedCollection_1, @MappedCollection_field_collection, @MappedCollection_field_f, @MappedCollection_B_init_collectionCollectionT_fFunctionT_to_U, @MappedCollection_B_size_, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherIterableU_product_otherCollectionU, @MappedCollection_init_collectionCollectionT_fFunctionT_to_U, @MappedCollection_size_, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_size_, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherIterableU_product_otherCollectionU, @MappedCollection_size_, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherIterableU_product_otherCollectionU, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherIterableU_product_otherCollectionU, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterable, @MappedCollection, @Collection], "offset_tbl" = [129 : i32, 10 : i32, 0 : i32, 129 : i32, 0 : i32, 104 : i32, 10 : i32, 47 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5460697656559120915 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MappedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ChainedCollection", "methods" = [@ChainedCollection_field_ChainedCollection_0, @ChainedCollection_field_first, @ChainedCollection_field_second, @ChainedCollection_B_init_firstCollectionT_secondCollectionT, @ChainedCollection_B_size_, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherIterableU_product_otherCollectionU, @ChainedCollection_init_firstCollectionT_secondCollectionT, @ChainedCollection_size_, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_size_, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherIterableU_product_otherCollectionU, @ChainedCollection_size_, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherIterableU_product_otherCollectionU, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherIterableU_product_otherCollectionU, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @Collection, @ChainedCollection, @Container, @Iterable, 18446744073709551615 : i64], "offset_tbl" = [0 : i32, 128 : i32, 10 : i32, 46 : i32, 10 : i32, 128 : i32, 103 : i32, 0 : i32], "prime" = 4611686018427388319 : i64, "hash_id" = 14310207089174208817 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ChainedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "InterleavedCollection", "methods" = [@InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_field_first, @InterleavedCollection_field_second, @InterleavedCollection_B_init_firstCollectionT_secondCollectionT, @InterleavedCollection_B_size_, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherIterableU_product_otherCollectionU, @InterleavedCollection_init_firstCollectionT_secondCollectionT, @InterleavedCollection_size_, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_size_, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherIterableU_product_otherCollectionU, @InterleavedCollection_size_, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherIterableU_product_otherCollectionU, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherIterableU_product_otherCollectionU, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, @InterleavedCollection, @Iterable, 18446744073709551615 : i64, @Collection], "offset_tbl" = [128 : i32, 10 : i32, 0 : i32, 128 : i32, 10 : i32, 103 : i32, 0 : i32, 46 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 8589355597059143861 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InterleavedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ZippedCollection", "methods" = [@ZippedCollection_field_ZippedCollection_0, @ZippedCollection_field_ZippedCollection_1, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_field_first, @ZippedCollection_field_second, @ZippedCollection_B_init_firstCollectionT_secondCollectionU, @ZippedCollection_B_size_, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherIterableU_product_otherCollectionU, @ZippedCollection_init_firstCollectionT_secondCollectionU, @ZippedCollection_size_, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_size_, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherIterableU_product_otherCollectionU, @ZippedCollection_size_, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherIterableU_product_otherCollectionU, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherIterableU_product_otherCollectionU, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Collection, @Object, @Container, @ZippedCollection, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 48 : i32, 130 : i32, 130 : i32, 10 : i32, 105 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388513 : i64, "hash_id" = 880335312586431241 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZippedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ProductCollection", "methods" = [@ProductCollection_field_ProductCollection_0, @ProductCollection_field_ProductCollection_1, @ProductCollection_field_ProductCollection_2, @ProductCollection_field_first, @ProductCollection_field_second, @ProductCollection_B_init_firstCollectionT_secondCollectionU, @ProductCollection_B_size_, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherIterableU_product_otherCollectionU, @ProductCollection_init_firstCollectionT_secondCollectionU, @ProductCollection_size_, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_size_, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherIterableU_product_otherCollectionU, @ProductCollection_size_, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherIterableU_product_otherCollectionU, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherIterableU_product_otherCollectionU, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, @ProductCollection, @Container, 18446744073709551615 : i64, @Collection, @Object], "offset_tbl" = [10 : i32, 105 : i32, 0 : i32, 10 : i32, 130 : i32, 0 : i32, 48 : i32, 130 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 18135768441938478679 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Collection", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Collection_field_Collection_0"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb1:
      %4 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %5 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %6 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %7 = "llvm.getelementptr"(%5, %6) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %8 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %9 = "llvm.getelementptr"(%7, %8) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%9) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_iterator_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb3(%10 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11 : !llvm.ptr):
      %12 = "mid.invariant"(%11) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %13 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb4] : () -> ()
    ^bb4:
      %14 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%14, %13) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      %15 = "llvm.extractvalue"(%10) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %16 = "llvm.load"(%13) : (!llvm.ptr) -> i32
      %17 = "llvm.getelementptr"(%15, %16) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %18 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %19 = "llvm.getelementptr"(%17, %18) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%19) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb6(%20 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %21 : !llvm.ptr):
      %22 = "mid.invariant"(%21) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %23 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb8:
      %24 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%24, %23) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb7:
      %25 = "llvm.getelementptr"(%21) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %26 = "mid.checkflag"(%25) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %27 = "llvm.load"(%26) : (!hi.bool) -> i1
      "cf.cond_br"(%27) [^bb8, ^bb8] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb9:
      %28 = "llvm.extractvalue"(%20) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %29 = "llvm.load"(%23) : (!llvm.ptr) -> i32
      %30 = "llvm.getelementptr"(%28, %29) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %31 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %32 = "llvm.getelementptr"(%30, %31) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%32) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb10(%33 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %34 : !llvm.ptr):
      %35 = "mid.invariant"(%34) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %36 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb11] : () -> ()
    ^bb12:
      %37 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%37, %36) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb14:
      %38 = "llvm.getelementptr"(%34) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %39 = "mid.checkflag"(%38) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %40 = "llvm.load"(%39) : (!hi.bool) -> i1
      "cf.cond_br"(%40) [^bb12, ^bb12] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb11:
      %41 = "llvm.getelementptr"(%34) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %42 = "mid.checkflag"(%41) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %43 = "llvm.load"(%42) : (!hi.bool) -> i1
      "cf.cond_br"(%43) [^bb14, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb13:
      %44 = "llvm.extractvalue"(%33) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %45 = "llvm.load"(%36) : (!llvm.ptr) -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %47 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%48) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb15(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %53 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb16:
      %54 = "llvm.getelementptr"(%50) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %55 = "mid.checkflag"(%54) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %56 = "llvm.load"(%55) : (!hi.bool) -> i1
      "cf.cond_br"(%56) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %57 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %58 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %59 = "llvm.getelementptr"(%57, %58) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %60 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %61 = "llvm.getelementptr"(%59, %60) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%61) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb19(%62 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %63 : !llvm.ptr):
      %64 = "mid.invariant"(%63) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %65 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb20] : () -> ()
    ^bb21:
      %66 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%66, %65) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb20:
      %67 = "llvm.getelementptr"(%63) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %68 = "mid.checkflag"(%67) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %69 = "llvm.load"(%68) : (!hi.bool) -> i1
      "cf.cond_br"(%69) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %70 = "llvm.extractvalue"(%62) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %71 = "llvm.load"(%65) : (!llvm.ptr) -> i32
      %72 = "llvm.getelementptr"(%70, %71) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %73 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %74 = "llvm.getelementptr"(%72, %73) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%74) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb23(%75 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %76 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %77 : !llvm.ptr):
      %78 = "mid.wrap"(%75) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %79 = "hi.cast"(%78) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %80 = "mid.unwrap"(%79) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %81 = "mid.get_type_field"(%79) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %82 = "mid.get_type_field"(%79) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %83 = "mid.parameterization"(%82) {"id_hierarchy" = ["Pair", ["i32_typ"], [0 : i32]], "name_hierarchy" = ["Pairi32._Collection.T_subtype_Any", ["i32"], ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %84 = "mid.new"(%81, %83) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "EnumeratedCollection", "num_data_fields" = 1 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %85 = "hi.cast"(%79) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %86 = "mid.unwrap"(%85) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %87 = "mid.unwrap"(%84) : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %88 = "mid.get_type_field"(%79) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %89 = "mid.parameterization"(%88) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %90 = "mid.parameterizations_array"(%89) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%90, %87, %86) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 118 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %91 = "hi.cast"(%84) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Collection">]>]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Collection">]>]>
      "mid.return"(%91) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_enumerate_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%92 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %93 : !llvm.ptr):
      %94 = "mid.invariant"(%93) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %95 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb25:
      %96 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%96, %95) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      %97 = "llvm.extractvalue"(%92) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %98 = "llvm.load"(%95) : (!llvm.ptr) -> i32
      %99 = "llvm.getelementptr"(%97, %98) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %100 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %101 = "llvm.getelementptr"(%99, %100) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%101) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%102 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %103 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %104 : !llvm.ptr, %105 : !llvm.struct<(!llvm.ptr)>):
      %106 = "mid.wrap"(%102) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %107 = "hi.cast"(%106) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %108 = "mid.wrap"(%105) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>
      %109 = "hi.cast"(%108) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>
      %110 = "mid.unwrap"(%107) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %111 = "mid.unwrap"(%109) : (!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>) -> !llvm.struct<(!llvm.ptr)>
      %112 = "mid.get_type_field"(%107) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %113 = "llvm.getelementptr"(%104) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %114 = "llvm.load"(%113) : (!llvm.ptr) -> !llvm.ptr
      %115 = "mid.parameterization_indexation"(%114) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %116 = "mid.new"(%112, %115) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MappedCollection", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %117 = "hi.cast"(%107) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %118 = "mid.unwrap"(%117) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %119 = "hi.cast"(%109) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %120 = "mid.unwrap"(%119) : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !llvm.struct<(!llvm.ptr)>
      %121 = "mid.unwrap"(%116) : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %122 = "mid.get_type_field"(%107) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %123 = "mid.parameterization"(%122) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %124 = "llvm.getelementptr"(%104) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %125 = "llvm.load"(%124) : (!llvm.ptr) -> !llvm.ptr
      %126 = "mid.parameterization_indexation"(%125) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %127 = "mid.get_type_field"(%107) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %128 = "mid.parameterization"(%126, %127) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionCollection.T_subtype_Any_to_Collection.U_subtype_Any", ["Collection.U_subtype_Any"], ["Collection.T_subtype_Any"]]} : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
      %129 = "mid.parameterizations_array"(%123, %128) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%129, %121, %118, %120) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 119 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %130 = "hi.cast"(%116) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>
      "mid.return"(%130) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb28(%131 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %132 : !llvm.ptr):
      %133 = "mid.invariant"(%132) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %134 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb30:
      %135 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%135, %134) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb32:
      %136 = "llvm.mlir.constant"() <{"value" = 60 : i32}> : () -> i32
      "llvm.store"(%136, %134) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb29:
      %137 = "llvm.getelementptr"(%132) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %138 = "mid.checkflag"(%137) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %139 = "llvm.load"(%138) : (!hi.bool) -> i1
      "cf.cond_br"(%139) [^bb30, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb33:
      %140 = "llvm.getelementptr"(%132) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %141 = "mid.checkflag"(%140) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %142 = "llvm.load"(%141) : (!hi.bool) -> i1
      "cf.cond_br"(%142) [^bb32, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %143 = "llvm.extractvalue"(%131) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %144 = "llvm.load"(%134) : (!llvm.ptr) -> i32
      %145 = "llvm.getelementptr"(%143, %144) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %146 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %147 = "llvm.getelementptr"(%145, %146) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%147) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb34(%148 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %149 : !llvm.ptr):
      %150 = "mid.invariant"(%149) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %151 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb35] : () -> ()
    ^bb36:
      %152 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%152, %151) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb37] : () -> ()
    ^bb35:
      %153 = "llvm.getelementptr"(%149) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %154 = "mid.checkflag"(%153) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %155 = "llvm.load"(%154) : (!hi.bool) -> i1
      "cf.cond_br"(%155) [^bb36, ^bb36] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %156 = "llvm.extractvalue"(%148) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %157 = "llvm.load"(%151) : (!llvm.ptr) -> i32
      %158 = "llvm.getelementptr"(%156, %157) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %159 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %160 = "llvm.getelementptr"(%158, %159) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%160) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb38(%161 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %162 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %163 : !llvm.ptr, %164 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %165 = "mid.wrap"(%161) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %166 = "hi.cast"(%165) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %167 = "mid.wrap"(%164) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      %168 = "hi.cast"(%167) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %169 = "mid.unwrap"(%166) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %170 = "mid.unwrap"(%168) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %171 = "mid.get_type_field"(%166) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %172 = "mid.new"(%171) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainedCollection", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %173 = "hi.cast"(%166) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %174 = "mid.unwrap"(%173) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %175 = "hi.cast"(%168) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %176 = "mid.unwrap"(%175) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %177 = "mid.unwrap"(%172) : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %178 = "mid.get_type_field"(%166) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %179 = "mid.parameterization"(%178) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %180 = "mid.get_type_field"(%166) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %181 = "mid.parameterization"(%180) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %182 = "mid.parameterizations_array"(%179, %181) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%182, %177, %174, %176) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 118 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %183 = "hi.cast"(%172) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      "mid.return"(%183) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_chain_otherCollectionT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb39(%184 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %185 : !llvm.ptr):
      %186 = "mid.invariant"(%185) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %187 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb40] : () -> ()
    ^bb41:
      %188 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%188, %187) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb43:
      %189 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%189, %187) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb40:
      %190 = "llvm.getelementptr"(%185) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %191 = "mid.checkflag"(%190) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %192 = "llvm.load"(%191) : (!hi.bool) -> i1
      "cf.cond_br"(%192) [^bb44, ^bb45] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb44:
      %193 = "llvm.getelementptr"(%185) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %194 = "mid.checkflag"(%193) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %195 = "llvm.load"(%194) : (!hi.bool) -> i1
      "cf.cond_br"(%195) [^bb45, ^bb41] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb45:
      %196 = "llvm.getelementptr"(%185) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %197 = "mid.checkflag"(%196) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %198 = "llvm.load"(%197) : (!hi.bool) -> i1
      "cf.cond_br"(%198) [^bb43, ^bb43] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb42:
      %199 = "llvm.extractvalue"(%184) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %200 = "llvm.load"(%187) : (!llvm.ptr) -> i32
      %201 = "llvm.getelementptr"(%199, %200) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %202 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %203 = "llvm.getelementptr"(%201, %202) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%203) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb46(%204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %205 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %206 : !llvm.ptr, %207 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %208 = "mid.wrap"(%204) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %209 = "hi.cast"(%208) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %210 = "mid.wrap"(%207) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      %211 = "hi.cast"(%210) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %212 = "mid.unwrap"(%209) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %213 = "mid.unwrap"(%211) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %214 = "mid.get_type_field"(%209) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %215 = "mid.new"(%214) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleavedCollection", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %216 = "hi.cast"(%209) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %217 = "mid.unwrap"(%216) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %218 = "hi.cast"(%211) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %219 = "mid.unwrap"(%218) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %220 = "mid.unwrap"(%215) : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %221 = "mid.get_type_field"(%209) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %222 = "mid.parameterization"(%221) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %223 = "mid.get_type_field"(%209) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %224 = "mid.parameterization"(%223) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %225 = "mid.parameterizations_array"(%222, %224) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%225, %220, %217, %219) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 118 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %226 = "hi.cast"(%215) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      "mid.return"(%226) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_interleave_otherCollectionT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb47(%227 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %228 : !llvm.ptr):
      %229 = "mid.invariant"(%228) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %230 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb48] : () -> ()
    ^bb49:
      %231 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%231, %230) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb50] : () -> ()
    ^bb51:
      %232 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%232, %230) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb50] : () -> ()
    ^bb48:
      %233 = "llvm.getelementptr"(%228) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %234 = "mid.checkflag"(%233) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %235 = "llvm.load"(%234) : (!hi.bool) -> i1
      "cf.cond_br"(%235) [^bb49, ^bb52] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb52:
      %236 = "llvm.getelementptr"(%228) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %237 = "mid.checkflag"(%236) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %238 = "llvm.load"(%237) : (!hi.bool) -> i1
      "cf.cond_br"(%238) [^bb53, ^bb51] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %239 = "llvm.getelementptr"(%228) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %240 = "mid.checkflag"(%239) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %241 = "llvm.load"(%240) : (!hi.bool) -> i1
      "cf.cond_br"(%241) [^bb51, ^bb51] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb50:
      %242 = "llvm.extractvalue"(%227) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %243 = "llvm.load"(%230) : (!llvm.ptr) -> i32
      %244 = "llvm.getelementptr"(%242, %243) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %245 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %246 = "llvm.getelementptr"(%244, %245) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%246) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb54(%247 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %248 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %249 : !llvm.ptr, %250 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %251 = "mid.wrap"(%247) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %252 = "hi.cast"(%251) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %253 = "mid.wrap"(%250) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>
      %254 = "hi.cast"(%253) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>
      %255 = "mid.unwrap"(%252) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %256 = "mid.unwrap"(%254) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %257 = "mid.get_type_field"(%252) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %258 = "mid.wrap"(%250) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %259 = "mid.get_type_field"(%258) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!llvm.ptr) -> !hi.reified_type
      %260 = "mid.get_type_field"(%252) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %261 = "mid.wrap"(%250) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %262 = "mid.get_type_field"(%261) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!llvm.ptr) -> !hi.reified_type
      %263 = "mid.parameterization"(%260, %262) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairCollection.T_subtype_Any._Collection.U_subtype_Any", ["Collection.T_subtype_Any"], ["Collection.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %264 = "mid.new"(%257, %259, %263) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZippedCollection", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %265 = "hi.cast"(%252) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %266 = "mid.unwrap"(%265) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %267 = "hi.cast"(%254) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %268 = "mid.unwrap"(%267) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %269 = "mid.unwrap"(%264) : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %270 = "mid.get_type_field"(%252) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %271 = "mid.parameterization"(%270) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %272 = "mid.wrap"(%250) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %273 = "mid.get_type_field"(%272) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!llvm.ptr) -> !hi.reified_type
      %274 = "mid.parameterization"(%273) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.U_subtype_Any", ["Collection.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %275 = "mid.parameterizations_array"(%271, %274) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%275, %269, %266, %268) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 120 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %276 = "hi.cast"(%264) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>
      "mid.return"(%276) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_zip_otherCollectionU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb55(%277 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %278 : !llvm.ptr):
      %279 = "mid.invariant"(%278) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %280 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb56] : () -> ()
    ^bb57:
      %281 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%281, %280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb58] : () -> ()
    ^bb59:
      %282 = "llvm.mlir.constant"() <{"value" = 65 : i32}> : () -> i32
      "llvm.store"(%282, %280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb58] : () -> ()
    ^bb56:
      %283 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %284 = "mid.checkflag"(%283) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %285 = "llvm.load"(%284) : (!hi.bool) -> i1
      "cf.cond_br"(%285) [^bb60, ^bb61] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb60:
      %286 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %287 = "mid.checkflag"(%286) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %288 = "llvm.load"(%287) : (!hi.bool) -> i1
      "cf.cond_br"(%288) [^bb61, ^bb57] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb61:
      %289 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %290 = "mid.checkflag"(%289) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %291 = "llvm.load"(%290) : (!hi.bool) -> i1
      "cf.cond_br"(%291) [^bb59, ^bb59] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb58:
      %292 = "llvm.extractvalue"(%277) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %293 = "llvm.load"(%280) : (!llvm.ptr) -> i32
      %294 = "llvm.getelementptr"(%292, %293) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %295 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %296 = "llvm.getelementptr"(%294, %295) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%296) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb62(%297 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %298 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %299 : !llvm.ptr, %300 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %301 = "mid.wrap"(%297) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %302 = "hi.cast"(%301) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %303 = "mid.wrap"(%300) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>
      %304 = "hi.cast"(%303) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>
      %305 = "mid.unwrap"(%302) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %306 = "mid.unwrap"(%304) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %307 = "mid.get_type_field"(%302) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %308 = "mid.wrap"(%300) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %309 = "mid.get_type_field"(%308) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!llvm.ptr) -> !hi.reified_type
      %310 = "mid.get_type_field"(%302) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %311 = "mid.wrap"(%300) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %312 = "mid.get_type_field"(%311) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!llvm.ptr) -> !hi.reified_type
      %313 = "mid.parameterization"(%310, %312) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairCollection.T_subtype_Any._Collection.U_subtype_Any", ["Collection.T_subtype_Any"], ["Collection.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %314 = "mid.new"(%307, %309, %313) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductCollection", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %315 = "hi.cast"(%302) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %316 = "mid.unwrap"(%315) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %317 = "hi.cast"(%304) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %318 = "mid.unwrap"(%317) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %319 = "mid.unwrap"(%314) : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %320 = "mid.get_type_field"(%302) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %321 = "mid.parameterization"(%320) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %322 = "mid.wrap"(%300) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %323 = "mid.get_type_field"(%322) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!llvm.ptr) -> !hi.reified_type
      %324 = "mid.parameterization"(%323) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.U_subtype_Any", ["Collection.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %325 = "mid.parameterizations_array"(%321, %324) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%325, %319, %316, %318) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 120 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %326 = "hi.cast"(%314) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>
      "mid.return"(%326) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_product_otherCollectionU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb63(%327 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %328 : !llvm.ptr):
      %329 = "mid.invariant"(%328) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %330 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb64] : () -> ()
    ^bb65:
      %331 = "llvm.mlir.constant"() <{"value" = 67 : i32}> : () -> i32
      "llvm.store"(%331, %330) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb66] : () -> ()
    ^bb67:
      %332 = "llvm.mlir.constant"() <{"value" = 66 : i32}> : () -> i32
      "llvm.store"(%332, %330) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb66] : () -> ()
    ^bb64:
      %333 = "llvm.getelementptr"(%328) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %334 = "mid.checkflag"(%333) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %335 = "llvm.load"(%334) : (!hi.bool) -> i1
      "cf.cond_br"(%335) [^bb65, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %336 = "llvm.getelementptr"(%328) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %337 = "mid.checkflag"(%336) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %338 = "llvm.load"(%337) : (!hi.bool) -> i1
      "cf.cond_br"(%338) [^bb69, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %339 = "llvm.getelementptr"(%328) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %340 = "mid.checkflag"(%339) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %341 = "llvm.load"(%340) : (!hi.bool) -> i1
      "cf.cond_br"(%341) [^bb67, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb66:
      %342 = "llvm.extractvalue"(%327) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %343 = "llvm.load"(%330) : (!llvm.ptr) -> i32
      %344 = "llvm.getelementptr"(%342, %343) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %345 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %346 = "llvm.getelementptr"(%344, %345) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%346) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_EnumeratedCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "EnumeratedCollection_field_EnumeratedCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "EnumeratedCollection_field_EnumeratedCollection_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "EnumeratedCollection_getter_collection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionEnumeratedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "EnumeratedCollection_setter_collection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionEnumeratedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "EnumeratedCollection_field_collection", "getter_name" = "EnumeratedCollection_getter_collection", "setter_name" = "EnumeratedCollection_setter_collection"} : () -> ()
    "mid.func"() ({
    ^bb70(%347 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %348 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %349 : !llvm.ptr, %350 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %351 = "mid.wrap"(%347) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %352 = "hi.cast"(%351) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %353 = "mid.wrap"(%350) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %354 = "hi.cast"(%353) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %355 = "hi.cast"(%354) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      "mid.set_field"(%352, %355) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> ()
    }) {"func_name" = "EnumeratedCollection_init_collectionCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%356 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %357 : !llvm.ptr):
      %358 = "mid.invariant"(%357) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %359 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %360 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%360, %359) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb72:
      %361 = "llvm.getelementptr"(%357) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %362 = "mid.checkflag"(%361) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %363 = "llvm.load"(%362) : (!hi.bool) -> i1
      "cf.cond_br"(%363) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %364 = "llvm.extractvalue"(%356) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %365 = "llvm.load"(%359) : (!llvm.ptr) -> i32
      %366 = "llvm.getelementptr"(%364, %365) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %367 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %368 = "llvm.getelementptr"(%366, %367) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%368) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_init_collectionCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb75(%369 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %371 : !llvm.ptr):
      %372 = "mid.wrap"(%369) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %373 = "hi.cast"(%372) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %374 = "mid.get_field"(%373) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %375 = "mid.unwrap"(%374) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %376 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %377 = "mid.method_call"(%376, %375) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %378 = "hi.cast"(%377) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %379 = "hi.cast"(%378) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%379) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "EnumeratedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb76(%380 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %381 : !llvm.ptr):
      %382 = "mid.invariant"(%381) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %383 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb77:
      %384 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%384, %383) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb78] : () -> ()
    ^bb78:
      %385 = "llvm.extractvalue"(%380) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %386 = "llvm.load"(%383) : (!llvm.ptr) -> i32
      %387 = "llvm.getelementptr"(%385, %386) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %388 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %389 = "llvm.getelementptr"(%387, %388) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%389) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb79(%390 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %391 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %392 : !llvm.ptr):
      %393 = "mid.wrap"(%390) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %394 = "hi.cast"(%393) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %395 = "mid.get_field"(%394) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %396 = "mid.unwrap"(%395) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %397 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %398 = "mid.method_call"(%397, %396) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %399 = "hi.cast"(%398) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %400 = "mid.unwrap"(%399) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %401 = "mid.get_type_field"(%394) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.reified_type
      %402 = "mid.get_type_field"(%394) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.reified_type
      %403 = "mid.parameterization"(%402) {"id_hierarchy" = ["Pair", ["i32_typ"], [0 : i32]], "name_hierarchy" = ["Pairi32._EnumeratedCollection.T_subtype_Any", ["i32"], ["EnumeratedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %404 = "mid.new"(%401, %403) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "Enumerator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %405 = "mid.get_field"(%394) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %406 = "mid.unwrap"(%405) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %407 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %408 = "mid.method_call"(%407, %406) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %409 = "hi.cast"(%408) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %410 = "hi.cast"(%409) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %411 = "mid.unwrap"(%410) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %412 = "mid.unwrap"(%404) : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %413 = "mid.get_type_field"(%394) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.reified_type
      %414 = "mid.parameterization"(%413) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorEnumeratedCollection.T_subtype_Any", ["EnumeratedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %415 = "mid.parameterizations_array"(%414) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%415, %412, %411) {"offset" = 4 : i32, "vptrs" = [#none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %416 = "hi.cast"(%404) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%416) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "EnumeratedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb80(%417 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %418 : !llvm.ptr):
      %419 = "mid.invariant"(%418) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %420 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb81] : () -> ()
    ^bb81:
      %421 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%421, %420) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb82] : () -> ()
    ^bb82:
      %422 = "llvm.extractvalue"(%417) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %423 = "llvm.load"(%420) : (!llvm.ptr) -> i32
      %424 = "llvm.getelementptr"(%422, %423) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %425 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %426 = "llvm.getelementptr"(%424, %425) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%426) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb83(%427 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %428 : !llvm.ptr):
      %429 = "mid.invariant"(%428) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %430 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb84] : () -> ()
    ^bb85:
      %431 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%431, %430) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb84:
      %432 = "llvm.getelementptr"(%428) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %433 = "mid.checkflag"(%432) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %434 = "llvm.load"(%433) : (!hi.bool) -> i1
      "cf.cond_br"(%434) [^bb85, ^bb85] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb86:
      %435 = "llvm.extractvalue"(%427) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %436 = "llvm.load"(%430) : (!llvm.ptr) -> i32
      %437 = "llvm.getelementptr"(%435, %436) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %438 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %439 = "llvm.getelementptr"(%437, %438) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%439) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb87(%440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %441 : !llvm.ptr):
      %442 = "mid.invariant"(%441) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %443 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb88] : () -> ()
    ^bb89:
      %444 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%444, %443) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb90] : () -> ()
    ^bb91:
      %445 = "llvm.getelementptr"(%441) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %446 = "mid.checkflag"(%445) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %447 = "llvm.load"(%446) : (!hi.bool) -> i1
      "cf.cond_br"(%447) [^bb89, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb88:
      %448 = "llvm.getelementptr"(%441) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %449 = "mid.checkflag"(%448) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %450 = "llvm.load"(%449) : (!hi.bool) -> i1
      "cf.cond_br"(%450) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %451 = "llvm.extractvalue"(%440) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %452 = "llvm.load"(%443) : (!llvm.ptr) -> i32
      %453 = "llvm.getelementptr"(%451, %452) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %454 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %455 = "llvm.getelementptr"(%453, %454) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%455) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb92(%456 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %457 : !llvm.ptr):
      %458 = "mid.invariant"(%457) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %459 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb93] : () -> ()
    ^bb94:
      %460 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%460, %459) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb95] : () -> ()
    ^bb93:
      %461 = "llvm.getelementptr"(%457) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %462 = "mid.checkflag"(%461) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %463 = "llvm.load"(%462) : (!hi.bool) -> i1
      "cf.cond_br"(%463) [^bb94, ^bb94] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb95:
      %464 = "llvm.extractvalue"(%456) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %465 = "llvm.load"(%459) : (!llvm.ptr) -> i32
      %466 = "llvm.getelementptr"(%464, %465) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %467 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %468 = "llvm.getelementptr"(%466, %467) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%468) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb96(%469 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %470 : !llvm.ptr):
      %471 = "mid.invariant"(%470) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %472 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb97] : () -> ()
    ^bb98:
      %473 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%473, %472) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb99] : () -> ()
    ^bb97:
      %474 = "llvm.getelementptr"(%470) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %475 = "mid.checkflag"(%474) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %476 = "llvm.load"(%475) : (!hi.bool) -> i1
      "cf.cond_br"(%476) [^bb98, ^bb98] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb99:
      %477 = "llvm.extractvalue"(%469) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %478 = "llvm.load"(%472) : (!llvm.ptr) -> i32
      %479 = "llvm.getelementptr"(%477, %478) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %480 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %481 = "llvm.getelementptr"(%479, %480) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%481) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb100(%482 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %483 : !llvm.ptr):
      %484 = "mid.invariant"(%483) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %485 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb101] : () -> ()
    ^bb101:
      %486 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%486, %485) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb102] : () -> ()
    ^bb102:
      %487 = "llvm.extractvalue"(%482) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %488 = "llvm.load"(%485) : (!llvm.ptr) -> i32
      %489 = "llvm.getelementptr"(%487, %488) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %490 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %491 = "llvm.getelementptr"(%489, %490) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%491) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb103(%492 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %493 : !llvm.ptr):
      %494 = "mid.invariant"(%493) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %495 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb104] : () -> ()
    ^bb105:
      %496 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%496, %495) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb106] : () -> ()
    ^bb107:
      %497 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%497, %495) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb106] : () -> ()
    ^bb104:
      %498 = "llvm.getelementptr"(%493) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %499 = "mid.checkflag"(%498) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %500 = "llvm.load"(%499) : (!hi.bool) -> i1
      "cf.cond_br"(%500) [^bb105, ^bb108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb108:
      %501 = "llvm.getelementptr"(%493) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %502 = "mid.checkflag"(%501) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %503 = "llvm.load"(%502) : (!hi.bool) -> i1
      "cf.cond_br"(%503) [^bb107, ^bb107] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb106:
      %504 = "llvm.extractvalue"(%492) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %505 = "llvm.load"(%495) : (!llvm.ptr) -> i32
      %506 = "llvm.getelementptr"(%504, %505) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %507 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %508 = "llvm.getelementptr"(%506, %507) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%508) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb109(%509 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %510 : !llvm.ptr):
      %511 = "mid.invariant"(%510) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %512 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb110] : () -> ()
    ^bb111:
      %513 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%513, %512) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb112] : () -> ()
    ^bb110:
      %514 = "llvm.getelementptr"(%510) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %515 = "mid.checkflag"(%514) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %516 = "llvm.load"(%515) : (!hi.bool) -> i1
      "cf.cond_br"(%516) [^bb111, ^bb111] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb112:
      %517 = "llvm.extractvalue"(%509) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %518 = "llvm.load"(%512) : (!llvm.ptr) -> i32
      %519 = "llvm.getelementptr"(%517, %518) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %520 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %521 = "llvm.getelementptr"(%519, %520) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%521) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb113(%522 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %523 : !llvm.ptr):
      %524 = "mid.invariant"(%523) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %525 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb114] : () -> ()
    ^bb115:
      %526 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%526, %525) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb116] : () -> ()
    ^bb117:
      %527 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%527, %525) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb116] : () -> ()
    ^bb114:
      %528 = "llvm.getelementptr"(%523) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %529 = "mid.checkflag"(%528) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %530 = "llvm.load"(%529) : (!hi.bool) -> i1
      "cf.cond_br"(%530) [^bb118, ^bb119] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb118:
      %531 = "llvm.getelementptr"(%523) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %532 = "mid.checkflag"(%531) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %533 = "llvm.load"(%532) : (!hi.bool) -> i1
      "cf.cond_br"(%533) [^bb119, ^bb115] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb119:
      %534 = "llvm.getelementptr"(%523) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %535 = "mid.checkflag"(%534) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %536 = "llvm.load"(%535) : (!hi.bool) -> i1
      "cf.cond_br"(%536) [^bb117, ^bb117] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb116:
      %537 = "llvm.extractvalue"(%522) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %538 = "llvm.load"(%525) : (!llvm.ptr) -> i32
      %539 = "llvm.getelementptr"(%537, %538) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %540 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %541 = "llvm.getelementptr"(%539, %540) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%541) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb120(%542 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %543 : !llvm.ptr):
      %544 = "mid.invariant"(%543) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %545 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb121] : () -> ()
    ^bb122:
      %546 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%546, %545) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb124:
      %547 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%547, %545) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb121:
      %548 = "llvm.getelementptr"(%543) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %549 = "mid.checkflag"(%548) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %550 = "llvm.load"(%549) : (!hi.bool) -> i1
      "cf.cond_br"(%550) [^bb125, ^bb126] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb125:
      %551 = "llvm.getelementptr"(%543) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %552 = "mid.checkflag"(%551) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %553 = "llvm.load"(%552) : (!hi.bool) -> i1
      "cf.cond_br"(%553) [^bb126, ^bb122] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb126:
      %554 = "llvm.getelementptr"(%543) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %555 = "mid.checkflag"(%554) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %556 = "llvm.load"(%555) : (!hi.bool) -> i1
      "cf.cond_br"(%556) [^bb124, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %557 = "llvm.extractvalue"(%542) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %558 = "llvm.load"(%545) : (!llvm.ptr) -> i32
      %559 = "llvm.getelementptr"(%557, %558) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %560 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %561 = "llvm.getelementptr"(%559, %560) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%561) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb127(%562 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %563 : !llvm.ptr):
      %564 = "mid.invariant"(%563) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %565 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb128] : () -> ()
    ^bb129:
      %566 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%566, %565) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb131:
      %567 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%567, %565) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb128:
      %568 = "llvm.getelementptr"(%563) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %569 = "mid.checkflag"(%568) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %570 = "llvm.load"(%569) : (!hi.bool) -> i1
      "cf.cond_br"(%570) [^bb129, ^bb132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb132:
      %571 = "llvm.getelementptr"(%563) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %572 = "mid.checkflag"(%571) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %573 = "llvm.load"(%572) : (!hi.bool) -> i1
      "cf.cond_br"(%573) [^bb133, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb133:
      %574 = "llvm.getelementptr"(%563) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %575 = "mid.checkflag"(%574) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %576 = "llvm.load"(%575) : (!hi.bool) -> i1
      "cf.cond_br"(%576) [^bb131, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb130:
      %577 = "llvm.extractvalue"(%562) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %578 = "llvm.load"(%565) : (!llvm.ptr) -> i32
      %579 = "llvm.getelementptr"(%577, %578) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %580 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %581 = "llvm.getelementptr"(%579, %580) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%581) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb134(%582 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %583 : !llvm.ptr):
      %584 = "mid.invariant"(%583) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %585 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb135] : () -> ()
    ^bb136:
      %586 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%586, %585) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb137] : () -> ()
    ^bb138:
      %587 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%587, %585) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb137] : () -> ()
    ^bb135:
      %588 = "llvm.getelementptr"(%583) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %589 = "mid.checkflag"(%588) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %590 = "llvm.load"(%589) : (!hi.bool) -> i1
      "cf.cond_br"(%590) [^bb139, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %591 = "llvm.getelementptr"(%583) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %592 = "mid.checkflag"(%591) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %593 = "llvm.load"(%592) : (!hi.bool) -> i1
      "cf.cond_br"(%593) [^bb140, ^bb136] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb140:
      %594 = "llvm.getelementptr"(%583) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %595 = "mid.checkflag"(%594) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %596 = "llvm.load"(%595) : (!hi.bool) -> i1
      "cf.cond_br"(%596) [^bb138, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb137:
      %597 = "llvm.extractvalue"(%582) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %598 = "llvm.load"(%585) : (!llvm.ptr) -> i32
      %599 = "llvm.getelementptr"(%597, %598) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %600 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %601 = "llvm.getelementptr"(%599, %600) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%601) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MappedCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MappedCollection_field_MappedCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MappedCollection_field_MappedCollection_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MappedCollection_getter_collection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionMappedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MappedCollection_setter_collection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionMappedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MappedCollection_field_collection", "getter_name" = "MappedCollection_getter_collection", "setter_name" = "MappedCollection_setter_collection"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MappedCollection_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMappedCollection.T_subtype_Any_to_MappedCollection.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MappedCollection_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMappedCollection.T_subtype_Any_to_MappedCollection.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MappedCollection_field_f", "getter_name" = "MappedCollection_getter_f", "setter_name" = "MappedCollection_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb141(%602 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %603 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %604 : !llvm.ptr, %605 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %606 : !llvm.struct<(!llvm.ptr)>):
      %607 = "mid.wrap"(%602) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %608 = "hi.cast"(%607) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %609 = "mid.wrap"(%605) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %610 = "hi.cast"(%609) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %611 = "hi.cast"(%610) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      "mid.set_field"(%608, %611) {"offset" = 2 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> ()
      %612 = "mid.wrap"(%606) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %613 = "hi.cast"(%612) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %614 = "hi.cast"(%613) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      "mid.set_field"(%608, %614) {"offset" = 3 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> ()
    }) {"func_name" = "MappedCollection_init_collectionCollectionT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb142(%615 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %616 : !llvm.ptr):
      %617 = "mid.invariant"(%616) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %618 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb143] : () -> ()
    ^bb144:
      %619 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%619, %618) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb145] : () -> ()
    ^bb146:
      %620 = "llvm.getelementptr"(%616) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %621 = "mid.checkflag"(%620) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %622 = "llvm.load"(%621) : (!hi.bool) -> i1
      "cf.cond_br"(%622) [^bb144, ^bb144] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb143:
      %623 = "llvm.getelementptr"(%616) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %624 = "mid.checkflag"(%623) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %625 = "llvm.load"(%624) : (!hi.bool) -> i1
      "cf.cond_br"(%625) [^bb146, ^bb146] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb145:
      %626 = "llvm.extractvalue"(%615) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %627 = "llvm.load"(%618) : (!llvm.ptr) -> i32
      %628 = "llvm.getelementptr"(%626, %627) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %629 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %630 = "llvm.getelementptr"(%628, %629) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%630) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_init_collectionCollectionT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb147(%631 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %632 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %633 : !llvm.ptr):
      %634 = "mid.wrap"(%631) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %635 = "hi.cast"(%634) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %636 = "mid.get_field"(%635) {"offset" = 2 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %637 = "mid.unwrap"(%636) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %638 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %639 = "mid.method_call"(%638, %637) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %640 = "hi.cast"(%639) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %641 = "hi.cast"(%640) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%641) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "MappedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb148(%642 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %643 : !llvm.ptr):
      %644 = "mid.invariant"(%643) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %645 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb149] : () -> ()
    ^bb149:
      %646 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%646, %645) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb150] : () -> ()
    ^bb150:
      %647 = "llvm.extractvalue"(%642) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %648 = "llvm.load"(%645) : (!llvm.ptr) -> i32
      %649 = "llvm.getelementptr"(%647, %648) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %650 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %651 = "llvm.getelementptr"(%649, %650) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%651) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb151(%652 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %653 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %654 : !llvm.ptr):
      %655 = "mid.wrap"(%652) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %656 = "hi.cast"(%655) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %657 = "mid.get_field"(%656) {"offset" = 2 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %658 = "mid.unwrap"(%657) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %659 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %660 = "mid.method_call"(%659, %658) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %661 = "hi.cast"(%660) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %662 = "mid.get_field"(%656) {"offset" = 3 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %663 = "mid.unwrap"(%661) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %664 = "mid.unwrap"(%662) : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !llvm.struct<(!llvm.ptr)>
      %665 = "mid.get_type_field"(%656) {"offset" = 0 : i64, "vtable_bytes" = 952 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %666 = "mid.get_type_field"(%656) {"offset" = 1 : i64, "vtable_bytes" = 952 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %667 = "mid.new"(%665, %666) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %668 = "mid.get_field"(%656) {"offset" = 2 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %669 = "mid.unwrap"(%668) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %670 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %671 = "mid.method_call"(%670, %669) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %672 = "hi.cast"(%671) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %673 = "mid.get_field"(%656) {"offset" = 3 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %674 = "hi.cast"(%672) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %675 = "mid.unwrap"(%674) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %676 = "hi.cast"(%673) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      %677 = "mid.unwrap"(%676) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !llvm.struct<(!llvm.ptr)>
      %678 = "mid.unwrap"(%667) : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %679 = "mid.get_type_field"(%656) {"offset" = 0 : i64, "vtable_bytes" = 952 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %680 = "mid.parameterization"(%679) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorMappedCollection.T_subtype_Any", ["MappedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %681 = "mid.get_type_field"(%656) {"offset" = 1 : i64, "vtable_bytes" = 952 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %682 = "mid.get_type_field"(%656) {"offset" = 0 : i64, "vtable_bytes" = 952 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %683 = "mid.parameterization"(%681, %682) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionMappedCollection.T_subtype_Any_to_MappedCollection.U_subtype_Any", ["MappedCollection.U_subtype_Any"], ["MappedCollection.T_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %684 = "mid.parameterizations_array"(%680, %683) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%684, %678, %675, %677) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %685 = "hi.cast"(%667) {"from_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>
      "mid.return"(%685) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>) -> ()
    }) {"func_name" = "MappedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb152(%686 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %687 : !llvm.ptr):
      %688 = "mid.invariant"(%687) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %689 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb153] : () -> ()
    ^bb153:
      %690 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%690, %689) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb154] : () -> ()
    ^bb154:
      %691 = "llvm.extractvalue"(%686) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %692 = "llvm.load"(%689) : (!llvm.ptr) -> i32
      %693 = "llvm.getelementptr"(%691, %692) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %694 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %695 = "llvm.getelementptr"(%693, %694) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%695) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb155(%696 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %697 : !llvm.ptr):
      %698 = "mid.invariant"(%697) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %699 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb156] : () -> ()
    ^bb157:
      %700 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%700, %699) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb158] : () -> ()
    ^bb156:
      %701 = "llvm.getelementptr"(%697) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %702 = "mid.checkflag"(%701) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %703 = "llvm.load"(%702) : (!hi.bool) -> i1
      "cf.cond_br"(%703) [^bb157, ^bb157] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb158:
      %704 = "llvm.extractvalue"(%696) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %705 = "llvm.load"(%699) : (!llvm.ptr) -> i32
      %706 = "llvm.getelementptr"(%704, %705) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %707 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %708 = "llvm.getelementptr"(%706, %707) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%708) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb159(%709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %710 : !llvm.ptr):
      %711 = "mid.invariant"(%710) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %712 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb160] : () -> ()
    ^bb161:
      %713 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%713, %712) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb162] : () -> ()
    ^bb163:
      %714 = "llvm.getelementptr"(%710) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %715 = "mid.checkflag"(%714) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %716 = "llvm.load"(%715) : (!hi.bool) -> i1
      "cf.cond_br"(%716) [^bb161, ^bb161] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb160:
      %717 = "llvm.getelementptr"(%710) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %718 = "mid.checkflag"(%717) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %719 = "llvm.load"(%718) : (!hi.bool) -> i1
      "cf.cond_br"(%719) [^bb163, ^bb163] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb162:
      %720 = "llvm.extractvalue"(%709) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %721 = "llvm.load"(%712) : (!llvm.ptr) -> i32
      %722 = "llvm.getelementptr"(%720, %721) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %723 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %724 = "llvm.getelementptr"(%722, %723) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%724) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb164(%725 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %726 : !llvm.ptr):
      %727 = "mid.invariant"(%726) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %728 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb165] : () -> ()
    ^bb166:
      %729 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%729, %728) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb167] : () -> ()
    ^bb165:
      %730 = "llvm.getelementptr"(%726) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %731 = "mid.checkflag"(%730) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %732 = "llvm.load"(%731) : (!hi.bool) -> i1
      "cf.cond_br"(%732) [^bb166, ^bb166] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb167:
      %733 = "llvm.extractvalue"(%725) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %734 = "llvm.load"(%728) : (!llvm.ptr) -> i32
      %735 = "llvm.getelementptr"(%733, %734) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %736 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %737 = "llvm.getelementptr"(%735, %736) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%737) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb168(%738 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %739 : !llvm.ptr):
      %740 = "mid.invariant"(%739) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %741 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb169] : () -> ()
    ^bb170:
      %742 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%742, %741) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb171] : () -> ()
    ^bb169:
      %743 = "llvm.getelementptr"(%739) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %744 = "mid.checkflag"(%743) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %745 = "llvm.load"(%744) : (!hi.bool) -> i1
      "cf.cond_br"(%745) [^bb170, ^bb170] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb171:
      %746 = "llvm.extractvalue"(%738) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %747 = "llvm.load"(%741) : (!llvm.ptr) -> i32
      %748 = "llvm.getelementptr"(%746, %747) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %749 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %750 = "llvm.getelementptr"(%748, %749) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%750) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb172(%751 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %752 : !llvm.ptr):
      %753 = "mid.invariant"(%752) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %754 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb173] : () -> ()
    ^bb173:
      %755 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%755, %754) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb174] : () -> ()
    ^bb174:
      %756 = "llvm.extractvalue"(%751) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %757 = "llvm.load"(%754) : (!llvm.ptr) -> i32
      %758 = "llvm.getelementptr"(%756, %757) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %759 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %760 = "llvm.getelementptr"(%758, %759) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%760) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb175(%761 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %762 : !llvm.ptr):
      %763 = "mid.invariant"(%762) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %764 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb176] : () -> ()
    ^bb177:
      %765 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%765, %764) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb178] : () -> ()
    ^bb179:
      %766 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%766, %764) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb178] : () -> ()
    ^bb176:
      %767 = "llvm.getelementptr"(%762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %768 = "mid.checkflag"(%767) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %769 = "llvm.load"(%768) : (!hi.bool) -> i1
      "cf.cond_br"(%769) [^bb177, ^bb180] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb180:
      %770 = "llvm.getelementptr"(%762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %771 = "mid.checkflag"(%770) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %772 = "llvm.load"(%771) : (!hi.bool) -> i1
      "cf.cond_br"(%772) [^bb179, ^bb179] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb178:
      %773 = "llvm.extractvalue"(%761) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %774 = "llvm.load"(%764) : (!llvm.ptr) -> i32
      %775 = "llvm.getelementptr"(%773, %774) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %776 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %777 = "llvm.getelementptr"(%775, %776) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%777) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb181(%778 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %779 : !llvm.ptr):
      %780 = "mid.invariant"(%779) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %781 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb182] : () -> ()
    ^bb183:
      %782 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%782, %781) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb184] : () -> ()
    ^bb182:
      %783 = "llvm.getelementptr"(%779) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %784 = "mid.checkflag"(%783) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %785 = "llvm.load"(%784) : (!hi.bool) -> i1
      "cf.cond_br"(%785) [^bb183, ^bb183] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb184:
      %786 = "llvm.extractvalue"(%778) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %787 = "llvm.load"(%781) : (!llvm.ptr) -> i32
      %788 = "llvm.getelementptr"(%786, %787) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %789 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %790 = "llvm.getelementptr"(%788, %789) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%790) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb185(%791 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %792 : !llvm.ptr):
      %793 = "mid.invariant"(%792) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %794 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb186] : () -> ()
    ^bb187:
      %795 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%795, %794) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb189:
      %796 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%796, %794) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb186:
      %797 = "llvm.getelementptr"(%792) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %798 = "mid.checkflag"(%797) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %799 = "llvm.load"(%798) : (!hi.bool) -> i1
      "cf.cond_br"(%799) [^bb187, ^bb190] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb190:
      %800 = "llvm.getelementptr"(%792) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %801 = "mid.checkflag"(%800) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %802 = "llvm.load"(%801) : (!hi.bool) -> i1
      "cf.cond_br"(%802) [^bb191, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb191:
      %803 = "llvm.getelementptr"(%792) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %804 = "mid.checkflag"(%803) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %805 = "llvm.load"(%804) : (!hi.bool) -> i1
      "cf.cond_br"(%805) [^bb189, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb188:
      %806 = "llvm.extractvalue"(%791) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %807 = "llvm.load"(%794) : (!llvm.ptr) -> i32
      %808 = "llvm.getelementptr"(%806, %807) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %809 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %810 = "llvm.getelementptr"(%808, %809) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%810) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb192(%811 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %812 : !llvm.ptr):
      %813 = "mid.invariant"(%812) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %814 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb193] : () -> ()
    ^bb194:
      %815 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%815, %814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb195] : () -> ()
    ^bb196:
      %816 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%816, %814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb195] : () -> ()
    ^bb193:
      %817 = "llvm.getelementptr"(%812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %818 = "mid.checkflag"(%817) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %819 = "llvm.load"(%818) : (!hi.bool) -> i1
      "cf.cond_br"(%819) [^bb197, ^bb198] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb197:
      %820 = "llvm.getelementptr"(%812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %821 = "mid.checkflag"(%820) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %822 = "llvm.load"(%821) : (!hi.bool) -> i1
      "cf.cond_br"(%822) [^bb198, ^bb194] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb198:
      %823 = "llvm.getelementptr"(%812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %824 = "mid.checkflag"(%823) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %825 = "llvm.load"(%824) : (!hi.bool) -> i1
      "cf.cond_br"(%825) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb195:
      %826 = "llvm.extractvalue"(%811) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %827 = "llvm.load"(%814) : (!llvm.ptr) -> i32
      %828 = "llvm.getelementptr"(%826, %827) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %829 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %830 = "llvm.getelementptr"(%828, %829) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%830) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb199(%831 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %832 : !llvm.ptr):
      %833 = "mid.invariant"(%832) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %834 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb200] : () -> ()
    ^bb201:
      %835 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%835, %834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb202] : () -> ()
    ^bb203:
      %836 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%836, %834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb202] : () -> ()
    ^bb200:
      %837 = "llvm.getelementptr"(%832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %838 = "mid.checkflag"(%837) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %839 = "llvm.load"(%838) : (!hi.bool) -> i1
      "cf.cond_br"(%839) [^bb201, ^bb204] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb204:
      %840 = "llvm.getelementptr"(%832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %841 = "mid.checkflag"(%840) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %842 = "llvm.load"(%841) : (!hi.bool) -> i1
      "cf.cond_br"(%842) [^bb205, ^bb203] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb205:
      %843 = "llvm.getelementptr"(%832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %844 = "mid.checkflag"(%843) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %845 = "llvm.load"(%844) : (!hi.bool) -> i1
      "cf.cond_br"(%845) [^bb203, ^bb203] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb202:
      %846 = "llvm.extractvalue"(%831) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %847 = "llvm.load"(%834) : (!llvm.ptr) -> i32
      %848 = "llvm.getelementptr"(%846, %847) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %849 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %850 = "llvm.getelementptr"(%848, %849) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%850) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb206(%851 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %852 : !llvm.ptr):
      %853 = "mid.invariant"(%852) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %854 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb207] : () -> ()
    ^bb208:
      %855 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%855, %854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb209] : () -> ()
    ^bb210:
      %856 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%856, %854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb209] : () -> ()
    ^bb207:
      %857 = "llvm.getelementptr"(%852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %858 = "mid.checkflag"(%857) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %859 = "llvm.load"(%858) : (!hi.bool) -> i1
      "cf.cond_br"(%859) [^bb211, ^bb212] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb211:
      %860 = "llvm.getelementptr"(%852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %861 = "mid.checkflag"(%860) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %862 = "llvm.load"(%861) : (!hi.bool) -> i1
      "cf.cond_br"(%862) [^bb212, ^bb208] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb212:
      %863 = "llvm.getelementptr"(%852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %864 = "mid.checkflag"(%863) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %865 = "llvm.load"(%864) : (!hi.bool) -> i1
      "cf.cond_br"(%865) [^bb210, ^bb210] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb209:
      %866 = "llvm.extractvalue"(%851) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %867 = "llvm.load"(%854) : (!llvm.ptr) -> i32
      %868 = "llvm.getelementptr"(%866, %867) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %869 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %870 = "llvm.getelementptr"(%868, %869) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%870) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ChainedCollection", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainedCollection_field_ChainedCollection_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainedCollection_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainedCollection_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainedCollection_field_first", "getter_name" = "ChainedCollection_getter_first", "setter_name" = "ChainedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainedCollection_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainedCollection_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainedCollection_field_second", "getter_name" = "ChainedCollection_getter_second", "setter_name" = "ChainedCollection_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb213(%871 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %872 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %873 : !llvm.ptr, %874 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %875 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %876 = "mid.wrap"(%871) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %877 = "hi.cast"(%876) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %878 = "mid.wrap"(%874) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %879 = "hi.cast"(%878) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %880 = "hi.cast"(%879) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.set_field"(%877, %880) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
      %881 = "mid.wrap"(%875) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %882 = "hi.cast"(%881) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %883 = "hi.cast"(%882) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.set_field"(%877, %883) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
    }) {"func_name" = "ChainedCollection_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb214(%884 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %885 : !llvm.ptr):
      %886 = "mid.invariant"(%885) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %887 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb215] : () -> ()
    ^bb216:
      %888 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%888, %887) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb217] : () -> ()
    ^bb218:
      %889 = "llvm.getelementptr"(%885) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %890 = "mid.checkflag"(%889) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %891 = "llvm.load"(%890) : (!hi.bool) -> i1
      "cf.cond_br"(%891) [^bb216, ^bb216] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb215:
      %892 = "llvm.getelementptr"(%885) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %893 = "mid.checkflag"(%892) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %894 = "llvm.load"(%893) : (!hi.bool) -> i1
      "cf.cond_br"(%894) [^bb218, ^bb218] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb217:
      %895 = "llvm.extractvalue"(%884) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %896 = "llvm.load"(%887) : (!llvm.ptr) -> i32
      %897 = "llvm.getelementptr"(%895, %896) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %898 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %899 = "llvm.getelementptr"(%897, %898) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%899) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb219(%900 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %901 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %902 : !llvm.ptr):
      %903 = "mid.wrap"(%900) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %904 = "hi.cast"(%903) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %905 = "mid.get_field"(%904) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %906 = "mid.unwrap"(%905) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %907 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %908 = "mid.method_call"(%907, %906) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %909 = "hi.cast"(%908) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %910 = "mid.get_field"(%904) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %911 = "mid.unwrap"(%910) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %912 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %913 = "mid.method_call"(%912, %911) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %914 = "hi.cast"(%913) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %915 = "mid.unwrap"(%909) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %916 = "mid.unwrap"(%914) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %917 = "mid.arithmetic"(%915, %916) {"op" = "ADD"} : (i32, i32) -> i32
      %918 = "mid.wrap"(%917) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %919 = "hi.cast"(%918) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%919) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "ChainedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb220(%920 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %921 : !llvm.ptr):
      %922 = "mid.invariant"(%921) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %923 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb221] : () -> ()
    ^bb221:
      %924 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%924, %923) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb222] : () -> ()
    ^bb222:
      %925 = "llvm.extractvalue"(%920) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %926 = "llvm.load"(%923) : (!llvm.ptr) -> i32
      %927 = "llvm.getelementptr"(%925, %926) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %928 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %929 = "llvm.getelementptr"(%927, %928) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%929) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb223(%930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %931 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %932 : !llvm.ptr):
      %933 = "mid.wrap"(%930) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %934 = "hi.cast"(%933) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %935 = "mid.get_field"(%934) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %936 = "mid.unwrap"(%935) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %937 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %938 = "mid.method_call"(%937, %936) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %939 = "hi.cast"(%938) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %940 = "mid.get_field"(%934) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %941 = "mid.unwrap"(%940) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %942 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %943 = "mid.method_call"(%942, %941) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %944 = "hi.cast"(%943) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %945 = "mid.unwrap"(%939) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %946 = "mid.unwrap"(%944) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %947 = "mid.get_type_field"(%934) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.reified_type
      %948 = "mid.new"(%947) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %949 = "mid.get_field"(%934) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %950 = "mid.unwrap"(%949) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %951 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %952 = "mid.method_call"(%951, %950) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %953 = "hi.cast"(%952) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %954 = "mid.get_field"(%934) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %955 = "mid.unwrap"(%954) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %956 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %957 = "mid.method_call"(%956, %955) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %958 = "hi.cast"(%957) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %959 = "hi.cast"(%953) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %960 = "mid.unwrap"(%959) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %961 = "hi.cast"(%958) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %962 = "mid.unwrap"(%961) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %963 = "mid.unwrap"(%948) : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %964 = "mid.get_type_field"(%934) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.reified_type
      %965 = "mid.parameterization"(%964) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChainedCollection.T_subtype_Any", ["ChainedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %966 = "mid.get_type_field"(%934) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.reified_type
      %967 = "mid.parameterization"(%966) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChainedCollection.T_subtype_Any", ["ChainedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %968 = "mid.parameterizations_array"(%965, %967) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%968, %963, %960, %962) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %969 = "hi.cast"(%948) {"from_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.return"(%969) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
    }) {"func_name" = "ChainedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb224(%970 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %971 : !llvm.ptr):
      %972 = "mid.invariant"(%971) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %973 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb225] : () -> ()
    ^bb225:
      %974 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%974, %973) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb226] : () -> ()
    ^bb226:
      %975 = "llvm.extractvalue"(%970) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %976 = "llvm.load"(%973) : (!llvm.ptr) -> i32
      %977 = "llvm.getelementptr"(%975, %976) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %978 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %979 = "llvm.getelementptr"(%977, %978) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%979) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb227(%980 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %981 : !llvm.ptr):
      %982 = "mid.invariant"(%981) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %983 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb228] : () -> ()
    ^bb229:
      %984 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%984, %983) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb230] : () -> ()
    ^bb228:
      %985 = "llvm.getelementptr"(%981) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %986 = "mid.checkflag"(%985) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %987 = "llvm.load"(%986) : (!hi.bool) -> i1
      "cf.cond_br"(%987) [^bb229, ^bb229] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb230:
      %988 = "llvm.extractvalue"(%980) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %989 = "llvm.load"(%983) : (!llvm.ptr) -> i32
      %990 = "llvm.getelementptr"(%988, %989) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %991 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %992 = "llvm.getelementptr"(%990, %991) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%992) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb231(%993 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %994 : !llvm.ptr):
      %995 = "mid.invariant"(%994) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %996 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb232] : () -> ()
    ^bb233:
      %997 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%997, %996) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb234] : () -> ()
    ^bb235:
      %998 = "llvm.getelementptr"(%994) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %999 = "mid.checkflag"(%998) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1000 = "llvm.load"(%999) : (!hi.bool) -> i1
      "cf.cond_br"(%1000) [^bb233, ^bb233] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb232:
      %1001 = "llvm.getelementptr"(%994) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1002 = "mid.checkflag"(%1001) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1003 = "llvm.load"(%1002) : (!hi.bool) -> i1
      "cf.cond_br"(%1003) [^bb235, ^bb235] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb234:
      %1004 = "llvm.extractvalue"(%993) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1005 = "llvm.load"(%996) : (!llvm.ptr) -> i32
      %1006 = "llvm.getelementptr"(%1004, %1005) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1007 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1008 = "llvm.getelementptr"(%1006, %1007) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1008) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb236(%1009 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1010 : !llvm.ptr):
      %1011 = "mid.invariant"(%1010) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1012 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb237] : () -> ()
    ^bb238:
      %1013 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1013, %1012) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb239] : () -> ()
    ^bb237:
      %1014 = "llvm.getelementptr"(%1010) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1015 = "mid.checkflag"(%1014) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1016 = "llvm.load"(%1015) : (!hi.bool) -> i1
      "cf.cond_br"(%1016) [^bb238, ^bb238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb239:
      %1017 = "llvm.extractvalue"(%1009) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1018 = "llvm.load"(%1012) : (!llvm.ptr) -> i32
      %1019 = "llvm.getelementptr"(%1017, %1018) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1020 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1021 = "llvm.getelementptr"(%1019, %1020) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1021) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb240(%1022 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1023 : !llvm.ptr):
      %1024 = "mid.invariant"(%1023) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1025 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb241] : () -> ()
    ^bb242:
      %1026 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1026, %1025) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb243] : () -> ()
    ^bb241:
      %1027 = "llvm.getelementptr"(%1023) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1028 = "mid.checkflag"(%1027) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1029 = "llvm.load"(%1028) : (!hi.bool) -> i1
      "cf.cond_br"(%1029) [^bb242, ^bb242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb243:
      %1030 = "llvm.extractvalue"(%1022) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1031 = "llvm.load"(%1025) : (!llvm.ptr) -> i32
      %1032 = "llvm.getelementptr"(%1030, %1031) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1033 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1034 = "llvm.getelementptr"(%1032, %1033) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1034) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb244(%1035 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1036 : !llvm.ptr):
      %1037 = "mid.invariant"(%1036) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1038 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb245] : () -> ()
    ^bb245:
      %1039 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1039, %1038) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb246] : () -> ()
    ^bb246:
      %1040 = "llvm.extractvalue"(%1035) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1041 = "llvm.load"(%1038) : (!llvm.ptr) -> i32
      %1042 = "llvm.getelementptr"(%1040, %1041) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1043 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1044 = "llvm.getelementptr"(%1042, %1043) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1044) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb247(%1045 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1046 : !llvm.ptr):
      %1047 = "mid.invariant"(%1046) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1048 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb248] : () -> ()
    ^bb249:
      %1049 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1049, %1048) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb250] : () -> ()
    ^bb251:
      %1050 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1050, %1048) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb250] : () -> ()
    ^bb248:
      %1051 = "llvm.getelementptr"(%1046) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1052 = "mid.checkflag"(%1051) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1053 = "llvm.load"(%1052) : (!hi.bool) -> i1
      "cf.cond_br"(%1053) [^bb249, ^bb252] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb252:
      %1054 = "llvm.getelementptr"(%1046) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1055 = "mid.checkflag"(%1054) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1056 = "llvm.load"(%1055) : (!hi.bool) -> i1
      "cf.cond_br"(%1056) [^bb251, ^bb251] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb250:
      %1057 = "llvm.extractvalue"(%1045) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1058 = "llvm.load"(%1048) : (!llvm.ptr) -> i32
      %1059 = "llvm.getelementptr"(%1057, %1058) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1060 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1061 = "llvm.getelementptr"(%1059, %1060) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1061) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb253(%1062 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1063 : !llvm.ptr):
      %1064 = "mid.invariant"(%1063) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1065 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb254] : () -> ()
    ^bb255:
      %1066 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1066, %1065) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb256] : () -> ()
    ^bb254:
      %1067 = "llvm.getelementptr"(%1063) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1068 = "mid.checkflag"(%1067) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1069 = "llvm.load"(%1068) : (!hi.bool) -> i1
      "cf.cond_br"(%1069) [^bb255, ^bb255] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb256:
      %1070 = "llvm.extractvalue"(%1062) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1071 = "llvm.load"(%1065) : (!llvm.ptr) -> i32
      %1072 = "llvm.getelementptr"(%1070, %1071) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1073 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1074 = "llvm.getelementptr"(%1072, %1073) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1074) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb257(%1075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1076 : !llvm.ptr):
      %1077 = "mid.invariant"(%1076) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1078 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb258] : () -> ()
    ^bb259:
      %1079 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1079, %1078) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb260] : () -> ()
    ^bb261:
      %1080 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1080, %1078) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb260] : () -> ()
    ^bb258:
      %1081 = "llvm.getelementptr"(%1076) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1082 = "mid.checkflag"(%1081) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1083 = "llvm.load"(%1082) : (!hi.bool) -> i1
      "cf.cond_br"(%1083) [^bb262, ^bb263] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb262:
      %1084 = "llvm.getelementptr"(%1076) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1085 = "mid.checkflag"(%1084) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1086 = "llvm.load"(%1085) : (!hi.bool) -> i1
      "cf.cond_br"(%1086) [^bb263, ^bb259] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb263:
      %1087 = "llvm.getelementptr"(%1076) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1088 = "mid.checkflag"(%1087) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1089 = "llvm.load"(%1088) : (!hi.bool) -> i1
      "cf.cond_br"(%1089) [^bb261, ^bb261] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb260:
      %1090 = "llvm.extractvalue"(%1075) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1091 = "llvm.load"(%1078) : (!llvm.ptr) -> i32
      %1092 = "llvm.getelementptr"(%1090, %1091) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1093 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1094 = "llvm.getelementptr"(%1092, %1093) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1094) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb264(%1095 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1096 : !llvm.ptr):
      %1097 = "mid.invariant"(%1096) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1098 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb265] : () -> ()
    ^bb266:
      %1099 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1099, %1098) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb267] : () -> ()
    ^bb268:
      %1100 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1100, %1098) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb267] : () -> ()
    ^bb265:
      %1101 = "llvm.getelementptr"(%1096) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1102 = "mid.checkflag"(%1101) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1103 = "llvm.load"(%1102) : (!hi.bool) -> i1
      "cf.cond_br"(%1103) [^bb269, ^bb270] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb269:
      %1104 = "llvm.getelementptr"(%1096) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1105 = "mid.checkflag"(%1104) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1106 = "llvm.load"(%1105) : (!hi.bool) -> i1
      "cf.cond_br"(%1106) [^bb270, ^bb266] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb270:
      %1107 = "llvm.getelementptr"(%1096) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1108 = "mid.checkflag"(%1107) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1109 = "llvm.load"(%1108) : (!hi.bool) -> i1
      "cf.cond_br"(%1109) [^bb268, ^bb268] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb267:
      %1110 = "llvm.extractvalue"(%1095) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1111 = "llvm.load"(%1098) : (!llvm.ptr) -> i32
      %1112 = "llvm.getelementptr"(%1110, %1111) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1113 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1114 = "llvm.getelementptr"(%1112, %1113) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1114) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb271(%1115 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1116 : !llvm.ptr):
      %1117 = "mid.invariant"(%1116) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1118 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb272] : () -> ()
    ^bb273:
      %1119 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1119, %1118) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb274] : () -> ()
    ^bb275:
      %1120 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1120, %1118) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb274] : () -> ()
    ^bb272:
      %1121 = "llvm.getelementptr"(%1116) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1122 = "mid.checkflag"(%1121) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1123 = "llvm.load"(%1122) : (!hi.bool) -> i1
      "cf.cond_br"(%1123) [^bb273, ^bb276] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb276:
      %1124 = "llvm.getelementptr"(%1116) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1125 = "mid.checkflag"(%1124) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1126 = "llvm.load"(%1125) : (!hi.bool) -> i1
      "cf.cond_br"(%1126) [^bb277, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb277:
      %1127 = "llvm.getelementptr"(%1116) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1128 = "mid.checkflag"(%1127) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1129 = "llvm.load"(%1128) : (!hi.bool) -> i1
      "cf.cond_br"(%1129) [^bb275, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb274:
      %1130 = "llvm.extractvalue"(%1115) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1131 = "llvm.load"(%1118) : (!llvm.ptr) -> i32
      %1132 = "llvm.getelementptr"(%1130, %1131) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1133 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1134 = "llvm.getelementptr"(%1132, %1133) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1134) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb278(%1135 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1136 : !llvm.ptr):
      %1137 = "mid.invariant"(%1136) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1138 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb279] : () -> ()
    ^bb280:
      %1139 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1139, %1138) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb281] : () -> ()
    ^bb282:
      %1140 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1140, %1138) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb281] : () -> ()
    ^bb279:
      %1141 = "llvm.getelementptr"(%1136) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1142 = "mid.checkflag"(%1141) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1143 = "llvm.load"(%1142) : (!hi.bool) -> i1
      "cf.cond_br"(%1143) [^bb283, ^bb284] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb283:
      %1144 = "llvm.getelementptr"(%1136) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1145 = "mid.checkflag"(%1144) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1146 = "llvm.load"(%1145) : (!hi.bool) -> i1
      "cf.cond_br"(%1146) [^bb284, ^bb280] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb284:
      %1147 = "llvm.getelementptr"(%1136) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1148 = "mid.checkflag"(%1147) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1149 = "llvm.load"(%1148) : (!hi.bool) -> i1
      "cf.cond_br"(%1149) [^bb282, ^bb282] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb281:
      %1150 = "llvm.extractvalue"(%1135) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1151 = "llvm.load"(%1138) : (!llvm.ptr) -> i32
      %1152 = "llvm.getelementptr"(%1150, %1151) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1153 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1154 = "llvm.getelementptr"(%1152, %1153) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1154) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_InterleavedCollection", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleavedCollection_field_InterleavedCollection_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleavedCollection_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleavedCollection_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleavedCollection_field_first", "getter_name" = "InterleavedCollection_getter_first", "setter_name" = "InterleavedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleavedCollection_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleavedCollection_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleavedCollection_field_second", "getter_name" = "InterleavedCollection_getter_second", "setter_name" = "InterleavedCollection_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb285(%1155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1157 : !llvm.ptr, %1158 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1160 = "mid.wrap"(%1155) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1161 = "hi.cast"(%1160) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1162 = "mid.wrap"(%1158) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1163 = "hi.cast"(%1162) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1164 = "hi.cast"(%1163) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.set_field"(%1161, %1164) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
      %1165 = "mid.wrap"(%1159) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1166 = "hi.cast"(%1165) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1167 = "hi.cast"(%1166) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.set_field"(%1161, %1167) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
    }) {"func_name" = "InterleavedCollection_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb286(%1168 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1169 : !llvm.ptr):
      %1170 = "mid.invariant"(%1169) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1171 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb287] : () -> ()
    ^bb288:
      %1172 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1172, %1171) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb289] : () -> ()
    ^bb290:
      %1173 = "llvm.getelementptr"(%1169) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1174 = "mid.checkflag"(%1173) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1175 = "llvm.load"(%1174) : (!hi.bool) -> i1
      "cf.cond_br"(%1175) [^bb288, ^bb288] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb287:
      %1176 = "llvm.getelementptr"(%1169) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1177 = "mid.checkflag"(%1176) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1178 = "llvm.load"(%1177) : (!hi.bool) -> i1
      "cf.cond_br"(%1178) [^bb290, ^bb290] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb289:
      %1179 = "llvm.extractvalue"(%1168) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1180 = "llvm.load"(%1171) : (!llvm.ptr) -> i32
      %1181 = "llvm.getelementptr"(%1179, %1180) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1182 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1183 = "llvm.getelementptr"(%1181, %1182) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1183) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb291(%1184 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1185 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1186 : !llvm.ptr):
      %1187 = "mid.wrap"(%1184) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1188 = "hi.cast"(%1187) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1189 = "mid.get_field"(%1188) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1190 = "mid.unwrap"(%1189) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1191 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1192 = "mid.method_call"(%1191, %1190) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1193 = "hi.cast"(%1192) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1194 = "mid.get_field"(%1188) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1195 = "mid.unwrap"(%1194) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1196 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1197 = "mid.method_call"(%1196, %1195) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1198 = "hi.cast"(%1197) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1199 = "mid.unwrap"(%1193) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1200 = "mid.unwrap"(%1198) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1201 = "mid.arithmetic"(%1199, %1200) {"op" = "ADD"} : (i32, i32) -> i32
      %1202 = "mid.wrap"(%1201) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1203 = "hi.cast"(%1202) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%1203) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "InterleavedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb292(%1204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1205 : !llvm.ptr):
      %1206 = "mid.invariant"(%1205) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1207 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb293] : () -> ()
    ^bb293:
      %1208 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1208, %1207) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb294] : () -> ()
    ^bb294:
      %1209 = "llvm.extractvalue"(%1204) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1210 = "llvm.load"(%1207) : (!llvm.ptr) -> i32
      %1211 = "llvm.getelementptr"(%1209, %1210) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1212 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1213 = "llvm.getelementptr"(%1211, %1212) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1213) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb295(%1214 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1215 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1216 : !llvm.ptr):
      %1217 = "mid.wrap"(%1214) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1218 = "hi.cast"(%1217) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1219 = "mid.get_field"(%1218) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1220 = "mid.unwrap"(%1219) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1221 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1222 = "mid.method_call"(%1221, %1220) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1223 = "hi.cast"(%1222) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1224 = "mid.get_field"(%1218) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1225 = "mid.unwrap"(%1224) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1226 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1227 = "mid.method_call"(%1226, %1225) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1228 = "hi.cast"(%1227) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1229 = "mid.unwrap"(%1223) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1230 = "mid.unwrap"(%1228) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1231 = "mid.get_type_field"(%1218) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.reified_type
      %1232 = "mid.new"(%1231) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1233 = "mid.get_field"(%1218) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1234 = "mid.unwrap"(%1233) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1235 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1236 = "mid.method_call"(%1235, %1234) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1237 = "hi.cast"(%1236) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1238 = "mid.get_field"(%1218) {"offset" = 2 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1239 = "mid.unwrap"(%1238) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1240 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1241 = "mid.method_call"(%1240, %1239) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1242 = "hi.cast"(%1241) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1243 = "hi.cast"(%1237) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1244 = "mid.unwrap"(%1243) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1245 = "hi.cast"(%1242) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1246 = "mid.unwrap"(%1245) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1247 = "mid.unwrap"(%1232) : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1248 = "mid.get_type_field"(%1218) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.reified_type
      %1249 = "mid.parameterization"(%1248) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleavedCollection.T_subtype_Any", ["InterleavedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1250 = "mid.get_type_field"(%1218) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.reified_type
      %1251 = "mid.parameterization"(%1250) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleavedCollection.T_subtype_Any", ["InterleavedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1252 = "mid.parameterizations_array"(%1249, %1251) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1252, %1247, %1244, %1246) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1253 = "hi.cast"(%1232) {"from_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.return"(%1253) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
    }) {"func_name" = "InterleavedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb296(%1254 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1255 : !llvm.ptr):
      %1256 = "mid.invariant"(%1255) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1257 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb297] : () -> ()
    ^bb297:
      %1258 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1258, %1257) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb298] : () -> ()
    ^bb298:
      %1259 = "llvm.extractvalue"(%1254) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1260 = "llvm.load"(%1257) : (!llvm.ptr) -> i32
      %1261 = "llvm.getelementptr"(%1259, %1260) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1262 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1263 = "llvm.getelementptr"(%1261, %1262) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1263) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb299(%1264 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1265 : !llvm.ptr):
      %1266 = "mid.invariant"(%1265) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1267 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb300] : () -> ()
    ^bb301:
      %1268 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1268, %1267) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb302] : () -> ()
    ^bb300:
      %1269 = "llvm.getelementptr"(%1265) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1270 = "mid.checkflag"(%1269) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1271 = "llvm.load"(%1270) : (!hi.bool) -> i1
      "cf.cond_br"(%1271) [^bb301, ^bb301] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb302:
      %1272 = "llvm.extractvalue"(%1264) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1273 = "llvm.load"(%1267) : (!llvm.ptr) -> i32
      %1274 = "llvm.getelementptr"(%1272, %1273) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1275 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1276 = "llvm.getelementptr"(%1274, %1275) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1276) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb303(%1277 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1278 : !llvm.ptr):
      %1279 = "mid.invariant"(%1278) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1280 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb304] : () -> ()
    ^bb305:
      %1281 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1281, %1280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb306] : () -> ()
    ^bb307:
      %1282 = "llvm.getelementptr"(%1278) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1283 = "mid.checkflag"(%1282) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1284 = "llvm.load"(%1283) : (!hi.bool) -> i1
      "cf.cond_br"(%1284) [^bb305, ^bb305] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb304:
      %1285 = "llvm.getelementptr"(%1278) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1286 = "mid.checkflag"(%1285) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1287 = "llvm.load"(%1286) : (!hi.bool) -> i1
      "cf.cond_br"(%1287) [^bb307, ^bb307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb306:
      %1288 = "llvm.extractvalue"(%1277) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1289 = "llvm.load"(%1280) : (!llvm.ptr) -> i32
      %1290 = "llvm.getelementptr"(%1288, %1289) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1291 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1292 = "llvm.getelementptr"(%1290, %1291) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1292) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb308(%1293 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1294 : !llvm.ptr):
      %1295 = "mid.invariant"(%1294) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1296 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb309] : () -> ()
    ^bb310:
      %1297 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1297, %1296) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb311] : () -> ()
    ^bb309:
      %1298 = "llvm.getelementptr"(%1294) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1299 = "mid.checkflag"(%1298) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1300 = "llvm.load"(%1299) : (!hi.bool) -> i1
      "cf.cond_br"(%1300) [^bb310, ^bb310] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb311:
      %1301 = "llvm.extractvalue"(%1293) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1302 = "llvm.load"(%1296) : (!llvm.ptr) -> i32
      %1303 = "llvm.getelementptr"(%1301, %1302) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1304 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1305 = "llvm.getelementptr"(%1303, %1304) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1305) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb312(%1306 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1307 : !llvm.ptr):
      %1308 = "mid.invariant"(%1307) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1309 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb313] : () -> ()
    ^bb314:
      %1310 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1310, %1309) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb315] : () -> ()
    ^bb313:
      %1311 = "llvm.getelementptr"(%1307) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1312 = "mid.checkflag"(%1311) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1313 = "llvm.load"(%1312) : (!hi.bool) -> i1
      "cf.cond_br"(%1313) [^bb314, ^bb314] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb315:
      %1314 = "llvm.extractvalue"(%1306) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1315 = "llvm.load"(%1309) : (!llvm.ptr) -> i32
      %1316 = "llvm.getelementptr"(%1314, %1315) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1317 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1318 = "llvm.getelementptr"(%1316, %1317) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1318) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb316(%1319 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1320 : !llvm.ptr):
      %1321 = "mid.invariant"(%1320) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1322 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb317] : () -> ()
    ^bb317:
      %1323 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1323, %1322) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb318] : () -> ()
    ^bb318:
      %1324 = "llvm.extractvalue"(%1319) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1325 = "llvm.load"(%1322) : (!llvm.ptr) -> i32
      %1326 = "llvm.getelementptr"(%1324, %1325) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1327 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1328 = "llvm.getelementptr"(%1326, %1327) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1328) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb319(%1329 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1330 : !llvm.ptr):
      %1331 = "mid.invariant"(%1330) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1332 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb320] : () -> ()
    ^bb321:
      %1333 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1333, %1332) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb322] : () -> ()
    ^bb323:
      %1334 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1334, %1332) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb322] : () -> ()
    ^bb320:
      %1335 = "llvm.getelementptr"(%1330) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1336 = "mid.checkflag"(%1335) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1337 = "llvm.load"(%1336) : (!hi.bool) -> i1
      "cf.cond_br"(%1337) [^bb321, ^bb324] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb324:
      %1338 = "llvm.getelementptr"(%1330) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1339 = "mid.checkflag"(%1338) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1340 = "llvm.load"(%1339) : (!hi.bool) -> i1
      "cf.cond_br"(%1340) [^bb323, ^bb323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb322:
      %1341 = "llvm.extractvalue"(%1329) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1342 = "llvm.load"(%1332) : (!llvm.ptr) -> i32
      %1343 = "llvm.getelementptr"(%1341, %1342) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1344 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1345 = "llvm.getelementptr"(%1343, %1344) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1345) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb325(%1346 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1347 : !llvm.ptr):
      %1348 = "mid.invariant"(%1347) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1349 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb326] : () -> ()
    ^bb327:
      %1350 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1350, %1349) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb328] : () -> ()
    ^bb326:
      %1351 = "llvm.getelementptr"(%1347) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1352 = "mid.checkflag"(%1351) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1353 = "llvm.load"(%1352) : (!hi.bool) -> i1
      "cf.cond_br"(%1353) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb328:
      %1354 = "llvm.extractvalue"(%1346) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1355 = "llvm.load"(%1349) : (!llvm.ptr) -> i32
      %1356 = "llvm.getelementptr"(%1354, %1355) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1357 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1358 = "llvm.getelementptr"(%1356, %1357) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1358) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb329(%1359 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1360 : !llvm.ptr):
      %1361 = "mid.invariant"(%1360) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1362 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb330] : () -> ()
    ^bb331:
      %1363 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1363, %1362) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb332] : () -> ()
    ^bb333:
      %1364 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1364, %1362) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb332] : () -> ()
    ^bb330:
      %1365 = "llvm.getelementptr"(%1360) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1366 = "mid.checkflag"(%1365) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1367 = "llvm.load"(%1366) : (!hi.bool) -> i1
      "cf.cond_br"(%1367) [^bb334, ^bb335] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb334:
      %1368 = "llvm.getelementptr"(%1360) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1369 = "mid.checkflag"(%1368) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1370 = "llvm.load"(%1369) : (!hi.bool) -> i1
      "cf.cond_br"(%1370) [^bb335, ^bb331] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb335:
      %1371 = "llvm.getelementptr"(%1360) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1372 = "mid.checkflag"(%1371) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1373 = "llvm.load"(%1372) : (!hi.bool) -> i1
      "cf.cond_br"(%1373) [^bb333, ^bb333] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb332:
      %1374 = "llvm.extractvalue"(%1359) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1375 = "llvm.load"(%1362) : (!llvm.ptr) -> i32
      %1376 = "llvm.getelementptr"(%1374, %1375) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1377 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1378 = "llvm.getelementptr"(%1376, %1377) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1378) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb336(%1379 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1380 : !llvm.ptr):
      %1381 = "mid.invariant"(%1380) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1382 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb337] : () -> ()
    ^bb338:
      %1383 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1383, %1382) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb339] : () -> ()
    ^bb340:
      %1384 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1384, %1382) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb339] : () -> ()
    ^bb337:
      %1385 = "llvm.getelementptr"(%1380) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1386 = "mid.checkflag"(%1385) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1387 = "llvm.load"(%1386) : (!hi.bool) -> i1
      "cf.cond_br"(%1387) [^bb341, ^bb342] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb341:
      %1388 = "llvm.getelementptr"(%1380) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1389 = "mid.checkflag"(%1388) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1390 = "llvm.load"(%1389) : (!hi.bool) -> i1
      "cf.cond_br"(%1390) [^bb342, ^bb338] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb342:
      %1391 = "llvm.getelementptr"(%1380) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1392 = "mid.checkflag"(%1391) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1393 = "llvm.load"(%1392) : (!hi.bool) -> i1
      "cf.cond_br"(%1393) [^bb340, ^bb340] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb339:
      %1394 = "llvm.extractvalue"(%1379) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1395 = "llvm.load"(%1382) : (!llvm.ptr) -> i32
      %1396 = "llvm.getelementptr"(%1394, %1395) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1397 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1398 = "llvm.getelementptr"(%1396, %1397) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1398) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb343(%1399 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1400 : !llvm.ptr):
      %1401 = "mid.invariant"(%1400) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1402 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb344] : () -> ()
    ^bb345:
      %1403 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1403, %1402) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb346] : () -> ()
    ^bb347:
      %1404 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1404, %1402) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb346] : () -> ()
    ^bb344:
      %1405 = "llvm.getelementptr"(%1400) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1406 = "mid.checkflag"(%1405) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1407 = "llvm.load"(%1406) : (!hi.bool) -> i1
      "cf.cond_br"(%1407) [^bb345, ^bb348] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb348:
      %1408 = "llvm.getelementptr"(%1400) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1409 = "mid.checkflag"(%1408) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1410 = "llvm.load"(%1409) : (!hi.bool) -> i1
      "cf.cond_br"(%1410) [^bb349, ^bb347] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb349:
      %1411 = "llvm.getelementptr"(%1400) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1412 = "mid.checkflag"(%1411) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1413 = "llvm.load"(%1412) : (!hi.bool) -> i1
      "cf.cond_br"(%1413) [^bb347, ^bb347] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb346:
      %1414 = "llvm.extractvalue"(%1399) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1415 = "llvm.load"(%1402) : (!llvm.ptr) -> i32
      %1416 = "llvm.getelementptr"(%1414, %1415) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1417 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1418 = "llvm.getelementptr"(%1416, %1417) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1418) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb350(%1419 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1420 : !llvm.ptr):
      %1421 = "mid.invariant"(%1420) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1422 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb351] : () -> ()
    ^bb352:
      %1423 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1423, %1422) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb353] : () -> ()
    ^bb354:
      %1424 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1424, %1422) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb353] : () -> ()
    ^bb351:
      %1425 = "llvm.getelementptr"(%1420) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1426 = "mid.checkflag"(%1425) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1427 = "llvm.load"(%1426) : (!hi.bool) -> i1
      "cf.cond_br"(%1427) [^bb355, ^bb356] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb355:
      %1428 = "llvm.getelementptr"(%1420) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1429 = "mid.checkflag"(%1428) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1430 = "llvm.load"(%1429) : (!hi.bool) -> i1
      "cf.cond_br"(%1430) [^bb356, ^bb352] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb356:
      %1431 = "llvm.getelementptr"(%1420) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1432 = "mid.checkflag"(%1431) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1433 = "llvm.load"(%1432) : (!hi.bool) -> i1
      "cf.cond_br"(%1433) [^bb354, ^bb354] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb353:
      %1434 = "llvm.extractvalue"(%1419) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1435 = "llvm.load"(%1422) : (!llvm.ptr) -> i32
      %1436 = "llvm.getelementptr"(%1434, %1435) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1437 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1438 = "llvm.getelementptr"(%1436, %1437) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1438) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ZippedCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZippedCollection_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZippedCollection_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZippedCollection_field_first", "getter_name" = "ZippedCollection_getter_first", "setter_name" = "ZippedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZippedCollection_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZippedCollection_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZippedCollection_field_second", "getter_name" = "ZippedCollection_getter_second", "setter_name" = "ZippedCollection_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb357(%1439 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1441 : !llvm.ptr, %1442 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1443 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1444 = "mid.wrap"(%1439) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1445 = "hi.cast"(%1444) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1446 = "mid.wrap"(%1442) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1447 = "hi.cast"(%1446) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1448 = "hi.cast"(%1447) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      "mid.set_field"(%1445, %1448) {"offset" = 3 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> ()
      %1449 = "mid.wrap"(%1443) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1450 = "hi.cast"(%1449) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1451 = "hi.cast"(%1450) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      "mid.set_field"(%1445, %1451) {"offset" = 4 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> ()
    }) {"func_name" = "ZippedCollection_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb358(%1452 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1453 : !llvm.ptr):
      %1454 = "mid.invariant"(%1453) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1455 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb359] : () -> ()
    ^bb360:
      %1456 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1456, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb361] : () -> ()
    ^bb362:
      %1457 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1458 = "mid.checkflag"(%1457) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1459 = "llvm.load"(%1458) : (!hi.bool) -> i1
      "cf.cond_br"(%1459) [^bb360, ^bb360] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb359:
      %1460 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1461 = "mid.checkflag"(%1460) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1462 = "llvm.load"(%1461) : (!hi.bool) -> i1
      "cf.cond_br"(%1462) [^bb362, ^bb362] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb361:
      %1463 = "llvm.extractvalue"(%1452) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1464 = "llvm.load"(%1455) : (!llvm.ptr) -> i32
      %1465 = "llvm.getelementptr"(%1463, %1464) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1466 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1467 = "llvm.getelementptr"(%1465, %1466) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1467) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb363(%1468 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1469 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1470 : !llvm.ptr):
      %1471 = "mid.wrap"(%1468) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1472 = "hi.cast"(%1471) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1473 = "mid.get_field"(%1472) {"offset" = 3 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1474 = "mid.unwrap"(%1473) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1475 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1476 = "mid.method_call"(%1475, %1474) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1477 = "hi.cast"(%1476) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1478 = "mid.get_field"(%1472) {"offset" = 4 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1479 = "mid.unwrap"(%1478) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1480 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1481 = "mid.method_call"(%1480, %1479) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1482 = "hi.cast"(%1481) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1483 = "mid.unwrap"(%1477) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1484 = "mid.unwrap"(%1482) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1485 = "mid.comparison"(%1483, %1484) {"op" = "LT"} : (i32, i32) -> i1
      %1486 = "mid.wrap"(%1485) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1487 = "mid.unwrap"(%1486) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%1487) ({
        %1488 = "hi.cast"(%1477) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.return"(%1488) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %1489 = "hi.cast"(%1482) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%1489) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "ZippedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb364(%1490 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1491 : !llvm.ptr):
      %1492 = "mid.invariant"(%1491) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1493 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb365] : () -> ()
    ^bb365:
      %1494 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1494, %1493) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb366] : () -> ()
    ^bb366:
      %1495 = "llvm.extractvalue"(%1490) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1496 = "llvm.load"(%1493) : (!llvm.ptr) -> i32
      %1497 = "llvm.getelementptr"(%1495, %1496) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1498 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1499 = "llvm.getelementptr"(%1497, %1498) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1499) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb367(%1500 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1501 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1502 : !llvm.ptr):
      %1503 = "mid.wrap"(%1500) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1504 = "hi.cast"(%1503) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1505 = "mid.get_field"(%1504) {"offset" = 3 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1506 = "mid.unwrap"(%1505) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1507 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1508 = "mid.method_call"(%1507, %1506) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1509 = "hi.cast"(%1508) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1510 = "mid.get_field"(%1504) {"offset" = 4 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1511 = "mid.unwrap"(%1510) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1512 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1513 = "mid.method_call"(%1512, %1511) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1514 = "hi.cast"(%1513) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1515 = "mid.unwrap"(%1509) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1516 = "mid.unwrap"(%1514) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1517 = "mid.get_type_field"(%1504) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1518 = "mid.get_type_field"(%1504) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1519 = "mid.get_type_field"(%1504) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1520 = "mid.get_type_field"(%1504) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1521 = "mid.parameterization"(%1519, %1520) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairZippedCollection.T_subtype_Any._ZippedCollection.U_subtype_Any", ["ZippedCollection.T_subtype_Any"], ["ZippedCollection.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %1522 = "mid.new"(%1517, %1518, %1521) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1523 = "mid.get_field"(%1504) {"offset" = 3 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1524 = "mid.unwrap"(%1523) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1525 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1526 = "mid.method_call"(%1525, %1524) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1527 = "hi.cast"(%1526) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1528 = "mid.get_field"(%1504) {"offset" = 4 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1529 = "mid.unwrap"(%1528) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1530 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1531 = "mid.method_call"(%1530, %1529) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1532 = "hi.cast"(%1531) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1533 = "hi.cast"(%1527) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %1534 = "mid.unwrap"(%1533) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1535 = "hi.cast"(%1532) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %1536 = "mid.unwrap"(%1535) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1537 = "mid.unwrap"(%1522) : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1538 = "mid.get_type_field"(%1504) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1539 = "mid.parameterization"(%1538) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZippedCollection.T_subtype_Any", ["ZippedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1540 = "mid.get_type_field"(%1504) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1541 = "mid.parameterization"(%1540) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZippedCollection.U_subtype_Any", ["ZippedCollection.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1542 = "mid.parameterizations_array"(%1539, %1541) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1542, %1537, %1534, %1536) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1543 = "hi.cast"(%1522) {"from_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%1543) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "ZippedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb368(%1544 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1545 : !llvm.ptr):
      %1546 = "mid.invariant"(%1545) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1547 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb369] : () -> ()
    ^bb369:
      %1548 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1548, %1547) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb370] : () -> ()
    ^bb370:
      %1549 = "llvm.extractvalue"(%1544) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1550 = "llvm.load"(%1547) : (!llvm.ptr) -> i32
      %1551 = "llvm.getelementptr"(%1549, %1550) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1552 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1553 = "llvm.getelementptr"(%1551, %1552) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1553) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb371(%1554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1555 : !llvm.ptr):
      %1556 = "mid.invariant"(%1555) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1557 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb372] : () -> ()
    ^bb373:
      %1558 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1558, %1557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb374] : () -> ()
    ^bb372:
      %1559 = "llvm.getelementptr"(%1555) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1560 = "mid.checkflag"(%1559) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1561 = "llvm.load"(%1560) : (!hi.bool) -> i1
      "cf.cond_br"(%1561) [^bb373, ^bb373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb374:
      %1562 = "llvm.extractvalue"(%1554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1563 = "llvm.load"(%1557) : (!llvm.ptr) -> i32
      %1564 = "llvm.getelementptr"(%1562, %1563) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1565 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1566 = "llvm.getelementptr"(%1564, %1565) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1566) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb375(%1567 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1568 : !llvm.ptr):
      %1569 = "mid.invariant"(%1568) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1570 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb376] : () -> ()
    ^bb377:
      %1571 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1571, %1570) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb378] : () -> ()
    ^bb379:
      %1572 = "llvm.getelementptr"(%1568) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1573 = "mid.checkflag"(%1572) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1574 = "llvm.load"(%1573) : (!hi.bool) -> i1
      "cf.cond_br"(%1574) [^bb377, ^bb377] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb376:
      %1575 = "llvm.getelementptr"(%1568) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1576 = "mid.checkflag"(%1575) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1577 = "llvm.load"(%1576) : (!hi.bool) -> i1
      "cf.cond_br"(%1577) [^bb379, ^bb379] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb378:
      %1578 = "llvm.extractvalue"(%1567) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1579 = "llvm.load"(%1570) : (!llvm.ptr) -> i32
      %1580 = "llvm.getelementptr"(%1578, %1579) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1581 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1582 = "llvm.getelementptr"(%1580, %1581) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1582) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb380(%1583 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1584 : !llvm.ptr):
      %1585 = "mid.invariant"(%1584) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1586 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb381] : () -> ()
    ^bb382:
      %1587 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1587, %1586) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb383] : () -> ()
    ^bb381:
      %1588 = "llvm.getelementptr"(%1584) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1589 = "mid.checkflag"(%1588) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1590 = "llvm.load"(%1589) : (!hi.bool) -> i1
      "cf.cond_br"(%1590) [^bb382, ^bb382] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb383:
      %1591 = "llvm.extractvalue"(%1583) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1592 = "llvm.load"(%1586) : (!llvm.ptr) -> i32
      %1593 = "llvm.getelementptr"(%1591, %1592) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1594 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1595 = "llvm.getelementptr"(%1593, %1594) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1595) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb384(%1596 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1597 : !llvm.ptr):
      %1598 = "mid.invariant"(%1597) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1599 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb385] : () -> ()
    ^bb386:
      %1600 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1600, %1599) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb387] : () -> ()
    ^bb385:
      %1601 = "llvm.getelementptr"(%1597) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1602 = "mid.checkflag"(%1601) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1603 = "llvm.load"(%1602) : (!hi.bool) -> i1
      "cf.cond_br"(%1603) [^bb386, ^bb386] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb387:
      %1604 = "llvm.extractvalue"(%1596) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1605 = "llvm.load"(%1599) : (!llvm.ptr) -> i32
      %1606 = "llvm.getelementptr"(%1604, %1605) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1607 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1608 = "llvm.getelementptr"(%1606, %1607) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1608) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb388(%1609 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1610 : !llvm.ptr):
      %1611 = "mid.invariant"(%1610) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1612 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb389] : () -> ()
    ^bb389:
      %1613 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1613, %1612) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb390] : () -> ()
    ^bb390:
      %1614 = "llvm.extractvalue"(%1609) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1615 = "llvm.load"(%1612) : (!llvm.ptr) -> i32
      %1616 = "llvm.getelementptr"(%1614, %1615) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1617 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1618 = "llvm.getelementptr"(%1616, %1617) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1618) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb391(%1619 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1620 : !llvm.ptr):
      %1621 = "mid.invariant"(%1620) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1622 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb392] : () -> ()
    ^bb393:
      %1623 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1623, %1622) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb394] : () -> ()
    ^bb395:
      %1624 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1624, %1622) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb394] : () -> ()
    ^bb392:
      %1625 = "llvm.getelementptr"(%1620) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1626 = "mid.checkflag"(%1625) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1627 = "llvm.load"(%1626) : (!hi.bool) -> i1
      "cf.cond_br"(%1627) [^bb393, ^bb396] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb396:
      %1628 = "llvm.getelementptr"(%1620) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1629 = "mid.checkflag"(%1628) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1630 = "llvm.load"(%1629) : (!hi.bool) -> i1
      "cf.cond_br"(%1630) [^bb395, ^bb395] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb394:
      %1631 = "llvm.extractvalue"(%1619) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1632 = "llvm.load"(%1622) : (!llvm.ptr) -> i32
      %1633 = "llvm.getelementptr"(%1631, %1632) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1634 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1635 = "llvm.getelementptr"(%1633, %1634) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1635) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb397(%1636 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1637 : !llvm.ptr):
      %1638 = "mid.invariant"(%1637) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1639 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb398] : () -> ()
    ^bb399:
      %1640 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1640, %1639) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb400] : () -> ()
    ^bb398:
      %1641 = "llvm.getelementptr"(%1637) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1642 = "mid.checkflag"(%1641) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1643 = "llvm.load"(%1642) : (!hi.bool) -> i1
      "cf.cond_br"(%1643) [^bb399, ^bb399] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb400:
      %1644 = "llvm.extractvalue"(%1636) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1645 = "llvm.load"(%1639) : (!llvm.ptr) -> i32
      %1646 = "llvm.getelementptr"(%1644, %1645) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1647 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1648 = "llvm.getelementptr"(%1646, %1647) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1648) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb401(%1649 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1650 : !llvm.ptr):
      %1651 = "mid.invariant"(%1650) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1652 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb402] : () -> ()
    ^bb403:
      %1653 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1653, %1652) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb404] : () -> ()
    ^bb405:
      %1654 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1654, %1652) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb404] : () -> ()
    ^bb402:
      %1655 = "llvm.getelementptr"(%1650) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1656 = "mid.checkflag"(%1655) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1657 = "llvm.load"(%1656) : (!hi.bool) -> i1
      "cf.cond_br"(%1657) [^bb403, ^bb406] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb406:
      %1658 = "llvm.getelementptr"(%1650) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1659 = "mid.checkflag"(%1658) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1660 = "llvm.load"(%1659) : (!hi.bool) -> i1
      "cf.cond_br"(%1660) [^bb407, ^bb405] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb407:
      %1661 = "llvm.getelementptr"(%1650) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1662 = "mid.checkflag"(%1661) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1663 = "llvm.load"(%1662) : (!hi.bool) -> i1
      "cf.cond_br"(%1663) [^bb405, ^bb405] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb404:
      %1664 = "llvm.extractvalue"(%1649) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1665 = "llvm.load"(%1652) : (!llvm.ptr) -> i32
      %1666 = "llvm.getelementptr"(%1664, %1665) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1667 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1668 = "llvm.getelementptr"(%1666, %1667) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1668) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb408(%1669 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1670 : !llvm.ptr):
      %1671 = "mid.invariant"(%1670) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1672 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb409] : () -> ()
    ^bb410:
      %1673 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1673, %1672) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb411] : () -> ()
    ^bb412:
      %1674 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1674, %1672) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb411] : () -> ()
    ^bb409:
      %1675 = "llvm.getelementptr"(%1670) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1676 = "mid.checkflag"(%1675) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1677 = "llvm.load"(%1676) : (!hi.bool) -> i1
      "cf.cond_br"(%1677) [^bb413, ^bb414] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb413:
      %1678 = "llvm.getelementptr"(%1670) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1679 = "mid.checkflag"(%1678) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1680 = "llvm.load"(%1679) : (!hi.bool) -> i1
      "cf.cond_br"(%1680) [^bb414, ^bb410] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb414:
      %1681 = "llvm.getelementptr"(%1670) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1682 = "mid.checkflag"(%1681) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1683 = "llvm.load"(%1682) : (!hi.bool) -> i1
      "cf.cond_br"(%1683) [^bb412, ^bb412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb411:
      %1684 = "llvm.extractvalue"(%1669) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1685 = "llvm.load"(%1672) : (!llvm.ptr) -> i32
      %1686 = "llvm.getelementptr"(%1684, %1685) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1687 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1688 = "llvm.getelementptr"(%1686, %1687) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1688) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb415(%1689 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1690 : !llvm.ptr):
      %1691 = "mid.invariant"(%1690) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1692 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb416] : () -> ()
    ^bb417:
      %1693 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1693, %1692) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb418] : () -> ()
    ^bb419:
      %1694 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1694, %1692) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb418] : () -> ()
    ^bb416:
      %1695 = "llvm.getelementptr"(%1690) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1696 = "mid.checkflag"(%1695) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1697 = "llvm.load"(%1696) : (!hi.bool) -> i1
      "cf.cond_br"(%1697) [^bb417, ^bb420] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb420:
      %1698 = "llvm.getelementptr"(%1690) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1699 = "mid.checkflag"(%1698) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1700 = "llvm.load"(%1699) : (!hi.bool) -> i1
      "cf.cond_br"(%1700) [^bb421, ^bb419] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb421:
      %1701 = "llvm.getelementptr"(%1690) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1702 = "mid.checkflag"(%1701) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1703 = "llvm.load"(%1702) : (!hi.bool) -> i1
      "cf.cond_br"(%1703) [^bb419, ^bb419] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb418:
      %1704 = "llvm.extractvalue"(%1689) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1705 = "llvm.load"(%1692) : (!llvm.ptr) -> i32
      %1706 = "llvm.getelementptr"(%1704, %1705) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1707 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1708 = "llvm.getelementptr"(%1706, %1707) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1708) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb422(%1709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1710 : !llvm.ptr):
      %1711 = "mid.invariant"(%1710) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1712 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb423] : () -> ()
    ^bb424:
      %1713 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1713, %1712) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb425] : () -> ()
    ^bb426:
      %1714 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1714, %1712) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb425] : () -> ()
    ^bb423:
      %1715 = "llvm.getelementptr"(%1710) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1716 = "mid.checkflag"(%1715) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1717 = "llvm.load"(%1716) : (!hi.bool) -> i1
      "cf.cond_br"(%1717) [^bb427, ^bb428] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb427:
      %1718 = "llvm.getelementptr"(%1710) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1719 = "mid.checkflag"(%1718) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1720 = "llvm.load"(%1719) : (!hi.bool) -> i1
      "cf.cond_br"(%1720) [^bb428, ^bb424] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb428:
      %1721 = "llvm.getelementptr"(%1710) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1722 = "mid.checkflag"(%1721) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1723 = "llvm.load"(%1722) : (!hi.bool) -> i1
      "cf.cond_br"(%1723) [^bb426, ^bb426] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb425:
      %1724 = "llvm.extractvalue"(%1709) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1725 = "llvm.load"(%1712) : (!llvm.ptr) -> i32
      %1726 = "llvm.getelementptr"(%1724, %1725) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1727 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1728 = "llvm.getelementptr"(%1726, %1727) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1728) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ProductCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductCollection_field_ProductCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductCollection_field_ProductCollection_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductCollection_field_ProductCollection_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductCollection_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductCollection_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductCollection_field_first", "getter_name" = "ProductCollection_getter_first", "setter_name" = "ProductCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductCollection_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductCollection_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductCollection_field_second", "getter_name" = "ProductCollection_getter_second", "setter_name" = "ProductCollection_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb429(%1729 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1730 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1731 : !llvm.ptr, %1732 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1733 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1734 = "mid.wrap"(%1729) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1735 = "hi.cast"(%1734) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1736 = "mid.wrap"(%1732) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1737 = "hi.cast"(%1736) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1738 = "hi.cast"(%1737) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      "mid.set_field"(%1735, %1738) {"offset" = 3 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> ()
      %1739 = "mid.wrap"(%1733) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1740 = "hi.cast"(%1739) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1741 = "hi.cast"(%1740) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      "mid.set_field"(%1735, %1741) {"offset" = 4 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> ()
    }) {"func_name" = "ProductCollection_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb430(%1742 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1743 : !llvm.ptr):
      %1744 = "mid.invariant"(%1743) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1745 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb431] : () -> ()
    ^bb432:
      %1746 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1746, %1745) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb433] : () -> ()
    ^bb434:
      %1747 = "llvm.getelementptr"(%1743) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1748 = "mid.checkflag"(%1747) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1749 = "llvm.load"(%1748) : (!hi.bool) -> i1
      "cf.cond_br"(%1749) [^bb432, ^bb432] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb431:
      %1750 = "llvm.getelementptr"(%1743) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1751 = "mid.checkflag"(%1750) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1752 = "llvm.load"(%1751) : (!hi.bool) -> i1
      "cf.cond_br"(%1752) [^bb434, ^bb434] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb433:
      %1753 = "llvm.extractvalue"(%1742) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1754 = "llvm.load"(%1745) : (!llvm.ptr) -> i32
      %1755 = "llvm.getelementptr"(%1753, %1754) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1756 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1757 = "llvm.getelementptr"(%1755, %1756) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1757) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb435(%1758 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1759 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1760 : !llvm.ptr):
      %1761 = "mid.wrap"(%1758) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1762 = "hi.cast"(%1761) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1763 = "mid.get_field"(%1762) {"offset" = 3 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1764 = "mid.unwrap"(%1763) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1765 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1766 = "mid.method_call"(%1765, %1764) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1767 = "hi.cast"(%1766) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1768 = "mid.get_field"(%1762) {"offset" = 4 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1769 = "mid.unwrap"(%1768) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1770 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1771 = "mid.method_call"(%1770, %1769) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1772 = "hi.cast"(%1771) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1773 = "mid.unwrap"(%1767) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1774 = "mid.unwrap"(%1772) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1775 = "mid.arithmetic"(%1773, %1774) {"op" = "MUL"} : (i32, i32) -> i32
      %1776 = "mid.wrap"(%1775) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1777 = "hi.cast"(%1776) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%1777) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "ProductCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb436(%1778 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1779 : !llvm.ptr):
      %1780 = "mid.invariant"(%1779) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1781 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb437] : () -> ()
    ^bb437:
      %1782 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1782, %1781) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb438] : () -> ()
    ^bb438:
      %1783 = "llvm.extractvalue"(%1778) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1784 = "llvm.load"(%1781) : (!llvm.ptr) -> i32
      %1785 = "llvm.getelementptr"(%1783, %1784) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1786 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1787 = "llvm.getelementptr"(%1785, %1786) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1787) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb439(%1788 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1789 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1790 : !llvm.ptr):
      %1791 = "mid.wrap"(%1788) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1792 = "hi.cast"(%1791) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1793 = "mid.get_field"(%1792) {"offset" = 3 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1794 = "mid.unwrap"(%1793) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1795 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1796 = "mid.method_call"(%1795, %1794) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1797 = "hi.cast"(%1796) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1798 = "mid.get_field"(%1792) {"offset" = 4 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1799 = "mid.unwrap"(%1797) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1800 = "mid.unwrap"(%1798) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1801 = "mid.get_type_field"(%1792) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1802 = "mid.get_type_field"(%1792) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1803 = "mid.get_type_field"(%1792) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1804 = "mid.get_type_field"(%1792) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1805 = "mid.parameterization"(%1803, %1804) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairProductCollection.T_subtype_Any._ProductCollection.U_subtype_Any", ["ProductCollection.T_subtype_Any"], ["ProductCollection.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %1806 = "mid.new"(%1801, %1802, %1805) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ProductIterator", "num_data_fields" = 4 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1807 = "mid.get_field"(%1792) {"offset" = 3 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1808 = "mid.unwrap"(%1807) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1809 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1810 = "mid.method_call"(%1809, %1808) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1811 = "hi.cast"(%1810) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1812 = "mid.get_field"(%1792) {"offset" = 4 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1813 = "hi.cast"(%1811) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %1814 = "mid.unwrap"(%1813) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1815 = "hi.cast"(%1812) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Collection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %1816 = "mid.unwrap"(%1815) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1817 = "mid.unwrap"(%1806) : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1818 = "mid.get_type_field"(%1792) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1819 = "mid.parameterization"(%1818) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorProductCollection.T_subtype_Any", ["ProductCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1820 = "mid.get_type_field"(%1792) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1821 = "mid.parameterization"(%1820) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionProductCollection.U_subtype_Any", ["ProductCollection.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1822 = "mid.parameterizations_array"(%1819, %1821) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1822, %1817, %1814, %1816) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1823 = "hi.cast"(%1806) {"from_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%1823) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "ProductCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb440(%1824 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1825 : !llvm.ptr):
      %1826 = "mid.invariant"(%1825) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1827 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb441] : () -> ()
    ^bb441:
      %1828 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1828, %1827) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb442] : () -> ()
    ^bb442:
      %1829 = "llvm.extractvalue"(%1824) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1830 = "llvm.load"(%1827) : (!llvm.ptr) -> i32
      %1831 = "llvm.getelementptr"(%1829, %1830) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1832 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1833 = "llvm.getelementptr"(%1831, %1832) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1833) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb443(%1834 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1835 : !llvm.ptr):
      %1836 = "mid.invariant"(%1835) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1837 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb444] : () -> ()
    ^bb445:
      %1838 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1838, %1837) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb446] : () -> ()
    ^bb444:
      %1839 = "llvm.getelementptr"(%1835) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1840 = "mid.checkflag"(%1839) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1841 = "llvm.load"(%1840) : (!hi.bool) -> i1
      "cf.cond_br"(%1841) [^bb445, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb446:
      %1842 = "llvm.extractvalue"(%1834) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1843 = "llvm.load"(%1837) : (!llvm.ptr) -> i32
      %1844 = "llvm.getelementptr"(%1842, %1843) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1845 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1846 = "llvm.getelementptr"(%1844, %1845) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1846) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb447(%1847 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1848 : !llvm.ptr):
      %1849 = "mid.invariant"(%1848) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1850 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb448] : () -> ()
    ^bb449:
      %1851 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1851, %1850) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb450] : () -> ()
    ^bb451:
      %1852 = "llvm.getelementptr"(%1848) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1853 = "mid.checkflag"(%1852) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1854 = "llvm.load"(%1853) : (!hi.bool) -> i1
      "cf.cond_br"(%1854) [^bb449, ^bb449] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb448:
      %1855 = "llvm.getelementptr"(%1848) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1856 = "mid.checkflag"(%1855) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1857 = "llvm.load"(%1856) : (!hi.bool) -> i1
      "cf.cond_br"(%1857) [^bb451, ^bb451] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb450:
      %1858 = "llvm.extractvalue"(%1847) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1859 = "llvm.load"(%1850) : (!llvm.ptr) -> i32
      %1860 = "llvm.getelementptr"(%1858, %1859) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1861 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1862 = "llvm.getelementptr"(%1860, %1861) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1862) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb452(%1863 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1864 : !llvm.ptr):
      %1865 = "mid.invariant"(%1864) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1866 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb453] : () -> ()
    ^bb454:
      %1867 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1867, %1866) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb455] : () -> ()
    ^bb453:
      %1868 = "llvm.getelementptr"(%1864) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1869 = "mid.checkflag"(%1868) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1870 = "llvm.load"(%1869) : (!hi.bool) -> i1
      "cf.cond_br"(%1870) [^bb454, ^bb454] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb455:
      %1871 = "llvm.extractvalue"(%1863) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1872 = "llvm.load"(%1866) : (!llvm.ptr) -> i32
      %1873 = "llvm.getelementptr"(%1871, %1872) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1874 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1875 = "llvm.getelementptr"(%1873, %1874) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1875) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb456(%1876 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1877 : !llvm.ptr):
      %1878 = "mid.invariant"(%1877) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1879 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb457] : () -> ()
    ^bb458:
      %1880 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1880, %1879) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb459] : () -> ()
    ^bb457:
      %1881 = "llvm.getelementptr"(%1877) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1882 = "mid.checkflag"(%1881) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1883 = "llvm.load"(%1882) : (!hi.bool) -> i1
      "cf.cond_br"(%1883) [^bb458, ^bb458] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb459:
      %1884 = "llvm.extractvalue"(%1876) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1885 = "llvm.load"(%1879) : (!llvm.ptr) -> i32
      %1886 = "llvm.getelementptr"(%1884, %1885) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1887 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1888 = "llvm.getelementptr"(%1886, %1887) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1888) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb460(%1889 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1890 : !llvm.ptr):
      %1891 = "mid.invariant"(%1890) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1892 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb461] : () -> ()
    ^bb461:
      %1893 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1893, %1892) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb462] : () -> ()
    ^bb462:
      %1894 = "llvm.extractvalue"(%1889) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1895 = "llvm.load"(%1892) : (!llvm.ptr) -> i32
      %1896 = "llvm.getelementptr"(%1894, %1895) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1897 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1898 = "llvm.getelementptr"(%1896, %1897) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1898) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb463(%1899 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1900 : !llvm.ptr):
      %1901 = "mid.invariant"(%1900) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1902 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb464] : () -> ()
    ^bb465:
      %1903 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1903, %1902) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb466] : () -> ()
    ^bb467:
      %1904 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1904, %1902) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb466] : () -> ()
    ^bb464:
      %1905 = "llvm.getelementptr"(%1900) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1906 = "mid.checkflag"(%1905) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1907 = "llvm.load"(%1906) : (!hi.bool) -> i1
      "cf.cond_br"(%1907) [^bb465, ^bb468] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb468:
      %1908 = "llvm.getelementptr"(%1900) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1909 = "mid.checkflag"(%1908) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1910 = "llvm.load"(%1909) : (!hi.bool) -> i1
      "cf.cond_br"(%1910) [^bb467, ^bb467] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb466:
      %1911 = "llvm.extractvalue"(%1899) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1912 = "llvm.load"(%1902) : (!llvm.ptr) -> i32
      %1913 = "llvm.getelementptr"(%1911, %1912) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1914 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1915 = "llvm.getelementptr"(%1913, %1914) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1915) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb469(%1916 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1917 : !llvm.ptr):
      %1918 = "mid.invariant"(%1917) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1919 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb470] : () -> ()
    ^bb471:
      %1920 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1920, %1919) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb472] : () -> ()
    ^bb470:
      %1921 = "llvm.getelementptr"(%1917) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1922 = "mid.checkflag"(%1921) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1923 = "llvm.load"(%1922) : (!hi.bool) -> i1
      "cf.cond_br"(%1923) [^bb471, ^bb471] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb472:
      %1924 = "llvm.extractvalue"(%1916) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1925 = "llvm.load"(%1919) : (!llvm.ptr) -> i32
      %1926 = "llvm.getelementptr"(%1924, %1925) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1927 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1928 = "llvm.getelementptr"(%1926, %1927) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1928) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb473(%1929 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1930 : !llvm.ptr):
      %1931 = "mid.invariant"(%1930) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1932 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb474] : () -> ()
    ^bb475:
      %1933 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1933, %1932) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb476] : () -> ()
    ^bb477:
      %1934 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1934, %1932) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb476] : () -> ()
    ^bb474:
      %1935 = "llvm.getelementptr"(%1930) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1936 = "mid.checkflag"(%1935) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1937 = "llvm.load"(%1936) : (!hi.bool) -> i1
      "cf.cond_br"(%1937) [^bb475, ^bb478] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb478:
      %1938 = "llvm.getelementptr"(%1930) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1939 = "mid.checkflag"(%1938) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1940 = "llvm.load"(%1939) : (!hi.bool) -> i1
      "cf.cond_br"(%1940) [^bb479, ^bb477] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb479:
      %1941 = "llvm.getelementptr"(%1930) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1942 = "mid.checkflag"(%1941) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1943 = "llvm.load"(%1942) : (!hi.bool) -> i1
      "cf.cond_br"(%1943) [^bb477, ^bb477] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb476:
      %1944 = "llvm.extractvalue"(%1929) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1945 = "llvm.load"(%1932) : (!llvm.ptr) -> i32
      %1946 = "llvm.getelementptr"(%1944, %1945) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1947 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1948 = "llvm.getelementptr"(%1946, %1947) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1948) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb480(%1949 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1950 : !llvm.ptr):
      %1951 = "mid.invariant"(%1950) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1952 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb481] : () -> ()
    ^bb482:
      %1953 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1953, %1952) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb483] : () -> ()
    ^bb484:
      %1954 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1954, %1952) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb483] : () -> ()
    ^bb481:
      %1955 = "llvm.getelementptr"(%1950) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1956 = "mid.checkflag"(%1955) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1957 = "llvm.load"(%1956) : (!hi.bool) -> i1
      "cf.cond_br"(%1957) [^bb485, ^bb486] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb485:
      %1958 = "llvm.getelementptr"(%1950) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1959 = "mid.checkflag"(%1958) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1960 = "llvm.load"(%1959) : (!hi.bool) -> i1
      "cf.cond_br"(%1960) [^bb486, ^bb482] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb486:
      %1961 = "llvm.getelementptr"(%1950) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1962 = "mid.checkflag"(%1961) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1963 = "llvm.load"(%1962) : (!hi.bool) -> i1
      "cf.cond_br"(%1963) [^bb484, ^bb484] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb483:
      %1964 = "llvm.extractvalue"(%1949) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1965 = "llvm.load"(%1952) : (!llvm.ptr) -> i32
      %1966 = "llvm.getelementptr"(%1964, %1965) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1967 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1968 = "llvm.getelementptr"(%1966, %1967) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1968) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb487(%1969 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1970 : !llvm.ptr):
      %1971 = "mid.invariant"(%1970) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1972 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb488] : () -> ()
    ^bb489:
      %1973 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1973, %1972) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb490] : () -> ()
    ^bb491:
      %1974 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1974, %1972) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb490] : () -> ()
    ^bb488:
      %1975 = "llvm.getelementptr"(%1970) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1976 = "mid.checkflag"(%1975) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1977 = "llvm.load"(%1976) : (!hi.bool) -> i1
      "cf.cond_br"(%1977) [^bb489, ^bb492] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb492:
      %1978 = "llvm.getelementptr"(%1970) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1979 = "mid.checkflag"(%1978) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1980 = "llvm.load"(%1979) : (!hi.bool) -> i1
      "cf.cond_br"(%1980) [^bb493, ^bb491] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb493:
      %1981 = "llvm.getelementptr"(%1970) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1982 = "mid.checkflag"(%1981) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1983 = "llvm.load"(%1982) : (!hi.bool) -> i1
      "cf.cond_br"(%1983) [^bb491, ^bb491] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb490:
      %1984 = "llvm.extractvalue"(%1969) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1985 = "llvm.load"(%1972) : (!llvm.ptr) -> i32
      %1986 = "llvm.getelementptr"(%1984, %1985) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1987 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1988 = "llvm.getelementptr"(%1986, %1987) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1988) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb494(%1989 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1990 : !llvm.ptr):
      %1991 = "mid.invariant"(%1990) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1992 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb495] : () -> ()
    ^bb496:
      %1993 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1993, %1992) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb497] : () -> ()
    ^bb498:
      %1994 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1994, %1992) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb497] : () -> ()
    ^bb495:
      %1995 = "llvm.getelementptr"(%1990) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1996 = "mid.checkflag"(%1995) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1997 = "llvm.load"(%1996) : (!hi.bool) -> i1
      "cf.cond_br"(%1997) [^bb499, ^bb500] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb499:
      %1998 = "llvm.getelementptr"(%1990) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1999 = "mid.checkflag"(%1998) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2000 = "llvm.load"(%1999) : (!hi.bool) -> i1
      "cf.cond_br"(%2000) [^bb500, ^bb496] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb500:
      %2001 = "llvm.getelementptr"(%1990) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2002 = "mid.checkflag"(%2001) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2003 = "llvm.load"(%2002) : (!hi.bool) -> i1
      "cf.cond_br"(%2003) [^bb498, ^bb498] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb497:
      %2004 = "llvm.extractvalue"(%1989) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2005 = "llvm.load"(%1992) : (!llvm.ptr) -> i32
      %2006 = "llvm.getelementptr"(%2004, %2005) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2007 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2008 = "llvm.getelementptr"(%2006, %2007) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2008) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "core"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Representable", "methods" = [@Representable_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 12 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 11185903432579561498 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Representable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "String", "methods" = [@String_field_bytes, @String_field_length, @String_field_capacity, @String_field_String_0, @String_B__Self_from_c_string_c_stringBufferi8, @String_B_init_, @String_B_init_lengthi32_capacityi32, @String_B_init_bytesBufferi8_lengthi32_capacityi32, @String_B_length_, @String_B_capacity_, @String_B_c_string_, @String_B_append_xi8, @String_B_extend_otherString, @String_B_reserve_new_capacityi32, @String_B__EQ_otherString, @String_B_unchecked_index_xi32, @String_B_unchecked_insert_xi32_valuei8, @String_B_copy_, @String_B_size_, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherCollectionT_interleave_otherIterableT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherIterableU_product_otherCollectionU, @String_B_repr_, @String__Self_from_c_string_c_stringBufferi8, @String_init_, @String_init_lengthi32_capacityi32, @String_init_bytesBufferi8_lengthi32_capacityi32, @String_length_, @String_capacity_, @String_c_string_, @String_append_xi8, @String_extend_otherString, @String_reserve_new_capacityi32, @String__EQ_otherString, @String_unchecked_index_xi32, @String_unchecked_insert_xi32_valuei8, @String_copy_, @String_size_, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @String_repr_, @String_field_String_0, @String_B_size_, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherCollectionT_interleave_otherIterableT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherIterableU_product_otherCollectionU, @String_size_, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @String_field_String_0, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherCollectionT_interleave_otherIterableT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherIterableU_product_otherCollectionU, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_field_String_0, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherCollectionT_interleave_otherIterableT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherIterableU_product_otherCollectionU, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_B_repr_, @String_repr_], "hash_tbl" = [@String, @Representable, @Collection, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 157 : i32, 75 : i32, 10 : i32, 0 : i32, 157 : i32, 0 : i32, 0 : i32, 0 : i32, 132 : i32, 157 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427389773 : i64, "hash_id" = 6499063144389013426 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_String", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Character", "methods" = [@Character_field_byte, @Character_B_init_bytei8, @Character_B_byte_, @Character_init_bytei8, @Character_byte_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Character], "offset_tbl" = [15 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6681222582356018452 : i64, "base_typ" = !llvm.struct<(i8)>, "data_size_fn" = "_data_size_Character", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "StringIterator", "methods" = [@StringIterator_field_str, @StringIterator_field_index, @StringIterator_field_StringIterator_0, @StringIterator_B_init_strString, @StringIterator_B_next_, @StringIterator_init_strString, @StringIterator_next_, @StringIterator_field_StringIterator_0, @StringIterator_B_next_, @StringIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterator, @StringIterator, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 0 : i32, 17 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 11186173084763598986 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_StringIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Exception", "methods" = [@Exception_field_line_number, @Exception_field_file_name, @Exception_field_message, @Exception_field_stacktrace, @Exception_field_n_frames, @Exception_B_init_messageString, @Exception_B_init_, @Exception_B_set_info_line_numberi32_file_nameString, @Exception_B_print_stacktrace_, @Exception_B_report_, @Exception_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Exception], "offset_tbl" = [27 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 9027164862567808692 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "data_size_fn" = "_data_size_Exception", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "OutOfBounds", "methods" = [@OutOfBounds_field_details, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_field_stacktrace, @OutOfBounds_field_n_frames, @OutOfBounds_B_init_boundsi32_indexi32, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberi32_file_nameString, @OutOfBounds_B_print_stacktrace_, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @OutOfBounds_init_boundsi32_indexi32, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @OutOfBounds_print_message_, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_field_stacktrace, @OutOfBounds_field_n_frames, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberi32_file_nameString, @OutOfBounds_B_print_stacktrace_, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @OutOfBounds_print_message_], "hash_tbl" = [@any_typ, @Exception, @OutOfBounds, @Object], "offset_tbl" = [10 : i32, 30 : i32, 10 : i32, 47 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5348403617834207535 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "data_size_fn" = "_data_size_OutOfBounds", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "OutOfBoundsDetails", "methods" = [@OutOfBoundsDetails_field_bounds, @OutOfBoundsDetails_field_index, @OutOfBoundsDetails_B_init_boundsi32_indexi32, @OutOfBoundsDetails_B_report_, @OutOfBoundsDetails_init_boundsi32_indexi32, @OutOfBoundsDetails_report_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @OutOfBoundsDetails], "offset_tbl" = [16 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 4650630525701360429 : i64, "base_typ" = !llvm.struct<(i32, i32)>, "data_size_fn" = "_data_size_OutOfBoundsDetails", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Representable", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr):
      %3 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Representable">
      %4 = "hi.cast"(%3) {"from_typ" = !hi.fatptr<"Representable">, "to_typ" = !hi.fatptr<"Representable">, "from_typ_name" = "Representable", "to_typ_name" = "Representable"} : (!hi.fatptr<"Representable">) -> !hi.fatptr<"Representable">
      %5 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %6 = "hi.cast"(%5) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %7 = "mid.create_buffer"(%6) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %8 = "mid.refer"(%7) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %9 = "mid.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "Object"} : () -> !llvm.ptr
      %10 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%8, %10, %9) {"typ" = !llvm.array<6 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %11 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %12 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %13 = "mid.unwrap"(%8) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %14 = "mid.unwrap"(%11) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %15 = "mid.unwrap"(%12) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %16 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %17 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %18 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %19 = "hi.cast"(%8) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %20 = "mid.unwrap"(%19) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %21 = "hi.cast"(%17) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %22 = "mid.unwrap"(%21) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %23 = "hi.cast"(%18) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %24 = "mid.unwrap"(%23) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %25 = "mid.unwrap"(%16) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %26 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %27 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %28 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %29 = "mid.parameterizations_array"(%26, %27, %28) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%29, %25, %20, %22, %24) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %30 = "hi.cast"(%16) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%30) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Representable_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%31 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %32 : !llvm.ptr):
      %33 = "mid.invariant"(%32) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %34 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %35 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%35, %34) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %36 = "llvm.extractvalue"(%31) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %37 = "llvm.load"(%34) : (!llvm.ptr) -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %40 = "llvm.getelementptr"(%38, %39) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%40) : (!llvm.ptr) -> ()
    }) {"func_name" = "Representable_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_String", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_bytes", "getter_name" = "String_getter_bytes", "setter_name" = "String_setter_bytes"} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_length", "getter_name" = "String_getter_length", "setter_name" = "String_setter_length"} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_capacity", "getter_name" = "String_getter_capacity", "setter_name" = "String_setter_capacity"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "String_field_String_0", "id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> ()
    "mid.func"() ({
    ^bb4(%41 : !llvm.ptr, %42 : !llvm.struct<(!llvm.ptr)>):
      %43 = "mid.wrap"(%42) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %44 = "hi.cast"(%43) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %45 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %46 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %47 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %48 = "mid.unwrap"(%47) : (!hi.bool) -> i1
      }, {
        %49 = "hi.cast"(%46) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %50 = "mid.buffer_get"(%44, %49) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %51 = "mid.unwrap"(%50) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %52 = "mid.unwrap"(%45) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %53 = "mid.comparison"(%51, %52) {"op" = "EQ"} : (i8, i8) -> i1
        %54 = "mid.wrap"(%53) : (i1) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %55 = "mid.unwrap"(%54) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%55) ({
          "mid.break"() [^bb5] : () -> ()
        }) : (i1) -> ()
        %56 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %57 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %58 = "mid.unwrap"(%56) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %59 = "mid.arithmetic"(%57, %58) {"op" = "ADD"} : (i32, i32) -> i32
        %60 = "mid.wrap"(%59) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %61 = "hi.cast"(%60) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%46, %61) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %62 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %63 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %64 = "mid.unwrap"(%62) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %65 = "mid.arithmetic"(%63, %64) {"op" = "ADD"} : (i32, i32) -> i32
      %66 = "mid.wrap"(%65) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %67 = "mid.unwrap"(%44) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %68 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %69 = "mid.unwrap"(%66) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %70 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %71 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %72 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %73 = "mid.unwrap"(%71) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %74 = "mid.arithmetic"(%72, %73) {"op" = "ADD"} : (i32, i32) -> i32
      %75 = "mid.wrap"(%74) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %76 = "hi.cast"(%44) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %77 = "mid.unwrap"(%76) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %78 = "hi.cast"(%46) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %79 = "mid.unwrap"(%78) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %80 = "hi.cast"(%75) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %81 = "mid.unwrap"(%80) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %82 = "mid.unwrap"(%70) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %83 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %84 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %85 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %86 = "mid.parameterizations_array"(%83, %84, %85) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%86, %82, %77, %79, %81) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %87 = "hi.cast"(%70) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%87) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String__Self_from_c_string_c_stringBufferi8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%88 : !llvm.ptr):
      %89 = "mid.invariant"(%88) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %90 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb8:
      %91 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%91, %90) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb7:
      %92 = "llvm.getelementptr"(%88) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %93 = "mid.checkflag"(%92) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %94 = "llvm.load"(%93) : (!hi.bool) -> i1
      "cf.cond_br"(%94) [^bb8, ^bb8] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb9:
      %95 = "mid.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
      %96 = "llvm.load"(%90) : (!llvm.ptr) -> i32
      %97 = "llvm.getelementptr"(%95, %96) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %98 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %99 = "llvm.getelementptr"(%97, %98) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%99) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__Self_from_c_string_c_stringBufferi8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb10(%100 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %102 : !llvm.ptr):
      %103 = "mid.wrap"(%100) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %104 = "hi.cast"(%103) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %105 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %106 = "hi.cast"(%105) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %107 = "mid.create_buffer"(%106) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %108 = "hi.cast"(%107) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.set_field"(%104, %108) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
      %109 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %110 = "hi.cast"(%109) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%104, %110) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %111 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %112 = "hi.cast"(%111) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%104, %112) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb11(%113 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %114 : !llvm.ptr):
      %115 = "mid.invariant"(%114) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %116 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb12] : () -> ()
    ^bb12:
      %117 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%117, %116) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %118 = "llvm.extractvalue"(%113) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %119 = "llvm.load"(%116) : (!llvm.ptr) -> i32
      %120 = "llvm.getelementptr"(%118, %119) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %121 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %122 = "llvm.getelementptr"(%120, %121) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%122) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb14(%123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %125 : !llvm.ptr, %126 : i32, %127 : i32):
      %128 = "mid.wrap"(%123) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %129 = "hi.cast"(%128) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %130 = "mid.wrap"(%126) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %131 = "hi.cast"(%130) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %132 = "hi.cast"(%131) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%129, %132) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %133 = "mid.wrap"(%127) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %134 = "hi.cast"(%133) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %135 = "hi.cast"(%134) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%129, %135) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %136 = "mid.get_field"(%129) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %137 = "hi.cast"(%136) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %138 = "mid.create_buffer"(%137) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %139 = "hi.cast"(%138) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.set_field"(%129, %139) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
    }) {"func_name" = "String_init_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %141 : !llvm.ptr):
      %142 = "mid.invariant"(%141) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %143 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %144 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%144, %143) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb19:
      %145 = "llvm.getelementptr"(%141) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %146 = "mid.checkflag"(%145) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %147 = "llvm.load"(%146) : (!hi.bool) -> i1
      "cf.cond_br"(%147) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %148 = "llvm.getelementptr"(%141) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %149 = "mid.checkflag"(%148) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %150 = "llvm.load"(%149) : (!hi.bool) -> i1
      "cf.cond_br"(%150) [^bb19, ^bb19] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %151 = "llvm.extractvalue"(%140) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %152 = "llvm.load"(%143) : (!llvm.ptr) -> i32
      %153 = "llvm.getelementptr"(%151, %152) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %154 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %155 = "llvm.getelementptr"(%153, %154) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%155) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb20(%156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %157 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %158 : !llvm.ptr, %159 : !llvm.struct<(!llvm.ptr)>, %160 : i32, %161 : i32):
      %162 = "mid.wrap"(%156) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %163 = "hi.cast"(%162) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %164 = "mid.wrap"(%159) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %165 = "hi.cast"(%164) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %166 = "hi.cast"(%165) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.set_field"(%163, %166) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
      %167 = "mid.wrap"(%160) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %168 = "hi.cast"(%167) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %169 = "hi.cast"(%168) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%163, %169) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %170 = "mid.wrap"(%161) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %171 = "hi.cast"(%170) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %172 = "hi.cast"(%171) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%163, %172) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_init_bytesBufferi8_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb21(%173 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %174 : !llvm.ptr):
      %175 = "mid.invariant"(%174) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %176 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %177 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%177, %176) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb24] : () -> ()
    ^bb25:
      %178 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %179 = "mid.checkflag"(%178) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %180 = "llvm.load"(%179) : (!hi.bool) -> i1
      "cf.cond_br"(%180) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %181 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %182 = "mid.checkflag"(%181) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %183 = "llvm.load"(%182) : (!hi.bool) -> i1
      "cf.cond_br"(%183) [^bb25, ^bb25] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %184 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %185 = "mid.checkflag"(%184) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %186 = "llvm.load"(%185) : (!hi.bool) -> i1
      "cf.cond_br"(%186) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %187 = "llvm.extractvalue"(%173) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %188 = "llvm.load"(%176) : (!llvm.ptr) -> i32
      %189 = "llvm.getelementptr"(%187, %188) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %190 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %191 = "llvm.getelementptr"(%189, %190) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%191) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_bytesBufferi8_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %194 : !llvm.ptr):
      %195 = "mid.wrap"(%192) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %196 = "hi.cast"(%195) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %197 = "mid.get_field"(%196) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %198 = "hi.cast"(%197) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%198) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_length_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb28(%199 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %200 : !llvm.ptr):
      %201 = "mid.invariant"(%200) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %202 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      %203 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%203, %202) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb30] : () -> ()
    ^bb30:
      %204 = "llvm.extractvalue"(%199) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %205 = "llvm.load"(%202) : (!llvm.ptr) -> i32
      %206 = "llvm.getelementptr"(%204, %205) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %207 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %208 = "llvm.getelementptr"(%206, %207) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%208) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_length_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb31(%209 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %210 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %211 : !llvm.ptr):
      %212 = "mid.wrap"(%209) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %213 = "hi.cast"(%212) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %214 = "mid.get_field"(%213) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %215 = "hi.cast"(%214) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%215) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_capacity_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb32(%216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %217 : !llvm.ptr):
      %218 = "mid.invariant"(%217) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %219 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb33] : () -> ()
    ^bb33:
      %220 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%220, %219) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      %221 = "llvm.extractvalue"(%216) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %222 = "llvm.load"(%219) : (!llvm.ptr) -> i32
      %223 = "llvm.getelementptr"(%221, %222) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %224 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %225 = "llvm.getelementptr"(%223, %224) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%225) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb35(%226 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %227 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %228 : !llvm.ptr):
      %229 = "mid.wrap"(%226) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %230 = "hi.cast"(%229) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %231 = "mid.get_field"(%230) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %232 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %233 = "mid.unwrap"(%231) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %234 = "mid.unwrap"(%232) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %235 = "mid.arithmetic"(%233, %234) {"op" = "ADD"} : (i32, i32) -> i32
      %236 = "mid.wrap"(%235) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %237 = "hi.cast"(%236) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %238 = "mid.create_buffer"(%237) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %239 = "mid.refer"(%238) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %240 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %241 = "mid.get_field"(%230) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %242 = "mid.unwrap"(%240) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %243 = "mid.unwrap"(%241) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %244 = "mid.comparison"(%242, %243) {"op" = "LT"} : (i32, i32) -> i1
        %245 = "mid.wrap"(%244) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %246 = "mid.unwrap"(%245) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %247 = "mid.get_field"(%230) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %248 = "hi.cast"(%240) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %249 = "mid.buffer_get"(%247, %248) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %250 = "hi.cast"(%249) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %251 = "hi.cast"(%240) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%239, %251, %250) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
        %252 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %253 = "mid.unwrap"(%240) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %254 = "mid.unwrap"(%252) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %255 = "mid.arithmetic"(%253, %254) {"op" = "ADD"} : (i32, i32) -> i32
        %256 = "mid.wrap"(%255) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %257 = "hi.cast"(%256) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%240, %257) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %258 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %259 = "mid.get_field"(%230) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %260 = "hi.cast"(%258) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %261 = "hi.cast"(%259) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%239, %261, %260) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
      %262 = "hi.cast"(%239) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.return"(%262) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
    }) {"func_name" = "String_c_string_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb36(%263 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %264 : !llvm.ptr):
      %265 = "mid.invariant"(%264) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %266 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb37] : () -> ()
    ^bb37:
      %267 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%267, %266) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %268 = "llvm.extractvalue"(%263) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %269 = "llvm.load"(%266) : (!llvm.ptr) -> i32
      %270 = "llvm.getelementptr"(%268, %269) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %271 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %272 = "llvm.getelementptr"(%270, %271) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%272) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_c_string_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb39(%273 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %274 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %275 : !llvm.ptr, %276 : i8):
      %277 = "mid.wrap"(%273) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %278 = "hi.cast"(%277) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %279 = "mid.wrap"(%276) : (i8) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %280 = "hi.cast"(%279) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %281 = "mid.get_field"(%278) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %282 = "mid.get_field"(%278) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %283 = "mid.unwrap"(%281) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %284 = "mid.unwrap"(%282) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %285 = "mid.comparison"(%283, %284) {"op" = "GE"} : (i32, i32) -> i1
      %286 = "mid.wrap"(%285) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %287 = "mid.unwrap"(%286) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%287) ({
        %288 = "mid.get_field"(%278) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %289 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %290 = "mid.unwrap"(%288) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %291 = "mid.unwrap"(%289) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %292 = "mid.arithmetic"(%290, %291) {"op" = "MUL"} : (i32, i32) -> i32
        %293 = "mid.wrap"(%292) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %294 = "hi.cast"(%293) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %295 = "mid.unwrap"(%294) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %296 = "mid.unwrap"(%278) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %297 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %298 = "mid.parameterizations_array"(%297) : (!llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%298, %296, %295) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      }) : (i1) -> ()
      %299 = "mid.get_field"(%278) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %300 = "mid.get_field"(%278) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %301 = "hi.cast"(%280) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %302 = "hi.cast"(%299) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%300, %302, %301) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
      %303 = "mid.get_field"(%278) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %304 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %305 = "mid.unwrap"(%303) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %306 = "mid.unwrap"(%304) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %307 = "mid.arithmetic"(%305, %306) {"op" = "ADD"} : (i32, i32) -> i32
      %308 = "mid.wrap"(%307) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %309 = "hi.cast"(%308) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%278, %309) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %310 = "hi.cast"(%278) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%310) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_append_xi8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb40(%311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %312 : !llvm.ptr):
      %313 = "mid.invariant"(%312) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %314 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb41] : () -> ()
    ^bb42:
      %315 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%315, %314) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb41:
      %316 = "llvm.getelementptr"(%312) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %317 = "mid.checkflag"(%316) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %318 = "llvm.load"(%317) : (!hi.bool) -> i1
      "cf.cond_br"(%318) [^bb42, ^bb42] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb43:
      %319 = "llvm.extractvalue"(%311) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %320 = "llvm.load"(%314) : (!llvm.ptr) -> i32
      %321 = "llvm.getelementptr"(%319, %320) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %322 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %323 = "llvm.getelementptr"(%321, %322) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%323) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_append_xi8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb44(%324 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %325 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %326 : !llvm.ptr, %327 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %328 = "mid.wrap"(%324) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %329 = "hi.cast"(%328) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %330 = "mid.wrap"(%327) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %331 = "hi.cast"(%330) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %332 = "mid.unwrap"(%331) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %333 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %334 = "mid.method_call"(%333, %332) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %335 = "hi.cast"(%334) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %336 = "mid.get_field"(%329) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %337 = "mid.refer"(%336) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %338 = "mid.unwrap"(%337) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %339 = "mid.unwrap"(%335) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %340 = "mid.arithmetic"(%338, %339) {"op" = "ADD"} : (i32, i32) -> i32
      %341 = "mid.wrap"(%340) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %342 = "hi.cast"(%341) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %343 = "mid.unwrap"(%342) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %344 = "mid.unwrap"(%329) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %345 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %346 = "mid.parameterizations_array"(%345) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%346, %344, %343) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %347 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %348 = "mid.unwrap"(%347) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %349 = "mid.unwrap"(%335) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %350 = "mid.comparison"(%348, %349) {"op" = "LT"} : (i32, i32) -> i1
        %351 = "mid.wrap"(%350) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %352 = "mid.unwrap"(%351) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %353 = "mid.unwrap"(%347) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %354 = "mid.unwrap"(%337) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %355 = "mid.arithmetic"(%353, %354) {"op" = "ADD"} : (i32, i32) -> i32
        %356 = "mid.wrap"(%355) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %357 = "hi.cast"(%347) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %358 = "mid.unwrap"(%357) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %359 = "mid.unwrap"(%331) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %360 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %361 = "mid.parameterizations_array"(%360) : (!llvm.ptr) -> !llvm.ptr
        %362 = "mid.method_call"(%361, %359, %358) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %363 = "hi.cast"(%362) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %364 = "hi.cast"(%356) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %365 = "mid.unwrap"(%364) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %366 = "hi.cast"(%363) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %367 = "mid.unwrap"(%366) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %368 = "mid.unwrap"(%329) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %369 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %370 = "mid.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
        %371 = "mid.parameterizations_array"(%369, %370) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%371, %368, %365, %367) {"offset" = 16 : i32, "vptrs" = ["i32_typ", "i8_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i8) -> ()
        %372 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %373 = "mid.unwrap"(%347) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %374 = "mid.unwrap"(%372) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %375 = "mid.arithmetic"(%373, %374) {"op" = "ADD"} : (i32, i32) -> i32
        %376 = "mid.wrap"(%375) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %377 = "hi.cast"(%376) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%347, %377) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %378 = "hi.cast"(%341) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%329, %378) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %379 = "hi.cast"(%329) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%379) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_extend_otherString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb45(%380 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %381 : !llvm.ptr):
      %382 = "mid.invariant"(%381) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %383 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb46] : () -> ()
    ^bb47:
      %384 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%384, %383) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb48] : () -> ()
    ^bb46:
      %385 = "llvm.getelementptr"(%381) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %386 = "mid.checkflag"(%385) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %387 = "llvm.load"(%386) : (!hi.bool) -> i1
      "cf.cond_br"(%387) [^bb47, ^bb47] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb48:
      %388 = "llvm.extractvalue"(%380) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %389 = "llvm.load"(%383) : (!llvm.ptr) -> i32
      %390 = "llvm.getelementptr"(%388, %389) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %391 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %392 = "llvm.getelementptr"(%390, %391) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%392) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_extend_otherString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb49(%393 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %394 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %395 : !llvm.ptr, %396 : i32):
      %397 = "mid.wrap"(%393) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %398 = "hi.cast"(%397) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %399 = "mid.wrap"(%396) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %400 = "hi.cast"(%399) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %401 = "mid.get_field"(%398) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %402 = "mid.unwrap"(%400) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %403 = "mid.unwrap"(%401) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %404 = "mid.comparison"(%402, %403) {"op" = "LE"} : (i32, i32) -> i1
      %405 = "mid.wrap"(%404) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %406 = "mid.unwrap"(%405) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%406) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %407 = "hi.cast"(%400) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%398, %407) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %408 = "mid.get_field"(%398) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %409 = "mid.refer"(%408) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %410 = "mid.get_field"(%398) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %411 = "hi.cast"(%410) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %412 = "mid.create_buffer"(%411) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %413 = "hi.cast"(%412) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.set_field"(%398, %413) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
      %414 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %415 = "mid.get_field"(%398) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %416 = "mid.unwrap"(%414) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %417 = "mid.unwrap"(%415) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %418 = "mid.comparison"(%416, %417) {"op" = "LT"} : (i32, i32) -> i1
        %419 = "mid.wrap"(%418) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %420 = "mid.unwrap"(%419) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %421 = "hi.cast"(%414) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %422 = "mid.buffer_get"(%409, %421) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %423 = "mid.get_field"(%398) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %424 = "hi.cast"(%422) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %425 = "hi.cast"(%414) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%423, %425, %424) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
        %426 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %427 = "mid.unwrap"(%414) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %428 = "mid.unwrap"(%426) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %429 = "mid.arithmetic"(%427, %428) {"op" = "ADD"} : (i32, i32) -> i32
        %430 = "mid.wrap"(%429) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %431 = "hi.cast"(%430) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%414, %431) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
    }) {"func_name" = "String_reserve_new_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb50(%432 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %433 : !llvm.ptr):
      %434 = "mid.invariant"(%433) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %435 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb51] : () -> ()
    ^bb52:
      %436 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%436, %435) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb53] : () -> ()
    ^bb51:
      %437 = "llvm.getelementptr"(%433) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %438 = "mid.checkflag"(%437) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %439 = "llvm.load"(%438) : (!hi.bool) -> i1
      "cf.cond_br"(%439) [^bb52, ^bb52] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %440 = "llvm.extractvalue"(%432) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %441 = "llvm.load"(%435) : (!llvm.ptr) -> i32
      %442 = "llvm.getelementptr"(%440, %441) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %443 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %444 = "llvm.getelementptr"(%442, %443) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%444) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_reserve_new_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb54(%445 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %446 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %447 : !llvm.ptr, %448 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %449 = "mid.wrap"(%445) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %450 = "hi.cast"(%449) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %451 = "mid.wrap"(%448) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %452 = "hi.cast"(%451) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %453 = "mid.get_field"(%450) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %454 = "mid.unwrap"(%452) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %455 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %456 = "mid.method_call"(%455, %454) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %457 = "hi.cast"(%456) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %458 = "mid.unwrap"(%453) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %459 = "mid.unwrap"(%457) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %460 = "mid.comparison"(%458, %459) {"op" = "NEQ"} : (i32, i32) -> i1
      %461 = "mid.wrap"(%460) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %462 = "mid.unwrap"(%461) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%462) ({
        %463 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %464 = "hi.cast"(%463) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.return"(%464) : (!hi.bool) -> ()
      }) : (i1) -> ()
      %465 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %466 = "mid.get_field"(%450) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %467 = "mid.unwrap"(%465) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %468 = "mid.unwrap"(%466) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %469 = "mid.comparison"(%467, %468) {"op" = "LT"} : (i32, i32) -> i1
        %470 = "mid.wrap"(%469) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %471 = "mid.unwrap"(%470) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %472 = "mid.get_field"(%450) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %473 = "hi.cast"(%465) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %474 = "mid.buffer_get"(%472, %473) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %475 = "hi.cast"(%465) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %476 = "mid.unwrap"(%475) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %477 = "mid.unwrap"(%452) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %478 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %479 = "mid.parameterizations_array"(%478) : (!llvm.ptr) -> !llvm.ptr
        %480 = "mid.method_call"(%479, %477, %476) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %481 = "hi.cast"(%480) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %482 = "mid.unwrap"(%474) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %483 = "mid.unwrap"(%481) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %484 = "mid.comparison"(%482, %483) {"op" = "NEQ"} : (i8, i8) -> i1
        %485 = "mid.wrap"(%484) : (i1) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %486 = "mid.unwrap"(%485) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%486) ({
          %487 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %488 = "hi.cast"(%487) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%488) : (!hi.bool) -> ()
        }) : (i1) -> ()
        %489 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %490 = "mid.unwrap"(%465) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %491 = "mid.unwrap"(%489) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %492 = "mid.arithmetic"(%490, %491) {"op" = "ADD"} : (i32, i32) -> i32
        %493 = "mid.wrap"(%492) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %494 = "hi.cast"(%493) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%465, %494) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %495 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %496 = "hi.cast"(%495) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%496) : (!hi.bool) -> ()
    }) {"func_name" = "String__EQ_otherString", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb55(%497 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %498 : !llvm.ptr):
      %499 = "mid.invariant"(%498) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %500 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb56] : () -> ()
    ^bb57:
      %501 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%501, %500) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb58] : () -> ()
    ^bb56:
      %502 = "llvm.getelementptr"(%498) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %503 = "mid.checkflag"(%502) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %504 = "llvm.load"(%503) : (!hi.bool) -> i1
      "cf.cond_br"(%504) [^bb57, ^bb57] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb58:
      %505 = "llvm.extractvalue"(%497) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %506 = "llvm.load"(%500) : (!llvm.ptr) -> i32
      %507 = "llvm.getelementptr"(%505, %506) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %508 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %509 = "llvm.getelementptr"(%507, %508) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%509) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__EQ_otherString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb59(%510 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %511 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %512 : !llvm.ptr, %513 : i32):
      %514 = "mid.wrap"(%510) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %515 = "hi.cast"(%514) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %516 = "mid.wrap"(%513) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %517 = "hi.cast"(%516) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %518 = "mid.get_field"(%515) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %519 = "hi.cast"(%517) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %520 = "mid.buffer_get"(%518, %519) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %521 = "hi.cast"(%520) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      "mid.return"(%521) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_unchecked_index_xi32", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb60(%522 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %523 : !llvm.ptr):
      %524 = "mid.invariant"(%523) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %525 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb61] : () -> ()
    ^bb62:
      %526 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%526, %525) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb63] : () -> ()
    ^bb61:
      %527 = "llvm.getelementptr"(%523) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %528 = "mid.checkflag"(%527) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %529 = "llvm.load"(%528) : (!hi.bool) -> i1
      "cf.cond_br"(%529) [^bb62, ^bb62] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb63:
      %530 = "llvm.extractvalue"(%522) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %531 = "llvm.load"(%525) : (!llvm.ptr) -> i32
      %532 = "llvm.getelementptr"(%530, %531) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %533 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %534 = "llvm.getelementptr"(%532, %533) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%534) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_unchecked_index_xi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb64(%535 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %536 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %537 : !llvm.ptr, %538 : i32, %539 : i8):
      %540 = "mid.wrap"(%535) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %541 = "hi.cast"(%540) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %542 = "mid.wrap"(%538) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %543 = "hi.cast"(%542) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %544 = "mid.wrap"(%539) : (i8) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %545 = "hi.cast"(%544) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %546 = "mid.get_field"(%541) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %547 = "hi.cast"(%545) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %548 = "hi.cast"(%543) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%546, %548, %547) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_unchecked_insert_xi32_valuei8", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb65(%549 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %550 : !llvm.ptr):
      %551 = "mid.invariant"(%550) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %552 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb66] : () -> ()
    ^bb67:
      %553 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%553, %552) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb68] : () -> ()
    ^bb69:
      %554 = "llvm.getelementptr"(%550) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %555 = "mid.checkflag"(%554) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %556 = "llvm.load"(%555) : (!hi.bool) -> i1
      "cf.cond_br"(%556) [^bb67, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb66:
      %557 = "llvm.getelementptr"(%550) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %558 = "mid.checkflag"(%557) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %559 = "llvm.load"(%558) : (!hi.bool) -> i1
      "cf.cond_br"(%559) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %560 = "llvm.extractvalue"(%549) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %561 = "llvm.load"(%552) : (!llvm.ptr) -> i32
      %562 = "llvm.getelementptr"(%560, %561) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %563 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %564 = "llvm.getelementptr"(%562, %563) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%564) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_unchecked_insert_xi32_valuei8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb70(%565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %566 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %567 : !llvm.ptr):
      %568 = "mid.wrap"(%565) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %569 = "hi.cast"(%568) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %570 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %571 = "hi.cast"(%570) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %572 = "mid.create_buffer"(%571) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %573 = "mid.refer"(%572) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %574 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %575 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %576 = "mid.unwrap"(%574) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %577 = "mid.unwrap"(%575) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %578 = "mid.comparison"(%576, %577) {"op" = "LT"} : (i32, i32) -> i1
        %579 = "mid.wrap"(%578) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %580 = "mid.unwrap"(%579) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %581 = "mid.get_field"(%569) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %582 = "hi.cast"(%574) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %583 = "mid.buffer_get"(%581, %582) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %584 = "hi.cast"(%583) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %585 = "hi.cast"(%574) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%573, %585, %584) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
        %586 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %587 = "mid.unwrap"(%574) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %588 = "mid.unwrap"(%586) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %589 = "mid.arithmetic"(%587, %588) {"op" = "ADD"} : (i32, i32) -> i32
        %590 = "mid.wrap"(%589) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %591 = "hi.cast"(%590) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%574, %591) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %592 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %593 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %594 = "mid.unwrap"(%573) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %595 = "mid.unwrap"(%592) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %596 = "mid.unwrap"(%593) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %597 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %598 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %599 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %600 = "hi.cast"(%573) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %601 = "mid.unwrap"(%600) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %602 = "hi.cast"(%598) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %603 = "mid.unwrap"(%602) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %604 = "hi.cast"(%599) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %605 = "mid.unwrap"(%604) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %606 = "mid.unwrap"(%597) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %607 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %608 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %609 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %610 = "mid.parameterizations_array"(%607, %608, %609) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%610, %606, %601, %603, %605) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %611 = "mid.refer"(%597) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %612 = "hi.cast"(%611) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%612) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%613 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %614 : !llvm.ptr):
      %615 = "mid.invariant"(%614) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %616 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb72:
      %617 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%617, %616) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb73] : () -> ()
    ^bb73:
      %618 = "llvm.extractvalue"(%613) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %619 = "llvm.load"(%616) : (!llvm.ptr) -> i32
      %620 = "llvm.getelementptr"(%618, %619) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %621 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %622 = "llvm.getelementptr"(%620, %621) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%622) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb74(%623 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %624 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %625 : !llvm.ptr):
      %626 = "mid.wrap"(%623) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %627 = "hi.cast"(%626) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %628 = "mid.get_field"(%627) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %629 = "hi.cast"(%628) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%629) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb75(%630 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %631 : !llvm.ptr):
      %632 = "mid.invariant"(%631) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %633 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb76] : () -> ()
    ^bb76:
      %634 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%634, %633) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb77] : () -> ()
    ^bb77:
      %635 = "llvm.extractvalue"(%630) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %636 = "llvm.load"(%633) : (!llvm.ptr) -> i32
      %637 = "llvm.getelementptr"(%635, %636) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %638 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %639 = "llvm.getelementptr"(%637, %638) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%639) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb78(%640 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %641 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %642 : !llvm.ptr):
      %643 = "mid.wrap"(%640) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %644 = "hi.cast"(%643) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %645 = "mid.unwrap"(%644) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %646 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "StringIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"StringIterator">
      %647 = "hi.cast"(%644) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %648 = "mid.unwrap"(%647) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %649 = "mid.unwrap"(%646) : (!hi.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %650 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %651 = "mid.parameterizations_array"(%650) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%651, %649, %648) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %652 = "hi.cast"(%646) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "StringIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%652) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "String_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb79(%653 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %654 : !llvm.ptr):
      %655 = "mid.invariant"(%654) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %656 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb80] : () -> ()
    ^bb80:
      %657 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%657, %656) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb81] : () -> ()
    ^bb81:
      %658 = "llvm.extractvalue"(%653) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %659 = "llvm.load"(%656) : (!llvm.ptr) -> i32
      %660 = "llvm.getelementptr"(%658, %659) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %661 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %662 = "llvm.getelementptr"(%660, %661) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%662) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb82(%663 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %664 : !llvm.ptr):
      %665 = "mid.invariant"(%664) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %666 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb83] : () -> ()
    ^bb84:
      %667 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%667, %666) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb85] : () -> ()
    ^bb83:
      %668 = "llvm.getelementptr"(%664) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %669 = "mid.checkflag"(%668) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %670 = "llvm.load"(%669) : (!hi.bool) -> i1
      "cf.cond_br"(%670) [^bb84, ^bb84] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb85:
      %671 = "llvm.extractvalue"(%663) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %672 = "llvm.load"(%666) : (!llvm.ptr) -> i32
      %673 = "llvm.getelementptr"(%671, %672) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %674 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %675 = "llvm.getelementptr"(%673, %674) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%675) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb86(%676 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %677 : !llvm.ptr):
      %678 = "mid.invariant"(%677) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %679 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb87] : () -> ()
    ^bb88:
      %680 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%680, %679) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb89] : () -> ()
    ^bb90:
      %681 = "llvm.getelementptr"(%677) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %682 = "mid.checkflag"(%681) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %683 = "llvm.load"(%682) : (!hi.bool) -> i1
      "cf.cond_br"(%683) [^bb88, ^bb88] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %684 = "llvm.getelementptr"(%677) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %685 = "mid.checkflag"(%684) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %686 = "llvm.load"(%685) : (!hi.bool) -> i1
      "cf.cond_br"(%686) [^bb90, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb89:
      %687 = "llvm.extractvalue"(%676) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %688 = "llvm.load"(%679) : (!llvm.ptr) -> i32
      %689 = "llvm.getelementptr"(%687, %688) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %690 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %691 = "llvm.getelementptr"(%689, %690) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%691) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb91(%692 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %693 : !llvm.ptr):
      %694 = "mid.invariant"(%693) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %695 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb92] : () -> ()
    ^bb93:
      %696 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%696, %695) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb94] : () -> ()
    ^bb92:
      %697 = "llvm.getelementptr"(%693) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %698 = "mid.checkflag"(%697) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %699 = "llvm.load"(%698) : (!hi.bool) -> i1
      "cf.cond_br"(%699) [^bb93, ^bb93] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb94:
      %700 = "llvm.extractvalue"(%692) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %701 = "llvm.load"(%695) : (!llvm.ptr) -> i32
      %702 = "llvm.getelementptr"(%700, %701) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %703 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %704 = "llvm.getelementptr"(%702, %703) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%704) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb95(%705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %706 : !llvm.ptr):
      %707 = "mid.invariant"(%706) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %708 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb96] : () -> ()
    ^bb97:
      %709 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%709, %708) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb98] : () -> ()
    ^bb96:
      %710 = "llvm.getelementptr"(%706) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %711 = "mid.checkflag"(%710) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %712 = "llvm.load"(%711) : (!hi.bool) -> i1
      "cf.cond_br"(%712) [^bb97, ^bb97] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb98:
      %713 = "llvm.extractvalue"(%705) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %714 = "llvm.load"(%708) : (!llvm.ptr) -> i32
      %715 = "llvm.getelementptr"(%713, %714) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %716 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %717 = "llvm.getelementptr"(%715, %716) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%717) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb99(%718 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %719 : !llvm.ptr):
      %720 = "mid.invariant"(%719) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %721 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb100] : () -> ()
    ^bb100:
      %722 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%722, %721) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb101] : () -> ()
    ^bb101:
      %723 = "llvm.extractvalue"(%718) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %724 = "llvm.load"(%721) : (!llvm.ptr) -> i32
      %725 = "llvm.getelementptr"(%723, %724) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %726 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %727 = "llvm.getelementptr"(%725, %726) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%727) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, i64)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, i64)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb102(%728 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %729 : !llvm.ptr):
      %730 = "mid.invariant"(%729) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %731 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb103] : () -> ()
    ^bb104:
      %732 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
      "llvm.store"(%732, %731) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb105] : () -> ()
    ^bb106:
      %733 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%733, %731) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb105] : () -> ()
    ^bb103:
      %734 = "llvm.getelementptr"(%729) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %735 = "mid.checkflag"(%734) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %736 = "llvm.load"(%735) : (!hi.bool) -> i1
      "cf.cond_br"(%736) [^bb104, ^bb107] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb107:
      %737 = "llvm.getelementptr"(%729) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %738 = "mid.checkflag"(%737) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %739 = "llvm.load"(%738) : (!hi.bool) -> i1
      "cf.cond_br"(%739) [^bb106, ^bb106] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb105:
      %740 = "llvm.extractvalue"(%728) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %741 = "llvm.load"(%731) : (!llvm.ptr) -> i32
      %742 = "llvm.getelementptr"(%740, %741) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %743 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %744 = "llvm.getelementptr"(%742, %743) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%744) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb108(%745 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %746 : !llvm.ptr):
      %747 = "mid.invariant"(%746) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %748 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb109] : () -> ()
    ^bb110:
      %749 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
      "llvm.store"(%749, %748) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb111] : () -> ()
    ^bb109:
      %750 = "llvm.getelementptr"(%746) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %751 = "mid.checkflag"(%750) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %752 = "llvm.load"(%751) : (!hi.bool) -> i1
      "cf.cond_br"(%752) [^bb110, ^bb110] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb111:
      %753 = "llvm.extractvalue"(%745) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %754 = "llvm.load"(%748) : (!llvm.ptr) -> i32
      %755 = "llvm.getelementptr"(%753, %754) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %756 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %757 = "llvm.getelementptr"(%755, %756) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%757) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb112(%758 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %759 : !llvm.ptr):
      %760 = "mid.invariant"(%759) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %761 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %762 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
      "llvm.store"(%762, %761) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb115] : () -> ()
    ^bb116:
      %763 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
      "llvm.store"(%763, %761) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb115] : () -> ()
    ^bb113:
      %764 = "llvm.getelementptr"(%759) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %765 = "mid.checkflag"(%764) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %766 = "llvm.load"(%765) : (!hi.bool) -> i1
      "cf.cond_br"(%766) [^bb117, ^bb118] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb117:
      %767 = "llvm.getelementptr"(%759) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %768 = "mid.checkflag"(%767) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %769 = "llvm.load"(%768) : (!hi.bool) -> i1
      "cf.cond_br"(%769) [^bb118, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb118:
      %770 = "llvm.getelementptr"(%759) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %771 = "mid.checkflag"(%770) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %772 = "llvm.load"(%771) : (!hi.bool) -> i1
      "cf.cond_br"(%772) [^bb116, ^bb116] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb115:
      %773 = "llvm.extractvalue"(%758) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %774 = "llvm.load"(%761) : (!llvm.ptr) -> i32
      %775 = "llvm.getelementptr"(%773, %774) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %776 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %777 = "llvm.getelementptr"(%775, %776) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%777) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb119(%778 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %779 : !llvm.ptr):
      %780 = "mid.invariant"(%779) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %781 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb120] : () -> ()
    ^bb121:
      %782 = "llvm.mlir.constant"() <{"value" = 58 : i32}> : () -> i32
      "llvm.store"(%782, %781) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb122] : () -> ()
    ^bb123:
      %783 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%783, %781) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb122] : () -> ()
    ^bb120:
      %784 = "llvm.getelementptr"(%779) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %785 = "mid.checkflag"(%784) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %786 = "llvm.load"(%785) : (!hi.bool) -> i1
      "cf.cond_br"(%786) [^bb121, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb124:
      %787 = "llvm.getelementptr"(%779) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %788 = "mid.checkflag"(%787) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %789 = "llvm.load"(%788) : (!hi.bool) -> i1
      "cf.cond_br"(%789) [^bb125, ^bb123] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb125:
      %790 = "llvm.getelementptr"(%779) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %791 = "mid.checkflag"(%790) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %792 = "llvm.load"(%791) : (!hi.bool) -> i1
      "cf.cond_br"(%792) [^bb123, ^bb123] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb122:
      %793 = "llvm.extractvalue"(%778) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %794 = "llvm.load"(%781) : (!llvm.ptr) -> i32
      %795 = "llvm.getelementptr"(%793, %794) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %796 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %797 = "llvm.getelementptr"(%795, %796) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%797) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb126(%798 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %799 : !llvm.ptr):
      %800 = "mid.invariant"(%799) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %801 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb127] : () -> ()
    ^bb128:
      %802 = "llvm.mlir.constant"() <{"value" = 60 : i32}> : () -> i32
      "llvm.store"(%802, %801) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb129] : () -> ()
    ^bb130:
      %803 = "llvm.mlir.constant"() <{"value" = 61 : i32}> : () -> i32
      "llvm.store"(%803, %801) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb129] : () -> ()
    ^bb127:
      %804 = "llvm.getelementptr"(%799) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %805 = "mid.checkflag"(%804) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %806 = "llvm.load"(%805) : (!hi.bool) -> i1
      "cf.cond_br"(%806) [^bb131, ^bb132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb131:
      %807 = "llvm.getelementptr"(%799) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %808 = "mid.checkflag"(%807) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %809 = "llvm.load"(%808) : (!hi.bool) -> i1
      "cf.cond_br"(%809) [^bb132, ^bb128] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb132:
      %810 = "llvm.getelementptr"(%799) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %811 = "mid.checkflag"(%810) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %812 = "llvm.load"(%811) : (!hi.bool) -> i1
      "cf.cond_br"(%812) [^bb130, ^bb130] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb129:
      %813 = "llvm.extractvalue"(%798) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %814 = "llvm.load"(%801) : (!llvm.ptr) -> i32
      %815 = "llvm.getelementptr"(%813, %814) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %816 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %817 = "llvm.getelementptr"(%815, %816) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%817) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb133(%818 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %819 : !llvm.ptr):
      %820 = "mid.invariant"(%819) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %821 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb134] : () -> ()
    ^bb135:
      %822 = "llvm.mlir.constant"() <{"value" = 63 : i32}> : () -> i32
      "llvm.store"(%822, %821) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb136] : () -> ()
    ^bb137:
      %823 = "llvm.mlir.constant"() <{"value" = 62 : i32}> : () -> i32
      "llvm.store"(%823, %821) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb136] : () -> ()
    ^bb134:
      %824 = "llvm.getelementptr"(%819) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %825 = "mid.checkflag"(%824) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %826 = "llvm.load"(%825) : (!hi.bool) -> i1
      "cf.cond_br"(%826) [^bb135, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb138:
      %827 = "llvm.getelementptr"(%819) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %828 = "mid.checkflag"(%827) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %829 = "llvm.load"(%828) : (!hi.bool) -> i1
      "cf.cond_br"(%829) [^bb139, ^bb137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %830 = "llvm.getelementptr"(%819) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %831 = "mid.checkflag"(%830) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %832 = "llvm.load"(%831) : (!hi.bool) -> i1
      "cf.cond_br"(%832) [^bb137, ^bb137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb136:
      %833 = "llvm.extractvalue"(%818) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %834 = "llvm.load"(%821) : (!llvm.ptr) -> i32
      %835 = "llvm.getelementptr"(%833, %834) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %836 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %837 = "llvm.getelementptr"(%835, %836) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%837) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb140(%838 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %839 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %840 : !llvm.ptr):
      %841 = "mid.wrap"(%838) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %842 = "hi.cast"(%841) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %843 = "hi.cast"(%842) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%843) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb141(%844 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %845 : !llvm.ptr):
      %846 = "mid.invariant"(%845) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %847 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb142] : () -> ()
    ^bb142:
      %848 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%848, %847) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb143] : () -> ()
    ^bb143:
      %849 = "llvm.extractvalue"(%844) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %850 = "llvm.load"(%847) : (!llvm.ptr) -> i32
      %851 = "llvm.getelementptr"(%849, %850) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %852 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %853 = "llvm.getelementptr"(%851, %852) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%853) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Character", "types" = [i8]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Character_getter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_i8"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Character_setter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_i8"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Character_field_byte", "getter_name" = "Character_getter_byte", "setter_name" = "Character_setter_byte"} : () -> ()
    "mid.func"() ({
    ^bb144(%854 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %856 : !llvm.ptr, %857 : i8):
      %858 = "mid.wrap"(%854) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %859 = "hi.cast"(%858) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %860 = "mid.wrap"(%857) : (i8) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %861 = "hi.cast"(%860) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %862 = "hi.cast"(%861) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      "mid.set_field"(%859, %862) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!hi.fatptr<"Character">, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Character_init_bytei8", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb145(%863 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %864 : !llvm.ptr):
      %865 = "mid.invariant"(%864) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %866 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb146] : () -> ()
    ^bb147:
      %867 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%867, %866) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb148] : () -> ()
    ^bb146:
      %868 = "llvm.getelementptr"(%864) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %869 = "mid.checkflag"(%868) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %870 = "llvm.load"(%869) : (!hi.bool) -> i1
      "cf.cond_br"(%870) [^bb147, ^bb147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb148:
      %871 = "llvm.extractvalue"(%863) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %872 = "llvm.load"(%866) : (!llvm.ptr) -> i32
      %873 = "llvm.getelementptr"(%871, %872) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %874 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %875 = "llvm.getelementptr"(%873, %874) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%875) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B_init_bytei8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb149(%876 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %877 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %878 : !llvm.ptr):
      %879 = "mid.wrap"(%876) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %880 = "hi.cast"(%879) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %881 = "mid.get_field"(%880) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!hi.fatptr<"Character">) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %882 = "hi.cast"(%881) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      "mid.return"(%882) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Character_byte_", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb150(%883 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %884 : !llvm.ptr):
      %885 = "mid.invariant"(%884) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %886 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb151] : () -> ()
    ^bb151:
      %887 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%887, %886) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb152] : () -> ()
    ^bb152:
      %888 = "llvm.extractvalue"(%883) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %889 = "llvm.load"(%886) : (!llvm.ptr) -> i32
      %890 = "llvm.getelementptr"(%888, %889) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %891 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %892 = "llvm.getelementptr"(%890, %891) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%892) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B_byte_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_StringIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "StringIterator_getter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "StringIterator_setter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "StringIterator_field_str", "getter_name" = "StringIterator_getter_str", "setter_name" = "StringIterator_setter_str"} : () -> ()
    "mid.getter_def"() {"meth_name" = "StringIterator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "StringIterator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "StringIterator_field_index", "getter_name" = "StringIterator_getter_index", "setter_name" = "StringIterator_setter_index"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "StringIterator_field_StringIterator_0", "id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> ()
    "mid.func"() ({
    ^bb153(%893 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %895 : !llvm.ptr, %896 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %897 = "mid.wrap"(%893) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"StringIterator">
      %898 = "hi.cast"(%897) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"StringIterator">
      %899 = "mid.wrap"(%896) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %900 = "hi.cast"(%899) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %901 = "hi.cast"(%900) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%898, %901) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"StringIterator">, !hi.fatptr<"String">) -> ()
      %902 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %903 = "hi.cast"(%902) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%898, %903) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "StringIterator_init_strString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb154(%904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %905 : !llvm.ptr):
      %906 = "mid.invariant"(%905) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %907 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb155] : () -> ()
    ^bb156:
      %908 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%908, %907) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb157] : () -> ()
    ^bb155:
      %909 = "llvm.getelementptr"(%905) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %910 = "mid.checkflag"(%909) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %911 = "llvm.load"(%910) : (!hi.bool) -> i1
      "cf.cond_br"(%911) [^bb156, ^bb156] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb157:
      %912 = "llvm.extractvalue"(%904) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %913 = "llvm.load"(%907) : (!llvm.ptr) -> i32
      %914 = "llvm.getelementptr"(%912, %913) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %915 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %916 = "llvm.getelementptr"(%914, %915) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%916) : (!llvm.ptr) -> ()
    }) {"func_name" = "StringIterator_B_init_strString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb158(%917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %918 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %919 : !llvm.ptr):
      %920 = "mid.wrap"(%917) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"StringIterator">
      %921 = "hi.cast"(%920) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"StringIterator">
      %922 = "mid.get_field"(%921) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %923 = "mid.get_field"(%921) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"String">
      %924 = "mid.unwrap"(%923) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %925 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %926 = "mid.method_call"(%925, %924) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %927 = "hi.cast"(%926) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %928 = "mid.unwrap"(%922) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %929 = "mid.unwrap"(%927) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %930 = "mid.comparison"(%928, %929) {"op" = "GE"} : (i32, i32) -> i1
      %931 = "mid.wrap"(%930) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %932 = "mid.unwrap"(%931) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%932) ({
        %933 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %934 = "hi.cast"(%933) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        "mid.return"(%934) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %935 = "mid.get_field"(%921) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %936 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %937 = "mid.unwrap"(%935) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %938 = "mid.unwrap"(%936) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %939 = "mid.arithmetic"(%937, %938) {"op" = "ADD"} : (i32, i32) -> i32
      %940 = "mid.wrap"(%939) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %941 = "hi.cast"(%940) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%921, %941) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %942 = "mid.get_field"(%921) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %943 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %944 = "mid.unwrap"(%942) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %945 = "mid.unwrap"(%943) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %946 = "mid.arithmetic"(%944, %945) {"op" = "SUB"} : (i32, i32) -> i32
      %947 = "mid.wrap"(%946) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %948 = "hi.cast"(%947) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %949 = "mid.unwrap"(%948) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %950 = "mid.get_field"(%921) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"String">
      %951 = "mid.unwrap"(%950) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %952 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %953 = "mid.parameterizations_array"(%952) : (!llvm.ptr) -> !llvm.ptr
      %954 = "mid.method_call"(%953, %951, %949) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %955 = "hi.cast"(%954) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %956 = "mid.unwrap"(%955) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
      %957 = "mid.new"() {"typ" = !llvm.struct<(i8)>, "class_name" = "Character", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Character">
      %958 = "mid.get_field"(%921) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %959 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %960 = "mid.unwrap"(%958) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %961 = "mid.unwrap"(%959) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %962 = "mid.arithmetic"(%960, %961) {"op" = "SUB"} : (i32, i32) -> i32
      %963 = "mid.wrap"(%962) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %964 = "hi.cast"(%963) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %965 = "mid.unwrap"(%964) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %966 = "mid.get_field"(%921) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"String">
      %967 = "mid.unwrap"(%966) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %968 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %969 = "mid.parameterizations_array"(%968) : (!llvm.ptr) -> !llvm.ptr
      %970 = "mid.method_call"(%969, %967, %965) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %971 = "hi.cast"(%970) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %972 = "hi.cast"(%971) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %973 = "mid.unwrap"(%972) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
      %974 = "mid.unwrap"(%957) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %975 = "mid.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
      %976 = "mid.parameterizations_array"(%975) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%976, %974, %973) {"offset" = 1 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> ()
      %977 = "hi.cast"(%957) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Character", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Character">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%977) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "StringIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb159(%978 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %979 : !llvm.ptr):
      %980 = "mid.invariant"(%979) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %981 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb160] : () -> ()
    ^bb160:
      %982 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%982, %981) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb161] : () -> ()
    ^bb161:
      %983 = "llvm.extractvalue"(%978) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %984 = "llvm.load"(%981) : (!llvm.ptr) -> i32
      %985 = "llvm.getelementptr"(%983, %984) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %986 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %987 = "llvm.getelementptr"(%985, %986) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%987) : (!llvm.ptr) -> ()
    }) {"func_name" = "StringIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Exception", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_line_number", "getter_name" = "Exception_getter_line_number", "setter_name" = "Exception_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_file_name", "getter_name" = "Exception_getter_file_name", "setter_name" = "Exception_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_message", "getter_name" = "Exception_getter_message", "setter_name" = "Exception_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_stacktrace", "getter_name" = "Exception_getter_stacktrace", "setter_name" = "Exception_setter_stacktrace"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_n_frames", "getter_name" = "Exception_getter_n_frames", "setter_name" = "Exception_setter_n_frames"} : () -> ()
    "mid.func"() ({
    ^bb162(%988 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %989 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %990 : !llvm.ptr, %991 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %992 = "mid.wrap"(%988) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %993 = "hi.cast"(%992) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %994 = "mid.wrap"(%991) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %995 = "hi.cast"(%994) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %996 = "hi.cast"(%995) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%993, %996) {"offset" = 2 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %997 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %998 = "hi.cast"(%997) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%993, %998) {"offset" = 0 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %999 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1000 = "hi.cast"(%999) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1001 = "mid.create_buffer"(%1000) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1002 = "mid.refer"(%1001) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1003 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %1004 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1002, %1004, %1003) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1005 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1006 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1007 = "mid.unwrap"(%1002) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1008 = "mid.unwrap"(%1005) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1009 = "mid.unwrap"(%1006) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1010 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1011 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1012 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1013 = "hi.cast"(%1002) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1014 = "mid.unwrap"(%1013) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1015 = "hi.cast"(%1011) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1016 = "mid.unwrap"(%1015) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1017 = "hi.cast"(%1012) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1018 = "mid.unwrap"(%1017) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1019 = "mid.unwrap"(%1010) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1020 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1021 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1022 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1023 = "mid.parameterizations_array"(%1020, %1021, %1022) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1023, %1019, %1014, %1016, %1018) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1024 = "hi.cast"(%1010) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%993, %1024) {"offset" = 1 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %1025 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1026 = "hi.cast"(%1025) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1027 = "mid.create_buffer"(%1026) {"typ" = i64, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1028 = "hi.cast"(%1027) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      "mid.set_field"(%993, %1028) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">, !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> ()
      %1029 = "mid.literal"() {"value" = 100 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1030 = "mid.get_field"(%993) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      %1031 = "mid.unwrap"(%1029) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1032 = "mid.unwrap"(%1030) : (!hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1033 = "mid.call"(%1031, %1032) {"func_name" = "capture_backtrace", "ret_type" = i64} : (i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1034 = "hi.cast"(%1033) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.set_field"(%993, %1034) {"offset" = 4 : i64, "vtable_bytes" = 136 : i32, "original_type" = i64} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Exception_init_messageString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb163(%1035 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1036 : !llvm.ptr):
      %1037 = "mid.invariant"(%1036) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1038 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb164] : () -> ()
    ^bb165:
      %1039 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%1039, %1038) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb166] : () -> ()
    ^bb164:
      %1040 = "llvm.getelementptr"(%1036) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1041 = "mid.checkflag"(%1040) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1042 = "llvm.load"(%1041) : (!hi.bool) -> i1
      "cf.cond_br"(%1042) [^bb165, ^bb165] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb166:
      %1043 = "llvm.extractvalue"(%1035) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1044 = "llvm.load"(%1038) : (!llvm.ptr) -> i32
      %1045 = "llvm.getelementptr"(%1043, %1044) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1046 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1047 = "llvm.getelementptr"(%1045, %1046) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1047) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb167(%1048 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1049 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1050 : !llvm.ptr):
      %1051 = "mid.wrap"(%1048) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1052 = "hi.cast"(%1051) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1053 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1054 = "hi.cast"(%1053) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1052, %1054) {"offset" = 0 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1055 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1056 = "hi.cast"(%1055) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1057 = "mid.create_buffer"(%1056) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1058 = "mid.refer"(%1057) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1059 = "mid.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "<None>"} : () -> !llvm.ptr
      %1060 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1058, %1060, %1059) {"typ" = !llvm.array<6 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1061 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1062 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1063 = "mid.unwrap"(%1058) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1064 = "mid.unwrap"(%1061) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1065 = "mid.unwrap"(%1062) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1066 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1067 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1068 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1069 = "hi.cast"(%1058) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1070 = "mid.unwrap"(%1069) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1071 = "hi.cast"(%1067) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1072 = "mid.unwrap"(%1071) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1073 = "hi.cast"(%1068) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1074 = "mid.unwrap"(%1073) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1075 = "mid.unwrap"(%1066) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1076 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1077 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1078 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1079 = "mid.parameterizations_array"(%1076, %1077, %1078) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1079, %1075, %1070, %1072, %1074) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1080 = "hi.cast"(%1066) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1052, %1080) {"offset" = 2 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %1081 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1082 = "hi.cast"(%1081) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1083 = "mid.create_buffer"(%1082) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1084 = "mid.refer"(%1083) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1085 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %1086 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1084, %1086, %1085) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1087 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1088 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1089 = "mid.unwrap"(%1084) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1090 = "mid.unwrap"(%1087) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1091 = "mid.unwrap"(%1088) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1092 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1093 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1094 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1095 = "hi.cast"(%1084) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1096 = "mid.unwrap"(%1095) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1097 = "hi.cast"(%1093) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1098 = "mid.unwrap"(%1097) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1099 = "hi.cast"(%1094) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1100 = "mid.unwrap"(%1099) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1101 = "mid.unwrap"(%1092) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1102 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1103 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1104 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1105 = "mid.parameterizations_array"(%1102, %1103, %1104) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1105, %1101, %1096, %1098, %1100) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1106 = "hi.cast"(%1092) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1052, %1106) {"offset" = 1 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %1107 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1108 = "hi.cast"(%1107) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1109 = "mid.create_buffer"(%1108) {"typ" = i64, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1110 = "hi.cast"(%1109) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      "mid.set_field"(%1052, %1110) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">, !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> ()
      %1111 = "mid.literal"() {"value" = 100 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1112 = "mid.get_field"(%1052) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      %1113 = "mid.unwrap"(%1111) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1114 = "mid.unwrap"(%1112) : (!hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1115 = "mid.call"(%1113, %1114) {"func_name" = "capture_backtrace", "ret_type" = i64} : (i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1116 = "hi.cast"(%1115) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.set_field"(%1052, %1116) {"offset" = 4 : i64, "vtable_bytes" = 136 : i32, "original_type" = i64} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Exception_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb168(%1117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1118 : !llvm.ptr):
      %1119 = "mid.invariant"(%1118) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1120 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb169] : () -> ()
    ^bb169:
      %1121 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%1121, %1120) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb170] : () -> ()
    ^bb170:
      %1122 = "llvm.extractvalue"(%1117) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1123 = "llvm.load"(%1120) : (!llvm.ptr) -> i32
      %1124 = "llvm.getelementptr"(%1122, %1123) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1125 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1126 = "llvm.getelementptr"(%1124, %1125) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1126) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb171(%1127 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1128 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1129 : !llvm.ptr, %1130 : i32, %1131 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1132 = "mid.wrap"(%1127) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1133 = "hi.cast"(%1132) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1134 = "mid.wrap"(%1130) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1135 = "hi.cast"(%1134) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1136 = "hi.cast"(%1135) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1133, %1136) {"offset" = 0 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1137 = "mid.wrap"(%1131) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1138 = "hi.cast"(%1137) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1139 = "hi.cast"(%1138) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1133, %1139) {"offset" = 1 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
    }) {"func_name" = "Exception_set_info_line_numberi32_file_nameString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb172(%1140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1141 : !llvm.ptr):
      %1142 = "mid.invariant"(%1141) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1143 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb173] : () -> ()
    ^bb174:
      %1144 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%1144, %1143) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb175] : () -> ()
    ^bb176:
      %1145 = "llvm.getelementptr"(%1141) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1146 = "mid.checkflag"(%1145) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1147 = "llvm.load"(%1146) : (!hi.bool) -> i1
      "cf.cond_br"(%1147) [^bb174, ^bb174] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb173:
      %1148 = "llvm.getelementptr"(%1141) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1149 = "mid.checkflag"(%1148) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1150 = "llvm.load"(%1149) : (!hi.bool) -> i1
      "cf.cond_br"(%1150) [^bb176, ^bb176] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb175:
      %1151 = "llvm.extractvalue"(%1140) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1152 = "llvm.load"(%1143) : (!llvm.ptr) -> i32
      %1153 = "llvm.getelementptr"(%1151, %1152) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1154 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1155 = "llvm.getelementptr"(%1153, %1154) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1155) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb177(%1156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1157 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1158 : !llvm.ptr):
      %1159 = "mid.wrap"(%1156) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1160 = "hi.cast"(%1159) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1161 = "mid.get_field"(%1160) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      %1162 = "mid.get_field"(%1160) {"offset" = 4 : i64, "vtable_bytes" = 136 : i32, "original_type" = i64} : (!hi.fatptr<"Exception">) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1163 = "mid.unwrap"(%1161) : (!hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1164 = "mid.unwrap"(%1162) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      "mid.call"(%1163, %1164) {"func_name" = "print_backtrace", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr)>, i64) -> ()
    }) {"func_name" = "Exception_print_stacktrace_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb178(%1165 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1166 : !llvm.ptr):
      %1167 = "mid.invariant"(%1166) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1168 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb179] : () -> ()
    ^bb179:
      %1169 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%1169, %1168) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb180] : () -> ()
    ^bb180:
      %1170 = "llvm.extractvalue"(%1165) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1171 = "llvm.load"(%1168) : (!llvm.ptr) -> i32
      %1172 = "llvm.getelementptr"(%1170, %1171) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1173 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1174 = "llvm.getelementptr"(%1172, %1173) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1174) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_print_stacktrace_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb181(%1175 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1176 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1177 : !llvm.ptr):
      %1178 = "mid.wrap"(%1175) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1179 = "hi.cast"(%1178) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1180 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1181 = "hi.cast"(%1180) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1182 = "mid.create_buffer"(%1181) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1183 = "mid.refer"(%1182) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1184 = "mid.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
      %1185 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1183, %1185, %1184) {"typ" = !llvm.array<9 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1186 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1187 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1188 = "mid.unwrap"(%1183) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1189 = "mid.unwrap"(%1186) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1190 = "mid.unwrap"(%1187) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1191 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1192 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1193 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1194 = "hi.cast"(%1183) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1195 = "mid.unwrap"(%1194) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1196 = "hi.cast"(%1192) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1197 = "mid.unwrap"(%1196) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1198 = "hi.cast"(%1193) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1199 = "mid.unwrap"(%1198) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1200 = "mid.unwrap"(%1191) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1201 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1202 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1203 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1204 = "mid.parameterizations_array"(%1201, %1202, %1203) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1204, %1200, %1195, %1197, %1199) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1205 = "mid.unwrap"(%1191) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1206 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1207 = "mid.method_call"(%1206, %1205) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1208 = "hi.cast"(%1207) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1209 = "mid.print"(%1208) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1210 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1211 = "hi.cast"(%1210) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1212 = "mid.create_buffer"(%1211) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1213 = "mid.refer"(%1212) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1214 = "mid.literal"() {"typ" = !llvm.array<26 x i8>, "value" = "Exception thrown from file"} : () -> !llvm.ptr
      %1215 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1213, %1215, %1214) {"typ" = !llvm.array<26 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1216 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1217 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1218 = "mid.unwrap"(%1213) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1219 = "mid.unwrap"(%1216) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1220 = "mid.unwrap"(%1217) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1221 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1222 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1223 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1224 = "hi.cast"(%1213) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1225 = "mid.unwrap"(%1224) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1226 = "hi.cast"(%1222) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1227 = "mid.unwrap"(%1226) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1228 = "hi.cast"(%1223) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1229 = "mid.unwrap"(%1228) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1230 = "mid.unwrap"(%1221) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1231 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1232 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1233 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1234 = "mid.parameterizations_array"(%1231, %1232, %1233) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1234, %1230, %1225, %1227, %1229) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1235 = "mid.unwrap"(%1221) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1236 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1237 = "mid.method_call"(%1236, %1235) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1238 = "hi.cast"(%1237) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1239 = "mid.print"(%1238) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1240 = "mid.get_field"(%1179) {"offset" = 1 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"String">
      %1241 = "mid.unwrap"(%1240) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1242 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1243 = "mid.method_call"(%1242, %1241) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1244 = "hi.cast"(%1243) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1245 = "mid.print"(%1244) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1246 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1247 = "hi.cast"(%1246) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1248 = "mid.create_buffer"(%1247) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1249 = "mid.refer"(%1248) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1250 = "mid.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "At line"} : () -> !llvm.ptr
      %1251 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1249, %1251, %1250) {"typ" = !llvm.array<7 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1252 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1253 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1254 = "mid.unwrap"(%1249) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1255 = "mid.unwrap"(%1252) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1256 = "mid.unwrap"(%1253) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1257 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1258 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1259 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1260 = "hi.cast"(%1249) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1261 = "mid.unwrap"(%1260) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1262 = "hi.cast"(%1258) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1263 = "mid.unwrap"(%1262) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1264 = "hi.cast"(%1259) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1265 = "mid.unwrap"(%1264) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1266 = "mid.unwrap"(%1257) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1267 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1268 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1269 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1270 = "mid.parameterizations_array"(%1267, %1268, %1269) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1270, %1266, %1261, %1263, %1265) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1271 = "mid.unwrap"(%1257) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1272 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1273 = "mid.method_call"(%1272, %1271) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1274 = "hi.cast"(%1273) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1275 = "mid.print"(%1274) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1276 = "mid.get_field"(%1179) {"offset" = 0 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1277 = "mid.print"(%1276) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1278 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1279 = "hi.cast"(%1278) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1280 = "mid.create_buffer"(%1279) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1281 = "mid.refer"(%1280) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1282 = "mid.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "With message"} : () -> !llvm.ptr
      %1283 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1281, %1283, %1282) {"typ" = !llvm.array<12 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1284 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1285 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1286 = "mid.unwrap"(%1281) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1287 = "mid.unwrap"(%1284) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1288 = "mid.unwrap"(%1285) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1289 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1290 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1291 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1292 = "hi.cast"(%1281) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1293 = "mid.unwrap"(%1292) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1294 = "hi.cast"(%1290) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1295 = "mid.unwrap"(%1294) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1296 = "hi.cast"(%1291) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1297 = "mid.unwrap"(%1296) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1298 = "mid.unwrap"(%1289) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1299 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1300 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1301 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1302 = "mid.parameterizations_array"(%1299, %1300, %1301) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1302, %1298, %1293, %1295, %1297) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1303 = "mid.unwrap"(%1289) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1304 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1305 = "mid.method_call"(%1304, %1303) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1306 = "hi.cast"(%1305) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1307 = "mid.print"(%1306) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1308 = "mid.unwrap"(%1179) : (!hi.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1309 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1309, %1308) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 17 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1310 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1311 = "hi.cast"(%1310) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1312 = "mid.create_buffer"(%1311) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1313 = "mid.refer"(%1312) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1314 = "mid.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "Stack trace:"} : () -> !llvm.ptr
      %1315 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1313, %1315, %1314) {"typ" = !llvm.array<12 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1316 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1317 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1318 = "mid.unwrap"(%1313) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1319 = "mid.unwrap"(%1316) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1320 = "mid.unwrap"(%1317) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1321 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1322 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1323 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1324 = "hi.cast"(%1313) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1325 = "mid.unwrap"(%1324) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1326 = "hi.cast"(%1322) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1327 = "mid.unwrap"(%1326) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1328 = "hi.cast"(%1323) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1329 = "mid.unwrap"(%1328) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1330 = "mid.unwrap"(%1321) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1331 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1332 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1333 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1334 = "mid.parameterizations_array"(%1331, %1332, %1333) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1334, %1330, %1325, %1327, %1329) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1335 = "mid.unwrap"(%1321) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1336 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1337 = "mid.method_call"(%1336, %1335) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1338 = "hi.cast"(%1337) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1339 = "mid.print"(%1338) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1340 = "mid.unwrap"(%1179) : (!hi.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1341 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1341, %1340) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 17 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1342 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1343 = "hi.cast"(%1342) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1344 = "mid.create_buffer"(%1343) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1345 = "mid.refer"(%1344) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1346 = "mid.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
      %1347 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1345, %1347, %1346) {"typ" = !llvm.array<9 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1348 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1349 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1350 = "mid.unwrap"(%1345) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1351 = "mid.unwrap"(%1348) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1352 = "mid.unwrap"(%1349) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1353 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1354 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1355 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1356 = "hi.cast"(%1345) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1357 = "mid.unwrap"(%1356) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1358 = "hi.cast"(%1354) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1359 = "mid.unwrap"(%1358) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1360 = "hi.cast"(%1355) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1361 = "mid.unwrap"(%1360) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1362 = "mid.unwrap"(%1353) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1363 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1364 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1365 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1366 = "mid.parameterizations_array"(%1363, %1364, %1365) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1366, %1362, %1357, %1359, %1361) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1367 = "mid.unwrap"(%1353) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1368 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1369 = "mid.method_call"(%1368, %1367) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1370 = "hi.cast"(%1369) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1371 = "mid.print"(%1370) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "Exception_report_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb182(%1372 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1373 : !llvm.ptr):
      %1374 = "mid.invariant"(%1373) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1375 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb183] : () -> ()
    ^bb183:
      %1376 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%1376, %1375) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb184] : () -> ()
    ^bb184:
      %1377 = "llvm.extractvalue"(%1372) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1378 = "llvm.load"(%1375) : (!llvm.ptr) -> i32
      %1379 = "llvm.getelementptr"(%1377, %1378) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1380 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1381 = "llvm.getelementptr"(%1379, %1380) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1381) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb185(%1382 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1383 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1384 : !llvm.ptr):
      %1385 = "mid.wrap"(%1382) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1386 = "hi.cast"(%1385) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1387 = "mid.get_field"(%1386) {"offset" = 2 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"String">
      %1388 = "mid.unwrap"(%1387) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1389 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1390 = "mid.method_call"(%1389, %1388) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1391 = "hi.cast"(%1390) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1392 = "mid.print"(%1391) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "Exception_print_message_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb186(%1393 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1394 : !llvm.ptr):
      %1395 = "mid.invariant"(%1394) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1396 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb187] : () -> ()
    ^bb187:
      %1397 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1397, %1396) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb188:
      %1398 = "llvm.extractvalue"(%1393) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1399 = "llvm.load"(%1396) : (!llvm.ptr) -> i32
      %1400 = "llvm.getelementptr"(%1398, %1399) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1401 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1402 = "llvm.getelementptr"(%1400, %1401) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1402) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_OutOfBounds", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_OutOfBoundsDetails_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_OutOfBoundsDetails_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_details", "getter_name" = "OutOfBounds_getter_details", "setter_name" = "OutOfBounds_setter_details"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_line_number", "getter_name" = "OutOfBounds_getter_line_number", "setter_name" = "OutOfBounds_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_file_name", "getter_name" = "OutOfBounds_getter_file_name", "setter_name" = "OutOfBounds_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_message", "getter_name" = "OutOfBounds_getter_message", "setter_name" = "OutOfBounds_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_stacktrace", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_stacktrace", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_stacktrace", "getter_name" = "OutOfBounds_getter_stacktrace", "setter_name" = "OutOfBounds_setter_stacktrace"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_n_frames", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 5 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_n_frames", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 5 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_n_frames", "getter_name" = "OutOfBounds_getter_n_frames", "setter_name" = "OutOfBounds_setter_n_frames"} : () -> ()
    "mid.func"() ({
    ^bb189(%1403 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1404 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1405 : !llvm.ptr, %1406 : i32, %1407 : i32):
      %1408 = "mid.wrap"(%1403) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBounds">
      %1409 = "hi.cast"(%1408) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.fatptr<"OutOfBounds">, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"OutOfBounds">
      %1410 = "mid.wrap"(%1406) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1411 = "hi.cast"(%1410) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1412 = "mid.wrap"(%1407) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1413 = "hi.cast"(%1412) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1414 = "mid.unwrap"(%1411) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1415 = "mid.unwrap"(%1413) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1416 = "mid.new"() {"typ" = !llvm.struct<(i32, i32)>, "class_name" = "OutOfBoundsDetails", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"OutOfBoundsDetails">
      %1417 = "hi.cast"(%1411) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1418 = "mid.unwrap"(%1417) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1419 = "hi.cast"(%1413) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1420 = "mid.unwrap"(%1419) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1421 = "mid.unwrap"(%1416) : (!hi.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1422 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1423 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1424 = "mid.parameterizations_array"(%1422, %1423) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1424, %1421, %1418, %1420) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %1425 = "hi.cast"(%1416) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
      "mid.set_field"(%1409, %1425) {"offset" = 0 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"OutOfBounds">, !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> ()
      %1426 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1427 = "hi.cast"(%1426) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1409, %1427) {"offset" = 1 : i64, "vtable_bytes" = 296 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBounds">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1428 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1429 = "hi.cast"(%1428) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1430 = "mid.create_buffer"(%1429) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1431 = "mid.refer"(%1430) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1432 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %1433 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1431, %1433, %1432) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1434 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1435 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1436 = "mid.unwrap"(%1431) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1437 = "mid.unwrap"(%1434) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1438 = "mid.unwrap"(%1435) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1439 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1440 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1441 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1442 = "hi.cast"(%1431) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1443 = "mid.unwrap"(%1442) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1444 = "hi.cast"(%1440) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1445 = "mid.unwrap"(%1444) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1446 = "hi.cast"(%1441) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1447 = "mid.unwrap"(%1446) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1448 = "mid.unwrap"(%1439) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1449 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1450 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1451 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1452 = "mid.parameterizations_array"(%1449, %1450, %1451) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1452, %1448, %1443, %1445, %1447) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1453 = "hi.cast"(%1439) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1409, %1453) {"offset" = 2 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"OutOfBounds">, !hi.fatptr<"String">) -> ()
      %1454 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1455 = "hi.cast"(%1454) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1456 = "mid.create_buffer"(%1455) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1457 = "mid.refer"(%1456) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1458 = "mid.literal"() {"typ" = !llvm.array<65 x i8>, "value" = "An out-of-bounds error occurred while indexing into a collection."} : () -> !llvm.ptr
      %1459 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1457, %1459, %1458) {"typ" = !llvm.array<65 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1460 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1461 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1462 = "mid.unwrap"(%1457) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1463 = "mid.unwrap"(%1460) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1464 = "mid.unwrap"(%1461) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1465 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1466 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1467 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1468 = "hi.cast"(%1457) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1469 = "mid.unwrap"(%1468) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1470 = "hi.cast"(%1466) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1471 = "mid.unwrap"(%1470) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1472 = "hi.cast"(%1467) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1473 = "mid.unwrap"(%1472) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1474 = "mid.unwrap"(%1465) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1475 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1476 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1477 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1478 = "mid.parameterizations_array"(%1475, %1476, %1477) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1478, %1474, %1469, %1471, %1473) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1479 = "hi.cast"(%1465) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1409, %1479) {"offset" = 3 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"OutOfBounds">, !hi.fatptr<"String">) -> ()
      %1480 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1481 = "hi.cast"(%1480) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1482 = "mid.create_buffer"(%1481) {"typ" = i64, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1483 = "hi.cast"(%1482) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      "mid.set_field"(%1409, %1483) {"offset" = 4 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"OutOfBounds">, !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> ()
      %1484 = "mid.literal"() {"value" = 100 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1485 = "mid.get_field"(%1409) {"offset" = 4 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"OutOfBounds">) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      %1486 = "mid.unwrap"(%1484) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1487 = "mid.unwrap"(%1485) : (!hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1488 = "mid.call"(%1486, %1487) {"func_name" = "capture_backtrace", "ret_type" = i64} : (i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1489 = "hi.cast"(%1488) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.set_field"(%1409, %1489) {"offset" = 5 : i64, "vtable_bytes" = 296 : i32, "original_type" = i64} : (!hi.fatptr<"OutOfBounds">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "OutOfBounds_init_boundsi32_indexi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb190(%1490 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1491 : !llvm.ptr):
      %1492 = "mid.invariant"(%1491) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1493 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb191] : () -> ()
    ^bb192:
      %1494 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%1494, %1493) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb193] : () -> ()
    ^bb194:
      %1495 = "llvm.getelementptr"(%1491) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1496 = "mid.checkflag"(%1495) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1497 = "llvm.load"(%1496) : (!hi.bool) -> i1
      "cf.cond_br"(%1497) [^bb192, ^bb192] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb191:
      %1498 = "llvm.getelementptr"(%1491) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1499 = "mid.checkflag"(%1498) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1500 = "llvm.load"(%1499) : (!hi.bool) -> i1
      "cf.cond_br"(%1500) [^bb194, ^bb194] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb193:
      %1501 = "llvm.extractvalue"(%1490) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1502 = "llvm.load"(%1493) : (!llvm.ptr) -> i32
      %1503 = "llvm.getelementptr"(%1501, %1502) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1504 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1505 = "llvm.getelementptr"(%1503, %1504) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1505) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_boundsi32_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb195(%1506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1507 : !llvm.ptr):
      %1508 = "mid.invariant"(%1507) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1509 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb196] : () -> ()
    ^bb197:
      %1510 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%1510, %1509) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb198] : () -> ()
    ^bb196:
      %1511 = "llvm.getelementptr"(%1507) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1512 = "mid.checkflag"(%1511) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1513 = "llvm.load"(%1512) : (!hi.bool) -> i1
      "cf.cond_br"(%1513) [^bb197, ^bb197] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb198:
      %1514 = "llvm.extractvalue"(%1506) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1515 = "llvm.load"(%1509) : (!llvm.ptr) -> i32
      %1516 = "llvm.getelementptr"(%1514, %1515) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1517 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1518 = "llvm.getelementptr"(%1516, %1517) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1518) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb199(%1519 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1520 : !llvm.ptr):
      %1521 = "mid.invariant"(%1520) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1522 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb200] : () -> ()
    ^bb200:
      %1523 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%1523, %1522) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb201] : () -> ()
    ^bb201:
      %1524 = "llvm.extractvalue"(%1519) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1525 = "llvm.load"(%1522) : (!llvm.ptr) -> i32
      %1526 = "llvm.getelementptr"(%1524, %1525) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1527 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1528 = "llvm.getelementptr"(%1526, %1527) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1528) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb202(%1529 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1530 : !llvm.ptr):
      %1531 = "mid.invariant"(%1530) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1532 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb203] : () -> ()
    ^bb204:
      %1533 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1533, %1532) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb205] : () -> ()
    ^bb206:
      %1534 = "llvm.getelementptr"(%1530) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1535 = "mid.checkflag"(%1534) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1536 = "llvm.load"(%1535) : (!hi.bool) -> i1
      "cf.cond_br"(%1536) [^bb204, ^bb204] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb203:
      %1537 = "llvm.getelementptr"(%1530) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1538 = "mid.checkflag"(%1537) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1539 = "llvm.load"(%1538) : (!hi.bool) -> i1
      "cf.cond_br"(%1539) [^bb206, ^bb206] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb205:
      %1540 = "llvm.extractvalue"(%1529) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1541 = "llvm.load"(%1532) : (!llvm.ptr) -> i32
      %1542 = "llvm.getelementptr"(%1540, %1541) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1543 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1544 = "llvm.getelementptr"(%1542, %1543) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1544) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb207(%1545 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1546 : !llvm.ptr):
      %1547 = "mid.invariant"(%1546) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1548 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb208] : () -> ()
    ^bb208:
      %1549 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1549, %1548) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb209] : () -> ()
    ^bb209:
      %1550 = "llvm.extractvalue"(%1545) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1551 = "llvm.load"(%1548) : (!llvm.ptr) -> i32
      %1552 = "llvm.getelementptr"(%1550, %1551) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1553 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1554 = "llvm.getelementptr"(%1552, %1553) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1554) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_print_stacktrace_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb210(%1555 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1556 : !llvm.ptr):
      %1557 = "mid.invariant"(%1556) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1558 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb211] : () -> ()
    ^bb211:
      %1559 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1559, %1558) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb212] : () -> ()
    ^bb212:
      %1560 = "llvm.extractvalue"(%1555) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1561 = "llvm.load"(%1558) : (!llvm.ptr) -> i32
      %1562 = "llvm.getelementptr"(%1560, %1561) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1563 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1564 = "llvm.getelementptr"(%1562, %1563) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1564) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb213(%1565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1566 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1567 : !llvm.ptr):
      %1568 = "mid.wrap"(%1565) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBounds">
      %1569 = "hi.cast"(%1568) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.fatptr<"OutOfBounds">, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"OutOfBounds">
      %1570 = "mid.get_field"(%1569) {"offset" = 3 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"String">
      %1571 = "mid.unwrap"(%1570) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1572 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1573 = "mid.method_call"(%1572, %1571) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1574 = "hi.cast"(%1573) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1575 = "mid.print"(%1574) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1576 = "mid.get_field"(%1569) {"offset" = 0 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"OutOfBounds">) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
      %1577 = "mid.refer"(%1576) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
      %1578 = "mid.checkflag"(%1577) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1579 = "mid.unwrap"(%1578) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1580 = "hi.cast"(%1577) {"from_typ" = !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
      "mid.if"(%1579) ({
        %1581 = "hi.cast"(%1580) {"from_typ" = !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "union_typ", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> !hi.fatptr<"OutOfBoundsDetails">
        %1582 = "mid.unwrap"(%1581) : (!hi.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1583 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%1583, %1582) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %1584 = "hi.cast"(%1581) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
        "mid.assign"(%1580, %1584) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "OutOfBounds_print_message_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb214(%1585 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1586 : !llvm.ptr):
      %1587 = "mid.invariant"(%1586) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1588 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb215] : () -> ()
    ^bb215:
      %1589 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1589, %1588) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb216] : () -> ()
    ^bb216:
      %1590 = "llvm.extractvalue"(%1585) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1591 = "llvm.load"(%1588) : (!llvm.ptr) -> i32
      %1592 = "llvm.getelementptr"(%1590, %1591) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1593 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1594 = "llvm.getelementptr"(%1592, %1593) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1594) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_OutOfBoundsDetails", "types" = [i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_bounds", "getter_name" = "OutOfBoundsDetails_getter_bounds", "setter_name" = "OutOfBoundsDetails_setter_bounds"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_index", "getter_name" = "OutOfBoundsDetails_getter_index", "setter_name" = "OutOfBoundsDetails_setter_index"} : () -> ()
    "mid.func"() ({
    ^bb217(%1595 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1596 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1597 : !llvm.ptr, %1598 : i32, %1599 : i32):
      %1600 = "mid.wrap"(%1595) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBoundsDetails">
      %1601 = "hi.cast"(%1600) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.fatptr<"OutOfBoundsDetails">
      %1602 = "mid.wrap"(%1598) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1603 = "hi.cast"(%1602) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1604 = "hi.cast"(%1603) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1601, %1604) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1605 = "mid.wrap"(%1599) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1606 = "hi.cast"(%1605) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1607 = "hi.cast"(%1606) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1601, %1607) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "OutOfBoundsDetails_init_boundsi32_indexi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb218(%1608 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1609 : !llvm.ptr):
      %1610 = "mid.invariant"(%1609) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1611 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb219] : () -> ()
    ^bb220:
      %1612 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%1612, %1611) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb221] : () -> ()
    ^bb222:
      %1613 = "llvm.getelementptr"(%1609) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1614 = "mid.checkflag"(%1613) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1615 = "llvm.load"(%1614) : (!hi.bool) -> i1
      "cf.cond_br"(%1615) [^bb220, ^bb220] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb219:
      %1616 = "llvm.getelementptr"(%1609) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1617 = "mid.checkflag"(%1616) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1618 = "llvm.load"(%1617) : (!hi.bool) -> i1
      "cf.cond_br"(%1618) [^bb222, ^bb222] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb221:
      %1619 = "llvm.extractvalue"(%1608) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1620 = "llvm.load"(%1611) : (!llvm.ptr) -> i32
      %1621 = "llvm.getelementptr"(%1619, %1620) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1622 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1623 = "llvm.getelementptr"(%1621, %1622) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1623) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBoundsDetails_B_init_boundsi32_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb223(%1624 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1625 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1626 : !llvm.ptr):
      %1627 = "mid.wrap"(%1624) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBoundsDetails">
      %1628 = "hi.cast"(%1627) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.fatptr<"OutOfBoundsDetails">
      %1629 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1630 = "hi.cast"(%1629) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1631 = "mid.create_buffer"(%1630) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1632 = "mid.refer"(%1631) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1633 = "mid.literal"() {"typ" = !llvm.array<44 x i8>, "value" = "The size of the collection being indexed was"} : () -> !llvm.ptr
      %1634 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1632, %1634, %1633) {"typ" = !llvm.array<44 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1635 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1636 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1637 = "mid.unwrap"(%1632) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1638 = "mid.unwrap"(%1635) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1639 = "mid.unwrap"(%1636) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1640 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1641 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1642 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1643 = "hi.cast"(%1632) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1644 = "mid.unwrap"(%1643) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1645 = "hi.cast"(%1641) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1646 = "mid.unwrap"(%1645) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1647 = "hi.cast"(%1642) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1648 = "mid.unwrap"(%1647) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1649 = "mid.unwrap"(%1640) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1650 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1651 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1652 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1653 = "mid.parameterizations_array"(%1650, %1651, %1652) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1653, %1649, %1644, %1646, %1648) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1654 = "mid.unwrap"(%1640) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1655 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1656 = "mid.method_call"(%1655, %1654) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1657 = "hi.cast"(%1656) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1658 = "mid.print"(%1657) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1659 = "mid.get_field"(%1628) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1660 = "mid.print"(%1659) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1661 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1662 = "hi.cast"(%1661) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1663 = "mid.create_buffer"(%1662) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1664 = "mid.refer"(%1663) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1665 = "mid.literal"() {"typ" = !llvm.array<25 x i8>, "value" = "The indexing argument was"} : () -> !llvm.ptr
      %1666 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1664, %1666, %1665) {"typ" = !llvm.array<25 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1667 = "mid.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1668 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1669 = "mid.unwrap"(%1664) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1670 = "mid.unwrap"(%1667) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1671 = "mid.unwrap"(%1668) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1672 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1673 = "mid.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1674 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1675 = "hi.cast"(%1664) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1676 = "mid.unwrap"(%1675) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1677 = "hi.cast"(%1673) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1678 = "mid.unwrap"(%1677) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1679 = "hi.cast"(%1674) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1680 = "mid.unwrap"(%1679) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1681 = "mid.unwrap"(%1672) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1682 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1683 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1684 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1685 = "mid.parameterizations_array"(%1682, %1683, %1684) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1685, %1681, %1676, %1678, %1680) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1686 = "mid.unwrap"(%1672) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1687 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1688 = "mid.method_call"(%1687, %1686) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1689 = "hi.cast"(%1688) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1690 = "mid.print"(%1689) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1691 = "mid.get_field"(%1628) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1692 = "mid.print"(%1691) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
    }) {"func_name" = "OutOfBoundsDetails_report_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb224(%1693 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1694 : !llvm.ptr):
      %1695 = "mid.invariant"(%1694) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1696 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb225] : () -> ()
    ^bb225:
      %1697 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1697, %1696) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb226] : () -> ()
    ^bb226:
      %1698 = "llvm.extractvalue"(%1693) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1699 = "llvm.load"(%1696) : (!llvm.ptr) -> i32
      %1700 = "llvm.getelementptr"(%1698, %1699) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1701 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1702 = "llvm.getelementptr"(%1700, %1701) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1702) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBoundsDetails_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb227(%1703 : !llvm.struct<(!llvm.ptr)>):
      %1704 = "mid.wrap"(%1703) : (!llvm.struct<(!llvm.ptr)>) -> !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>
      %1705 = "hi.cast"(%1704) {"from_typ" = !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>, "to_typ" = !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>) -> !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>
      %1706 = "llvm.load"(%1705) : (!hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>) -> !llvm.ptr
      %1707 = "mid.coro_get_result"(%1706) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %1708 = "mid.wrap"(%1707) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      %1709 = "mid.checkflag"(%1708) {"typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1710 = "mid.unwrap"(%1709) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1711 = "hi.cast"(%1708) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      "mid.if"(%1710) ({
        %1712 = "hi.cast"(%1711) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "union_typ", "to_typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.fatptr<"Exception">
        %1713 = "mid.unwrap"(%1712) : (!hi.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1714 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%1714, %1713) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 17 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %1715 = "hi.cast"(%1712) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        "mid.assign"(%1711, %1715) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "report_exception", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "io"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "IO", "methods" = [@IO_B__Self_print_xBool__Self_print_xi32__Self_print_xf64__Self_print_xi8__Self_print_xi64__Self_print_xNil__Self_print_xCharacter__Self_print_xRepresentable__Self_print_xString, @IO__Self_print_xBool, @IO__Self_print_xi32, @IO__Self_print_xf64, @IO__Self_print_xi8, @IO__Self_print_xi64, @IO__Self_print_xNil, @IO__Self_print_xCharacter, @IO__Self_print_xRepresentable, @IO__Self_print_xString], "hash_tbl" = [@any_typ, @IO, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 20 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5359822646784595218 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IO", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_IO", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr, %1 : !llvm.struct<(!llvm.ptr, i160)>):
      %2 = "mid.wrap"(%1) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %3 = "hi.cast"(%2) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.bool, "from_typ_name" = "union_typ", "to_typ_name" = "bool_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.bool
      %4 = "mid.unwrap"(%3) : (!hi.bool) -> i1
      "mid.if"(%4) ({
        %5 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %6 = "hi.cast"(%5) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %7 = "mid.create_buffer"(%6) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %8 = "mid.refer"(%7) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %9 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "true"} : () -> !llvm.ptr
        %10 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%8, %10, %9) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %11 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %12 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %13 = "mid.unwrap"(%8) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %14 = "mid.unwrap"(%11) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %15 = "mid.unwrap"(%12) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %16 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %17 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %18 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %19 = "hi.cast"(%8) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %20 = "mid.unwrap"(%19) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %21 = "hi.cast"(%17) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %22 = "mid.unwrap"(%21) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %23 = "hi.cast"(%18) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %24 = "mid.unwrap"(%23) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %25 = "mid.unwrap"(%16) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %26 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %27 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %28 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %29 = "mid.parameterizations_array"(%26, %27, %28) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%29, %25, %20, %22, %24) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %30 = "mid.unwrap"(%16) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %31 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %32 = "mid.method_call"(%31, %30) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %33 = "hi.cast"(%32) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %34 = "mid.print"(%33) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      }, {
        %35 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %36 = "hi.cast"(%35) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %37 = "mid.create_buffer"(%36) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %38 = "mid.refer"(%37) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %39 = "mid.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "false"} : () -> !llvm.ptr
        %40 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%38, %40, %39) {"typ" = !llvm.array<5 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %41 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %42 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %43 = "mid.unwrap"(%38) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %44 = "mid.unwrap"(%41) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %45 = "mid.unwrap"(%42) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %46 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %47 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %48 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %49 = "hi.cast"(%38) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %50 = "mid.unwrap"(%49) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %51 = "hi.cast"(%47) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %52 = "mid.unwrap"(%51) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %53 = "hi.cast"(%48) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %54 = "mid.unwrap"(%53) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %55 = "mid.unwrap"(%46) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %56 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %57 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %58 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %59 = "mid.parameterizations_array"(%56, %57, %58) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%59, %55, %50, %52, %54) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %60 = "mid.unwrap"(%46) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %61 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %62 = "mid.method_call"(%61, %60) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %63 = "hi.cast"(%62) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %64 = "mid.print"(%63) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      }) : (i1) -> ()
    }) {"func_name" = "IO__Self_print_xBool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%65 : !llvm.ptr, %66 : !llvm.struct<(!llvm.ptr, i160)>):
      %67 = "mid.wrap"(%66) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %68 = "hi.cast"(%67) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %69 = "mid.print"(%68) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
    }) {"func_name" = "IO__Self_print_xi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb2(%70 : !llvm.ptr, %71 : !llvm.struct<(!llvm.ptr, i160)>):
      %72 = "mid.wrap"(%71) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %73 = "hi.cast"(%72) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.float
      %74 = "mid.print"(%73) {"typ" = f64} : (!hi.float) -> i32
    }) {"func_name" = "IO__Self_print_xf64", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb3(%75 : !llvm.ptr, %76 : !llvm.struct<(!llvm.ptr, i160)>):
      %77 = "mid.wrap"(%76) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %78 = "hi.cast"(%77) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i8_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %79 = "mid.print"(%78) {"typ" = i8} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i32
    }) {"func_name" = "IO__Self_print_xi8", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb4(%80 : !llvm.ptr, %81 : !llvm.struct<(!llvm.ptr, i160)>):
      %82 = "mid.wrap"(%81) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %83 = "hi.cast"(%82) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i64_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %84 = "mid.print"(%83) {"typ" = i64} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i32
    }) {"func_name" = "IO__Self_print_xi64", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%85 : !llvm.ptr, %86 : !llvm.struct<(!llvm.ptr, i160)>):
      %87 = "mid.wrap"(%86) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %88 = "hi.cast"(%87) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.nil
      %89 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %90 = "hi.cast"(%89) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %91 = "mid.create_buffer"(%90) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %92 = "mid.refer"(%91) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %93 = "mid.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "nil"} : () -> !llvm.ptr
      %94 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%92, %94, %93) {"typ" = !llvm.array<3 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %95 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %96 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %97 = "mid.unwrap"(%92) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %98 = "mid.unwrap"(%95) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %99 = "mid.unwrap"(%96) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %100 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %101 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %102 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %103 = "hi.cast"(%92) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %104 = "mid.unwrap"(%103) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %105 = "hi.cast"(%101) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %106 = "mid.unwrap"(%105) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %107 = "hi.cast"(%102) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %108 = "mid.unwrap"(%107) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %109 = "mid.unwrap"(%100) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %110 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %111 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %112 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %113 = "mid.parameterizations_array"(%110, %111, %112) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%113, %109, %104, %106, %108) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %114 = "mid.unwrap"(%100) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %115 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %116 = "mid.method_call"(%115, %114) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %117 = "hi.cast"(%116) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %118 = "mid.print"(%117) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "IO__Self_print_xNil", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%119 : !llvm.ptr, %120 : !llvm.struct<(!llvm.ptr, i160)>):
      %121 = "mid.wrap"(%120) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %122 = "hi.cast"(%121) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.fatptr<"Character">
      %123 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %124 = "hi.cast"(%123) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %125 = "mid.create_buffer"(%124) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %126 = "mid.refer"(%125) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %127 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %128 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %129 = "mid.unwrap"(%122) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %130 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %131 = "mid.method_call"(%130, %129) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %132 = "hi.cast"(%131) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %133 = "hi.cast"(%132) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %134 = "hi.cast"(%128) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%126, %134, %133) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
      %135 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %136 = "hi.cast"(%127) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %137 = "hi.cast"(%135) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%126, %137, %136) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
      %138 = "mid.print"(%126) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "IO__Self_print_xCharacter", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb7(%139 : !llvm.ptr, %140 : !llvm.struct<(!llvm.ptr, i160)>):
      %141 = "mid.wrap"(%140) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %142 = "hi.cast"(%141) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.fatptr<"Representable">, "from_typ_name" = "union_typ", "to_typ_name" = "Representable"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.fatptr<"Representable">
      %143 = "mid.unwrap"(%142) : (!hi.fatptr<"Representable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %144 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %145 = "mid.method_call"(%144, %143) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %146 = "hi.cast"(%145) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %147 = "mid.unwrap"(%146) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %148 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %149 = "mid.method_call"(%148, %147) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %150 = "hi.cast"(%149) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %151 = "mid.print"(%150) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "IO__Self_print_xRepresentable", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb8(%152 : !llvm.ptr, %153 : !llvm.struct<(!llvm.ptr, i160)>):
      %154 = "mid.wrap"(%153) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %155 = "hi.cast"(%154) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "union_typ", "to_typ_name" = "String"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !hi.fatptr<"String">
      %156 = "mid.unwrap"(%155) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %157 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %158 = "mid.method_call"(%157, %156) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %159 = "hi.cast"(%158) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %160 = "mid.print"(%159) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "IO__Self_print_xString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb9(%161 : !llvm.ptr):
      %162 = "mid.invariant"(%161) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %163 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %164 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%164, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb13:
      %165 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%165, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb14:
      %166 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%166, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb15:
      %167 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%167, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb16:
      %168 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%168, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb17:
      %169 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%169, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb18:
      %170 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%170, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb19:
      %171 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%171, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb20:
      %172 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%172, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb10:
      %173 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %174 = "mid.checkflag"(%173) {"typ_name" = "Representable"} : (!llvm.ptr) -> !hi.bool
      %175 = "llvm.load"(%174) : (!hi.bool) -> i1
      "cf.cond_br"(%175) [^bb21, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb21:
      %176 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %177 = "mid.checkflag"(%176) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %178 = "llvm.load"(%177) : (!hi.bool) -> i1
      "cf.cond_br"(%178) [^bb22, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %179 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %180 = "mid.checkflag"(%179) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %181 = "llvm.load"(%180) : (!hi.bool) -> i1
      "cf.cond_br"(%181) [^bb22, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %182 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %183 = "mid.checkflag"(%182) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %184 = "llvm.load"(%183) : (!hi.bool) -> i1
      "cf.cond_br"(%184) [^bb24, ^bb25] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %185 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %186 = "mid.checkflag"(%185) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %187 = "llvm.load"(%186) : (!hi.bool) -> i1
      "cf.cond_br"(%187) [^bb25, ^bb13] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb25:
      %188 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %189 = "mid.checkflag"(%188) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %190 = "llvm.load"(%189) : (!hi.bool) -> i1
      "cf.cond_br"(%190) [^bb14, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %191 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %192 = "mid.checkflag"(%191) {"typ_name" = "nil_typ"} : (!llvm.ptr) -> !hi.bool
      %193 = "llvm.load"(%192) : (!hi.bool) -> i1
      "cf.cond_br"(%193) [^bb15, ^bb27] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %194 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %195 = "mid.checkflag"(%194) {"typ_name" = "bool_typ"} : (!llvm.ptr) -> !hi.bool
      %196 = "llvm.load"(%195) : (!hi.bool) -> i1
      "cf.cond_br"(%196) [^bb16, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb28:
      %197 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %198 = "mid.checkflag"(%197) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %199 = "llvm.load"(%198) : (!hi.bool) -> i1
      "cf.cond_br"(%199) [^bb17, ^bb29] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb29:
      %200 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %201 = "mid.checkflag"(%200) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %202 = "llvm.load"(%201) : (!hi.bool) -> i1
      "cf.cond_br"(%202) [^bb30, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %203 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %204 = "mid.checkflag"(%203) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %205 = "llvm.load"(%204) : (!hi.bool) -> i1
      "cf.cond_br"(%205) [^bb31, ^bb18] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %206 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %207 = "mid.checkflag"(%206) {"typ_name" = "i64_typ"} : (!llvm.ptr) -> !hi.bool
      %208 = "llvm.load"(%207) : (!hi.bool) -> i1
      "cf.cond_br"(%208) [^bb19, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %209 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %210 = "mid.checkflag"(%209) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %211 = "llvm.load"(%210) : (!hi.bool) -> i1
      "cf.cond_br"(%211) [^bb20, ^bb20] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb12:
      %212 = "mid.addr_of"() {"global_name" = @IO} : () -> !llvm.ptr
      %213 = "llvm.load"(%163) : (!llvm.ptr) -> i32
      %214 = "llvm.getelementptr"(%212, %213) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %215 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %216 = "llvm.getelementptr"(%214, %215) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%216) : (!llvm.ptr) -> ()
    }) {"func_name" = "IO_B__Self_print_xBool__Self_print_xi32__Self_print_xf64__Self_print_xi8__Self_print_xi64__Self_print_xNil__Self_print_xCharacter__Self_print_xRepresentable__Self_print_xString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "files"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO", "vtbl_size" = 10 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "FileSystemError", "methods" = [@FileSystemError_field_line_number, @FileSystemError_field_file_name, @FileSystemError_field_message, @FileSystemError_field_stacktrace, @FileSystemError_field_n_frames, @FileSystemError_B_init_messageString, @FileSystemError_B_init_, @FileSystemError_B_set_info_line_numberi32_file_nameString, @FileSystemError_B_print_stacktrace_, @FileSystemError_B_report_, @FileSystemError_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @Exception_print_message_, @FileSystemError_field_line_number, @FileSystemError_field_file_name, @FileSystemError_field_message, @FileSystemError_field_stacktrace, @FileSystemError_field_n_frames, @FileSystemError_B_init_messageString, @FileSystemError_B_init_, @FileSystemError_B_set_info_line_numberi32_file_nameString, @FileSystemError_B_print_stacktrace_, @FileSystemError_B_report_, @FileSystemError_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@any_typ, @FileSystemError, @Object, @Exception], "offset_tbl" = [10 : i32, 10 : i32, 44 : i32, 27 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 13942035194652003542 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "data_size_fn" = "_data_size_FileSystemError", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "File", "methods" = [@File_field_name, @File_field_mode, @File_field_handle, @File_field_open, @File_B_init_nameString_modeString, @File_B__set_mode_modeString, @File_B_reopen_, @File_B_close_, @File_B_size_, @File_B_read_, @File_B_read_byte_, @File_B_write_textString, @File_init_nameString_modeString, @File__set_mode_modeString, @File_reopen_, @File_close_, @File_size_, @File_read_, @File_read_byte_, @File_write_textString], "hash_tbl" = [@File, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 30 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 16218955235528015952 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "data_size_fn" = "_data_size_File", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileProcessor", "methods" = [], "hash_tbl" = [@Object, @any_typ, @FileProcessor, 18446744073709551615 : i64], "offset_tbl" = [13 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4146660827496349788 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_FileProcessor", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileReader", "methods" = [@FileReader_field_FileReader_0, @FileReader_B_init_, @FileReader_B_process_fileFile, @FileReader_init_, @FileReader_process_fileFile, @FileReader_field_FileReader_0, @FileReader_B_process_fileFile, @FileReader_process_fileFile], "hash_tbl" = [@Object, @any_typ, @FileProcessor, @FileReader], "offset_tbl" = [18 : i32, 10 : i32, 15 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5641023583277533454 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileReader", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileWriter", "methods" = [@FileWriter_field_text, @FileWriter_field_FileWriter_0, @FileWriter_B_init_textString, @FileWriter_B_process_fileFile, @FileWriter_init_textString, @FileWriter_process_fileFile, @FileWriter_field_FileWriter_0, @FileWriter_B_process_fileFile, @FileWriter_process_fileFile], "hash_tbl" = [@Object, @any_typ, @FileProcessor, @FileWriter], "offset_tbl" = [19 : i32, 10 : i32, 16 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 2522433070607690589 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_FileWriter", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileSystem", "methods" = [@FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, @FileSystem_B__Self_read_file_file_nameString, @FileSystem_B__Self_write_file_file_nameString_textString, @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT, @FileSystem__Self_read_file_file_nameString, @FileSystem__Self_write_file_file_nameString_textString], "hash_tbl" = [@Object, @FileSystem, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [17 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 5344209596779946859 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileSystem", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileSystemError", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_line_number", "getter_name" = "FileSystemError_getter_line_number", "setter_name" = "FileSystemError_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_file_name", "getter_name" = "FileSystemError_getter_file_name", "setter_name" = "FileSystemError_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_message", "getter_name" = "FileSystemError_getter_message", "setter_name" = "FileSystemError_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_stacktrace", "getter_name" = "FileSystemError_getter_stacktrace", "setter_name" = "FileSystemError_setter_stacktrace"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_n_frames", "getter_name" = "FileSystemError_getter_n_frames", "setter_name" = "FileSystemError_setter_n_frames"} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_messageString", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb2:
      %4 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb1:
      %5 = "llvm.getelementptr"(%1) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %6 = "mid.checkflag"(%5) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %7 = "llvm.load"(%6) : (!hi.bool) -> i1
      "cf.cond_br"(%7) [^bb2, ^bb2] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb3:
      %8 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %9 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %10 = "llvm.getelementptr"(%8, %9) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %11 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%12) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb4(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      %17 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %18 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %19 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %20 = "llvm.getelementptr"(%18, %19) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %21 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %22 = "llvm.getelementptr"(%20, %21) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%22) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_set_info_line_numberi32_file_nameString", "function_type" = !llvm.func<void (i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb7(%23 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %24 : !llvm.ptr):
      %25 = "mid.invariant"(%24) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %26 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %27 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%27, %26) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %28 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %29 = "mid.checkflag"(%28) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %30 = "llvm.load"(%29) : (!hi.bool) -> i1
      "cf.cond_br"(%30) [^bb9, ^bb9] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb8:
      %31 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %32 = "mid.checkflag"(%31) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %33 = "llvm.load"(%32) : (!hi.bool) -> i1
      "cf.cond_br"(%33) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %34 = "llvm.extractvalue"(%23) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %35 = "llvm.load"(%26) : (!llvm.ptr) -> i32
      %36 = "llvm.getelementptr"(%34, %35) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %37 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%38) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_print_stacktrace_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb12(%39 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %40 : !llvm.ptr):
      %41 = "mid.invariant"(%40) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %42 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %43 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%43, %42) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      %44 = "llvm.extractvalue"(%39) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %45 = "llvm.load"(%42) : (!llvm.ptr) -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %47 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%48) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_print_stacktrace_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_report_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb15(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      %53 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      %54 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %55 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %57 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %58 = "llvm.getelementptr"(%56, %57) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%58) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_print_message_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb18(%59 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %60 : !llvm.ptr):
      %61 = "mid.invariant"(%60) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %62 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      %63 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%63, %62) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb20] : () -> ()
    ^bb20:
      %64 = "llvm.extractvalue"(%59) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %65 = "llvm.load"(%62) : (!llvm.ptr) -> i32
      %66 = "llvm.getelementptr"(%64, %65) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %67 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %68 = "llvm.getelementptr"(%66, %67) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%68) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_File", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1]} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_name", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_name", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_name", "getter_name" = "File_getter_name", "setter_name" = "File_setter_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_mode", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_mode", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_mode", "getter_name" = "File_getter_mode", "setter_name" = "File_setter_mode"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_handle", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_handle", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_handle", "getter_name" = "File_getter_handle", "setter_name" = "File_setter_handle"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_open", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_open", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_open", "getter_name" = "File_getter_open", "setter_name" = "File_setter_open"} : () -> ()
    "mid.func"() ({
    ^bb21(%69 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %70 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %71 : !llvm.ptr, %72 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %73 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %74 = "mid.wrap"(%69) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %75 = "hi.cast"(%74) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %76 = "mid.wrap"(%72) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %77 = "hi.cast"(%76) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %78 = "hi.cast"(%77) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%75, %78) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %79 = "mid.wrap"(%73) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %80 = "hi.cast"(%79) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %81 = "hi.cast"(%80) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%75, %81) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %82 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %83 = "hi.cast"(%82) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%75, %83) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
      %84 = "mid.get_field"(%75) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %85 = "mid.unwrap"(%84) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %86 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %87 = "mid.method_call"(%86, %85) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %88 = "hi.cast"(%87) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %89 = "mid.get_field"(%75) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %90 = "mid.unwrap"(%89) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %91 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %92 = "mid.method_call"(%91, %90) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %93 = "hi.cast"(%92) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %94 = "mid.unwrap"(%88) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %95 = "mid.unwrap"(%93) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %96 = "mid.call"(%94, %95) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %97 = "hi.cast"(%96) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      "mid.set_field"(%75, %97) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">, !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> ()
      %98 = "mid.get_field"(%75) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %99 = "mid.checkflag"(%98) {"typ_name" = "nil_typ"} : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %100 = "mid.unwrap"(%99) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%100) ({
        %101 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %102 = "mid.unwrap"(%101) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %103 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%103, %102) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %104 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %105 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %106 = "hi.cast"(%105) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %107 = "mid.create_buffer"(%106) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %108 = "mid.refer"(%107) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %109 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %110 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%108, %110, %109) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %111 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %112 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %113 = "mid.unwrap"(%108) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %114 = "mid.unwrap"(%111) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %115 = "mid.unwrap"(%112) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %116 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %117 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %118 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %119 = "hi.cast"(%108) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %120 = "mid.unwrap"(%119) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %121 = "hi.cast"(%117) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %122 = "mid.unwrap"(%121) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %123 = "hi.cast"(%118) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %124 = "mid.unwrap"(%123) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %125 = "mid.unwrap"(%116) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %126 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %127 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %128 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %129 = "mid.parameterizations_array"(%126, %127, %128) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%129, %125, %120, %122, %124) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %130 = "hi.cast"(%104) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %131 = "mid.unwrap"(%130) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %132 = "hi.cast"(%116) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %133 = "mid.unwrap"(%132) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %134 = "mid.unwrap"(%101) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %135 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %136 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %137 = "mid.parameterizations_array"(%135, %136) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%137, %134, %131, %133) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %138 = "hi.cast"(%101) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %139 = "mid.unwrap"(%138) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %140 = "mid.coro_yield"(%139) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %141 = "mid.wrap"(%140) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
      %142 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %143 = "hi.cast"(%142) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%75, %143) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
    }) {"func_name" = "File_init_nameString_modeString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb22(%144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %145 : !llvm.ptr):
      %146 = "mid.invariant"(%145) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %147 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb23] : () -> ()
    ^bb24:
      %148 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%148, %147) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb25] : () -> ()
    ^bb26:
      %149 = "llvm.getelementptr"(%145) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %150 = "mid.checkflag"(%149) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %151 = "llvm.load"(%150) : (!hi.bool) -> i1
      "cf.cond_br"(%151) [^bb24, ^bb24] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %152 = "llvm.getelementptr"(%145) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %153 = "mid.checkflag"(%152) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %154 = "llvm.load"(%153) : (!hi.bool) -> i1
      "cf.cond_br"(%154) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb25:
      %155 = "llvm.extractvalue"(%144) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %156 = "llvm.load"(%147) : (!llvm.ptr) -> i32
      %157 = "llvm.getelementptr"(%155, %156) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %158 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %159 = "llvm.getelementptr"(%157, %158) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%159) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_init_nameString_modeString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%160 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %161 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %162 : !llvm.ptr, %163 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %164 = "mid.wrap"(%160) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %165 = "hi.cast"(%164) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %166 = "mid.wrap"(%163) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %167 = "hi.cast"(%166) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %168 = "hi.cast"(%167) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%165, %168) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %169 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %170 = "mid.get_field"(%165) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %171 = "mid.unwrap"(%169) : (!hi.bool) -> i1
      %172 = "mid.unwrap"(%170) : (!hi.bool) -> i1
      %173 = "mid.comparison"(%171, %172) {"op" = "EQ"} : (i1, i1) -> i1
      %174 = "mid.wrap"(%173) : (i1) -> !hi.bool
      %175 = "mid.unwrap"(%174) : (!hi.bool) -> i1
      "mid.if"(%175) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %176 = "mid.unwrap"(%165) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %177 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%177, %176) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    }) {"func_name" = "File__set_mode_modeString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb28(%178 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %179 : !llvm.ptr):
      %180 = "mid.invariant"(%179) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %181 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb30:
      %182 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%182, %181) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb29:
      %183 = "llvm.getelementptr"(%179) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %184 = "mid.checkflag"(%183) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %185 = "llvm.load"(%184) : (!hi.bool) -> i1
      "cf.cond_br"(%185) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %186 = "llvm.extractvalue"(%178) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %187 = "llvm.load"(%181) : (!llvm.ptr) -> i32
      %188 = "llvm.getelementptr"(%186, %187) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %189 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %190 = "llvm.getelementptr"(%188, %189) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%190) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B__set_mode_modeString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb32(%191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %193 : !llvm.ptr):
      %194 = "mid.wrap"(%191) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %195 = "hi.cast"(%194) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %196 = "mid.unwrap"(%195) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %197 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%197, %196) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %198 = "mid.get_field"(%195) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %199 = "mid.unwrap"(%198) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %200 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %201 = "mid.method_call"(%200, %199) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %202 = "hi.cast"(%201) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %203 = "mid.get_field"(%195) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %204 = "mid.unwrap"(%203) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %205 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %206 = "mid.method_call"(%205, %204) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %207 = "hi.cast"(%206) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %208 = "mid.unwrap"(%202) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %209 = "mid.unwrap"(%207) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %210 = "mid.call"(%208, %209) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %211 = "hi.cast"(%210) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      "mid.set_field"(%195, %211) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">, !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> ()
      %212 = "mid.get_field"(%195) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %213 = "mid.checkflag"(%212) {"typ_name" = "nil_typ"} : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %214 = "mid.unwrap"(%213) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%214) ({
        %215 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %216 = "mid.unwrap"(%215) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %217 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%217, %216) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %218 = "mid.literal"() {"value" = 38 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %219 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %220 = "hi.cast"(%219) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %221 = "mid.create_buffer"(%220) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %222 = "mid.refer"(%221) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %223 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %224 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%222, %224, %223) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %225 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %226 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %227 = "mid.unwrap"(%222) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %228 = "mid.unwrap"(%225) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %229 = "mid.unwrap"(%226) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %230 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %231 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %232 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %233 = "hi.cast"(%222) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %234 = "mid.unwrap"(%233) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %235 = "hi.cast"(%231) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %236 = "mid.unwrap"(%235) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %237 = "hi.cast"(%232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %238 = "mid.unwrap"(%237) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %239 = "mid.unwrap"(%230) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %240 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %241 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %242 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %243 = "mid.parameterizations_array"(%240, %241, %242) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%243, %239, %234, %236, %238) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %244 = "hi.cast"(%218) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %245 = "mid.unwrap"(%244) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %246 = "hi.cast"(%230) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %247 = "mid.unwrap"(%246) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %248 = "mid.unwrap"(%215) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %249 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %250 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %251 = "mid.parameterizations_array"(%249, %250) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%251, %248, %245, %247) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %252 = "hi.cast"(%215) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %253 = "mid.unwrap"(%252) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %254 = "mid.coro_yield"(%253) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %255 = "mid.wrap"(%254) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
      %256 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %257 = "hi.cast"(%256) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%195, %257) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
    }) {"func_name" = "File_reopen_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb33(%258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %259 : !llvm.ptr):
      %260 = "mid.invariant"(%259) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %261 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      %262 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%262, %261) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb35] : () -> ()
    ^bb35:
      %263 = "llvm.extractvalue"(%258) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %264 = "llvm.load"(%261) : (!llvm.ptr) -> i32
      %265 = "llvm.getelementptr"(%263, %264) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %266 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %267 = "llvm.getelementptr"(%265, %266) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%267) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_reopen_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb36(%268 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %270 : !llvm.ptr):
      %271 = "mid.wrap"(%268) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %272 = "hi.cast"(%271) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %273 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %274 = "mid.get_field"(%272) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %275 = "mid.unwrap"(%273) : (!hi.bool) -> i1
      %276 = "mid.unwrap"(%274) : (!hi.bool) -> i1
      %277 = "mid.comparison"(%275, %276) {"op" = "EQ"} : (i1, i1) -> i1
      %278 = "mid.wrap"(%277) : (i1) -> !hi.bool
      %279 = "mid.unwrap"(%278) : (!hi.bool) -> i1
      "mid.if"(%279) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %280 = "mid.get_field"(%272) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %281 = "mid.unwrap"(%280) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %282 = "mid.call"(%281) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %283 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %284 = "hi.cast"(%283) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%272, %284) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
      %285 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %286 = "mid.unwrap"(%282) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %287 = "mid.unwrap"(%285) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %288 = "mid.comparison"(%286, %287) {"op" = "EQ"} : (i32, i32) -> i1
      %289 = "mid.wrap"(%288) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %290 = "mid.unwrap"(%289) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%290) ({
        %291 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %292 = "mid.unwrap"(%291) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %293 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%293, %292) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %294 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %295 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %296 = "hi.cast"(%295) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %297 = "mid.create_buffer"(%296) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %298 = "mid.refer"(%297) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %299 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %300 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%298, %300, %299) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %301 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %302 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %303 = "mid.unwrap"(%298) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %304 = "mid.unwrap"(%301) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %305 = "mid.unwrap"(%302) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %306 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %307 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %308 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %309 = "hi.cast"(%298) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %310 = "mid.unwrap"(%309) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %311 = "hi.cast"(%307) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %312 = "mid.unwrap"(%311) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %313 = "hi.cast"(%308) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %314 = "mid.unwrap"(%313) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %315 = "mid.unwrap"(%306) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %316 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %317 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %318 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %319 = "mid.parameterizations_array"(%316, %317, %318) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%319, %315, %310, %312, %314) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %320 = "hi.cast"(%294) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %321 = "mid.unwrap"(%320) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %322 = "hi.cast"(%306) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %323 = "mid.unwrap"(%322) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %324 = "mid.unwrap"(%291) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %325 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %326 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %327 = "mid.parameterizations_array"(%325, %326) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%327, %324, %321, %323) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %328 = "hi.cast"(%291) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %329 = "mid.unwrap"(%328) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %330 = "mid.coro_yield"(%329) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %331 = "mid.wrap"(%330) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
    }) {"func_name" = "File_close_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb37(%332 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %333 : !llvm.ptr):
      %334 = "mid.invariant"(%333) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %335 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %336 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%336, %335) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb39:
      %337 = "llvm.extractvalue"(%332) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %338 = "llvm.load"(%335) : (!llvm.ptr) -> i32
      %339 = "llvm.getelementptr"(%337, %338) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %340 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %341 = "llvm.getelementptr"(%339, %340) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%341) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_close_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb40(%342 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %343 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %344 : !llvm.ptr):
      %345 = "mid.wrap"(%342) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %346 = "hi.cast"(%345) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %347 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %348 = "mid.get_field"(%346) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %349 = "mid.unwrap"(%347) : (!hi.bool) -> i1
      %350 = "mid.unwrap"(%348) : (!hi.bool) -> i1
      %351 = "mid.comparison"(%349, %350) {"op" = "EQ"} : (i1, i1) -> i1
      %352 = "mid.wrap"(%351) : (i1) -> !hi.bool
      %353 = "mid.unwrap"(%352) : (!hi.bool) -> i1
      "mid.if"(%353) ({
        %354 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %355 = "mid.unwrap"(%354) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %356 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%356, %355) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %357 = "mid.literal"() {"value" = 48 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %358 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %359 = "hi.cast"(%358) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %360 = "mid.create_buffer"(%359) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %361 = "mid.refer"(%360) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %362 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %363 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%361, %363, %362) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %364 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %365 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %366 = "mid.unwrap"(%361) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %367 = "mid.unwrap"(%364) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %368 = "mid.unwrap"(%365) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %369 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %370 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %371 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %372 = "hi.cast"(%361) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %373 = "mid.unwrap"(%372) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %374 = "hi.cast"(%370) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %375 = "mid.unwrap"(%374) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %376 = "hi.cast"(%371) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %377 = "mid.unwrap"(%376) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %378 = "mid.unwrap"(%369) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %379 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %380 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %381 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %382 = "mid.parameterizations_array"(%379, %380, %381) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%382, %378, %373, %375, %377) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %383 = "hi.cast"(%357) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %384 = "mid.unwrap"(%383) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %385 = "hi.cast"(%369) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %386 = "mid.unwrap"(%385) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %387 = "mid.unwrap"(%354) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %388 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %389 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %390 = "mid.parameterizations_array"(%388, %389) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%390, %387, %384, %386) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %391 = "hi.cast"(%354) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %392 = "mid.unwrap"(%391) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %393 = "mid.coro_yield"(%392) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %394 = "mid.wrap"(%393) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
      %395 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %396 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %397 = "mid.get_field"(%346) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %398 = "mid.unwrap"(%397) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %399 = "mid.call"(%398) {"func_name" = "ftell", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %400 = "mid.get_field"(%346) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %401 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %402 = "mid.unwrap"(%400) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %403 = "mid.unwrap"(%401) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %404 = "mid.unwrap"(%395) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %405 = "mid.call"(%402, %403, %404) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %406 = "mid.get_field"(%346) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %407 = "mid.unwrap"(%406) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %408 = "mid.call"(%407) {"func_name" = "ftell", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %409 = "mid.get_field"(%346) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %410 = "mid.unwrap"(%409) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %411 = "mid.unwrap"(%399) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %412 = "mid.unwrap"(%396) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %413 = "mid.call"(%410, %411, %412) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %414 = "hi.cast"(%408) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.return"(%414) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "File_size_", "result_type" = i64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb41(%415 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %416 : !llvm.ptr):
      %417 = "mid.invariant"(%416) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %418 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb42] : () -> ()
    ^bb42:
      %419 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%419, %418) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      %420 = "llvm.extractvalue"(%415) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %421 = "llvm.load"(%418) : (!llvm.ptr) -> i32
      %422 = "llvm.getelementptr"(%420, %421) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %423 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %424 = "llvm.getelementptr"(%422, %423) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%424) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb44(%425 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %427 : !llvm.ptr):
      %428 = "mid.wrap"(%425) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %429 = "hi.cast"(%428) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %430 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %431 = "mid.get_field"(%429) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %432 = "mid.unwrap"(%430) : (!hi.bool) -> i1
      %433 = "mid.unwrap"(%431) : (!hi.bool) -> i1
      %434 = "mid.comparison"(%432, %433) {"op" = "EQ"} : (i1, i1) -> i1
      %435 = "mid.wrap"(%434) : (i1) -> !hi.bool
      %436 = "mid.unwrap"(%435) : (!hi.bool) -> i1
      "mid.if"(%436) ({
        %437 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %438 = "mid.unwrap"(%437) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %439 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%439, %438) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %440 = "mid.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %441 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %442 = "hi.cast"(%441) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %443 = "mid.create_buffer"(%442) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %444 = "mid.refer"(%443) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %445 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %446 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%444, %446, %445) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %447 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %448 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %449 = "mid.unwrap"(%444) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %450 = "mid.unwrap"(%447) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %451 = "mid.unwrap"(%448) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %452 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %453 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %454 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %455 = "hi.cast"(%444) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %456 = "mid.unwrap"(%455) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %457 = "hi.cast"(%453) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %458 = "mid.unwrap"(%457) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %459 = "hi.cast"(%454) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %460 = "mid.unwrap"(%459) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %461 = "mid.unwrap"(%452) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %462 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %463 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %464 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %465 = "mid.parameterizations_array"(%462, %463, %464) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%465, %461, %456, %458, %460) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %466 = "hi.cast"(%440) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %467 = "mid.unwrap"(%466) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %468 = "hi.cast"(%452) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %469 = "mid.unwrap"(%468) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %470 = "mid.unwrap"(%437) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %471 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %472 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %473 = "mid.parameterizations_array"(%471, %472) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%473, %470, %467, %469) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %474 = "hi.cast"(%437) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %475 = "mid.unwrap"(%474) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %476 = "mid.coro_yield"(%475) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %477 = "mid.wrap"(%476) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
      %478 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %479 = "mid.get_field"(%429) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %480 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %481 = "mid.unwrap"(%479) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %482 = "mid.unwrap"(%480) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %483 = "mid.unwrap"(%478) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %484 = "mid.call"(%481, %482, %483) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %485 = "mid.unwrap"(%429) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %486 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %487 = "mid.method_call"(%486, %485) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = i64, "ret_type_unq" = i64} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %488 = "hi.cast"(%487) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %489 = "hi.cast"(%488) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %490 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %491 = "mid.unwrap"(%489) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %492 = "mid.unwrap"(%490) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %493 = "mid.arithmetic"(%491, %492) {"op" = "ADD"} : (i32, i32) -> i32
      %494 = "mid.wrap"(%493) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %495 = "hi.cast"(%494) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %496 = "mid.create_buffer"(%495) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %497 = "mid.refer"(%496) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %498 = "mid.literal"() {"value" = 1 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %499 = "mid.get_field"(%429) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %500 = "mid.unwrap"(%497) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %501 = "mid.unwrap"(%498) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %502 = "mid.unwrap"(%488) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %503 = "mid.unwrap"(%499) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %504 = "mid.call"(%500, %501, %502, %503) {"func_name" = "fread", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %505 = "mid.unwrap"(%504) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %506 = "mid.unwrap"(%488) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %507 = "mid.comparison"(%505, %506) {"op" = "LT"} : (i64, i64) -> i1
      %508 = "mid.wrap"(%507) : (i1) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %509 = "mid.unwrap"(%508) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%509) ({
        %510 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %511 = "mid.unwrap"(%510) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %512 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%512, %511) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %513 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %514 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %515 = "hi.cast"(%514) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %516 = "mid.create_buffer"(%515) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %517 = "mid.refer"(%516) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %518 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %519 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%517, %519, %518) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %520 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %521 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %522 = "mid.unwrap"(%517) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %523 = "mid.unwrap"(%520) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %524 = "mid.unwrap"(%521) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %525 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %526 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %527 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %528 = "hi.cast"(%517) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %529 = "mid.unwrap"(%528) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %530 = "hi.cast"(%526) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %531 = "mid.unwrap"(%530) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %532 = "hi.cast"(%527) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %533 = "mid.unwrap"(%532) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %534 = "mid.unwrap"(%525) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %535 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %536 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %537 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %538 = "mid.parameterizations_array"(%535, %536, %537) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%538, %534, %529, %531, %533) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %539 = "hi.cast"(%513) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %540 = "mid.unwrap"(%539) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %541 = "hi.cast"(%525) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %542 = "mid.unwrap"(%541) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %543 = "mid.unwrap"(%510) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %544 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %545 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %546 = "mid.parameterizations_array"(%544, %545) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%546, %543, %540, %542) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %547 = "hi.cast"(%510) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %548 = "mid.unwrap"(%547) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %549 = "mid.coro_yield"(%548) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %550 = "mid.wrap"(%549) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
      %551 = "hi.cast"(%488) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %552 = "mid.unwrap"(%497) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %553 = "mid.unwrap"(%551) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %554 = "mid.unwrap"(%494) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %555 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %556 = "hi.cast"(%488) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %557 = "hi.cast"(%497) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %558 = "mid.unwrap"(%557) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %559 = "hi.cast"(%556) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %560 = "mid.unwrap"(%559) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %561 = "hi.cast"(%494) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %562 = "mid.unwrap"(%561) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %563 = "mid.unwrap"(%555) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %564 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %565 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %566 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %567 = "mid.parameterizations_array"(%564, %565, %566) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%567, %563, %558, %560, %562) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %568 = "hi.cast"(%555) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%568) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "File_read_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb45(%569 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %570 : !llvm.ptr):
      %571 = "mid.invariant"(%570) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %572 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb46] : () -> ()
    ^bb46:
      %573 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%573, %572) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb47:
      %574 = "llvm.extractvalue"(%569) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %575 = "llvm.load"(%572) : (!llvm.ptr) -> i32
      %576 = "llvm.getelementptr"(%574, %575) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %577 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %578 = "llvm.getelementptr"(%576, %577) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%578) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_read_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb48(%579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %580 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %581 : !llvm.ptr):
      %582 = "mid.wrap"(%579) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %583 = "hi.cast"(%582) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %584 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %585 = "mid.get_field"(%583) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %586 = "mid.unwrap"(%584) : (!hi.bool) -> i1
      %587 = "mid.unwrap"(%585) : (!hi.bool) -> i1
      %588 = "mid.comparison"(%586, %587) {"op" = "EQ"} : (i1, i1) -> i1
      %589 = "mid.wrap"(%588) : (i1) -> !hi.bool
      %590 = "mid.unwrap"(%589) : (!hi.bool) -> i1
      "mid.if"(%590) ({
        %591 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %592 = "mid.unwrap"(%591) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %593 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%593, %592) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %594 = "mid.literal"() {"value" = 70 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %595 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %596 = "hi.cast"(%595) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %597 = "mid.create_buffer"(%596) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %598 = "mid.refer"(%597) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %599 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %600 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%598, %600, %599) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %601 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %602 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %603 = "mid.unwrap"(%598) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %604 = "mid.unwrap"(%601) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %605 = "mid.unwrap"(%602) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %606 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %607 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %608 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %609 = "hi.cast"(%598) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %610 = "mid.unwrap"(%609) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %611 = "hi.cast"(%607) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %612 = "mid.unwrap"(%611) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %613 = "hi.cast"(%608) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %614 = "mid.unwrap"(%613) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %615 = "mid.unwrap"(%606) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %616 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %617 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %618 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %619 = "mid.parameterizations_array"(%616, %617, %618) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%619, %615, %610, %612, %614) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %620 = "hi.cast"(%594) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %621 = "mid.unwrap"(%620) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %622 = "hi.cast"(%606) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %623 = "mid.unwrap"(%622) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %624 = "mid.unwrap"(%591) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %625 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %626 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %627 = "mid.parameterizations_array"(%625, %626) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%627, %624, %621, %623) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %628 = "hi.cast"(%591) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %629 = "mid.unwrap"(%628) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %630 = "mid.coro_yield"(%629) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %631 = "mid.wrap"(%630) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
      %632 = "mid.get_field"(%583) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %633 = "mid.unwrap"(%632) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %634 = "mid.call"(%633) {"func_name" = "fgetc", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %635 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %636 = "mid.unwrap"(%634) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %637 = "mid.unwrap"(%635) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %638 = "mid.comparison"(%636, %637) {"op" = "EQ"} : (i32, i32) -> i1
      %639 = "mid.wrap"(%638) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %640 = "mid.unwrap"(%639) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%640) ({
        %641 = "mid.get_field"(%583) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
        %642 = "mid.unwrap"(%641) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %643 = "mid.call"(%642) {"func_name" = "ferror", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %644 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %645 = "mid.unwrap"(%643) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %646 = "mid.unwrap"(%644) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %647 = "mid.comparison"(%645, %646) {"op" = "NEQ"} : (i32, i32) -> i1
        %648 = "mid.wrap"(%647) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %649 = "mid.unwrap"(%648) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%649) ({
          %650 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
          %651 = "mid.unwrap"(%650) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %652 = "mid.parameterizations_array"() : () -> !llvm.ptr
          "mid.method_call"(%652, %651) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
          %653 = "mid.literal"() {"value" = 73 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %654 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %655 = "hi.cast"(%654) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %656 = "mid.create_buffer"(%655) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
          %657 = "mid.refer"(%656) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %658 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
          %659 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
          "mid.buffer_set"(%657, %659, %658) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
          %660 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %661 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %662 = "mid.unwrap"(%657) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %663 = "mid.unwrap"(%660) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %664 = "mid.unwrap"(%661) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %665 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
          %666 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %667 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %668 = "hi.cast"(%657) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %669 = "mid.unwrap"(%668) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %670 = "hi.cast"(%666) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %671 = "mid.unwrap"(%670) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %672 = "hi.cast"(%667) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %673 = "mid.unwrap"(%672) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %674 = "mid.unwrap"(%665) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %675 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %676 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %677 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %678 = "mid.parameterizations_array"(%675, %676, %677) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%678, %674, %669, %671, %673) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
          %679 = "hi.cast"(%653) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %680 = "mid.unwrap"(%679) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %681 = "hi.cast"(%665) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
          %682 = "mid.unwrap"(%681) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %683 = "mid.unwrap"(%650) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %684 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %685 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
          %686 = "mid.parameterizations_array"(%684, %685) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%686, %683, %680, %682) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
          %687 = "hi.cast"(%650) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
          %688 = "mid.unwrap"(%687) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %689 = "mid.coro_yield"(%688) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
          %690 = "mid.wrap"(%689) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
        }) : (i1) -> ()
        %691 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %692 = "hi.cast"(%691) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.return"(%692) : (!hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %693 = "hi.cast"(%634) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %694 = "hi.cast"(%693) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>
      "mid.return"(%694) : (!hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
    }) {"func_name" = "File_read_byte_", "result_type" = !llvm.struct<(!llvm.ptr, i8)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb49(%695 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %696 : !llvm.ptr):
      %697 = "mid.invariant"(%696) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %698 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb50] : () -> ()
    ^bb50:
      %699 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%699, %698) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb51] : () -> ()
    ^bb51:
      %700 = "llvm.extractvalue"(%695) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %701 = "llvm.load"(%698) : (!llvm.ptr) -> i32
      %702 = "llvm.getelementptr"(%700, %701) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %703 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %704 = "llvm.getelementptr"(%702, %703) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%704) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_read_byte_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb52(%705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %706 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %707 : !llvm.ptr, %708 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %709 = "mid.wrap"(%705) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %710 = "hi.cast"(%709) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %711 = "mid.wrap"(%708) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %712 = "hi.cast"(%711) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %713 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %714 = "mid.get_field"(%710) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %715 = "mid.unwrap"(%713) : (!hi.bool) -> i1
      %716 = "mid.unwrap"(%714) : (!hi.bool) -> i1
      %717 = "mid.comparison"(%715, %716) {"op" = "EQ"} : (i1, i1) -> i1
      %718 = "mid.wrap"(%717) : (i1) -> !hi.bool
      %719 = "mid.unwrap"(%718) : (!hi.bool) -> i1
      "mid.if"(%719) ({
        %720 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %721 = "mid.unwrap"(%720) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %722 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%722, %721) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %723 = "mid.literal"() {"value" = 79 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %724 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %725 = "hi.cast"(%724) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %726 = "mid.create_buffer"(%725) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %727 = "mid.refer"(%726) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %728 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %729 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%727, %729, %728) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %730 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %731 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %732 = "mid.unwrap"(%727) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %733 = "mid.unwrap"(%730) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %734 = "mid.unwrap"(%731) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %735 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %736 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %737 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %738 = "hi.cast"(%727) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %739 = "mid.unwrap"(%738) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %740 = "hi.cast"(%736) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %741 = "mid.unwrap"(%740) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %742 = "hi.cast"(%737) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %743 = "mid.unwrap"(%742) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %744 = "mid.unwrap"(%735) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %745 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %746 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %747 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %748 = "mid.parameterizations_array"(%745, %746, %747) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%748, %744, %739, %741, %743) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %749 = "hi.cast"(%723) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %750 = "mid.unwrap"(%749) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %751 = "hi.cast"(%735) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %752 = "mid.unwrap"(%751) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %753 = "mid.unwrap"(%720) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %754 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %755 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %756 = "mid.parameterizations_array"(%754, %755) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%756, %753, %750, %752) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %757 = "hi.cast"(%720) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %758 = "mid.unwrap"(%757) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %759 = "mid.coro_yield"(%758) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %760 = "mid.wrap"(%759) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
      %761 = "mid.unwrap"(%712) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %762 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %763 = "mid.method_call"(%762, %761) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %764 = "hi.cast"(%763) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %765 = "hi.cast"(%764) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %766 = "mid.literal"() {"value" = 1 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %767 = "mid.unwrap"(%712) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %768 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %769 = "mid.method_call"(%768, %767) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %770 = "hi.cast"(%769) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %771 = "mid.get_field"(%710) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %772 = "mid.unwrap"(%770) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %773 = "mid.unwrap"(%766) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %774 = "mid.unwrap"(%765) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %775 = "mid.unwrap"(%771) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %776 = "mid.call"(%772, %773, %774, %775) {"func_name" = "fwrite", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %777 = "mid.unwrap"(%776) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %778 = "mid.unwrap"(%765) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %779 = "mid.comparison"(%777, %778) {"op" = "LT"} : (i64, i64) -> i1
      %780 = "mid.wrap"(%779) : (i1) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %781 = "mid.unwrap"(%780) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%781) ({
        %782 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %783 = "mid.unwrap"(%782) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %784 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%784, %783) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %785 = "mid.literal"() {"value" = 83 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %786 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %787 = "hi.cast"(%786) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %788 = "mid.create_buffer"(%787) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %789 = "mid.refer"(%788) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %790 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %791 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%789, %791, %790) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %792 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %793 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %794 = "mid.unwrap"(%789) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %795 = "mid.unwrap"(%792) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %796 = "mid.unwrap"(%793) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %797 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %798 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %799 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %800 = "hi.cast"(%789) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %801 = "mid.unwrap"(%800) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %802 = "hi.cast"(%798) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %803 = "mid.unwrap"(%802) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %804 = "hi.cast"(%799) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %805 = "mid.unwrap"(%804) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %806 = "mid.unwrap"(%797) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %807 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %808 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %809 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %810 = "mid.parameterizations_array"(%807, %808, %809) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%810, %806, %801, %803, %805) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %811 = "hi.cast"(%785) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %812 = "mid.unwrap"(%811) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %813 = "hi.cast"(%797) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %814 = "mid.unwrap"(%813) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %815 = "mid.unwrap"(%782) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %816 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %817 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %818 = "mid.parameterizations_array"(%816, %817) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%818, %815, %812, %814) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %819 = "hi.cast"(%782) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %820 = "mid.unwrap"(%819) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %821 = "mid.coro_yield"(%820) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %822 = "mid.wrap"(%821) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.fatptr<"FileSystemError">]>
      }) : (i1) -> ()
      %823 = "hi.cast"(%776) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.return"(%823) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "File_write_textString", "result_type" = i64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb53(%824 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %825 : !llvm.ptr):
      %826 = "mid.invariant"(%825) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %827 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb54] : () -> ()
    ^bb55:
      %828 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%828, %827) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb56] : () -> ()
    ^bb54:
      %829 = "llvm.getelementptr"(%825) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %830 = "mid.checkflag"(%829) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %831 = "llvm.load"(%830) : (!hi.bool) -> i1
      "cf.cond_br"(%831) [^bb55, ^bb55] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb56:
      %832 = "llvm.extractvalue"(%824) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %833 = "llvm.load"(%827) : (!llvm.ptr) -> i32
      %834 = "llvm.getelementptr"(%832, %833) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %835 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %836 = "llvm.getelementptr"(%834, %835) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%836) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_write_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileProcessor", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FileProcessor_field_FileProcessor_0"} : () -> ()
    "mid.func"() ({
    ^bb57(%837 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %838 : !llvm.ptr):
      %839 = "mid.invariant"(%838) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %840 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb58] : () -> ()
    ^bb59:
      %841 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%841, %840) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb60] : () -> ()
    ^bb58:
      %842 = "llvm.getelementptr"(%838) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %843 = "mid.checkflag"(%842) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %844 = "llvm.load"(%843) : (!hi.bool) -> i1
      "cf.cond_br"(%844) [^bb59, ^bb59] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb60:
      %845 = "llvm.extractvalue"(%837) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %846 = "llvm.load"(%840) : (!llvm.ptr) -> i32
      %847 = "llvm.getelementptr"(%845, %846) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %848 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %849 = "llvm.getelementptr"(%847, %848) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%849) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileProcessor_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileReader", "types" = []} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FileReader_field_FileReader_0", "id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> ()
    "mid.func"() ({
    ^bb61(%850 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %851 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %852 : !llvm.ptr):
      %853 = "mid.wrap"(%850) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileReader">
      %854 = "hi.cast"(%853) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.fatptr<"FileReader">, "from_typ_name" = "FileReader", "to_typ_name" = "FileReader"} : (!hi.fatptr<"FileReader">) -> !hi.fatptr<"FileReader">
    }) {"func_name" = "FileReader_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb62(%855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %856 : !llvm.ptr):
      %857 = "mid.invariant"(%856) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %858 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb63] : () -> ()
    ^bb63:
      %859 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%859, %858) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb64] : () -> ()
    ^bb64:
      %860 = "llvm.extractvalue"(%855) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %861 = "llvm.load"(%858) : (!llvm.ptr) -> i32
      %862 = "llvm.getelementptr"(%860, %861) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %863 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %864 = "llvm.getelementptr"(%862, %863) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%864) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileReader_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb65(%865 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %866 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %867 : !llvm.ptr, %868 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %869 = "mid.wrap"(%865) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileReader">
      %870 = "hi.cast"(%869) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.fatptr<"FileReader">, "from_typ_name" = "FileReader", "to_typ_name" = "FileReader"} : (!hi.fatptr<"FileReader">) -> !hi.fatptr<"FileReader">
      %871 = "mid.wrap"(%868) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %872 = "hi.cast"(%871) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %873 = "mid.unwrap"(%872) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %874 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %875 = "mid.method_call"(%874, %873) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %876 = "hi.cast"(%875) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %877 = "hi.cast"(%876) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.type_param<"T", !hi.any, "FileProcessor">, "from_typ_name" = "String", "to_typ_name" = "any_typ"} : (!hi.fatptr<"String">) -> !hi.type_param<"T", !hi.any, "FileProcessor">
      "mid.return"(%877) : (!hi.type_param<"T", !hi.any, "FileProcessor">) -> ()
    }) {"func_name" = "FileReader_process_fileFile", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb66(%878 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %879 : !llvm.ptr):
      %880 = "mid.invariant"(%879) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %881 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb67] : () -> ()
    ^bb68:
      %882 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%882, %881) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb69] : () -> ()
    ^bb67:
      %883 = "llvm.getelementptr"(%879) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %884 = "mid.checkflag"(%883) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %885 = "llvm.load"(%884) : (!hi.bool) -> i1
      "cf.cond_br"(%885) [^bb68, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %886 = "llvm.extractvalue"(%878) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %887 = "llvm.load"(%881) : (!llvm.ptr) -> i32
      %888 = "llvm.getelementptr"(%886, %887) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %889 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %890 = "llvm.getelementptr"(%888, %889) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%890) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileReader_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileWriter", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileWriter_getter_text", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileWriter_setter_text", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileWriter_field_text", "getter_name" = "FileWriter_getter_text", "setter_name" = "FileWriter_setter_text"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "FileWriter_field_FileWriter_0", "id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["i64"]} : () -> ()
    "mid.func"() ({
    ^bb70(%891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %892 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %893 : !llvm.ptr, %894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %895 = "mid.wrap"(%891) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileWriter">
      %896 = "hi.cast"(%895) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.fatptr<"FileWriter">, "from_typ_name" = "FileWriter", "to_typ_name" = "FileWriter"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"FileWriter">
      %897 = "mid.wrap"(%894) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %898 = "hi.cast"(%897) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %899 = "hi.cast"(%898) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%896, %899) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"FileWriter">, !hi.fatptr<"String">) -> ()
    }) {"func_name" = "FileWriter_init_textString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%900 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %901 : !llvm.ptr):
      %902 = "mid.invariant"(%901) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %903 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %904 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%904, %903) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb72:
      %905 = "llvm.getelementptr"(%901) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %906 = "mid.checkflag"(%905) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %907 = "llvm.load"(%906) : (!hi.bool) -> i1
      "cf.cond_br"(%907) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %908 = "llvm.extractvalue"(%900) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %909 = "llvm.load"(%903) : (!llvm.ptr) -> i32
      %910 = "llvm.getelementptr"(%908, %909) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %911 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %912 = "llvm.getelementptr"(%910, %911) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%912) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileWriter_B_init_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb75(%913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %914 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %915 : !llvm.ptr, %916 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %917 = "mid.wrap"(%913) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileWriter">
      %918 = "hi.cast"(%917) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.fatptr<"FileWriter">, "from_typ_name" = "FileWriter", "to_typ_name" = "FileWriter"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"FileWriter">
      %919 = "mid.wrap"(%916) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %920 = "hi.cast"(%919) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %921 = "mid.get_field"(%918) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"String">
      %922 = "hi.cast"(%921) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %923 = "mid.unwrap"(%922) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %924 = "mid.unwrap"(%920) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %925 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %926 = "mid.parameterizations_array"(%925) : (!llvm.ptr) -> !llvm.ptr
      %927 = "mid.method_call"(%926, %924, %923) {"offset" = 11 : i32, "vptrs" = [#none], "vtable_size" = 20 : i64, "ret_type" = i64, "ret_type_unq" = i64} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %928 = "hi.cast"(%927) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %929 = "hi.cast"(%928) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"T", !hi.any, "FileProcessor">, "from_typ_name" = "i64_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.type_param<"T", !hi.any, "FileProcessor">
      "mid.return"(%929) : (!hi.type_param<"T", !hi.any, "FileProcessor">) -> ()
    }) {"func_name" = "FileWriter_process_fileFile", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb76(%930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %931 : !llvm.ptr):
      %932 = "mid.invariant"(%931) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %933 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %934 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%934, %933) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb77:
      %935 = "llvm.getelementptr"(%931) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %936 = "mid.checkflag"(%935) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %937 = "llvm.load"(%936) : (!hi.bool) -> i1
      "cf.cond_br"(%937) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %938 = "llvm.extractvalue"(%930) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %939 = "llvm.load"(%933) : (!llvm.ptr) -> i32
      %940 = "llvm.getelementptr"(%938, %939) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %941 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %942 = "llvm.getelementptr"(%940, %941) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%942) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileWriter_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileSystem", "types" = []} : () -> ()
    "mid.arg_passer"() {"func_name" = "coroutine_ccgtwngqyf_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : () -> ()
    "mid.buffer_filler"() {"func_name" = "coroutine_ccgtwngqyf_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : () -> ()
    "mid.func"() ({
    ^bb80(%943 : !llvm.ptr, %944 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %945 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %946 : !llvm.struct<(!llvm.ptr, i160)>):
      %947 = "mid.wrap"(%944) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %948 = "hi.cast"(%947) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %949 = "mid.wrap"(%945) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %950 = "hi.cast"(%949) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %951 = "mid.wrap"(%946) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>
      %952 = "hi.cast"(%951) {"from_typ" = !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>, "to_typ" = !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, "from_typ_name" = "union_typ", "to_typ_name" = "function_typ"} : (!hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>) -> !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>
      %953 = "mid.unwrap"(%948) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %954 = "mid.unwrap"(%950) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %955 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "class_name" = "File", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"File">
      %956 = "hi.cast"(%948) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %957 = "mid.unwrap"(%956) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %958 = "hi.cast"(%950) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %959 = "mid.unwrap"(%958) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %960 = "mid.unwrap"(%955) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %961 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %962 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %963 = "mid.parameterizations_array"(%961, %962) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%963, %960, %957, %959) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %964 = "mid.refer"(%955) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %965 = "mid.unwrap"(%964) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %966 = "mid.coro_create"(%952, %965) {"arg_passer" = @coroutine_ccgtwngqyf_passer, "buffer_filler" = @coroutine_ccgtwngqyf_buffer_filler} : (!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>
      %967 = "mid.refer"(%966) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>
      %968 = "mid.coro_call"(%967) : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %969 = "mid.wrap"(%968) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.any
      %970 = "mid.unwrap"(%964) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %971 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%971, %970) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %972 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %973 = "mid.unwrap"(%972) : (!hi.bool) -> i1
      %974 = "hi.cast"(%969) {"from_typ" = !hi.any, "to_typ" = !hi.any, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.any) -> !hi.any
      "mid.if"(%973) ({
        %975 = "hi.cast"(%974) {"from_typ" = !hi.any, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "any_typ", "to_typ_name" = "Exception"} : (!hi.any) -> !hi.fatptr<"Exception">
        %976 = "hi.cast"(%975) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %977 = "mid.unwrap"(%976) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %978 = "mid.coro_yield"(%977) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %979 = "mid.wrap"(%978) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %980 = "hi.cast"(%975) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.any, "from_typ_name" = "Exception", "to_typ_name" = "any_typ"} : (!hi.fatptr<"Exception">) -> !hi.any
        "mid.assign"(%974, %980) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.any, !hi.any) -> ()
      }) : (i1) -> ()
      %981 = "llvm.load"(%967) : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !llvm.ptr
      %982 = "mid.coro_get_result"(%981) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %983 = "mid.wrap"(%982) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
      %984 = "llvm.getelementptr"(%943) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %985 = "llvm.load"(%984) : (!llvm.ptr) -> !llvm.ptr
      %986 = "mid.parameterization_indexation"(%985) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %987 = "mid.checkflag"(%983) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %988 = "mid.unwrap"(%987) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %989 = "hi.cast"(%983) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
      "mid.if"(%988) ({
        %990 = "hi.cast"(%989) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "FileSystem">
        %991 = "hi.cast"(%990) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
        "mid.return"(%991) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
        %992 = "hi.cast"(%990) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
        "mid.assign"(%989, %992) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb81(%993 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %994 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %995 = "mid.wrap"(%993) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>
      %996 = "mid.wrap"(%994) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %997 = "hi.cast"(%996) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %998 = "mid.unwrap"(%997) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %999 = "mid.unwrap"(%995) : (!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1000 = "mid.parameterization"() {"id_hierarchy" = ["File"], "name_hierarchy" = ["File"]} : () -> !llvm.ptr
      %1001 = "mid.parameterizations_array"(%1000) : (!llvm.ptr) -> !llvm.ptr
      %1002 = "mid.method_call"(%1001, %999, %998) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"T", !hi.any, "FileProcessor">
      %1003 = "hi.cast"(%1002) {"from_typ" = !hi.type_param<"T", !hi.any, "FileProcessor">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileProcessor">) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1004 = "hi.cast"(%1003) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
      "mid.return"(%1004) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
    }) {"func_name" = "_functionliteral_wiakzbjsnn", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.arg_passer"() {"func_name" = "coroutine_nwpnwcptea_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
    "mid.buffer_filler"() {"func_name" = "coroutine_nwpnwcptea_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
    "mid.func"() ({
    ^bb82(%1005 : !llvm.ptr, %1006 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1008 : !llvm.struct<(!llvm.ptr, i160)>):
      %1009 = "mid.wrap"(%1006) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1010 = "hi.cast"(%1009) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1011 = "mid.wrap"(%1007) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1012 = "hi.cast"(%1011) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1013 = "mid.wrap"(%1008) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>
      %1014 = "hi.cast"(%1013) {"from_typ" = !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>, "to_typ" = !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, "from_typ_name" = "union_typ", "to_typ_name" = "FileProcessor"} : (!hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>) -> !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>
      %1015 = "mid.unwrap"(%1010) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1016 = "mid.unwrap"(%1012) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1017 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "class_name" = "File", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"File">
      %1018 = "hi.cast"(%1010) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1019 = "mid.unwrap"(%1018) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1020 = "hi.cast"(%1012) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1021 = "mid.unwrap"(%1020) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1022 = "mid.unwrap"(%1017) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1023 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1024 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1025 = "mid.parameterizations_array"(%1023, %1024) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1025, %1022, %1019, %1021) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1026 = "mid.refer"(%1017) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %1027 = "mid.addr_of"() {"global_name" = @_functionliteral_wiakzbjsnn} : () -> !llvm.ptr
      %1028 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "llvm.store"(%1027, %1028) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
      %1029 = "mid.unwrap"(%1014) : (!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1030 = "mid.unwrap"(%1026) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1031 = "mid.coro_create"(%1028, %1029, %1030) {"arg_passer" = @coroutine_nwpnwcptea_passer, "buffer_filler" = @coroutine_nwpnwcptea_buffer_filler} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>
      %1032 = "mid.refer"(%1031) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>
      %1033 = "mid.coro_call"(%1032) : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1034 = "mid.wrap"(%1033) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      %1035 = "mid.unwrap"(%1026) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1036 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1036, %1035) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1037 = "mid.checkflag"(%1034) {"typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1038 = "mid.unwrap"(%1037) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1039 = "hi.cast"(%1034) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      "mid.if"(%1038) ({
        %1040 = "hi.cast"(%1039) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "union_typ", "to_typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.fatptr<"Exception">
        %1041 = "hi.cast"(%1040) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %1042 = "mid.unwrap"(%1041) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1043 = "mid.coro_yield"(%1042) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1044 = "mid.wrap"(%1043) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %1045 = "hi.cast"(%1040) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        "mid.assign"(%1039, %1045) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1046 = "llvm.load"(%1032) : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !llvm.ptr
      %1047 = "mid.coro_get_result"(%1046) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %1048 = "mid.wrap"(%1047) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
      %1049 = "mid.wrap"(%1008) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.ptr
      %1050 = "mid.get_type_field"(%1049) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32} : (!llvm.ptr) -> !hi.reified_type
      %1051 = "mid.checkflag"(%1048) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1052 = "mid.unwrap"(%1051) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1053 = "hi.cast"(%1048) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
      "mid.if"(%1052) ({
        %1054 = "hi.cast"(%1053) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "FileSystem">
        %1055 = "hi.cast"(%1054) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
        "mid.return"(%1055) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
        %1056 = "hi.cast"(%1054) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
        "mid.assign"(%1053, %1056) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb83(%1057 : !llvm.ptr):
      %1058 = "mid.invariant"(%1057) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1059 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb84] : () -> ()
    ^bb85:
      %1060 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%1060, %1059) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb87:
      %1061 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%1061, %1059) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb88:
      %1062 = "llvm.getelementptr"(%1057) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1063 = "mid.checkflag"(%1062) {"typ_name" = "FileProcessor"} : (!llvm.ptr) -> !hi.bool
      %1064 = "llvm.load"(%1063) : (!hi.bool) -> i1
      "cf.cond_br"(%1064) [^bb85, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb89:
      %1065 = "llvm.getelementptr"(%1057) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1066 = "mid.checkflag"(%1065) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1067 = "llvm.load"(%1066) : (!hi.bool) -> i1
      "cf.cond_br"(%1067) [^bb87, ^bb87] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %1068 = "llvm.getelementptr"(%1057) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1069 = "mid.checkflag"(%1068) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1070 = "llvm.load"(%1069) : (!hi.bool) -> i1
      "cf.cond_br"(%1070) [^bb88, ^bb88] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb84:
      %1071 = "llvm.getelementptr"(%1057) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1072 = "mid.checkflag"(%1071) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1073 = "llvm.load"(%1072) : (!hi.bool) -> i1
      "cf.cond_br"(%1073) [^bb90, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb86:
      %1074 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1075 = "llvm.load"(%1059) : (!llvm.ptr) -> i32
      %1076 = "llvm.getelementptr"(%1074, %1075) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1077 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1078 = "llvm.getelementptr"(%1076, %1077) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1078) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb91(%1079 : !llvm.ptr, %1080 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1081 = "mid.wrap"(%1080) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1082 = "hi.cast"(%1081) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1083 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1084 = "hi.cast"(%1083) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1085 = "mid.create_buffer"(%1084) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1086 = "mid.refer"(%1085) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1087 = "mid.literal"() {"typ" = !llvm.array<2 x i8>, "value" = "rb"} : () -> !llvm.ptr
      %1088 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1086, %1088, %1087) {"typ" = !llvm.array<2 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1089 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1090 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1091 = "mid.unwrap"(%1086) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1092 = "mid.unwrap"(%1089) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1093 = "mid.unwrap"(%1090) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1094 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1095 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1096 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1097 = "hi.cast"(%1086) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1098 = "mid.unwrap"(%1097) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1099 = "hi.cast"(%1095) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1100 = "mid.unwrap"(%1099) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1101 = "hi.cast"(%1096) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1102 = "mid.unwrap"(%1101) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1103 = "mid.unwrap"(%1094) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1104 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1105 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1106 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1107 = "mid.parameterizations_array"(%1104, %1105, %1106) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1107, %1103, %1098, %1100, %1102) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1108 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "FileReader", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileReader">
      %1109 = "mid.unwrap"(%1108) : (!hi.fatptr<"FileReader">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1110 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1110, %1109) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1111 = "hi.cast"(%1082) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1112 = "mid.unwrap"(%1111) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1113 = "hi.cast"(%1094) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1114 = "mid.unwrap"(%1113) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1115 = "hi.cast"(%1108) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>, "from_typ_name" = "FileReader", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileReader">) -> !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>
      %1116 = "mid.unwrap"(%1115) : (!hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1117 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1118 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1119 = "mid.parameterization"() {"id_hierarchy" = ["FileReader"], "name_hierarchy" = ["FileReader"]} : () -> !llvm.ptr
      %1120 = "mid.parameterizations_array"(%1117, %1118, %1119) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1121 = "mid.class_method_call"(%1120, %1112, %1114, %1116) {"offset" = 0 : i32, "vptrs" = [#none, #none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1122 = "hi.cast"(%1121) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "any_typ", "to_typ_name" = "String"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.fatptr<"String">
      %1123 = "hi.cast"(%1122) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%1123) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "FileSystem__Self_read_file_file_nameString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb92(%1124 : !llvm.ptr):
      %1125 = "mid.invariant"(%1124) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1126 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb93] : () -> ()
    ^bb94:
      %1127 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1127, %1126) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb95] : () -> ()
    ^bb93:
      %1128 = "llvm.getelementptr"(%1124) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1129 = "mid.checkflag"(%1128) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1130 = "llvm.load"(%1129) : (!hi.bool) -> i1
      "cf.cond_br"(%1130) [^bb94, ^bb94] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb95:
      %1131 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1132 = "llvm.load"(%1126) : (!llvm.ptr) -> i32
      %1133 = "llvm.getelementptr"(%1131, %1132) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1134 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1135 = "llvm.getelementptr"(%1133, %1134) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1135) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_read_file_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb96(%1136 : !llvm.ptr, %1137 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1138 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1139 = "mid.wrap"(%1137) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1140 = "hi.cast"(%1139) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1141 = "mid.wrap"(%1138) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1142 = "hi.cast"(%1141) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1143 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1144 = "hi.cast"(%1143) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1145 = "mid.create_buffer"(%1144) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1146 = "mid.refer"(%1145) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1147 = "mid.literal"() {"typ" = !llvm.array<2 x i8>, "value" = "wb"} : () -> !llvm.ptr
      %1148 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1146, %1148, %1147) {"typ" = !llvm.array<2 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1149 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1150 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1151 = "mid.unwrap"(%1146) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1152 = "mid.unwrap"(%1149) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1153 = "mid.unwrap"(%1150) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1154 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1155 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1156 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1157 = "hi.cast"(%1146) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1158 = "mid.unwrap"(%1157) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1159 = "hi.cast"(%1155) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1160 = "mid.unwrap"(%1159) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1161 = "hi.cast"(%1156) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1162 = "mid.unwrap"(%1161) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1163 = "mid.unwrap"(%1154) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1164 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1165 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1166 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1167 = "mid.parameterizations_array"(%1164, %1165, %1166) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1167, %1163, %1158, %1160, %1162) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1168 = "mid.unwrap"(%1142) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1169 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileWriter", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileWriter">
      %1170 = "hi.cast"(%1142) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1171 = "mid.unwrap"(%1170) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1172 = "mid.unwrap"(%1169) : (!hi.fatptr<"FileWriter">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1173 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1174 = "mid.parameterizations_array"(%1173) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1174, %1172, %1171) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1175 = "hi.cast"(%1140) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1176 = "mid.unwrap"(%1175) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1177 = "hi.cast"(%1154) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1178 = "mid.unwrap"(%1177) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1179 = "hi.cast"(%1169) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>, "from_typ_name" = "FileWriter", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileWriter">) -> !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>
      %1180 = "mid.unwrap"(%1179) : (!hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1181 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1182 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1183 = "mid.parameterization"() {"id_hierarchy" = ["FileWriter"], "name_hierarchy" = ["FileWriter"]} : () -> !llvm.ptr
      %1184 = "mid.parameterizations_array"(%1181, %1182, %1183) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1185 = "mid.class_method_call"(%1184, %1176, %1178, %1180) {"offset" = 0 : i32, "vptrs" = [#none, #none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1186 = "hi.cast"(%1185) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "any_typ", "to_typ_name" = "i64_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
    }) {"func_name" = "FileSystem__Self_write_file_file_nameString_textString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb97(%1187 : !llvm.ptr):
      %1188 = "mid.invariant"(%1187) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1189 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb98] : () -> ()
    ^bb99:
      %1190 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1190, %1189) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb100] : () -> ()
    ^bb101:
      %1191 = "llvm.getelementptr"(%1187) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1192 = "mid.checkflag"(%1191) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1193 = "llvm.load"(%1192) : (!hi.bool) -> i1
      "cf.cond_br"(%1193) [^bb99, ^bb99] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb98:
      %1194 = "llvm.getelementptr"(%1187) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1195 = "mid.checkflag"(%1194) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1196 = "llvm.load"(%1195) : (!hi.bool) -> i1
      "cf.cond_br"(%1196) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb100:
      %1197 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1198 = "llvm.load"(%1189) : (!llvm.ptr) -> i32
      %1199 = "llvm.getelementptr"(%1197, %1198) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1200 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1201 = "llvm.getelementptr"(%1199, %1200) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1201) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_write_file_file_nameString_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "array"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Array", "methods" = [@Array_field_Array_0, @Array_field_buffer, @Array_field_length, @Array_field_capacity, @Array_B__Self_from_iterable_iterableIterableT, @Array_B_init_, @Array_B_init_capacityi32, @Array_B_init_lengthi32_capacityi32, @Array_B_init_bufferBufferT_lengthi32_capacityi32, @Array_B_length_, @Array_B_capacity_, @Array_B_append_xT, @Array_B_extend_otherArrayT, @Array_B_reserve_new_capacityi32, @Array_B__index_xi32, @Array_B__set_index_xi32_valueT, @Array_B_unchecked_index_xi32, @Array_B_unchecked_insert_xi32_valueT, @Array_B_size_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherCollectionT_interleave_otherIterableT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherIterableU_product_otherCollectionU, @Array_B_repr_, @Array__Self_from_iterable_iterableIterableT, @Array_init_, @Array_init_capacityi32, @Array_init_lengthi32_capacityi32, @Array_init_bufferBufferT_lengthi32_capacityi32, @Array_length_, @Array_capacity_, @Array_append_xT, @Array_extend_otherArrayT, @Array_reserve_new_capacityi32, @Array__index_xi32, @Array__set_index_xi32_valueT, @Array_unchecked_index_xi32, @Array_unchecked_insert_xi32_valueT, @Array_size_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @Array_repr_, @Array_field_Array_0, @Array_B_size_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherCollectionT_interleave_otherIterableT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherIterableU_product_otherCollectionU, @Array_size_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Iterable_product_otherIterableU, @Collection_product_otherCollectionU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherCollectionT_interleave_otherIterableT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherIterableU_product_otherCollectionU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherCollectionT_interleave_otherIterableT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherIterableU_product_otherCollectionU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_B_repr_, @Array_repr_], "hash_tbl" = [18446744073709551615 : i64, @Representable, @Collection, @any_typ, 18446744073709551615 : i64, @Container, @Array, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [0 : i32, 157 : i32, 75 : i32, 10 : i32, 0 : i32, 157 : i32, 10 : i32, 0 : i32, 0 : i32, 132 : i32, 157 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427389773 : i64, "hash_id" = 13185201323315417072 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_Array", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ArrayIterator", "methods" = [@ArrayIterator_field_ArrayIterator_0, @ArrayIterator_field_array, @ArrayIterator_field_index, @ArrayIterator_B_init_arrayArrayT, @ArrayIterator_B_next_, @ArrayIterator_init_arrayArrayT, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, @ArrayIterator, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 10 : i32, 17 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 3447345754186651411 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_ArrayIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Array_field_Array_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferArray.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferArray.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_buffer", "getter_name" = "Array_getter_buffer", "setter_name" = "Array_setter_buffer"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_length", "getter_name" = "Array_getter_length", "setter_name" = "Array_setter_length"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_capacity", "getter_name" = "Array_getter_capacity", "setter_name" = "Array_setter_capacity"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2 = "mid.wrap"(%1) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>
      %3 = "hi.cast"(%2) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>
      %4 = "mid.wrap"(%1) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %5 = "mid.get_type_field"(%4) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!llvm.ptr) -> !hi.reified_type
      %6 = "mid.new"(%5) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %7 = "mid.unwrap"(%6) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %8 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%8, %7) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %9 = "mid.refer"(%6) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %10 = "mid.unwrap"(%3) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %11 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %12 = "mid.method_call"(%11, %10) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %13 = "hi.cast"(%12) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      %14 = "mid.refer"(%13) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.while"() ({
        %15 = "mid.unwrap"(%14) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %16 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %17 = "mid.method_call"(%16, %15) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %18 = "hi.cast"(%17) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>
        %19 = "mid.wrap"(%1) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
        %20 = "mid.get_type_field"(%19) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!llvm.ptr) -> !hi.reified_type
        %21 = "mid.checkflag"(%18) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %22 = "mid.unwrap"(%21) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %23 = "hi.cast"(%18) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Array">
        %24 = "hi.cast"(%23) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %25 = "mid.unwrap"(%24) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
        %26 = "mid.unwrap"(%9) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %27 = "mid.wrap"(%1) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
        %28 = "mid.get_type_field"(%27) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!llvm.ptr) -> !hi.reified_type
        %29 = "mid.parameterizations_array"(%28) : (!hi.reified_type) -> !llvm.ptr
        %30 = "mid.method_call"(%29, %26, %25) {"offset" = 11 : i32, "vptrs" = ["any_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
        %31 = "hi.cast"(%30) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
        %32 = "hi.cast"(%23) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        "mid.assign"(%18, %32) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Array">) -> ()
      }) : () -> ()
      %33 = "hi.cast"(%9) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%33) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array__Self_from_iterable_iterableIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%34 : !llvm.ptr):
      %35 = "mid.invariant"(%34) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %36 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %37 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%37, %36) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %38 = "llvm.getelementptr"(%34) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %39 = "mid.checkflag"(%38) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %40 = "llvm.load"(%39) : (!hi.bool) -> i1
      "cf.cond_br"(%40) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %41 = "mid.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
      %42 = "llvm.load"(%36) : (!llvm.ptr) -> i32
      %43 = "llvm.getelementptr"(%41, %42) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %44 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %45 = "llvm.getelementptr"(%43, %44) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%45) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__Self_from_iterable_iterableIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%46 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %47 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %48 : !llvm.ptr):
      %49 = "mid.wrap"(%46) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %50 = "hi.cast"(%49) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %51 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %52 = "mid.get_type_field"(%50) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %53 = "hi.cast"(%51) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %54 = "mid.create_buffer"(%53, %52) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.reified_type) -> !llvm.ptr
      %55 = "hi.cast"(%54) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%50, %55) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %56 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %57 = "hi.cast"(%56) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%50, %57) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %58 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %59 = "hi.cast"(%58) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%50, %59) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%60 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %61 : !llvm.ptr):
      %62 = "mid.invariant"(%61) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %63 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %64 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%64, %63) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb8] : () -> ()
    ^bb8:
      %65 = "llvm.extractvalue"(%60) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %66 = "llvm.load"(%63) : (!llvm.ptr) -> i32
      %67 = "llvm.getelementptr"(%65, %66) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %68 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %69 = "llvm.getelementptr"(%67, %68) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%69) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb9(%70 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %71 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %72 : !llvm.ptr, %73 : i32):
      %74 = "mid.wrap"(%70) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %75 = "hi.cast"(%74) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %76 = "mid.wrap"(%73) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %77 = "hi.cast"(%76) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %78 = "hi.cast"(%77) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%75, %78) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %79 = "mid.get_field"(%75) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %80 = "mid.get_type_field"(%75) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %81 = "hi.cast"(%79) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %82 = "mid.create_buffer"(%81, %80) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.reified_type) -> !llvm.ptr
      %83 = "hi.cast"(%82) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%75, %83) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %84 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %85 = "hi.cast"(%84) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%75, %85) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_init_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb10(%86 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %87 : !llvm.ptr):
      %88 = "mid.invariant"(%87) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %89 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb11] : () -> ()
    ^bb12:
      %90 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%90, %89) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb11:
      %91 = "llvm.getelementptr"(%87) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %92 = "mid.checkflag"(%91) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %93 = "llvm.load"(%92) : (!hi.bool) -> i1
      "cf.cond_br"(%93) [^bb12, ^bb12] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb13:
      %94 = "llvm.extractvalue"(%86) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %95 = "llvm.load"(%89) : (!llvm.ptr) -> i32
      %96 = "llvm.getelementptr"(%94, %95) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %97 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %98 = "llvm.getelementptr"(%96, %97) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%98) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb14(%99 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %100 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %101 : !llvm.ptr, %102 : i32, %103 : i32):
      %104 = "mid.wrap"(%99) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %105 = "hi.cast"(%104) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %106 = "mid.wrap"(%102) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %107 = "hi.cast"(%106) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %108 = "hi.cast"(%107) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%105, %108) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %109 = "mid.wrap"(%103) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %110 = "hi.cast"(%109) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %111 = "hi.cast"(%110) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%105, %111) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %112 = "mid.get_field"(%105) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %113 = "mid.get_type_field"(%105) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %114 = "hi.cast"(%112) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %115 = "mid.create_buffer"(%114, %113) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.reified_type) -> !llvm.ptr
      %116 = "hi.cast"(%115) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%105, %116) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
    }) {"func_name" = "Array_init_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %118 : !llvm.ptr):
      %119 = "mid.invariant"(%118) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %120 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %121 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%121, %120) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb19:
      %122 = "llvm.getelementptr"(%118) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %123 = "mid.checkflag"(%122) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %124 = "llvm.load"(%123) : (!hi.bool) -> i1
      "cf.cond_br"(%124) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %125 = "llvm.getelementptr"(%118) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %126 = "mid.checkflag"(%125) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %127 = "llvm.load"(%126) : (!hi.bool) -> i1
      "cf.cond_br"(%127) [^bb19, ^bb19] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %128 = "llvm.extractvalue"(%117) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %129 = "llvm.load"(%120) : (!llvm.ptr) -> i32
      %130 = "llvm.getelementptr"(%128, %129) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %131 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %132 = "llvm.getelementptr"(%130, %131) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%132) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb20(%133 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %134 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %135 : !llvm.ptr, %136 : !llvm.struct<(!llvm.ptr)>, %137 : i32, %138 : i32):
      %139 = "mid.wrap"(%133) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %140 = "hi.cast"(%139) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %141 = "mid.wrap"(%136) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %142 = "hi.cast"(%141) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %143 = "hi.cast"(%142) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%140, %143) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %144 = "mid.wrap"(%137) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %145 = "hi.cast"(%144) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %146 = "hi.cast"(%145) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%140, %146) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %147 = "mid.wrap"(%138) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %148 = "hi.cast"(%147) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %149 = "hi.cast"(%148) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%140, %149) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_init_bufferBufferT_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb21(%150 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %151 : !llvm.ptr):
      %152 = "mid.invariant"(%151) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %153 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %154 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%154, %153) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb24] : () -> ()
    ^bb25:
      %155 = "llvm.getelementptr"(%151) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %156 = "mid.checkflag"(%155) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %157 = "llvm.load"(%156) : (!hi.bool) -> i1
      "cf.cond_br"(%157) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %158 = "llvm.getelementptr"(%151) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %159 = "mid.checkflag"(%158) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %160 = "llvm.load"(%159) : (!hi.bool) -> i1
      "cf.cond_br"(%160) [^bb25, ^bb25] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %161 = "llvm.getelementptr"(%151) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %162 = "mid.checkflag"(%161) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %163 = "llvm.load"(%162) : (!hi.bool) -> i1
      "cf.cond_br"(%163) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %164 = "llvm.extractvalue"(%150) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %165 = "llvm.load"(%153) : (!llvm.ptr) -> i32
      %166 = "llvm.getelementptr"(%164, %165) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %167 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %168 = "llvm.getelementptr"(%166, %167) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%168) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_bufferBufferT_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %171 : !llvm.ptr):
      %172 = "mid.wrap"(%169) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %173 = "hi.cast"(%172) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %174 = "mid.get_field"(%173) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %175 = "hi.cast"(%174) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%175) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_length_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb28(%176 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %177 : !llvm.ptr):
      %178 = "mid.invariant"(%177) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %179 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      %180 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%180, %179) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb30] : () -> ()
    ^bb30:
      %181 = "llvm.extractvalue"(%176) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %182 = "llvm.load"(%179) : (!llvm.ptr) -> i32
      %183 = "llvm.getelementptr"(%181, %182) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %184 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %185 = "llvm.getelementptr"(%183, %184) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%185) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_length_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb31(%186 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %187 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %188 : !llvm.ptr):
      %189 = "mid.wrap"(%186) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %190 = "hi.cast"(%189) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %191 = "mid.get_field"(%190) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %192 = "hi.cast"(%191) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%192) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_capacity_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb32(%193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %194 : !llvm.ptr):
      %195 = "mid.invariant"(%194) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %196 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb33] : () -> ()
    ^bb33:
      %197 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%197, %196) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      %198 = "llvm.extractvalue"(%193) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %199 = "llvm.load"(%196) : (!llvm.ptr) -> i32
      %200 = "llvm.getelementptr"(%198, %199) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %201 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %202 = "llvm.getelementptr"(%200, %201) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%202) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb35(%203 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %205 : !llvm.ptr, %206 : !llvm.struct<(!llvm.ptr, i160)>):
      %207 = "mid.wrap"(%203) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %208 = "hi.cast"(%207) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %209 = "mid.wrap"(%206) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %210 = "hi.cast"(%209) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %211 = "mid.get_field"(%208) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %212 = "mid.get_field"(%208) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %213 = "mid.unwrap"(%211) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %214 = "mid.unwrap"(%212) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %215 = "mid.comparison"(%213, %214) {"op" = "GE"} : (i32, i32) -> i1
      %216 = "mid.wrap"(%215) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %217 = "mid.unwrap"(%216) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%217) ({
        %218 = "mid.get_field"(%208) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %219 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %220 = "mid.unwrap"(%218) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %221 = "mid.unwrap"(%219) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %222 = "mid.arithmetic"(%220, %221) {"op" = "MUL"} : (i32, i32) -> i32
        %223 = "mid.wrap"(%222) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %224 = "hi.cast"(%223) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %225 = "mid.unwrap"(%224) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %226 = "mid.unwrap"(%208) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %227 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %228 = "mid.parameterizations_array"(%227) : (!llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%228, %226, %225) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      }) : (i1) -> ()
      %229 = "mid.get_field"(%208) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %230 = "mid.get_field"(%208) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %231 = "mid.get_type_field"(%208) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %232 = "hi.cast"(%210) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %233 = "hi.cast"(%229) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%230, %233, %232, %231) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Array">, !hi.reified_type) -> ()
      %234 = "mid.get_field"(%208) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %235 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %236 = "mid.unwrap"(%234) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %237 = "mid.unwrap"(%235) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %238 = "mid.arithmetic"(%236, %237) {"op" = "ADD"} : (i32, i32) -> i32
      %239 = "mid.wrap"(%238) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %240 = "hi.cast"(%239) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%208, %240) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %241 = "hi.cast"(%208) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%241) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_append_xT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb36(%242 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %243 : !llvm.ptr):
      %244 = "mid.invariant"(%243) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %245 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb37] : () -> ()
    ^bb38:
      %246 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%246, %245) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb37:
      %247 = "llvm.getelementptr"(%243) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %248 = "mid.checkflag"(%247) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %249 = "llvm.load"(%248) : (!hi.bool) -> i1
      "cf.cond_br"(%249) [^bb38, ^bb38] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb39:
      %250 = "llvm.extractvalue"(%242) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %251 = "llvm.load"(%245) : (!llvm.ptr) -> i32
      %252 = "llvm.getelementptr"(%250, %251) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %253 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %254 = "llvm.getelementptr"(%252, %253) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%254) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_append_xT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb40(%255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %257 : !llvm.ptr, %258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %259 = "mid.wrap"(%255) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %260 = "hi.cast"(%259) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %261 = "mid.wrap"(%258) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %262 = "hi.cast"(%261) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %263 = "mid.unwrap"(%262) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %264 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %265 = "mid.method_call"(%264, %263) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %266 = "hi.cast"(%265) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %267 = "mid.get_field"(%260) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %268 = "mid.refer"(%267) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %269 = "mid.unwrap"(%268) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %270 = "mid.unwrap"(%266) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %271 = "mid.arithmetic"(%269, %270) {"op" = "ADD"} : (i32, i32) -> i32
      %272 = "mid.wrap"(%271) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %273 = "hi.cast"(%272) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %274 = "mid.unwrap"(%273) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %275 = "mid.unwrap"(%260) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %276 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %277 = "mid.parameterizations_array"(%276) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%277, %275, %274) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %278 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %279 = "mid.unwrap"(%278) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %280 = "mid.unwrap"(%266) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %281 = "mid.comparison"(%279, %280) {"op" = "LT"} : (i32, i32) -> i1
        %282 = "mid.wrap"(%281) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %283 = "mid.unwrap"(%282) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %284 = "mid.unwrap"(%278) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %285 = "mid.unwrap"(%268) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %286 = "mid.arithmetic"(%284, %285) {"op" = "ADD"} : (i32, i32) -> i32
        %287 = "mid.wrap"(%286) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %288 = "hi.cast"(%278) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %289 = "mid.unwrap"(%288) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %290 = "mid.unwrap"(%262) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %291 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %292 = "mid.parameterizations_array"(%291) : (!llvm.ptr) -> !llvm.ptr
        %293 = "mid.method_call"(%292, %290, %289) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %294 = "hi.cast"(%293) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %295 = "hi.cast"(%287) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %296 = "mid.unwrap"(%295) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %297 = "hi.cast"(%294) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %298 = "mid.unwrap"(%297) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
        %299 = "mid.unwrap"(%260) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %300 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %301 = "mid.get_type_field"(%260) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
        %302 = "mid.parameterizations_array"(%300, %301) : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
        "mid.method_call"(%302, %299, %296, %298) {"offset" = 17 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %303 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %304 = "mid.unwrap"(%278) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %305 = "mid.unwrap"(%303) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %306 = "mid.arithmetic"(%304, %305) {"op" = "ADD"} : (i32, i32) -> i32
        %307 = "mid.wrap"(%306) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %308 = "hi.cast"(%307) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%278, %308) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %309 = "hi.cast"(%272) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%260, %309) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %310 = "hi.cast"(%260) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%310) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_extend_otherArrayT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb41(%311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %312 : !llvm.ptr):
      %313 = "mid.invariant"(%312) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %314 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb42] : () -> ()
    ^bb43:
      %315 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%315, %314) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb44] : () -> ()
    ^bb42:
      %316 = "llvm.getelementptr"(%312) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %317 = "mid.checkflag"(%316) {"typ_name" = "Array"} : (!llvm.ptr) -> !hi.bool
      %318 = "llvm.load"(%317) : (!hi.bool) -> i1
      "cf.cond_br"(%318) [^bb43, ^bb43] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb44:
      %319 = "llvm.extractvalue"(%311) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %320 = "llvm.load"(%314) : (!llvm.ptr) -> i32
      %321 = "llvm.getelementptr"(%319, %320) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %322 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %323 = "llvm.getelementptr"(%321, %322) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%323) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_extend_otherArrayT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb45(%324 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %325 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %326 : !llvm.ptr, %327 : i32):
      %328 = "mid.wrap"(%324) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %329 = "hi.cast"(%328) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %330 = "mid.wrap"(%327) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %331 = "hi.cast"(%330) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %332 = "mid.get_field"(%329) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %333 = "mid.unwrap"(%331) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %334 = "mid.unwrap"(%332) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %335 = "mid.comparison"(%333, %334) {"op" = "LE"} : (i32, i32) -> i1
      %336 = "mid.wrap"(%335) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %337 = "mid.unwrap"(%336) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%337) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %338 = "hi.cast"(%331) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%329, %338) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %339 = "mid.get_field"(%329) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %340 = "mid.refer"(%339) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %341 = "mid.get_field"(%329) {"offset" = 3 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %342 = "mid.get_type_field"(%329) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %343 = "hi.cast"(%341) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %344 = "mid.create_buffer"(%343, %342) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.reified_type) -> !llvm.ptr
      %345 = "hi.cast"(%344) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%329, %345) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %346 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %347 = "mid.get_field"(%329) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %348 = "mid.unwrap"(%346) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %349 = "mid.unwrap"(%347) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %350 = "mid.comparison"(%348, %349) {"op" = "LT"} : (i32, i32) -> i1
        %351 = "mid.wrap"(%350) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %352 = "mid.unwrap"(%351) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %353 = "mid.get_type_field"(%329) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
        %354 = "hi.cast"(%346) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %355 = "mid.buffer_get"(%340, %354, %353) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.reified_type) -> !hi.type_param<"T", !hi.any, "Array">
        %356 = "mid.get_field"(%329) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
        %357 = "mid.get_type_field"(%329) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
        %358 = "hi.cast"(%355) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %359 = "hi.cast"(%346) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%356, %359, %358, %357) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Array">, !hi.reified_type) -> ()
        %360 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %361 = "mid.unwrap"(%346) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %362 = "mid.unwrap"(%360) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %363 = "mid.arithmetic"(%361, %362) {"op" = "ADD"} : (i32, i32) -> i32
        %364 = "mid.wrap"(%363) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %365 = "hi.cast"(%364) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%346, %365) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
    }) {"func_name" = "Array_reserve_new_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb46(%366 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %367 : !llvm.ptr):
      %368 = "mid.invariant"(%367) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %369 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb47] : () -> ()
    ^bb48:
      %370 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%370, %369) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb49] : () -> ()
    ^bb47:
      %371 = "llvm.getelementptr"(%367) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %372 = "mid.checkflag"(%371) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %373 = "llvm.load"(%372) : (!hi.bool) -> i1
      "cf.cond_br"(%373) [^bb48, ^bb48] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb49:
      %374 = "llvm.extractvalue"(%366) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %375 = "llvm.load"(%369) : (!llvm.ptr) -> i32
      %376 = "llvm.getelementptr"(%374, %375) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %377 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %378 = "llvm.getelementptr"(%376, %377) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%378) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_reserve_new_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb50(%379 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %380 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %381 : !llvm.ptr, %382 : i32):
      %383 = "mid.wrap"(%379) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %384 = "hi.cast"(%383) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %385 = "mid.wrap"(%382) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %386 = "hi.cast"(%385) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %387 = "mid.get_field"(%384) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %388 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %389 = "mid.unwrap"(%387) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %390 = "mid.unwrap"(%388) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %391 = "mid.arithmetic"(%389, %390) {"op" = "SUB"} : (i32, i32) -> i32
      %392 = "mid.wrap"(%391) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %393 = "mid.unwrap"(%386) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %394 = "mid.unwrap"(%392) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %395 = "mid.comparison"(%393, %394) {"op" = "GT"} : (i32, i32) -> i1
      %396 = "mid.wrap"(%395) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %397 = "mid.get_field"(%384) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %398 = "mid.unwrap"(%397) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %399 = "mid.unwrap"(%386) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %400 = "mid.arithmetic"(%398, %399) {"op" = "ADD"} : (i32, i32) -> i32
      %401 = "mid.wrap"(%400) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %402 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %403 = "mid.unwrap"(%401) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %404 = "mid.unwrap"(%402) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %405 = "mid.comparison"(%403, %404) {"op" = "LT"} : (i32, i32) -> i1
      %406 = "mid.wrap"(%405) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %407 = "mid.unwrap"(%396) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      %408 = "mid.logical"(%407) ({
        func.return %406 : !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      }) {"op" = "or"} : (i1) -> i1
      %409 = "mid.wrap"(%408) : (i1) -> !hi.bool
      %410 = "mid.unwrap"(%409) : (!hi.bool) -> i1
      "mid.if"(%410) ({
        %411 = "mid.get_field"(%384) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %412 = "mid.unwrap"(%411) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %413 = "mid.unwrap"(%386) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %414 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "OutOfBounds", "num_data_fields" = 6 : i32, "region_id" = "none"} : () -> !hi.fatptr<"OutOfBounds">
        %415 = "mid.get_field"(%384) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %416 = "hi.cast"(%415) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %417 = "mid.unwrap"(%416) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %418 = "hi.cast"(%386) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %419 = "mid.unwrap"(%418) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %420 = "mid.unwrap"(%414) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %421 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %422 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %423 = "mid.parameterizations_array"(%421, %422) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%423, %420, %417, %419) {"offset" = 6 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 37 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
        %424 = "mid.literal"() {"value" = 86 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %425 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %426 = "hi.cast"(%425) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %427 = "mid.create_buffer"(%426) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %428 = "mid.refer"(%427) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %429 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\array.mini"} : () -> !llvm.ptr
        %430 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%428, %430, %429) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %431 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %432 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %433 = "mid.unwrap"(%428) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %434 = "mid.unwrap"(%431) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %435 = "mid.unwrap"(%432) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %436 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %437 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %438 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %439 = "hi.cast"(%428) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %440 = "mid.unwrap"(%439) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %441 = "hi.cast"(%437) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %442 = "mid.unwrap"(%441) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %443 = "hi.cast"(%438) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %444 = "mid.unwrap"(%443) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %445 = "mid.unwrap"(%436) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %446 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %447 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %448 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %449 = "mid.parameterizations_array"(%446, %447, %448) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%449, %445, %440, %442, %444) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %450 = "hi.cast"(%424) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %451 = "mid.unwrap"(%450) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %452 = "hi.cast"(%436) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %453 = "mid.unwrap"(%452) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %454 = "mid.unwrap"(%414) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %455 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %456 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %457 = "mid.parameterizations_array"(%455, %456) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%457, %454, %451, %453) {"offset" = 9 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 37 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %458 = "hi.cast"(%414) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBounds">) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
        %459 = "mid.unwrap"(%458) : (!hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %460 = "mid.coro_yield"(%459) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %461 = "mid.wrap"(%460) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
      }) : (i1) -> ()
      %462 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %463 = "mid.unwrap"(%386) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %464 = "mid.unwrap"(%462) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %465 = "mid.comparison"(%463, %464) {"op" = "LT"} : (i32, i32) -> i1
      %466 = "mid.wrap"(%465) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %467 = "mid.unwrap"(%466) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%467) ({
        %468 = "mid.get_field"(%384) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %469 = "mid.unwrap"(%468) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %470 = "mid.unwrap"(%386) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %471 = "mid.arithmetic"(%469, %470) {"op" = "ADD"} : (i32, i32) -> i32
        %472 = "mid.wrap"(%471) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %473 = "hi.cast"(%472) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%386, %473) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %474 = "hi.cast"(%386) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %475 = "mid.unwrap"(%474) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %476 = "mid.unwrap"(%384) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %477 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %478 = "mid.parameterizations_array"(%477) : (!llvm.ptr) -> !llvm.ptr
      %479 = "mid.method_call"(%478, %476, %475) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
      %480 = "hi.cast"(%479) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %481 = "hi.cast"(%480) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      "mid.return"(%481) : (!hi.type_param<"T", !hi.any, "Array">) -> ()
    }) {"func_name" = "Array__index_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.fatptr<"OutOfBounds">} : () -> ()
    "mid.func"() ({
    ^bb51(%482 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %483 : !llvm.ptr):
      %484 = "mid.invariant"(%483) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %485 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb52] : () -> ()
    ^bb53:
      %486 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%486, %485) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb54] : () -> ()
    ^bb52:
      %487 = "llvm.getelementptr"(%483) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %488 = "mid.checkflag"(%487) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %489 = "llvm.load"(%488) : (!hi.bool) -> i1
      "cf.cond_br"(%489) [^bb53, ^bb53] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb54:
      %490 = "llvm.extractvalue"(%482) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %491 = "llvm.load"(%485) : (!llvm.ptr) -> i32
      %492 = "llvm.getelementptr"(%490, %491) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %493 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %494 = "llvm.getelementptr"(%492, %493) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%494) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__index_xi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb55(%495 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %496 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %497 : !llvm.ptr, %498 : i32, %499 : !llvm.struct<(!llvm.ptr, i160)>):
      %500 = "mid.wrap"(%495) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %501 = "hi.cast"(%500) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %502 = "mid.wrap"(%498) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %503 = "hi.cast"(%502) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %504 = "mid.wrap"(%499) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %505 = "hi.cast"(%504) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %506 = "mid.get_field"(%501) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %507 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %508 = "mid.unwrap"(%506) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %509 = "mid.unwrap"(%507) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %510 = "mid.arithmetic"(%508, %509) {"op" = "SUB"} : (i32, i32) -> i32
      %511 = "mid.wrap"(%510) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %512 = "mid.unwrap"(%503) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %513 = "mid.unwrap"(%511) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %514 = "mid.comparison"(%512, %513) {"op" = "GT"} : (i32, i32) -> i1
      %515 = "mid.wrap"(%514) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %516 = "mid.get_field"(%501) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %517 = "mid.unwrap"(%516) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %518 = "mid.unwrap"(%503) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %519 = "mid.arithmetic"(%517, %518) {"op" = "ADD"} : (i32, i32) -> i32
      %520 = "mid.wrap"(%519) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %521 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %522 = "mid.unwrap"(%520) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %523 = "mid.unwrap"(%521) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %524 = "mid.comparison"(%522, %523) {"op" = "LT"} : (i32, i32) -> i1
      %525 = "mid.wrap"(%524) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %526 = "mid.unwrap"(%515) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      %527 = "mid.logical"(%526) ({
        func.return %525 : !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      }) {"op" = "or"} : (i1) -> i1
      %528 = "mid.wrap"(%527) : (i1) -> !hi.bool
      %529 = "mid.unwrap"(%528) : (!hi.bool) -> i1
      "mid.if"(%529) ({
        %530 = "mid.get_field"(%501) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %531 = "mid.unwrap"(%530) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %532 = "mid.unwrap"(%503) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %533 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "OutOfBounds", "num_data_fields" = 6 : i32, "region_id" = "none"} : () -> !hi.fatptr<"OutOfBounds">
        %534 = "mid.get_field"(%501) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %535 = "hi.cast"(%534) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %536 = "mid.unwrap"(%535) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %537 = "hi.cast"(%503) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %538 = "mid.unwrap"(%537) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %539 = "mid.unwrap"(%533) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %540 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %541 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %542 = "mid.parameterizations_array"(%540, %541) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%542, %539, %536, %538) {"offset" = 6 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 37 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
        %543 = "mid.literal"() {"value" = 94 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %544 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %545 = "hi.cast"(%544) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %546 = "mid.create_buffer"(%545) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %547 = "mid.refer"(%546) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %548 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\array.mini"} : () -> !llvm.ptr
        %549 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%547, %549, %548) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %550 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %551 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %552 = "mid.unwrap"(%547) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %553 = "mid.unwrap"(%550) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %554 = "mid.unwrap"(%551) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %555 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %556 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %557 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %558 = "hi.cast"(%547) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %559 = "mid.unwrap"(%558) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %560 = "hi.cast"(%556) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %561 = "mid.unwrap"(%560) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %562 = "hi.cast"(%557) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %563 = "mid.unwrap"(%562) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %564 = "mid.unwrap"(%555) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %565 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %566 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %567 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %568 = "mid.parameterizations_array"(%565, %566, %567) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%568, %564, %559, %561, %563) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %569 = "hi.cast"(%543) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %570 = "mid.unwrap"(%569) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %571 = "hi.cast"(%555) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %572 = "mid.unwrap"(%571) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %573 = "mid.unwrap"(%533) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %574 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %575 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %576 = "mid.parameterizations_array"(%574, %575) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%576, %573, %570, %572) {"offset" = 9 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 37 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %577 = "hi.cast"(%533) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBounds">) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
        %578 = "mid.unwrap"(%577) : (!hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %579 = "mid.coro_yield"(%578) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %580 = "mid.wrap"(%579) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
      }) : (i1) -> ()
      %581 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %582 = "mid.unwrap"(%503) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %583 = "mid.unwrap"(%581) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %584 = "mid.comparison"(%582, %583) {"op" = "LT"} : (i32, i32) -> i1
      %585 = "mid.wrap"(%584) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %586 = "mid.unwrap"(%585) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%586) ({
        %587 = "mid.get_field"(%501) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %588 = "mid.unwrap"(%587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %589 = "mid.unwrap"(%503) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %590 = "mid.arithmetic"(%588, %589) {"op" = "ADD"} : (i32, i32) -> i32
        %591 = "mid.wrap"(%590) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %592 = "hi.cast"(%591) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%503, %592) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %593 = "hi.cast"(%503) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %594 = "mid.unwrap"(%593) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %595 = "hi.cast"(%505) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %596 = "mid.unwrap"(%595) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
      %597 = "mid.unwrap"(%501) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %598 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %599 = "mid.get_type_field"(%501) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %600 = "mid.parameterizations_array"(%598, %599) : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
      "mid.method_call"(%600, %597, %594, %596) {"offset" = 17 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "Array__set_index_xi32_valueT", "result_type" = !llvm.void, "yield_type" = !hi.fatptr<"OutOfBounds">} : () -> ()
    "mid.func"() ({
    ^bb56(%601 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %602 : !llvm.ptr):
      %603 = "mid.invariant"(%602) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %604 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb57] : () -> ()
    ^bb58:
      %605 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%605, %604) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb59] : () -> ()
    ^bb60:
      %606 = "llvm.getelementptr"(%602) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %607 = "mid.checkflag"(%606) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %608 = "llvm.load"(%607) : (!hi.bool) -> i1
      "cf.cond_br"(%608) [^bb58, ^bb58] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb57:
      %609 = "llvm.getelementptr"(%602) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %610 = "mid.checkflag"(%609) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %611 = "llvm.load"(%610) : (!hi.bool) -> i1
      "cf.cond_br"(%611) [^bb60, ^bb60] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb59:
      %612 = "llvm.extractvalue"(%601) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %613 = "llvm.load"(%604) : (!llvm.ptr) -> i32
      %614 = "llvm.getelementptr"(%612, %613) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %615 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %616 = "llvm.getelementptr"(%614, %615) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%616) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__set_index_xi32_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb61(%617 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %618 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %619 : !llvm.ptr, %620 : i32):
      %621 = "mid.wrap"(%617) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %622 = "hi.cast"(%621) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %623 = "mid.wrap"(%620) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %624 = "hi.cast"(%623) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %625 = "mid.get_field"(%622) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %626 = "mid.get_type_field"(%622) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %627 = "hi.cast"(%624) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %628 = "mid.buffer_get"(%625, %627, %626) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.reified_type) -> !hi.type_param<"T", !hi.any, "Array">
      %629 = "hi.cast"(%628) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      "mid.return"(%629) : (!hi.type_param<"T", !hi.any, "Array">) -> ()
    }) {"func_name" = "Array_unchecked_index_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb62(%630 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %631 : !llvm.ptr):
      %632 = "mid.invariant"(%631) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %633 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb63] : () -> ()
    ^bb64:
      %634 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%634, %633) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb65] : () -> ()
    ^bb63:
      %635 = "llvm.getelementptr"(%631) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %636 = "mid.checkflag"(%635) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %637 = "llvm.load"(%636) : (!hi.bool) -> i1
      "cf.cond_br"(%637) [^bb64, ^bb64] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb65:
      %638 = "llvm.extractvalue"(%630) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %639 = "llvm.load"(%633) : (!llvm.ptr) -> i32
      %640 = "llvm.getelementptr"(%638, %639) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %641 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %642 = "llvm.getelementptr"(%640, %641) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%642) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_unchecked_index_xi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb66(%643 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %644 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %645 : !llvm.ptr, %646 : i32, %647 : !llvm.struct<(!llvm.ptr, i160)>):
      %648 = "mid.wrap"(%643) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %649 = "hi.cast"(%648) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %650 = "mid.wrap"(%646) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %651 = "hi.cast"(%650) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %652 = "mid.wrap"(%647) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %653 = "hi.cast"(%652) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %654 = "mid.get_field"(%649) {"offset" = 1 : i64, "vtable_bytes" = 1192 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %655 = "mid.get_type_field"(%649) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %656 = "hi.cast"(%653) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %657 = "hi.cast"(%651) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%654, %657, %656, %655) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Array">, !hi.reified_type) -> ()
    }) {"func_name" = "Array_unchecked_insert_xi32_valueT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb67(%658 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %659 : !llvm.ptr):
      %660 = "mid.invariant"(%659) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %661 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb68] : () -> ()
    ^bb69:
      %662 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%662, %661) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb70] : () -> ()
    ^bb71:
      %663 = "llvm.getelementptr"(%659) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %664 = "mid.checkflag"(%663) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %665 = "llvm.load"(%664) : (!hi.bool) -> i1
      "cf.cond_br"(%665) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %666 = "llvm.getelementptr"(%659) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %667 = "mid.checkflag"(%666) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %668 = "llvm.load"(%667) : (!hi.bool) -> i1
      "cf.cond_br"(%668) [^bb71, ^bb71] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb70:
      %669 = "llvm.extractvalue"(%658) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %670 = "llvm.load"(%661) : (!llvm.ptr) -> i32
      %671 = "llvm.getelementptr"(%669, %670) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %672 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %673 = "llvm.getelementptr"(%671, %672) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%673) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_unchecked_insert_xi32_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb72(%674 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %675 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %676 : !llvm.ptr):
      %677 = "mid.wrap"(%674) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %678 = "hi.cast"(%677) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %679 = "mid.get_field"(%678) {"offset" = 2 : i64, "vtable_bytes" = 1192 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %680 = "hi.cast"(%679) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%680) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb73(%681 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %682 : !llvm.ptr):
      %683 = "mid.invariant"(%682) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %684 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb74] : () -> ()
    ^bb74:
      %685 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%685, %684) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb75] : () -> ()
    ^bb75:
      %686 = "llvm.extractvalue"(%681) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %687 = "llvm.load"(%684) : (!llvm.ptr) -> i32
      %688 = "llvm.getelementptr"(%686, %687) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %689 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %690 = "llvm.getelementptr"(%688, %689) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%690) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb76(%691 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %692 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %693 : !llvm.ptr):
      %694 = "mid.wrap"(%691) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %695 = "hi.cast"(%694) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %696 = "mid.unwrap"(%695) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %697 = "mid.get_type_field"(%695) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %698 = "mid.new"(%697) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "ArrayIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>
      %699 = "hi.cast"(%695) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %700 = "mid.unwrap"(%699) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %701 = "mid.unwrap"(%698) : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %702 = "mid.get_type_field"(%695) {"offset" = 0 : i64, "vtable_bytes" = 1192 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %703 = "mid.parameterization"(%702) {"id_hierarchy" = ["Array", [0 : i32]], "name_hierarchy" = ["ArrayArray.T_subtype_Any", ["Array.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %704 = "mid.parameterizations_array"(%703) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%704, %701, %700) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %705 = "hi.cast"(%698) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%705) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb77(%706 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %707 : !llvm.ptr):
      %708 = "mid.invariant"(%707) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %709 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb78] : () -> ()
    ^bb78:
      %710 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%710, %709) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb79:
      %711 = "llvm.extractvalue"(%706) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %712 = "llvm.load"(%709) : (!llvm.ptr) -> i32
      %713 = "llvm.getelementptr"(%711, %712) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %714 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %715 = "llvm.getelementptr"(%713, %714) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%715) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb80(%716 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %717 : !llvm.ptr):
      %718 = "mid.invariant"(%717) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %719 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb81] : () -> ()
    ^bb82:
      %720 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%720, %719) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb83] : () -> ()
    ^bb81:
      %721 = "llvm.getelementptr"(%717) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %722 = "mid.checkflag"(%721) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %723 = "llvm.load"(%722) : (!hi.bool) -> i1
      "cf.cond_br"(%723) [^bb82, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %724 = "llvm.extractvalue"(%716) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %725 = "llvm.load"(%719) : (!llvm.ptr) -> i32
      %726 = "llvm.getelementptr"(%724, %725) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %727 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %728 = "llvm.getelementptr"(%726, %727) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%728) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb84(%729 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %730 : !llvm.ptr):
      %731 = "mid.invariant"(%730) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %732 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb85] : () -> ()
    ^bb86:
      %733 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%733, %732) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb87] : () -> ()
    ^bb88:
      %734 = "llvm.getelementptr"(%730) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %735 = "mid.checkflag"(%734) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %736 = "llvm.load"(%735) : (!hi.bool) -> i1
      "cf.cond_br"(%736) [^bb86, ^bb86] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb85:
      %737 = "llvm.getelementptr"(%730) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %738 = "mid.checkflag"(%737) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %739 = "llvm.load"(%738) : (!hi.bool) -> i1
      "cf.cond_br"(%739) [^bb88, ^bb88] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %740 = "llvm.extractvalue"(%729) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %741 = "llvm.load"(%732) : (!llvm.ptr) -> i32
      %742 = "llvm.getelementptr"(%740, %741) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %743 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %744 = "llvm.getelementptr"(%742, %743) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%744) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb89(%745 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %746 : !llvm.ptr):
      %747 = "mid.invariant"(%746) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %748 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb90] : () -> ()
    ^bb91:
      %749 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%749, %748) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb92] : () -> ()
    ^bb90:
      %750 = "llvm.getelementptr"(%746) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %751 = "mid.checkflag"(%750) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %752 = "llvm.load"(%751) : (!hi.bool) -> i1
      "cf.cond_br"(%752) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb92:
      %753 = "llvm.extractvalue"(%745) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %754 = "llvm.load"(%748) : (!llvm.ptr) -> i32
      %755 = "llvm.getelementptr"(%753, %754) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %756 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %757 = "llvm.getelementptr"(%755, %756) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%757) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb93(%758 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %759 : !llvm.ptr):
      %760 = "mid.invariant"(%759) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %761 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb94] : () -> ()
    ^bb95:
      %762 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%762, %761) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb96] : () -> ()
    ^bb94:
      %763 = "llvm.getelementptr"(%759) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %764 = "mid.checkflag"(%763) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %765 = "llvm.load"(%764) : (!hi.bool) -> i1
      "cf.cond_br"(%765) [^bb95, ^bb95] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb96:
      %766 = "llvm.extractvalue"(%758) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %767 = "llvm.load"(%761) : (!llvm.ptr) -> i32
      %768 = "llvm.getelementptr"(%766, %767) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %769 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %770 = "llvm.getelementptr"(%768, %769) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%770) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb97(%771 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %772 : !llvm.ptr):
      %773 = "mid.invariant"(%772) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %774 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb98] : () -> ()
    ^bb98:
      %775 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%775, %774) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb99] : () -> ()
    ^bb99:
      %776 = "llvm.extractvalue"(%771) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %777 = "llvm.load"(%774) : (!llvm.ptr) -> i32
      %778 = "llvm.getelementptr"(%776, %777) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %779 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %780 = "llvm.getelementptr"(%778, %779) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%780) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb100(%781 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %782 : !llvm.ptr):
      %783 = "mid.invariant"(%782) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %784 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb101] : () -> ()
    ^bb102:
      %785 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
      "llvm.store"(%785, %784) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb103] : () -> ()
    ^bb104:
      %786 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%786, %784) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb103] : () -> ()
    ^bb101:
      %787 = "llvm.getelementptr"(%782) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %788 = "mid.checkflag"(%787) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %789 = "llvm.load"(%788) : (!hi.bool) -> i1
      "cf.cond_br"(%789) [^bb102, ^bb105] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb105:
      %790 = "llvm.getelementptr"(%782) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %791 = "mid.checkflag"(%790) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %792 = "llvm.load"(%791) : (!hi.bool) -> i1
      "cf.cond_br"(%792) [^bb104, ^bb104] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb103:
      %793 = "llvm.extractvalue"(%781) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %794 = "llvm.load"(%784) : (!llvm.ptr) -> i32
      %795 = "llvm.getelementptr"(%793, %794) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %796 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %797 = "llvm.getelementptr"(%795, %796) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%797) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb106(%798 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %799 : !llvm.ptr):
      %800 = "mid.invariant"(%799) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %801 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb107] : () -> ()
    ^bb108:
      %802 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
      "llvm.store"(%802, %801) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb109] : () -> ()
    ^bb107:
      %803 = "llvm.getelementptr"(%799) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %804 = "mid.checkflag"(%803) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %805 = "llvm.load"(%804) : (!hi.bool) -> i1
      "cf.cond_br"(%805) [^bb108, ^bb108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb109:
      %806 = "llvm.extractvalue"(%798) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %807 = "llvm.load"(%801) : (!llvm.ptr) -> i32
      %808 = "llvm.getelementptr"(%806, %807) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %809 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %810 = "llvm.getelementptr"(%808, %809) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%810) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb110(%811 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %812 : !llvm.ptr):
      %813 = "mid.invariant"(%812) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %814 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb111] : () -> ()
    ^bb112:
      %815 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
      "llvm.store"(%815, %814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %816 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
      "llvm.store"(%816, %814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb113] : () -> ()
    ^bb111:
      %817 = "llvm.getelementptr"(%812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %818 = "mid.checkflag"(%817) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %819 = "llvm.load"(%818) : (!hi.bool) -> i1
      "cf.cond_br"(%819) [^bb115, ^bb116] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb115:
      %820 = "llvm.getelementptr"(%812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %821 = "mid.checkflag"(%820) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %822 = "llvm.load"(%821) : (!hi.bool) -> i1
      "cf.cond_br"(%822) [^bb116, ^bb112] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb116:
      %823 = "llvm.getelementptr"(%812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %824 = "mid.checkflag"(%823) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %825 = "llvm.load"(%824) : (!hi.bool) -> i1
      "cf.cond_br"(%825) [^bb114, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb113:
      %826 = "llvm.extractvalue"(%811) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %827 = "llvm.load"(%814) : (!llvm.ptr) -> i32
      %828 = "llvm.getelementptr"(%826, %827) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %829 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %830 = "llvm.getelementptr"(%828, %829) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%830) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb117(%831 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %832 : !llvm.ptr):
      %833 = "mid.invariant"(%832) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %834 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb118] : () -> ()
    ^bb119:
      %835 = "llvm.mlir.constant"() <{"value" = 58 : i32}> : () -> i32
      "llvm.store"(%835, %834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb120] : () -> ()
    ^bb121:
      %836 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%836, %834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb120] : () -> ()
    ^bb118:
      %837 = "llvm.getelementptr"(%832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %838 = "mid.checkflag"(%837) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %839 = "llvm.load"(%838) : (!hi.bool) -> i1
      "cf.cond_br"(%839) [^bb119, ^bb122] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb122:
      %840 = "llvm.getelementptr"(%832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %841 = "mid.checkflag"(%840) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %842 = "llvm.load"(%841) : (!hi.bool) -> i1
      "cf.cond_br"(%842) [^bb123, ^bb121] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %843 = "llvm.getelementptr"(%832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %844 = "mid.checkflag"(%843) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %845 = "llvm.load"(%844) : (!hi.bool) -> i1
      "cf.cond_br"(%845) [^bb121, ^bb121] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb120:
      %846 = "llvm.extractvalue"(%831) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %847 = "llvm.load"(%834) : (!llvm.ptr) -> i32
      %848 = "llvm.getelementptr"(%846, %847) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %849 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %850 = "llvm.getelementptr"(%848, %849) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%850) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb124(%851 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %852 : !llvm.ptr):
      %853 = "mid.invariant"(%852) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %854 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb125] : () -> ()
    ^bb126:
      %855 = "llvm.mlir.constant"() <{"value" = 60 : i32}> : () -> i32
      "llvm.store"(%855, %854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb127] : () -> ()
    ^bb128:
      %856 = "llvm.mlir.constant"() <{"value" = 61 : i32}> : () -> i32
      "llvm.store"(%856, %854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb127] : () -> ()
    ^bb125:
      %857 = "llvm.getelementptr"(%852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %858 = "mid.checkflag"(%857) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %859 = "llvm.load"(%858) : (!hi.bool) -> i1
      "cf.cond_br"(%859) [^bb129, ^bb130] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb129:
      %860 = "llvm.getelementptr"(%852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %861 = "mid.checkflag"(%860) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %862 = "llvm.load"(%861) : (!hi.bool) -> i1
      "cf.cond_br"(%862) [^bb130, ^bb126] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb130:
      %863 = "llvm.getelementptr"(%852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %864 = "mid.checkflag"(%863) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %865 = "llvm.load"(%864) : (!hi.bool) -> i1
      "cf.cond_br"(%865) [^bb128, ^bb128] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb127:
      %866 = "llvm.extractvalue"(%851) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %867 = "llvm.load"(%854) : (!llvm.ptr) -> i32
      %868 = "llvm.getelementptr"(%866, %867) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %869 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %870 = "llvm.getelementptr"(%868, %869) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%870) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb131(%871 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %872 : !llvm.ptr):
      %873 = "mid.invariant"(%872) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %874 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb132] : () -> ()
    ^bb133:
      %875 = "llvm.mlir.constant"() <{"value" = 63 : i32}> : () -> i32
      "llvm.store"(%875, %874) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb134] : () -> ()
    ^bb135:
      %876 = "llvm.mlir.constant"() <{"value" = 62 : i32}> : () -> i32
      "llvm.store"(%876, %874) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb134] : () -> ()
    ^bb132:
      %877 = "llvm.getelementptr"(%872) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %878 = "mid.checkflag"(%877) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %879 = "llvm.load"(%878) : (!hi.bool) -> i1
      "cf.cond_br"(%879) [^bb133, ^bb136] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb136:
      %880 = "llvm.getelementptr"(%872) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %881 = "mid.checkflag"(%880) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %882 = "llvm.load"(%881) : (!hi.bool) -> i1
      "cf.cond_br"(%882) [^bb137, ^bb135] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb137:
      %883 = "llvm.getelementptr"(%872) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %884 = "mid.checkflag"(%883) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %885 = "llvm.load"(%884) : (!hi.bool) -> i1
      "cf.cond_br"(%885) [^bb135, ^bb135] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb134:
      %886 = "llvm.extractvalue"(%871) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %887 = "llvm.load"(%874) : (!llvm.ptr) -> i32
      %888 = "llvm.getelementptr"(%886, %887) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %889 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %890 = "llvm.getelementptr"(%888, %889) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%890) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_product_otherIterableU_product_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb138(%891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %892 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %893 : !llvm.ptr):
      %894 = "mid.wrap"(%891) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %895 = "hi.cast"(%894) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %896 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %897 = "hi.cast"(%896) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %898 = "mid.create_buffer"(%897) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %899 = "mid.refer"(%898) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %900 = "mid.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "Array"} : () -> !llvm.ptr
      %901 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%899, %901, %900) {"typ" = !llvm.array<5 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %902 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %903 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %904 = "mid.unwrap"(%899) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %905 = "mid.unwrap"(%902) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %906 = "mid.unwrap"(%903) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %907 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %908 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %909 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %910 = "hi.cast"(%899) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %911 = "mid.unwrap"(%910) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %912 = "hi.cast"(%908) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %913 = "mid.unwrap"(%912) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %914 = "hi.cast"(%909) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %915 = "mid.unwrap"(%914) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %916 = "mid.unwrap"(%907) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %917 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %918 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %919 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %920 = "mid.parameterizations_array"(%917, %918, %919) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%920, %916, %911, %913, %915) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %921 = "hi.cast"(%907) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%921) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Array_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb139(%922 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %923 : !llvm.ptr):
      %924 = "mid.invariant"(%923) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %925 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb140] : () -> ()
    ^bb140:
      %926 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%926, %925) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb141] : () -> ()
    ^bb141:
      %927 = "llvm.extractvalue"(%922) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %928 = "llvm.load"(%925) : (!llvm.ptr) -> i32
      %929 = "llvm.getelementptr"(%927, %928) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<149 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %930 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %931 = "llvm.getelementptr"(%929, %930) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%931) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ArrayIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ArrayIterator_field_ArrayIterator_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ArrayIterator_getter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ArrayIterator_setter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ArrayIterator_field_array", "getter_name" = "ArrayIterator_getter_array", "setter_name" = "ArrayIterator_setter_array"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ArrayIterator_getter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ArrayIterator_setter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ArrayIterator_field_index", "getter_name" = "ArrayIterator_getter_index", "setter_name" = "ArrayIterator_setter_index"} : () -> ()
    "mid.func"() ({
    ^bb142(%932 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %933 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %934 : !llvm.ptr, %935 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %936 = "mid.wrap"(%932) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %937 = "hi.cast"(%936) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %938 = "mid.wrap"(%935) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %939 = "hi.cast"(%938) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %940 = "hi.cast"(%939) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      "mid.set_field"(%937, %940) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> ()
      %941 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %942 = "hi.cast"(%941) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%937, %942) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "ArrayIterator_init_arrayArrayT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb143(%943 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %944 : !llvm.ptr):
      %945 = "mid.invariant"(%944) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %946 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb144] : () -> ()
    ^bb145:
      %947 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%947, %946) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb146] : () -> ()
    ^bb144:
      %948 = "llvm.getelementptr"(%944) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %949 = "mid.checkflag"(%948) {"typ_name" = "Array"} : (!llvm.ptr) -> !hi.bool
      %950 = "llvm.load"(%949) : (!hi.bool) -> i1
      "cf.cond_br"(%950) [^bb145, ^bb145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb146:
      %951 = "llvm.extractvalue"(%943) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %952 = "llvm.load"(%946) : (!llvm.ptr) -> i32
      %953 = "llvm.getelementptr"(%951, %952) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %954 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %955 = "llvm.getelementptr"(%953, %954) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%955) : (!llvm.ptr) -> ()
    }) {"func_name" = "ArrayIterator_B_init_arrayArrayT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb147(%956 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %958 : !llvm.ptr):
      %959 = "mid.wrap"(%956) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %960 = "hi.cast"(%959) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %961 = "mid.get_field"(%960) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %962 = "mid.get_field"(%960) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %963 = "mid.unwrap"(%962) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %964 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %965 = "mid.method_call"(%964, %963) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %966 = "hi.cast"(%965) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %967 = "mid.unwrap"(%961) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %968 = "mid.unwrap"(%966) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %969 = "mid.comparison"(%967, %968) {"op" = "GE"} : (i32, i32) -> i1
      %970 = "mid.wrap"(%969) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %971 = "mid.unwrap"(%970) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%971) ({
        %972 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %973 = "hi.cast"(%972) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>
        "mid.return"(%973) : (!hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %974 = "mid.get_field"(%960) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %975 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %976 = "mid.unwrap"(%974) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %977 = "mid.unwrap"(%975) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %978 = "mid.arithmetic"(%976, %977) {"op" = "ADD"} : (i32, i32) -> i32
      %979 = "mid.wrap"(%978) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %980 = "hi.cast"(%979) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%960, %980) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %981 = "mid.get_field"(%960) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %982 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %983 = "mid.unwrap"(%981) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %984 = "mid.unwrap"(%982) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %985 = "mid.arithmetic"(%983, %984) {"op" = "SUB"} : (i32, i32) -> i32
      %986 = "mid.wrap"(%985) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %987 = "hi.cast"(%986) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %988 = "mid.unwrap"(%987) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %989 = "mid.get_field"(%960) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %990 = "mid.unwrap"(%989) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %991 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %992 = "mid.parameterizations_array"(%991) : (!llvm.ptr) -> !llvm.ptr
      %993 = "mid.method_call"(%992, %990, %988) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
      %994 = "hi.cast"(%993) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "ArrayIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "ArrayIterator">
      %995 = "hi.cast"(%994) {"from_typ" = !hi.type_param<"T", !hi.any, "ArrayIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ArrayIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>
      "mid.return"(%995) : (!hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb148(%996 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %997 : !llvm.ptr):
      %998 = "mid.invariant"(%997) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %999 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb149] : () -> ()
    ^bb149:
      %1000 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1000, %999) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb150] : () -> ()
    ^bb150:
      %1001 = "llvm.extractvalue"(%996) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1002 = "llvm.load"(%999) : (!llvm.ptr) -> i32
      %1003 = "llvm.getelementptr"(%1001, %1002) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1004 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1005 = "llvm.getelementptr"(%1003, %1004) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1005) : (!llvm.ptr) -> ()
    }) {"func_name" = "ArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "channel"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Blocking", "methods" = [@Blocking_B_init_, @Blocking_init_], "hash_tbl" = [@Object, @any_typ, @Blocking, 18446744073709551615 : i64], "offset_tbl" = [12 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 847773162914674935 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Blocking", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Channel", "methods" = [@Channel_field_Channel_0, @Channel_field_value, @Channel_B_init_, @Channel_B_get_, @Channel_B_put_new_valueT, @Channel_init_, @Channel_get_, @Channel_put_new_valueT], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Channel], "offset_tbl" = [18 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14778625957069801166 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Channel", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Blocking", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr):
      %3 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Blocking">
      %4 = "hi.cast"(%3) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.fatptr<"Blocking">, "from_typ_name" = "Blocking", "to_typ_name" = "Blocking"} : (!hi.fatptr<"Blocking">) -> !hi.fatptr<"Blocking">
    }) {"func_name" = "Blocking_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%5 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6 : !llvm.ptr):
      %7 = "mid.invariant"(%6) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %8 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %9 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%9, %8) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %10 = "llvm.extractvalue"(%5) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %11 = "llvm.load"(%8) : (!llvm.ptr) -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %13 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %14 = "llvm.getelementptr"(%12, %13) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%14) : (!llvm.ptr) -> ()
    }) {"func_name" = "Blocking_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Channel", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Channel_field_Channel_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Channel_getter_value", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Nil_or_Channel.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Channel_setter_value", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Nil_or_Channel.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Channel_field_value", "getter_name" = "Channel_getter_value", "setter_name" = "Channel_setter_value"} : () -> ()
    "mid.func"() ({
    ^bb4(%15 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %16 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %17 : !llvm.ptr):
      %18 = "mid.wrap"(%15) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %19 = "hi.cast"(%18) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %20 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %21 = "hi.cast"(%20) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      "mid.set_field"(%19, %21) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
    }) {"func_name" = "Channel_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%22 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %23 : !llvm.ptr):
      %24 = "mid.invariant"(%23) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %25 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %26 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%26, %25) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %27 = "llvm.extractvalue"(%22) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %28 = "llvm.load"(%25) : (!llvm.ptr) -> i32
      %29 = "llvm.getelementptr"(%27, %28) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %30 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %31 = "llvm.getelementptr"(%29, %30) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%31) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb8(%32 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %33 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %34 : !llvm.ptr):
      %35 = "mid.wrap"(%32) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %36 = "hi.cast"(%35) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      "mid.while"() ({
        %37 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %38 = "mid.unwrap"(%37) : (!hi.bool) -> i1
      }, {
        %39 = "mid.get_field"(%36) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        %40 = "mid.refer"(%39) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        %41 = "mid.get_type_field"(%36) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.reified_type
        %42 = "mid.checkflag"(%40) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %43 = "mid.unwrap"(%42) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %44 = "hi.cast"(%40) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        "mid.if"(%43) ({
          %45 = "hi.cast"(%44) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.type_param<"T", !hi.any, "Channel">
          %46 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
          %47 = "hi.cast"(%46) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
          "mid.set_field"(%36, %47) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
          %48 = "hi.cast"(%45) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.type_param<"T", !hi.any, "Channel">
          "mid.return"(%48) : (!hi.type_param<"T", !hi.any, "Channel">) -> ()
          %49 = "hi.cast"(%45) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
          "mid.assign"(%44, %49) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
        }) : (i1) -> ()
        %50 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Blocking">
        %51 = "mid.unwrap"(%50) : (!hi.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %52 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%52, %51) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %53 = "hi.cast"(%50) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>, "from_typ_name" = "Blocking", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Blocking">) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %54 = "mid.unwrap"(%53) : (!hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %55 = "mid.coro_yield"(%54) {"cold" = false} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %56 = "mid.wrap"(%55) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
      }) : () -> ()
    }) {"func_name" = "Channel_get_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.fatptr<"Blocking">} : () -> ()
    "mid.func"() ({
    ^bb9(%57 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %58 : !llvm.ptr):
      %59 = "mid.invariant"(%58) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %60 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb10:
      %61 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%61, %60) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb11] : () -> ()
    ^bb11:
      %62 = "llvm.extractvalue"(%57) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %63 = "llvm.load"(%60) : (!llvm.ptr) -> i32
      %64 = "llvm.getelementptr"(%62, %63) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %65 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %66 = "llvm.getelementptr"(%64, %65) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%66) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_get_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb12(%67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %69 : !llvm.ptr, %70 : !llvm.struct<(!llvm.ptr, i160)>):
      %71 = "mid.wrap"(%67) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %72 = "hi.cast"(%71) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %73 = "mid.wrap"(%70) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Channel">
      %74 = "hi.cast"(%73) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.type_param<"T", !hi.any, "Channel">
      %75 = "mid.get_field"(%72) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      %76 = "mid.refer"(%75) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      %77 = "hi.cast"(%76) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      "mid.while"() ({
        %78 = "mid.get_type_field"(%72) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.reified_type
        %79 = "mid.checkflag"(%77) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %80 = "mid.unwrap"(%79) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %81 = "hi.cast"(%77) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.type_param<"T", !hi.any, "Channel">
        %82 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Blocking">
        %83 = "mid.unwrap"(%82) : (!hi.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %84 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%84, %83) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %85 = "hi.cast"(%82) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>, "from_typ_name" = "Blocking", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Blocking">) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %86 = "mid.unwrap"(%85) : (!hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %87 = "mid.coro_yield"(%86) {"cold" = false} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %88 = "mid.wrap"(%87) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %89 = "mid.get_field"(%72) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        %90 = "mid.refer"(%89) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        %91 = "hi.cast"(%90) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        "mid.assign"(%77, %91) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
      }) : () -> ()
      %92 = "hi.cast"(%74) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      "mid.set_field"(%72, %92) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
    }) {"func_name" = "Channel_put_new_valueT", "result_type" = !llvm.void, "yield_type" = !hi.fatptr<"Blocking">} : () -> ()
    "mid.func"() ({
    ^bb13(%93 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %94 : !llvm.ptr):
      %95 = "mid.invariant"(%94) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %96 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb14] : () -> ()
    ^bb15:
      %97 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%97, %96) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb16] : () -> ()
    ^bb14:
      %98 = "llvm.getelementptr"(%94) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %99 = "mid.checkflag"(%98) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %100 = "llvm.load"(%99) : (!hi.bool) -> i1
      "cf.cond_br"(%100) [^bb15, ^bb15] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %101 = "llvm.extractvalue"(%93) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %102 = "llvm.load"(%96) : (!llvm.ptr) -> i32
      %103 = "llvm.getelementptr"(%101, %102) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %104 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %105 = "llvm.getelementptr"(%103, %104) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%105) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_put_new_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "range"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Range", "methods" = [@Range_field_start, @Range_field_end, @Range_field_step, @Range_field_Range_0, @Range_B_init_endi32, @Range_B_init_starti32_endi32, @Range_B_step_stepi32, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_Bool, @Range_B_any_fFunctionT_to_Bool, @Range_B_enumerate_, @Range_B_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_Bool, @Range_B_chain_otherIterableT, @Range_B_interleave_otherIterableT, @Range_B_zip_otherIterableU, @Range_B_product_otherIterableU, @Range_init_endi32, @Range_init_starti32_endi32, @Range_step_stepi32, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Range_field_Range_0, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_Bool, @Range_B_any_fFunctionT_to_Bool, @Range_B_enumerate_, @Range_B_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_Bool, @Range_B_chain_otherIterableT, @Range_B_interleave_otherIterableT, @Range_B_zip_otherIterableU, @Range_B_product_otherIterableU, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterable, 18446744073709551615 : i64, @Range], "offset_tbl" = [69 : i32, 10 : i32, 0 : i32, 69 : i32, 0 : i32, 44 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5490049236840671069 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_Range", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "RangeIterator", "methods" = [@RangeIterator_field_counter, @RangeIterator_field_end, @RangeIterator_field_step, @RangeIterator_field_RangeIterator_0, @RangeIterator_B_init_counteri32_endi32_stepi32, @RangeIterator_B_next_, @RangeIterator_init_counteri32_endi32_stepi32, @RangeIterator_next_, @RangeIterator_field_RangeIterator_0, @RangeIterator_B_next_, @RangeIterator_next_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @Iterator, @RangeIterator, @Container, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 0 : i32, 18 : i32, 10 : i32, 21 : i32, 21 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 17533181587765144941 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_RangeIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Range", "types" = [i32, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_start", "getter_name" = "Range_getter_start", "setter_name" = "Range_setter_start"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_end", "getter_name" = "Range_getter_end", "setter_name" = "Range_setter_end"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_step", "getter_name" = "Range_getter_step", "setter_name" = "Range_setter_step"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "Range_field_Range_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : i32):
      %4 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %5 = "hi.cast"(%4) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %6 = "mid.wrap"(%3) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %7 = "hi.cast"(%6) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %8 = "hi.cast"(%7) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%5, %8) {"offset" = 1 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %9 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %10 = "hi.cast"(%9) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%5, %10) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %11 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %12 = "hi.cast"(%11) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%5, %12) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Range_init_endi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %17 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %18 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %19 = "mid.checkflag"(%18) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %20 = "llvm.load"(%19) : (!hi.bool) -> i1
      "cf.cond_br"(%20) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %21 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %22 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %23 = "llvm.getelementptr"(%21, %22) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %24 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %25 = "llvm.getelementptr"(%23, %24) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%25) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_init_endi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%26 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %27 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %28 : !llvm.ptr, %29 : i32, %30 : i32):
      %31 = "mid.wrap"(%26) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %32 = "hi.cast"(%31) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %33 = "mid.wrap"(%29) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %34 = "hi.cast"(%33) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %35 = "hi.cast"(%34) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%32, %35) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %36 = "mid.wrap"(%30) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %37 = "hi.cast"(%36) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %38 = "hi.cast"(%37) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%32, %38) {"offset" = 1 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %39 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %40 = "hi.cast"(%39) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%32, %40) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Range_init_starti32_endi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%41 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %42 : !llvm.ptr):
      %43 = "mid.invariant"(%42) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %44 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb8:
      %45 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%45, %44) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb10:
      %46 = "llvm.getelementptr"(%42) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %47 = "mid.checkflag"(%46) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %48 = "llvm.load"(%47) : (!hi.bool) -> i1
      "cf.cond_br"(%48) [^bb8, ^bb8] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb7:
      %49 = "llvm.getelementptr"(%42) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %50 = "mid.checkflag"(%49) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %51 = "llvm.load"(%50) : (!hi.bool) -> i1
      "cf.cond_br"(%51) [^bb10, ^bb10] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb9:
      %52 = "llvm.extractvalue"(%41) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %53 = "llvm.load"(%44) : (!llvm.ptr) -> i32
      %54 = "llvm.getelementptr"(%52, %53) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %55 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%56) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_init_starti32_endi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb11(%57 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %58 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %59 : !llvm.ptr, %60 : i32):
      %61 = "mid.wrap"(%57) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %62 = "hi.cast"(%61) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %63 = "mid.wrap"(%60) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %64 = "hi.cast"(%63) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %65 = "hi.cast"(%64) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%62, %65) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %66 = "hi.cast"(%62) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      "mid.return"(%66) : (!hi.fatptr<"Range">) -> ()
    }) {"func_name" = "Range_step_stepi32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb12(%67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.ptr):
      %69 = "mid.invariant"(%68) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %70 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb14:
      %71 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%71, %70) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb15] : () -> ()
    ^bb13:
      %72 = "llvm.getelementptr"(%68) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %73 = "mid.checkflag"(%72) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %74 = "llvm.load"(%73) : (!hi.bool) -> i1
      "cf.cond_br"(%74) [^bb14, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb15:
      %75 = "llvm.extractvalue"(%67) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %76 = "llvm.load"(%70) : (!llvm.ptr) -> i32
      %77 = "llvm.getelementptr"(%75, %76) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %78 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %79 = "llvm.getelementptr"(%77, %78) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%79) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_step_stepi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb16(%80 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %81 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %82 : !llvm.ptr):
      %83 = "mid.wrap"(%80) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %84 = "hi.cast"(%83) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %85 = "mid.get_field"(%84) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %86 = "mid.get_field"(%84) {"offset" = 1 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %87 = "mid.get_field"(%84) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %88 = "mid.unwrap"(%85) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %89 = "mid.unwrap"(%86) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %90 = "mid.unwrap"(%87) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %91 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "RangeIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"RangeIterator">
      %92 = "mid.get_field"(%84) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %93 = "mid.get_field"(%84) {"offset" = 1 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %94 = "mid.get_field"(%84) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %95 = "hi.cast"(%92) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %96 = "mid.unwrap"(%95) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %97 = "hi.cast"(%93) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %98 = "mid.unwrap"(%97) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %99 = "hi.cast"(%94) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %100 = "mid.unwrap"(%99) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %101 = "mid.unwrap"(%91) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %102 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %103 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %104 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %105 = "mid.parameterizations_array"(%102, %103, %104) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%105, %101, %96, %98, %100) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32, i32) -> ()
      %106 = "hi.cast"(%91) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "RangeIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%106) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Range_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb17(%107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %108 : !llvm.ptr):
      %109 = "mid.invariant"(%108) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %110 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      %111 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%111, %110) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      %112 = "llvm.extractvalue"(%107) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %113 = "llvm.load"(%110) : (!llvm.ptr) -> i32
      %114 = "llvm.getelementptr"(%112, %113) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %115 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %116 = "llvm.getelementptr"(%114, %115) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%116) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb20(%117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %118 : !llvm.ptr):
      %119 = "mid.invariant"(%118) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %120 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb21] : () -> ()
    ^bb22:
      %121 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%121, %120) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb23] : () -> ()
    ^bb21:
      %122 = "llvm.getelementptr"(%118) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %123 = "mid.checkflag"(%122) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %124 = "llvm.load"(%123) : (!hi.bool) -> i1
      "cf.cond_br"(%124) [^bb22, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %125 = "llvm.extractvalue"(%117) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %126 = "llvm.load"(%120) : (!llvm.ptr) -> i32
      %127 = "llvm.getelementptr"(%125, %126) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %128 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %129 = "llvm.getelementptr"(%127, %128) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%129) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb24(%130 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %131 : !llvm.ptr):
      %132 = "mid.invariant"(%131) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %133 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb26:
      %134 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%134, %133) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb27] : () -> ()
    ^bb28:
      %135 = "llvm.getelementptr"(%131) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %136 = "mid.checkflag"(%135) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %137 = "llvm.load"(%136) : (!hi.bool) -> i1
      "cf.cond_br"(%137) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb25:
      %138 = "llvm.getelementptr"(%131) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %139 = "mid.checkflag"(%138) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %140 = "llvm.load"(%139) : (!hi.bool) -> i1
      "cf.cond_br"(%140) [^bb28, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %141 = "llvm.extractvalue"(%130) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %142 = "llvm.load"(%133) : (!llvm.ptr) -> i32
      %143 = "llvm.getelementptr"(%141, %142) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %144 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %145 = "llvm.getelementptr"(%143, %144) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%145) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb29(%146 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %147 : !llvm.ptr):
      %148 = "mid.invariant"(%147) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %149 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb30] : () -> ()
    ^bb31:
      %150 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%150, %149) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb32] : () -> ()
    ^bb30:
      %151 = "llvm.getelementptr"(%147) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %152 = "mid.checkflag"(%151) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %153 = "llvm.load"(%152) : (!hi.bool) -> i1
      "cf.cond_br"(%153) [^bb31, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %154 = "llvm.extractvalue"(%146) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %155 = "llvm.load"(%149) : (!llvm.ptr) -> i32
      %156 = "llvm.getelementptr"(%154, %155) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %157 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %158 = "llvm.getelementptr"(%156, %157) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%158) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb33(%159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %160 : !llvm.ptr):
      %161 = "mid.invariant"(%160) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %162 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb34] : () -> ()
    ^bb35:
      %163 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%163, %162) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb36] : () -> ()
    ^bb34:
      %164 = "llvm.getelementptr"(%160) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %165 = "mid.checkflag"(%164) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %166 = "llvm.load"(%165) : (!hi.bool) -> i1
      "cf.cond_br"(%166) [^bb35, ^bb35] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb36:
      %167 = "llvm.extractvalue"(%159) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %168 = "llvm.load"(%162) : (!llvm.ptr) -> i32
      %169 = "llvm.getelementptr"(%167, %168) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %170 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %171 = "llvm.getelementptr"(%169, %170) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%171) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb37(%172 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %173 : !llvm.ptr):
      %174 = "mid.invariant"(%173) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %175 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %176 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%176, %175) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb39:
      %177 = "llvm.extractvalue"(%172) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %178 = "llvm.load"(%175) : (!llvm.ptr) -> i32
      %179 = "llvm.getelementptr"(%177, %178) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %180 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %181 = "llvm.getelementptr"(%179, %180) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%181) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb40(%182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %183 : !llvm.ptr):
      %184 = "mid.invariant"(%183) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %185 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb41] : () -> ()
    ^bb42:
      %186 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%186, %185) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb41:
      %187 = "llvm.getelementptr"(%183) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %188 = "mid.checkflag"(%187) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %189 = "llvm.load"(%188) : (!hi.bool) -> i1
      "cf.cond_br"(%189) [^bb42, ^bb42] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb43:
      %190 = "llvm.extractvalue"(%182) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %191 = "llvm.load"(%185) : (!llvm.ptr) -> i32
      %192 = "llvm.getelementptr"(%190, %191) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %193 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %194 = "llvm.getelementptr"(%192, %193) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%194) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb44(%195 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %196 : !llvm.ptr):
      %197 = "mid.invariant"(%196) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %198 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb45] : () -> ()
    ^bb46:
      %199 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%199, %198) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb45:
      %200 = "llvm.getelementptr"(%196) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %201 = "mid.checkflag"(%200) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %202 = "llvm.load"(%201) : (!hi.bool) -> i1
      "cf.cond_br"(%202) [^bb46, ^bb46] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb47:
      %203 = "llvm.extractvalue"(%195) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %204 = "llvm.load"(%198) : (!llvm.ptr) -> i32
      %205 = "llvm.getelementptr"(%203, %204) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %206 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %207 = "llvm.getelementptr"(%205, %206) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%207) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb48(%208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %209 : !llvm.ptr):
      %210 = "mid.invariant"(%209) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %211 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb49] : () -> ()
    ^bb50:
      %212 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%212, %211) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb51] : () -> ()
    ^bb49:
      %213 = "llvm.getelementptr"(%209) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %214 = "mid.checkflag"(%213) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %215 = "llvm.load"(%214) : (!hi.bool) -> i1
      "cf.cond_br"(%215) [^bb50, ^bb50] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb51:
      %216 = "llvm.extractvalue"(%208) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %217 = "llvm.load"(%211) : (!llvm.ptr) -> i32
      %218 = "llvm.getelementptr"(%216, %217) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %219 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %220 = "llvm.getelementptr"(%218, %219) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%220) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb52(%221 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %222 : !llvm.ptr):
      %223 = "mid.invariant"(%222) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %224 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb53] : () -> ()
    ^bb54:
      %225 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%225, %224) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb55] : () -> ()
    ^bb53:
      %226 = "llvm.getelementptr"(%222) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %227 = "mid.checkflag"(%226) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %228 = "llvm.load"(%227) : (!hi.bool) -> i1
      "cf.cond_br"(%228) [^bb54, ^bb54] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb55:
      %229 = "llvm.extractvalue"(%221) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %230 = "llvm.load"(%224) : (!llvm.ptr) -> i32
      %231 = "llvm.getelementptr"(%229, %230) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %232 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %233 = "llvm.getelementptr"(%231, %232) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%233) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb56(%234 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %235 : !llvm.ptr):
      %236 = "mid.invariant"(%235) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %237 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb57] : () -> ()
    ^bb58:
      %238 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%238, %237) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb59] : () -> ()
    ^bb57:
      %239 = "llvm.getelementptr"(%235) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %240 = "mid.checkflag"(%239) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %241 = "llvm.load"(%240) : (!hi.bool) -> i1
      "cf.cond_br"(%241) [^bb58, ^bb58] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb59:
      %242 = "llvm.extractvalue"(%234) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %243 = "llvm.load"(%237) : (!llvm.ptr) -> i32
      %244 = "llvm.getelementptr"(%242, %243) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %245 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %246 = "llvm.getelementptr"(%244, %245) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%246) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb60(%247 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %248 : !llvm.ptr):
      %249 = "mid.invariant"(%248) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %250 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb61] : () -> ()
    ^bb62:
      %251 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%251, %250) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb63] : () -> ()
    ^bb61:
      %252 = "llvm.getelementptr"(%248) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %253 = "mid.checkflag"(%252) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %254 = "llvm.load"(%253) : (!hi.bool) -> i1
      "cf.cond_br"(%254) [^bb62, ^bb62] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb63:
      %255 = "llvm.extractvalue"(%247) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %256 = "llvm.load"(%250) : (!llvm.ptr) -> i32
      %257 = "llvm.getelementptr"(%255, %256) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %258 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %259 = "llvm.getelementptr"(%257, %258) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%259) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_RangeIterator", "types" = [i32, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_counter", "getter_name" = "RangeIterator_getter_counter", "setter_name" = "RangeIterator_setter_counter"} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_end", "getter_name" = "RangeIterator_getter_end", "setter_name" = "RangeIterator_setter_end"} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_step", "getter_name" = "RangeIterator_getter_step", "setter_name" = "RangeIterator_setter_step"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "RangeIterator_field_RangeIterator_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
    "mid.func"() ({
    ^bb64(%260 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %261 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %262 : !llvm.ptr, %263 : i32, %264 : i32, %265 : i32):
      %266 = "mid.wrap"(%260) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"RangeIterator">
      %267 = "hi.cast"(%266) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      %268 = "mid.wrap"(%263) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %269 = "hi.cast"(%268) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %270 = "hi.cast"(%269) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%267, %270) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %271 = "mid.wrap"(%264) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %272 = "hi.cast"(%271) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %273 = "hi.cast"(%272) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%267, %273) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %274 = "mid.wrap"(%265) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %275 = "hi.cast"(%274) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %276 = "hi.cast"(%275) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%267, %276) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "RangeIterator_init_counteri32_endi32_stepi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb65(%277 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %278 : !llvm.ptr):
      %279 = "mid.invariant"(%278) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %280 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb66] : () -> ()
    ^bb67:
      %281 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%281, %280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb68] : () -> ()
    ^bb69:
      %282 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %283 = "mid.checkflag"(%282) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %284 = "llvm.load"(%283) : (!hi.bool) -> i1
      "cf.cond_br"(%284) [^bb67, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb70:
      %285 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %286 = "mid.checkflag"(%285) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %287 = "llvm.load"(%286) : (!hi.bool) -> i1
      "cf.cond_br"(%287) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb66:
      %288 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %289 = "mid.checkflag"(%288) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %290 = "llvm.load"(%289) : (!hi.bool) -> i1
      "cf.cond_br"(%290) [^bb70, ^bb70] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %291 = "llvm.extractvalue"(%277) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %292 = "llvm.load"(%280) : (!llvm.ptr) -> i32
      %293 = "llvm.getelementptr"(%291, %292) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %294 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %295 = "llvm.getelementptr"(%293, %294) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%295) : (!llvm.ptr) -> ()
    }) {"func_name" = "RangeIterator_B_init_counteri32_endi32_stepi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb71(%296 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %297 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %298 : !llvm.ptr):
      %299 = "mid.wrap"(%296) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"RangeIterator">
      %300 = "hi.cast"(%299) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      %301 = "mid.get_field"(%300) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %302 = "mid.get_field"(%300) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %303 = "mid.unwrap"(%301) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %304 = "mid.unwrap"(%302) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %305 = "mid.comparison"(%303, %304) {"op" = "GT"} : (i32, i32) -> i1
      %306 = "mid.wrap"(%305) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %307 = "mid.unwrap"(%306) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%307) ({
        %308 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %309 = "hi.cast"(%308) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        "mid.return"(%309) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %310 = "mid.get_field"(%300) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %311 = "mid.refer"(%310) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %312 = "mid.get_field"(%300) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %313 = "mid.get_field"(%300) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %314 = "mid.unwrap"(%312) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %315 = "mid.unwrap"(%313) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %316 = "mid.arithmetic"(%314, %315) {"op" = "ADD"} : (i32, i32) -> i32
      %317 = "mid.wrap"(%316) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %318 = "hi.cast"(%317) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%300, %318) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %319 = "hi.cast"(%311) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%319) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "RangeIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb72(%320 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %321 : !llvm.ptr):
      %322 = "mid.invariant"(%321) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %323 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb73] : () -> ()
    ^bb73:
      %324 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%324, %323) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb74:
      %325 = "llvm.extractvalue"(%320) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %326 = "llvm.load"(%323) : (!llvm.ptr) -> i32
      %327 = "llvm.getelementptr"(%325, %326) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %328 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %329 = "llvm.getelementptr"(%327, %328) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%329) : (!llvm.ptr) -> ()
    }) {"func_name" = "RangeIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "math"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Math", "methods" = [@Math_B__Self_sqrt_xf64, @Math_B__Self_abs_xi32__Self_abs_xf64, @Math_B__Self_max_af64_bf64__Self_max_ai32_bi32, @Math_B__Self_min_ai32_bi32__Self_min_af64_bf64, @Math_B__Self_round_xf64, @Math_B__Self_floor_xf64, @Math_B__Self_ceiling_xf64, @Math__Self_sqrt_xf64, @Math__Self_abs_xi32, @Math__Self_abs_xf64, @Math__Self_max_af64_bf64, @Math__Self_max_ai32_bi32, @Math__Self_min_ai32_bi32, @Math__Self_min_af64_bf64, @Math__Self_round_xf64, @Math__Self_floor_xf64, @Math__Self_ceiling_xf64], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Math], "offset_tbl" = [27 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8094150130346788308 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Math", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Math", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr, %1 : f64):
      %2 = "mid.wrap"(%1) : (f64) -> !hi.float
      %3 = "hi.cast"(%2) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %4 = "mid.unwrap"(%3) : (!hi.float) -> f64
      %5 = "mid.intrinsic"(%4) {"call_name" = "llvm.sqrt.f64", "num_args" = 1 : i32} : (f64) -> f64
      %6 = "mid.wrap"(%5) : (f64) -> !hi.float
      %7 = "hi.cast"(%6) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%7) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_sqrt_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%8 : !llvm.ptr):
      %9 = "mid.invariant"(%8) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %10 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %11 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%11, %10) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %12 = "llvm.getelementptr"(%8) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %13 = "mid.checkflag"(%12) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %14 = "llvm.load"(%13) : (!hi.bool) -> i1
      "cf.cond_br"(%14) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %15 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %16 = "llvm.load"(%10) : (!llvm.ptr) -> i32
      %17 = "llvm.getelementptr"(%15, %16) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %18 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %19 = "llvm.getelementptr"(%17, %18) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%19) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_sqrt_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%20 : !llvm.ptr, %21 : !llvm.struct<(!llvm.ptr, i64)>):
      %22 = "mid.wrap"(%21) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %23 = "hi.cast"(%22) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %24 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %25 = "mid.unwrap"(%23) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %26 = "mid.unwrap"(%24) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %27 = "mid.comparison"(%25, %26) {"op" = "GE"} : (i32, i32) -> i1
      %28 = "mid.wrap"(%27) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %29 = "mid.unwrap"(%28) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%29) ({
        %30 = "hi.cast"(%23) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
        "mid.return"(%30) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
      }) : (i1) -> ()
      %31 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %32 = "mid.unwrap"(%31) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %33 = "mid.unwrap"(%23) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %34 = "mid.arithmetic"(%32, %33) {"op" = "MUL"} : (i32, i32) -> i32
      %35 = "mid.wrap"(%34) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %36 = "hi.cast"(%35) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      "mid.return"(%36) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_abs_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%37 : !llvm.ptr, %38 : !llvm.struct<(!llvm.ptr, i64)>):
      %39 = "mid.wrap"(%38) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %40 = "hi.cast"(%39) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.float
      %41 = "mid.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %42 = "mid.unwrap"(%40) : (!hi.float) -> f64
      %43 = "mid.unwrap"(%41) : (!hi.float) -> f64
      %44 = "mid.comparison"(%42, %43) {"op" = "GE"} : (f64, f64) -> i1
      %45 = "mid.wrap"(%44) : (i1) -> !hi.float
      %46 = "mid.unwrap"(%45) : (!hi.float) -> i1
      "mid.if"(%46) ({
        %47 = "hi.cast"(%40) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
        "mid.return"(%47) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
      }) : (i1) -> ()
      %48 = "mid.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %49 = "mid.literal"() {"value" = 1.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %50 = "mid.unwrap"(%48) : (!hi.float) -> f64
      %51 = "mid.unwrap"(%49) : (!hi.float) -> f64
      %52 = "mid.arithmetic"(%50, %51) {"op" = "SUB"} : (f64, f64) -> f64
      %53 = "mid.wrap"(%52) : (f64) -> !hi.float
      %54 = "mid.unwrap"(%53) : (!hi.float) -> f64
      %55 = "mid.unwrap"(%40) : (!hi.float) -> f64
      %56 = "mid.arithmetic"(%54, %55) {"op" = "MUL"} : (f64, f64) -> f64
      %57 = "mid.wrap"(%56) : (f64) -> !hi.float
      %58 = "hi.cast"(%57) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      "mid.return"(%58) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_abs_xf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb7(%59 : !llvm.ptr):
      %60 = "mid.invariant"(%59) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %61 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %62 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%62, %61) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %63 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%63, %61) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb8:
      %64 = "llvm.getelementptr"(%59) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %65 = "mid.checkflag"(%64) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %66 = "llvm.load"(%65) : (!hi.bool) -> i1
      "cf.cond_br"(%66) [^bb9, ^bb12] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb12:
      %67 = "llvm.getelementptr"(%59) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %68 = "mid.checkflag"(%67) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %69 = "llvm.load"(%68) : (!hi.bool) -> i1
      "cf.cond_br"(%69) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %70 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %71 = "llvm.load"(%61) : (!llvm.ptr) -> i32
      %72 = "llvm.getelementptr"(%70, %71) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %73 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %74 = "llvm.getelementptr"(%72, %73) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%74) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_abs_xi32__Self_abs_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb13(%75 : !llvm.ptr, %76 : !llvm.struct<(!llvm.ptr, i64)>, %77 : !llvm.struct<(!llvm.ptr, i64)>):
      %78 = "mid.wrap"(%76) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %79 = "hi.cast"(%78) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.float
      %80 = "mid.wrap"(%77) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %81 = "hi.cast"(%80) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.float
      %82 = "mid.unwrap"(%79) : (!hi.float) -> f64
      %83 = "mid.unwrap"(%81) : (!hi.float) -> f64
      %84 = "mid.comparison"(%82, %83) {"op" = "GT"} : (f64, f64) -> i1
      %85 = "mid.wrap"(%84) : (i1) -> !hi.float
      %86 = "mid.unwrap"(%85) : (!hi.float) -> i1
      "mid.if"(%86) ({
        %87 = "hi.cast"(%79) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
        "mid.return"(%87) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
      }) : (i1) -> ()
      %88 = "hi.cast"(%81) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      "mid.return"(%88) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_max_af64_bf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb14(%89 : !llvm.ptr, %90 : !llvm.struct<(!llvm.ptr, i64)>, %91 : !llvm.struct<(!llvm.ptr, i64)>):
      %92 = "mid.wrap"(%90) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %93 = "hi.cast"(%92) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %94 = "mid.wrap"(%91) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %95 = "hi.cast"(%94) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %96 = "mid.unwrap"(%93) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %97 = "mid.unwrap"(%95) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %98 = "mid.comparison"(%96, %97) {"op" = "GT"} : (i32, i32) -> i1
      %99 = "mid.wrap"(%98) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %100 = "mid.unwrap"(%99) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%100) ({
        %101 = "hi.cast"(%93) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
        "mid.return"(%101) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
      }) : (i1) -> ()
      %102 = "hi.cast"(%95) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      "mid.return"(%102) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_max_ai32_bi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%103 : !llvm.ptr):
      %104 = "mid.invariant"(%103) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %105 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %106 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%106, %105) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb19:
      %107 = "llvm.getelementptr"(%103) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %108 = "mid.checkflag"(%107) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %109 = "llvm.load"(%108) : (!hi.bool) -> i1
      "cf.cond_br"(%109) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb20:
      %110 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%110, %105) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb21:
      %111 = "llvm.getelementptr"(%103) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %112 = "mid.checkflag"(%111) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %113 = "llvm.load"(%112) : (!hi.bool) -> i1
      "cf.cond_br"(%113) [^bb20, ^bb20] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %114 = "llvm.getelementptr"(%103) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %115 = "mid.checkflag"(%114) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %116 = "llvm.load"(%115) : (!hi.bool) -> i1
      "cf.cond_br"(%116) [^bb19, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %117 = "llvm.getelementptr"(%103) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %118 = "mid.checkflag"(%117) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %119 = "llvm.load"(%118) : (!hi.bool) -> i1
      "cf.cond_br"(%119) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %120 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %121 = "llvm.load"(%105) : (!llvm.ptr) -> i32
      %122 = "llvm.getelementptr"(%120, %121) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %123 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %124 = "llvm.getelementptr"(%122, %123) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%124) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_max_af64_bf64__Self_max_ai32_bi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb23(%125 : !llvm.ptr, %126 : !llvm.struct<(!llvm.ptr, i64)>, %127 : !llvm.struct<(!llvm.ptr, i64)>):
      %128 = "mid.wrap"(%126) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %129 = "hi.cast"(%128) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %130 = "mid.wrap"(%127) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %131 = "hi.cast"(%130) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %132 = "mid.unwrap"(%129) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %133 = "mid.unwrap"(%131) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %134 = "mid.comparison"(%132, %133) {"op" = "LT"} : (i32, i32) -> i1
      %135 = "mid.wrap"(%134) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %136 = "mid.unwrap"(%135) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%136) ({
        %137 = "hi.cast"(%129) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
        "mid.return"(%137) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
      }) : (i1) -> ()
      %138 = "hi.cast"(%131) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      "mid.return"(%138) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_min_ai32_bi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%139 : !llvm.ptr, %140 : !llvm.struct<(!llvm.ptr, i64)>, %141 : !llvm.struct<(!llvm.ptr, i64)>):
      %142 = "mid.wrap"(%140) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %143 = "hi.cast"(%142) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.float
      %144 = "mid.wrap"(%141) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      %145 = "hi.cast"(%144) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> !hi.float
      %146 = "mid.unwrap"(%143) : (!hi.float) -> f64
      %147 = "mid.unwrap"(%145) : (!hi.float) -> f64
      %148 = "mid.comparison"(%146, %147) {"op" = "LT"} : (f64, f64) -> i1
      %149 = "mid.wrap"(%148) : (i1) -> !hi.float
      %150 = "mid.unwrap"(%149) : (!hi.float) -> i1
      "mid.if"(%150) ({
        %151 = "hi.cast"(%143) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
        "mid.return"(%151) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
      }) : (i1) -> ()
      %152 = "hi.cast"(%145) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>
      "mid.return"(%152) : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_min_af64_bf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb25(%153 : !llvm.ptr):
      %154 = "mid.invariant"(%153) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %155 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb26] : () -> ()
    ^bb27:
      %156 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%156, %155) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb28] : () -> ()
    ^bb29:
      %157 = "llvm.getelementptr"(%153) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %158 = "mid.checkflag"(%157) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %159 = "llvm.load"(%158) : (!hi.bool) -> i1
      "cf.cond_br"(%159) [^bb27, ^bb27] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %160 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%160, %155) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb28] : () -> ()
    ^bb31:
      %161 = "llvm.getelementptr"(%153) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %162 = "mid.checkflag"(%161) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %163 = "llvm.load"(%162) : (!hi.bool) -> i1
      "cf.cond_br"(%163) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %164 = "llvm.getelementptr"(%153) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %165 = "mid.checkflag"(%164) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %166 = "llvm.load"(%165) : (!hi.bool) -> i1
      "cf.cond_br"(%166) [^bb29, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %167 = "llvm.getelementptr"(%153) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %168 = "mid.checkflag"(%167) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %169 = "llvm.load"(%168) : (!hi.bool) -> i1
      "cf.cond_br"(%169) [^bb31, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb28:
      %170 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %171 = "llvm.load"(%155) : (!llvm.ptr) -> i32
      %172 = "llvm.getelementptr"(%170, %171) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %173 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %174 = "llvm.getelementptr"(%172, %173) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%174) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_min_ai32_bi32__Self_min_af64_bf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb33(%175 : !llvm.ptr, %176 : f64):
      %177 = "mid.wrap"(%176) : (f64) -> !hi.float
      %178 = "hi.cast"(%177) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %179 = "mid.unwrap"(%178) : (!hi.float) -> f64
      %180 = "mid.intrinsic"(%179) {"call_name" = "llvm.round.f64", "num_args" = 1 : i32} : (f64) -> f64
      %181 = "mid.wrap"(%180) : (f64) -> !hi.float
      %182 = "hi.cast"(%181) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%182) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_round_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb34(%183 : !llvm.ptr):
      %184 = "mid.invariant"(%183) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %185 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb35] : () -> ()
    ^bb36:
      %186 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%186, %185) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb37] : () -> ()
    ^bb35:
      %187 = "llvm.getelementptr"(%183) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %188 = "mid.checkflag"(%187) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %189 = "llvm.load"(%188) : (!hi.bool) -> i1
      "cf.cond_br"(%189) [^bb36, ^bb36] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %190 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %191 = "llvm.load"(%185) : (!llvm.ptr) -> i32
      %192 = "llvm.getelementptr"(%190, %191) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %193 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %194 = "llvm.getelementptr"(%192, %193) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%194) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_round_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb38(%195 : !llvm.ptr, %196 : f64):
      %197 = "mid.wrap"(%196) : (f64) -> !hi.float
      %198 = "hi.cast"(%197) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %199 = "mid.unwrap"(%198) : (!hi.float) -> f64
      %200 = "mid.intrinsic"(%199) {"call_name" = "llvm.floor.f64", "num_args" = 1 : i32} : (f64) -> f64
      %201 = "mid.wrap"(%200) : (f64) -> !hi.float
      %202 = "hi.cast"(%201) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%202) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_floor_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb39(%203 : !llvm.ptr):
      %204 = "mid.invariant"(%203) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %205 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb40] : () -> ()
    ^bb41:
      %206 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%206, %205) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb40:
      %207 = "llvm.getelementptr"(%203) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %208 = "mid.checkflag"(%207) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %209 = "llvm.load"(%208) : (!hi.bool) -> i1
      "cf.cond_br"(%209) [^bb41, ^bb41] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb42:
      %210 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %211 = "llvm.load"(%205) : (!llvm.ptr) -> i32
      %212 = "llvm.getelementptr"(%210, %211) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %213 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %214 = "llvm.getelementptr"(%212, %213) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%214) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_floor_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb43(%215 : !llvm.ptr, %216 : f64):
      %217 = "mid.wrap"(%216) : (f64) -> !hi.float
      %218 = "hi.cast"(%217) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %219 = "mid.unwrap"(%218) : (!hi.float) -> f64
      %220 = "mid.intrinsic"(%219) {"call_name" = "llvm.ceil.f64", "num_args" = 1 : i32} : (f64) -> f64
      %221 = "mid.wrap"(%220) : (f64) -> !hi.float
      %222 = "hi.cast"(%221) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%222) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_ceiling_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb44(%223 : !llvm.ptr):
      %224 = "mid.invariant"(%223) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %225 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb45] : () -> ()
    ^bb46:
      %226 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%226, %225) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb45:
      %227 = "llvm.getelementptr"(%223) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %228 = "mid.checkflag"(%227) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %229 = "llvm.load"(%228) : (!hi.bool) -> i1
      "cf.cond_br"(%229) [^bb46, ^bb46] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb47:
      %230 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %231 = "llvm.load"(%225) : (!llvm.ptr) -> i32
      %232 = "llvm.getelementptr"(%230, %231) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %233 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %234 = "llvm.getelementptr"(%232, %233) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%234) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_ceiling_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "map"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "KeyNotFound", "methods" = [@KeyNotFound_field_line_number, @KeyNotFound_field_file_name, @KeyNotFound_field_message, @KeyNotFound_field_stacktrace, @KeyNotFound_field_n_frames, @KeyNotFound_B_init_messageString, @KeyNotFound_B_init_, @KeyNotFound_B_set_info_line_numberi32_file_nameString, @KeyNotFound_B_print_stacktrace_, @KeyNotFound_B_report_, @KeyNotFound_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @Exception_print_message_, @KeyNotFound_field_line_number, @KeyNotFound_field_file_name, @KeyNotFound_field_message, @KeyNotFound_field_stacktrace, @KeyNotFound_field_n_frames, @KeyNotFound_B_init_messageString, @KeyNotFound_B_init_, @KeyNotFound_B_set_info_line_numberi32_file_nameString, @KeyNotFound_B_print_stacktrace_, @KeyNotFound_B_report_, @KeyNotFound_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, @KeyNotFound, @any_typ, @Exception], "offset_tbl" = [44 : i32, 10 : i32, 10 : i32, 27 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 2946564862774055400 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "data_size_fn" = "_data_size_KeyNotFound", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Map", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @any_typ, @Container, @Map, 18446744073709551615 : i64, @Object], "offset_tbl" = [0 : i32, 0 : i32, 49 : i32, 10 : i32, 74 : i32, 10 : i32, 0 : i32, 74 : i32], "prime" = 4611686018427388331 : i64, "hash_id" = 13196888402582771646 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>, "data_size_fn" = "_data_size_Map", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "HashMap", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @any_typ, @Container, @Map, @HashMap, @Object], "offset_tbl" = [0 : i32, 0 : i32, 113 : i32, 10 : i32, 138 : i32, 49 : i32, 10 : i32, 138 : i32], "prime" = 4611686018427388331 : i64, "hash_id" = 15597100789811399287 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>, "data_size_fn" = "_data_size_HashMap", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_KeyNotFound", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_line_number", "getter_name" = "KeyNotFound_getter_line_number", "setter_name" = "KeyNotFound_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_file_name", "getter_name" = "KeyNotFound_getter_file_name", "setter_name" = "KeyNotFound_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_message", "getter_name" = "KeyNotFound_getter_message", "setter_name" = "KeyNotFound_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_stacktrace", "getter_name" = "KeyNotFound_getter_stacktrace", "setter_name" = "KeyNotFound_setter_stacktrace"} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_n_frames", "getter_name" = "KeyNotFound_getter_n_frames", "setter_name" = "KeyNotFound_setter_n_frames"} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_messageString", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb2:
      %4 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb1:
      %5 = "llvm.getelementptr"(%1) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %6 = "mid.checkflag"(%5) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %7 = "llvm.load"(%6) : (!hi.bool) -> i1
      "cf.cond_br"(%7) [^bb2, ^bb2] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb3:
      %8 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %9 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %10 = "llvm.getelementptr"(%8, %9) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %11 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%12) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb4(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      %17 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %18 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %19 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %20 = "llvm.getelementptr"(%18, %19) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %21 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %22 = "llvm.getelementptr"(%20, %21) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%22) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_set_info_line_numberi32_file_nameString", "function_type" = !llvm.func<void (i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb7(%23 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %24 : !llvm.ptr):
      %25 = "mid.invariant"(%24) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %26 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %27 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%27, %26) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %28 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %29 = "mid.checkflag"(%28) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %30 = "llvm.load"(%29) : (!hi.bool) -> i1
      "cf.cond_br"(%30) [^bb9, ^bb9] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb8:
      %31 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %32 = "mid.checkflag"(%31) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %33 = "llvm.load"(%32) : (!hi.bool) -> i1
      "cf.cond_br"(%33) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %34 = "llvm.extractvalue"(%23) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %35 = "llvm.load"(%26) : (!llvm.ptr) -> i32
      %36 = "llvm.getelementptr"(%34, %35) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %37 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%38) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_print_stacktrace_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb12(%39 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %40 : !llvm.ptr):
      %41 = "mid.invariant"(%40) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %42 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %43 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%43, %42) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      %44 = "llvm.extractvalue"(%39) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %45 = "llvm.load"(%42) : (!llvm.ptr) -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %47 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%48) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_print_stacktrace_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_report_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb15(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      %53 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      %54 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %55 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %57 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %58 = "llvm.getelementptr"(%56, %57) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%58) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_print_message_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb18(%59 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %60 : !llvm.ptr):
      %61 = "mid.invariant"(%60) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %62 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      %63 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%63, %62) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb20] : () -> ()
    ^bb20:
      %64 = "llvm.extractvalue"(%59) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %65 = "llvm.load"(%62) : (!llvm.ptr) -> i32
      %66 = "llvm.getelementptr"(%64, %65) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %67 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %68 = "llvm.getelementptr"(%66, %67) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%68) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Map", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Map_field_Map_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Map_field_Map_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Map_field_Map_2"} : () -> ()
    "mid.func"() ({
    ^bb21(%69 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %70 : !llvm.ptr):
      %71 = "mid.invariant"(%70) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %72 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb22] : () -> ()
    ^bb22:
      %73 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%73, %72) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb23] : () -> ()
    ^bb23:
      %74 = "llvm.extractvalue"(%69) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %75 = "llvm.load"(%72) : (!llvm.ptr) -> i32
      %76 = "llvm.getelementptr"(%74, %75) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %77 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %78 = "llvm.getelementptr"(%76, %77) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%78) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb24(%79 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %80 : !llvm.ptr):
      %81 = "mid.invariant"(%80) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %82 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb26:
      %83 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%83, %82) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb27] : () -> ()
    ^bb25:
      %84 = "llvm.getelementptr"(%80) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %85 = "mid.checkflag"(%84) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %86 = "llvm.load"(%85) : (!hi.bool) -> i1
      "cf.cond_br"(%86) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %87 = "llvm.extractvalue"(%79) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %88 = "llvm.load"(%82) : (!llvm.ptr) -> i32
      %89 = "llvm.getelementptr"(%87, %88) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %90 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %91 = "llvm.getelementptr"(%89, %90) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%91) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_get_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb28(%92 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %93 : !llvm.ptr):
      %94 = "mid.invariant"(%93) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %95 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb30:
      %96 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%96, %95) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb32:
      %97 = "llvm.getelementptr"(%93) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %98 = "mid.checkflag"(%97) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %99 = "llvm.load"(%98) : (!hi.bool) -> i1
      "cf.cond_br"(%99) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb29:
      %100 = "llvm.getelementptr"(%93) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %101 = "mid.checkflag"(%100) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %102 = "llvm.load"(%101) : (!hi.bool) -> i1
      "cf.cond_br"(%102) [^bb32, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %103 = "llvm.extractvalue"(%92) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %104 = "llvm.load"(%95) : (!llvm.ptr) -> i32
      %105 = "llvm.getelementptr"(%103, %104) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %106 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %107 = "llvm.getelementptr"(%105, %106) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%107) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B__set_index_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb33(%108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %109 : !llvm.ptr):
      %110 = "mid.invariant"(%109) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %111 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb34] : () -> ()
    ^bb35:
      %112 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%112, %111) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb36] : () -> ()
    ^bb34:
      %113 = "llvm.getelementptr"(%109) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %114 = "mid.checkflag"(%113) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %115 = "llvm.load"(%114) : (!hi.bool) -> i1
      "cf.cond_br"(%115) [^bb35, ^bb35] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb36:
      %116 = "llvm.extractvalue"(%108) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %117 = "llvm.load"(%111) : (!llvm.ptr) -> i32
      %118 = "llvm.getelementptr"(%116, %117) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %119 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %120 = "llvm.getelementptr"(%118, %119) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%120) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_remove_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb37(%121 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %122 : !llvm.ptr):
      %123 = "mid.invariant"(%122) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %124 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %125 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%125, %124) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb39:
      %126 = "llvm.extractvalue"(%121) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %127 = "llvm.load"(%124) : (!llvm.ptr) -> i32
      %128 = "llvm.getelementptr"(%126, %127) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %129 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %130 = "llvm.getelementptr"(%128, %129) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%130) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_clear_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb40(%131 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %132 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %133 : !llvm.ptr, %134 : !llvm.struct<(!llvm.ptr, i160)>):
      %135 = "mid.wrap"(%131) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %136 = "hi.cast"(%135) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %137 = "mid.wrap"(%134) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "Map">
      %138 = "hi.cast"(%137) {"from_typ" = !hi.type_param<"K", !hi.any, "Map">, "to_typ" = !hi.type_param<"K", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Map">) -> !hi.type_param<"K", !hi.any, "Map">
      %139 = "hi.cast"(%138) {"from_typ" = !hi.type_param<"K", !hi.any, "Map">, "to_typ" = !hi.type_param<"K", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Map">) -> !hi.type_param<"K", !hi.any, "Map">
      %140 = "mid.unwrap"(%139) : (!hi.type_param<"K", !hi.any, "Map">) -> !llvm.struct<(!llvm.ptr, i160)>
      %141 = "mid.unwrap"(%136) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %142 = "mid.get_type_field"(%136) {"offset" = 0 : i64, "vtable_bytes" = 512 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %143 = "mid.parameterizations_array"(%142) : (!hi.reified_type) -> !llvm.ptr
      %144 = "mid.method_call"(%143, %141, %140) {"offset" = 4 : i32, "vptrs" = ["any_typ"], "vtable_size" = 64 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>
      %145 = "hi.cast"(%144) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>
      %146 = "mid.checkflag"(%145) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %147 = "mid.unwrap"(%146) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %148 = "hi.cast"(%145) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>
      "mid.if"(%147) ({
        %149 = "hi.cast"(%148) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.nil
        %150 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "KeyNotFound", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"KeyNotFound">
        %151 = "mid.unwrap"(%150) : (!hi.fatptr<"KeyNotFound">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %152 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%152, %151) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %153 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %154 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %155 = "hi.cast"(%154) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %156 = "mid.create_buffer"(%155) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %157 = "mid.refer"(%156) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %158 = "mid.literal"() {"typ" = !llvm.array<54 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\map.mini"} : () -> !llvm.ptr
        %159 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%157, %159, %158) {"typ" = !llvm.array<54 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %160 = "mid.literal"() {"value" = 54 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %161 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %162 = "mid.unwrap"(%157) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %163 = "mid.unwrap"(%160) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %164 = "mid.unwrap"(%161) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %165 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %166 = "mid.literal"() {"value" = 54 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %167 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %168 = "hi.cast"(%157) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %169 = "mid.unwrap"(%168) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %170 = "hi.cast"(%166) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %171 = "mid.unwrap"(%170) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %172 = "hi.cast"(%167) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %173 = "mid.unwrap"(%172) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %174 = "mid.unwrap"(%165) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %175 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %176 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %177 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %178 = "mid.parameterizations_array"(%175, %176, %177) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%178, %174, %169, %171, %173) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %179 = "hi.cast"(%153) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %180 = "mid.unwrap"(%179) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %181 = "hi.cast"(%165) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %182 = "mid.unwrap"(%181) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %183 = "mid.unwrap"(%150) : (!hi.fatptr<"KeyNotFound">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %184 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %185 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %186 = "mid.parameterizations_array"(%184, %185) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%186, %183, %180, %182) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %187 = "hi.cast"(%150) {"from_typ" = !hi.fatptr<"KeyNotFound">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "KeyNotFound", "to_typ_name" = "union_typ"} : (!hi.fatptr<"KeyNotFound">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %188 = "mid.unwrap"(%187) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %189 = "mid.coro_yield"(%188) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %190 = "mid.wrap"(%189) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"KeyNotFound">, !hi.nil]>
        %191 = "hi.cast"(%149) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>
        "mid.assign"(%148, %191) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> ()
      }) : (i1) -> ()
      %192 = "mid.get_type_field"(%136) {"offset" = 1 : i64, "vtable_bytes" = 512 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %193 = "mid.checkflag"(%148) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %194 = "mid.unwrap"(%193) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %195 = "hi.cast"(%148) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>
      "mid.if"(%194) ({
        %196 = "hi.cast"(%195) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.type_param<"V", !hi.any, "Map">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.type_param<"V", !hi.any, "Map">
        %197 = "hi.cast"(%196) {"from_typ" = !hi.type_param<"V", !hi.any, "Map">, "to_typ" = !hi.type_param<"V", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Map">) -> !hi.type_param<"V", !hi.any, "Map">
        "mid.return"(%197) : (!hi.type_param<"V", !hi.any, "Map">) -> ()
        %198 = "hi.cast"(%196) {"from_typ" = !hi.type_param<"V", !hi.any, "Map">, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "Map">) -> !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>
        "mid.assign"(%195, %198) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>, !hi.union<[!hi.nil, !hi.type_param<"V", !hi.any, "Map">]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "Map__index_keyK", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb41(%199 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %200 : !llvm.ptr):
      %201 = "mid.invariant"(%200) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %202 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb42] : () -> ()
    ^bb43:
      %203 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%203, %202) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb44] : () -> ()
    ^bb42:
      %204 = "llvm.getelementptr"(%200) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %205 = "mid.checkflag"(%204) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %206 = "llvm.load"(%205) : (!hi.bool) -> i1
      "cf.cond_br"(%206) [^bb43, ^bb43] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb44:
      %207 = "llvm.extractvalue"(%199) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %208 = "llvm.load"(%202) : (!llvm.ptr) -> i32
      %209 = "llvm.getelementptr"(%207, %208) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %210 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %211 = "llvm.getelementptr"(%209, %210) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%211) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B__index_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_iterator_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb45(%212 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %213 : !llvm.ptr):
      %214 = "mid.invariant"(%213) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %215 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb46] : () -> ()
    ^bb46:
      %216 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%216, %215) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb47:
      %217 = "llvm.extractvalue"(%212) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %218 = "llvm.load"(%215) : (!llvm.ptr) -> i32
      %219 = "llvm.getelementptr"(%217, %218) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %220 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %221 = "llvm.getelementptr"(%219, %220) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%221) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb48(%222 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %223 : !llvm.ptr):
      %224 = "mid.invariant"(%223) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %225 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb49] : () -> ()
    ^bb50:
      %226 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%226, %225) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb51] : () -> ()
    ^bb49:
      %227 = "llvm.getelementptr"(%223) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %228 = "mid.checkflag"(%227) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %229 = "llvm.load"(%228) : (!hi.bool) -> i1
      "cf.cond_br"(%229) [^bb50, ^bb50] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb51:
      %230 = "llvm.extractvalue"(%222) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %231 = "llvm.load"(%225) : (!llvm.ptr) -> i32
      %232 = "llvm.getelementptr"(%230, %231) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %233 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %234 = "llvm.getelementptr"(%232, %233) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%234) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb52(%235 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %236 : !llvm.ptr):
      %237 = "mid.invariant"(%236) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %238 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb53] : () -> ()
    ^bb54:
      %239 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%239, %238) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb55] : () -> ()
    ^bb56:
      %240 = "llvm.getelementptr"(%236) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %241 = "mid.checkflag"(%240) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %242 = "llvm.load"(%241) : (!hi.bool) -> i1
      "cf.cond_br"(%242) [^bb54, ^bb54] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %243 = "llvm.getelementptr"(%236) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %244 = "mid.checkflag"(%243) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %245 = "llvm.load"(%244) : (!hi.bool) -> i1
      "cf.cond_br"(%245) [^bb56, ^bb56] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb55:
      %246 = "llvm.extractvalue"(%235) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %247 = "llvm.load"(%238) : (!llvm.ptr) -> i32
      %248 = "llvm.getelementptr"(%246, %247) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %249 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %250 = "llvm.getelementptr"(%248, %249) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%250) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb57(%251 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %252 : !llvm.ptr):
      %253 = "mid.invariant"(%252) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %254 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb58] : () -> ()
    ^bb59:
      %255 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%255, %254) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb60] : () -> ()
    ^bb58:
      %256 = "llvm.getelementptr"(%252) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %257 = "mid.checkflag"(%256) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %258 = "llvm.load"(%257) : (!hi.bool) -> i1
      "cf.cond_br"(%258) [^bb59, ^bb59] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb60:
      %259 = "llvm.extractvalue"(%251) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %260 = "llvm.load"(%254) : (!llvm.ptr) -> i32
      %261 = "llvm.getelementptr"(%259, %260) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %262 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %263 = "llvm.getelementptr"(%261, %262) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%263) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb61(%264 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %265 : !llvm.ptr):
      %266 = "mid.invariant"(%265) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %267 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb62] : () -> ()
    ^bb63:
      %268 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%268, %267) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb64] : () -> ()
    ^bb62:
      %269 = "llvm.getelementptr"(%265) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %270 = "mid.checkflag"(%269) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %271 = "llvm.load"(%270) : (!hi.bool) -> i1
      "cf.cond_br"(%271) [^bb63, ^bb63] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb64:
      %272 = "llvm.extractvalue"(%264) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %273 = "llvm.load"(%267) : (!llvm.ptr) -> i32
      %274 = "llvm.getelementptr"(%272, %273) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %275 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %276 = "llvm.getelementptr"(%274, %275) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%276) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb65(%277 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %278 : !llvm.ptr):
      %279 = "mid.invariant"(%278) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %280 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb66] : () -> ()
    ^bb66:
      %281 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%281, %280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb67] : () -> ()
    ^bb67:
      %282 = "llvm.extractvalue"(%277) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %283 = "llvm.load"(%280) : (!llvm.ptr) -> i32
      %284 = "llvm.getelementptr"(%282, %283) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %285 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %286 = "llvm.getelementptr"(%284, %285) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%286) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb68(%287 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %288 : !llvm.ptr):
      %289 = "mid.invariant"(%288) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %290 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb69] : () -> ()
    ^bb70:
      %291 = "llvm.mlir.constant"() <{"value" = 72 : i32}> : () -> i32
      "llvm.store"(%291, %290) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb71] : () -> ()
    ^bb69:
      %292 = "llvm.getelementptr"(%288) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %293 = "mid.checkflag"(%292) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %294 = "llvm.load"(%293) : (!hi.bool) -> i1
      "cf.cond_br"(%294) [^bb70, ^bb70] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb71:
      %295 = "llvm.extractvalue"(%287) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %296 = "llvm.load"(%290) : (!llvm.ptr) -> i32
      %297 = "llvm.getelementptr"(%295, %296) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %298 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %299 = "llvm.getelementptr"(%297, %298) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%299) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb72(%300 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %301 : !llvm.ptr):
      %302 = "mid.invariant"(%301) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %303 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb73] : () -> ()
    ^bb74:
      %304 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%304, %303) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb75] : () -> ()
    ^bb73:
      %305 = "llvm.getelementptr"(%301) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %306 = "mid.checkflag"(%305) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %307 = "llvm.load"(%306) : (!hi.bool) -> i1
      "cf.cond_br"(%307) [^bb74, ^bb74] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb75:
      %308 = "llvm.extractvalue"(%300) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %309 = "llvm.load"(%303) : (!llvm.ptr) -> i32
      %310 = "llvm.getelementptr"(%308, %309) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %311 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %312 = "llvm.getelementptr"(%310, %311) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%312) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb76(%313 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %314 : !llvm.ptr):
      %315 = "mid.invariant"(%314) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %316 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %317 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%317, %316) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb77:
      %318 = "llvm.getelementptr"(%314) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %319 = "mid.checkflag"(%318) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %320 = "llvm.load"(%319) : (!hi.bool) -> i1
      "cf.cond_br"(%320) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %321 = "llvm.extractvalue"(%313) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %322 = "llvm.load"(%316) : (!llvm.ptr) -> i32
      %323 = "llvm.getelementptr"(%321, %322) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %324 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %325 = "llvm.getelementptr"(%323, %324) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%325) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb80(%326 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %327 : !llvm.ptr):
      %328 = "mid.invariant"(%327) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %329 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb81] : () -> ()
    ^bb82:
      %330 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%330, %329) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb83] : () -> ()
    ^bb81:
      %331 = "llvm.getelementptr"(%327) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %332 = "mid.checkflag"(%331) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %333 = "llvm.load"(%332) : (!hi.bool) -> i1
      "cf.cond_br"(%333) [^bb82, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %334 = "llvm.extractvalue"(%326) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %335 = "llvm.load"(%329) : (!llvm.ptr) -> i32
      %336 = "llvm.getelementptr"(%334, %335) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %337 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %338 = "llvm.getelementptr"(%336, %337) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%338) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb84(%339 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %340 : !llvm.ptr):
      %341 = "mid.invariant"(%340) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %342 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb85] : () -> ()
    ^bb86:
      %343 = "llvm.mlir.constant"() <{"value" = 76 : i32}> : () -> i32
      "llvm.store"(%343, %342) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb87] : () -> ()
    ^bb85:
      %344 = "llvm.getelementptr"(%340) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %345 = "mid.checkflag"(%344) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %346 = "llvm.load"(%345) : (!hi.bool) -> i1
      "cf.cond_br"(%346) [^bb86, ^bb86] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %347 = "llvm.extractvalue"(%339) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %348 = "llvm.load"(%342) : (!llvm.ptr) -> i32
      %349 = "llvm.getelementptr"(%347, %348) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %350 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %351 = "llvm.getelementptr"(%349, %350) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%351) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb88(%352 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %353 : !llvm.ptr):
      %354 = "mid.invariant"(%353) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %355 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb89] : () -> ()
    ^bb90:
      %356 = "llvm.mlir.constant"() <{"value" = 77 : i32}> : () -> i32
      "llvm.store"(%356, %355) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb91] : () -> ()
    ^bb89:
      %357 = "llvm.getelementptr"(%353) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %358 = "mid.checkflag"(%357) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %359 = "llvm.load"(%358) : (!hi.bool) -> i1
      "cf.cond_br"(%359) [^bb90, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb91:
      %360 = "llvm.extractvalue"(%352) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %361 = "llvm.load"(%355) : (!llvm.ptr) -> i32
      %362 = "llvm.getelementptr"(%360, %361) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<64 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %363 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %364 = "llvm.getelementptr"(%362, %363) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%364) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_HashMap", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "HashMap_field_HashMap_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "HashMap_field_HashMap_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "HashMap_field_HashMap_4"} : () -> ()
    "mid.func"() ({
    ^bb92(%365 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %366 : !llvm.ptr):
      %367 = "mid.invariant"(%366) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %368 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb93] : () -> ()
    ^bb93:
      %369 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%369, %368) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb94] : () -> ()
    ^bb94:
      %370 = "llvm.extractvalue"(%365) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %371 = "llvm.load"(%368) : (!llvm.ptr) -> i32
      %372 = "llvm.getelementptr"(%370, %371) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %373 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %374 = "llvm.getelementptr"(%372, %373) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%374) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb95(%375 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %376 : !llvm.ptr):
      %377 = "mid.invariant"(%376) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %378 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb96] : () -> ()
    ^bb97:
      %379 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%379, %378) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb98] : () -> ()
    ^bb96:
      %380 = "llvm.getelementptr"(%376) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %381 = "mid.checkflag"(%380) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %382 = "llvm.load"(%381) : (!hi.bool) -> i1
      "cf.cond_br"(%382) [^bb97, ^bb97] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb98:
      %383 = "llvm.extractvalue"(%375) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %384 = "llvm.load"(%378) : (!llvm.ptr) -> i32
      %385 = "llvm.getelementptr"(%383, %384) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %386 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %387 = "llvm.getelementptr"(%385, %386) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%387) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_get_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb99(%388 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %389 : !llvm.ptr):
      %390 = "mid.invariant"(%389) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %391 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb100] : () -> ()
    ^bb101:
      %392 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%392, %391) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb102] : () -> ()
    ^bb103:
      %393 = "llvm.getelementptr"(%389) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %394 = "mid.checkflag"(%393) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %395 = "llvm.load"(%394) : (!hi.bool) -> i1
      "cf.cond_br"(%395) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb100:
      %396 = "llvm.getelementptr"(%389) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %397 = "mid.checkflag"(%396) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %398 = "llvm.load"(%397) : (!hi.bool) -> i1
      "cf.cond_br"(%398) [^bb103, ^bb103] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb102:
      %399 = "llvm.extractvalue"(%388) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %400 = "llvm.load"(%391) : (!llvm.ptr) -> i32
      %401 = "llvm.getelementptr"(%399, %400) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %402 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %403 = "llvm.getelementptr"(%401, %402) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%403) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B__set_index_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb104(%404 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %405 : !llvm.ptr):
      %406 = "mid.invariant"(%405) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %407 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb105] : () -> ()
    ^bb106:
      %408 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%408, %407) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb107] : () -> ()
    ^bb105:
      %409 = "llvm.getelementptr"(%405) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %410 = "mid.checkflag"(%409) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %411 = "llvm.load"(%410) : (!hi.bool) -> i1
      "cf.cond_br"(%411) [^bb106, ^bb106] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb107:
      %412 = "llvm.extractvalue"(%404) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %413 = "llvm.load"(%407) : (!llvm.ptr) -> i32
      %414 = "llvm.getelementptr"(%412, %413) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %415 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %416 = "llvm.getelementptr"(%414, %415) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%416) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_remove_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb108(%417 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %418 : !llvm.ptr):
      %419 = "mid.invariant"(%418) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %420 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb109] : () -> ()
    ^bb109:
      %421 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%421, %420) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb110] : () -> ()
    ^bb110:
      %422 = "llvm.extractvalue"(%417) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %423 = "llvm.load"(%420) : (!llvm.ptr) -> i32
      %424 = "llvm.getelementptr"(%422, %423) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %425 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %426 = "llvm.getelementptr"(%424, %425) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%426) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_clear_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb111(%427 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %428 : !llvm.ptr):
      %429 = "mid.invariant"(%428) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %430 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb112] : () -> ()
    ^bb113:
      %431 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%431, %430) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb114] : () -> ()
    ^bb112:
      %432 = "llvm.getelementptr"(%428) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %433 = "mid.checkflag"(%432) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %434 = "llvm.load"(%433) : (!hi.bool) -> i1
      "cf.cond_br"(%434) [^bb113, ^bb113] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb114:
      %435 = "llvm.extractvalue"(%427) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %436 = "llvm.load"(%430) : (!llvm.ptr) -> i32
      %437 = "llvm.getelementptr"(%435, %436) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %438 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %439 = "llvm.getelementptr"(%437, %438) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%439) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B__index_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb115(%440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %441 : !llvm.ptr):
      %442 = "mid.invariant"(%441) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %443 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb116] : () -> ()
    ^bb116:
      %444 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%444, %443) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb117] : () -> ()
    ^bb117:
      %445 = "llvm.extractvalue"(%440) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %446 = "llvm.load"(%443) : (!llvm.ptr) -> i32
      %447 = "llvm.getelementptr"(%445, %446) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %448 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %449 = "llvm.getelementptr"(%447, %448) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%449) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb118(%450 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %451 : !llvm.ptr):
      %452 = "mid.invariant"(%451) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %453 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb119] : () -> ()
    ^bb120:
      %454 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%454, %453) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb121] : () -> ()
    ^bb119:
      %455 = "llvm.getelementptr"(%451) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %456 = "mid.checkflag"(%455) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %457 = "llvm.load"(%456) : (!hi.bool) -> i1
      "cf.cond_br"(%457) [^bb120, ^bb120] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb121:
      %458 = "llvm.extractvalue"(%450) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %459 = "llvm.load"(%453) : (!llvm.ptr) -> i32
      %460 = "llvm.getelementptr"(%458, %459) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %461 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %462 = "llvm.getelementptr"(%460, %461) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%462) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb122(%463 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %464 : !llvm.ptr):
      %465 = "mid.invariant"(%464) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %466 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb123] : () -> ()
    ^bb124:
      %467 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%467, %466) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb125] : () -> ()
    ^bb126:
      %468 = "llvm.getelementptr"(%464) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %469 = "mid.checkflag"(%468) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %470 = "llvm.load"(%469) : (!hi.bool) -> i1
      "cf.cond_br"(%470) [^bb124, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %471 = "llvm.getelementptr"(%464) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %472 = "mid.checkflag"(%471) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %473 = "llvm.load"(%472) : (!hi.bool) -> i1
      "cf.cond_br"(%473) [^bb126, ^bb126] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb125:
      %474 = "llvm.extractvalue"(%463) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %475 = "llvm.load"(%466) : (!llvm.ptr) -> i32
      %476 = "llvm.getelementptr"(%474, %475) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %477 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %478 = "llvm.getelementptr"(%476, %477) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%478) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb127(%479 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %480 : !llvm.ptr):
      %481 = "mid.invariant"(%480) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %482 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb128] : () -> ()
    ^bb129:
      %483 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%483, %482) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb128:
      %484 = "llvm.getelementptr"(%480) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %485 = "mid.checkflag"(%484) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %486 = "llvm.load"(%485) : (!hi.bool) -> i1
      "cf.cond_br"(%486) [^bb129, ^bb129] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb130:
      %487 = "llvm.extractvalue"(%479) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %488 = "llvm.load"(%482) : (!llvm.ptr) -> i32
      %489 = "llvm.getelementptr"(%487, %488) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %490 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %491 = "llvm.getelementptr"(%489, %490) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%491) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb131(%492 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %493 : !llvm.ptr):
      %494 = "mid.invariant"(%493) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %495 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb132] : () -> ()
    ^bb133:
      %496 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%496, %495) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb134] : () -> ()
    ^bb132:
      %497 = "llvm.getelementptr"(%493) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %498 = "mid.checkflag"(%497) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %499 = "llvm.load"(%498) : (!hi.bool) -> i1
      "cf.cond_br"(%499) [^bb133, ^bb133] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb134:
      %500 = "llvm.extractvalue"(%492) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %501 = "llvm.load"(%495) : (!llvm.ptr) -> i32
      %502 = "llvm.getelementptr"(%500, %501) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %503 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %504 = "llvm.getelementptr"(%502, %503) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%504) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb135(%505 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %506 : !llvm.ptr):
      %507 = "mid.invariant"(%506) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %508 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb136] : () -> ()
    ^bb136:
      %509 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%509, %508) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb137] : () -> ()
    ^bb137:
      %510 = "llvm.extractvalue"(%505) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %511 = "llvm.load"(%508) : (!llvm.ptr) -> i32
      %512 = "llvm.getelementptr"(%510, %511) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %513 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %514 = "llvm.getelementptr"(%512, %513) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%514) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb138(%515 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %516 : !llvm.ptr):
      %517 = "mid.invariant"(%516) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %518 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb139] : () -> ()
    ^bb140:
      %519 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%519, %518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb141] : () -> ()
    ^bb139:
      %520 = "llvm.getelementptr"(%516) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %521 = "mid.checkflag"(%520) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %522 = "llvm.load"(%521) : (!hi.bool) -> i1
      "cf.cond_br"(%522) [^bb140, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb141:
      %523 = "llvm.extractvalue"(%515) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %524 = "llvm.load"(%518) : (!llvm.ptr) -> i32
      %525 = "llvm.getelementptr"(%523, %524) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %526 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %527 = "llvm.getelementptr"(%525, %526) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%527) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb142(%528 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %529 : !llvm.ptr):
      %530 = "mid.invariant"(%529) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %531 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb143] : () -> ()
    ^bb144:
      %532 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%532, %531) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb145] : () -> ()
    ^bb143:
      %533 = "llvm.getelementptr"(%529) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %534 = "mid.checkflag"(%533) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %535 = "llvm.load"(%534) : (!hi.bool) -> i1
      "cf.cond_br"(%535) [^bb144, ^bb144] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb145:
      %536 = "llvm.extractvalue"(%528) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %537 = "llvm.load"(%531) : (!llvm.ptr) -> i32
      %538 = "llvm.getelementptr"(%536, %537) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %539 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %540 = "llvm.getelementptr"(%538, %539) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%540) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb146(%541 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %542 : !llvm.ptr):
      %543 = "mid.invariant"(%542) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %544 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb147] : () -> ()
    ^bb148:
      %545 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%545, %544) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb149] : () -> ()
    ^bb147:
      %546 = "llvm.getelementptr"(%542) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %547 = "mid.checkflag"(%546) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %548 = "llvm.load"(%547) : (!hi.bool) -> i1
      "cf.cond_br"(%548) [^bb148, ^bb148] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb149:
      %549 = "llvm.extractvalue"(%541) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %550 = "llvm.load"(%544) : (!llvm.ptr) -> i32
      %551 = "llvm.getelementptr"(%549, %550) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %552 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %553 = "llvm.getelementptr"(%551, %552) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%553) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb150(%554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %555 : !llvm.ptr):
      %556 = "mid.invariant"(%555) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %557 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb151] : () -> ()
    ^bb152:
      %558 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%558, %557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb153] : () -> ()
    ^bb151:
      %559 = "llvm.getelementptr"(%555) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %560 = "mid.checkflag"(%559) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %561 = "llvm.load"(%560) : (!hi.bool) -> i1
      "cf.cond_br"(%561) [^bb152, ^bb152] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb153:
      %562 = "llvm.extractvalue"(%554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %563 = "llvm.load"(%557) : (!llvm.ptr) -> i32
      %564 = "llvm.getelementptr"(%562, %563) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %565 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %566 = "llvm.getelementptr"(%564, %565) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%566) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb154(%567 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %568 : !llvm.ptr):
      %569 = "mid.invariant"(%568) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %570 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb155] : () -> ()
    ^bb156:
      %571 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%571, %570) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb157] : () -> ()
    ^bb155:
      %572 = "llvm.getelementptr"(%568) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %573 = "mid.checkflag"(%572) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %574 = "llvm.load"(%573) : (!hi.bool) -> i1
      "cf.cond_br"(%574) [^bb156, ^bb156] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb157:
      %575 = "llvm.extractvalue"(%567) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %576 = "llvm.load"(%570) : (!llvm.ptr) -> i32
      %577 = "llvm.getelementptr"(%575, %576) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %578 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %579 = "llvm.getelementptr"(%577, %578) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%579) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb158(%580 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %581 : !llvm.ptr):
      %582 = "mid.invariant"(%581) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %583 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb159] : () -> ()
    ^bb160:
      %584 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%584, %583) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb161] : () -> ()
    ^bb159:
      %585 = "llvm.getelementptr"(%581) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %586 = "mid.checkflag"(%585) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %587 = "llvm.load"(%586) : (!hi.bool) -> i1
      "cf.cond_br"(%587) [^bb160, ^bb160] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb161:
      %588 = "llvm.extractvalue"(%580) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %589 = "llvm.load"(%583) : (!llvm.ptr) -> i32
      %590 = "llvm.getelementptr"(%588, %589) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<128 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %591 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %592 = "llvm.getelementptr"(%590, %591) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%592) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb162(%593 : i32):
      %594 = "mid.wrap"(%593) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %595 = "hi.cast"(%594) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %596 = "mid.literal"() {"value" = 2127912214 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %597 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %598 = "mid.unwrap"(%596) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %599 = "mid.arithmetic"(%597, %598) {"op" = "ADD"} : (i32, i32) -> i32
      %600 = "mid.wrap"(%599) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %601 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %602 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %603 = "mid.unwrap"(%601) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %604 = "mid.arithmetic"(%602, %603) {"op" = "LSHIFT"} : (i32, i32) -> i32
      %605 = "mid.wrap"(%604) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %606 = "mid.unwrap"(%600) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %607 = "mid.unwrap"(%605) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %608 = "mid.arithmetic"(%606, %607) {"op" = "ADD"} : (i32, i32) -> i32
      %609 = "mid.wrap"(%608) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %610 = "hi.cast"(%609) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%595, %610) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %611 = "mid.literal"() {"value" = -949894596 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %612 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %613 = "mid.unwrap"(%611) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %614 = "mid.arithmetic"(%612, %613) {"op" = "bit_xor"} : (i32, i32) -> i32
      %615 = "mid.wrap"(%614) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %616 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %617 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %618 = "mid.unwrap"(%616) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %619 = "mid.arithmetic"(%617, %618) {"op" = "RSHIFT"} : (i32, i32) -> i32
      %620 = "mid.wrap"(%619) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %621 = "mid.unwrap"(%615) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %622 = "mid.unwrap"(%620) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %623 = "mid.arithmetic"(%621, %622) {"op" = "bit_xor"} : (i32, i32) -> i32
      %624 = "mid.wrap"(%623) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %625 = "hi.cast"(%624) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%595, %625) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %626 = "mid.literal"() {"value" = 374761393 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %627 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %628 = "mid.unwrap"(%626) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %629 = "mid.arithmetic"(%627, %628) {"op" = "ADD"} : (i32, i32) -> i32
      %630 = "mid.wrap"(%629) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %631 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %632 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %633 = "mid.unwrap"(%631) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %634 = "mid.arithmetic"(%632, %633) {"op" = "LSHIFT"} : (i32, i32) -> i32
      %635 = "mid.wrap"(%634) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %636 = "mid.unwrap"(%630) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %637 = "mid.unwrap"(%635) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %638 = "mid.arithmetic"(%636, %637) {"op" = "ADD"} : (i32, i32) -> i32
      %639 = "mid.wrap"(%638) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %640 = "hi.cast"(%639) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%595, %640) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %641 = "mid.literal"() {"value" = -744332180 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %642 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %643 = "mid.unwrap"(%641) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %644 = "mid.arithmetic"(%642, %643) {"op" = "ADD"} : (i32, i32) -> i32
      %645 = "mid.wrap"(%644) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %646 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %647 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %648 = "mid.unwrap"(%646) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %649 = "mid.arithmetic"(%647, %648) {"op" = "LSHIFT"} : (i32, i32) -> i32
      %650 = "mid.wrap"(%649) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %651 = "mid.unwrap"(%645) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %652 = "mid.unwrap"(%650) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %653 = "mid.arithmetic"(%651, %652) {"op" = "bit_xor"} : (i32, i32) -> i32
      %654 = "mid.wrap"(%653) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %655 = "hi.cast"(%654) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%595, %655) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %656 = "mid.literal"() {"value" = -42973499 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %657 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %658 = "mid.unwrap"(%656) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %659 = "mid.arithmetic"(%657, %658) {"op" = "ADD"} : (i32, i32) -> i32
      %660 = "mid.wrap"(%659) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %661 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %662 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %663 = "mid.unwrap"(%661) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %664 = "mid.arithmetic"(%662, %663) {"op" = "LSHIFT"} : (i32, i32) -> i32
      %665 = "mid.wrap"(%664) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %666 = "mid.unwrap"(%660) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %667 = "mid.unwrap"(%665) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %668 = "mid.arithmetic"(%666, %667) {"op" = "ADD"} : (i32, i32) -> i32
      %669 = "mid.wrap"(%668) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %670 = "hi.cast"(%669) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%595, %670) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %671 = "mid.literal"() {"value" = -1252372727 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %672 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %673 = "mid.unwrap"(%671) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %674 = "mid.arithmetic"(%672, %673) {"op" = "bit_xor"} : (i32, i32) -> i32
      %675 = "mid.wrap"(%674) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %676 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %677 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %678 = "mid.unwrap"(%676) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %679 = "mid.arithmetic"(%677, %678) {"op" = "RSHIFT"} : (i32, i32) -> i32
      %680 = "mid.wrap"(%679) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %681 = "mid.unwrap"(%675) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %682 = "mid.unwrap"(%680) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %683 = "mid.arithmetic"(%681, %682) {"op" = "bit_xor"} : (i32, i32) -> i32
      %684 = "mid.wrap"(%683) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %685 = "hi.cast"(%684) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%595, %685) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %686 = "hi.cast"(%595) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%686) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "i32_hasher", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb163(%687 : i32, %688 : i32):
      %689 = "mid.wrap"(%687) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %690 = "hi.cast"(%689) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %691 = "mid.wrap"(%688) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %692 = "hi.cast"(%691) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %693 = "mid.unwrap"(%690) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %694 = "mid.unwrap"(%692) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %695 = "mid.comparison"(%693, %694) {"op" = "EQ"} : (i32, i32) -> i1
      %696 = "mid.wrap"(%695) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %697 = "hi.cast"(%696) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.bool
      "mid.return"(%697) : (!hi.bool) -> ()
    }) {"func_name" = "i32_eq", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb164(%698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %699 = "mid.wrap"(%698) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %700 = "hi.cast"(%699) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %701 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %702 = "mid.literal"() {"value" = 31 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %703 = "mid.unwrap"(%700) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %704 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %705 = "mid.method_call"(%704, %703) {"offset" = 19 : i32, "vptrs" = [], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %706 = "hi.cast"(%705) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"StringIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "StringIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"StringIterator">
      %707 = "mid.refer"(%706) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"StringIterator">
      "mid.while"() ({
        %708 = "mid.unwrap"(%707) : (!hi.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %709 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %710 = "mid.method_call"(%709, %708) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %711 = "hi.cast"(%710) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
        %712 = "mid.checkflag"(%711) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %713 = "mid.unwrap"(%712) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %714 = "hi.cast"(%711) {"from_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> !hi.fatptr<"Character">
        %715 = "mid.unwrap"(%714) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %716 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %717 = "mid.method_call"(%716, %715) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %718 = "hi.cast"(%717) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %719 = "hi.cast"(%718) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %720 = "mid.unwrap"(%701) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %721 = "mid.unwrap"(%702) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %722 = "mid.arithmetic"(%720, %721) {"op" = "MUL"} : (i32, i32) -> i32
        %723 = "mid.wrap"(%722) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %724 = "mid.unwrap"(%723) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %725 = "mid.unwrap"(%719) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %726 = "mid.arithmetic"(%724, %725) {"op" = "ADD"} : (i32, i32) -> i32
        %727 = "mid.wrap"(%726) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %728 = "mid.literal"() {"value" = 2147483647 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %729 = "mid.unwrap"(%727) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %730 = "mid.unwrap"(%728) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %731 = "mid.arithmetic"(%729, %730) {"op" = "bit_and"} : (i32, i32) -> i32
        %732 = "mid.wrap"(%731) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %733 = "hi.cast"(%732) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%701, %733) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        %734 = "hi.cast"(%714) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
        "mid.assign"(%711, %734) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>, !hi.fatptr<"Character">) -> ()
      }) : () -> ()
      %735 = "hi.cast"(%701) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%735) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "string_hasher", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb165(%736 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %737 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %738 = "mid.wrap"(%736) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %739 = "hi.cast"(%738) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %740 = "mid.wrap"(%737) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %741 = "hi.cast"(%740) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %742 = "hi.cast"(%741) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %743 = "mid.unwrap"(%742) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %744 = "mid.unwrap"(%739) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %745 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %746 = "mid.parameterizations_array"(%745) : (!llvm.ptr) -> !llvm.ptr
      %747 = "mid.method_call"(%746, %744, %743) {"offset" = 14 : i32, "vptrs" = [#none], "vtable_size" = 149 : i64, "ret_type" = i1, "ret_type_unq" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.bool
      %748 = "hi.cast"(%747) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      %749 = "hi.cast"(%748) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%749) : (!hi.bool) -> ()
    }) {"func_name" = "string_eq", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "std"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Math", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range", "vtbl_size" = 59 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Blocking", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Channel", "vtbl_size" = 8 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Array", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ArrayIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystemError", "vtbl_size" = 34 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "File", "vtbl_size" = 20 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileProcessor", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileReader", "vtbl_size" = 8 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileWriter", "vtbl_size" = 9 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystem", "vtbl_size" = 7 : i32} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
  }
  builtin.module attributes  {"sym_name" = "cuckoo"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "KeyNotFound", "vtbl_size" = 34 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Map", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "HashMap", "vtbl_size" = 0 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Entry", "methods" = [@Entry_field_Entry_0, @Entry_field_Entry_1, @Entry_field_primary_hash, @Entry_field_key, @Entry_field_value, @Entry_B_init_keyK_valueV_primary_hashi32, @Entry_B_key_, @Entry_B_value_, @Entry_B_primary_hash_, @Entry_B_to_pair_, @Entry_init_keyK_valueV_primary_hashi32, @Entry_key_, @Entry_value_, @Entry_primary_hash_, @Entry_to_pair_], "hash_tbl" = [@Entry, @Object, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 25 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 4015701072841558310 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Entry", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "CuckooMap", "methods" = [@CuckooMap_field_CuckooMap_0, @CuckooMap_field_CuckooMap_1, @CuckooMap_field_CuckooMap_6, @CuckooMap_field_table1, @CuckooMap_field_table2, @CuckooMap_field_table_len, @CuckooMap_field_size, @CuckooMap_field_hasher, @CuckooMap_field_eq, @CuckooMap_B__Self_max_displacements_, @CuckooMap_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool, @CuckooMap_B_hash1_keyK, @CuckooMap_B_hash2_from_primary_primary_hashi32, @CuckooMap_B_index1_primary_hashi32, @CuckooMap_B_index2_primary_hashi32, @CuckooMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V, @CuckooMap_B_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32, @CuckooMap_B_resize_, @CuckooMap_B_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil, @CuckooMap_B_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, @CuckooMap_B_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, @CuckooMap_B_insert_keyK_valueV, @CuckooMap_B_size_, @CuckooMap_B_get_keyK, @CuckooMap_B__set_index_keyK_valueV, @CuckooMap_B_remove_keyK, @CuckooMap_B_clear_, @CuckooMap_B__index_keyK, @CuckooMap_B_iterator_, @CuckooMap_B_each_fFunctionT_to_Nothing, @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, @CuckooMap_B_all_fFunctionT_to_Bool, @CuckooMap_B_any_fFunctionT_to_Bool, @CuckooMap_B_enumerate_, @CuckooMap_B_map_fFunctionT_to_U, @CuckooMap_B_filter_fFunctionT_to_Bool, @CuckooMap_B_chain_otherIterableT, @CuckooMap_B_interleave_otherIterableT, @CuckooMap_B_zip_otherIterableU, @CuckooMap_B_product_otherIterableU, @CuckooMap__Self_max_displacements_, @CuckooMap_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool, @CuckooMap_hash1_keyK, @CuckooMap_hash2_from_primary_primary_hashi32, @CuckooMap_index1_primary_hashi32, @CuckooMap_index2_primary_hashi32, @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V, @CuckooMap_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32, @CuckooMap_resize_, @CuckooMap_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil, @CuckooMap_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, @CuckooMap_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, @CuckooMap_insert_keyK_valueV, @CuckooMap_size_, @CuckooMap_get_keyK, @CuckooMap__set_index_keyK_valueV, @CuckooMap_remove_keyK, @CuckooMap_clear_, @Map__index_keyK, @CuckooMap_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @CuckooMap_field_CuckooMap_0, @CuckooMap_field_CuckooMap_1, @CuckooMap_field_CuckooMap_6, @CuckooMap_B_size_, @CuckooMap_B_get_keyK, @CuckooMap_B__set_index_keyK_valueV, @CuckooMap_B_remove_keyK, @CuckooMap_B_clear_, @CuckooMap_B__index_keyK, @CuckooMap_B_iterator_, @CuckooMap_B_each_fFunctionT_to_Nothing, @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, @CuckooMap_B_all_fFunctionT_to_Bool, @CuckooMap_B_any_fFunctionT_to_Bool, @CuckooMap_B_enumerate_, @CuckooMap_B_map_fFunctionT_to_U, @CuckooMap_B_filter_fFunctionT_to_Bool, @CuckooMap_B_chain_otherIterableT, @CuckooMap_B_interleave_otherIterableT, @CuckooMap_B_zip_otherIterableU, @CuckooMap_B_product_otherIterableU, @CuckooMap_size_, @CuckooMap_get_keyK, @CuckooMap__set_index_keyK_valueV, @CuckooMap_remove_keyK, @CuckooMap_clear_, @Map__index_keyK, @CuckooMap_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @CuckooMap_field_CuckooMap_0, @CuckooMap_field_CuckooMap_1, @CuckooMap_field_CuckooMap_6, @CuckooMap_B_size_, @CuckooMap_B_get_keyK, @CuckooMap_B__set_index_keyK_valueV, @CuckooMap_B_remove_keyK, @CuckooMap_B_clear_, @CuckooMap_B__index_keyK, @CuckooMap_B_iterator_, @CuckooMap_B_each_fFunctionT_to_Nothing, @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, @CuckooMap_B_all_fFunctionT_to_Bool, @CuckooMap_B_any_fFunctionT_to_Bool, @CuckooMap_B_enumerate_, @CuckooMap_B_map_fFunctionT_to_U, @CuckooMap_B_filter_fFunctionT_to_Bool, @CuckooMap_B_chain_otherIterableT, @CuckooMap_B_interleave_otherIterableT, @CuckooMap_B_zip_otherIterableU, @CuckooMap_B_product_otherIterableU, @CuckooMap_size_, @CuckooMap_get_keyK, @CuckooMap__set_index_keyK_valueV, @CuckooMap_remove_keyK, @CuckooMap_clear_, @Map__index_keyK, @CuckooMap_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @CuckooMap_field_CuckooMap_6, @CuckooMap_B_iterator_, @CuckooMap_B_each_fFunctionT_to_Nothing, @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, @CuckooMap_B_all_fFunctionT_to_Bool, @CuckooMap_B_any_fFunctionT_to_Bool, @CuckooMap_B_enumerate_, @CuckooMap_B_map_fFunctionT_to_U, @CuckooMap_B_filter_fFunctionT_to_Bool, @CuckooMap_B_chain_otherIterableT, @CuckooMap_B_interleave_otherIterableT, @CuckooMap_B_zip_otherIterableU, @CuckooMap_B_product_otherIterableU, @CuckooMap_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @CuckooMap_field_CuckooMap_6, @CuckooMap_B_iterator_, @CuckooMap_B_each_fFunctionT_to_Nothing, @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, @CuckooMap_B_all_fFunctionT_to_Bool, @CuckooMap_B_any_fFunctionT_to_Bool, @CuckooMap_B_enumerate_, @CuckooMap_B_map_fFunctionT_to_U, @CuckooMap_B_filter_fFunctionT_to_Bool, @CuckooMap_B_chain_otherIterableT, @CuckooMap_B_interleave_otherIterableT, @CuckooMap_B_zip_otherIterableU, @CuckooMap_B_product_otherIterableU, @CuckooMap_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @CuckooMap_field_CuckooMap_0, @CuckooMap_field_CuckooMap_1, @CuckooMap_field_CuckooMap_6, @CuckooMap_B_size_, @CuckooMap_B_get_keyK, @CuckooMap_B__set_index_keyK_valueV, @CuckooMap_B_remove_keyK, @CuckooMap_B_clear_, @CuckooMap_B__index_keyK, @CuckooMap_B_iterator_, @CuckooMap_B_each_fFunctionT_to_Nothing, @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, @CuckooMap_B_all_fFunctionT_to_Bool, @CuckooMap_B_any_fFunctionT_to_Bool, @CuckooMap_B_enumerate_, @CuckooMap_B_map_fFunctionT_to_U, @CuckooMap_B_filter_fFunctionT_to_Bool, @CuckooMap_B_chain_otherIterableT, @CuckooMap_B_interleave_otherIterableT, @CuckooMap_B_zip_otherIterableU, @CuckooMap_B_product_otherIterableU, @CuckooMap_size_, @CuckooMap_get_keyK, @CuckooMap__set_index_keyK_valueV, @CuckooMap_remove_keyK, @CuckooMap_clear_, @Map__index_keyK, @CuckooMap_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @CuckooMap_field_CuckooMap_6, @CuckooMap_B_iterator_, @CuckooMap_B_each_fFunctionT_to_Nothing, @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, @CuckooMap_B_all_fFunctionT_to_Bool, @CuckooMap_B_any_fFunctionT_to_Bool, @CuckooMap_B_enumerate_, @CuckooMap_B_map_fFunctionT_to_U, @CuckooMap_B_filter_fFunctionT_to_Bool, @CuckooMap_B_chain_otherIterableT, @CuckooMap_B_interleave_otherIterableT, @CuckooMap_B_zip_otherIterableU, @CuckooMap_B_product_otherIterableU, @CuckooMap_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @CuckooMap_field_CuckooMap_6, @CuckooMap_B_iterator_, @CuckooMap_B_each_fFunctionT_to_Nothing, @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, @CuckooMap_B_all_fFunctionT_to_Bool, @CuckooMap_B_any_fFunctionT_to_Bool, @CuckooMap_B_enumerate_, @CuckooMap_B_map_fFunctionT_to_U, @CuckooMap_B_filter_fFunctionT_to_Bool, @CuckooMap_B_chain_otherIterableT, @CuckooMap_B_interleave_otherIterableT, @CuckooMap_B_zip_otherIterableU, @CuckooMap_B_product_otherIterableU, @CuckooMap_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @CuckooMap, @Iterable, @any_typ, @Container, @Map, @HashMap, @Object], "offset_tbl" = [0 : i32, 10 : i32, 273 : i32, 10 : i32, 298 : i32, 209 : i32, 81 : i32, 298 : i32], "prime" = 4611686018427388331 : i64, "hash_id" = 3547150501766965522 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_CuckooMap", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "CuckooMapIterator", "methods" = [@CuckooMapIterator_field_CuckooMapIterator_0, @CuckooMapIterator_field_CuckooMapIterator_1, @CuckooMapIterator_field_CuckooMapIterator_2, @CuckooMapIterator_field_map_table1, @CuckooMapIterator_field_map_table2, @CuckooMapIterator_field_table_len, @CuckooMapIterator_field_index, @CuckooMapIterator_field_on_second, @CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32, @CuckooMapIterator_B_next_from_table_tableBufferEntryK._V_or_Nil, @CuckooMapIterator_B_next_, @CuckooMapIterator_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32, @CuckooMapIterator_next_from_table_tableBufferEntryK._V_or_Nil, @CuckooMapIterator_next_, @CuckooMapIterator_field_CuckooMapIterator_2, @CuckooMapIterator_B_next_, @CuckooMapIterator_next_], "hash_tbl" = [@CuckooMapIterator, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 0 : i32, 27 : i32, 24 : i32, 27 : i32, 0 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 16470995426363500696 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1)>, "data_size_fn" = "_data_size_CuckooMapIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "i32_hasher", "function_type" = !llvm.func<i32 (i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "i32_eq", "function_type" = !llvm.func<i1 (i32, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "string_hasher", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "string_eq", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Entry", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Entry_field_Entry_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Entry_field_Entry_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Entry_getter_primary_hash", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Entry_setter_primary_hash", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Entry_field_primary_hash", "getter_name" = "Entry_getter_primary_hash", "setter_name" = "Entry_setter_primary_hash"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Entry_getter_key", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Entry_setter_key", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Entry_field_key", "getter_name" = "Entry_getter_key", "setter_name" = "Entry_setter_key"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Entry_getter_value", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Entry_setter_value", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Entry_field_value", "getter_name" = "Entry_getter_value", "setter_name" = "Entry_setter_value"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : !llvm.struct<(!llvm.ptr, i160)>, %4 : !llvm.struct<(!llvm.ptr, i160)>, %5 : i32):
      %6 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %7 = "hi.cast"(%6) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %8 = "mid.wrap"(%3) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "Entry">
      %9 = "hi.cast"(%8) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      %10 = "hi.cast"(%9) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      "mid.set_field"(%7, %10) {"offset" = 3 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, !hi.type_param<"K", !hi.any, "Entry">) -> ()
      %11 = "mid.wrap"(%4) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"V", !hi.any, "Entry">
      %12 = "hi.cast"(%11) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      %13 = "hi.cast"(%12) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      "mid.set_field"(%7, %13) {"offset" = 4 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, !hi.type_param<"V", !hi.any, "Entry">) -> ()
      %14 = "mid.wrap"(%5) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %15 = "hi.cast"(%14) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %16 = "hi.cast"(%15) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%7, %16) {"offset" = 2 : i64, "vtable_bytes" = 120 : i32, "original_type" = i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Entry_init_keyK_valueV_primary_hashi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%17 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %18 : !llvm.ptr):
      %19 = "mid.invariant"(%18) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %20 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %21 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%21, %20) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb5:
      %22 = "llvm.getelementptr"(%18) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %23 = "mid.checkflag"(%22) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %24 = "llvm.load"(%23) : (!hi.bool) -> i1
      "cf.cond_br"(%24) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb6:
      %25 = "llvm.getelementptr"(%18) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %26 = "mid.checkflag"(%25) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %27 = "llvm.load"(%26) : (!hi.bool) -> i1
      "cf.cond_br"(%27) [^bb5, ^bb5] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb2:
      %28 = "llvm.getelementptr"(%18) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %29 = "mid.checkflag"(%28) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %30 = "llvm.load"(%29) : (!hi.bool) -> i1
      "cf.cond_br"(%30) [^bb6, ^bb6] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %31 = "llvm.extractvalue"(%17) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %32 = "llvm.load"(%20) : (!llvm.ptr) -> i32
      %33 = "llvm.getelementptr"(%31, %32) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %34 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %35 = "llvm.getelementptr"(%33, %34) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%35) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_init_keyK_valueV_primary_hashi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb7(%36 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %37 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %38 : !llvm.ptr):
      %39 = "mid.wrap"(%36) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %40 = "hi.cast"(%39) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %41 = "mid.get_field"(%40) {"offset" = 3 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"K", !hi.any, "Entry">
      %42 = "hi.cast"(%41) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      %43 = "hi.cast"(%42) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      "mid.return"(%43) : (!hi.type_param<"K", !hi.any, "Entry">) -> ()
    }) {"func_name" = "Entry_key_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb8(%44 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %45 : !llvm.ptr):
      %46 = "mid.invariant"(%45) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %47 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb9] : () -> ()
    ^bb9:
      %48 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%48, %47) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb10:
      %49 = "llvm.extractvalue"(%44) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %50 = "llvm.load"(%47) : (!llvm.ptr) -> i32
      %51 = "llvm.getelementptr"(%49, %50) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %52 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %53 = "llvm.getelementptr"(%51, %52) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%53) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_key_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb11(%54 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %55 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %56 : !llvm.ptr):
      %57 = "mid.wrap"(%54) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %58 = "hi.cast"(%57) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %59 = "mid.get_field"(%58) {"offset" = 4 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"V", !hi.any, "Entry">
      %60 = "hi.cast"(%59) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      %61 = "hi.cast"(%60) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      "mid.return"(%61) : (!hi.type_param<"V", !hi.any, "Entry">) -> ()
    }) {"func_name" = "Entry_value_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb12(%62 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %63 : !llvm.ptr):
      %64 = "mid.invariant"(%63) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %65 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %66 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%66, %65) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      %67 = "llvm.extractvalue"(%62) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %68 = "llvm.load"(%65) : (!llvm.ptr) -> i32
      %69 = "llvm.getelementptr"(%67, %68) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %70 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %71 = "llvm.getelementptr"(%69, %70) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%71) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_value_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb15(%72 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %73 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %74 : !llvm.ptr):
      %75 = "mid.wrap"(%72) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %76 = "hi.cast"(%75) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %77 = "mid.get_field"(%76) {"offset" = 2 : i64, "vtable_bytes" = 120 : i32, "original_type" = i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %78 = "hi.cast"(%77) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%78) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Entry_primary_hash_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb16(%79 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %80 : !llvm.ptr):
      %81 = "mid.invariant"(%80) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %82 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      %83 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%83, %82) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      %84 = "llvm.extractvalue"(%79) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %85 = "llvm.load"(%82) : (!llvm.ptr) -> i32
      %86 = "llvm.getelementptr"(%84, %85) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %87 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %88 = "llvm.getelementptr"(%86, %87) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%88) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_primary_hash_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb19(%89 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %90 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %91 : !llvm.ptr):
      %92 = "mid.wrap"(%89) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %93 = "hi.cast"(%92) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %94 = "mid.get_field"(%93) {"offset" = 3 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"K", !hi.any, "Entry">
      %95 = "hi.cast"(%94) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      %96 = "mid.get_field"(%93) {"offset" = 4 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"V", !hi.any, "Entry">
      %97 = "hi.cast"(%96) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      %98 = "mid.unwrap"(%95) : (!hi.type_param<"K", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
      %99 = "mid.unwrap"(%97) : (!hi.type_param<"V", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
      %100 = "mid.get_type_field"(%93) {"offset" = 0 : i64, "vtable_bytes" = 120 : i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.reified_type
      %101 = "mid.get_type_field"(%93) {"offset" = 1 : i64, "vtable_bytes" = 120 : i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.reified_type
      %102 = "mid.new"(%100, %101) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %103 = "mid.get_field"(%93) {"offset" = 3 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"K", !hi.any, "Entry">
      %104 = "hi.cast"(%103) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      %105 = "mid.get_field"(%93) {"offset" = 4 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"V", !hi.any, "Entry">
      %106 = "hi.cast"(%105) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      %107 = "hi.cast"(%104) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"T", !hi.any, "Pair">
      %108 = "mid.unwrap"(%107) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
      %109 = "hi.cast"(%106) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"U", !hi.any, "Pair">
      %110 = "mid.unwrap"(%109) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
      %111 = "mid.unwrap"(%102) : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %112 = "mid.get_type_field"(%93) {"offset" = 0 : i64, "vtable_bytes" = 120 : i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.reified_type
      %113 = "mid.get_type_field"(%93) {"offset" = 1 : i64, "vtable_bytes" = 120 : i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.reified_type
      %114 = "mid.parameterizations_array"(%112, %113) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      "mid.method_call"(%114, %111, %108, %110) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %115 = "hi.cast"(%102) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      "mid.return"(%115) : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> ()
    }) {"func_name" = "Entry_to_pair_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb20(%116 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %117 : !llvm.ptr):
      %118 = "mid.invariant"(%117) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %119 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb21] : () -> ()
    ^bb21:
      %120 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%120, %119) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb22:
      %121 = "llvm.extractvalue"(%116) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %122 = "llvm.load"(%119) : (!llvm.ptr) -> i32
      %123 = "llvm.getelementptr"(%121, %122) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %124 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %125 = "llvm.getelementptr"(%123, %124) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%125) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_to_pair_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_CuckooMap", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "CuckooMap_field_CuckooMap_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "CuckooMap_field_CuckooMap_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "CuckooMap_field_CuckooMap_6"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMap_getter_table1", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMap_setter_table1", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMap_field_table1", "getter_name" = "CuckooMap_getter_table1", "setter_name" = "CuckooMap_setter_table1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMap_getter_table2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMap_setter_table2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMap_field_table2", "getter_name" = "CuckooMap_getter_table2", "setter_name" = "CuckooMap_setter_table2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMap_getter_table_len", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 5 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMap_setter_table_len", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 5 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMap_field_table_len", "getter_name" = "CuckooMap_getter_table_len", "setter_name" = "CuckooMap_setter_table_len"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMap_getter_size", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 6 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMap_setter_size", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 6 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMap_field_size", "getter_name" = "CuckooMap_getter_size", "setter_name" = "CuckooMap_setter_size"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMap_getter_hasher", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 7 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionCuckooMap.K_subtype_Any_to_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMap_setter_hasher", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 7 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionCuckooMap.K_subtype_Any_to_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMap_field_hasher", "getter_name" = "CuckooMap_getter_hasher", "setter_name" = "CuckooMap_setter_hasher"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMap_getter_eq", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 8 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionCuckooMap.K_subtype_Any._CuckooMap.K_subtype_Any_to_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMap_setter_eq", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 8 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionCuckooMap.K_subtype_Any._CuckooMap.K_subtype_Any_to_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMap_field_eq", "getter_name" = "CuckooMap_getter_eq", "setter_name" = "CuckooMap_setter_eq"} : () -> ()
    "mid.func"() ({
    ^bb23(%126 : !llvm.ptr):
      %127 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %128 = "hi.cast"(%127) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%128) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "CuckooMap__Self_max_displacements_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%129 : !llvm.ptr):
      %130 = "mid.invariant"(%129) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %131 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb25:
      %132 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%132, %131) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      %133 = "mid.addr_of"() {"global_name" = @CuckooMap} : () -> !llvm.ptr
      %134 = "llvm.load"(%131) : (!llvm.ptr) -> i32
      %135 = "llvm.getelementptr"(%133, %134) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %136 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %137 = "llvm.getelementptr"(%135, %136) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%137) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B__Self_max_displacements_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%138 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %139 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %140 : !llvm.ptr, %141 : !llvm.struct<(!llvm.ptr)>, %142 : !llvm.struct<(!llvm.ptr)>):
      %143 = "mid.wrap"(%138) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %144 = "hi.cast"(%143) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %145 = "mid.wrap"(%141) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %146 = "hi.cast"(%145) {"from_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %147 = "hi.cast"(%146) {"from_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      "mid.set_field"(%144, %147) {"offset" = 7 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> ()
      %148 = "mid.wrap"(%142) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %149 = "hi.cast"(%148) {"from_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %150 = "hi.cast"(%149) {"from_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      "mid.set_field"(%144, %150) {"offset" = 8 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> ()
      %151 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %152 = "hi.cast"(%151) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%144, %152) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %153 = "hi.cast"(%151) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %154 = "mid.create_buffer"(%153) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %155 = "hi.cast"(%154) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      "mid.set_field"(%144, %155) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> ()
      %156 = "hi.cast"(%151) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %157 = "mid.create_buffer"(%156) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %158 = "hi.cast"(%157) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      "mid.set_field"(%144, %158) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> ()
      %159 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %160 = "hi.cast"(%159) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%144, %160) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "CuckooMap_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb28(%161 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %162 : !llvm.ptr):
      %163 = "mid.invariant"(%162) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %164 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb30:
      %165 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%165, %164) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb32:
      %166 = "llvm.getelementptr"(%162) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %167 = "mid.checkflag"(%166) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %168 = "llvm.load"(%167) : (!hi.bool) -> i1
      "cf.cond_br"(%168) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb29:
      %169 = "llvm.getelementptr"(%162) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %170 = "mid.checkflag"(%169) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %171 = "llvm.load"(%170) : (!hi.bool) -> i1
      "cf.cond_br"(%171) [^bb32, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %172 = "llvm.extractvalue"(%161) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %173 = "llvm.load"(%164) : (!llvm.ptr) -> i32
      %174 = "llvm.getelementptr"(%172, %173) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %175 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %176 = "llvm.getelementptr"(%174, %175) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%176) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb33(%177 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %178 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %179 : !llvm.ptr, %180 : !llvm.struct<(!llvm.ptr, i160)>):
      %181 = "mid.wrap"(%177) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %182 = "hi.cast"(%181) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %183 = "mid.wrap"(%180) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %184 = "hi.cast"(%183) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %185 = "hi.cast"(%184) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %186 = "mid.unwrap"(%185) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %187 = "mid.get_field"(%182) {"offset" = 7 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %188 = "mid.unwrap"(%187) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.ptr
      %189 = "mid.fptr_call"(%188, %186) {"ret_type" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %190 = "hi.cast"(%189) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%190) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "CuckooMap_hash1_keyK", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb34(%191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %192 : !llvm.ptr):
      %193 = "mid.invariant"(%192) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %194 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb35] : () -> ()
    ^bb36:
      %195 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%195, %194) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb37] : () -> ()
    ^bb35:
      %196 = "llvm.getelementptr"(%192) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %197 = "mid.checkflag"(%196) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %198 = "llvm.load"(%197) : (!hi.bool) -> i1
      "cf.cond_br"(%198) [^bb36, ^bb36] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %199 = "llvm.extractvalue"(%191) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %200 = "llvm.load"(%194) : (!llvm.ptr) -> i32
      %201 = "llvm.getelementptr"(%199, %200) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %202 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %203 = "llvm.getelementptr"(%201, %202) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%203) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_hash1_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb38(%204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %205 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %206 : !llvm.ptr, %207 : i32):
      %208 = "mid.wrap"(%204) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %209 = "hi.cast"(%208) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %210 = "mid.wrap"(%207) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %211 = "hi.cast"(%210) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %212 = "mid.unwrap"(%211) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %213 = "mid.call"(%212) {"func_name" = "i32_hasher", "ret_type" = i32} : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %214 = "hi.cast"(%213) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%214) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "CuckooMap_hash2_from_primary_primary_hashi32", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb39(%215 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %216 : !llvm.ptr):
      %217 = "mid.invariant"(%216) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %218 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb40] : () -> ()
    ^bb41:
      %219 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%219, %218) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb40:
      %220 = "llvm.getelementptr"(%216) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %221 = "mid.checkflag"(%220) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %222 = "llvm.load"(%221) : (!hi.bool) -> i1
      "cf.cond_br"(%222) [^bb41, ^bb41] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb42:
      %223 = "llvm.extractvalue"(%215) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %224 = "llvm.load"(%218) : (!llvm.ptr) -> i32
      %225 = "llvm.getelementptr"(%223, %224) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %226 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %227 = "llvm.getelementptr"(%225, %226) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%227) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_hash2_from_primary_primary_hashi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb43(%228 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %229 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %230 : !llvm.ptr, %231 : i32):
      %232 = "mid.wrap"(%228) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %233 = "hi.cast"(%232) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %234 = "mid.wrap"(%231) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %235 = "hi.cast"(%234) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %236 = "mid.get_field"(%233) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %237 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %238 = "mid.unwrap"(%236) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %239 = "mid.unwrap"(%237) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %240 = "mid.arithmetic"(%238, %239) {"op" = "SUB"} : (i32, i32) -> i32
      %241 = "mid.wrap"(%240) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %242 = "mid.unwrap"(%235) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %243 = "mid.unwrap"(%241) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %244 = "mid.arithmetic"(%242, %243) {"op" = "bit_and"} : (i32, i32) -> i32
      %245 = "mid.wrap"(%244) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %246 = "hi.cast"(%245) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%246) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "CuckooMap_index1_primary_hashi32", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb44(%247 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %248 : !llvm.ptr):
      %249 = "mid.invariant"(%248) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %250 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb45] : () -> ()
    ^bb46:
      %251 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%251, %250) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb45:
      %252 = "llvm.getelementptr"(%248) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %253 = "mid.checkflag"(%252) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %254 = "llvm.load"(%253) : (!hi.bool) -> i1
      "cf.cond_br"(%254) [^bb46, ^bb46] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb47:
      %255 = "llvm.extractvalue"(%247) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %256 = "llvm.load"(%250) : (!llvm.ptr) -> i32
      %257 = "llvm.getelementptr"(%255, %256) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %258 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %259 = "llvm.getelementptr"(%257, %258) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%259) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_index1_primary_hashi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb48(%260 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %261 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %262 : !llvm.ptr, %263 : i32):
      %264 = "mid.wrap"(%260) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %265 = "hi.cast"(%264) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %266 = "mid.wrap"(%263) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %267 = "hi.cast"(%266) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %268 = "hi.cast"(%267) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %269 = "mid.unwrap"(%268) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %270 = "mid.unwrap"(%265) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %271 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %272 = "mid.parameterizations_array"(%271) : (!llvm.ptr) -> !llvm.ptr
      %273 = "mid.method_call"(%272, %270, %269) {"offset" = 12 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %274 = "hi.cast"(%273) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %275 = "mid.get_field"(%265) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %276 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %277 = "mid.unwrap"(%275) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %278 = "mid.unwrap"(%276) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %279 = "mid.arithmetic"(%277, %278) {"op" = "SUB"} : (i32, i32) -> i32
      %280 = "mid.wrap"(%279) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %281 = "mid.unwrap"(%274) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %282 = "mid.unwrap"(%280) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %283 = "mid.arithmetic"(%281, %282) {"op" = "bit_and"} : (i32, i32) -> i32
      %284 = "mid.wrap"(%283) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %285 = "hi.cast"(%284) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%285) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "CuckooMap_index2_primary_hashi32", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb49(%286 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %287 : !llvm.ptr):
      %288 = "mid.invariant"(%287) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %289 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb50] : () -> ()
    ^bb51:
      %290 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%290, %289) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb52] : () -> ()
    ^bb50:
      %291 = "llvm.getelementptr"(%287) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %292 = "mid.checkflag"(%291) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %293 = "llvm.load"(%292) : (!hi.bool) -> i1
      "cf.cond_br"(%293) [^bb51, ^bb51] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb52:
      %294 = "llvm.extractvalue"(%286) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %295 = "llvm.load"(%289) : (!llvm.ptr) -> i32
      %296 = "llvm.getelementptr"(%294, %295) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %297 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %298 = "llvm.getelementptr"(%296, %297) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%298) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_index2_primary_hashi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb53(%299 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %300 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %301 : !llvm.ptr, %302 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %303 = "mid.wrap"(%299) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %304 = "hi.cast"(%303) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %305 = "mid.wrap"(%302) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %306 = "hi.cast"(%305) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %307 = "mid.refer"(%306) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %308 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %309 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %310 = "mid.get_type_field"(%304) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
        %311 = "mid.get_type_field"(%304) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
        %312 = "mid.parameterizations_array"(%310, %311) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
        %313 = "mid.class_method_call"(%312) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32, "class_name" = "CuckooMap"} : (!llvm.ptr) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %314 = "hi.cast"(%313) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %315 = "mid.unwrap"(%309) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %316 = "mid.unwrap"(%314) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %317 = "mid.comparison"(%315, %316) {"op" = "LT"} : (i32, i32) -> i1
        %318 = "mid.wrap"(%317) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %319 = "mid.unwrap"(%318) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %320 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %321 = "mid.unwrap"(%309) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %322 = "mid.unwrap"(%320) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %323 = "mid.arithmetic"(%321, %322) {"op" = "ADD"} : (i32, i32) -> i32
        %324 = "mid.wrap"(%323) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %325 = "hi.cast"(%324) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%309, %325) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        %326 = "mid.unwrap"(%307) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %327 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %328 = "mid.method_call"(%327, %326) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %329 = "hi.cast"(%328) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %330 = "mid.unwrap"(%308) : (!hi.bool) -> i1
        "mid.if"(%330) ({
          %331 = "hi.cast"(%329) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %332 = "mid.unwrap"(%331) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %333 = "mid.unwrap"(%304) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %334 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %335 = "mid.parameterizations_array"(%334) : (!llvm.ptr) -> !llvm.ptr
          %336 = "mid.method_call"(%335, %333, %332) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %337 = "hi.cast"(%336) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %338 = "mid.get_field"(%304) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
          %339 = "hi.cast"(%337) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %340 = "mid.buffer_get"(%338, %339) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          %341 = "mid.get_field"(%304) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
          %342 = "hi.cast"(%307) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          %343 = "hi.cast"(%337) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          "mid.buffer_set"(%341, %343, %342) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
          %344 = "mid.checkflag"(%340) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
          %345 = "mid.unwrap"(%344) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
          %346 = "hi.cast"(%340) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          "mid.if"(%345) ({
            %347 = "hi.cast"(%346) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.nil
            %348 = "mid.get_field"(%304) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %349 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %350 = "mid.unwrap"(%348) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
            %351 = "mid.unwrap"(%349) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
            %352 = "mid.arithmetic"(%350, %351) {"op" = "ADD"} : (i32, i32) -> i32
            %353 = "mid.wrap"(%352) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %354 = "hi.cast"(%353) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            "mid.set_field"(%304, %354) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
            %355 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
            %356 = "hi.cast"(%355) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
            "mid.return"(%356) : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
            %357 = "hi.cast"(%347) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
            "mid.assign"(%346, %357) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
          }) : (i1) -> ()
          %358 = "mid.checkflag"(%346) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
          %359 = "mid.unwrap"(%358) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
          %360 = "hi.cast"(%346) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          "mid.if"(%359) ({
            %361 = "hi.cast"(%360) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
            %362 = "hi.cast"(%361) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
            "mid.assign"(%307, %362) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> ()
            %363 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %364 = "hi.cast"(%363) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%308, %364) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
            %365 = "hi.cast"(%361) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
            "mid.assign"(%360, %365) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
          }) : (i1) -> ()
          "mid.continue"() [^bb54] : () -> ()
        }) : (i1) -> ()
        %366 = "hi.cast"(%329) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %367 = "mid.unwrap"(%366) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %368 = "mid.unwrap"(%304) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %369 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %370 = "mid.parameterizations_array"(%369) : (!llvm.ptr) -> !llvm.ptr
        %371 = "mid.method_call"(%370, %368, %367) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %372 = "hi.cast"(%371) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %373 = "mid.get_field"(%304) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
        %374 = "hi.cast"(%372) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %375 = "mid.buffer_get"(%373, %374) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        %376 = "mid.get_field"(%304) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
        %377 = "hi.cast"(%307) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        %378 = "hi.cast"(%372) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%376, %378, %377) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
        %379 = "mid.checkflag"(%375) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %380 = "mid.unwrap"(%379) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %381 = "hi.cast"(%375) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.if"(%380) ({
          %382 = "hi.cast"(%381) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.nil
          %383 = "mid.get_field"(%304) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %384 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %385 = "mid.unwrap"(%383) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %386 = "mid.unwrap"(%384) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %387 = "mid.arithmetic"(%385, %386) {"op" = "ADD"} : (i32, i32) -> i32
          %388 = "mid.wrap"(%387) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %389 = "hi.cast"(%388) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.set_field"(%304, %389) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
          %390 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
          %391 = "hi.cast"(%390) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          "mid.return"(%391) : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
          %392 = "hi.cast"(%382) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          "mid.assign"(%381, %392) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %393 = "mid.checkflag"(%381) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %394 = "mid.unwrap"(%393) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %395 = "hi.cast"(%381) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.if"(%394) ({
          %396 = "hi.cast"(%395) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
          %397 = "hi.cast"(%396) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
          "mid.assign"(%307, %397) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> ()
          %398 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %399 = "hi.cast"(%398) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%308, %399) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %400 = "hi.cast"(%396) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          "mid.assign"(%395, %400) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
      }) : () -> ()
      %401 = "hi.cast"(%307) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
      "mid.return"(%401) : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
    }) {"func_name" = "CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb55(%402 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %403 : !llvm.ptr):
      %404 = "mid.invariant"(%403) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %405 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb56] : () -> ()
    ^bb57:
      %406 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%406, %405) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb58] : () -> ()
    ^bb56:
      %407 = "llvm.getelementptr"(%403) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %408 = "mid.checkflag"(%407) {"typ_name" = "Entry"} : (!llvm.ptr) -> !hi.bool
      %409 = "llvm.load"(%408) : (!hi.bool) -> i1
      "cf.cond_br"(%409) [^bb57, ^bb57] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb58:
      %410 = "llvm.extractvalue"(%402) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %411 = "llvm.load"(%405) : (!llvm.ptr) -> i32
      %412 = "llvm.getelementptr"(%410, %411) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %413 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %414 = "llvm.getelementptr"(%412, %413) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%414) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb59(%415 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %416 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %417 : !llvm.ptr, %418 : !llvm.struct<(!llvm.ptr)>, %419 : i32):
      %420 = "mid.wrap"(%415) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %421 = "hi.cast"(%420) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %422 = "mid.wrap"(%418) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %423 = "hi.cast"(%422) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %424 = "mid.wrap"(%419) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %425 = "hi.cast"(%424) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %426 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %427 = "mid.unwrap"(%426) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %428 = "mid.unwrap"(%425) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %429 = "mid.comparison"(%427, %428) {"op" = "LT"} : (i32, i32) -> i1
        %430 = "mid.wrap"(%429) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %431 = "mid.unwrap"(%430) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %432 = "hi.cast"(%426) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %433 = "mid.buffer_get"(%423, %432) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        %434 = "mid.checkflag"(%433) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %435 = "mid.unwrap"(%434) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %436 = "hi.cast"(%433) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.if"(%435) ({
          %437 = "hi.cast"(%436) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
          %438 = "hi.cast"(%437) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
          %439 = "mid.unwrap"(%438) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %440 = "mid.unwrap"(%421) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %441 = "mid.get_type_field"(%421) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
          %442 = "mid.get_type_field"(%421) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
          %443 = "mid.parameterization"(%441, %442) {"id_hierarchy" = ["Entry", [0 : i32], [1 : i32]], "name_hierarchy" = ["EntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any", ["CuckooMap.K_subtype_Any"], ["CuckooMap.V_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
          %444 = "mid.parameterizations_array"(%443) : (!llvm.ptr) -> !llvm.ptr
          %445 = "mid.method_call"(%444, %440, %439) {"offset" = 15 : i32, "vptrs" = [#none], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          %446 = "hi.cast"(%445) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          %447 = "hi.cast"(%437) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          "mid.assign"(%436, %447) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %448 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %449 = "mid.unwrap"(%426) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %450 = "mid.unwrap"(%448) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %451 = "mid.arithmetic"(%449, %450) {"op" = "ADD"} : (i32, i32) -> i32
        %452 = "mid.wrap"(%451) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %453 = "hi.cast"(%452) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%426, %453) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
    }) {"func_name" = "CuckooMap_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb60(%454 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %455 : !llvm.ptr):
      %456 = "mid.invariant"(%455) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %457 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb61] : () -> ()
    ^bb62:
      %458 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%458, %457) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb63] : () -> ()
    ^bb64:
      %459 = "llvm.getelementptr"(%455) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %460 = "mid.checkflag"(%459) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %461 = "llvm.load"(%460) : (!hi.bool) -> i1
      "cf.cond_br"(%461) [^bb62, ^bb62] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb61:
      %462 = "llvm.getelementptr"(%455) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %463 = "mid.checkflag"(%462) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %464 = "llvm.load"(%463) : (!hi.bool) -> i1
      "cf.cond_br"(%464) [^bb64, ^bb64] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb63:
      %465 = "llvm.extractvalue"(%454) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %466 = "llvm.load"(%457) : (!llvm.ptr) -> i32
      %467 = "llvm.getelementptr"(%465, %466) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %468 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %469 = "llvm.getelementptr"(%467, %468) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%469) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb65(%470 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %471 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %472 : !llvm.ptr):
      %473 = "mid.wrap"(%470) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %474 = "hi.cast"(%473) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %475 = "mid.get_field"(%474) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %476 = "mid.refer"(%475) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %477 = "mid.get_field"(%474) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %478 = "mid.refer"(%477) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %479 = "mid.get_field"(%474) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %480 = "mid.refer"(%479) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %481 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %482 = "mid.unwrap"(%480) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %483 = "mid.unwrap"(%481) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %484 = "mid.arithmetic"(%482, %483) {"op" = "MUL"} : (i32, i32) -> i32
      %485 = "mid.wrap"(%484) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %486 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %487 = "mid.unwrap"(%485) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %488 = "mid.unwrap"(%486) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %489 = "mid.comparison"(%487, %488) {"op" = "LT"} : (i32, i32) -> i1
      %490 = "mid.wrap"(%489) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %491 = "mid.unwrap"(%490) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%491) ({
        %492 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %493 = "hi.cast"(%492) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%485, %493) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %494 = "hi.cast"(%485) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%474, %494) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %495 = "hi.cast"(%485) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %496 = "mid.create_buffer"(%495) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %497 = "hi.cast"(%496) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      "mid.set_field"(%474, %497) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> ()
      %498 = "hi.cast"(%485) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %499 = "mid.create_buffer"(%498) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %500 = "hi.cast"(%499) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      "mid.set_field"(%474, %500) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> ()
      %501 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %502 = "hi.cast"(%501) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%474, %502) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %503 = "hi.cast"(%476) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %504 = "mid.unwrap"(%503) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %505 = "hi.cast"(%480) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %506 = "mid.unwrap"(%505) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %507 = "mid.unwrap"(%474) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %508 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %509 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %510 = "mid.parameterizations_array"(%508, %509) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%510, %507, %504, %506) {"offset" = 16 : i32, "vptrs" = ["buffer_typ", "i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32) -> ()
      %511 = "hi.cast"(%478) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %512 = "mid.unwrap"(%511) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %513 = "hi.cast"(%480) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %514 = "mid.unwrap"(%513) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %515 = "mid.unwrap"(%474) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %516 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %517 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %518 = "mid.parameterizations_array"(%516, %517) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%518, %515, %512, %514) {"offset" = 16 : i32, "vptrs" = ["buffer_typ", "i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32) -> ()
    }) {"func_name" = "CuckooMap_resize_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb66(%519 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %520 : !llvm.ptr):
      %521 = "mid.invariant"(%520) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %522 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb67] : () -> ()
    ^bb67:
      %523 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%523, %522) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb68] : () -> ()
    ^bb68:
      %524 = "llvm.extractvalue"(%519) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %525 = "llvm.load"(%522) : (!llvm.ptr) -> i32
      %526 = "llvm.getelementptr"(%524, %525) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %527 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %528 = "llvm.getelementptr"(%526, %527) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%528) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_resize_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb69(%529 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %530 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %531 : !llvm.ptr, %532 : !llvm.struct<(!llvm.ptr, i160)>, %533 : !llvm.struct<(!llvm.ptr, i160)>, %534 : i32, %535 : i32, %536 : !llvm.struct<(!llvm.ptr)>):
      %537 = "mid.wrap"(%529) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %538 = "hi.cast"(%537) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %539 = "mid.wrap"(%532) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %540 = "hi.cast"(%539) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %541 = "mid.wrap"(%533) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %542 = "hi.cast"(%541) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %543 = "mid.wrap"(%534) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %544 = "hi.cast"(%543) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %545 = "mid.wrap"(%535) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %546 = "hi.cast"(%545) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %547 = "mid.wrap"(%536) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %548 = "hi.cast"(%547) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %549 = "hi.cast"(%546) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %550 = "mid.buffer_get"(%548, %549) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
      %551 = "mid.checkflag"(%550) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %552 = "mid.unwrap"(%551) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %553 = "hi.cast"(%550) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
      "mid.if"(%552) ({
        %554 = "hi.cast"(%553) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
        %555 = "mid.unwrap"(%554) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %556 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %557 = "mid.method_call"(%556, %555) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %558 = "hi.cast"(%557) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %559 = "mid.unwrap"(%558) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %560 = "mid.unwrap"(%544) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %561 = "mid.comparison"(%559, %560) {"op" = "EQ"} : (i32, i32) -> i1
        %562 = "mid.wrap"(%561) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %563 = "mid.unwrap"(%562) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        %564 = "mid.logical"(%563) ({
          %565 = "mid.unwrap"(%554) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %566 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %567 = "mid.method_call"(%566, %565) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"K", !hi.any, "Entry">
          %568 = "hi.cast"(%567) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %569 = "hi.cast"(%568) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %570 = "mid.unwrap"(%569) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %571 = "hi.cast"(%540) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %572 = "mid.unwrap"(%571) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %573 = "mid.get_field"(%538) {"offset" = 8 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
          %574 = "mid.unwrap"(%573) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.ptr
          %575 = "mid.fptr_call"(%574, %570, %572) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
          func.return %575 : !hi.bool
        }) {"op" = "and"} : (i1) -> i1
        %576 = "mid.wrap"(%564) : (i1) -> !hi.bool
        %577 = "mid.unwrap"(%576) : (!hi.bool) -> i1
        "mid.if"(%577) ({
          %578 = "mid.unwrap"(%540) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %579 = "mid.unwrap"(%542) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %580 = "mid.unwrap"(%544) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %581 = "mid.get_type_field"(%538) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
          %582 = "mid.get_type_field"(%538) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
          %583 = "mid.new"(%581, %582) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Entry", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
          %584 = "hi.cast"(%540) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "Entry">
          %585 = "mid.unwrap"(%584) : (!hi.type_param<"K", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
          %586 = "hi.cast"(%542) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.type_param<"V", !hi.any, "Entry">
          %587 = "mid.unwrap"(%586) : (!hi.type_param<"V", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
          %588 = "hi.cast"(%544) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %589 = "mid.unwrap"(%588) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %590 = "mid.unwrap"(%583) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %591 = "mid.get_type_field"(%538) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
          %592 = "mid.get_type_field"(%538) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
          %593 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %594 = "mid.parameterizations_array"(%591, %592, %593) : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%594, %590, %585, %587, %589) {"offset" = 5 : i32, "vptrs" = ["any_typ", "any_typ", "i32_typ"], "vtable_size" = 15 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, i32) -> ()
          %595 = "mid.refer"(%583) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
          %596 = "hi.cast"(%595) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          %597 = "hi.cast"(%546) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          "mid.buffer_set"(%548, %597, %596) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
          %598 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %599 = "hi.cast"(%598) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%599) : (!hi.bool) -> ()
        }) : (i1) -> ()
        %600 = "hi.cast"(%554) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.assign"(%553, %600) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %601 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %602 = "hi.cast"(%601) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%602) : (!hi.bool) -> ()
    }) {"func_name" = "CuckooMap_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb70(%603 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %604 : !llvm.ptr):
      %605 = "mid.invariant"(%604) {"num_bytes" = 40 : i64} : (!llvm.ptr) -> !llvm.ptr
      %606 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb71] : () -> ()
    ^bb72:
      %607 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%607, %606) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb73] : () -> ()
    ^bb74:
      %608 = "llvm.getelementptr"(%604) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %609 = "mid.checkflag"(%608) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %610 = "llvm.load"(%609) : (!hi.bool) -> i1
      "cf.cond_br"(%610) [^bb72, ^bb72] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb75:
      %611 = "llvm.getelementptr"(%604) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %612 = "mid.checkflag"(%611) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %613 = "llvm.load"(%612) : (!hi.bool) -> i1
      "cf.cond_br"(%613) [^bb74, ^bb74] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb76:
      %614 = "llvm.getelementptr"(%604) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %615 = "mid.checkflag"(%614) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %616 = "llvm.load"(%615) : (!hi.bool) -> i1
      "cf.cond_br"(%616) [^bb75, ^bb75] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb77:
      %617 = "llvm.getelementptr"(%604) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %618 = "mid.checkflag"(%617) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %619 = "llvm.load"(%618) : (!hi.bool) -> i1
      "cf.cond_br"(%619) [^bb76, ^bb76] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb71:
      %620 = "llvm.getelementptr"(%604) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %621 = "mid.checkflag"(%620) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %622 = "llvm.load"(%621) : (!hi.bool) -> i1
      "cf.cond_br"(%622) [^bb77, ^bb77] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb73:
      %623 = "llvm.extractvalue"(%603) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %624 = "llvm.load"(%606) : (!llvm.ptr) -> i32
      %625 = "llvm.getelementptr"(%623, %624) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %626 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %627 = "llvm.getelementptr"(%625, %626) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%627) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb78(%628 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %629 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %630 : !llvm.ptr, %631 : !llvm.struct<(!llvm.ptr, i160)>, %632 : i32, %633 : i32, %634 : !llvm.struct<(!llvm.ptr)>):
      %635 = "mid.wrap"(%628) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %636 = "hi.cast"(%635) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %637 = "mid.wrap"(%631) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %638 = "hi.cast"(%637) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %639 = "mid.wrap"(%632) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %640 = "hi.cast"(%639) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %641 = "mid.wrap"(%633) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %642 = "hi.cast"(%641) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %643 = "mid.wrap"(%634) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %644 = "hi.cast"(%643) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %645 = "hi.cast"(%642) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %646 = "mid.buffer_get"(%644, %645) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
      %647 = "mid.checkflag"(%646) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %648 = "mid.unwrap"(%647) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %649 = "hi.cast"(%646) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
      "mid.if"(%648) ({
        %650 = "hi.cast"(%649) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
        %651 = "mid.unwrap"(%650) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %652 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %653 = "mid.method_call"(%652, %651) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %654 = "hi.cast"(%653) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %655 = "mid.unwrap"(%654) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %656 = "mid.unwrap"(%640) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %657 = "mid.comparison"(%655, %656) {"op" = "EQ"} : (i32, i32) -> i1
        %658 = "mid.wrap"(%657) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %659 = "mid.unwrap"(%658) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        %660 = "mid.logical"(%659) ({
          %661 = "mid.unwrap"(%650) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %662 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %663 = "mid.method_call"(%662, %661) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"K", !hi.any, "Entry">
          %664 = "hi.cast"(%663) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %665 = "hi.cast"(%664) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %666 = "mid.unwrap"(%665) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %667 = "hi.cast"(%638) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %668 = "mid.unwrap"(%667) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %669 = "mid.get_field"(%636) {"offset" = 8 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
          %670 = "mid.unwrap"(%669) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.ptr
          %671 = "mid.fptr_call"(%670, %666, %668) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
          func.return %671 : !hi.bool
        }) {"op" = "and"} : (i1) -> i1
        %672 = "mid.wrap"(%660) : (i1) -> !hi.bool
        %673 = "mid.unwrap"(%672) : (!hi.bool) -> i1
        "mid.if"(%673) ({
          %674 = "mid.unwrap"(%650) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %675 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %676 = "mid.method_call"(%675, %674) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"V", !hi.any, "Entry">
          %677 = "hi.cast"(%676) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "CuckooMap">
          %678 = "hi.cast"(%677) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
          "mid.return"(%678) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %679 = "hi.cast"(%650) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.assign"(%649, %679) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %680 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %681 = "hi.cast"(%680) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      "mid.return"(%681) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
    }) {"func_name" = "CuckooMap_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb79(%682 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %683 : !llvm.ptr):
      %684 = "mid.invariant"(%683) {"num_bytes" = 32 : i64} : (!llvm.ptr) -> !llvm.ptr
      %685 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb80] : () -> ()
    ^bb81:
      %686 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%686, %685) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb82] : () -> ()
    ^bb83:
      %687 = "llvm.getelementptr"(%683) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %688 = "mid.checkflag"(%687) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %689 = "llvm.load"(%688) : (!hi.bool) -> i1
      "cf.cond_br"(%689) [^bb81, ^bb81] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb84:
      %690 = "llvm.getelementptr"(%683) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %691 = "mid.checkflag"(%690) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %692 = "llvm.load"(%691) : (!hi.bool) -> i1
      "cf.cond_br"(%692) [^bb83, ^bb83] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb85:
      %693 = "llvm.getelementptr"(%683) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %694 = "mid.checkflag"(%693) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %695 = "llvm.load"(%694) : (!hi.bool) -> i1
      "cf.cond_br"(%695) [^bb84, ^bb84] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb80:
      %696 = "llvm.getelementptr"(%683) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %697 = "mid.checkflag"(%696) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %698 = "llvm.load"(%697) : (!hi.bool) -> i1
      "cf.cond_br"(%698) [^bb85, ^bb85] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb82:
      %699 = "llvm.extractvalue"(%682) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %700 = "llvm.load"(%685) : (!llvm.ptr) -> i32
      %701 = "llvm.getelementptr"(%699, %700) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %702 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %703 = "llvm.getelementptr"(%701, %702) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%703) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb86(%704 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %706 : !llvm.ptr, %707 : !llvm.struct<(!llvm.ptr, i160)>, %708 : i32, %709 : i32, %710 : !llvm.struct<(!llvm.ptr)>):
      %711 = "mid.wrap"(%704) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %712 = "hi.cast"(%711) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %713 = "mid.wrap"(%707) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %714 = "hi.cast"(%713) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %715 = "mid.wrap"(%708) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %716 = "hi.cast"(%715) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %717 = "mid.wrap"(%709) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %718 = "hi.cast"(%717) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %719 = "mid.wrap"(%710) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %720 = "hi.cast"(%719) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %721 = "hi.cast"(%718) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %722 = "mid.buffer_get"(%720, %721) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
      %723 = "mid.checkflag"(%722) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %724 = "mid.unwrap"(%723) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %725 = "hi.cast"(%722) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
      "mid.if"(%724) ({
        %726 = "hi.cast"(%725) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
        %727 = "mid.unwrap"(%726) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %728 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %729 = "mid.method_call"(%728, %727) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %730 = "hi.cast"(%729) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %731 = "mid.unwrap"(%730) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %732 = "mid.unwrap"(%716) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %733 = "mid.comparison"(%731, %732) {"op" = "EQ"} : (i32, i32) -> i1
        %734 = "mid.wrap"(%733) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %735 = "mid.unwrap"(%734) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        %736 = "mid.logical"(%735) ({
          %737 = "mid.unwrap"(%726) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %738 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %739 = "mid.method_call"(%738, %737) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"K", !hi.any, "Entry">
          %740 = "hi.cast"(%739) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %741 = "hi.cast"(%740) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %742 = "mid.unwrap"(%741) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %743 = "hi.cast"(%714) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %744 = "mid.unwrap"(%743) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %745 = "mid.get_field"(%712) {"offset" = 8 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
          %746 = "mid.unwrap"(%745) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.ptr
          %747 = "mid.fptr_call"(%746, %742, %744) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
          func.return %747 : !hi.bool
        }) {"op" = "and"} : (i1) -> i1
        %748 = "mid.wrap"(%736) : (i1) -> !hi.bool
        %749 = "mid.unwrap"(%748) : (!hi.bool) -> i1
        "mid.if"(%749) ({
          %750 = "mid.unwrap"(%726) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %751 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %752 = "mid.method_call"(%751, %750) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"V", !hi.any, "Entry">
          %753 = "hi.cast"(%752) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "CuckooMap">
          %754 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
          %755 = "hi.cast"(%754) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          %756 = "hi.cast"(%718) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          "mid.buffer_set"(%720, %756, %755) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
          %757 = "mid.get_field"(%712) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %758 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %759 = "mid.unwrap"(%757) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %760 = "mid.unwrap"(%758) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %761 = "mid.arithmetic"(%759, %760) {"op" = "SUB"} : (i32, i32) -> i32
          %762 = "mid.wrap"(%761) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %763 = "hi.cast"(%762) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.set_field"(%712, %763) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
          %764 = "hi.cast"(%753) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
          "mid.return"(%764) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %765 = "hi.cast"(%726) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.assign"(%725, %765) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %766 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %767 = "hi.cast"(%766) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      "mid.return"(%767) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
    }) {"func_name" = "CuckooMap_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb87(%768 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %769 : !llvm.ptr):
      %770 = "mid.invariant"(%769) {"num_bytes" = 32 : i64} : (!llvm.ptr) -> !llvm.ptr
      %771 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb88] : () -> ()
    ^bb89:
      %772 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%772, %771) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb90] : () -> ()
    ^bb91:
      %773 = "llvm.getelementptr"(%769) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %774 = "mid.checkflag"(%773) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %775 = "llvm.load"(%774) : (!hi.bool) -> i1
      "cf.cond_br"(%775) [^bb89, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb92:
      %776 = "llvm.getelementptr"(%769) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %777 = "mid.checkflag"(%776) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %778 = "llvm.load"(%777) : (!hi.bool) -> i1
      "cf.cond_br"(%778) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb93:
      %779 = "llvm.getelementptr"(%769) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %780 = "mid.checkflag"(%779) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %781 = "llvm.load"(%780) : (!hi.bool) -> i1
      "cf.cond_br"(%781) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb88:
      %782 = "llvm.getelementptr"(%769) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %783 = "mid.checkflag"(%782) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %784 = "llvm.load"(%783) : (!hi.bool) -> i1
      "cf.cond_br"(%784) [^bb93, ^bb93] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %785 = "llvm.extractvalue"(%768) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %786 = "llvm.load"(%771) : (!llvm.ptr) -> i32
      %787 = "llvm.getelementptr"(%785, %786) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %788 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %789 = "llvm.getelementptr"(%787, %788) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%789) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb94(%790 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %791 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %792 : !llvm.ptr, %793 : !llvm.struct<(!llvm.ptr, i160)>, %794 : !llvm.struct<(!llvm.ptr, i160)>):
      %795 = "mid.wrap"(%790) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %796 = "hi.cast"(%795) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %797 = "mid.wrap"(%793) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %798 = "hi.cast"(%797) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %799 = "mid.wrap"(%794) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %800 = "hi.cast"(%799) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %801 = "hi.cast"(%798) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %802 = "mid.unwrap"(%801) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %803 = "mid.unwrap"(%796) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %804 = "mid.get_type_field"(%796) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %805 = "mid.parameterizations_array"(%804) : (!hi.reified_type) -> !llvm.ptr
      %806 = "mid.method_call"(%805, %803, %802) {"offset" = 11 : i32, "vptrs" = ["any_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %807 = "hi.cast"(%806) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %808 = "hi.cast"(%807) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %809 = "mid.unwrap"(%808) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %810 = "mid.unwrap"(%796) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %811 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %812 = "mid.parameterizations_array"(%811) : (!llvm.ptr) -> !llvm.ptr
      %813 = "mid.method_call"(%812, %810, %809) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %814 = "hi.cast"(%813) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %815 = "mid.get_field"(%796) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %816 = "hi.cast"(%798) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %817 = "mid.unwrap"(%816) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %818 = "hi.cast"(%800) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %819 = "mid.unwrap"(%818) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %820 = "hi.cast"(%807) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %821 = "mid.unwrap"(%820) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %822 = "hi.cast"(%814) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %823 = "mid.unwrap"(%822) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %824 = "hi.cast"(%815) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %825 = "mid.unwrap"(%824) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %826 = "mid.unwrap"(%796) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %827 = "mid.get_type_field"(%796) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %828 = "mid.get_type_field"(%796) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %829 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %830 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %831 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %832 = "mid.parameterizations_array"(%827, %828, %829, %830, %831) : (!hi.reified_type, !hi.reified_type, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %833 = "mid.method_call"(%832, %826, %817, %819, %821, %823, %825) {"offset" = 18 : i32, "vptrs" = ["any_typ", "any_typ", "i32_typ", "i32_typ", "buffer_typ"], "vtable_size" = 288 : i64, "ret_type" = i1, "ret_type_unq" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, i32, i32, !llvm.struct<(!llvm.ptr)>) -> !hi.bool
      %834 = "hi.cast"(%833) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      %835 = "mid.unwrap"(%834) : (!hi.bool) -> i1
      "mid.if"(%835) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %836 = "hi.cast"(%807) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %837 = "mid.unwrap"(%836) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %838 = "mid.unwrap"(%796) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %839 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %840 = "mid.parameterizations_array"(%839) : (!llvm.ptr) -> !llvm.ptr
      %841 = "mid.method_call"(%840, %838, %837) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %842 = "hi.cast"(%841) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %843 = "mid.get_field"(%796) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %844 = "hi.cast"(%798) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %845 = "mid.unwrap"(%844) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %846 = "hi.cast"(%800) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %847 = "mid.unwrap"(%846) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %848 = "hi.cast"(%807) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %849 = "mid.unwrap"(%848) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %850 = "hi.cast"(%842) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %851 = "mid.unwrap"(%850) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %852 = "hi.cast"(%843) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %853 = "mid.unwrap"(%852) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %854 = "mid.unwrap"(%796) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %855 = "mid.get_type_field"(%796) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %856 = "mid.get_type_field"(%796) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %857 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %858 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %859 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %860 = "mid.parameterizations_array"(%855, %856, %857, %858, %859) : (!hi.reified_type, !hi.reified_type, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %861 = "mid.method_call"(%860, %854, %845, %847, %849, %851, %853) {"offset" = 18 : i32, "vptrs" = ["any_typ", "any_typ", "i32_typ", "i32_typ", "buffer_typ"], "vtable_size" = 288 : i64, "ret_type" = i1, "ret_type_unq" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, i32, i32, !llvm.struct<(!llvm.ptr)>) -> !hi.bool
      %862 = "hi.cast"(%861) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      %863 = "hi.cast"(%862) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.assign"(%834, %863) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      %864 = "mid.unwrap"(%834) : (!hi.bool) -> i1
      "mid.if"(%864) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %865 = "mid.get_field"(%796) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %866 = "mid.get_field"(%796) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %867 = "mid.unwrap"(%865) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %868 = "mid.unwrap"(%866) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %869 = "mid.comparison"(%867, %868) {"op" = "GE"} : (i32, i32) -> i1
      %870 = "mid.wrap"(%869) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %871 = "mid.unwrap"(%870) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%871) ({
        %872 = "mid.unwrap"(%796) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %873 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%873, %872) {"offset" = 17 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      }) : (i1) -> ()
      %874 = "mid.unwrap"(%798) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %875 = "mid.unwrap"(%800) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %876 = "mid.unwrap"(%807) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %877 = "mid.get_type_field"(%796) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %878 = "mid.get_type_field"(%796) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %879 = "mid.new"(%877, %878) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Entry", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %880 = "hi.cast"(%798) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "Entry">
      %881 = "mid.unwrap"(%880) : (!hi.type_param<"K", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
      %882 = "hi.cast"(%800) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.type_param<"V", !hi.any, "Entry">
      %883 = "mid.unwrap"(%882) : (!hi.type_param<"V", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
      %884 = "hi.cast"(%807) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %885 = "mid.unwrap"(%884) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %886 = "mid.unwrap"(%879) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %887 = "mid.get_type_field"(%796) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %888 = "mid.get_type_field"(%796) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %889 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %890 = "mid.parameterizations_array"(%887, %888, %889) : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%890, %886, %881, %883, %885) {"offset" = 5 : i32, "vptrs" = ["any_typ", "any_typ", "i32_typ"], "vtable_size" = 15 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, i32) -> ()
      %891 = "mid.refer"(%879) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %892 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %893 = "hi.cast"(%892) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
      %894 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %895 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %896 = "mid.unwrap"(%895) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %897 = "mid.unwrap"(%894) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %898 = "mid.comparison"(%896, %897) {"op" = "LT"} : (i32, i32) -> i1
        %899 = "mid.wrap"(%898) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %900 = "mid.unwrap"(%899) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %901 = "hi.cast"(%891) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
        %902 = "mid.unwrap"(%901) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %903 = "mid.unwrap"(%796) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %904 = "mid.get_type_field"(%796) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
        %905 = "mid.get_type_field"(%796) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
        %906 = "mid.parameterization"(%904, %905) {"id_hierarchy" = ["Entry", [0 : i32], [1 : i32]], "name_hierarchy" = ["EntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any", ["CuckooMap.K_subtype_Any"], ["CuckooMap.V_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
        %907 = "mid.parameterizations_array"(%906) : (!llvm.ptr) -> !llvm.ptr
        %908 = "mid.method_call"(%907, %903, %902) {"offset" = 15 : i32, "vptrs" = [#none], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        %909 = "hi.cast"(%908) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        %910 = "hi.cast"(%909) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.assign"(%893, %910) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
        %911 = "mid.checkflag"(%893) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %912 = "mid.unwrap"(%911) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %913 = "hi.cast"(%893) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.if"(%912) ({
          %914 = "hi.cast"(%913) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.nil
          "mid.return"() : () -> ()
          %915 = "hi.cast"(%914) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          "mid.assign"(%913, %915) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %916 = "mid.unwrap"(%796) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %917 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%917, %916) {"offset" = 17 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %918 = "mid.checkflag"(%913) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %919 = "mid.unwrap"(%918) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %920 = "hi.cast"(%913) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
        "mid.if"(%919) ({
          %921 = "hi.cast"(%920) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
          %922 = "hi.cast"(%921) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
          "mid.assign"(%891, %922) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> ()
          %923 = "hi.cast"(%921) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>
          "mid.assign"(%920, %923) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %924 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %925 = "mid.unwrap"(%895) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %926 = "mid.unwrap"(%924) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %927 = "mid.arithmetic"(%925, %926) {"op" = "ADD"} : (i32, i32) -> i32
        %928 = "mid.wrap"(%927) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %929 = "hi.cast"(%928) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%895, %929) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
    }) {"func_name" = "CuckooMap_insert_keyK_valueV", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb95(%930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %931 : !llvm.ptr):
      %932 = "mid.invariant"(%931) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %933 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb96] : () -> ()
    ^bb97:
      %934 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%934, %933) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb98] : () -> ()
    ^bb99:
      %935 = "llvm.getelementptr"(%931) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %936 = "mid.checkflag"(%935) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %937 = "llvm.load"(%936) : (!hi.bool) -> i1
      "cf.cond_br"(%937) [^bb97, ^bb97] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb96:
      %938 = "llvm.getelementptr"(%931) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %939 = "mid.checkflag"(%938) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %940 = "llvm.load"(%939) : (!hi.bool) -> i1
      "cf.cond_br"(%940) [^bb99, ^bb99] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb98:
      %941 = "llvm.extractvalue"(%930) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %942 = "llvm.load"(%933) : (!llvm.ptr) -> i32
      %943 = "llvm.getelementptr"(%941, %942) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %944 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %945 = "llvm.getelementptr"(%943, %944) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%945) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_insert_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb100(%946 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %947 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %948 : !llvm.ptr):
      %949 = "mid.wrap"(%946) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %950 = "hi.cast"(%949) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %951 = "mid.get_field"(%950) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %952 = "hi.cast"(%951) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%952) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "CuckooMap_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb101(%953 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %954 : !llvm.ptr):
      %955 = "mid.invariant"(%954) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %956 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb102] : () -> ()
    ^bb102:
      %957 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%957, %956) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb103] : () -> ()
    ^bb103:
      %958 = "llvm.extractvalue"(%953) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %959 = "llvm.load"(%956) : (!llvm.ptr) -> i32
      %960 = "llvm.getelementptr"(%958, %959) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %961 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %962 = "llvm.getelementptr"(%960, %961) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%962) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb104(%963 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %965 : !llvm.ptr, %966 : !llvm.struct<(!llvm.ptr, i160)>):
      %967 = "mid.wrap"(%963) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %968 = "hi.cast"(%967) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %969 = "mid.wrap"(%966) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %970 = "hi.cast"(%969) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %971 = "hi.cast"(%970) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %972 = "mid.unwrap"(%971) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %973 = "mid.unwrap"(%968) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %974 = "mid.get_type_field"(%968) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %975 = "mid.parameterizations_array"(%974) : (!hi.reified_type) -> !llvm.ptr
      %976 = "mid.method_call"(%975, %973, %972) {"offset" = 11 : i32, "vptrs" = ["any_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %977 = "hi.cast"(%976) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %978 = "hi.cast"(%977) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %979 = "mid.unwrap"(%978) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %980 = "mid.unwrap"(%968) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %981 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %982 = "mid.parameterizations_array"(%981) : (!llvm.ptr) -> !llvm.ptr
      %983 = "mid.method_call"(%982, %980, %979) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %984 = "hi.cast"(%983) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %985 = "mid.get_field"(%968) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %986 = "hi.cast"(%970) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %987 = "mid.unwrap"(%986) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %988 = "hi.cast"(%977) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %989 = "mid.unwrap"(%988) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %990 = "hi.cast"(%984) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %991 = "mid.unwrap"(%990) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %992 = "hi.cast"(%985) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %993 = "mid.unwrap"(%992) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %994 = "mid.unwrap"(%968) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %995 = "mid.get_type_field"(%968) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %996 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %997 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %998 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %999 = "mid.parameterizations_array"(%995, %996, %997, %998) : (!hi.reified_type, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1000 = "mid.method_call"(%999, %994, %987, %989, %991, %993) {"offset" = 19 : i32, "vptrs" = ["any_typ", "i32_typ", "i32_typ", "buffer_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, i32, i32, !llvm.struct<(!llvm.ptr)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      %1001 = "hi.cast"(%1000) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      %1002 = "mid.get_type_field"(%968) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1003 = "mid.checkflag"(%1001) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1004 = "mid.unwrap"(%1003) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1005 = "hi.cast"(%1001) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      "mid.if"(%1004) ({
        %1006 = "hi.cast"(%1005) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
        %1007 = "hi.cast"(%1006) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        "mid.return"(%1007) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
        %1008 = "hi.cast"(%1006) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        "mid.assign"(%1005, %1008) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1009 = "hi.cast"(%977) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1010 = "mid.unwrap"(%1009) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1011 = "mid.unwrap"(%968) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1012 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1013 = "mid.parameterizations_array"(%1012) : (!llvm.ptr) -> !llvm.ptr
      %1014 = "mid.method_call"(%1013, %1011, %1010) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1015 = "hi.cast"(%1014) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1016 = "mid.get_field"(%968) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1017 = "hi.cast"(%970) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1018 = "mid.unwrap"(%1017) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %1019 = "hi.cast"(%977) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1020 = "mid.unwrap"(%1019) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1021 = "hi.cast"(%1015) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1022 = "mid.unwrap"(%1021) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1023 = "hi.cast"(%1016) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1024 = "mid.unwrap"(%1023) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %1025 = "mid.unwrap"(%968) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1026 = "mid.get_type_field"(%968) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1027 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1028 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1029 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %1030 = "mid.parameterizations_array"(%1026, %1027, %1028, %1029) : (!hi.reified_type, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1031 = "mid.method_call"(%1030, %1025, %1018, %1020, %1022, %1024) {"offset" = 19 : i32, "vptrs" = ["any_typ", "i32_typ", "i32_typ", "buffer_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, i32, i32, !llvm.struct<(!llvm.ptr)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      %1032 = "hi.cast"(%1031) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      %1033 = "mid.get_type_field"(%968) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1034 = "mid.checkflag"(%1032) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1035 = "mid.unwrap"(%1034) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1036 = "hi.cast"(%1032) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      "mid.if"(%1035) ({
        %1037 = "hi.cast"(%1036) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
        %1038 = "hi.cast"(%1037) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        "mid.return"(%1038) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
        %1039 = "hi.cast"(%1037) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        "mid.assign"(%1036, %1039) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1040 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1041 = "hi.cast"(%1040) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      "mid.return"(%1041) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
    }) {"func_name" = "CuckooMap_get_keyK", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb105(%1042 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1043 : !llvm.ptr):
      %1044 = "mid.invariant"(%1043) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1045 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb106] : () -> ()
    ^bb107:
      %1046 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
      "llvm.store"(%1046, %1045) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb108] : () -> ()
    ^bb106:
      %1047 = "llvm.getelementptr"(%1043) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1048 = "mid.checkflag"(%1047) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1049 = "llvm.load"(%1048) : (!hi.bool) -> i1
      "cf.cond_br"(%1049) [^bb107, ^bb107] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb108:
      %1050 = "llvm.extractvalue"(%1042) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1051 = "llvm.load"(%1045) : (!llvm.ptr) -> i32
      %1052 = "llvm.getelementptr"(%1050, %1051) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1053 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1054 = "llvm.getelementptr"(%1052, %1053) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1054) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_get_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb109(%1055 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1056 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1057 : !llvm.ptr, %1058 : !llvm.struct<(!llvm.ptr, i160)>, %1059 : !llvm.struct<(!llvm.ptr, i160)>):
      %1060 = "mid.wrap"(%1055) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1061 = "hi.cast"(%1060) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1062 = "mid.wrap"(%1058) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1063 = "hi.cast"(%1062) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1064 = "mid.wrap"(%1059) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %1065 = "hi.cast"(%1064) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %1066 = "hi.cast"(%1063) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1067 = "mid.unwrap"(%1066) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %1068 = "hi.cast"(%1065) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.type_param<"V", !hi.any, "CuckooMap">
      %1069 = "mid.unwrap"(%1068) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %1070 = "mid.unwrap"(%1061) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1071 = "mid.get_type_field"(%1061) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1072 = "mid.get_type_field"(%1061) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1073 = "mid.parameterizations_array"(%1071, %1072) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      "mid.method_call"(%1073, %1070, %1067, %1069) {"offset" = 21 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "CuckooMap__set_index_keyK_valueV", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb110(%1074 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1075 : !llvm.ptr):
      %1076 = "mid.invariant"(%1075) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1077 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb111] : () -> ()
    ^bb112:
      %1078 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
      "llvm.store"(%1078, %1077) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %1079 = "llvm.getelementptr"(%1075) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1080 = "mid.checkflag"(%1079) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1081 = "llvm.load"(%1080) : (!hi.bool) -> i1
      "cf.cond_br"(%1081) [^bb112, ^bb112] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb111:
      %1082 = "llvm.getelementptr"(%1075) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1083 = "mid.checkflag"(%1082) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1084 = "llvm.load"(%1083) : (!hi.bool) -> i1
      "cf.cond_br"(%1084) [^bb114, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb113:
      %1085 = "llvm.extractvalue"(%1074) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1086 = "llvm.load"(%1077) : (!llvm.ptr) -> i32
      %1087 = "llvm.getelementptr"(%1085, %1086) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1088 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1089 = "llvm.getelementptr"(%1087, %1088) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1089) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B__set_index_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb115(%1090 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1091 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1092 : !llvm.ptr, %1093 : !llvm.struct<(!llvm.ptr, i160)>):
      %1094 = "mid.wrap"(%1090) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1095 = "hi.cast"(%1094) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1096 = "mid.wrap"(%1093) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1097 = "hi.cast"(%1096) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1098 = "hi.cast"(%1097) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1099 = "mid.unwrap"(%1098) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %1100 = "mid.unwrap"(%1095) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1101 = "mid.get_type_field"(%1095) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1102 = "mid.parameterizations_array"(%1101) : (!hi.reified_type) -> !llvm.ptr
      %1103 = "mid.method_call"(%1102, %1100, %1099) {"offset" = 11 : i32, "vptrs" = ["any_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1104 = "hi.cast"(%1103) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1105 = "hi.cast"(%1104) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1106 = "mid.unwrap"(%1105) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1107 = "mid.unwrap"(%1095) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1108 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1109 = "mid.parameterizations_array"(%1108) : (!llvm.ptr) -> !llvm.ptr
      %1110 = "mid.method_call"(%1109, %1107, %1106) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1111 = "hi.cast"(%1110) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1112 = "mid.get_field"(%1095) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1113 = "hi.cast"(%1097) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1114 = "mid.unwrap"(%1113) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %1115 = "hi.cast"(%1104) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1116 = "mid.unwrap"(%1115) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1117 = "hi.cast"(%1111) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1118 = "mid.unwrap"(%1117) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1119 = "hi.cast"(%1112) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1120 = "mid.unwrap"(%1119) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %1121 = "mid.unwrap"(%1095) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1122 = "mid.get_type_field"(%1095) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1123 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1124 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1125 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %1126 = "mid.parameterizations_array"(%1122, %1123, %1124, %1125) : (!hi.reified_type, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1127 = "mid.method_call"(%1126, %1121, %1114, %1116, %1118, %1120) {"offset" = 20 : i32, "vptrs" = ["any_typ", "i32_typ", "i32_typ", "buffer_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, i32, i32, !llvm.struct<(!llvm.ptr)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      %1128 = "hi.cast"(%1127) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      %1129 = "mid.get_type_field"(%1095) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1130 = "mid.checkflag"(%1128) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1131 = "mid.unwrap"(%1130) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1132 = "hi.cast"(%1128) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      "mid.if"(%1131) ({
        %1133 = "hi.cast"(%1132) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
        %1134 = "hi.cast"(%1133) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        "mid.return"(%1134) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
        %1135 = "hi.cast"(%1133) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        "mid.assign"(%1132, %1135) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1136 = "hi.cast"(%1104) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1137 = "mid.unwrap"(%1136) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1138 = "mid.unwrap"(%1095) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1139 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1140 = "mid.parameterizations_array"(%1139) : (!llvm.ptr) -> !llvm.ptr
      %1141 = "mid.method_call"(%1140, %1138, %1137) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1142 = "hi.cast"(%1141) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1143 = "mid.get_field"(%1095) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1144 = "hi.cast"(%1097) {"from_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !hi.type_param<"K", !hi.any, "CuckooMap">
      %1145 = "mid.unwrap"(%1144) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
      %1146 = "hi.cast"(%1104) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1147 = "mid.unwrap"(%1146) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1148 = "hi.cast"(%1142) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1149 = "mid.unwrap"(%1148) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1150 = "hi.cast"(%1143) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1151 = "mid.unwrap"(%1150) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %1152 = "mid.unwrap"(%1095) : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1153 = "mid.get_type_field"(%1095) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1154 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1155 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1156 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %1157 = "mid.parameterizations_array"(%1153, %1154, %1155, %1156) : (!hi.reified_type, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1158 = "mid.method_call"(%1157, %1152, %1145, %1147, %1149, %1151) {"offset" = 20 : i32, "vptrs" = ["any_typ", "i32_typ", "i32_typ", "buffer_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, i32, i32, !llvm.struct<(!llvm.ptr)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      %1159 = "hi.cast"(%1158) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      %1160 = "mid.get_type_field"(%1095) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1161 = "mid.checkflag"(%1159) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1162 = "mid.unwrap"(%1161) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1163 = "hi.cast"(%1159) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      "mid.if"(%1162) ({
        %1164 = "hi.cast"(%1163) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
        %1165 = "hi.cast"(%1164) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        "mid.return"(%1165) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
        %1166 = "hi.cast"(%1164) {"from_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        "mid.assign"(%1163, %1166) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1167 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1168 = "hi.cast"(%1167) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
      "mid.return"(%1168) : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> ()
    }) {"func_name" = "CuckooMap_remove_keyK", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb116(%1169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1170 : !llvm.ptr):
      %1171 = "mid.invariant"(%1170) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1172 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb117] : () -> ()
    ^bb118:
      %1173 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
      "llvm.store"(%1173, %1172) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb119] : () -> ()
    ^bb117:
      %1174 = "llvm.getelementptr"(%1170) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1175 = "mid.checkflag"(%1174) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1176 = "llvm.load"(%1175) : (!hi.bool) -> i1
      "cf.cond_br"(%1176) [^bb118, ^bb118] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb119:
      %1177 = "llvm.extractvalue"(%1169) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1178 = "llvm.load"(%1172) : (!llvm.ptr) -> i32
      %1179 = "llvm.getelementptr"(%1177, %1178) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1180 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1181 = "llvm.getelementptr"(%1179, %1180) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1181) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_remove_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb120(%1182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1184 : !llvm.ptr):
      %1185 = "mid.wrap"(%1182) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1186 = "hi.cast"(%1185) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1187 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1188 = "hi.cast"(%1187) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1186, %1188) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1189 = "hi.cast"(%1187) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1190 = "mid.create_buffer"(%1189) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1191 = "hi.cast"(%1190) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      "mid.set_field"(%1186, %1191) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> ()
      %1192 = "hi.cast"(%1187) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1193 = "mid.create_buffer"(%1192) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1194 = "hi.cast"(%1193) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      "mid.set_field"(%1186, %1194) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> ()
      %1195 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1196 = "hi.cast"(%1195) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1186, %1196) {"offset" = 6 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "CuckooMap_clear_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb121(%1197 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1198 : !llvm.ptr):
      %1199 = "mid.invariant"(%1198) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1200 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb122] : () -> ()
    ^bb122:
      %1201 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
      "llvm.store"(%1201, %1200) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb123:
      %1202 = "llvm.extractvalue"(%1197) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1203 = "llvm.load"(%1200) : (!llvm.ptr) -> i32
      %1204 = "llvm.getelementptr"(%1202, %1203) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1205 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1206 = "llvm.getelementptr"(%1204, %1205) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1206) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_clear_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Map__index_keyK", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb124(%1207 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1208 : !llvm.ptr):
      %1209 = "mid.invariant"(%1208) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1210 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb125] : () -> ()
    ^bb126:
      %1211 = "llvm.mlir.constant"() <{"value" = 58 : i32}> : () -> i32
      "llvm.store"(%1211, %1210) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb127] : () -> ()
    ^bb125:
      %1212 = "llvm.getelementptr"(%1208) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1213 = "mid.checkflag"(%1212) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1214 = "llvm.load"(%1213) : (!hi.bool) -> i1
      "cf.cond_br"(%1214) [^bb126, ^bb126] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb127:
      %1215 = "llvm.extractvalue"(%1207) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1216 = "llvm.load"(%1210) : (!llvm.ptr) -> i32
      %1217 = "llvm.getelementptr"(%1215, %1216) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1218 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1219 = "llvm.getelementptr"(%1217, %1218) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1219) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B__index_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb128(%1220 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1221 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1222 : !llvm.ptr):
      %1223 = "mid.wrap"(%1220) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1224 = "hi.cast"(%1223) {"from_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "from_typ_name" = "CuckooMap", "to_typ_name" = "CuckooMap"} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1225 = "mid.get_field"(%1224) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1226 = "mid.get_field"(%1224) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1227 = "mid.get_field"(%1224) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1228 = "mid.unwrap"(%1225) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %1229 = "mid.unwrap"(%1226) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %1230 = "mid.unwrap"(%1227) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1231 = "mid.get_type_field"(%1224) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1232 = "mid.get_type_field"(%1224) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1233 = "mid.get_type_field"(%1224) {"offset" = 0 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1234 = "mid.get_type_field"(%1224) {"offset" = 1 : i64, "vtable_bytes" = 2304 : i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.reified_type
      %1235 = "mid.parameterization"(%1233, %1234) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any", ["CuckooMap.K_subtype_Any"], ["CuckooMap.V_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %1236 = "mid.new"(%1231, %1232, %1235) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1)>, "class_name" = "CuckooMapIterator", "num_data_fields" = 5 : i32, "region_id" = "none", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>
      %1237 = "mid.get_field"(%1224) {"offset" = 3 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1238 = "mid.get_field"(%1224) {"offset" = 4 : i64, "vtable_bytes" = 2304 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>
      %1239 = "mid.get_field"(%1224) {"offset" = 5 : i64, "vtable_bytes" = 2304 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMap", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1240 = "hi.cast"(%1237) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1241 = "mid.unwrap"(%1240) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %1242 = "hi.cast"(%1238) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1243 = "mid.unwrap"(%1242) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %1244 = "hi.cast"(%1239) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1245 = "mid.unwrap"(%1244) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1246 = "mid.unwrap"(%1236) : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1247 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %1248 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMap.K_subtype_Any._CuckooMap.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %1249 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1250 = "mid.parameterizations_array"(%1247, %1248, %1249) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1250, %1246, %1241, %1243, %1245) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "buffer_typ", "i32_typ"], "vtable_size" = 17 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32) -> ()
      %1251 = "hi.cast"(%1236) {"from_typ" = !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "CuckooMapIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"V", !hi.any, "CuckooMap">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%1251) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "CuckooMap_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb129(%1252 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1253 : !llvm.ptr):
      %1254 = "mid.invariant"(%1253) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1255 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb130] : () -> ()
    ^bb130:
      %1256 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%1256, %1255) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb131] : () -> ()
    ^bb131:
      %1257 = "llvm.extractvalue"(%1252) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1258 = "llvm.load"(%1255) : (!llvm.ptr) -> i32
      %1259 = "llvm.getelementptr"(%1257, %1258) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1260 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1261 = "llvm.getelementptr"(%1259, %1260) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1261) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb132(%1262 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1263 : !llvm.ptr):
      %1264 = "mid.invariant"(%1263) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1265 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb133] : () -> ()
    ^bb134:
      %1266 = "llvm.mlir.constant"() <{"value" = 60 : i32}> : () -> i32
      "llvm.store"(%1266, %1265) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb135] : () -> ()
    ^bb133:
      %1267 = "llvm.getelementptr"(%1263) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1268 = "mid.checkflag"(%1267) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1269 = "llvm.load"(%1268) : (!hi.bool) -> i1
      "cf.cond_br"(%1269) [^bb134, ^bb134] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb135:
      %1270 = "llvm.extractvalue"(%1262) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1271 = "llvm.load"(%1265) : (!llvm.ptr) -> i32
      %1272 = "llvm.getelementptr"(%1270, %1271) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1273 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1274 = "llvm.getelementptr"(%1272, %1273) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1274) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb136(%1275 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1276 : !llvm.ptr):
      %1277 = "mid.invariant"(%1276) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1278 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb137] : () -> ()
    ^bb138:
      %1279 = "llvm.mlir.constant"() <{"value" = 61 : i32}> : () -> i32
      "llvm.store"(%1279, %1278) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb139] : () -> ()
    ^bb140:
      %1280 = "llvm.getelementptr"(%1276) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1281 = "mid.checkflag"(%1280) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1282 = "llvm.load"(%1281) : (!hi.bool) -> i1
      "cf.cond_br"(%1282) [^bb138, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb137:
      %1283 = "llvm.getelementptr"(%1276) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1284 = "mid.checkflag"(%1283) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1285 = "llvm.load"(%1284) : (!hi.bool) -> i1
      "cf.cond_br"(%1285) [^bb140, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %1286 = "llvm.extractvalue"(%1275) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1287 = "llvm.load"(%1278) : (!llvm.ptr) -> i32
      %1288 = "llvm.getelementptr"(%1286, %1287) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1289 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1290 = "llvm.getelementptr"(%1288, %1289) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1290) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb141(%1291 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1292 : !llvm.ptr):
      %1293 = "mid.invariant"(%1292) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1294 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb142] : () -> ()
    ^bb143:
      %1295 = "llvm.mlir.constant"() <{"value" = 62 : i32}> : () -> i32
      "llvm.store"(%1295, %1294) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb144] : () -> ()
    ^bb142:
      %1296 = "llvm.getelementptr"(%1292) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1297 = "mid.checkflag"(%1296) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1298 = "llvm.load"(%1297) : (!hi.bool) -> i1
      "cf.cond_br"(%1298) [^bb143, ^bb143] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb144:
      %1299 = "llvm.extractvalue"(%1291) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1300 = "llvm.load"(%1294) : (!llvm.ptr) -> i32
      %1301 = "llvm.getelementptr"(%1299, %1300) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1302 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1303 = "llvm.getelementptr"(%1301, %1302) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1303) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb145(%1304 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1305 : !llvm.ptr):
      %1306 = "mid.invariant"(%1305) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1307 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb146] : () -> ()
    ^bb147:
      %1308 = "llvm.mlir.constant"() <{"value" = 63 : i32}> : () -> i32
      "llvm.store"(%1308, %1307) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb148] : () -> ()
    ^bb146:
      %1309 = "llvm.getelementptr"(%1305) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1310 = "mid.checkflag"(%1309) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1311 = "llvm.load"(%1310) : (!hi.bool) -> i1
      "cf.cond_br"(%1311) [^bb147, ^bb147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb148:
      %1312 = "llvm.extractvalue"(%1304) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1313 = "llvm.load"(%1307) : (!llvm.ptr) -> i32
      %1314 = "llvm.getelementptr"(%1312, %1313) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1315 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1316 = "llvm.getelementptr"(%1314, %1315) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1316) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb149(%1317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1318 : !llvm.ptr):
      %1319 = "mid.invariant"(%1318) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1320 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb150] : () -> ()
    ^bb150:
      %1321 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%1321, %1320) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb151] : () -> ()
    ^bb151:
      %1322 = "llvm.extractvalue"(%1317) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1323 = "llvm.load"(%1320) : (!llvm.ptr) -> i32
      %1324 = "llvm.getelementptr"(%1322, %1323) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1325 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1326 = "llvm.getelementptr"(%1324, %1325) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1326) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb152(%1327 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1328 : !llvm.ptr):
      %1329 = "mid.invariant"(%1328) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1330 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb153] : () -> ()
    ^bb154:
      %1331 = "llvm.mlir.constant"() <{"value" = 65 : i32}> : () -> i32
      "llvm.store"(%1331, %1330) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb155] : () -> ()
    ^bb153:
      %1332 = "llvm.getelementptr"(%1328) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1333 = "mid.checkflag"(%1332) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1334 = "llvm.load"(%1333) : (!hi.bool) -> i1
      "cf.cond_br"(%1334) [^bb154, ^bb154] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb155:
      %1335 = "llvm.extractvalue"(%1327) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1336 = "llvm.load"(%1330) : (!llvm.ptr) -> i32
      %1337 = "llvm.getelementptr"(%1335, %1336) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1338 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1339 = "llvm.getelementptr"(%1337, %1338) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1339) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb156(%1340 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1341 : !llvm.ptr):
      %1342 = "mid.invariant"(%1341) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1343 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb157] : () -> ()
    ^bb158:
      %1344 = "llvm.mlir.constant"() <{"value" = 66 : i32}> : () -> i32
      "llvm.store"(%1344, %1343) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb159] : () -> ()
    ^bb157:
      %1345 = "llvm.getelementptr"(%1341) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1346 = "mid.checkflag"(%1345) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1347 = "llvm.load"(%1346) : (!hi.bool) -> i1
      "cf.cond_br"(%1347) [^bb158, ^bb158] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb159:
      %1348 = "llvm.extractvalue"(%1340) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1349 = "llvm.load"(%1343) : (!llvm.ptr) -> i32
      %1350 = "llvm.getelementptr"(%1348, %1349) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1351 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1352 = "llvm.getelementptr"(%1350, %1351) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1352) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb160(%1353 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1354 : !llvm.ptr):
      %1355 = "mid.invariant"(%1354) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1356 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb161] : () -> ()
    ^bb162:
      %1357 = "llvm.mlir.constant"() <{"value" = 67 : i32}> : () -> i32
      "llvm.store"(%1357, %1356) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb163] : () -> ()
    ^bb161:
      %1358 = "llvm.getelementptr"(%1354) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1359 = "mid.checkflag"(%1358) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1360 = "llvm.load"(%1359) : (!hi.bool) -> i1
      "cf.cond_br"(%1360) [^bb162, ^bb162] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb163:
      %1361 = "llvm.extractvalue"(%1353) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1362 = "llvm.load"(%1356) : (!llvm.ptr) -> i32
      %1363 = "llvm.getelementptr"(%1361, %1362) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1364 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1365 = "llvm.getelementptr"(%1363, %1364) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1365) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb164(%1366 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1367 : !llvm.ptr):
      %1368 = "mid.invariant"(%1367) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1369 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb165] : () -> ()
    ^bb166:
      %1370 = "llvm.mlir.constant"() <{"value" = 68 : i32}> : () -> i32
      "llvm.store"(%1370, %1369) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb167] : () -> ()
    ^bb165:
      %1371 = "llvm.getelementptr"(%1367) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1372 = "mid.checkflag"(%1371) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1373 = "llvm.load"(%1372) : (!hi.bool) -> i1
      "cf.cond_br"(%1373) [^bb166, ^bb166] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb167:
      %1374 = "llvm.extractvalue"(%1366) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1375 = "llvm.load"(%1369) : (!llvm.ptr) -> i32
      %1376 = "llvm.getelementptr"(%1374, %1375) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1377 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1378 = "llvm.getelementptr"(%1376, %1377) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1378) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb168(%1379 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1380 : !llvm.ptr):
      %1381 = "mid.invariant"(%1380) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1382 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb169] : () -> ()
    ^bb170:
      %1383 = "llvm.mlir.constant"() <{"value" = 69 : i32}> : () -> i32
      "llvm.store"(%1383, %1382) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb171] : () -> ()
    ^bb169:
      %1384 = "llvm.getelementptr"(%1380) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1385 = "mid.checkflag"(%1384) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1386 = "llvm.load"(%1385) : (!hi.bool) -> i1
      "cf.cond_br"(%1386) [^bb170, ^bb170] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb171:
      %1387 = "llvm.extractvalue"(%1379) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1388 = "llvm.load"(%1382) : (!llvm.ptr) -> i32
      %1389 = "llvm.getelementptr"(%1387, %1388) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1390 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1391 = "llvm.getelementptr"(%1389, %1390) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1391) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb172(%1392 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1393 : !llvm.ptr):
      %1394 = "mid.invariant"(%1393) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1395 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb173] : () -> ()
    ^bb174:
      %1396 = "llvm.mlir.constant"() <{"value" = 70 : i32}> : () -> i32
      "llvm.store"(%1396, %1395) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb175] : () -> ()
    ^bb173:
      %1397 = "llvm.getelementptr"(%1393) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1398 = "mid.checkflag"(%1397) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1399 = "llvm.load"(%1398) : (!hi.bool) -> i1
      "cf.cond_br"(%1399) [^bb174, ^bb174] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb175:
      %1400 = "llvm.extractvalue"(%1392) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1401 = "llvm.load"(%1395) : (!llvm.ptr) -> i32
      %1402 = "llvm.getelementptr"(%1400, %1401) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<288 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1403 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1404 = "llvm.getelementptr"(%1402, %1403) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1404) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMap_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_CuckooMapIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "CuckooMapIterator_field_CuckooMapIterator_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "CuckooMapIterator_field_CuckooMapIterator_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "CuckooMapIterator_field_CuckooMapIterator_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMapIterator_getter_map_table1", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntryCuckooMapIterator.K_subtype_Any._CuckooMapIterator.V_subtype_Any_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMapIterator_setter_map_table1", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntryCuckooMapIterator.K_subtype_Any._CuckooMapIterator.V_subtype_Any_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMapIterator_field_map_table1", "getter_name" = "CuckooMapIterator_getter_map_table1", "setter_name" = "CuckooMapIterator_setter_map_table1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMapIterator_getter_map_table2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntryCuckooMapIterator.K_subtype_Any._CuckooMapIterator.V_subtype_Any_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMapIterator_setter_map_table2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntryCuckooMapIterator.K_subtype_Any._CuckooMapIterator.V_subtype_Any_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMapIterator_field_map_table2", "getter_name" = "CuckooMapIterator_getter_map_table2", "setter_name" = "CuckooMapIterator_setter_map_table2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMapIterator_getter_table_len", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 5 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMapIterator_setter_table_len", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 5 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMapIterator_field_table_len", "getter_name" = "CuckooMapIterator_getter_table_len", "setter_name" = "CuckooMapIterator_setter_table_len"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMapIterator_getter_index", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 6 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMapIterator_setter_index", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 6 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMapIterator_field_index", "getter_name" = "CuckooMapIterator_getter_index", "setter_name" = "CuckooMapIterator_setter_index"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CuckooMapIterator_getter_on_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 7 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CuckooMapIterator_setter_on_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i1], "offset" = 7 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CuckooMapIterator_field_on_second", "getter_name" = "CuckooMapIterator_getter_on_second", "setter_name" = "CuckooMapIterator_setter_on_second"} : () -> ()
    "mid.func"() ({
    ^bb176(%1405 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1407 : !llvm.ptr, %1408 : !llvm.struct<(!llvm.ptr)>, %1409 : !llvm.struct<(!llvm.ptr)>, %1410 : i32):
      %1411 = "mid.wrap"(%1405) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
      %1412 = "hi.cast"(%1411) {"from_typ" = !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "to_typ" = !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "from_typ_name" = "CuckooMapIterator", "to_typ_name" = "CuckooMapIterator"} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
      %1413 = "mid.wrap"(%1408) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1414 = "hi.cast"(%1413) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1415 = "hi.cast"(%1414) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      "mid.set_field"(%1412, %1415) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> ()
      %1416 = "mid.wrap"(%1409) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1417 = "hi.cast"(%1416) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1418 = "hi.cast"(%1417) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      "mid.set_field"(%1412, %1418) {"offset" = 4 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> ()
      %1419 = "mid.wrap"(%1410) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1420 = "hi.cast"(%1419) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1421 = "hi.cast"(%1420) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1412, %1421) {"offset" = 5 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1422 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1423 = "hi.cast"(%1422) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1412, %1423) {"offset" = 6 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1424 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %1425 = "hi.cast"(%1424) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1412, %1425) {"offset" = 7 : i64, "vtable_bytes" = 136 : i32, "original_type" = i1} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.bool) -> ()
    }) {"func_name" = "CuckooMapIterator_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb177(%1426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1427 : !llvm.ptr):
      %1428 = "mid.invariant"(%1427) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1429 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb178] : () -> ()
    ^bb179:
      %1430 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%1430, %1429) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb180] : () -> ()
    ^bb181:
      %1431 = "llvm.getelementptr"(%1427) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1432 = "mid.checkflag"(%1431) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1433 = "llvm.load"(%1432) : (!hi.bool) -> i1
      "cf.cond_br"(%1433) [^bb179, ^bb179] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb182:
      %1434 = "llvm.getelementptr"(%1427) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1435 = "mid.checkflag"(%1434) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %1436 = "llvm.load"(%1435) : (!hi.bool) -> i1
      "cf.cond_br"(%1436) [^bb181, ^bb181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb178:
      %1437 = "llvm.getelementptr"(%1427) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1438 = "mid.checkflag"(%1437) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %1439 = "llvm.load"(%1438) : (!hi.bool) -> i1
      "cf.cond_br"(%1439) [^bb182, ^bb182] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb180:
      %1440 = "llvm.extractvalue"(%1426) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1441 = "llvm.load"(%1429) : (!llvm.ptr) -> i32
      %1442 = "llvm.getelementptr"(%1440, %1441) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1443 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1444 = "llvm.getelementptr"(%1442, %1443) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1444) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb183(%1445 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1446 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1447 : !llvm.ptr, %1448 : !llvm.struct<(!llvm.ptr)>):
      %1449 = "mid.wrap"(%1445) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
      %1450 = "hi.cast"(%1449) {"from_typ" = !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "to_typ" = !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "from_typ_name" = "CuckooMapIterator", "to_typ_name" = "CuckooMapIterator"} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
      %1451 = "mid.wrap"(%1448) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1452 = "hi.cast"(%1451) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      "mid.while"() ({
        %1453 = "mid.get_field"(%1450) {"offset" = 6 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1454 = "mid.get_field"(%1450) {"offset" = 5 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1455 = "mid.unwrap"(%1453) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1456 = "mid.unwrap"(%1454) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1457 = "mid.comparison"(%1455, %1456) {"op" = "LT"} : (i32, i32) -> i1
        %1458 = "mid.wrap"(%1457) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1459 = "mid.unwrap"(%1458) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %1460 = "mid.get_field"(%1450) {"offset" = 6 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1461 = "hi.cast"(%1460) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1462 = "mid.buffer_get"(%1452, %1461) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
        %1463 = "mid.get_field"(%1450) {"offset" = 6 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1464 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1465 = "mid.unwrap"(%1463) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1466 = "mid.unwrap"(%1464) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1467 = "mid.arithmetic"(%1465, %1466) {"op" = "ADD"} : (i32, i32) -> i32
        %1468 = "mid.wrap"(%1467) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1469 = "hi.cast"(%1468) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.set_field"(%1450, %1469) {"offset" = 6 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        %1470 = "mid.checkflag"(%1462) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1471 = "mid.unwrap"(%1470) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %1472 = "hi.cast"(%1462) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
        "mid.if"(%1471) ({
          %1473 = "hi.cast"(%1472) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
          %1474 = "mid.unwrap"(%1473) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1475 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %1476 = "mid.method_call"(%1475, %1474) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
          %1477 = "hi.cast"(%1476) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
          %1478 = "hi.cast"(%1477) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
          "mid.return"(%1478) : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> ()
          %1479 = "hi.cast"(%1473) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "to_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
          "mid.assign"(%1472, %1479) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
      }) : () -> ()
      %1480 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1481 = "hi.cast"(%1480) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
      "mid.return"(%1481) : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> ()
    }) {"func_name" = "CuckooMapIterator_next_from_table_tableBufferEntryK._V_or_Nil", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb184(%1482 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1483 : !llvm.ptr):
      %1484 = "mid.invariant"(%1483) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1485 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb185] : () -> ()
    ^bb186:
      %1486 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%1486, %1485) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb187] : () -> ()
    ^bb185:
      %1487 = "llvm.getelementptr"(%1483) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1488 = "mid.checkflag"(%1487) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %1489 = "llvm.load"(%1488) : (!hi.bool) -> i1
      "cf.cond_br"(%1489) [^bb186, ^bb186] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb187:
      %1490 = "llvm.extractvalue"(%1482) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1491 = "llvm.load"(%1485) : (!llvm.ptr) -> i32
      %1492 = "llvm.getelementptr"(%1490, %1491) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1493 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1494 = "llvm.getelementptr"(%1492, %1493) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1494) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMapIterator_B_next_from_table_tableBufferEntryK._V_or_Nil", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb188(%1495 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1496 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1497 : !llvm.ptr):
      %1498 = "mid.wrap"(%1495) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
      %1499 = "hi.cast"(%1498) {"from_typ" = !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "to_typ" = !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "from_typ_name" = "CuckooMapIterator", "to_typ_name" = "CuckooMapIterator"} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
      %1500 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %1501 = "mid.get_field"(%1499) {"offset" = 7 : i64, "vtable_bytes" = 136 : i32, "original_type" = i1} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.bool
      %1502 = "mid.unwrap"(%1500) : (!hi.bool) -> i1
      %1503 = "mid.unwrap"(%1501) : (!hi.bool) -> i1
      %1504 = "mid.comparison"(%1502, %1503) {"op" = "EQ"} : (i1, i1) -> i1
      %1505 = "mid.wrap"(%1504) : (i1) -> !hi.bool
      %1506 = "mid.unwrap"(%1505) : (!hi.bool) -> i1
      "mid.if"(%1506) ({
        %1507 = "mid.get_field"(%1499) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
        %1508 = "hi.cast"(%1507) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
        %1509 = "mid.unwrap"(%1508) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
        %1510 = "mid.unwrap"(%1499) : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1511 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMapIterator.K_subtype_Any._CuckooMapIterator.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
        %1512 = "mid.parameterizations_array"(%1511) : (!llvm.ptr) -> !llvm.ptr
        %1513 = "mid.method_call"(%1512, %1510, %1509) {"offset" = 9 : i32, "vptrs" = ["buffer_typ"], "vtable_size" = 17 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
        %1514 = "hi.cast"(%1513) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
        %1515 = "mid.checkflag"(%1514) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1516 = "mid.unwrap"(%1515) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %1517 = "hi.cast"(%1514) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
        "mid.if"(%1516) ({
          %1518 = "hi.cast"(%1517) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Pair"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>
          %1519 = "hi.cast"(%1518) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
          "mid.return"(%1519) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
          %1520 = "hi.cast"(%1518) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
          "mid.assign"(%1517, %1520) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1521 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1522 = "hi.cast"(%1521) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.set_field"(%1499, %1522) {"offset" = 6 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        %1523 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %1524 = "hi.cast"(%1523) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.set_field"(%1499, %1524) {"offset" = 7 : i64, "vtable_bytes" = 136 : i32, "original_type" = i1} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.bool) -> ()
      }) : (i1) -> ()
      %1525 = "mid.get_field"(%1499) {"offset" = 4 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1526 = "hi.cast"(%1525) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>
      %1527 = "mid.unwrap"(%1526) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %1528 = "mid.unwrap"(%1499) : (!hi.fatptr<"CuckooMapIterator", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1529 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferEntryCuckooMapIterator.K_subtype_Any._CuckooMapIterator.V_subtype_Any_or_Nil"]} : () -> !llvm.ptr
      %1530 = "mid.parameterizations_array"(%1529) : (!llvm.ptr) -> !llvm.ptr
      %1531 = "mid.method_call"(%1530, %1528, %1527) {"offset" = 9 : i32, "vptrs" = ["buffer_typ"], "vtable_size" = 17 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
      %1532 = "hi.cast"(%1531) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>
      %1533 = "hi.cast"(%1532) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "CuckooMapIterator">, !hi.type_param<"V", !hi.any, "CuckooMapIterator">]>, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%1533) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "CuckooMapIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb189(%1534 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1535 : !llvm.ptr):
      %1536 = "mid.invariant"(%1535) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1537 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb190] : () -> ()
    ^bb190:
      %1538 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%1538, %1537) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb191] : () -> ()
    ^bb191:
      %1539 = "llvm.extractvalue"(%1534) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1540 = "llvm.load"(%1537) : (!llvm.ptr) -> i32
      %1541 = "llvm.getelementptr"(%1539, %1540) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1542 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1543 = "llvm.getelementptr"(%1541, %1542) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1543) : (!llvm.ptr) -> ()
    }) {"func_name" = "CuckooMapIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "hash_benchmark"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "KeyNotFound", "vtbl_size" = 34 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Map", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "HashMap", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Entry", "vtbl_size" = 15 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "CuckooMap", "vtbl_size" = 288 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "CuckooMapIterator", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Math", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range", "vtbl_size" = 59 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Blocking", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Channel", "vtbl_size" = 8 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Array", "vtbl_size" = 149 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ArrayIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystemError", "vtbl_size" = 34 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "File", "vtbl_size" = 20 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileProcessor", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileReader", "vtbl_size" = 8 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileWriter", "vtbl_size" = 9 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystem", "vtbl_size" = 7 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "PRNG", "methods" = [@PRNG_field_seed, @PRNG_B_init_initial_seedi32, @PRNG_B_next_, @PRNG_init_initial_seedi32, @PRNG_next_], "hash_tbl" = [@Object, @any_typ, @PRNG, 18446744073709551615 : i64], "offset_tbl" = [15 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14044805710827322405 : i64, "base_typ" = !llvm.struct<(i32)>, "data_size_fn" = "_data_size_PRNG", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "i32_hasher", "function_type" = !llvm.func<i32 (i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "i32_eq", "function_type" = !llvm.func<i1 (i32, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "string_hasher", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "string_eq", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "clock", "function_type" = !llvm.func<i64 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_PRNG", "types" = [i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "PRNG_getter_seed", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "PRNG_setter_seed", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "PRNG_field_seed", "getter_name" = "PRNG_getter_seed", "setter_name" = "PRNG_setter_seed"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : i32):
      %4 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"PRNG">
      %5 = "hi.cast"(%4) {"from_typ" = !hi.fatptr<"PRNG">, "to_typ" = !hi.fatptr<"PRNG">, "from_typ_name" = "PRNG", "to_typ_name" = "PRNG"} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %6 = "mid.wrap"(%3) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %7 = "hi.cast"(%6) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %8 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %9 = "mid.unwrap"(%7) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %10 = "mid.unwrap"(%8) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %11 = "mid.comparison"(%9, %10) {"op" = "LE"} : (i32, i32) -> i1
      %12 = "mid.wrap"(%11) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %13 = "mid.unwrap"(%12) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%13) ({
        %14 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %15 = "hi.cast"(%14) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.set_field"(%5, %15) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %16 = "mid.literal"() {"value" = 2147483647 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %17 = "mid.unwrap"(%7) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %18 = "mid.unwrap"(%16) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %19 = "mid.arithmetic"(%17, %18) {"op" = "bit_and"} : (i32, i32) -> i32
      %20 = "mid.wrap"(%19) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %21 = "hi.cast"(%20) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%5, %21) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "PRNG_init_initial_seedi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%22 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %23 : !llvm.ptr):
      %24 = "mid.invariant"(%23) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %25 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %26 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%26, %25) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %27 = "llvm.getelementptr"(%23) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %28 = "mid.checkflag"(%27) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %29 = "llvm.load"(%28) : (!hi.bool) -> i1
      "cf.cond_br"(%29) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %30 = "llvm.extractvalue"(%22) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %31 = "llvm.load"(%25) : (!llvm.ptr) -> i32
      %32 = "llvm.getelementptr"(%30, %31) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %33 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %34 = "llvm.getelementptr"(%32, %33) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%34) : (!llvm.ptr) -> ()
    }) {"func_name" = "PRNG_B_init_initial_seedi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%35 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %36 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %37 : !llvm.ptr):
      %38 = "mid.wrap"(%35) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"PRNG">
      %39 = "hi.cast"(%38) {"from_typ" = !hi.fatptr<"PRNG">, "to_typ" = !hi.fatptr<"PRNG">, "from_typ_name" = "PRNG", "to_typ_name" = "PRNG"} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %40 = "mid.literal"() {"value" = 1103515245 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %41 = "mid.literal"() {"value" = 12345 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %42 = "mid.get_field"(%39) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %43 = "mid.unwrap"(%42) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %44 = "mid.unwrap"(%40) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %45 = "mid.arithmetic"(%43, %44) {"op" = "MUL"} : (i32, i32) -> i32
      %46 = "mid.wrap"(%45) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %47 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %48 = "mid.unwrap"(%41) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %49 = "mid.arithmetic"(%47, %48) {"op" = "ADD"} : (i32, i32) -> i32
      %50 = "mid.wrap"(%49) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %51 = "mid.literal"() {"value" = 2147483647 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %52 = "mid.unwrap"(%50) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %53 = "mid.unwrap"(%51) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %54 = "mid.arithmetic"(%52, %53) {"op" = "bit_and"} : (i32, i32) -> i32
      %55 = "mid.wrap"(%54) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %56 = "hi.cast"(%55) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%39, %56) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %57 = "mid.get_field"(%39) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %58 = "hi.cast"(%57) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%58) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "PRNG_next_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%59 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %60 : !llvm.ptr):
      %61 = "mid.invariant"(%60) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %62 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %63 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%63, %62) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb8] : () -> ()
    ^bb8:
      %64 = "llvm.extractvalue"(%59) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %65 = "llvm.load"(%62) : (!llvm.ptr) -> i32
      %66 = "llvm.getelementptr"(%64, %65) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %67 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %68 = "llvm.getelementptr"(%66, %67) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%68) : (!llvm.ptr) -> ()
    }) {"func_name" = "PRNG_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb9(%69 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %70 : i32, %71 : i64):
      %72 = "mid.wrap"(%69) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %73 = "hi.cast"(%72) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %74 = "mid.wrap"(%70) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %75 = "hi.cast"(%74) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %76 = "mid.wrap"(%71) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %77 = "hi.cast"(%76) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %78 = "hi.cast"(%73) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %79 = "mid.unwrap"(%78) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %80 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %81 = "mid.parameterizations_array"(%80) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%81, %79) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %82 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %83 = "hi.cast"(%82) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %84 = "mid.create_buffer"(%83) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %85 = "mid.refer"(%84) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %86 = "mid.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "  Operations: "} : () -> !llvm.ptr
      %87 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%85, %87, %86) {"typ" = !llvm.array<14 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %88 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %89 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %90 = "mid.unwrap"(%85) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %91 = "mid.unwrap"(%88) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %92 = "mid.unwrap"(%89) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %93 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %94 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %95 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %96 = "hi.cast"(%85) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %97 = "mid.unwrap"(%96) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %98 = "hi.cast"(%94) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %99 = "mid.unwrap"(%98) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %100 = "hi.cast"(%95) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %101 = "mid.unwrap"(%100) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %102 = "mid.unwrap"(%93) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %103 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %104 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %105 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %106 = "mid.parameterizations_array"(%103, %104, %105) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%106, %102, %97, %99, %101) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %107 = "hi.cast"(%93) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %108 = "mid.unwrap"(%107) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %109 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %110 = "mid.parameterizations_array"(%109) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%110, %108) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %111 = "hi.cast"(%75) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %112 = "mid.unwrap"(%111) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %113 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %114 = "mid.parameterizations_array"(%113) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%114, %112) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %115 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %116 = "hi.cast"(%115) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %117 = "mid.create_buffer"(%116) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %118 = "mid.refer"(%117) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %119 = "mid.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "  Total Time: "} : () -> !llvm.ptr
      %120 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%118, %120, %119) {"typ" = !llvm.array<14 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %121 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %122 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %123 = "mid.unwrap"(%118) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %124 = "mid.unwrap"(%121) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %125 = "mid.unwrap"(%122) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %126 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %127 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %128 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %129 = "hi.cast"(%118) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %130 = "mid.unwrap"(%129) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %131 = "hi.cast"(%127) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %132 = "mid.unwrap"(%131) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %133 = "hi.cast"(%128) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %134 = "mid.unwrap"(%133) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %135 = "mid.unwrap"(%126) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %136 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %137 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %138 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %139 = "mid.parameterizations_array"(%136, %137, %138) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%139, %135, %130, %132, %134) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %140 = "hi.cast"(%126) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %141 = "mid.unwrap"(%140) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %142 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %143 = "mid.parameterizations_array"(%142) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%143, %141) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %144 = "hi.cast"(%77) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i64_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %145 = "mid.unwrap"(%144) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %146 = "mid.parameterization"() {"id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["i64"]} : () -> !llvm.ptr
      %147 = "mid.parameterizations_array"(%146) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%147, %145) {"offset" = 0 : i32, "vptrs" = ["i64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %148 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %149 = "hi.cast"(%148) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %150 = "mid.create_buffer"(%149) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %151 = "mid.refer"(%150) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %152 = "mid.literal"() {"typ" = !llvm.array<3 x i8>, "value" = " ms"} : () -> !llvm.ptr
      %153 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%151, %153, %152) {"typ" = !llvm.array<3 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %154 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %155 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %156 = "mid.unwrap"(%151) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %157 = "mid.unwrap"(%154) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %158 = "mid.unwrap"(%155) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %159 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %160 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %161 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %162 = "hi.cast"(%151) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %163 = "mid.unwrap"(%162) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %164 = "hi.cast"(%160) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %165 = "mid.unwrap"(%164) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %166 = "hi.cast"(%161) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %167 = "mid.unwrap"(%166) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %168 = "mid.unwrap"(%159) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %169 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %170 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %171 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %172 = "mid.parameterizations_array"(%169, %170, %171) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%172, %168, %163, %165, %167) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %173 = "hi.cast"(%159) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %174 = "mid.unwrap"(%173) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %175 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %176 = "mid.parameterizations_array"(%175) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%176, %174) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %177 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %178 = "mid.unwrap"(%75) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %179 = "mid.unwrap"(%177) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %180 = "mid.comparison"(%178, %179) {"op" = "GT"} : (i32, i32) -> i1
      %181 = "mid.wrap"(%180) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %182 = "mid.unwrap"(%181) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%182) ({
        %183 = "mid.literal"() {"value" = 1000000 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %184 = "mid.unwrap"(%77) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
        %185 = "mid.unwrap"(%183) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
        %186 = "mid.arithmetic"(%184, %185) {"op" = "MUL"} : (i64, i64) -> i64
        %187 = "mid.wrap"(%186) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %188 = "hi.cast"(%75) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %189 = "mid.unwrap"(%187) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
        %190 = "mid.unwrap"(%188) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
        %191 = "mid.arithmetic"(%189, %190) {"op" = "DIV"} : (i64, i64) -> i64
        %192 = "mid.wrap"(%191) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %193 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %194 = "hi.cast"(%193) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %195 = "mid.create_buffer"(%194) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %196 = "mid.refer"(%195) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %197 = "mid.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "  Time/Op:    ~"} : () -> !llvm.ptr
        %198 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%196, %198, %197) {"typ" = !llvm.array<15 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %199 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %200 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %201 = "mid.unwrap"(%196) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %202 = "mid.unwrap"(%199) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %203 = "mid.unwrap"(%200) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %204 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %205 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %206 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %207 = "hi.cast"(%196) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %208 = "mid.unwrap"(%207) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %209 = "hi.cast"(%205) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %210 = "mid.unwrap"(%209) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %211 = "hi.cast"(%206) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %212 = "mid.unwrap"(%211) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %213 = "mid.unwrap"(%204) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %214 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %215 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %216 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %217 = "mid.parameterizations_array"(%214, %215, %216) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%217, %213, %208, %210, %212) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %218 = "hi.cast"(%204) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %219 = "mid.unwrap"(%218) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %220 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %221 = "mid.parameterizations_array"(%220) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%221, %219) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %222 = "hi.cast"(%192) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i64_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %223 = "mid.unwrap"(%222) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %224 = "mid.parameterization"() {"id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["i64"]} : () -> !llvm.ptr
        %225 = "mid.parameterizations_array"(%224) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%225, %223) {"offset" = 0 : i32, "vptrs" = ["i64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %226 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %227 = "hi.cast"(%226) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %228 = "mid.create_buffer"(%227) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %229 = "mid.refer"(%228) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %230 = "mid.literal"() {"typ" = !llvm.array<3 x i8>, "value" = " ns"} : () -> !llvm.ptr
        %231 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%229, %231, %230) {"typ" = !llvm.array<3 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %232 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %233 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %234 = "mid.unwrap"(%229) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %235 = "mid.unwrap"(%232) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %236 = "mid.unwrap"(%233) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %237 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %238 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %239 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %240 = "hi.cast"(%229) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %241 = "mid.unwrap"(%240) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %242 = "hi.cast"(%238) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %243 = "mid.unwrap"(%242) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %244 = "hi.cast"(%239) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %245 = "mid.unwrap"(%244) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %246 = "mid.unwrap"(%237) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %247 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %248 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %249 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %250 = "mid.parameterizations_array"(%247, %248, %249) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%250, %246, %241, %243, %245) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %251 = "hi.cast"(%237) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %252 = "mid.unwrap"(%251) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %253 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %254 = "mid.parameterizations_array"(%253) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%254, %252) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "print_benchmark_result", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb10(%255 : i32):
      %256 = "mid.wrap"(%255) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %257 = "hi.cast"(%256) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %258 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %259 = "mid.wrap"(%258) : (!llvm.ptr) -> !llvm.ptr
      %260 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %261 = "mid.wrap"(%260) : (!llvm.ptr) -> !llvm.ptr
      %262 = "mid.unwrap"(%259) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %263 = "mid.unwrap"(%261) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %264 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %265 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %266 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %267 = "mid.new"(%264, %265, %266) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %268 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %269 = "mid.wrap"(%268) : (!llvm.ptr) -> !llvm.ptr
      %270 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %271 = "mid.wrap"(%270) : (!llvm.ptr) -> !llvm.ptr
      %272 = "hi.cast"(%269) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %273 = "mid.unwrap"(%272) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %274 = "hi.cast"(%271) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %275 = "mid.unwrap"(%274) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %276 = "mid.unwrap"(%267) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %277 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %278 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %279 = "mid.parameterizations_array"(%277, %278) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%279, %276, %273, %275) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %280 = "mid.refer"(%267) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %281 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %282 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %283 = "mid.unwrap"(%282) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %284 = "mid.unwrap"(%257) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %285 = "mid.comparison"(%283, %284) {"op" = "LT"} : (i32, i32) -> i1
        %286 = "mid.wrap"(%285) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %287 = "mid.unwrap"(%286) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %288 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %289 = "mid.unwrap"(%282) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %290 = "mid.unwrap"(%288) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %291 = "mid.arithmetic"(%289, %290) {"op" = "ADD"} : (i32, i32) -> i32
        %292 = "mid.wrap"(%291) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %293 = "hi.cast"(%282) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %294 = "mid.unwrap"(%293) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %295 = "hi.cast"(%292) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
        %296 = "mid.unwrap"(%295) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %297 = "mid.unwrap"(%280) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %298 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %299 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %300 = "mid.parameterizations_array"(%298, %299) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%300, %297, %294, %296) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %301 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %302 = "mid.unwrap"(%282) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %303 = "mid.unwrap"(%301) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %304 = "mid.arithmetic"(%302, %303) {"op" = "ADD"} : (i32, i32) -> i32
        %305 = "mid.wrap"(%304) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %306 = "hi.cast"(%305) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%282, %306) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %307 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %308 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %309 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %310 = "mid.unwrap"(%257) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %311 = "mid.unwrap"(%309) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %312 = "mid.comparison"(%310, %311) {"op" = "GT"} : (i32, i32) -> i1
      %313 = "mid.wrap"(%312) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %314 = "mid.unwrap"(%313) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%314) ({
        %315 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %316 = "mid.unwrap"(%257) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %317 = "mid.unwrap"(%315) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %318 = "mid.arithmetic"(%316, %317) {"op" = "SUB"} : (i32, i32) -> i32
        %319 = "mid.wrap"(%318) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %320 = "hi.cast"(%319) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %321 = "mid.unwrap"(%320) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %322 = "mid.unwrap"(%280) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %323 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %324 = "mid.parameterizations_array"(%323) : (!llvm.ptr) -> !llvm.ptr
        %325 = "mid.method_call"(%324, %322, %321) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %326 = "hi.cast"(%325) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        %327 = "mid.checkflag"(%326) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %328 = "mid.unwrap"(%327) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %329 = "hi.cast"(%326) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.if"(%328) ({
          %330 = "hi.cast"(%329) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.nil
          %331 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %332 = "hi.cast"(%331) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%308, %332) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %333 = "hi.cast"(%330) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%329, %333) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %334 = "mid.checkflag"(%329) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %335 = "mid.unwrap"(%334) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %336 = "hi.cast"(%329) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.if"(%335) ({
          %337 = "hi.cast"(%336) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %338 = "mid.unwrap"(%337) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %339 = "mid.unwrap"(%257) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %340 = "mid.comparison"(%338, %339) {"op" = "NEQ"} : (i32, i32) -> i1
          %341 = "mid.wrap"(%340) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %342 = "mid.unwrap"(%341) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
          "mid.if"(%342) ({
            %343 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %344 = "hi.cast"(%343) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%308, %344) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          }) : (i1) -> ()
          %345 = "hi.cast"(%337) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%336, %345) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }, {
          %346 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %347 = "mid.checkflag"(%336) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
          %348 = "mid.unwrap"(%346) : (!hi.bool) -> i1
          %349 = "mid.unwrap"(%347) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
          %350 = "mid.comparison"(%348, %349) {"op" = "EQ"} : (i1, i1) -> i1
          %351 = "mid.wrap"(%350) : (i1) -> !hi.bool
          %352 = "mid.unwrap"(%351) : (!hi.bool) -> i1
          "mid.if"(%352) ({
            %353 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %354 = "hi.cast"(%353) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%308, %354) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          }) : (i1) -> ()
          %355 = "hi.cast"(%336) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%336, %355) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %356 = "mid.unwrap"(%280) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %357 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %358 = "mid.method_call"(%357, %356) {"offset" = 22 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %359 = "hi.cast"(%358) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %360 = "mid.unwrap"(%359) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %361 = "mid.unwrap"(%257) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %362 = "mid.comparison"(%360, %361) {"op" = "NEQ"} : (i32, i32) -> i1
        %363 = "mid.wrap"(%362) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %364 = "mid.unwrap"(%363) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%364) ({
          %365 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %366 = "hi.cast"(%365) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%308, %366) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }, {
        %367 = "mid.unwrap"(%280) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %368 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %369 = "mid.method_call"(%368, %367) {"offset" = 22 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %370 = "hi.cast"(%369) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %371 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %372 = "mid.unwrap"(%370) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %373 = "mid.unwrap"(%371) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %374 = "mid.comparison"(%372, %373) {"op" = "NEQ"} : (i32, i32) -> i1
        %375 = "mid.wrap"(%374) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %376 = "mid.unwrap"(%375) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%376) ({
          %377 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %378 = "hi.cast"(%377) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%308, %378) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }) : (i1) -> ()
      %379 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %380 = "hi.cast"(%379) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %381 = "mid.create_buffer"(%380) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %382 = "mid.refer"(%381) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %383 = "mid.literal"() {"typ" = !llvm.array<17 x i8>, "value" = "Insert Sequential"} : () -> !llvm.ptr
      %384 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%382, %384, %383) {"typ" = !llvm.array<17 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %385 = "mid.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %386 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %387 = "mid.unwrap"(%382) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %388 = "mid.unwrap"(%385) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %389 = "mid.unwrap"(%386) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %390 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %391 = "mid.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %392 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %393 = "hi.cast"(%382) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %394 = "mid.unwrap"(%393) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %395 = "hi.cast"(%391) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %396 = "mid.unwrap"(%395) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %397 = "hi.cast"(%392) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %398 = "mid.unwrap"(%397) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %399 = "mid.unwrap"(%390) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %400 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %401 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %402 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %403 = "mid.parameterizations_array"(%400, %401, %402) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%403, %399, %394, %396, %398) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %404 = "mid.unwrap"(%307) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %405 = "mid.unwrap"(%281) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %406 = "mid.arithmetic"(%404, %405) {"op" = "SUB"} : (i64, i64) -> i64
      %407 = "mid.wrap"(%406) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %408 = "mid.unwrap"(%390) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %409 = "mid.unwrap"(%257) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %410 = "mid.unwrap"(%407) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      "mid.call"(%408, %409, %410) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %411 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %412 = "hi.cast"(%411) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %413 = "mid.create_buffer"(%412) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %414 = "mid.refer"(%413) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %415 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %416 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%414, %416, %415) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %417 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %418 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %419 = "mid.unwrap"(%414) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %420 = "mid.unwrap"(%417) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %421 = "mid.unwrap"(%418) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %422 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %423 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %424 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %425 = "hi.cast"(%414) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %426 = "mid.unwrap"(%425) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %427 = "hi.cast"(%423) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %428 = "mid.unwrap"(%427) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %429 = "hi.cast"(%424) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %430 = "mid.unwrap"(%429) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %431 = "mid.unwrap"(%422) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %432 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %433 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %434 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %435 = "mid.parameterizations_array"(%432, %433, %434) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%435, %431, %426, %428, %430) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %436 = "hi.cast"(%422) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %437 = "mid.unwrap"(%436) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %438 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %439 = "mid.parameterizations_array"(%438) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%439, %437) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %440 = "mid.unwrap"(%308) : (!hi.bool) -> i1
      "mid.if"(%440) ({
        %441 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %442 = "hi.cast"(%441) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %443 = "mid.create_buffer"(%442) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %444 = "mid.refer"(%443) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %445 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %446 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%444, %446, %445) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %447 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %448 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %449 = "mid.unwrap"(%444) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %450 = "mid.unwrap"(%447) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %451 = "mid.unwrap"(%448) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %452 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %453 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %454 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %455 = "hi.cast"(%444) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %456 = "mid.unwrap"(%455) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %457 = "hi.cast"(%453) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %458 = "mid.unwrap"(%457) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %459 = "hi.cast"(%454) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %460 = "mid.unwrap"(%459) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %461 = "mid.unwrap"(%452) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %462 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %463 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %464 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %465 = "mid.parameterizations_array"(%462, %463, %464) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%465, %461, %456, %458, %460) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %466 = "hi.cast"(%452) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %467 = "mid.unwrap"(%466) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %468 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %469 = "mid.parameterizations_array"(%468) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%469, %467) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %470 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %471 = "hi.cast"(%470) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %472 = "mid.create_buffer"(%471) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %473 = "mid.refer"(%472) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %474 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %475 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%473, %475, %474) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %476 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %477 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %478 = "mid.unwrap"(%473) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %479 = "mid.unwrap"(%476) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %480 = "mid.unwrap"(%477) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %481 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %482 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %483 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %484 = "hi.cast"(%473) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %485 = "mid.unwrap"(%484) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %486 = "hi.cast"(%482) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %487 = "mid.unwrap"(%486) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %488 = "hi.cast"(%483) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %489 = "mid.unwrap"(%488) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %490 = "mid.unwrap"(%481) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %491 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %492 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %493 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %494 = "mid.parameterizations_array"(%491, %492, %493) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%494, %490, %485, %487, %489) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %495 = "hi.cast"(%481) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %496 = "mid.unwrap"(%495) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %497 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %498 = "mid.parameterizations_array"(%497) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%498, %496) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "benchmark_insert_sequential", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb11(%499 : i32):
      %500 = "mid.wrap"(%499) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %501 = "hi.cast"(%500) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %502 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %503 = "mid.wrap"(%502) : (!llvm.ptr) -> !llvm.ptr
      %504 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %505 = "mid.wrap"(%504) : (!llvm.ptr) -> !llvm.ptr
      %506 = "mid.unwrap"(%503) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %507 = "mid.unwrap"(%505) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %508 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %509 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %510 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %511 = "mid.new"(%508, %509, %510) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %512 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %513 = "mid.wrap"(%512) : (!llvm.ptr) -> !llvm.ptr
      %514 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %515 = "mid.wrap"(%514) : (!llvm.ptr) -> !llvm.ptr
      %516 = "hi.cast"(%513) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %517 = "mid.unwrap"(%516) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %518 = "hi.cast"(%515) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %519 = "mid.unwrap"(%518) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %520 = "mid.unwrap"(%511) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %521 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %522 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %523 = "mid.parameterizations_array"(%521, %522) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%523, %520, %517, %519) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %524 = "mid.refer"(%511) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %525 = "mid.literal"() {"value" = 123 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %526 = "mid.unwrap"(%525) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %527 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %528 = "mid.literal"() {"value" = 123 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %529 = "hi.cast"(%528) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %530 = "mid.unwrap"(%529) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %531 = "mid.unwrap"(%527) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %532 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %533 = "mid.parameterizations_array"(%532) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%533, %531, %530) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %534 = "mid.refer"(%527) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %535 = "mid.unwrap"(%501) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %536 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %537 = "mid.new"(%536) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %538 = "hi.cast"(%501) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %539 = "mid.unwrap"(%538) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %540 = "mid.unwrap"(%537) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %541 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %542 = "mid.parameterizations_array"(%541) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%542, %540, %539) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %543 = "mid.refer"(%537) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %544 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %545 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %546 = "mid.wrap"(%545) : (!llvm.ptr) -> !llvm.ptr
      %547 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %548 = "mid.wrap"(%547) : (!llvm.ptr) -> !llvm.ptr
      %549 = "mid.unwrap"(%546) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %550 = "mid.unwrap"(%548) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %551 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %552 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
      %553 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["bool_typ"]], "name_hierarchy" = ["Pairi32._Bool", ["i32"], ["Bool"]]} : () -> !llvm.ptr
      %554 = "mid.new"(%551, %552, %553) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>
      %555 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %556 = "mid.wrap"(%555) : (!llvm.ptr) -> !llvm.ptr
      %557 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %558 = "mid.wrap"(%557) : (!llvm.ptr) -> !llvm.ptr
      %559 = "hi.cast"(%556) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %560 = "mid.unwrap"(%559) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %561 = "hi.cast"(%558) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %562 = "mid.unwrap"(%561) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %563 = "mid.unwrap"(%554) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %564 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %565 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %566 = "mid.parameterizations_array"(%564, %565) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%566, %563, %560, %562) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %567 = "mid.refer"(%554) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>
      %568 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %569 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %570 = "mid.unwrap"(%568) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %571 = "mid.unwrap"(%501) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %572 = "mid.comparison"(%570, %571) {"op" = "LT"} : (i32, i32) -> i1
        %573 = "mid.wrap"(%572) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %574 = "mid.unwrap"(%573) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %575 = "mid.unwrap"(%534) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %576 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %577 = "mid.method_call"(%576, %575) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %578 = "hi.cast"(%577) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %579 = "hi.cast"(%568) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %580 = "mid.unwrap"(%579) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %581 = "hi.cast"(%578) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"T", !hi.any, "Array">
        %582 = "mid.unwrap"(%581) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
        %583 = "mid.unwrap"(%543) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %584 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %585 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %586 = "mid.parameterizations_array"(%584, %585) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%586, %583, %580, %582) {"offset" = 17 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %587 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %588 = "mid.unwrap"(%501) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %589 = "mid.unwrap"(%587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %590 = "mid.arithmetic"(%588, %589) {"op" = "SUB"} : (i32, i32) -> i32
        %591 = "mid.wrap"(%590) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %592 = "mid.unwrap"(%568) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %593 = "mid.unwrap"(%591) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %594 = "mid.comparison"(%592, %593) {"op" = "EQ"} : (i32, i32) -> i1
        %595 = "mid.wrap"(%594) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %596 = "mid.unwrap"(%595) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%596) ({
          %597 = "hi.cast"(%578) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.assign"(%569, %597) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        }) : (i1) -> ()
        %598 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %599 = "hi.cast"(%578) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %600 = "mid.unwrap"(%599) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %601 = "hi.cast"(%598) {"from_typ" = !hi.bool, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "bool_typ", "to_typ_name" = "any_typ"} : (!hi.bool) -> !hi.type_param<"V", !hi.any, "CuckooMap">
        %602 = "mid.unwrap"(%601) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %603 = "mid.unwrap"(%567) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %604 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %605 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
        %606 = "mid.parameterizations_array"(%604, %605) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%606, %603, %600, %602) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "bool_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %607 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %608 = "mid.unwrap"(%568) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %609 = "mid.unwrap"(%607) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %610 = "mid.arithmetic"(%608, %609) {"op" = "ADD"} : (i32, i32) -> i32
        %611 = "mid.wrap"(%610) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %612 = "hi.cast"(%611) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%568, %612) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %613 = "mid.unwrap"(%567) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %614 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %615 = "mid.method_call"(%614, %613) {"offset" = 22 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %616 = "hi.cast"(%615) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %617 = "hi.cast"(%616) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%544, %617) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %618 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %619 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %620 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %621 = "hi.cast"(%620) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%568, %621) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      "mid.while"() ({
        %622 = "mid.unwrap"(%568) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %623 = "mid.unwrap"(%501) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %624 = "mid.comparison"(%622, %623) {"op" = "LT"} : (i32, i32) -> i1
        %625 = "mid.wrap"(%624) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %626 = "mid.unwrap"(%625) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %627 = "hi.cast"(%568) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %628 = "mid.unwrap"(%627) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %629 = "mid.unwrap"(%543) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %630 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %631 = "mid.parameterizations_array"(%630) : (!llvm.ptr) -> !llvm.ptr
        %632 = "mid.method_call"(%631, %629, %628) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %633 = "hi.cast"(%632) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %634 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %635 = "mid.unwrap"(%633) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %636 = "mid.unwrap"(%634) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %637 = "mid.arithmetic"(%635, %636) {"op" = "ADD"} : (i32, i32) -> i32
        %638 = "mid.wrap"(%637) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %639 = "hi.cast"(%633) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %640 = "mid.unwrap"(%639) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %641 = "hi.cast"(%638) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
        %642 = "mid.unwrap"(%641) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %643 = "mid.unwrap"(%524) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %644 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %645 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %646 = "mid.parameterizations_array"(%644, %645) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%646, %643, %640, %642) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %647 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %648 = "mid.unwrap"(%568) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %649 = "mid.unwrap"(%647) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %650 = "mid.arithmetic"(%648, %649) {"op" = "ADD"} : (i32, i32) -> i32
        %651 = "mid.wrap"(%650) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %652 = "hi.cast"(%651) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%568, %652) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %653 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %654 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %655 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %656 = "mid.unwrap"(%501) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %657 = "mid.unwrap"(%655) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %658 = "mid.comparison"(%656, %657) {"op" = "GT"} : (i32, i32) -> i1
      %659 = "mid.wrap"(%658) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %660 = "mid.unwrap"(%659) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%660) ({
        %661 = "hi.cast"(%569) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %662 = "mid.unwrap"(%661) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %663 = "mid.unwrap"(%524) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %664 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %665 = "mid.parameterizations_array"(%664) : (!llvm.ptr) -> !llvm.ptr
        %666 = "mid.method_call"(%665, %663, %662) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %667 = "hi.cast"(%666) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        %668 = "mid.checkflag"(%667) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %669 = "mid.unwrap"(%668) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %670 = "hi.cast"(%667) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.if"(%669) ({
          %671 = "hi.cast"(%670) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.nil
          %672 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %673 = "hi.cast"(%672) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%654, %673) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %674 = "hi.cast"(%671) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%670, %674) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %675 = "mid.checkflag"(%670) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %676 = "mid.unwrap"(%675) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %677 = "hi.cast"(%670) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.if"(%676) ({
          %678 = "hi.cast"(%677) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %679 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %680 = "mid.unwrap"(%569) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %681 = "mid.unwrap"(%679) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %682 = "mid.arithmetic"(%680, %681) {"op" = "ADD"} : (i32, i32) -> i32
          %683 = "mid.wrap"(%682) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %684 = "mid.unwrap"(%678) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %685 = "mid.unwrap"(%683) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %686 = "mid.comparison"(%684, %685) {"op" = "NEQ"} : (i32, i32) -> i1
          %687 = "mid.wrap"(%686) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %688 = "mid.unwrap"(%687) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
          "mid.if"(%688) ({
            %689 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %690 = "hi.cast"(%689) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%654, %690) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          }) : (i1) -> ()
          %691 = "hi.cast"(%678) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%677, %691) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }, {
          %692 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %693 = "mid.checkflag"(%677) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
          %694 = "mid.unwrap"(%692) : (!hi.bool) -> i1
          %695 = "mid.unwrap"(%693) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
          %696 = "mid.comparison"(%694, %695) {"op" = "EQ"} : (i1, i1) -> i1
          %697 = "mid.wrap"(%696) : (i1) -> !hi.bool
          %698 = "mid.unwrap"(%697) : (!hi.bool) -> i1
          "mid.if"(%698) ({
            %699 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %700 = "hi.cast"(%699) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%654, %700) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          }) : (i1) -> ()
          %701 = "hi.cast"(%677) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%677, %701) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %702 = "mid.unwrap"(%524) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %703 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %704 = "mid.method_call"(%703, %702) {"offset" = 22 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %705 = "hi.cast"(%704) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %706 = "mid.unwrap"(%705) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %707 = "mid.unwrap"(%544) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %708 = "mid.comparison"(%706, %707) {"op" = "NEQ"} : (i32, i32) -> i1
        %709 = "mid.wrap"(%708) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %710 = "mid.unwrap"(%709) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%710) ({
          %711 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %712 = "hi.cast"(%711) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%654, %712) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }, {
        %713 = "mid.unwrap"(%524) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %714 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %715 = "mid.method_call"(%714, %713) {"offset" = 22 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %716 = "hi.cast"(%715) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %717 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %718 = "mid.unwrap"(%716) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %719 = "mid.unwrap"(%717) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %720 = "mid.comparison"(%718, %719) {"op" = "NEQ"} : (i32, i32) -> i1
        %721 = "mid.wrap"(%720) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %722 = "mid.unwrap"(%721) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%722) ({
          %723 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %724 = "hi.cast"(%723) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%654, %724) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }) : (i1) -> ()
      %725 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %726 = "hi.cast"(%725) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %727 = "mid.create_buffer"(%726) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %728 = "mid.refer"(%727) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %729 = "mid.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "Insert Random"} : () -> !llvm.ptr
      %730 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%728, %730, %729) {"typ" = !llvm.array<13 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %731 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %732 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %733 = "mid.unwrap"(%728) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %734 = "mid.unwrap"(%731) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %735 = "mid.unwrap"(%732) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %736 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %737 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %738 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %739 = "hi.cast"(%728) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %740 = "mid.unwrap"(%739) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %741 = "hi.cast"(%737) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %742 = "mid.unwrap"(%741) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %743 = "hi.cast"(%738) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %744 = "mid.unwrap"(%743) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %745 = "mid.unwrap"(%736) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %746 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %747 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %748 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %749 = "mid.parameterizations_array"(%746, %747, %748) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%749, %745, %740, %742, %744) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %750 = "mid.unwrap"(%653) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %751 = "mid.unwrap"(%619) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %752 = "mid.arithmetic"(%750, %751) {"op" = "SUB"} : (i64, i64) -> i64
      %753 = "mid.wrap"(%752) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %754 = "mid.unwrap"(%736) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %755 = "mid.unwrap"(%501) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %756 = "mid.unwrap"(%753) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      "mid.call"(%754, %755, %756) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %757 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %758 = "hi.cast"(%757) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %759 = "mid.create_buffer"(%758) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %760 = "mid.refer"(%759) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %761 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %762 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%760, %762, %761) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %763 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %764 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %765 = "mid.unwrap"(%760) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %766 = "mid.unwrap"(%763) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %767 = "mid.unwrap"(%764) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %768 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %769 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %770 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %771 = "hi.cast"(%760) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %772 = "mid.unwrap"(%771) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %773 = "hi.cast"(%769) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %774 = "mid.unwrap"(%773) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %775 = "hi.cast"(%770) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %776 = "mid.unwrap"(%775) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %777 = "mid.unwrap"(%768) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %778 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %779 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %780 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %781 = "mid.parameterizations_array"(%778, %779, %780) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%781, %777, %772, %774, %776) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %782 = "hi.cast"(%768) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %783 = "mid.unwrap"(%782) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %784 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %785 = "mid.parameterizations_array"(%784) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%785, %783) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %786 = "mid.unwrap"(%654) : (!hi.bool) -> i1
      "mid.if"(%786) ({
        %787 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %788 = "hi.cast"(%787) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %789 = "mid.create_buffer"(%788) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %790 = "mid.refer"(%789) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %791 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %792 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%790, %792, %791) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %793 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %794 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %795 = "mid.unwrap"(%790) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %796 = "mid.unwrap"(%793) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %797 = "mid.unwrap"(%794) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %798 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %799 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %800 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %801 = "hi.cast"(%790) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %802 = "mid.unwrap"(%801) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %803 = "hi.cast"(%799) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %804 = "mid.unwrap"(%803) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %805 = "hi.cast"(%800) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %806 = "mid.unwrap"(%805) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %807 = "mid.unwrap"(%798) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %808 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %809 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %810 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %811 = "mid.parameterizations_array"(%808, %809, %810) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%811, %807, %802, %804, %806) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %812 = "hi.cast"(%798) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %813 = "mid.unwrap"(%812) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %814 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %815 = "mid.parameterizations_array"(%814) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%815, %813) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %816 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %817 = "hi.cast"(%816) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %818 = "mid.create_buffer"(%817) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %819 = "mid.refer"(%818) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %820 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %821 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%819, %821, %820) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %822 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %823 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %824 = "mid.unwrap"(%819) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %825 = "mid.unwrap"(%822) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %826 = "mid.unwrap"(%823) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %827 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %828 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %829 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %830 = "hi.cast"(%819) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %831 = "mid.unwrap"(%830) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %832 = "hi.cast"(%828) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %833 = "mid.unwrap"(%832) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %834 = "hi.cast"(%829) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %835 = "mid.unwrap"(%834) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %836 = "mid.unwrap"(%827) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %837 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %838 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %839 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %840 = "mid.parameterizations_array"(%837, %838, %839) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%840, %836, %831, %833, %835) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %841 = "hi.cast"(%827) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %842 = "mid.unwrap"(%841) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %843 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %844 = "mid.parameterizations_array"(%843) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%844, %842) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
      %845 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %846 = "hi.cast"(%845) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %847 = "mid.create_buffer"(%846) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %848 = "mid.refer"(%847) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %849 = "mid.literal"() {"typ" = !llvm.array<27 x i8>, "value" = "    (Expected unique size: "} : () -> !llvm.ptr
      %850 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%848, %850, %849) {"typ" = !llvm.array<27 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %851 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %852 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %853 = "mid.unwrap"(%848) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %854 = "mid.unwrap"(%851) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %855 = "mid.unwrap"(%852) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %856 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %857 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %858 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %859 = "hi.cast"(%848) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %860 = "mid.unwrap"(%859) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %861 = "hi.cast"(%857) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %862 = "mid.unwrap"(%861) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %863 = "hi.cast"(%858) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %864 = "mid.unwrap"(%863) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %865 = "mid.unwrap"(%856) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %866 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %867 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %868 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %869 = "mid.parameterizations_array"(%866, %867, %868) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%869, %865, %860, %862, %864) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %870 = "hi.cast"(%856) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %871 = "mid.unwrap"(%870) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %872 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %873 = "mid.parameterizations_array"(%872) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%873, %871) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %874 = "hi.cast"(%544) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %875 = "mid.unwrap"(%874) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %876 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %877 = "mid.parameterizations_array"(%876) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%877, %875) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %878 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %879 = "hi.cast"(%878) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %880 = "mid.create_buffer"(%879) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %881 = "mid.refer"(%880) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %882 = "mid.literal"() {"typ" = !llvm.array<1 x i8>, "value" = ")"} : () -> !llvm.ptr
      %883 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%881, %883, %882) {"typ" = !llvm.array<1 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %884 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %885 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %886 = "mid.unwrap"(%881) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %887 = "mid.unwrap"(%884) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %888 = "mid.unwrap"(%885) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %889 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %890 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %891 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %892 = "hi.cast"(%881) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %893 = "mid.unwrap"(%892) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %894 = "hi.cast"(%890) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %895 = "mid.unwrap"(%894) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %896 = "hi.cast"(%891) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %897 = "mid.unwrap"(%896) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %898 = "mid.unwrap"(%889) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %899 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %900 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %901 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %902 = "mid.parameterizations_array"(%899, %900, %901) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%902, %898, %893, %895, %897) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %903 = "hi.cast"(%889) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %904 = "mid.unwrap"(%903) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %905 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %906 = "mid.parameterizations_array"(%905) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%906, %904) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "benchmark_insert_random", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb12(%907 : i32):
      %908 = "mid.wrap"(%907) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %909 = "hi.cast"(%908) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %910 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %911 = "mid.wrap"(%910) : (!llvm.ptr) -> !llvm.ptr
      %912 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %913 = "mid.wrap"(%912) : (!llvm.ptr) -> !llvm.ptr
      %914 = "mid.unwrap"(%911) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %915 = "mid.unwrap"(%913) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %916 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %917 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %918 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %919 = "mid.new"(%916, %917, %918) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %920 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %921 = "mid.wrap"(%920) : (!llvm.ptr) -> !llvm.ptr
      %922 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %923 = "mid.wrap"(%922) : (!llvm.ptr) -> !llvm.ptr
      %924 = "hi.cast"(%921) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %925 = "mid.unwrap"(%924) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %926 = "hi.cast"(%923) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %927 = "mid.unwrap"(%926) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %928 = "mid.unwrap"(%919) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %929 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %930 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %931 = "mid.parameterizations_array"(%929, %930) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%931, %928, %925, %927) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %932 = "mid.refer"(%919) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %933 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %934 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %935 = "mid.unwrap"(%934) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %936 = "mid.unwrap"(%909) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %937 = "mid.comparison"(%935, %936) {"op" = "LT"} : (i32, i32) -> i1
        %938 = "mid.wrap"(%937) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %939 = "mid.unwrap"(%938) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %940 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %941 = "mid.unwrap"(%934) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %942 = "mid.unwrap"(%940) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %943 = "mid.arithmetic"(%941, %942) {"op" = "ADD"} : (i32, i32) -> i32
        %944 = "mid.wrap"(%943) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %945 = "hi.cast"(%934) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %946 = "mid.unwrap"(%945) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %947 = "hi.cast"(%944) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
        %948 = "mid.unwrap"(%947) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %949 = "mid.unwrap"(%932) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %950 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %951 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %952 = "mid.parameterizations_array"(%950, %951) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%952, %949, %946, %948) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %953 = "hi.cast"(%944) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %954 = "mid.unwrap"(%933) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
        %955 = "mid.unwrap"(%953) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
        %956 = "mid.arithmetic"(%954, %955) {"op" = "ADD"} : (i64, i64) -> i64
        %957 = "mid.wrap"(%956) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %958 = "hi.cast"(%957) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.assign"(%933, %958) {"typ" = i64} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
        %959 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %960 = "mid.unwrap"(%934) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %961 = "mid.unwrap"(%959) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %962 = "mid.arithmetic"(%960, %961) {"op" = "ADD"} : (i32, i32) -> i32
        %963 = "mid.wrap"(%962) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %964 = "hi.cast"(%963) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%934, %964) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %965 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %966 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %967 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %968 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %969 = "hi.cast"(%968) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%934, %969) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      "mid.while"() ({
        %970 = "mid.unwrap"(%934) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %971 = "mid.unwrap"(%909) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %972 = "mid.comparison"(%970, %971) {"op" = "LT"} : (i32, i32) -> i1
        %973 = "mid.wrap"(%972) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %974 = "mid.unwrap"(%973) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %975 = "hi.cast"(%934) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %976 = "mid.unwrap"(%975) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %977 = "mid.unwrap"(%932) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %978 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %979 = "mid.parameterizations_array"(%978) : (!llvm.ptr) -> !llvm.ptr
        %980 = "mid.method_call"(%979, %977, %976) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %981 = "hi.cast"(%980) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        %982 = "mid.checkflag"(%981) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %983 = "mid.unwrap"(%982) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %984 = "hi.cast"(%981) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.if"(%983) ({
          %985 = "hi.cast"(%984) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %986 = "hi.cast"(%985) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %987 = "mid.unwrap"(%966) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
          %988 = "mid.unwrap"(%986) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
          %989 = "mid.arithmetic"(%987, %988) {"op" = "ADD"} : (i64, i64) -> i64
          %990 = "mid.wrap"(%989) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %991 = "hi.cast"(%990) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          "mid.assign"(%966, %991) {"typ" = i64} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
          %992 = "hi.cast"(%985) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%984, %992) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }, {
          %993 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %994 = "hi.cast"(%993) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%967, %994) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %995 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %996 = "hi.cast"(%995) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %997 = "mid.create_buffer"(%996) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
          %998 = "mid.refer"(%997) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %999 = "mid.literal"() {"typ" = !llvm.array<55 x i8>, "value" = "Error: Nil returned during sequential hit test for key "} : () -> !llvm.ptr
          %1000 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
          "mid.buffer_set"(%998, %1000, %999) {"typ" = !llvm.array<55 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
          %1001 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1002 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1003 = "mid.unwrap"(%998) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %1004 = "mid.unwrap"(%1001) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1005 = "mid.unwrap"(%1002) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1006 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
          %1007 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1008 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1009 = "hi.cast"(%998) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %1010 = "mid.unwrap"(%1009) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %1011 = "hi.cast"(%1007) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1012 = "mid.unwrap"(%1011) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1013 = "hi.cast"(%1008) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1014 = "mid.unwrap"(%1013) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1015 = "mid.unwrap"(%1006) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1016 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %1017 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1018 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1019 = "mid.parameterizations_array"(%1016, %1017, %1018) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1019, %1015, %1010, %1012, %1014) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
          %1020 = "hi.cast"(%1006) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
          %1021 = "mid.unwrap"(%1020) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %1022 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
          %1023 = "mid.parameterizations_array"(%1022) : (!llvm.ptr) -> !llvm.ptr
          "mid.class_method_call"(%1023, %1021) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1024 = "hi.cast"(%934) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
          %1025 = "mid.unwrap"(%1024) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %1026 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1027 = "mid.parameterizations_array"(%1026) : (!llvm.ptr) -> !llvm.ptr
          "mid.class_method_call"(%1027, %1025) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1028 = "hi.cast"(%984) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%984, %1028) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1029 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1030 = "mid.unwrap"(%934) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1031 = "mid.unwrap"(%1029) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1032 = "mid.arithmetic"(%1030, %1031) {"op" = "ADD"} : (i32, i32) -> i32
        %1033 = "mid.wrap"(%1032) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1034 = "hi.cast"(%1033) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%934, %1034) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %1035 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1036 = "mid.unwrap"(%966) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1037 = "mid.unwrap"(%933) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1038 = "mid.comparison"(%1036, %1037) {"op" = "NEQ"} : (i64, i64) -> i1
      %1039 = "mid.wrap"(%1038) : (i1) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1040 = "mid.unwrap"(%1039) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%1040) ({
        %1041 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1042 = "hi.cast"(%1041) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.assign"(%967, %1042) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      }) : (i1) -> ()
      %1043 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1044 = "hi.cast"(%1043) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1045 = "mid.create_buffer"(%1044) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1046 = "mid.refer"(%1045) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1047 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "Get Sequential Hit"} : () -> !llvm.ptr
      %1048 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1046, %1048, %1047) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1049 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1050 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1051 = "mid.unwrap"(%1046) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1052 = "mid.unwrap"(%1049) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1053 = "mid.unwrap"(%1050) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1054 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1055 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1056 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1057 = "hi.cast"(%1046) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1058 = "mid.unwrap"(%1057) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1059 = "hi.cast"(%1055) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1060 = "mid.unwrap"(%1059) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1061 = "hi.cast"(%1056) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1062 = "mid.unwrap"(%1061) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1063 = "mid.unwrap"(%1054) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1064 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1065 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1066 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1067 = "mid.parameterizations_array"(%1064, %1065, %1066) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1067, %1063, %1058, %1060, %1062) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1068 = "mid.unwrap"(%1035) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1069 = "mid.unwrap"(%965) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1070 = "mid.arithmetic"(%1068, %1069) {"op" = "SUB"} : (i64, i64) -> i64
      %1071 = "mid.wrap"(%1070) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1072 = "mid.unwrap"(%1054) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1073 = "mid.unwrap"(%909) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1074 = "mid.unwrap"(%1071) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      "mid.call"(%1072, %1073, %1074) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %1075 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1076 = "hi.cast"(%1075) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1077 = "mid.create_buffer"(%1076) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1078 = "mid.refer"(%1077) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1079 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %1080 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1078, %1080, %1079) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1081 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1082 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1083 = "mid.unwrap"(%1078) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1084 = "mid.unwrap"(%1081) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1085 = "mid.unwrap"(%1082) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1086 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1087 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1088 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1089 = "hi.cast"(%1078) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1090 = "mid.unwrap"(%1089) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1091 = "hi.cast"(%1087) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1092 = "mid.unwrap"(%1091) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1093 = "hi.cast"(%1088) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1094 = "mid.unwrap"(%1093) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1095 = "mid.unwrap"(%1086) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1096 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1097 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1098 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1099 = "mid.parameterizations_array"(%1096, %1097, %1098) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1099, %1095, %1090, %1092, %1094) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1100 = "hi.cast"(%1086) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %1101 = "mid.unwrap"(%1100) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1102 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1103 = "mid.parameterizations_array"(%1102) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%1103, %1101) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %1104 = "mid.unwrap"(%967) : (!hi.bool) -> i1
      "mid.if"(%1104) ({
        %1105 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1106 = "hi.cast"(%1105) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1107 = "mid.create_buffer"(%1106) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1108 = "mid.refer"(%1107) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1109 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %1110 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1108, %1110, %1109) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1111 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1112 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1113 = "mid.unwrap"(%1108) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1114 = "mid.unwrap"(%1111) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1115 = "mid.unwrap"(%1112) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1116 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1117 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1118 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1119 = "hi.cast"(%1108) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1120 = "mid.unwrap"(%1119) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1121 = "hi.cast"(%1117) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1122 = "mid.unwrap"(%1121) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1123 = "hi.cast"(%1118) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1124 = "mid.unwrap"(%1123) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1125 = "mid.unwrap"(%1116) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1126 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1127 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1128 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1129 = "mid.parameterizations_array"(%1126, %1127, %1128) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1129, %1125, %1120, %1122, %1124) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %1130 = "hi.cast"(%1116) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1131 = "mid.unwrap"(%1130) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1132 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1133 = "mid.parameterizations_array"(%1132) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1133, %1131) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %1134 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1135 = "hi.cast"(%1134) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1136 = "mid.create_buffer"(%1135) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1137 = "mid.refer"(%1136) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1138 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %1139 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1137, %1139, %1138) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1140 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1141 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1142 = "mid.unwrap"(%1137) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1143 = "mid.unwrap"(%1140) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1144 = "mid.unwrap"(%1141) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1145 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1146 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1147 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1148 = "hi.cast"(%1137) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1149 = "mid.unwrap"(%1148) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1150 = "hi.cast"(%1146) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1151 = "mid.unwrap"(%1150) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1152 = "hi.cast"(%1147) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1153 = "mid.unwrap"(%1152) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1154 = "mid.unwrap"(%1145) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1155 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1156 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1157 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1158 = "mid.parameterizations_array"(%1155, %1156, %1157) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1158, %1154, %1149, %1151, %1153) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %1159 = "hi.cast"(%1145) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1160 = "mid.unwrap"(%1159) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1161 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1162 = "mid.parameterizations_array"(%1161) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1162, %1160) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "benchmark_get_sequential_hit", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb13(%1163 : i32):
      %1164 = "mid.wrap"(%1163) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1165 = "hi.cast"(%1164) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1166 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1167 = "mid.wrap"(%1166) : (!llvm.ptr) -> !llvm.ptr
      %1168 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1169 = "mid.wrap"(%1168) : (!llvm.ptr) -> !llvm.ptr
      %1170 = "mid.unwrap"(%1167) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1171 = "mid.unwrap"(%1169) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1172 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1173 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1174 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1175 = "mid.new"(%1172, %1173, %1174) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %1176 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1177 = "mid.wrap"(%1176) : (!llvm.ptr) -> !llvm.ptr
      %1178 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1179 = "mid.wrap"(%1178) : (!llvm.ptr) -> !llvm.ptr
      %1180 = "hi.cast"(%1177) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %1181 = "mid.unwrap"(%1180) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1182 = "hi.cast"(%1179) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %1183 = "mid.unwrap"(%1182) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1184 = "mid.unwrap"(%1175) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1185 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1186 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1187 = "mid.parameterizations_array"(%1185, %1186) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1187, %1184, %1181, %1183) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1188 = "mid.refer"(%1175) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %1189 = "mid.literal"() {"value" = 456 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1190 = "mid.unwrap"(%1189) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1191 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %1192 = "mid.literal"() {"value" = 456 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1193 = "hi.cast"(%1192) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1194 = "mid.unwrap"(%1193) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1195 = "mid.unwrap"(%1191) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1196 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1197 = "mid.parameterizations_array"(%1196) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1197, %1195, %1194) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1198 = "mid.refer"(%1191) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %1199 = "mid.unwrap"(%1165) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1200 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1201 = "mid.new"(%1200) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %1202 = "hi.cast"(%1165) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1203 = "mid.unwrap"(%1202) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1204 = "mid.unwrap"(%1201) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1205 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1206 = "mid.parameterizations_array"(%1205) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1206, %1204, %1203) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1207 = "mid.refer"(%1201) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %1208 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1209 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1210 = "mid.wrap"(%1209) : (!llvm.ptr) -> !llvm.ptr
      %1211 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1212 = "mid.wrap"(%1211) : (!llvm.ptr) -> !llvm.ptr
      %1213 = "mid.unwrap"(%1210) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1214 = "mid.unwrap"(%1212) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1215 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1216 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
      %1217 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["bool_typ"]], "name_hierarchy" = ["Pairi32._Bool", ["i32"], ["Bool"]]} : () -> !llvm.ptr
      %1218 = "mid.new"(%1215, %1216, %1217) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>
      %1219 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1220 = "mid.wrap"(%1219) : (!llvm.ptr) -> !llvm.ptr
      %1221 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1222 = "mid.wrap"(%1221) : (!llvm.ptr) -> !llvm.ptr
      %1223 = "hi.cast"(%1220) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %1224 = "mid.unwrap"(%1223) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1225 = "hi.cast"(%1222) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %1226 = "mid.unwrap"(%1225) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1227 = "mid.unwrap"(%1218) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1228 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1229 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1230 = "mid.parameterizations_array"(%1228, %1229) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1230, %1227, %1224, %1226) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1231 = "mid.refer"(%1218) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>
      %1232 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1233 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1234 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1235 = "mid.unwrap"(%1165) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1236 = "mid.unwrap"(%1234) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1237 = "mid.arithmetic"(%1235, %1236) {"op" = "MUL"} : (i32, i32) -> i32
      %1238 = "mid.wrap"(%1237) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %1239 = "mid.unwrap"(%1232) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1240 = "mid.unwrap"(%1165) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1241 = "mid.comparison"(%1239, %1240) {"op" = "LT"} : (i32, i32) -> i1
        %1242 = "mid.wrap"(%1241) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1243 = "mid.unwrap"(%1242) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        %1244 = "mid.logical"(%1243) ({
          %1245 = "mid.unwrap"(%1233) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1246 = "mid.unwrap"(%1238) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1247 = "mid.comparison"(%1245, %1246) {"op" = "LT"} : (i32, i32) -> i1
          %1248 = "mid.wrap"(%1247) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          func.return %1248 : !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        }) {"op" = "and"} : (i1) -> i1
        %1249 = "mid.wrap"(%1244) : (i1) -> !hi.bool
        %1250 = "mid.unwrap"(%1249) : (!hi.bool) -> i1
      }, {
        %1251 = "mid.unwrap"(%1198) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1252 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1253 = "mid.method_call"(%1252, %1251) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1254 = "hi.cast"(%1253) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1255 = "hi.cast"(%1254) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %1256 = "mid.unwrap"(%1255) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1257 = "mid.unwrap"(%1231) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1258 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1259 = "mid.parameterizations_array"(%1258) : (!llvm.ptr) -> !llvm.ptr
        %1260 = "mid.method_call"(%1259, %1257, %1256) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %1261 = "hi.cast"(%1260) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.bool]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.bool]>
        %1262 = "mid.checkflag"(%1261) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.bool]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1263 = "mid.unwrap"(%1262) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%1263) ({
          %1264 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1265 = "mid.unwrap"(%1254) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1266 = "mid.unwrap"(%1264) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1267 = "mid.arithmetic"(%1265, %1266) {"op" = "ADD"} : (i32, i32) -> i32
          %1268 = "mid.wrap"(%1267) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1269 = "hi.cast"(%1254) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %1270 = "mid.unwrap"(%1269) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1271 = "hi.cast"(%1268) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
          %1272 = "mid.unwrap"(%1271) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1273 = "mid.unwrap"(%1188) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1274 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1275 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1276 = "mid.parameterizations_array"(%1274, %1275) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1276, %1273, %1270, %1272) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1277 = "hi.cast"(%1232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1278 = "mid.unwrap"(%1277) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1279 = "hi.cast"(%1254) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"T", !hi.any, "Array">
          %1280 = "mid.unwrap"(%1279) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1281 = "mid.unwrap"(%1207) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1282 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1283 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1284 = "mid.parameterizations_array"(%1282, %1283) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1284, %1281, %1278, %1280) {"offset" = 17 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1285 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %1286 = "hi.cast"(%1254) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %1287 = "mid.unwrap"(%1286) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1288 = "hi.cast"(%1285) {"from_typ" = !hi.bool, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "bool_typ", "to_typ_name" = "any_typ"} : (!hi.bool) -> !hi.type_param<"V", !hi.any, "CuckooMap">
          %1289 = "mid.unwrap"(%1288) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1290 = "mid.unwrap"(%1231) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1291 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1292 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
          %1293 = "mid.parameterizations_array"(%1291, %1292) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1293, %1290, %1287, %1289) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "bool_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1294 = "hi.cast"(%1268) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %1295 = "mid.unwrap"(%1208) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
          %1296 = "mid.unwrap"(%1294) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
          %1297 = "mid.arithmetic"(%1295, %1296) {"op" = "ADD"} : (i64, i64) -> i64
          %1298 = "mid.wrap"(%1297) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %1299 = "hi.cast"(%1298) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          "mid.assign"(%1208, %1299) {"typ" = i64} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
          %1300 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1301 = "mid.unwrap"(%1232) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1302 = "mid.unwrap"(%1300) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1303 = "mid.arithmetic"(%1301, %1302) {"op" = "ADD"} : (i32, i32) -> i32
          %1304 = "mid.wrap"(%1303) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1305 = "hi.cast"(%1304) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.assign"(%1232, %1305) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        }) : (i1) -> ()
        %1306 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1307 = "mid.unwrap"(%1233) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1308 = "mid.unwrap"(%1306) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1309 = "mid.arithmetic"(%1307, %1308) {"op" = "ADD"} : (i32, i32) -> i32
        %1310 = "mid.wrap"(%1309) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1311 = "hi.cast"(%1310) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%1233, %1311) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %1312 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1313 = "mid.unwrap"(%1232) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1314 = "mid.unwrap"(%1165) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1315 = "mid.comparison"(%1313, %1314) {"op" = "LT"} : (i32, i32) -> i1
      %1316 = "mid.wrap"(%1315) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1317 = "mid.unwrap"(%1316) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%1317) ({
        %1318 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1319 = "hi.cast"(%1318) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1320 = "mid.create_buffer"(%1319) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1321 = "mid.refer"(%1320) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1322 = "mid.literal"() {"typ" = !llvm.array<29 x i8>, "value" = "Warning: Could only generate "} : () -> !llvm.ptr
        %1323 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1321, %1323, %1322) {"typ" = !llvm.array<29 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1324 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1325 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1326 = "mid.unwrap"(%1321) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1327 = "mid.unwrap"(%1324) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1328 = "mid.unwrap"(%1325) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1329 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1330 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1331 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1332 = "hi.cast"(%1321) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1333 = "mid.unwrap"(%1332) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1334 = "hi.cast"(%1330) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1335 = "mid.unwrap"(%1334) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1336 = "hi.cast"(%1331) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1337 = "mid.unwrap"(%1336) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1338 = "mid.unwrap"(%1329) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1339 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1340 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1341 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1342 = "mid.parameterizations_array"(%1339, %1340, %1341) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1342, %1338, %1333, %1335, %1337) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %1343 = "hi.cast"(%1329) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1344 = "mid.unwrap"(%1343) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1345 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1346 = "mid.parameterizations_array"(%1345) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1346, %1344) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1347 = "hi.cast"(%1232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1348 = "mid.unwrap"(%1347) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1349 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1350 = "mid.parameterizations_array"(%1349) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1350, %1348) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1351 = "mid.literal"() {"value" = 34 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1352 = "hi.cast"(%1351) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1353 = "mid.create_buffer"(%1352) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1354 = "mid.refer"(%1353) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1355 = "mid.literal"() {"typ" = !llvm.array<33 x i8>, "value" = " unique keys for random hit test."} : () -> !llvm.ptr
        %1356 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1354, %1356, %1355) {"typ" = !llvm.array<33 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1357 = "mid.literal"() {"value" = 33 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1358 = "mid.literal"() {"value" = 34 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1359 = "mid.unwrap"(%1354) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1360 = "mid.unwrap"(%1357) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1361 = "mid.unwrap"(%1358) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1362 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1363 = "mid.literal"() {"value" = 33 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1364 = "mid.literal"() {"value" = 34 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1365 = "hi.cast"(%1354) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1366 = "mid.unwrap"(%1365) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1367 = "hi.cast"(%1363) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1368 = "mid.unwrap"(%1367) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1369 = "hi.cast"(%1364) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1370 = "mid.unwrap"(%1369) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1371 = "mid.unwrap"(%1362) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1372 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1373 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1374 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1375 = "mid.parameterizations_array"(%1372, %1373, %1374) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1375, %1371, %1366, %1368, %1370) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %1376 = "hi.cast"(%1362) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1377 = "mid.unwrap"(%1376) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1378 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1379 = "mid.parameterizations_array"(%1378) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1379, %1377) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1380 = "hi.cast"(%1232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%1165, %1380) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %1381 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1382 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1383 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1384 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %1385 = "mid.unwrap"(%1384) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1386 = "mid.unwrap"(%1165) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1387 = "mid.comparison"(%1385, %1386) {"op" = "LT"} : (i32, i32) -> i1
        %1388 = "mid.wrap"(%1387) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1389 = "mid.unwrap"(%1388) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %1390 = "hi.cast"(%1384) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1391 = "mid.unwrap"(%1390) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1392 = "mid.unwrap"(%1207) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1393 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1394 = "mid.parameterizations_array"(%1393) : (!llvm.ptr) -> !llvm.ptr
        %1395 = "mid.method_call"(%1394, %1392, %1391) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %1396 = "hi.cast"(%1395) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1397 = "hi.cast"(%1396) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %1398 = "mid.unwrap"(%1397) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1399 = "mid.unwrap"(%1188) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1400 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1401 = "mid.parameterizations_array"(%1400) : (!llvm.ptr) -> !llvm.ptr
        %1402 = "mid.method_call"(%1401, %1399, %1398) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %1403 = "hi.cast"(%1402) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        %1404 = "mid.checkflag"(%1403) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1405 = "mid.unwrap"(%1404) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %1406 = "hi.cast"(%1403) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.if"(%1405) ({
          %1407 = "hi.cast"(%1406) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1408 = "hi.cast"(%1407) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %1409 = "mid.unwrap"(%1382) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
          %1410 = "mid.unwrap"(%1408) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
          %1411 = "mid.arithmetic"(%1409, %1410) {"op" = "ADD"} : (i64, i64) -> i64
          %1412 = "mid.wrap"(%1411) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %1413 = "hi.cast"(%1412) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          "mid.assign"(%1382, %1413) {"typ" = i64} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
          %1414 = "hi.cast"(%1407) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%1406, %1414) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }, {
          %1415 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %1416 = "hi.cast"(%1415) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%1383, %1416) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %1417 = "mid.literal"() {"value" = 52 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1418 = "hi.cast"(%1417) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %1419 = "mid.create_buffer"(%1418) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
          %1420 = "mid.refer"(%1419) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %1421 = "mid.literal"() {"typ" = !llvm.array<51 x i8>, "value" = "Error: Nil returned during random hit test for key "} : () -> !llvm.ptr
          %1422 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
          "mid.buffer_set"(%1420, %1422, %1421) {"typ" = !llvm.array<51 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
          %1423 = "mid.literal"() {"value" = 51 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1424 = "mid.literal"() {"value" = 52 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1425 = "mid.unwrap"(%1420) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %1426 = "mid.unwrap"(%1423) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1427 = "mid.unwrap"(%1424) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1428 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
          %1429 = "mid.literal"() {"value" = 51 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1430 = "mid.literal"() {"value" = 52 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1431 = "hi.cast"(%1420) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %1432 = "mid.unwrap"(%1431) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %1433 = "hi.cast"(%1429) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1434 = "mid.unwrap"(%1433) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1435 = "hi.cast"(%1430) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1436 = "mid.unwrap"(%1435) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1437 = "mid.unwrap"(%1428) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1438 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %1439 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1440 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1441 = "mid.parameterizations_array"(%1438, %1439, %1440) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1441, %1437, %1432, %1434, %1436) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
          %1442 = "hi.cast"(%1428) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
          %1443 = "mid.unwrap"(%1442) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %1444 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
          %1445 = "mid.parameterizations_array"(%1444) : (!llvm.ptr) -> !llvm.ptr
          "mid.class_method_call"(%1445, %1443) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1446 = "hi.cast"(%1396) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
          %1447 = "mid.unwrap"(%1446) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %1448 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1449 = "mid.parameterizations_array"(%1448) : (!llvm.ptr) -> !llvm.ptr
          "mid.class_method_call"(%1449, %1447) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1450 = "hi.cast"(%1406) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%1406, %1450) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1451 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1452 = "mid.unwrap"(%1384) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1453 = "mid.unwrap"(%1451) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1454 = "mid.arithmetic"(%1452, %1453) {"op" = "ADD"} : (i32, i32) -> i32
        %1455 = "mid.wrap"(%1454) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1456 = "hi.cast"(%1455) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%1384, %1456) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %1457 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1458 = "mid.unwrap"(%1382) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1459 = "mid.unwrap"(%1208) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1460 = "mid.comparison"(%1458, %1459) {"op" = "NEQ"} : (i64, i64) -> i1
      %1461 = "mid.wrap"(%1460) : (i1) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1462 = "mid.unwrap"(%1461) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%1462) ({
        %1463 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1464 = "hi.cast"(%1463) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.assign"(%1383, %1464) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      }) : (i1) -> ()
      %1465 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1466 = "hi.cast"(%1465) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1467 = "mid.create_buffer"(%1466) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1468 = "mid.refer"(%1467) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1469 = "mid.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "Get Random Hit"} : () -> !llvm.ptr
      %1470 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1468, %1470, %1469) {"typ" = !llvm.array<14 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1471 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1472 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1473 = "mid.unwrap"(%1468) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1474 = "mid.unwrap"(%1471) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1475 = "mid.unwrap"(%1472) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1476 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1477 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1478 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1479 = "hi.cast"(%1468) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1480 = "mid.unwrap"(%1479) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1481 = "hi.cast"(%1477) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1482 = "mid.unwrap"(%1481) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1483 = "hi.cast"(%1478) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1484 = "mid.unwrap"(%1483) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1485 = "mid.unwrap"(%1476) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1486 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1487 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1488 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1489 = "mid.parameterizations_array"(%1486, %1487, %1488) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1489, %1485, %1480, %1482, %1484) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1490 = "mid.unwrap"(%1457) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1491 = "mid.unwrap"(%1381) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1492 = "mid.arithmetic"(%1490, %1491) {"op" = "SUB"} : (i64, i64) -> i64
      %1493 = "mid.wrap"(%1492) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1494 = "mid.unwrap"(%1476) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1495 = "mid.unwrap"(%1165) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1496 = "mid.unwrap"(%1493) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      "mid.call"(%1494, %1495, %1496) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %1497 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1498 = "hi.cast"(%1497) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1499 = "mid.create_buffer"(%1498) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1500 = "mid.refer"(%1499) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1501 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %1502 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1500, %1502, %1501) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1503 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1504 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1505 = "mid.unwrap"(%1500) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1506 = "mid.unwrap"(%1503) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1507 = "mid.unwrap"(%1504) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1508 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1509 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1510 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1511 = "hi.cast"(%1500) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1512 = "mid.unwrap"(%1511) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1513 = "hi.cast"(%1509) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1514 = "mid.unwrap"(%1513) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1515 = "hi.cast"(%1510) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1516 = "mid.unwrap"(%1515) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1517 = "mid.unwrap"(%1508) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1518 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1519 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1520 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1521 = "mid.parameterizations_array"(%1518, %1519, %1520) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1521, %1517, %1512, %1514, %1516) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1522 = "hi.cast"(%1508) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %1523 = "mid.unwrap"(%1522) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1524 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1525 = "mid.parameterizations_array"(%1524) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%1525, %1523) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %1526 = "mid.unwrap"(%1383) : (!hi.bool) -> i1
      "mid.if"(%1526) ({
        %1527 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1528 = "hi.cast"(%1527) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1529 = "mid.create_buffer"(%1528) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1530 = "mid.refer"(%1529) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1531 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %1532 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1530, %1532, %1531) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1533 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1534 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1535 = "mid.unwrap"(%1530) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1536 = "mid.unwrap"(%1533) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1537 = "mid.unwrap"(%1534) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1538 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1539 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1540 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1541 = "hi.cast"(%1530) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1542 = "mid.unwrap"(%1541) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1543 = "hi.cast"(%1539) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1544 = "mid.unwrap"(%1543) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1545 = "hi.cast"(%1540) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1546 = "mid.unwrap"(%1545) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1547 = "mid.unwrap"(%1538) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1548 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1549 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1550 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1551 = "mid.parameterizations_array"(%1548, %1549, %1550) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1551, %1547, %1542, %1544, %1546) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %1552 = "hi.cast"(%1538) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1553 = "mid.unwrap"(%1552) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1554 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1555 = "mid.parameterizations_array"(%1554) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1555, %1553) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %1556 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1557 = "hi.cast"(%1556) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1558 = "mid.create_buffer"(%1557) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1559 = "mid.refer"(%1558) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1560 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %1561 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1559, %1561, %1560) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1562 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1563 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1564 = "mid.unwrap"(%1559) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1565 = "mid.unwrap"(%1562) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1566 = "mid.unwrap"(%1563) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1567 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1568 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1569 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1570 = "hi.cast"(%1559) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1571 = "mid.unwrap"(%1570) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1572 = "hi.cast"(%1568) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1573 = "mid.unwrap"(%1572) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1574 = "hi.cast"(%1569) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1575 = "mid.unwrap"(%1574) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1576 = "mid.unwrap"(%1567) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1577 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1578 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1579 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1580 = "mid.parameterizations_array"(%1577, %1578, %1579) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1580, %1576, %1571, %1573, %1575) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %1581 = "hi.cast"(%1567) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1582 = "mid.unwrap"(%1581) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1583 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1584 = "mid.parameterizations_array"(%1583) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1584, %1582) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "benchmark_get_random_hit", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb14(%1585 : i32):
      %1586 = "mid.wrap"(%1585) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1587 = "hi.cast"(%1586) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1588 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1589 = "mid.wrap"(%1588) : (!llvm.ptr) -> !llvm.ptr
      %1590 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1591 = "mid.wrap"(%1590) : (!llvm.ptr) -> !llvm.ptr
      %1592 = "mid.unwrap"(%1589) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1593 = "mid.unwrap"(%1591) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1594 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1595 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1596 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1597 = "mid.new"(%1594, %1595, %1596) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %1598 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1599 = "mid.wrap"(%1598) : (!llvm.ptr) -> !llvm.ptr
      %1600 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1601 = "mid.wrap"(%1600) : (!llvm.ptr) -> !llvm.ptr
      %1602 = "hi.cast"(%1599) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %1603 = "mid.unwrap"(%1602) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1604 = "hi.cast"(%1601) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %1605 = "mid.unwrap"(%1604) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1606 = "mid.unwrap"(%1597) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1607 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1608 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1609 = "mid.parameterizations_array"(%1607, %1608) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1609, %1606, %1603, %1605) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1610 = "mid.refer"(%1597) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %1611 = "mid.literal"() {"value" = 789 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1612 = "mid.unwrap"(%1611) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1613 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %1614 = "mid.literal"() {"value" = 789 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1615 = "hi.cast"(%1614) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1616 = "mid.unwrap"(%1615) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1617 = "mid.unwrap"(%1613) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1618 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1619 = "mid.parameterizations_array"(%1618) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1619, %1617, %1616) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1620 = "mid.refer"(%1613) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %1621 = "mid.literal"() {"value" = 987 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1622 = "mid.unwrap"(%1621) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1623 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %1624 = "mid.literal"() {"value" = 987 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1625 = "hi.cast"(%1624) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1626 = "mid.unwrap"(%1625) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1627 = "mid.unwrap"(%1623) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1628 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1629 = "mid.parameterizations_array"(%1628) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1629, %1627, %1626) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1630 = "mid.refer"(%1623) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %1631 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1632 = "mid.wrap"(%1631) : (!llvm.ptr) -> !llvm.ptr
      %1633 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1634 = "mid.wrap"(%1633) : (!llvm.ptr) -> !llvm.ptr
      %1635 = "mid.unwrap"(%1632) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1636 = "mid.unwrap"(%1634) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1637 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1638 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
      %1639 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["bool_typ"]], "name_hierarchy" = ["Pairi32._Bool", ["i32"], ["Bool"]]} : () -> !llvm.ptr
      %1640 = "mid.new"(%1637, %1638, %1639) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>
      %1641 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1642 = "mid.wrap"(%1641) : (!llvm.ptr) -> !llvm.ptr
      %1643 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1644 = "mid.wrap"(%1643) : (!llvm.ptr) -> !llvm.ptr
      %1645 = "hi.cast"(%1642) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %1646 = "mid.unwrap"(%1645) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1647 = "hi.cast"(%1644) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %1648 = "mid.unwrap"(%1647) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1649 = "mid.unwrap"(%1640) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1650 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1651 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1652 = "mid.parameterizations_array"(%1650, %1651) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1652, %1649, %1646, %1648) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1653 = "mid.refer"(%1640) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>
      %1654 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1655 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1656 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1657 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1658 = "mid.unwrap"(%1656) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1659 = "mid.arithmetic"(%1657, %1658) {"op" = "MUL"} : (i32, i32) -> i32
      %1660 = "mid.wrap"(%1659) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %1661 = "mid.unwrap"(%1654) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1662 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1663 = "mid.comparison"(%1661, %1662) {"op" = "LT"} : (i32, i32) -> i1
        %1664 = "mid.wrap"(%1663) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1665 = "mid.unwrap"(%1664) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        %1666 = "mid.logical"(%1665) ({
          %1667 = "mid.unwrap"(%1655) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1668 = "mid.unwrap"(%1660) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1669 = "mid.comparison"(%1667, %1668) {"op" = "LT"} : (i32, i32) -> i1
          %1670 = "mid.wrap"(%1669) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          func.return %1670 : !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        }) {"op" = "and"} : (i1) -> i1
        %1671 = "mid.wrap"(%1666) : (i1) -> !hi.bool
        %1672 = "mid.unwrap"(%1671) : (!hi.bool) -> i1
      }, {
        %1673 = "mid.unwrap"(%1620) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1674 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1675 = "mid.method_call"(%1674, %1673) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1676 = "hi.cast"(%1675) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1677 = "hi.cast"(%1676) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %1678 = "mid.unwrap"(%1677) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1679 = "mid.unwrap"(%1653) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1680 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1681 = "mid.parameterizations_array"(%1680) : (!llvm.ptr) -> !llvm.ptr
        %1682 = "mid.method_call"(%1681, %1679, %1678) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %1683 = "hi.cast"(%1682) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.bool]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.bool]>
        %1684 = "mid.checkflag"(%1683) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.bool]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1685 = "mid.unwrap"(%1684) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%1685) ({
          %1686 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1687 = "mid.unwrap"(%1676) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1688 = "mid.unwrap"(%1686) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1689 = "mid.arithmetic"(%1687, %1688) {"op" = "ADD"} : (i32, i32) -> i32
          %1690 = "mid.wrap"(%1689) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1691 = "hi.cast"(%1676) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %1692 = "mid.unwrap"(%1691) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1693 = "hi.cast"(%1690) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
          %1694 = "mid.unwrap"(%1693) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1695 = "mid.unwrap"(%1610) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1696 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1697 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1698 = "mid.parameterizations_array"(%1696, %1697) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1698, %1695, %1692, %1694) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1699 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %1700 = "hi.cast"(%1676) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %1701 = "mid.unwrap"(%1700) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1702 = "hi.cast"(%1699) {"from_typ" = !hi.bool, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "bool_typ", "to_typ_name" = "any_typ"} : (!hi.bool) -> !hi.type_param<"V", !hi.any, "CuckooMap">
          %1703 = "mid.unwrap"(%1702) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1704 = "mid.unwrap"(%1653) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1705 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1706 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
          %1707 = "mid.parameterizations_array"(%1705, %1706) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1707, %1704, %1701, %1703) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "bool_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1708 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1709 = "mid.unwrap"(%1654) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1710 = "mid.unwrap"(%1708) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1711 = "mid.arithmetic"(%1709, %1710) {"op" = "ADD"} : (i32, i32) -> i32
          %1712 = "mid.wrap"(%1711) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1713 = "hi.cast"(%1712) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.assign"(%1654, %1713) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        }) : (i1) -> ()
        %1714 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1715 = "mid.unwrap"(%1655) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1716 = "mid.unwrap"(%1714) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1717 = "mid.arithmetic"(%1715, %1716) {"op" = "ADD"} : (i32, i32) -> i32
        %1718 = "mid.wrap"(%1717) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1719 = "hi.cast"(%1718) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%1655, %1719) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %1720 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1721 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1722 = "mid.new"(%1721) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %1723 = "hi.cast"(%1587) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1724 = "mid.unwrap"(%1723) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1725 = "mid.unwrap"(%1722) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1726 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1727 = "mid.parameterizations_array"(%1726) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1727, %1725, %1724) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1728 = "mid.refer"(%1722) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %1729 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1730 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1731 = "hi.cast"(%1730) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.assign"(%1655, %1731) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1732 = "mid.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1733 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1734 = "mid.unwrap"(%1732) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1735 = "mid.arithmetic"(%1733, %1734) {"op" = "MUL"} : (i32, i32) -> i32
      %1736 = "mid.wrap"(%1735) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %1737 = "mid.unwrap"(%1729) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1738 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1739 = "mid.comparison"(%1737, %1738) {"op" = "LT"} : (i32, i32) -> i1
        %1740 = "mid.wrap"(%1739) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1741 = "mid.unwrap"(%1740) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        %1742 = "mid.logical"(%1741) ({
          %1743 = "mid.unwrap"(%1655) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1744 = "mid.unwrap"(%1736) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1745 = "mid.comparison"(%1743, %1744) {"op" = "LT"} : (i32, i32) -> i1
          %1746 = "mid.wrap"(%1745) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          func.return %1746 : !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        }) {"op" = "and"} : (i1) -> i1
        %1747 = "mid.wrap"(%1742) : (i1) -> !hi.bool
        %1748 = "mid.unwrap"(%1747) : (!hi.bool) -> i1
      }, {
        %1749 = "mid.unwrap"(%1630) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1750 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1751 = "mid.method_call"(%1750, %1749) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1752 = "hi.cast"(%1751) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1753 = "hi.cast"(%1752) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %1754 = "mid.unwrap"(%1753) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1755 = "mid.unwrap"(%1653) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1756 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1757 = "mid.parameterizations_array"(%1756) : (!llvm.ptr) -> !llvm.ptr
        %1758 = "mid.method_call"(%1757, %1755, %1754) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %1759 = "hi.cast"(%1758) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.bool]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.bool]>
        %1760 = "mid.checkflag"(%1759) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.bool]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1761 = "mid.unwrap"(%1760) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%1761) ({
          %1762 = "hi.cast"(%1729) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1763 = "mid.unwrap"(%1762) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1764 = "hi.cast"(%1752) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"T", !hi.any, "Array">
          %1765 = "mid.unwrap"(%1764) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1766 = "mid.unwrap"(%1728) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1767 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1768 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1769 = "mid.parameterizations_array"(%1767, %1768) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1769, %1766, %1763, %1765) {"offset" = 17 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1770 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1771 = "mid.unwrap"(%1729) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1772 = "mid.unwrap"(%1770) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1773 = "mid.arithmetic"(%1771, %1772) {"op" = "ADD"} : (i32, i32) -> i32
          %1774 = "mid.wrap"(%1773) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1775 = "hi.cast"(%1774) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.assign"(%1729, %1775) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        }) : (i1) -> ()
        %1776 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1777 = "mid.unwrap"(%1655) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1778 = "mid.unwrap"(%1776) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1779 = "mid.arithmetic"(%1777, %1778) {"op" = "ADD"} : (i32, i32) -> i32
        %1780 = "mid.wrap"(%1779) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1781 = "hi.cast"(%1780) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%1655, %1781) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %1782 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1783 = "mid.unwrap"(%1729) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1784 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1785 = "mid.comparison"(%1783, %1784) {"op" = "LT"} : (i32, i32) -> i1
      %1786 = "mid.wrap"(%1785) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1787 = "mid.unwrap"(%1786) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%1787) ({
        %1788 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1789 = "hi.cast"(%1788) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1790 = "mid.create_buffer"(%1789) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1791 = "mid.refer"(%1790) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1792 = "mid.literal"() {"typ" = !llvm.array<29 x i8>, "value" = "Warning: Could only generate "} : () -> !llvm.ptr
        %1793 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1791, %1793, %1792) {"typ" = !llvm.array<29 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1794 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1795 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1796 = "mid.unwrap"(%1791) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1797 = "mid.unwrap"(%1794) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1798 = "mid.unwrap"(%1795) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1799 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1800 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1801 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1802 = "hi.cast"(%1791) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1803 = "mid.unwrap"(%1802) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1804 = "hi.cast"(%1800) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1805 = "mid.unwrap"(%1804) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1806 = "hi.cast"(%1801) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1807 = "mid.unwrap"(%1806) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1808 = "mid.unwrap"(%1799) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1809 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1810 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1811 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1812 = "mid.parameterizations_array"(%1809, %1810, %1811) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1812, %1808, %1803, %1805, %1807) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %1813 = "hi.cast"(%1799) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1814 = "mid.unwrap"(%1813) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1815 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1816 = "mid.parameterizations_array"(%1815) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1816, %1814) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1817 = "hi.cast"(%1729) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1818 = "mid.unwrap"(%1817) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1819 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1820 = "mid.parameterizations_array"(%1819) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1820, %1818) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1821 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1822 = "hi.cast"(%1821) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1823 = "mid.create_buffer"(%1822) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1824 = "mid.refer"(%1823) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1825 = "mid.literal"() {"typ" = !llvm.array<22 x i8>, "value" = " guaranteed miss keys."} : () -> !llvm.ptr
        %1826 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1824, %1826, %1825) {"typ" = !llvm.array<22 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1827 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1828 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1829 = "mid.unwrap"(%1824) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1830 = "mid.unwrap"(%1827) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1831 = "mid.unwrap"(%1828) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1832 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1833 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1834 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1835 = "hi.cast"(%1824) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1836 = "mid.unwrap"(%1835) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1837 = "hi.cast"(%1833) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1838 = "mid.unwrap"(%1837) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1839 = "hi.cast"(%1834) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1840 = "mid.unwrap"(%1839) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1841 = "mid.unwrap"(%1832) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1842 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1843 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1844 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1845 = "mid.parameterizations_array"(%1842, %1843, %1844) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1845, %1841, %1836, %1838, %1840) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %1846 = "hi.cast"(%1832) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %1847 = "mid.unwrap"(%1846) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1848 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1849 = "mid.parameterizations_array"(%1848) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1849, %1847) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1850 = "hi.cast"(%1729) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%1587, %1850) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %1851 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1852 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1853 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1854 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %1855 = "mid.unwrap"(%1854) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1856 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1857 = "mid.comparison"(%1855, %1856) {"op" = "LT"} : (i32, i32) -> i1
        %1858 = "mid.wrap"(%1857) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1859 = "mid.unwrap"(%1858) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %1860 = "hi.cast"(%1854) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1861 = "mid.unwrap"(%1860) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1862 = "mid.unwrap"(%1728) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1863 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1864 = "mid.parameterizations_array"(%1863) : (!llvm.ptr) -> !llvm.ptr
        %1865 = "mid.method_call"(%1864, %1862, %1861) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %1866 = "hi.cast"(%1865) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1867 = "hi.cast"(%1866) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %1868 = "mid.unwrap"(%1867) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1869 = "mid.unwrap"(%1610) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1870 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1871 = "mid.parameterizations_array"(%1870) : (!llvm.ptr) -> !llvm.ptr
        %1872 = "mid.method_call"(%1871, %1869, %1868) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %1873 = "hi.cast"(%1872) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        %1874 = "mid.checkflag"(%1873) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1875 = "mid.unwrap"(%1874) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%1875) ({
          %1876 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1877 = "mid.unwrap"(%1852) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1878 = "mid.unwrap"(%1876) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1879 = "mid.arithmetic"(%1877, %1878) {"op" = "ADD"} : (i32, i32) -> i32
          %1880 = "mid.wrap"(%1879) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1881 = "hi.cast"(%1880) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.assign"(%1852, %1881) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        }, {
          %1882 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1883 = "mid.unwrap"(%1853) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1884 = "mid.unwrap"(%1882) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %1885 = "mid.arithmetic"(%1883, %1884) {"op" = "ADD"} : (i32, i32) -> i32
          %1886 = "mid.wrap"(%1885) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %1887 = "hi.cast"(%1886) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.assign"(%1853, %1887) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        }) : (i1) -> ()
        %1888 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1889 = "mid.unwrap"(%1854) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1890 = "mid.unwrap"(%1888) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1891 = "mid.arithmetic"(%1889, %1890) {"op" = "ADD"} : (i32, i32) -> i32
        %1892 = "mid.wrap"(%1891) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1893 = "hi.cast"(%1892) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%1854, %1893) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %1894 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1895 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1896 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1897 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1898 = "mid.unwrap"(%1896) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1899 = "mid.comparison"(%1897, %1898) {"op" = "GT"} : (i32, i32) -> i1
      %1900 = "mid.wrap"(%1899) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1901 = "mid.unwrap"(%1900) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%1901) ({
        %1902 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1903 = "mid.unwrap"(%1853) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1904 = "mid.unwrap"(%1902) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1905 = "mid.arithmetic"(%1903, %1904) {"op" = "MUL"} : (i32, i32) -> i32
        %1906 = "mid.wrap"(%1905) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1907 = "mid.unwrap"(%1906) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1908 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1909 = "mid.arithmetic"(%1907, %1908) {"op" = "DIV"} : (i32, i32) -> i32
        %1910 = "mid.wrap"(%1909) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1911 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1912 = "mid.unwrap"(%1910) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1913 = "mid.unwrap"(%1911) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1914 = "mid.comparison"(%1912, %1913) {"op" = "GE"} : (i32, i32) -> i1
        %1915 = "mid.wrap"(%1914) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1916 = "mid.unwrap"(%1915) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%1916) ({
          %1917 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %1918 = "hi.cast"(%1917) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%1895, %1918) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }, {
        %1919 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1920 = "mid.unwrap"(%1853) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1921 = "mid.unwrap"(%1919) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1922 = "mid.comparison"(%1920, %1921) {"op" = "NEQ"} : (i32, i32) -> i1
        %1923 = "mid.wrap"(%1922) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1924 = "mid.unwrap"(%1923) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%1924) ({
          %1925 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %1926 = "hi.cast"(%1925) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%1895, %1926) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }) : (i1) -> ()
      %1927 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1928 = "hi.cast"(%1927) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1929 = "mid.create_buffer"(%1928) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1930 = "mid.refer"(%1929) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1931 = "mid.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "Get Random Miss"} : () -> !llvm.ptr
      %1932 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1930, %1932, %1931) {"typ" = !llvm.array<15 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1933 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1934 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1935 = "mid.unwrap"(%1930) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1936 = "mid.unwrap"(%1933) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1937 = "mid.unwrap"(%1934) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1938 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1939 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1940 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1941 = "hi.cast"(%1930) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1942 = "mid.unwrap"(%1941) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1943 = "hi.cast"(%1939) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1944 = "mid.unwrap"(%1943) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1945 = "hi.cast"(%1940) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1946 = "mid.unwrap"(%1945) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1947 = "mid.unwrap"(%1938) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1948 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1949 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1950 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1951 = "mid.parameterizations_array"(%1948, %1949, %1950) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1951, %1947, %1942, %1944, %1946) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1952 = "mid.unwrap"(%1894) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1953 = "mid.unwrap"(%1851) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1954 = "mid.arithmetic"(%1952, %1953) {"op" = "SUB"} : (i64, i64) -> i64
      %1955 = "mid.wrap"(%1954) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1956 = "mid.unwrap"(%1938) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1957 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1958 = "mid.unwrap"(%1955) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      "mid.call"(%1956, %1957, %1958) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %1959 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1960 = "hi.cast"(%1959) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1961 = "mid.create_buffer"(%1960) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1962 = "mid.refer"(%1961) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1963 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %1964 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1962, %1964, %1963) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1965 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1966 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1967 = "mid.unwrap"(%1962) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1968 = "mid.unwrap"(%1965) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1969 = "mid.unwrap"(%1966) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1970 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1971 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1972 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1973 = "hi.cast"(%1962) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1974 = "mid.unwrap"(%1973) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1975 = "hi.cast"(%1971) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1976 = "mid.unwrap"(%1975) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1977 = "hi.cast"(%1972) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1978 = "mid.unwrap"(%1977) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1979 = "mid.unwrap"(%1970) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1980 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1981 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1982 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1983 = "mid.parameterizations_array"(%1980, %1981, %1982) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1983, %1979, %1974, %1976, %1978) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1984 = "hi.cast"(%1970) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %1985 = "mid.unwrap"(%1984) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1986 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1987 = "mid.parameterizations_array"(%1986) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%1987, %1985) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %1988 = "mid.unwrap"(%1895) : (!hi.bool) -> i1
      "mid.if"(%1988) ({
        %1989 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1990 = "hi.cast"(%1989) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %1991 = "mid.create_buffer"(%1990) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %1992 = "mid.refer"(%1991) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %1993 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %1994 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1992, %1994, %1993) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %1995 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1996 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %1997 = "mid.unwrap"(%1992) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %1998 = "mid.unwrap"(%1995) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %1999 = "mid.unwrap"(%1996) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2000 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2001 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2002 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2003 = "hi.cast"(%1992) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2004 = "mid.unwrap"(%2003) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2005 = "hi.cast"(%2001) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2006 = "mid.unwrap"(%2005) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2007 = "hi.cast"(%2002) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2008 = "mid.unwrap"(%2007) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2009 = "mid.unwrap"(%2000) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2010 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2011 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2012 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2013 = "mid.parameterizations_array"(%2010, %2011, %2012) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2013, %2009, %2004, %2006, %2008) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %2014 = "hi.cast"(%2000) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %2015 = "mid.unwrap"(%2014) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2016 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2017 = "mid.parameterizations_array"(%2016) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2017, %2015) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %2018 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2019 = "hi.cast"(%2018) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %2020 = "mid.create_buffer"(%2019) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %2021 = "mid.refer"(%2020) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2022 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %2023 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2021, %2023, %2022) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %2024 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2025 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2026 = "mid.unwrap"(%2021) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2027 = "mid.unwrap"(%2024) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2028 = "mid.unwrap"(%2025) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2029 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2030 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2031 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2032 = "hi.cast"(%2021) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2033 = "mid.unwrap"(%2032) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2034 = "hi.cast"(%2030) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2035 = "mid.unwrap"(%2034) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2036 = "hi.cast"(%2031) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2037 = "mid.unwrap"(%2036) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2038 = "mid.unwrap"(%2029) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2039 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2040 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2041 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2042 = "mid.parameterizations_array"(%2039, %2040, %2041) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2042, %2038, %2033, %2035, %2037) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %2043 = "hi.cast"(%2029) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %2044 = "mid.unwrap"(%2043) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2045 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2046 = "mid.parameterizations_array"(%2045) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2046, %2044) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
      %2047 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2048 = "hi.cast"(%2047) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2049 = "mid.create_buffer"(%2048) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2050 = "mid.refer"(%2049) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2051 = "mid.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "    (Misses: "} : () -> !llvm.ptr
      %2052 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2050, %2052, %2051) {"typ" = !llvm.array<13 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2053 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2054 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2055 = "mid.unwrap"(%2050) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2056 = "mid.unwrap"(%2053) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2057 = "mid.unwrap"(%2054) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2058 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2059 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2060 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2061 = "hi.cast"(%2050) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2062 = "mid.unwrap"(%2061) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2063 = "hi.cast"(%2059) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2064 = "mid.unwrap"(%2063) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2065 = "hi.cast"(%2060) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2066 = "mid.unwrap"(%2065) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2067 = "mid.unwrap"(%2058) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2068 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2069 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2070 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2071 = "mid.parameterizations_array"(%2068, %2069, %2070) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2071, %2067, %2062, %2064, %2066) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2072 = "hi.cast"(%2058) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2073 = "mid.unwrap"(%2072) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2074 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2075 = "mid.parameterizations_array"(%2074) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2075, %2073) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2076 = "hi.cast"(%1852) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2077 = "mid.unwrap"(%2076) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2078 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2079 = "mid.parameterizations_array"(%2078) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2079, %2077) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2080 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2081 = "hi.cast"(%2080) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2082 = "mid.create_buffer"(%2081) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2083 = "mid.refer"(%2082) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2084 = "mid.literal"() {"typ" = !llvm.array<8 x i8>, "value" = ", Hits: "} : () -> !llvm.ptr
      %2085 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2083, %2085, %2084) {"typ" = !llvm.array<8 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2086 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2087 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2088 = "mid.unwrap"(%2083) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2089 = "mid.unwrap"(%2086) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2090 = "mid.unwrap"(%2087) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2091 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2092 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2093 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2094 = "hi.cast"(%2083) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2095 = "mid.unwrap"(%2094) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2096 = "hi.cast"(%2092) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2097 = "mid.unwrap"(%2096) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2098 = "hi.cast"(%2093) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2099 = "mid.unwrap"(%2098) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2100 = "mid.unwrap"(%2091) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2101 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2102 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2103 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2104 = "mid.parameterizations_array"(%2101, %2102, %2103) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2104, %2100, %2095, %2097, %2099) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2105 = "hi.cast"(%2091) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2106 = "mid.unwrap"(%2105) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2107 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2108 = "mid.parameterizations_array"(%2107) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2108, %2106) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2109 = "hi.cast"(%1853) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2110 = "mid.unwrap"(%2109) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2111 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2112 = "mid.parameterizations_array"(%2111) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2112, %2110) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2113 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2114 = "hi.cast"(%2113) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2115 = "mid.create_buffer"(%2114) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2116 = "mid.refer"(%2115) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2117 = "mid.literal"() {"typ" = !llvm.array<1 x i8>, "value" = ")"} : () -> !llvm.ptr
      %2118 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2116, %2118, %2117) {"typ" = !llvm.array<1 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2119 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2120 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2121 = "mid.unwrap"(%2116) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2122 = "mid.unwrap"(%2119) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2123 = "mid.unwrap"(%2120) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2124 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2125 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2126 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2127 = "hi.cast"(%2116) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2128 = "mid.unwrap"(%2127) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2129 = "hi.cast"(%2125) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2130 = "mid.unwrap"(%2129) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2131 = "hi.cast"(%2126) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2132 = "mid.unwrap"(%2131) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2133 = "mid.unwrap"(%2124) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2134 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2135 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2136 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2137 = "mid.parameterizations_array"(%2134, %2135, %2136) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2137, %2133, %2128, %2130, %2132) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2138 = "hi.cast"(%2124) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2139 = "mid.unwrap"(%2138) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2140 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2141 = "mid.parameterizations_array"(%2140) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2141, %2139) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "benchmark_get_random_miss", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%2142 : i32):
      %2143 = "mid.wrap"(%2142) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2144 = "hi.cast"(%2143) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2145 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %2146 = "mid.wrap"(%2145) : (!llvm.ptr) -> !llvm.ptr
      %2147 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %2148 = "mid.wrap"(%2147) : (!llvm.ptr) -> !llvm.ptr
      %2149 = "mid.unwrap"(%2146) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %2150 = "mid.unwrap"(%2148) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %2151 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2152 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2153 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2154 = "mid.new"(%2151, %2152, %2153) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %2155 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %2156 = "mid.wrap"(%2155) : (!llvm.ptr) -> !llvm.ptr
      %2157 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %2158 = "mid.wrap"(%2157) : (!llvm.ptr) -> !llvm.ptr
      %2159 = "hi.cast"(%2156) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %2160 = "mid.unwrap"(%2159) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2161 = "hi.cast"(%2158) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %2162 = "mid.unwrap"(%2161) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %2163 = "mid.unwrap"(%2154) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2164 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2165 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2166 = "mid.parameterizations_array"(%2164, %2165) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2166, %2163, %2160, %2162) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %2167 = "mid.refer"(%2154) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %2168 = "mid.literal"() {"value" = 101112 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2169 = "mid.unwrap"(%2168) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2170 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %2171 = "mid.literal"() {"value" = 101112 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2172 = "hi.cast"(%2171) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2173 = "mid.unwrap"(%2172) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2174 = "mid.unwrap"(%2170) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2175 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2176 = "mid.parameterizations_array"(%2175) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2176, %2174, %2173) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %2177 = "mid.refer"(%2170) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %2178 = "mid.unwrap"(%2144) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2179 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2180 = "mid.new"(%2179) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %2181 = "hi.cast"(%2144) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2182 = "mid.unwrap"(%2181) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2183 = "mid.unwrap"(%2180) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2184 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2185 = "mid.parameterizations_array"(%2184) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2185, %2183, %2182) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %2186 = "mid.refer"(%2180) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %2187 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %2188 = "mid.wrap"(%2187) : (!llvm.ptr) -> !llvm.ptr
      %2189 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %2190 = "mid.wrap"(%2189) : (!llvm.ptr) -> !llvm.ptr
      %2191 = "mid.unwrap"(%2188) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %2192 = "mid.unwrap"(%2190) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %2193 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2194 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
      %2195 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["bool_typ"]], "name_hierarchy" = ["Pairi32._Bool", ["i32"], ["Bool"]]} : () -> !llvm.ptr
      %2196 = "mid.new"(%2193, %2194, %2195) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "CuckooMap", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>
      %2197 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %2198 = "mid.wrap"(%2197) : (!llvm.ptr) -> !llvm.ptr
      %2199 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %2200 = "mid.wrap"(%2199) : (!llvm.ptr) -> !llvm.ptr
      %2201 = "hi.cast"(%2198) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %2202 = "mid.unwrap"(%2201) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2203 = "hi.cast"(%2200) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>
      %2204 = "mid.unwrap"(%2203) : (!hi.function<[!hi.type_param<"K", !hi.any, "CuckooMap">, !hi.type_param<"K", !hi.any, "CuckooMap">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %2205 = "mid.unwrap"(%2196) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2206 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2207 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2208 = "mid.parameterizations_array"(%2206, %2207) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2208, %2205, %2202, %2204) {"offset" = 10 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %2209 = "mid.refer"(%2196) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>
      %2210 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2211 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2212 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2213 = "mid.unwrap"(%2144) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2214 = "mid.unwrap"(%2212) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2215 = "mid.arithmetic"(%2213, %2214) {"op" = "MUL"} : (i32, i32) -> i32
      %2216 = "mid.wrap"(%2215) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %2217 = "mid.unwrap"(%2210) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2218 = "mid.unwrap"(%2144) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2219 = "mid.comparison"(%2217, %2218) {"op" = "LT"} : (i32, i32) -> i1
        %2220 = "mid.wrap"(%2219) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2221 = "mid.unwrap"(%2220) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        %2222 = "mid.logical"(%2221) ({
          %2223 = "mid.unwrap"(%2211) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2224 = "mid.unwrap"(%2216) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2225 = "mid.comparison"(%2223, %2224) {"op" = "LT"} : (i32, i32) -> i1
          %2226 = "mid.wrap"(%2225) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          func.return %2226 : !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        }) {"op" = "and"} : (i1) -> i1
        %2227 = "mid.wrap"(%2222) : (i1) -> !hi.bool
        %2228 = "mid.unwrap"(%2227) : (!hi.bool) -> i1
      }, {
        %2229 = "mid.unwrap"(%2177) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2230 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2231 = "mid.method_call"(%2230, %2229) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2232 = "hi.cast"(%2231) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2233 = "hi.cast"(%2232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %2234 = "mid.unwrap"(%2233) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2235 = "mid.unwrap"(%2209) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2236 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2237 = "mid.parameterizations_array"(%2236) : (!llvm.ptr) -> !llvm.ptr
        %2238 = "mid.method_call"(%2237, %2235, %2234) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %2239 = "hi.cast"(%2238) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.bool]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.bool]>
        %2240 = "mid.checkflag"(%2239) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.bool]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2241 = "mid.unwrap"(%2240) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%2241) ({
          %2242 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2243 = "mid.unwrap"(%2232) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2244 = "mid.unwrap"(%2242) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2245 = "mid.arithmetic"(%2243, %2244) {"op" = "ADD"} : (i32, i32) -> i32
          %2246 = "mid.wrap"(%2245) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2247 = "hi.cast"(%2232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %2248 = "mid.unwrap"(%2247) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2249 = "hi.cast"(%2246) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"V", !hi.any, "CuckooMap">
          %2250 = "mid.unwrap"(%2249) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2251 = "mid.unwrap"(%2167) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2252 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2253 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2254 = "mid.parameterizations_array"(%2252, %2253) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2254, %2251, %2248, %2250) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2255 = "hi.cast"(%2210) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2256 = "mid.unwrap"(%2255) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2257 = "hi.cast"(%2232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"T", !hi.any, "Array">
          %2258 = "mid.unwrap"(%2257) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2259 = "mid.unwrap"(%2186) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2260 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2261 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2262 = "mid.parameterizations_array"(%2260, %2261) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2262, %2259, %2256, %2258) {"offset" = 17 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2263 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %2264 = "hi.cast"(%2232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
          %2265 = "mid.unwrap"(%2264) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2266 = "hi.cast"(%2263) {"from_typ" = !hi.bool, "to_typ" = !hi.type_param<"V", !hi.any, "CuckooMap">, "from_typ_name" = "bool_typ", "to_typ_name" = "any_typ"} : (!hi.bool) -> !hi.type_param<"V", !hi.any, "CuckooMap">
          %2267 = "mid.unwrap"(%2266) : (!hi.type_param<"V", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2268 = "mid.unwrap"(%2209) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2269 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2270 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
          %2271 = "mid.parameterizations_array"(%2269, %2270) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2271, %2268, %2265, %2267) {"offset" = 21 : i32, "vptrs" = ["i32_typ", "bool_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2272 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2273 = "mid.unwrap"(%2210) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2274 = "mid.unwrap"(%2272) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2275 = "mid.arithmetic"(%2273, %2274) {"op" = "ADD"} : (i32, i32) -> i32
          %2276 = "mid.wrap"(%2275) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2277 = "hi.cast"(%2276) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.assign"(%2210, %2277) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
        }) : (i1) -> ()
        %2278 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2279 = "mid.unwrap"(%2211) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2280 = "mid.unwrap"(%2278) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2281 = "mid.arithmetic"(%2279, %2280) {"op" = "ADD"} : (i32, i32) -> i32
        %2282 = "mid.wrap"(%2281) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2283 = "hi.cast"(%2282) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%2211, %2283) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %2284 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %2285 = "mid.unwrap"(%2210) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2286 = "mid.unwrap"(%2144) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2287 = "mid.comparison"(%2285, %2286) {"op" = "LT"} : (i32, i32) -> i1
      %2288 = "mid.wrap"(%2287) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2289 = "mid.unwrap"(%2288) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%2289) ({
        %2290 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2291 = "hi.cast"(%2290) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %2292 = "mid.create_buffer"(%2291) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %2293 = "mid.refer"(%2292) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2294 = "mid.literal"() {"typ" = !llvm.array<29 x i8>, "value" = "Warning: Could only generate "} : () -> !llvm.ptr
        %2295 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2293, %2295, %2294) {"typ" = !llvm.array<29 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %2296 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2297 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2298 = "mid.unwrap"(%2293) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2299 = "mid.unwrap"(%2296) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2300 = "mid.unwrap"(%2297) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2301 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2302 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2303 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2304 = "hi.cast"(%2293) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2305 = "mid.unwrap"(%2304) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2306 = "hi.cast"(%2302) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2307 = "mid.unwrap"(%2306) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2308 = "hi.cast"(%2303) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2309 = "mid.unwrap"(%2308) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2310 = "mid.unwrap"(%2301) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2311 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2312 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2313 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2314 = "mid.parameterizations_array"(%2311, %2312, %2313) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2314, %2310, %2305, %2307, %2309) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %2315 = "hi.cast"(%2301) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %2316 = "mid.unwrap"(%2315) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2317 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2318 = "mid.parameterizations_array"(%2317) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2318, %2316) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %2319 = "hi.cast"(%2210) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %2320 = "mid.unwrap"(%2319) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2321 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2322 = "mid.parameterizations_array"(%2321) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2322, %2320) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %2323 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2324 = "hi.cast"(%2323) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %2325 = "mid.create_buffer"(%2324) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %2326 = "mid.refer"(%2325) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2327 = "mid.literal"() {"typ" = !llvm.array<29 x i8>, "value" = " unique keys for remove test."} : () -> !llvm.ptr
        %2328 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2326, %2328, %2327) {"typ" = !llvm.array<29 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %2329 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2330 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2331 = "mid.unwrap"(%2326) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2332 = "mid.unwrap"(%2329) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2333 = "mid.unwrap"(%2330) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2334 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2335 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2336 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2337 = "hi.cast"(%2326) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2338 = "mid.unwrap"(%2337) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2339 = "hi.cast"(%2335) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2340 = "mid.unwrap"(%2339) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2341 = "hi.cast"(%2336) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2342 = "mid.unwrap"(%2341) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2343 = "mid.unwrap"(%2334) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2344 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2345 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2346 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2347 = "mid.parameterizations_array"(%2344, %2345, %2346) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2347, %2343, %2338, %2340, %2342) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %2348 = "hi.cast"(%2334) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %2349 = "mid.unwrap"(%2348) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2350 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2351 = "mid.parameterizations_array"(%2350) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2351, %2349) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %2352 = "hi.cast"(%2210) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%2144, %2352) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %2353 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2354 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2355 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %2356 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %2357 = "mid.unwrap"(%2356) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2358 = "mid.unwrap"(%2144) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2359 = "mid.comparison"(%2357, %2358) {"op" = "LT"} : (i32, i32) -> i1
        %2360 = "mid.wrap"(%2359) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2361 = "mid.unwrap"(%2360) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %2362 = "hi.cast"(%2356) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2363 = "mid.unwrap"(%2362) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2364 = "mid.unwrap"(%2186) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2365 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2366 = "mid.parameterizations_array"(%2365) : (!llvm.ptr) -> !llvm.ptr
        %2367 = "mid.method_call"(%2366, %2364, %2363) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %2368 = "hi.cast"(%2367) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2369 = "hi.cast"(%2368) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %2370 = "mid.unwrap"(%2369) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2371 = "mid.unwrap"(%2167) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2372 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2373 = "mid.parameterizations_array"(%2372) : (!llvm.ptr) -> !llvm.ptr
        %2374 = "mid.method_call"(%2373, %2371, %2370) {"offset" = 25 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %2375 = "hi.cast"(%2374) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        %2376 = "mid.checkflag"(%2375) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2377 = "mid.unwrap"(%2376) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %2378 = "hi.cast"(%2375) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.if"(%2377) ({
          %2379 = "hi.cast"(%2378) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2380 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2381 = "mid.unwrap"(%2368) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2382 = "mid.unwrap"(%2380) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2383 = "mid.arithmetic"(%2381, %2382) {"op" = "ADD"} : (i32, i32) -> i32
          %2384 = "mid.wrap"(%2383) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2385 = "mid.unwrap"(%2379) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2386 = "mid.unwrap"(%2384) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2387 = "mid.comparison"(%2385, %2386) {"op" = "NEQ"} : (i32, i32) -> i1
          %2388 = "mid.wrap"(%2387) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2389 = "mid.unwrap"(%2388) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
          "mid.if"(%2389) ({
            %2390 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %2391 = "hi.cast"(%2390) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%2355, %2391) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
            %2392 = "mid.literal"() {"value" = 46 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %2393 = "hi.cast"(%2392) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
            %2394 = "mid.create_buffer"(%2393) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
            %2395 = "mid.refer"(%2394) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
            %2396 = "mid.literal"() {"typ" = !llvm.array<45 x i8>, "value" = "Warning: Remove returned wrong value for key "} : () -> !llvm.ptr
            %2397 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
            "mid.buffer_set"(%2395, %2397, %2396) {"typ" = !llvm.array<45 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
            %2398 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %2399 = "mid.literal"() {"value" = 46 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %2400 = "mid.unwrap"(%2395) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
            %2401 = "mid.unwrap"(%2398) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
            %2402 = "mid.unwrap"(%2399) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
            %2403 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
            %2404 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %2405 = "mid.literal"() {"value" = 46 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %2406 = "hi.cast"(%2395) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
            %2407 = "mid.unwrap"(%2406) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
            %2408 = "hi.cast"(%2404) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %2409 = "mid.unwrap"(%2408) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
            %2410 = "hi.cast"(%2405) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
            %2411 = "mid.unwrap"(%2410) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
            %2412 = "mid.unwrap"(%2403) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
            %2413 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
            %2414 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %2415 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %2416 = "mid.parameterizations_array"(%2413, %2414, %2415) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
            "mid.method_call"(%2416, %2412, %2407, %2409, %2411) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
            %2417 = "hi.cast"(%2403) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
            %2418 = "mid.unwrap"(%2417) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
            %2419 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
            %2420 = "mid.parameterizations_array"(%2419) : (!llvm.ptr) -> !llvm.ptr
            "mid.class_method_call"(%2420, %2418) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
            %2421 = "hi.cast"(%2368) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
            %2422 = "mid.unwrap"(%2421) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
            %2423 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %2424 = "mid.parameterizations_array"(%2423) : (!llvm.ptr) -> !llvm.ptr
            "mid.class_method_call"(%2424, %2422) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          }) : (i1) -> ()
          %2425 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2426 = "mid.unwrap"(%2354) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2427 = "mid.unwrap"(%2425) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2428 = "mid.arithmetic"(%2426, %2427) {"op" = "ADD"} : (i32, i32) -> i32
          %2429 = "mid.wrap"(%2428) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2430 = "hi.cast"(%2429) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          "mid.assign"(%2354, %2430) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
          %2431 = "hi.cast"(%2379) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%2378, %2431) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }, {
          %2432 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %2433 = "hi.cast"(%2432) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%2355, %2433) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %2434 = "mid.literal"() {"value" = 38 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2435 = "hi.cast"(%2434) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %2436 = "mid.create_buffer"(%2435) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
          %2437 = "mid.refer"(%2436) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %2438 = "mid.literal"() {"typ" = !llvm.array<37 x i8>, "value" = "Warning: Remove returned Nil for key "} : () -> !llvm.ptr
          %2439 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
          "mid.buffer_set"(%2437, %2439, %2438) {"typ" = !llvm.array<37 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
          %2440 = "mid.literal"() {"value" = 37 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2441 = "mid.literal"() {"value" = 38 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2442 = "mid.unwrap"(%2437) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %2443 = "mid.unwrap"(%2440) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2444 = "mid.unwrap"(%2441) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2445 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
          %2446 = "mid.literal"() {"value" = 37 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2447 = "mid.literal"() {"value" = 38 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2448 = "hi.cast"(%2437) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %2449 = "mid.unwrap"(%2448) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %2450 = "hi.cast"(%2446) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2451 = "mid.unwrap"(%2450) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2452 = "hi.cast"(%2447) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2453 = "mid.unwrap"(%2452) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %2454 = "mid.unwrap"(%2445) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2455 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %2456 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2457 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2458 = "mid.parameterizations_array"(%2455, %2456, %2457) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2458, %2454, %2449, %2451, %2453) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
          %2459 = "hi.cast"(%2445) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
          %2460 = "mid.unwrap"(%2459) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %2461 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
          %2462 = "mid.parameterizations_array"(%2461) : (!llvm.ptr) -> !llvm.ptr
          "mid.class_method_call"(%2462, %2460) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2463 = "hi.cast"(%2368) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
          %2464 = "mid.unwrap"(%2463) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %2465 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2466 = "mid.parameterizations_array"(%2465) : (!llvm.ptr) -> !llvm.ptr
          "mid.class_method_call"(%2466, %2464) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2467 = "hi.cast"(%2378) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%2378, %2467) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %2468 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2469 = "mid.unwrap"(%2356) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2470 = "mid.unwrap"(%2468) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2471 = "mid.arithmetic"(%2469, %2470) {"op" = "ADD"} : (i32, i32) -> i32
        %2472 = "mid.wrap"(%2471) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2473 = "hi.cast"(%2472) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%2356, %2473) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %2474 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2475 = "mid.unwrap"(%2354) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2476 = "mid.unwrap"(%2144) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2477 = "mid.comparison"(%2475, %2476) {"op" = "NEQ"} : (i32, i32) -> i1
      %2478 = "mid.wrap"(%2477) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2479 = "mid.unwrap"(%2478) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%2479) ({
        %2480 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %2481 = "hi.cast"(%2480) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.assign"(%2355, %2481) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      }) : (i1) -> ()
      %2482 = "mid.unwrap"(%2167) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2483 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2484 = "mid.method_call"(%2483, %2482) {"offset" = 22 : i32, "vptrs" = [], "vtable_size" = 288 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2485 = "hi.cast"(%2484) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2486 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2487 = "mid.unwrap"(%2485) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2488 = "mid.unwrap"(%2486) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2489 = "mid.comparison"(%2487, %2488) {"op" = "NEQ"} : (i32, i32) -> i1
      %2490 = "mid.wrap"(%2489) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2491 = "mid.unwrap"(%2490) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%2491) ({
        %2492 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %2493 = "hi.cast"(%2492) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.assign"(%2355, %2493) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      }) : (i1) -> ()
      %2494 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2495 = "mid.unwrap"(%2144) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2496 = "mid.unwrap"(%2494) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2497 = "mid.comparison"(%2495, %2496) {"op" = "GT"} : (i32, i32) -> i1
      %2498 = "mid.wrap"(%2497) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2499 = "mid.unwrap"(%2498) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%2499) ({
        %2500 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2501 = "hi.cast"(%2500) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2502 = "mid.unwrap"(%2501) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2503 = "mid.unwrap"(%2186) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2504 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2505 = "mid.parameterizations_array"(%2504) : (!llvm.ptr) -> !llvm.ptr
        %2506 = "mid.method_call"(%2505, %2503, %2502) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %2507 = "hi.cast"(%2506) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2508 = "hi.cast"(%2507) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"K", !hi.any, "CuckooMap">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"K", !hi.any, "CuckooMap">
        %2509 = "mid.unwrap"(%2508) : (!hi.type_param<"K", !hi.any, "CuckooMap">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2510 = "mid.unwrap"(%2167) : (!hi.fatptr<"CuckooMap", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2511 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2512 = "mid.parameterizations_array"(%2511) : (!llvm.ptr) -> !llvm.ptr
        %2513 = "mid.method_call"(%2512, %2510, %2509) {"offset" = 23 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 288 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>
        %2514 = "hi.cast"(%2513) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "CuckooMap">, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        %2515 = "mid.checkflag"(%2514) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2516 = "mid.unwrap"(%2515) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %2517 = "hi.cast"(%2514) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.if"(%2516) ({
          %2518 = "hi.cast"(%2517) {"from_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %2519 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %2520 = "hi.cast"(%2519) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%2355, %2520) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %2521 = "hi.cast"(%2518) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>
          "mid.assign"(%2517, %2521) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>, !hi.union<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
        }) : (i1) -> ()
      }) : (i1) -> ()
      %2522 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2523 = "hi.cast"(%2522) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2524 = "mid.create_buffer"(%2523) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2525 = "mid.refer"(%2524) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2526 = "mid.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "Remove Random"} : () -> !llvm.ptr
      %2527 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2525, %2527, %2526) {"typ" = !llvm.array<13 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2528 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2529 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2530 = "mid.unwrap"(%2525) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2531 = "mid.unwrap"(%2528) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2532 = "mid.unwrap"(%2529) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2533 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2534 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2535 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2536 = "hi.cast"(%2525) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2537 = "mid.unwrap"(%2536) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2538 = "hi.cast"(%2534) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2539 = "mid.unwrap"(%2538) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2540 = "hi.cast"(%2535) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2541 = "mid.unwrap"(%2540) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2542 = "mid.unwrap"(%2533) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2543 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2544 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2545 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2546 = "mid.parameterizations_array"(%2543, %2544, %2545) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2546, %2542, %2537, %2539, %2541) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2547 = "mid.unwrap"(%2474) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %2548 = "mid.unwrap"(%2353) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %2549 = "mid.arithmetic"(%2547, %2548) {"op" = "SUB"} : (i64, i64) -> i64
      %2550 = "mid.wrap"(%2549) : (i64) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2551 = "mid.unwrap"(%2533) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2552 = "mid.unwrap"(%2144) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2553 = "mid.unwrap"(%2550) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      "mid.call"(%2551, %2552, %2553) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %2554 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2555 = "hi.cast"(%2554) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2556 = "mid.create_buffer"(%2555) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2557 = "mid.refer"(%2556) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2558 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %2559 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2557, %2559, %2558) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2560 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2561 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2562 = "mid.unwrap"(%2557) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2563 = "mid.unwrap"(%2560) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2564 = "mid.unwrap"(%2561) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2565 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2566 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2567 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2568 = "hi.cast"(%2557) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2569 = "mid.unwrap"(%2568) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2570 = "hi.cast"(%2566) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2571 = "mid.unwrap"(%2570) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2572 = "hi.cast"(%2567) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2573 = "mid.unwrap"(%2572) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2574 = "mid.unwrap"(%2565) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2575 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2576 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2577 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2578 = "mid.parameterizations_array"(%2575, %2576, %2577) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2578, %2574, %2569, %2571, %2573) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2579 = "hi.cast"(%2565) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2580 = "mid.unwrap"(%2579) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2581 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2582 = "mid.parameterizations_array"(%2581) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2582, %2580) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2583 = "mid.unwrap"(%2355) : (!hi.bool) -> i1
      "mid.if"(%2583) ({
        %2584 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2585 = "hi.cast"(%2584) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %2586 = "mid.create_buffer"(%2585) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %2587 = "mid.refer"(%2586) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2588 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %2589 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2587, %2589, %2588) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %2590 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2591 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2592 = "mid.unwrap"(%2587) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2593 = "mid.unwrap"(%2590) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2594 = "mid.unwrap"(%2591) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2595 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2596 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2597 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2598 = "hi.cast"(%2587) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2599 = "mid.unwrap"(%2598) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2600 = "hi.cast"(%2596) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2601 = "mid.unwrap"(%2600) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2602 = "hi.cast"(%2597) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2603 = "mid.unwrap"(%2602) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2604 = "mid.unwrap"(%2595) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2605 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2606 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2607 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2608 = "mid.parameterizations_array"(%2605, %2606, %2607) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2608, %2604, %2599, %2601, %2603) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %2609 = "hi.cast"(%2595) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %2610 = "mid.unwrap"(%2609) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2611 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2612 = "mid.parameterizations_array"(%2611) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2612, %2610) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %2613 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2614 = "hi.cast"(%2613) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %2615 = "mid.create_buffer"(%2614) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %2616 = "mid.refer"(%2615) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2617 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %2618 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2616, %2618, %2617) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %2619 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2620 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2621 = "mid.unwrap"(%2616) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2622 = "mid.unwrap"(%2619) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2623 = "mid.unwrap"(%2620) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2624 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2625 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2626 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2627 = "hi.cast"(%2616) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %2628 = "mid.unwrap"(%2627) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %2629 = "hi.cast"(%2625) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2630 = "mid.unwrap"(%2629) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2631 = "hi.cast"(%2626) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %2632 = "mid.unwrap"(%2631) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %2633 = "mid.unwrap"(%2624) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2634 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2635 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2636 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2637 = "mid.parameterizations_array"(%2634, %2635, %2636) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2637, %2633, %2628, %2630, %2632) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %2638 = "hi.cast"(%2624) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
        %2639 = "mid.unwrap"(%2638) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2640 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2641 = "mid.parameterizations_array"(%2640) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2641, %2639) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
      %2642 = "mid.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2643 = "hi.cast"(%2642) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2644 = "mid.create_buffer"(%2643) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2645 = "mid.refer"(%2644) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2646 = "mid.literal"() {"typ" = !llvm.array<20 x i8>, "value" = "    (Items removed: "} : () -> !llvm.ptr
      %2647 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2645, %2647, %2646) {"typ" = !llvm.array<20 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2648 = "mid.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2649 = "mid.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2650 = "mid.unwrap"(%2645) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2651 = "mid.unwrap"(%2648) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2652 = "mid.unwrap"(%2649) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2653 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2654 = "mid.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2655 = "mid.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2656 = "hi.cast"(%2645) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2657 = "mid.unwrap"(%2656) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2658 = "hi.cast"(%2654) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2659 = "mid.unwrap"(%2658) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2660 = "hi.cast"(%2655) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2661 = "mid.unwrap"(%2660) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2662 = "mid.unwrap"(%2653) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2663 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2664 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2665 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2666 = "mid.parameterizations_array"(%2663, %2664, %2665) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2666, %2662, %2657, %2659, %2661) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2667 = "hi.cast"(%2653) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2668 = "mid.unwrap"(%2667) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2669 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2670 = "mid.parameterizations_array"(%2669) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2670, %2668) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2671 = "hi.cast"(%2354) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2672 = "mid.unwrap"(%2671) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2673 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2674 = "mid.parameterizations_array"(%2673) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2674, %2672) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2675 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2676 = "hi.cast"(%2675) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2677 = "mid.create_buffer"(%2676) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2678 = "mid.refer"(%2677) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2679 = "mid.literal"() {"typ" = !llvm.array<1 x i8>, "value" = ")"} : () -> !llvm.ptr
      %2680 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2678, %2680, %2679) {"typ" = !llvm.array<1 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2681 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2682 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2683 = "mid.unwrap"(%2678) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2684 = "mid.unwrap"(%2681) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2685 = "mid.unwrap"(%2682) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2686 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2687 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2688 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2689 = "hi.cast"(%2678) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2690 = "mid.unwrap"(%2689) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2691 = "hi.cast"(%2687) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2692 = "mid.unwrap"(%2691) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2693 = "hi.cast"(%2688) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2694 = "mid.unwrap"(%2693) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2695 = "mid.unwrap"(%2686) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2696 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2697 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2698 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2699 = "mid.parameterizations_array"(%2696, %2697, %2698) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2699, %2695, %2690, %2692, %2694) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2700 = "hi.cast"(%2686) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2701 = "mid.unwrap"(%2700) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2702 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2703 = "mid.parameterizations_array"(%2702) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2703, %2701) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "benchmark_remove_random", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.main"() ({
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      "cf.br"() [^bb20] : () -> ()
    ^bb20:
      "cf.br"() [^bb21] : () -> ()
    ^bb21:
      "cf.br"() [^bb22] : () -> ()
    ^bb22:
      "cf.br"() [^bb23] : () -> ()
    ^bb23:
      "cf.br"() [^bb24] : () -> ()
    ^bb24:
      "cf.br"() [^bb25] : () -> ()
    ^bb25:
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      "cf.br"() [^bb27] : () -> ()
    ^bb27:
      "cf.br"() [^bb28] : () -> ()
    ^bb28:
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      "cf.br"() [^bb30] : () -> ()
    ^bb30:
      "cf.br"() [^bb31] : () -> ()
    ^bb31:
      "cf.br"() [^bb32] : () -> ()
    ^bb32:
      "cf.br"() [^bb33] : () -> ()
    ^bb33:
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      "cf.br"() [^bb35] : () -> ()
    ^bb35:
      "cf.br"() [^bb36] : () -> ()
    ^bb36:
      "cf.br"() [^bb37] : () -> ()
    ^bb37:
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      "cf.br"() [^bb39] : () -> ()
    ^bb39:
      "cf.br"() [^bb40] : () -> ()
    ^bb40:
      "cf.br"() [^bb41] : () -> ()
    ^bb41:
      "cf.br"() [^bb42] : () -> ()
    ^bb42:
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      "cf.br"() [^bb44] : () -> ()
    ^bb44:
      "cf.br"() [^bb45] : () -> ()
    ^bb45:
      "cf.br"() [^bb46] : () -> ()
    ^bb46:
      "cf.br"() [^bb47] : () -> ()
    ^bb47:
      "cf.br"() [^bb48] : () -> ()
    ^bb48:
      "cf.br"() [^bb49] : () -> ()
    ^bb49:
      "cf.br"() [^bb50] : () -> ()
    ^bb50:
      "cf.br"() [^bb51] : () -> ()
    ^bb51:
      "cf.br"() [^bb52] : () -> ()
    ^bb52:
      "cf.br"() [^bb53] : () -> ()
    ^bb53:
      "cf.br"() [^bb54] : () -> ()
    ^bb54:
      "cf.br"() [^bb55] : () -> ()
    ^bb55:
      "cf.br"() [^bb56] : () -> ()
    ^bb56:
      "cf.br"() [^bb57] : () -> ()
    ^bb57:
      "cf.br"() [^bb58] : () -> ()
    ^bb58:
      "cf.br"() [^bb59] : () -> ()
    ^bb59:
      "cf.br"() [^bb60] : () -> ()
    ^bb60:
      "cf.br"() [^bb61] : () -> ()
    ^bb61:
      "cf.br"() [^bb62] : () -> ()
    ^bb62:
      "cf.br"() [^bb63] : () -> ()
    ^bb63:
      "cf.br"() [^bb64] : () -> ()
    ^bb64:
      "cf.br"() [^bb65] : () -> ()
    ^bb65:
      "cf.br"() [^bb66] : () -> ()
    ^bb66:
      "cf.br"() [^bb67] : () -> ()
    ^bb67:
      "cf.br"() [^bb68] : () -> ()
    ^bb68:
      "cf.br"() [^bb69] : () -> ()
    ^bb69:
      "cf.br"() [^bb70] : () -> ()
    ^bb70:
      "cf.br"() [^bb71] : () -> ()
    ^bb71:
      "cf.br"() [^bb72] : () -> ()
    ^bb72:
      "cf.br"() [^bb73] : () -> ()
    ^bb73:
      "cf.br"() [^bb74] : () -> ()
    ^bb74:
      "cf.br"() [^bb75] : () -> ()
    ^bb75:
      "cf.br"() [^bb76] : () -> ()
    ^bb76:
      "cf.br"() [^bb77] : () -> ()
    ^bb77:
      "cf.br"() [^bb78] : () -> ()
    ^bb78:
      "cf.br"() [^bb79] : () -> ()
    ^bb79:
      "cf.br"() [^bb80] : () -> ()
    ^bb80:
      "cf.br"() [^bb81] : () -> ()
    ^bb81:
      "cf.br"() [^bb82] : () -> ()
    ^bb82:
      "cf.br"() [^bb83] : () -> ()
    ^bb83:
      "cf.br"() [^bb84] : () -> ()
    ^bb84:
      "cf.br"() [^bb85] : () -> ()
    ^bb85:
      "cf.br"() [^bb86] : () -> ()
    ^bb86:
      "cf.br"() [^bb87] : () -> ()
    ^bb87:
      "cf.br"() [^bb88] : () -> ()
    ^bb88:
      "cf.br"() [^bb89] : () -> ()
    ^bb89:
      "cf.br"() [^bb90] : () -> ()
    ^bb90:
      "cf.br"() [^bb91] : () -> ()
    ^bb91:
      "cf.br"() [^bb92] : () -> ()
    ^bb92:
      "cf.br"() [^bb93] : () -> ()
    ^bb93:
      "cf.br"() [^bb94] : () -> ()
    ^bb94:
      "cf.br"() [^bb95] : () -> ()
    ^bb95:
      "cf.br"() [^bb96] : () -> ()
    ^bb96:
      "cf.br"() [^bb97] : () -> ()
    ^bb97:
      "cf.br"() [^bb98] : () -> ()
    ^bb98:
      %2704 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2705 = "hi.cast"(%2704) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2706 = "mid.create_buffer"(%2705) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2707 = "mid.refer"(%2706) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2708 = "mid.literal"() {"typ" = !llvm.array<22 x i8>, "value" = "--- Map Benchmarks ---"} : () -> !llvm.ptr
      %2709 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2707, %2709, %2708) {"typ" = !llvm.array<22 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2710 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2711 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2712 = "mid.unwrap"(%2707) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2713 = "mid.unwrap"(%2710) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2714 = "mid.unwrap"(%2711) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2715 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2716 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2717 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2718 = "hi.cast"(%2707) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2719 = "mid.unwrap"(%2718) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2720 = "hi.cast"(%2716) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2721 = "mid.unwrap"(%2720) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2722 = "hi.cast"(%2717) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2723 = "mid.unwrap"(%2722) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2724 = "mid.unwrap"(%2715) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2725 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2726 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2727 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2728 = "mid.parameterizations_array"(%2725, %2726, %2727) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2728, %2724, %2719, %2721, %2723) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2729 = "hi.cast"(%2715) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2730 = "mid.unwrap"(%2729) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2731 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2732 = "mid.parameterizations_array"(%2731) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2732, %2730) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2733 = "mid.literal"() {"value" = 1000000 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2734 = "mid.unwrap"(%2733) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      "mid.call"(%2734) {"func_name" = "benchmark_insert_sequential", "ret_type" = !llvm.void} : (i32) -> ()
      %2735 = "mid.unwrap"(%2733) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      "mid.call"(%2735) {"func_name" = "benchmark_insert_random", "ret_type" = !llvm.void} : (i32) -> ()
      %2736 = "mid.unwrap"(%2733) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      "mid.call"(%2736) {"func_name" = "benchmark_get_sequential_hit", "ret_type" = !llvm.void} : (i32) -> ()
      %2737 = "mid.unwrap"(%2733) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      "mid.call"(%2737) {"func_name" = "benchmark_get_random_hit", "ret_type" = !llvm.void} : (i32) -> ()
      %2738 = "mid.unwrap"(%2733) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      "mid.call"(%2738) {"func_name" = "benchmark_get_random_miss", "ret_type" = !llvm.void} : (i32) -> ()
      %2739 = "mid.unwrap"(%2733) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      "mid.call"(%2739) {"func_name" = "benchmark_remove_random", "ret_type" = !llvm.void} : (i32) -> ()
      %2740 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2741 = "hi.cast"(%2740) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %2742 = "mid.create_buffer"(%2741) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %2743 = "mid.refer"(%2742) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2744 = "mid.literal"() {"typ" = !llvm.array<27 x i8>, "value" = "--- Benchmarks Complete ---"} : () -> !llvm.ptr
      %2745 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2743, %2745, %2744) {"typ" = !llvm.array<27 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %2746 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2747 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2748 = "mid.unwrap"(%2743) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2749 = "mid.unwrap"(%2746) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2750 = "mid.unwrap"(%2747) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2751 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2752 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2753 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2754 = "hi.cast"(%2743) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %2755 = "mid.unwrap"(%2754) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %2756 = "hi.cast"(%2752) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2757 = "mid.unwrap"(%2756) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2758 = "hi.cast"(%2753) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2759 = "mid.unwrap"(%2758) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %2760 = "mid.unwrap"(%2751) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2761 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2762 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2763 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2764 = "mid.parameterizations_array"(%2761, %2762, %2763) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2764, %2760, %2755, %2757, %2759) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 149 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %2765 = "hi.cast"(%2751) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>
      %2766 = "mid.unwrap"(%2765) : (!hi.union<[!hi.fatptr<"Representable">, !hi.fatptr<"Character">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.float, !hi.bool, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2767 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2768 = "mid.parameterizations_array"(%2767) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2768, %2766) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"main_name" = "_main_hash_benchmark"} : () -> ()
  }
}
