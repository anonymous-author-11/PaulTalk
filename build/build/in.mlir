builtin.module attributes  {"sym_name" = "ir"} {
  builtin.module attributes  {"sym_name" = "builtins"} {
    "mid.prelude"() : () -> ()
    "mid.typedef"() {"class_name" = "bool_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @bool_typ], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5801531371504802705 : i64, "base_typ" = i1, "data_size_fn" = "_data_size_bool_typ", "box_fn" = "_box_bool_typ", "unbox_fn" = "_unbox_bool_typ", "size_fn" = "_data_size_bool_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "i8_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @i8_typ], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 2582149688529881115 : i64, "base_typ" = i8, "data_size_fn" = "_data_size_i8_typ", "box_fn" = "_box_i8_typ", "unbox_fn" = "_unbox_i8_typ", "size_fn" = "_data_size_i8_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "i32_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, @i32_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 16193019123895293634 : i64, "base_typ" = i32, "data_size_fn" = "_data_size_i32_typ", "box_fn" = "_box_i32_typ", "unbox_fn" = "_unbox_i32_typ", "size_fn" = "_data_size_i32_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "i64_typ", "methods" = [], "hash_tbl" = [@any_typ, @Object, @i64_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 10976946829247779694 : i64, "base_typ" = i64, "data_size_fn" = "_data_size_i64_typ", "box_fn" = "_box_i64_typ", "unbox_fn" = "_unbox_i64_typ", "size_fn" = "_data_size_i64_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "i128_typ", "methods" = [], "hash_tbl" = [@Object, @i128_typ, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 9690865858240087975 : i64, "base_typ" = i128, "data_size_fn" = "_data_size_i128_typ", "box_fn" = "_box_i128_typ", "unbox_fn" = "_unbox_i128_typ", "size_fn" = "_data_size_i128_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "f64_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @f64_typ], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17689428533612252835 : i64, "base_typ" = f64, "data_size_fn" = "_data_size_f64_typ", "box_fn" = "_box_f64_typ", "unbox_fn" = "_unbox_f64_typ", "size_fn" = "_data_size_f64_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "nil_typ", "methods" = [], "hash_tbl" = [@nil_typ, @any_typ], "offset_tbl" = [10 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 13319937214253225933 : i64, "base_typ" = !llvm.array<0 x i8>, "data_size_fn" = "_data_size_nil_typ", "box_fn" = "_box_nil_typ", "unbox_fn" = "_unbox_nil_typ", "size_fn" = "_data_size_nil_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "any_typ", "methods" = [], "hash_tbl" = [@any_typ], "offset_tbl" = [10 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 3084208142191802847 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "data_size_fn" = "_data_size_any_typ", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_data_size_any_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "nothing_typ", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @nothing_typ], "offset_tbl" = [0 : i32, 10 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 15112287910276180238 : i64, "base_typ" = !llvm.array<0 x i8>, "data_size_fn" = "_data_size_nothing_typ", "box_fn" = "_box_nothing_typ", "unbox_fn" = "_unbox_nothing_typ", "size_fn" = "_data_size_nothing_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "coroutine_typ", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @coroutine_typ], "offset_tbl" = [0 : i32, 10 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 7194361020959218064 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_coroutine_typ", "box_fn" = "_box_coroutine_typ", "unbox_fn" = "_unbox_coroutine_typ", "size_fn" = "_data_size_coroutine_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "function_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, @function_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 7927147055246173914 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_function_typ", "box_fn" = "_box_function_typ", "unbox_fn" = "_unbox_function_typ", "size_fn" = "_data_size_function_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "buffer_typ", "methods" = [], "hash_tbl" = [@Object, @buffer_typ, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 18128551326514141379 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_buffer_typ", "box_fn" = "_box_buffer_typ", "unbox_fn" = "_unbox_buffer_typ", "size_fn" = "_data_size_buffer_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "tuple_typ", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @tuple_typ], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 3422634369532007740 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_tuple_typ", "box_fn" = "_box_tuple_typ", "unbox_fn" = "_unbox_tuple_typ", "size_fn" = "_data_size_tuple_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "union_typ", "methods" = [], "hash_tbl" = [@union_typ, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 10903510294711884876 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, i8)>, "data_size_fn" = "_data_size_union_typ", "box_fn" = "_box_union_typ", "unbox_fn" = "_unbox_union_typ", "size_fn" = "_data_size_union_typ"} : () -> ()
    "mid.typedef"() {"class_name" = "Object", "methods" = [], "hash_tbl" = [@Object, @any_typ], "offset_tbl" = [10 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 3282773614056351330 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Object", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Object", "types" = []} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_bool_typ", "types" = [i1]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_bool_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_bool_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_i8_typ", "types" = [i8]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_i8_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_i8_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_i32_typ", "types" = [i32]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_i32_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_i32_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_i64_typ", "types" = [i64]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_i64_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_i64_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_i128_typ", "types" = [i128]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_i128_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_i128_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_f64_typ", "types" = [f64]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_f64_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_f64_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_nil_typ", "types" = [!llvm.array<0 x i8>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_nil_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_nil_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_any_typ", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_nothing_typ", "types" = [!llvm.array<0 x i8>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_nothing_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_nothing_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_coroutine_typ", "types" = [!llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_coroutine_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_coroutine_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_function_typ", "types" = [!llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_function_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_function_typ"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_buffer_typ", "types" = [!llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_buffer_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_buffer_typ"} : () -> ()
    "mid.box_def"() {"meth_name" = "_box_tuple_typ"} : () -> ()
    "mid.unbox_def"() {"meth_name" = "_unbox_tuple_typ"} : () -> ()
    "mid.box_union_def"() {"meth_name" = "_box_union_typ"} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "iteration"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.typedef"() {"class_name" = "Pair", "methods" = [@Pair_field_Pair_0, @Pair_field_Pair_1, @Pair_field_first, @Pair_field_second, @Pair_B_first_, @Pair_B_second_, @Pair_B__set_first_valueT, @Pair_B__set_second_valueU, @Pair_B_init_firstT_secondU, @Pair_first_, @Pair_second_, @Pair__set_first_valueT, @Pair__set_second_valueU, @Pair_init_firstT_secondU], "hash_tbl" = [@Object, @any_typ, @Pair, 18446744073709551615 : i64], "offset_tbl" = [24 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9197944775169318296 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Pair", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Iterator", "methods" = [], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Iterator], "offset_tbl" = [13 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8673632051301757104 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Iterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Iterable", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Iterable, @any_typ, @Object], "offset_tbl" = [0 : i32, 10 : i32, 10 : i32, 35 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 3037712219555723519 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Iterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ConstantTimeIterator", "methods" = [], "hash_tbl" = [@Object, @ConstantTimeIterator, @any_typ, @Iterator], "offset_tbl" = [16 : i32, 10 : i32, 10 : i32, 13 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 7049076106841707882 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_ConstantTimeIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "CoroIterator", "methods" = [@CoroIterator_field_CoroIterator_0, @CoroIterator_field_coro, @CoroIterator_B_init_coroCoroutine_to_Nothing, @CoroIterator_B_next_, @CoroIterator_init_coroCoroutine_to_Nothing, @CoroIterator_next_, @CoroIterator_field_CoroIterator_0, @CoroIterator_B_next_, @CoroIterator_next_], "hash_tbl" = [@CoroIterator, @Object, @any_typ, @Iterator], "offset_tbl" = [10 : i32, 19 : i32, 10 : i32, 16 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 15870106145373149135 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_CoroIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Enumerated", "methods" = [@Enumerated_field_Enumerated_0, @Enumerated_field_Enumerated_1, @Enumerated_field_iterable, @Enumerated_B_init_iterableIterableT, @Enumerated_B_iterator_, @Enumerated_B_each_fFunctionT_to_Nothing, @Enumerated_B_reduce_accumulatorT_fFunctionT._T_to_T, @Enumerated_B_all_fFunctionT_to_Bool, @Enumerated_B_any_fFunctionT_to_Bool, @Enumerated_B_enumerate_, @Enumerated_B_map_fFunctionT_to_U, @Enumerated_B_filter_fFunctionT_to_Bool, @Enumerated_B_chain_otherIterableT, @Enumerated_B_interleave_otherIterableT, @Enumerated_B_zip_otherIterableU, @Enumerated_B_product_otherIterableU, @Enumerated_init_iterableIterableT, @Enumerated_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Enumerated_field_Enumerated_1, @Enumerated_B_iterator_, @Enumerated_B_each_fFunctionT_to_Nothing, @Enumerated_B_reduce_accumulatorT_fFunctionT._T_to_T, @Enumerated_B_all_fFunctionT_to_Bool, @Enumerated_B_any_fFunctionT_to_Bool, @Enumerated_B_enumerate_, @Enumerated_B_map_fFunctionT_to_U, @Enumerated_B_filter_fFunctionT_to_Bool, @Enumerated_B_chain_otherIterableT, @Enumerated_B_interleave_otherIterableT, @Enumerated_B_zip_otherIterableU, @Enumerated_B_product_otherIterableU, @Enumerated_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Enumerated, @Iterable, @any_typ, @Object], "offset_tbl" = [10 : i32, 39 : i32, 10 : i32, 64 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 6044713360068526275 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Enumerated", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Enumerator", "methods" = [@Enumerator_field_Enumerator_0, @Enumerator_field_Enumerator_1, @Enumerator_field_iterator, @Enumerator_field_index, @Enumerator_B_init_iteratorIteratorT, @Enumerator_B_next_, @Enumerator_init_iteratorIteratorT, @Enumerator_next_, @Enumerator_field_Enumerator_1, @Enumerator_B_next_, @Enumerator_next_], "hash_tbl" = [@any_typ, @Object, @Iterator, @Enumerator], "offset_tbl" = [10 : i32, 21 : i32, 18 : i32, 10 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 15011521941800397744 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_Enumerator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Mapped", "methods" = [@Mapped_field_Mapped_0, @Mapped_field_Mapped_1, @Mapped_field_iterable, @Mapped_field_f, @Mapped_B_init_iterableIterableT_fFunctionT_to_U, @Mapped_B_iterator_, @Mapped_B_each_fFunctionT_to_Nothing, @Mapped_B_reduce_accumulatorT_fFunctionT._T_to_T, @Mapped_B_all_fFunctionT_to_Bool, @Mapped_B_any_fFunctionT_to_Bool, @Mapped_B_enumerate_, @Mapped_B_map_fFunctionT_to_U, @Mapped_B_filter_fFunctionT_to_Bool, @Mapped_B_chain_otherIterableT, @Mapped_B_interleave_otherIterableT, @Mapped_B_zip_otherIterableU, @Mapped_B_product_otherIterableU, @Mapped_init_iterableIterableT_fFunctionT_to_U, @Mapped_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Mapped_field_Mapped_1, @Mapped_B_iterator_, @Mapped_B_each_fFunctionT_to_Nothing, @Mapped_B_reduce_accumulatorT_fFunctionT._T_to_T, @Mapped_B_all_fFunctionT_to_Bool, @Mapped_B_any_fFunctionT_to_Bool, @Mapped_B_enumerate_, @Mapped_B_map_fFunctionT_to_U, @Mapped_B_filter_fFunctionT_to_Bool, @Mapped_B_chain_otherIterableT, @Mapped_B_interleave_otherIterableT, @Mapped_B_zip_otherIterableU, @Mapped_B_product_otherIterableU, @Mapped_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Mapped, @Iterable, @any_typ, @Object], "offset_tbl" = [10 : i32, 40 : i32, 10 : i32, 65 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 638460123129944711 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_Mapped", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Mapper", "methods" = [@Mapper_field_Mapper_0, @Mapper_field_Mapper_1, @Mapper_field_iterator, @Mapper_field_f, @Mapper_B_init_iteratorIteratorT_fFunctionT_to_U, @Mapper_B_next_, @Mapper_init_iteratorIteratorT_fFunctionT_to_U, @Mapper_next_, @Mapper_field_Mapper_1, @Mapper_B_next_, @Mapper_next_], "hash_tbl" = [@Mapper, @Object, @any_typ, @Iterator], "offset_tbl" = [10 : i32, 21 : i32, 10 : i32, 18 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 11197507040849851642 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_Mapper", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Filtered", "methods" = [@Filtered_field_Filtered_0, @Filtered_field_iterable, @Filtered_field_f, @Filtered_B_init_iterableIterableT_fFunctionT_to_Bool, @Filtered_B_iterator_, @Filtered_B_each_fFunctionT_to_Nothing, @Filtered_B_reduce_accumulatorT_fFunctionT._T_to_T, @Filtered_B_all_fFunctionT_to_Bool, @Filtered_B_any_fFunctionT_to_Bool, @Filtered_B_enumerate_, @Filtered_B_map_fFunctionT_to_U, @Filtered_B_filter_fFunctionT_to_Bool, @Filtered_B_chain_otherIterableT, @Filtered_B_interleave_otherIterableT, @Filtered_B_zip_otherIterableU, @Filtered_B_product_otherIterableU, @Filtered_init_iterableIterableT_fFunctionT_to_Bool, @Filtered_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Filtered_field_Filtered_0, @Filtered_B_iterator_, @Filtered_B_each_fFunctionT_to_Nothing, @Filtered_B_reduce_accumulatorT_fFunctionT._T_to_T, @Filtered_B_all_fFunctionT_to_Bool, @Filtered_B_any_fFunctionT_to_Bool, @Filtered_B_enumerate_, @Filtered_B_map_fFunctionT_to_U, @Filtered_B_filter_fFunctionT_to_Bool, @Filtered_B_chain_otherIterableT, @Filtered_B_interleave_otherIterableT, @Filtered_B_zip_otherIterableU, @Filtered_B_product_otherIterableU, @Filtered_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Filtered, @Iterable, @any_typ, @Object], "offset_tbl" = [10 : i32, 39 : i32, 10 : i32, 64 : i32], "prime" = 4611686018427389201 : i64, "hash_id" = 17366719772130257163 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_Filtered", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Filterer", "methods" = [@Filterer_field_Filterer_0, @Filterer_field_iterator, @Filterer_field_f, @Filterer_B_init_iteratorIteratorT_fFunctionT_to_Bool, @Filterer_B_next_, @Filterer_init_iteratorIteratorT_fFunctionT_to_Bool, @Filterer_next_, @Filterer_field_Filterer_0, @Filterer_B_next_, @Filterer_next_], "hash_tbl" = [@Filterer, @Iterator, @any_typ, @Object], "offset_tbl" = [10 : i32, 17 : i32, 10 : i32, 20 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 3681499794063910215 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_Filterer", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Chained", "methods" = [@Chained_field_Chained_0, @Chained_field_first, @Chained_field_second, @Chained_B_init_firstIterableT_secondIterableT, @Chained_B_iterator_, @Chained_B_each_fFunctionT_to_Nothing, @Chained_B_reduce_accumulatorT_fFunctionT._T_to_T, @Chained_B_all_fFunctionT_to_Bool, @Chained_B_any_fFunctionT_to_Bool, @Chained_B_enumerate_, @Chained_B_map_fFunctionT_to_U, @Chained_B_filter_fFunctionT_to_Bool, @Chained_B_chain_otherIterableT, @Chained_B_interleave_otherIterableT, @Chained_B_zip_otherIterableU, @Chained_B_product_otherIterableU, @Chained_init_firstIterableT_secondIterableT, @Chained_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Chained_field_Chained_0, @Chained_B_iterator_, @Chained_B_each_fFunctionT_to_Nothing, @Chained_B_reduce_accumulatorT_fFunctionT._T_to_T, @Chained_B_all_fFunctionT_to_Bool, @Chained_B_any_fFunctionT_to_Bool, @Chained_B_enumerate_, @Chained_B_map_fFunctionT_to_U, @Chained_B_filter_fFunctionT_to_Bool, @Chained_B_chain_otherIterableT, @Chained_B_interleave_otherIterableT, @Chained_B_zip_otherIterableU, @Chained_B_product_otherIterableU, @Chained_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Iterable, @Object, @any_typ, @Chained], "offset_tbl" = [39 : i32, 64 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 14234841768326396864 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Chained", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Chainer", "methods" = [@Chainer_field_Chainer_0, @Chainer_field_first, @Chainer_field_second, @Chainer_field_on_first, @Chainer_B_init_firstIteratorT_secondIteratorT, @Chainer_B_next_, @Chainer_init_firstIteratorT_secondIteratorT, @Chainer_next_, @Chainer_field_Chainer_0, @Chainer_B_next_, @Chainer_next_], "hash_tbl" = [@Object, @Chainer, @any_typ, @Iterator], "offset_tbl" = [21 : i32, 10 : i32, 10 : i32, 18 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 1602305534081450710 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_Chainer", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Interleaved", "methods" = [@Interleaved_field_Interleaved_0, @Interleaved_field_first, @Interleaved_field_second, @Interleaved_B_init_firstIterableT_secondIterableT, @Interleaved_B_iterator_, @Interleaved_B_each_fFunctionT_to_Nothing, @Interleaved_B_reduce_accumulatorT_fFunctionT._T_to_T, @Interleaved_B_all_fFunctionT_to_Bool, @Interleaved_B_any_fFunctionT_to_Bool, @Interleaved_B_enumerate_, @Interleaved_B_map_fFunctionT_to_U, @Interleaved_B_filter_fFunctionT_to_Bool, @Interleaved_B_chain_otherIterableT, @Interleaved_B_interleave_otherIterableT, @Interleaved_B_zip_otherIterableU, @Interleaved_B_product_otherIterableU, @Interleaved_init_firstIterableT_secondIterableT, @Interleaved_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Interleaved_field_Interleaved_0, @Interleaved_B_iterator_, @Interleaved_B_each_fFunctionT_to_Nothing, @Interleaved_B_reduce_accumulatorT_fFunctionT._T_to_T, @Interleaved_B_all_fFunctionT_to_Bool, @Interleaved_B_any_fFunctionT_to_Bool, @Interleaved_B_enumerate_, @Interleaved_B_map_fFunctionT_to_U, @Interleaved_B_filter_fFunctionT_to_Bool, @Interleaved_B_chain_otherIterableT, @Interleaved_B_interleave_otherIterableT, @Interleaved_B_zip_otherIterableU, @Interleaved_B_product_otherIterableU, @Interleaved_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Object, @Interleaved, @Iterable], "offset_tbl" = [10 : i32, 64 : i32, 10 : i32, 39 : i32], "prime" = 4611686018427388429 : i64, "hash_id" = 1225269988638598324 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Interleaved", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Interleaver", "methods" = [@Interleaver_field_Interleaver_0, @Interleaver_field_first, @Interleaver_field_second, @Interleaver_field_on_first, @Interleaver_B_init_firstIteratorT_secondIteratorT, @Interleaver_B_next_, @Interleaver_init_firstIteratorT_secondIteratorT, @Interleaver_next_, @Interleaver_field_Interleaver_0, @Interleaver_B_next_, @Interleaver_next_], "hash_tbl" = [@Interleaver, @Object, @any_typ, @Iterator], "offset_tbl" = [10 : i32, 21 : i32, 10 : i32, 18 : i32], "prime" = 4611686018427388361 : i64, "hash_id" = 18121227488500540251 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_Interleaver", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Zipped", "methods" = [@Zipped_field_Zipped_0, @Zipped_field_Zipped_1, @Zipped_field_Zipped_2, @Zipped_field_first, @Zipped_field_second, @Zipped_B_init_firstIterableT_secondIterableU, @Zipped_B_iterator_, @Zipped_B_each_fFunctionT_to_Nothing, @Zipped_B_reduce_accumulatorT_fFunctionT._T_to_T, @Zipped_B_all_fFunctionT_to_Bool, @Zipped_B_any_fFunctionT_to_Bool, @Zipped_B_enumerate_, @Zipped_B_map_fFunctionT_to_U, @Zipped_B_filter_fFunctionT_to_Bool, @Zipped_B_chain_otherIterableT, @Zipped_B_interleave_otherIterableT, @Zipped_B_zip_otherIterableU, @Zipped_B_product_otherIterableU, @Zipped_init_firstIterableT_secondIterableU, @Zipped_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Zipped_field_Zipped_2, @Zipped_B_iterator_, @Zipped_B_each_fFunctionT_to_Nothing, @Zipped_B_reduce_accumulatorT_fFunctionT._T_to_T, @Zipped_B_all_fFunctionT_to_Bool, @Zipped_B_any_fFunctionT_to_Bool, @Zipped_B_enumerate_, @Zipped_B_map_fFunctionT_to_U, @Zipped_B_filter_fFunctionT_to_Bool, @Zipped_B_chain_otherIterableT, @Zipped_B_interleave_otherIterableT, @Zipped_B_zip_otherIterableU, @Zipped_B_product_otherIterableU, @Zipped_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Object, @Zipped, @Iterable], "offset_tbl" = [10 : i32, 66 : i32, 10 : i32, 41 : i32], "prime" = 4611686018427388429 : i64, "hash_id" = 7357168971761641759 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Zipped", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Zipper", "methods" = [@Zipper_field_Zipper_0, @Zipper_field_Zipper_1, @Zipper_field_Zipper_2, @Zipper_field_first, @Zipper_field_second, @Zipper_B_init_firstIteratorT_secondIteratorU, @Zipper_B_next_, @Zipper_init_firstIteratorT_secondIteratorU, @Zipper_next_, @Zipper_field_Zipper_2, @Zipper_B_next_, @Zipper_next_], "hash_tbl" = [@Object, @Zipper, @any_typ, @Iterator], "offset_tbl" = [22 : i32, 10 : i32, 10 : i32, 19 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 17944011671398303742 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Zipper", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Products", "methods" = [@Products_field_Products_0, @Products_field_Products_1, @Products_field_Products_2, @Products_field_first, @Products_field_second, @Products_B_init_firstIterableT_secondIterableU, @Products_B_iterator_, @Products_B_each_fFunctionT_to_Nothing, @Products_B_reduce_accumulatorT_fFunctionT._T_to_T, @Products_B_all_fFunctionT_to_Bool, @Products_B_any_fFunctionT_to_Bool, @Products_B_enumerate_, @Products_B_map_fFunctionT_to_U, @Products_B_filter_fFunctionT_to_Bool, @Products_B_chain_otherIterableT, @Products_B_interleave_otherIterableT, @Products_B_zip_otherIterableU, @Products_B_product_otherIterableU, @Products_init_firstIterableT_secondIterableU, @Products_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Products_field_Products_2, @Products_B_iterator_, @Products_B_each_fFunctionT_to_Nothing, @Products_B_reduce_accumulatorT_fFunctionT._T_to_T, @Products_B_all_fFunctionT_to_Bool, @Products_B_any_fFunctionT_to_Bool, @Products_B_enumerate_, @Products_B_map_fFunctionT_to_U, @Products_B_filter_fFunctionT_to_Bool, @Products_B_chain_otherIterableT, @Products_B_interleave_otherIterableT, @Products_B_zip_otherIterableU, @Products_B_product_otherIterableU, @Products_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Iterable, @any_typ, @Products, @Object], "offset_tbl" = [41 : i32, 10 : i32, 10 : i32, 66 : i32], "prime" = 4611686018427388477 : i64, "hash_id" = 3952308882273721422 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Products", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Productizer", "methods" = [@Productizer_field_Productizer_0, @Productizer_field_Productizer_1, @Productizer_field_Productizer_2, @Productizer_field_first_iterator, @Productizer_field_second_iterator, @Productizer_field_second, @Productizer_field_current_first, @Productizer_B_init_first_iteratorIteratorT_secondIterableU, @Productizer_B_next_, @Productizer_init_first_iteratorIteratorT_secondIterableU, @Productizer_next_, @Productizer_field_Productizer_2, @Productizer_B_next_, @Productizer_next_], "hash_tbl" = [@Productizer, @Object, @any_typ, @Iterator], "offset_tbl" = [10 : i32, 24 : i32, 10 : i32, 21 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 14208914619027015407 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Productizer", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Pair", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Pair_field_Pair_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Pair_field_Pair_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Pair_getter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Pair_setter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Pair_field_first", "getter_name" = "Pair_getter_first", "setter_name" = "Pair_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Pair_getter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Pair_setter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Pair_field_second", "getter_name" = "Pair_getter_second", "setter_name" = "Pair_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr):
      %3 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %4 = "hi.cast"(%3) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %5 = "mid.get_field"(%4) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.type_param<"T", !hi.any, "Pair">
      %6 = "hi.cast"(%5) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      %7 = "hi.cast"(%6) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      "mid.return"(%7) : (!hi.type_param<"T", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_first_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%8 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9 : !llvm.ptr):
      %10 = "mid.invariant"(%9) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %11 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %12 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%12, %11) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %13 = "llvm.extractvalue"(%8) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %14 = "llvm.load"(%11) : (!llvm.ptr) -> i32
      %15 = "llvm.getelementptr"(%13, %14) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %16 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %17 = "llvm.getelementptr"(%15, %16) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%17) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_first_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb4(%18 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %19 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %20 : !llvm.ptr):
      %21 = "mid.wrap"(%18) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %22 = "hi.cast"(%21) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %23 = "mid.get_field"(%22) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.type_param<"U", !hi.any, "Pair">
      %24 = "hi.cast"(%23) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      %25 = "hi.cast"(%24) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      "mid.return"(%25) : (!hi.type_param<"U", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_second_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%26 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %27 : !llvm.ptr):
      %28 = "mid.invariant"(%27) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %29 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %30 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%30, %29) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %31 = "llvm.extractvalue"(%26) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %32 = "llvm.load"(%29) : (!llvm.ptr) -> i32
      %33 = "llvm.getelementptr"(%31, %32) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %34 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %35 = "llvm.getelementptr"(%33, %34) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%35) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_second_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb8(%36 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %37 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %38 : !llvm.ptr, %39 : !llvm.struct<(!llvm.ptr, i160)>):
      %40 = "mid.wrap"(%36) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %41 = "hi.cast"(%40) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %42 = "mid.wrap"(%39) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Pair">
      %43 = "hi.cast"(%42) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      %44 = "hi.cast"(%43) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      "mid.set_field"(%41, %44) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, !hi.type_param<"T", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair__set_first_valueT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb9(%45 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %46 : !llvm.ptr):
      %47 = "mid.invariant"(%46) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %48 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %49 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%49, %48) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb10:
      %50 = "llvm.getelementptr"(%46) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %51 = "mid.checkflag"(%50) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %52 = "llvm.load"(%51) : (!hi.bool) -> i1
      "cf.cond_br"(%52) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb12:
      %53 = "llvm.extractvalue"(%45) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %54 = "llvm.load"(%48) : (!llvm.ptr) -> i32
      %55 = "llvm.getelementptr"(%53, %54) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %56 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %57 = "llvm.getelementptr"(%55, %56) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%57) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B__set_first_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb13(%58 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %59 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %60 : !llvm.ptr, %61 : !llvm.struct<(!llvm.ptr, i160)>):
      %62 = "mid.wrap"(%58) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %63 = "hi.cast"(%62) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %64 = "mid.wrap"(%61) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"U", !hi.any, "Pair">
      %65 = "hi.cast"(%64) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      %66 = "hi.cast"(%65) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      "mid.set_field"(%63, %66) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, !hi.type_param<"U", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair__set_second_valueU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb14(%67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.ptr):
      %69 = "mid.invariant"(%68) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %70 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb15] : () -> ()
    ^bb16:
      %71 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%71, %70) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb17] : () -> ()
    ^bb15:
      %72 = "llvm.getelementptr"(%68) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %73 = "mid.checkflag"(%72) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %74 = "llvm.load"(%73) : (!hi.bool) -> i1
      "cf.cond_br"(%74) [^bb16, ^bb16] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb17:
      %75 = "llvm.extractvalue"(%67) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %76 = "llvm.load"(%70) : (!llvm.ptr) -> i32
      %77 = "llvm.getelementptr"(%75, %76) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %78 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %79 = "llvm.getelementptr"(%77, %78) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%79) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B__set_second_valueU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb18(%80 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %81 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %82 : !llvm.ptr, %83 : !llvm.struct<(!llvm.ptr, i160)>, %84 : !llvm.struct<(!llvm.ptr, i160)>):
      %85 = "mid.wrap"(%80) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %86 = "hi.cast"(%85) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %87 = "mid.wrap"(%83) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Pair">
      %88 = "hi.cast"(%87) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      %89 = "hi.cast"(%88) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      "mid.set_field"(%86, %89) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, !hi.type_param<"T", !hi.any, "Pair">) -> ()
      %90 = "mid.wrap"(%84) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"U", !hi.any, "Pair">
      %91 = "hi.cast"(%90) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      %92 = "hi.cast"(%91) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      "mid.set_field"(%86, %92) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, !hi.type_param<"U", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_init_firstT_secondU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb19(%93 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %94 : !llvm.ptr):
      %95 = "mid.invariant"(%94) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %96 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb20] : () -> ()
    ^bb21:
      %97 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%97, %96) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %98 = "llvm.getelementptr"(%94) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %99 = "mid.checkflag"(%98) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %100 = "llvm.load"(%99) : (!hi.bool) -> i1
      "cf.cond_br"(%100) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb20:
      %101 = "llvm.getelementptr"(%94) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %102 = "mid.checkflag"(%101) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %103 = "llvm.load"(%102) : (!hi.bool) -> i1
      "cf.cond_br"(%103) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %104 = "llvm.extractvalue"(%93) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %105 = "llvm.load"(%96) : (!llvm.ptr) -> i32
      %106 = "llvm.getelementptr"(%104, %105) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %107 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %108 = "llvm.getelementptr"(%106, %107) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%108) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_init_firstT_secondU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Iterator", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterator_field_Iterator_0"} : () -> ()
    "mid.func"() ({
    ^bb24(%109 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %110 : !llvm.ptr):
      %111 = "mid.invariant"(%110) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %112 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb25:
      %113 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%113, %112) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      %114 = "llvm.extractvalue"(%109) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %115 = "llvm.load"(%112) : (!llvm.ptr) -> i32
      %116 = "llvm.getelementptr"(%114, %115) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %117 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %118 = "llvm.getelementptr"(%116, %117) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%118) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Iterable", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterable_field_Iterable_0"} : () -> ()
    "mid.func"() ({
    ^bb27(%119 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %120 : !llvm.ptr):
      %121 = "mid.invariant"(%120) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %122 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb28] : () -> ()
    ^bb28:
      %123 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%123, %122) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      %124 = "llvm.extractvalue"(%119) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %125 = "llvm.load"(%122) : (!llvm.ptr) -> i32
      %126 = "llvm.getelementptr"(%124, %125) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %127 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %128 = "llvm.getelementptr"(%126, %127) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%128) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb30(%129 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %130 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %131 : !llvm.ptr, %132 : !llvm.struct<(!llvm.ptr)>):
      %133 = "mid.wrap"(%129) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %134 = "hi.cast"(%133) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %135 = "mid.wrap"(%132) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>
      %136 = "hi.cast"(%135) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>
      %137 = "mid.create_region"() {"reg_name" = "_iterator_ndlqqvnliu"} : () -> !llvm.ptr
      %138 = "mid.unwrap"(%134) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %139 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %140 = "mid.method_call"(%139, %138) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %141 = "hi.cast"(%140) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %142 = "mid.refer"(%141) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %143 = "mid.create_region"() {"reg_name" = "_oipcdznfyf_next_call"} : () -> !llvm.ptr
        %144 = "mid.unwrap"(%142) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %145 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %146 = "mid.method_call"(%145, %144) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %147 = "hi.cast"(%146) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %148 = "mid.get_type_field"(%134) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
        %149 = "mid.checkflag"(%147) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> si1
        %150 = "mid.unwrap"(%149) : (si1) -> i1
      }, {
        %151 = "hi.cast"(%147) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %152 = "hi.cast"(%151) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %153 = "mid.unwrap"(%152) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %154 = "mid.unwrap"(%136) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>) -> !llvm.ptr
        "mid.fptr_call"(%154, %153) {"ret_type" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        "mid.remove_region"(%143) {"reg_name" = "_oipcdznfyf_next_call"} : (!llvm.ptr) -> ()
        %155 = "hi.cast"(%151) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        "mid.assign"(%147, %155) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> ()
      }) : () -> ()
      "mid.remove_region"(%137) {"reg_name" = "_iterator_ndlqqvnliu"} : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_each_fFunctionT_to_Nothing", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb31(%156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %157 : !llvm.ptr):
      %158 = "mid.invariant"(%157) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %159 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb32] : () -> ()
    ^bb33:
      %160 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%160, %159) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb34] : () -> ()
    ^bb32:
      %161 = "llvm.getelementptr"(%157) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %162 = "mid.checkflag"(%161) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %163 = "llvm.load"(%162) : (!hi.bool) -> i1
      "cf.cond_br"(%163) [^bb33, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb34:
      %164 = "llvm.extractvalue"(%156) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %165 = "llvm.load"(%159) : (!llvm.ptr) -> i32
      %166 = "llvm.getelementptr"(%164, %165) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %167 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %168 = "llvm.getelementptr"(%166, %167) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%168) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb35(%169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %171 : !llvm.ptr, %172 : !llvm.struct<(!llvm.ptr, i160)>, %173 : !llvm.struct<(!llvm.ptr)>):
      %174 = "mid.wrap"(%169) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %175 = "hi.cast"(%174) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %176 = "mid.wrap"(%172) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Iterable">
      %177 = "hi.cast"(%176) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
      %178 = "mid.wrap"(%173) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>
      %179 = "hi.cast"(%178) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>
      %180 = "mid.create_region"() {"reg_name" = "_iterator_gdnhytbhzc"} : () -> !llvm.ptr
      %181 = "mid.unwrap"(%175) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %182 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %183 = "mid.method_call"(%182, %181) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %184 = "hi.cast"(%183) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %185 = "mid.refer"(%184) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %186 = "mid.create_region"() {"reg_name" = "_hmklnsiooy_next_call"} : () -> !llvm.ptr
        %187 = "mid.unwrap"(%185) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %188 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %189 = "mid.method_call"(%188, %187) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %190 = "hi.cast"(%189) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %191 = "mid.get_type_field"(%175) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
        %192 = "mid.checkflag"(%190) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> si1
        %193 = "mid.unwrap"(%192) : (si1) -> i1
      }, {
        %194 = "hi.cast"(%190) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %195 = "hi.cast"(%177) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %196 = "mid.unwrap"(%195) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %197 = "hi.cast"(%194) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %198 = "mid.unwrap"(%197) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %199 = "mid.unwrap"(%179) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>) -> !llvm.ptr
        %200 = "mid.fptr_call"(%199, %196, %198) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %201 = "hi.cast"(%200) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%177, %201) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
        "mid.remove_region"(%186) {"reg_name" = "_hmklnsiooy_next_call"} : (!llvm.ptr) -> ()
        %202 = "hi.cast"(%194) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        "mid.assign"(%190, %202) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> ()
      }) : () -> ()
      "mid.remove_region"(%180) {"reg_name" = "_iterator_gdnhytbhzc"} : (!llvm.ptr) -> ()
      %203 = "hi.cast"(%177) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
      "mid.return"(%203) : (!hi.type_param<"T", !hi.any, "Iterable">) -> ()
    }) {"func_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb36(%204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %205 : !llvm.ptr):
      %206 = "mid.invariant"(%205) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %207 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb37] : () -> ()
    ^bb38:
      %208 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%208, %207) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb40:
      %209 = "llvm.getelementptr"(%205) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %210 = "mid.checkflag"(%209) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %211 = "llvm.load"(%210) : (!hi.bool) -> i1
      "cf.cond_br"(%211) [^bb38, ^bb38] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %212 = "llvm.getelementptr"(%205) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %213 = "mid.checkflag"(%212) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %214 = "llvm.load"(%213) : (!hi.bool) -> i1
      "cf.cond_br"(%214) [^bb40, ^bb40] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb39:
      %215 = "llvm.extractvalue"(%204) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %216 = "llvm.load"(%207) : (!llvm.ptr) -> i32
      %217 = "llvm.getelementptr"(%215, %216) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %218 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %219 = "llvm.getelementptr"(%217, %218) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%219) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb41(%220 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %221 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %222 : !llvm.ptr, %223 : !llvm.struct<(!llvm.ptr)>):
      %224 = "mid.wrap"(%220) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %225 = "hi.cast"(%224) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %226 = "mid.wrap"(%223) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %227 = "hi.cast"(%226) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %228 = "mid.create_region"() {"reg_name" = "_iterator_tkfzoldelt"} : () -> !llvm.ptr
      %229 = "mid.unwrap"(%225) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %230 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %231 = "mid.method_call"(%230, %229) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %232 = "hi.cast"(%231) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %233 = "mid.refer"(%232) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %234 = "mid.create_region"() {"reg_name" = "_sjfszviwgi_next_call"} : () -> !llvm.ptr
        %235 = "mid.unwrap"(%233) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %236 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %237 = "mid.method_call"(%236, %235) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %238 = "hi.cast"(%237) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %239 = "mid.get_type_field"(%225) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
        %240 = "mid.checkflag"(%238) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> si1
        %241 = "mid.unwrap"(%240) : (si1) -> i1
      }, {
        %242 = "hi.cast"(%238) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %243 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %244 = "hi.cast"(%242) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %245 = "mid.unwrap"(%244) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %246 = "mid.unwrap"(%227) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.ptr
        %247 = "mid.fptr_call"(%246, %245) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %248 = "hi.comparison"(%243, %247) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, !hi.bool) -> si1
        %249 = "mid.unwrap"(%248) : (si1) -> i1
        "mid.if"(%249) ({
          %250 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %251 = "hi.cast"(%250) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%251) : (!hi.bool) -> ()
        }) : (i1) -> ()
        "mid.remove_region"(%234) {"reg_name" = "_sjfszviwgi_next_call"} : (!llvm.ptr) -> ()
        %252 = "hi.cast"(%242) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        "mid.assign"(%238, %252) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> ()
      }) : () -> ()
      "mid.remove_region"(%228) {"reg_name" = "_iterator_tkfzoldelt"} : (!llvm.ptr) -> ()
      %253 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %254 = "hi.cast"(%253) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%254) : (!hi.bool) -> ()
    }) {"func_name" = "Iterable_all_fFunctionT_to_Bool", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb42(%255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %256 : !llvm.ptr):
      %257 = "mid.invariant"(%256) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %258 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb43] : () -> ()
    ^bb44:
      %259 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%259, %258) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb45] : () -> ()
    ^bb43:
      %260 = "llvm.getelementptr"(%256) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %261 = "mid.checkflag"(%260) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %262 = "llvm.load"(%261) : (!hi.bool) -> i1
      "cf.cond_br"(%262) [^bb44, ^bb44] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb45:
      %263 = "llvm.extractvalue"(%255) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %264 = "llvm.load"(%258) : (!llvm.ptr) -> i32
      %265 = "llvm.getelementptr"(%263, %264) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %266 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %267 = "llvm.getelementptr"(%265, %266) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%267) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb46(%268 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %270 : !llvm.ptr, %271 : !llvm.struct<(!llvm.ptr)>):
      %272 = "mid.wrap"(%268) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %273 = "hi.cast"(%272) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %274 = "mid.wrap"(%271) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %275 = "hi.cast"(%274) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %276 = "mid.create_region"() {"reg_name" = "_iterator_bjmuxcjssy"} : () -> !llvm.ptr
      %277 = "mid.unwrap"(%273) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %278 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %279 = "mid.method_call"(%278, %277) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %280 = "hi.cast"(%279) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %281 = "mid.refer"(%280) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %282 = "mid.create_region"() {"reg_name" = "_jflpiduztc_next_call"} : () -> !llvm.ptr
        %283 = "mid.unwrap"(%281) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %284 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %285 = "mid.method_call"(%284, %283) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %286 = "hi.cast"(%285) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %287 = "mid.get_type_field"(%273) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
        %288 = "mid.checkflag"(%286) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> si1
        %289 = "mid.unwrap"(%288) : (si1) -> i1
      }, {
        %290 = "hi.cast"(%286) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %291 = "hi.cast"(%290) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %292 = "mid.unwrap"(%291) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %293 = "mid.unwrap"(%275) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.ptr
        %294 = "mid.fptr_call"(%293, %292) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %295 = "mid.unwrap"(%294) : (!hi.bool) -> i1
        "mid.if"(%295) ({
          %296 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %297 = "hi.cast"(%296) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%297) : (!hi.bool) -> ()
        }) : (i1) -> ()
        "mid.remove_region"(%282) {"reg_name" = "_jflpiduztc_next_call"} : (!llvm.ptr) -> ()
        %298 = "hi.cast"(%290) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        "mid.assign"(%286, %298) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> ()
      }) : () -> ()
      "mid.remove_region"(%276) {"reg_name" = "_iterator_bjmuxcjssy"} : (!llvm.ptr) -> ()
      %299 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %300 = "hi.cast"(%299) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%300) : (!hi.bool) -> ()
    }) {"func_name" = "Iterable_any_fFunctionT_to_Bool", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb47(%301 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %302 : !llvm.ptr):
      %303 = "mid.invariant"(%302) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %304 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb48] : () -> ()
    ^bb49:
      %305 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%305, %304) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb50] : () -> ()
    ^bb48:
      %306 = "llvm.getelementptr"(%302) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %307 = "mid.checkflag"(%306) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %308 = "llvm.load"(%307) : (!hi.bool) -> i1
      "cf.cond_br"(%308) [^bb49, ^bb49] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb50:
      %309 = "llvm.extractvalue"(%301) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %310 = "llvm.load"(%304) : (!llvm.ptr) -> i32
      %311 = "llvm.getelementptr"(%309, %310) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %312 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %313 = "llvm.getelementptr"(%311, %312) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%313) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb51(%314 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %315 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %316 : !llvm.ptr):
      %317 = "mid.wrap"(%314) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %318 = "hi.cast"(%317) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %319 = "mid.unwrap"(%318) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %320 = "mid.get_type_field"(%318) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %321 = "mid.get_type_field"(%318) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %322 = "mid.parameterization"(%321) {"id_hierarchy" = ["Pair", ["i32_typ"], [0 : i32]], "name_hierarchy" = ["Pairi32._Iterable.T_subtype_Any", ["i32"], ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %323 = "mid.new"(%320, %322) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Enumerated", "num_data_fields" = 1 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %324 = "hi.cast"(%318) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %325 = "mid.unwrap"(%324) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %326 = "mid.unwrap"(%323) : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %327 = "mid.get_type_field"(%318) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %328 = "mid.parameterization"(%327) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %329 = "mid.parameterizations_array"(%328) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%329, %326, %325) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %330 = "hi.cast"(%323) {"from_typ" = !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Iterable">]>]>, "from_typ_name" = "Enumerated", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Iterable">]>]>
      "mid.return"(%330) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_enumerate_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb52(%331 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %332 : !llvm.ptr):
      %333 = "mid.invariant"(%332) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %334 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb53] : () -> ()
    ^bb53:
      %335 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%335, %334) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb54] : () -> ()
    ^bb54:
      %336 = "llvm.extractvalue"(%331) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %337 = "llvm.load"(%334) : (!llvm.ptr) -> i32
      %338 = "llvm.getelementptr"(%336, %337) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %339 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %340 = "llvm.getelementptr"(%338, %339) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%340) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb55(%341 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %342 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %343 : !llvm.ptr, %344 : !llvm.struct<(!llvm.ptr)>):
      %345 = "mid.wrap"(%341) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %346 = "hi.cast"(%345) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %347 = "mid.wrap"(%344) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>
      %348 = "hi.cast"(%347) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>
      %349 = "mid.unwrap"(%346) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %350 = "mid.unwrap"(%348) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
      %351 = "mid.get_type_field"(%346) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %352 = "llvm.getelementptr"(%343) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %353 = "llvm.load"(%352) : (!llvm.ptr) -> !llvm.ptr
      %354 = "mid.parameterization_indexation"(%353) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %355 = "mid.new"(%351, %354) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "Mapped", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %356 = "hi.cast"(%346) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>
      %357 = "mid.unwrap"(%356) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %358 = "hi.cast"(%348) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>
      %359 = "mid.unwrap"(%358) : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>) -> !llvm.struct<(!llvm.ptr)>
      %360 = "mid.unwrap"(%355) : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %361 = "mid.get_type_field"(%346) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %362 = "mid.parameterization"(%361) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %363 = "llvm.getelementptr"(%343) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %364 = "llvm.load"(%363) : (!llvm.ptr) -> !llvm.ptr
      %365 = "mid.parameterization_indexation"(%364) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %366 = "mid.get_type_field"(%346) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %367 = "mid.parameterization"(%365, %366) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionIterable.T_subtype_Any_to_Iterable.U_subtype_Any", ["Iterable.U_subtype_Any"], ["Iterable.T_subtype_Any"]]} : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
      %368 = "mid.parameterizations_array"(%362, %367) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%368, %360, %357, %359) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %369 = "hi.cast"(%355) {"from_typ" = !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "Mapped", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      "mid.return"(%369) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb56(%370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %371 : !llvm.ptr):
      %372 = "mid.invariant"(%371) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %373 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb57] : () -> ()
    ^bb58:
      %374 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%374, %373) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb59] : () -> ()
    ^bb57:
      %375 = "llvm.getelementptr"(%371) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %376 = "mid.checkflag"(%375) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %377 = "llvm.load"(%376) : (!hi.bool) -> i1
      "cf.cond_br"(%377) [^bb58, ^bb58] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb59:
      %378 = "llvm.extractvalue"(%370) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %379 = "llvm.load"(%373) : (!llvm.ptr) -> i32
      %380 = "llvm.getelementptr"(%378, %379) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %381 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %382 = "llvm.getelementptr"(%380, %381) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%382) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb60(%383 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %384 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %385 : !llvm.ptr, %386 : !llvm.struct<(!llvm.ptr)>):
      %387 = "mid.wrap"(%383) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %388 = "hi.cast"(%387) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %389 = "mid.wrap"(%386) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %390 = "hi.cast"(%389) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %391 = "mid.unwrap"(%388) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %392 = "mid.unwrap"(%390) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %393 = "mid.get_type_field"(%388) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %394 = "mid.new"(%393) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "Filtered", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %395 = "hi.cast"(%388) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %396 = "mid.unwrap"(%395) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %397 = "hi.cast"(%390) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>
      %398 = "mid.unwrap"(%397) : (!hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %399 = "mid.unwrap"(%394) : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %400 = "mid.get_type_field"(%388) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %401 = "mid.parameterization"(%400) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %402 = "mid.get_type_field"(%388) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %403 = "mid.parameterization"(%402) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionIterable.T_subtype_Any_to_Bool", ["Bool"], ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %404 = "mid.parameterizations_array"(%401, %403) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%404, %399, %396, %398) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %405 = "hi.cast"(%394) {"from_typ" = !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Filtered", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%405) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_filter_fFunctionT_to_Bool", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb61(%406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %407 : !llvm.ptr):
      %408 = "mid.invariant"(%407) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %409 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb62] : () -> ()
    ^bb63:
      %410 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%410, %409) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb64] : () -> ()
    ^bb62:
      %411 = "llvm.getelementptr"(%407) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %412 = "mid.checkflag"(%411) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %413 = "llvm.load"(%412) : (!hi.bool) -> i1
      "cf.cond_br"(%413) [^bb63, ^bb63] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb64:
      %414 = "llvm.extractvalue"(%406) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %415 = "llvm.load"(%409) : (!llvm.ptr) -> i32
      %416 = "llvm.getelementptr"(%414, %415) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %417 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %418 = "llvm.getelementptr"(%416, %417) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%418) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb65(%419 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %420 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %421 : !llvm.ptr, %422 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %423 = "mid.wrap"(%419) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %424 = "hi.cast"(%423) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %425 = "mid.wrap"(%422) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %426 = "hi.cast"(%425) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %427 = "mid.unwrap"(%424) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %428 = "mid.unwrap"(%426) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %429 = "mid.get_type_field"(%424) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %430 = "mid.new"(%429) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Chained", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %431 = "hi.cast"(%424) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %432 = "mid.unwrap"(%431) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %433 = "hi.cast"(%426) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %434 = "mid.unwrap"(%433) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %435 = "mid.unwrap"(%430) : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %436 = "mid.get_type_field"(%424) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %437 = "mid.parameterization"(%436) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %438 = "mid.get_type_field"(%424) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %439 = "mid.parameterization"(%438) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %440 = "mid.parameterizations_array"(%437, %439) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%440, %435, %432, %434) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %441 = "hi.cast"(%430) {"from_typ" = !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Chained", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%441) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_chain_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb66(%442 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %443 : !llvm.ptr):
      %444 = "mid.invariant"(%443) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %445 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb67] : () -> ()
    ^bb68:
      %446 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%446, %445) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb69] : () -> ()
    ^bb67:
      %447 = "llvm.getelementptr"(%443) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %448 = "mid.checkflag"(%447) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %449 = "llvm.load"(%448) : (!hi.bool) -> i1
      "cf.cond_br"(%449) [^bb68, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %450 = "llvm.extractvalue"(%442) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %451 = "llvm.load"(%445) : (!llvm.ptr) -> i32
      %452 = "llvm.getelementptr"(%450, %451) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %453 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %454 = "llvm.getelementptr"(%452, %453) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%454) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb70(%455 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %456 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %457 : !llvm.ptr, %458 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %459 = "mid.wrap"(%455) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %460 = "hi.cast"(%459) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %461 = "mid.wrap"(%458) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %462 = "hi.cast"(%461) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %463 = "mid.unwrap"(%460) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %464 = "mid.unwrap"(%462) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %465 = "mid.get_type_field"(%460) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %466 = "mid.new"(%465) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Interleaved", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %467 = "hi.cast"(%460) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %468 = "mid.unwrap"(%467) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %469 = "hi.cast"(%462) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %470 = "mid.unwrap"(%469) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %471 = "mid.unwrap"(%466) : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %472 = "mid.get_type_field"(%460) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %473 = "mid.parameterization"(%472) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %474 = "mid.get_type_field"(%460) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %475 = "mid.parameterization"(%474) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %476 = "mid.parameterizations_array"(%473, %475) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%476, %471, %468, %470) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %477 = "hi.cast"(%466) {"from_typ" = !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Interleaved", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%477) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_interleave_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%478 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %479 : !llvm.ptr):
      %480 = "mid.invariant"(%479) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %481 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %482 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%482, %481) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb72:
      %483 = "llvm.getelementptr"(%479) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %484 = "mid.checkflag"(%483) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %485 = "llvm.load"(%484) : (!hi.bool) -> i1
      "cf.cond_br"(%485) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %486 = "llvm.extractvalue"(%478) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %487 = "llvm.load"(%481) : (!llvm.ptr) -> i32
      %488 = "llvm.getelementptr"(%486, %487) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %489 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %490 = "llvm.getelementptr"(%488, %489) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%490) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb75(%491 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %492 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %493 : !llvm.ptr, %494 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %495 = "mid.wrap"(%491) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %496 = "hi.cast"(%495) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %497 = "mid.wrap"(%494) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %498 = "hi.cast"(%497) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %499 = "mid.unwrap"(%496) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %500 = "mid.unwrap"(%498) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %501 = "mid.get_type_field"(%496) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %502 = "mid.wrap"(%494) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %503 = "mid.get_type_field"(%502) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %504 = "mid.get_type_field"(%496) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %505 = "mid.wrap"(%494) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %506 = "mid.get_type_field"(%505) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %507 = "mid.parameterization"(%504, %506) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable.T_subtype_Any._Iterable.U_subtype_Any", ["Iterable.T_subtype_Any"], ["Iterable.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %508 = "mid.new"(%501, %503, %507) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Zipped", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %509 = "hi.cast"(%496) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>
      %510 = "mid.unwrap"(%509) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %511 = "hi.cast"(%498) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>
      %512 = "mid.unwrap"(%511) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %513 = "mid.unwrap"(%508) : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %514 = "mid.get_type_field"(%496) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %515 = "mid.parameterization"(%514) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %516 = "mid.wrap"(%494) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %517 = "mid.get_type_field"(%516) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %518 = "mid.parameterization"(%517) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.U_subtype_Any", ["Iterable.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %519 = "mid.parameterizations_array"(%515, %518) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%519, %513, %510, %512) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 56 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %520 = "hi.cast"(%508) {"from_typ" = !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>, "from_typ_name" = "Zipped", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>
      "mid.return"(%520) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_zip_otherIterableU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb76(%521 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %522 : !llvm.ptr):
      %523 = "mid.invariant"(%522) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %524 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %525 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%525, %524) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb77:
      %526 = "llvm.getelementptr"(%522) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %527 = "mid.checkflag"(%526) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %528 = "llvm.load"(%527) : (!hi.bool) -> i1
      "cf.cond_br"(%528) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %529 = "llvm.extractvalue"(%521) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %530 = "llvm.load"(%524) : (!llvm.ptr) -> i32
      %531 = "llvm.getelementptr"(%529, %530) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %532 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %533 = "llvm.getelementptr"(%531, %532) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%533) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb80(%534 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %535 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %536 : !llvm.ptr, %537 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %538 = "mid.wrap"(%534) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %539 = "hi.cast"(%538) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %540 = "mid.wrap"(%537) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %541 = "hi.cast"(%540) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %542 = "mid.unwrap"(%539) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %543 = "mid.unwrap"(%541) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %544 = "mid.get_type_field"(%539) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %545 = "mid.wrap"(%537) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %546 = "mid.get_type_field"(%545) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %547 = "mid.get_type_field"(%539) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %548 = "mid.wrap"(%537) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %549 = "mid.get_type_field"(%548) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %550 = "mid.parameterization"(%547, %549) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable.T_subtype_Any._Iterable.U_subtype_Any", ["Iterable.T_subtype_Any"], ["Iterable.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %551 = "mid.new"(%544, %546, %550) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Products", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %552 = "hi.cast"(%539) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>
      %553 = "mid.unwrap"(%552) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %554 = "hi.cast"(%541) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>
      %555 = "mid.unwrap"(%554) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %556 = "mid.unwrap"(%551) : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %557 = "mid.get_type_field"(%539) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.reified_type
      %558 = "mid.parameterization"(%557) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %559 = "mid.wrap"(%537) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %560 = "mid.get_type_field"(%559) {"offset" = 0 : i64, "vtable_bytes" = 200 : i32} : (!llvm.ptr) -> !hi.reified_type
      %561 = "mid.parameterization"(%560) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.U_subtype_Any", ["Iterable.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %562 = "mid.parameterizations_array"(%558, %561) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%562, %556, %553, %555) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 56 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %563 = "hi.cast"(%551) {"from_typ" = !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>, "from_typ_name" = "Products", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>
      "mid.return"(%563) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_product_otherIterableU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb81(%564 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %565 : !llvm.ptr):
      %566 = "mid.invariant"(%565) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %567 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb82] : () -> ()
    ^bb83:
      %568 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%568, %567) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb84] : () -> ()
    ^bb82:
      %569 = "llvm.getelementptr"(%565) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %570 = "mid.checkflag"(%569) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %571 = "llvm.load"(%570) : (!hi.bool) -> i1
      "cf.cond_br"(%571) [^bb83, ^bb83] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb84:
      %572 = "llvm.extractvalue"(%564) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %573 = "llvm.load"(%567) : (!llvm.ptr) -> i32
      %574 = "llvm.getelementptr"(%572, %573) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %575 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %576 = "llvm.getelementptr"(%574, %575) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%576) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ConstantTimeIterator", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ConstantTimeIterator_field_ConstantTimeIterator_0"} : () -> ()
    "mid.func"() ({
    ^bb85(%577 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %578 : !llvm.ptr):
      %579 = "mid.invariant"(%578) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %580 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb86] : () -> ()
    ^bb86:
      %581 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%581, %580) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb87] : () -> ()
    ^bb87:
      %582 = "llvm.extractvalue"(%577) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %583 = "llvm.load"(%580) : (!llvm.ptr) -> i32
      %584 = "llvm.getelementptr"(%582, %583) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %585 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %586 = "llvm.getelementptr"(%584, %585) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%586) : (!llvm.ptr) -> ()
    }) {"func_name" = "ConstantTimeIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_CoroIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "CoroIterator_field_CoroIterator_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "CoroIterator_getter_coro", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "coroutine_typ", "parameterization" = "_parameterization_Coroutine_to_Nothing"} : () -> ()
    "mid.setter_def"() {"meth_name" = "CoroIterator_setter_coro", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "coroutine_typ", "parameterization" = "_parameterization_Coroutine_to_Nothing"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "CoroIterator_field_coro", "getter_name" = "CoroIterator_getter_coro", "setter_name" = "CoroIterator_setter_coro"} : () -> ()
    "mid.func"() ({
    ^bb88(%587 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %588 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %589 : !llvm.ptr, %590 : !llvm.struct<(!llvm.ptr)>):
      %591 = "mid.wrap"(%587) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>
      %592 = "hi.cast"(%591) {"from_typ" = !hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>, "to_typ" = !hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>, "from_typ_name" = "CoroIterator", "to_typ_name" = "CoroIterator"} : (!hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>) -> !hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>
      %593 = "mid.wrap"(%590) : (!llvm.struct<(!llvm.ptr)>) -> !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>
      %594 = "hi.cast"(%593) {"from_typ" = !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>, "to_typ" = !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>) -> !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>
      %595 = "hi.cast"(%594) {"from_typ" = !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>, "to_typ" = !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>) -> !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>
      "mid.set_field"(%592, %595) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>, !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>) -> ()
    }) {"func_name" = "CoroIterator_init_coroCoroutine_to_Nothing", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb89(%596 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %597 : !llvm.ptr):
      %598 = "mid.invariant"(%597) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %599 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb90] : () -> ()
    ^bb91:
      %600 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%600, %599) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb92] : () -> ()
    ^bb90:
      %601 = "llvm.getelementptr"(%597) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %602 = "mid.checkflag"(%601) {"typ_name" = "coroutine_typ"} : (!llvm.ptr) -> !hi.bool
      %603 = "llvm.load"(%602) : (!hi.bool) -> i1
      "cf.cond_br"(%603) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb92:
      %604 = "llvm.extractvalue"(%596) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %605 = "llvm.load"(%599) : (!llvm.ptr) -> i32
      %606 = "llvm.getelementptr"(%604, %605) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %607 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %608 = "llvm.getelementptr"(%606, %607) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%608) : (!llvm.ptr) -> ()
    }) {"func_name" = "CoroIterator_B_init_coroCoroutine_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb93(%609 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %610 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %611 : !llvm.ptr):
      %612 = "mid.wrap"(%609) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>
      %613 = "hi.cast"(%612) {"from_typ" = !hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>, "to_typ" = !hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>, "from_typ_name" = "CoroIterator", "to_typ_name" = "CoroIterator"} : (!hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>) -> !hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>
      %614 = "mid.get_field"(%613) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"CoroIterator", [!hi.type_param<"T", !hi.any, "CoroIterator">]>) -> !hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>
      %615 = "mid.coro_call"(%614) : (!hi.coroutine<[], !hi.union<[!hi.fatptr<"T">, !hi.nil]>, !hi.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
      %616 = "mid.wrap"(%615) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "CoroIterator">, !hi.nil]>
      %617 = "hi.cast"(%616) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "CoroIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "CoroIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "CoroIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "CoroIterator">, !hi.nil]>
      "mid.return"(%617) : (!hi.union<[!hi.type_param<"T", !hi.any, "CoroIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "CoroIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb94(%618 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %619 : !llvm.ptr):
      %620 = "mid.invariant"(%619) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %621 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb95] : () -> ()
    ^bb95:
      %622 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%622, %621) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb96] : () -> ()
    ^bb96:
      %623 = "llvm.extractvalue"(%618) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %624 = "llvm.load"(%621) : (!llvm.ptr) -> i32
      %625 = "llvm.getelementptr"(%623, %624) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %626 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %627 = "llvm.getelementptr"(%625, %626) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%627) : (!llvm.ptr) -> ()
    }) {"func_name" = "CoroIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Enumerated", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Enumerated_field_Enumerated_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Enumerated_field_Enumerated_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumerated_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableEnumerated.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumerated_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableEnumerated.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumerated_field_iterable", "getter_name" = "Enumerated_getter_iterable", "setter_name" = "Enumerated_setter_iterable"} : () -> ()
    "mid.func"() ({
    ^bb97(%628 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %629 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %630 : !llvm.ptr, %631 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %632 = "mid.wrap"(%628) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %633 = "hi.cast"(%632) {"from_typ" = !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "to_typ" = !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "from_typ_name" = "Enumerated", "to_typ_name" = "Enumerated"} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %634 = "mid.wrap"(%631) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %635 = "hi.cast"(%634) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %636 = "hi.cast"(%635) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      "mid.set_field"(%633, %636) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> ()
    }) {"func_name" = "Enumerated_init_iterableIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb98(%637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %638 : !llvm.ptr):
      %639 = "mid.invariant"(%638) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %640 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb99] : () -> ()
    ^bb100:
      %641 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%641, %640) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb101] : () -> ()
    ^bb99:
      %642 = "llvm.getelementptr"(%638) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %643 = "mid.checkflag"(%642) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %644 = "llvm.load"(%643) : (!hi.bool) -> i1
      "cf.cond_br"(%644) [^bb100, ^bb100] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb101:
      %645 = "llvm.extractvalue"(%637) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %646 = "llvm.load"(%640) : (!llvm.ptr) -> i32
      %647 = "llvm.getelementptr"(%645, %646) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %648 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %649 = "llvm.getelementptr"(%647, %648) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%649) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_init_iterableIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb102(%650 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %651 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %652 : !llvm.ptr):
      %653 = "mid.wrap"(%650) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %654 = "hi.cast"(%653) {"from_typ" = !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "to_typ" = !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "from_typ_name" = "Enumerated", "to_typ_name" = "Enumerated"} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %655 = "mid.get_field"(%654) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %656 = "mid.unwrap"(%655) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %657 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %658 = "mid.method_call"(%657, %656) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %659 = "hi.cast"(%658) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %660 = "mid.unwrap"(%659) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %661 = "mid.get_type_field"(%654) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.reified_type
      %662 = "mid.get_type_field"(%654) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.reified_type
      %663 = "mid.parameterization"(%662) {"id_hierarchy" = ["Pair", ["i32_typ"], [0 : i32]], "name_hierarchy" = ["Pairi32._Enumerated.T_subtype_Any", ["i32"], ["Enumerated.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %664 = "mid.new"(%661, %663) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "Enumerator", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %665 = "mid.get_field"(%654) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %666 = "mid.unwrap"(%665) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %667 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %668 = "mid.method_call"(%667, %666) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %669 = "hi.cast"(%668) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerated">]>
      %670 = "hi.cast"(%669) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %671 = "mid.unwrap"(%670) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %672 = "mid.unwrap"(%664) : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %673 = "mid.get_type_field"(%654) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Enumerated", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.reified_type
      %674 = "mid.parameterization"(%673) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorEnumerated.T_subtype_Any", ["Enumerated.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %675 = "mid.parameterizations_array"(%674) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%675, %672, %671) {"offset" = 4 : i32, "vptrs" = [#none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %676 = "hi.cast"(%664) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerated">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerated">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%676) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Enumerated_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb103(%677 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %678 : !llvm.ptr):
      %679 = "mid.invariant"(%678) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %680 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb104] : () -> ()
    ^bb104:
      %681 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%681, %680) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb105] : () -> ()
    ^bb105:
      %682 = "llvm.extractvalue"(%677) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %683 = "llvm.load"(%680) : (!llvm.ptr) -> i32
      %684 = "llvm.getelementptr"(%682, %683) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %685 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %686 = "llvm.getelementptr"(%684, %685) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%686) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb106(%687 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %688 : !llvm.ptr):
      %689 = "mid.invariant"(%688) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %690 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb107] : () -> ()
    ^bb108:
      %691 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%691, %690) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb109] : () -> ()
    ^bb107:
      %692 = "llvm.getelementptr"(%688) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %693 = "mid.checkflag"(%692) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %694 = "llvm.load"(%693) : (!hi.bool) -> i1
      "cf.cond_br"(%694) [^bb108, ^bb108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb109:
      %695 = "llvm.extractvalue"(%687) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %696 = "llvm.load"(%690) : (!llvm.ptr) -> i32
      %697 = "llvm.getelementptr"(%695, %696) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %698 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %699 = "llvm.getelementptr"(%697, %698) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%699) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb110(%700 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %701 : !llvm.ptr):
      %702 = "mid.invariant"(%701) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %703 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb111] : () -> ()
    ^bb112:
      %704 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%704, %703) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %705 = "llvm.getelementptr"(%701) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %706 = "mid.checkflag"(%705) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %707 = "llvm.load"(%706) : (!hi.bool) -> i1
      "cf.cond_br"(%707) [^bb112, ^bb112] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb111:
      %708 = "llvm.getelementptr"(%701) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %709 = "mid.checkflag"(%708) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %710 = "llvm.load"(%709) : (!hi.bool) -> i1
      "cf.cond_br"(%710) [^bb114, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb113:
      %711 = "llvm.extractvalue"(%700) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %712 = "llvm.load"(%703) : (!llvm.ptr) -> i32
      %713 = "llvm.getelementptr"(%711, %712) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %714 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %715 = "llvm.getelementptr"(%713, %714) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%715) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb115(%716 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %717 : !llvm.ptr):
      %718 = "mid.invariant"(%717) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %719 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb116] : () -> ()
    ^bb117:
      %720 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%720, %719) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb118] : () -> ()
    ^bb116:
      %721 = "llvm.getelementptr"(%717) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %722 = "mid.checkflag"(%721) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %723 = "llvm.load"(%722) : (!hi.bool) -> i1
      "cf.cond_br"(%723) [^bb117, ^bb117] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb118:
      %724 = "llvm.extractvalue"(%716) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %725 = "llvm.load"(%719) : (!llvm.ptr) -> i32
      %726 = "llvm.getelementptr"(%724, %725) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %727 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %728 = "llvm.getelementptr"(%726, %727) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%728) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb119(%729 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %730 : !llvm.ptr):
      %731 = "mid.invariant"(%730) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %732 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb120] : () -> ()
    ^bb121:
      %733 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%733, %732) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb122] : () -> ()
    ^bb120:
      %734 = "llvm.getelementptr"(%730) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %735 = "mid.checkflag"(%734) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %736 = "llvm.load"(%735) : (!hi.bool) -> i1
      "cf.cond_br"(%736) [^bb121, ^bb121] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb122:
      %737 = "llvm.extractvalue"(%729) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %738 = "llvm.load"(%732) : (!llvm.ptr) -> i32
      %739 = "llvm.getelementptr"(%737, %738) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %740 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %741 = "llvm.getelementptr"(%739, %740) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%741) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb123(%742 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %743 : !llvm.ptr):
      %744 = "mid.invariant"(%743) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %745 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb124] : () -> ()
    ^bb124:
      %746 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%746, %745) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb125] : () -> ()
    ^bb125:
      %747 = "llvm.extractvalue"(%742) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %748 = "llvm.load"(%745) : (!llvm.ptr) -> i32
      %749 = "llvm.getelementptr"(%747, %748) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %750 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %751 = "llvm.getelementptr"(%749, %750) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%751) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb126(%752 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %753 : !llvm.ptr):
      %754 = "mid.invariant"(%753) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %755 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb127] : () -> ()
    ^bb128:
      %756 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%756, %755) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb129] : () -> ()
    ^bb127:
      %757 = "llvm.getelementptr"(%753) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %758 = "mid.checkflag"(%757) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %759 = "llvm.load"(%758) : (!hi.bool) -> i1
      "cf.cond_br"(%759) [^bb128, ^bb128] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb129:
      %760 = "llvm.extractvalue"(%752) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %761 = "llvm.load"(%755) : (!llvm.ptr) -> i32
      %762 = "llvm.getelementptr"(%760, %761) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %763 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %764 = "llvm.getelementptr"(%762, %763) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%764) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb130(%765 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %766 : !llvm.ptr):
      %767 = "mid.invariant"(%766) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %768 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb131] : () -> ()
    ^bb132:
      %769 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%769, %768) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb133] : () -> ()
    ^bb131:
      %770 = "llvm.getelementptr"(%766) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %771 = "mid.checkflag"(%770) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %772 = "llvm.load"(%771) : (!hi.bool) -> i1
      "cf.cond_br"(%772) [^bb132, ^bb132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb133:
      %773 = "llvm.extractvalue"(%765) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %774 = "llvm.load"(%768) : (!llvm.ptr) -> i32
      %775 = "llvm.getelementptr"(%773, %774) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %776 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %777 = "llvm.getelementptr"(%775, %776) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%777) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb134(%778 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %779 : !llvm.ptr):
      %780 = "mid.invariant"(%779) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %781 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb135] : () -> ()
    ^bb136:
      %782 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%782, %781) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb137] : () -> ()
    ^bb135:
      %783 = "llvm.getelementptr"(%779) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %784 = "mid.checkflag"(%783) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %785 = "llvm.load"(%784) : (!hi.bool) -> i1
      "cf.cond_br"(%785) [^bb136, ^bb136] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb137:
      %786 = "llvm.extractvalue"(%778) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %787 = "llvm.load"(%781) : (!llvm.ptr) -> i32
      %788 = "llvm.getelementptr"(%786, %787) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %789 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %790 = "llvm.getelementptr"(%788, %789) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%790) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb138(%791 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %792 : !llvm.ptr):
      %793 = "mid.invariant"(%792) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %794 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb139] : () -> ()
    ^bb140:
      %795 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%795, %794) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb141] : () -> ()
    ^bb139:
      %796 = "llvm.getelementptr"(%792) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %797 = "mid.checkflag"(%796) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %798 = "llvm.load"(%797) : (!hi.bool) -> i1
      "cf.cond_br"(%798) [^bb140, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb141:
      %799 = "llvm.extractvalue"(%791) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %800 = "llvm.load"(%794) : (!llvm.ptr) -> i32
      %801 = "llvm.getelementptr"(%799, %800) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %802 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %803 = "llvm.getelementptr"(%801, %802) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%803) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb142(%804 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %805 : !llvm.ptr):
      %806 = "mid.invariant"(%805) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %807 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb143] : () -> ()
    ^bb144:
      %808 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%808, %807) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb145] : () -> ()
    ^bb143:
      %809 = "llvm.getelementptr"(%805) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %810 = "mid.checkflag"(%809) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %811 = "llvm.load"(%810) : (!hi.bool) -> i1
      "cf.cond_br"(%811) [^bb144, ^bb144] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb145:
      %812 = "llvm.extractvalue"(%804) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %813 = "llvm.load"(%807) : (!llvm.ptr) -> i32
      %814 = "llvm.getelementptr"(%812, %813) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %815 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %816 = "llvm.getelementptr"(%814, %815) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%816) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb146(%817 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %818 : !llvm.ptr):
      %819 = "mid.invariant"(%818) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %820 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb147] : () -> ()
    ^bb148:
      %821 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%821, %820) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb149] : () -> ()
    ^bb147:
      %822 = "llvm.getelementptr"(%818) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %823 = "mid.checkflag"(%822) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %824 = "llvm.load"(%823) : (!hi.bool) -> i1
      "cf.cond_br"(%824) [^bb148, ^bb148] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb149:
      %825 = "llvm.extractvalue"(%817) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %826 = "llvm.load"(%820) : (!llvm.ptr) -> i32
      %827 = "llvm.getelementptr"(%825, %826) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %828 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %829 = "llvm.getelementptr"(%827, %828) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%829) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerated_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Enumerator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Enumerator_field_Enumerator_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Enumerator_field_Enumerator_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumerator_getter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorEnumerator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumerator_setter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorEnumerator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumerator_field_iterator", "getter_name" = "Enumerator_getter_iterator", "setter_name" = "Enumerator_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumerator_getter_index", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumerator_setter_index", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumerator_field_index", "getter_name" = "Enumerator_getter_index", "setter_name" = "Enumerator_setter_index"} : () -> ()
    "mid.func"() ({
    ^bb150(%830 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %831 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %832 : !llvm.ptr, %833 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %834 = "mid.wrap"(%830) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %835 = "hi.cast"(%834) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Enumerator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %836 = "mid.wrap"(%833) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %837 = "hi.cast"(%836) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %838 = "hi.cast"(%837) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      "mid.set_field"(%835, %838) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> ()
      %839 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %840 = "hi.cast"(%839) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%835, %840) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, si32) -> ()
    }) {"func_name" = "Enumerator_init_iteratorIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb151(%841 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %842 : !llvm.ptr):
      %843 = "mid.invariant"(%842) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %844 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb152] : () -> ()
    ^bb153:
      %845 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%845, %844) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb154] : () -> ()
    ^bb152:
      %846 = "llvm.getelementptr"(%842) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %847 = "mid.checkflag"(%846) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %848 = "llvm.load"(%847) : (!hi.bool) -> i1
      "cf.cond_br"(%848) [^bb153, ^bb153] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb154:
      %849 = "llvm.extractvalue"(%841) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %850 = "llvm.load"(%844) : (!llvm.ptr) -> i32
      %851 = "llvm.getelementptr"(%849, %850) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %852 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %853 = "llvm.getelementptr"(%851, %852) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%853) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerator_B_init_iteratorIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb155(%854 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %856 : !llvm.ptr):
      %857 = "mid.wrap"(%854) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %858 = "hi.cast"(%857) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Enumerator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %859 = "mid.get_field"(%858) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %860 = "mid.unwrap"(%859) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %861 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %862 = "mid.method_call"(%861, %860) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %863 = "hi.cast"(%862) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>
      %864 = "mid.get_type_field"(%858) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.reified_type
      %865 = "mid.checkflag"(%863) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> si1
      %866 = "mid.unwrap"(%865) : (si1) -> i1
      "mid.if"(%866) ({
        %867 = "hi.cast"(%863) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Enumerator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Enumerator">
        %868 = "mid.get_field"(%858) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> si32
        %869 = "mid.refer"(%868) {"typ" = i32} : (si32) -> si32
        %870 = "mid.get_field"(%858) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> si32
        %871 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %872 = "hi.arithmetic"(%870, %871) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %873 = "hi.cast"(%872) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.set_field"(%858, %873) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, si32) -> ()
        %874 = "mid.unwrap"(%869) : (si32) -> i32
        %875 = "mid.unwrap"(%867) : (!hi.type_param<"T", !hi.any, "Enumerator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %876 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %877 = "mid.get_type_field"(%858) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.reified_type
        %878 = "mid.new"(%876, %877) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!llvm.ptr, !hi.reified_type) -> !hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Enumerator">]>
        %879 = "hi.cast"(%869) {"from_typ" = si32, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"T", !hi.any, "Pair">
        %880 = "mid.unwrap"(%879) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %881 = "hi.cast"(%867) {"from_typ" = !hi.type_param<"T", !hi.any, "Enumerator">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Enumerator">) -> !hi.type_param<"U", !hi.any, "Pair">
        %882 = "mid.unwrap"(%881) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %883 = "mid.unwrap"(%878) : (!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %884 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %885 = "mid.get_type_field"(%858) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.reified_type
        %886 = "mid.parameterizations_array"(%884, %885) : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
        "mid.method_call"(%886, %883, %880, %882) {"offset" = 8 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %887 = "hi.cast"(%878) {"from_typ" = !hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        "mid.return"(%887) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %888 = "hi.cast"(%863) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> !hi.nil
      %889 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %890 = "hi.cast"(%889) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%890) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "Enumerator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb156(%891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %892 : !llvm.ptr):
      %893 = "mid.invariant"(%892) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %894 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb157] : () -> ()
    ^bb157:
      %895 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%895, %894) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb158] : () -> ()
    ^bb158:
      %896 = "llvm.extractvalue"(%891) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %897 = "llvm.load"(%894) : (!llvm.ptr) -> i32
      %898 = "llvm.getelementptr"(%896, %897) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %899 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %900 = "llvm.getelementptr"(%898, %899) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%900) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Mapped", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Mapped_field_Mapped_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Mapped_field_Mapped_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Mapped_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableMapped.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Mapped_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableMapped.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Mapped_field_iterable", "getter_name" = "Mapped_getter_iterable", "setter_name" = "Mapped_setter_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Mapped_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapped.T_subtype_Any_to_Mapped.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Mapped_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapped.T_subtype_Any_to_Mapped.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Mapped_field_f", "getter_name" = "Mapped_getter_f", "setter_name" = "Mapped_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb159(%901 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %902 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %903 : !llvm.ptr, %904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %905 : !llvm.struct<(!llvm.ptr)>):
      %906 = "mid.wrap"(%901) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>
      %907 = "hi.cast"(%906) {"from_typ" = !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>, "to_typ" = !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>, "from_typ_name" = "Mapped", "to_typ_name" = "Mapped"} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>
      %908 = "mid.wrap"(%904) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>
      %909 = "hi.cast"(%908) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>
      %910 = "hi.cast"(%909) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>
      "mid.set_field"(%907, %910) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>) -> ()
      %911 = "mid.wrap"(%905) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>
      %912 = "hi.cast"(%911) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>
      %913 = "hi.cast"(%912) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>
      "mid.set_field"(%907, %913) {"offset" = 3 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>, !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>) -> ()
    }) {"func_name" = "Mapped_init_iterableIterableT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb160(%914 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %915 : !llvm.ptr):
      %916 = "mid.invariant"(%915) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %917 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb161] : () -> ()
    ^bb162:
      %918 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%918, %917) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb163] : () -> ()
    ^bb164:
      %919 = "llvm.getelementptr"(%915) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %920 = "mid.checkflag"(%919) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %921 = "llvm.load"(%920) : (!hi.bool) -> i1
      "cf.cond_br"(%921) [^bb162, ^bb162] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb161:
      %922 = "llvm.getelementptr"(%915) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %923 = "mid.checkflag"(%922) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %924 = "llvm.load"(%923) : (!hi.bool) -> i1
      "cf.cond_br"(%924) [^bb164, ^bb164] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb163:
      %925 = "llvm.extractvalue"(%914) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %926 = "llvm.load"(%917) : (!llvm.ptr) -> i32
      %927 = "llvm.getelementptr"(%925, %926) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %928 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %929 = "llvm.getelementptr"(%927, %928) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%929) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_init_iterableIterableT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb165(%930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %931 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %932 : !llvm.ptr):
      %933 = "mid.wrap"(%930) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>
      %934 = "hi.cast"(%933) {"from_typ" = !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>, "to_typ" = !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>, "from_typ_name" = "Mapped", "to_typ_name" = "Mapped"} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>
      %935 = "mid.get_field"(%934) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>
      %936 = "mid.unwrap"(%935) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %937 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %938 = "mid.method_call"(%937, %936) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %939 = "hi.cast"(%938) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapped">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapped">]>
      %940 = "mid.get_field"(%934) {"offset" = 3 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>
      %941 = "mid.unwrap"(%939) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %942 = "mid.unwrap"(%940) : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>) -> !llvm.struct<(!llvm.ptr)>
      %943 = "mid.get_type_field"(%934) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.reified_type
      %944 = "mid.get_type_field"(%934) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.reified_type
      %945 = "mid.new"(%943, %944) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "Mapper", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>
      %946 = "mid.get_field"(%934) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>
      %947 = "mid.unwrap"(%946) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Mapped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %948 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %949 = "mid.method_call"(%948, %947) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %950 = "hi.cast"(%949) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapped">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapped">]>
      %951 = "mid.get_field"(%934) {"offset" = 3 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>
      %952 = "hi.cast"(%950) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapped">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapped">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>
      %953 = "mid.unwrap"(%952) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %954 = "hi.cast"(%951) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapped">], !hi.any, !hi.type_param<"U", !hi.any, "Mapped">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>
      %955 = "mid.unwrap"(%954) : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>) -> !llvm.struct<(!llvm.ptr)>
      %956 = "mid.unwrap"(%945) : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %957 = "mid.get_type_field"(%934) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.reified_type
      %958 = "mid.parameterization"(%957) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorMapped.T_subtype_Any", ["Mapped.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %959 = "mid.get_type_field"(%934) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.reified_type
      %960 = "mid.get_type_field"(%934) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32} : (!hi.fatptr<"Mapped", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.reified_type
      %961 = "mid.parameterization"(%959, %960) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionMapped.T_subtype_Any_to_Mapped.U_subtype_Any", ["Mapped.U_subtype_Any"], ["Mapped.T_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %962 = "mid.parameterizations_array"(%958, %961) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%962, %956, %953, %955) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %963 = "hi.cast"(%945) {"from_typ" = !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Mapped">]>, "from_typ_name" = "Mapper", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapped">, !hi.type_param<"U", !hi.any, "Mapped">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Mapped">]>
      "mid.return"(%963) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Mapped">]>) -> ()
    }) {"func_name" = "Mapped_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb166(%964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %965 : !llvm.ptr):
      %966 = "mid.invariant"(%965) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %967 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb167] : () -> ()
    ^bb167:
      %968 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%968, %967) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb168] : () -> ()
    ^bb168:
      %969 = "llvm.extractvalue"(%964) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %970 = "llvm.load"(%967) : (!llvm.ptr) -> i32
      %971 = "llvm.getelementptr"(%969, %970) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %972 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %973 = "llvm.getelementptr"(%971, %972) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%973) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb169(%974 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %975 : !llvm.ptr):
      %976 = "mid.invariant"(%975) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %977 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb170] : () -> ()
    ^bb171:
      %978 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%978, %977) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb172] : () -> ()
    ^bb170:
      %979 = "llvm.getelementptr"(%975) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %980 = "mid.checkflag"(%979) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %981 = "llvm.load"(%980) : (!hi.bool) -> i1
      "cf.cond_br"(%981) [^bb171, ^bb171] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb172:
      %982 = "llvm.extractvalue"(%974) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %983 = "llvm.load"(%977) : (!llvm.ptr) -> i32
      %984 = "llvm.getelementptr"(%982, %983) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %985 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %986 = "llvm.getelementptr"(%984, %985) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%986) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb173(%987 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %988 : !llvm.ptr):
      %989 = "mid.invariant"(%988) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %990 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb174] : () -> ()
    ^bb175:
      %991 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%991, %990) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb176] : () -> ()
    ^bb177:
      %992 = "llvm.getelementptr"(%988) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %993 = "mid.checkflag"(%992) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %994 = "llvm.load"(%993) : (!hi.bool) -> i1
      "cf.cond_br"(%994) [^bb175, ^bb175] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb174:
      %995 = "llvm.getelementptr"(%988) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %996 = "mid.checkflag"(%995) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %997 = "llvm.load"(%996) : (!hi.bool) -> i1
      "cf.cond_br"(%997) [^bb177, ^bb177] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb176:
      %998 = "llvm.extractvalue"(%987) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %999 = "llvm.load"(%990) : (!llvm.ptr) -> i32
      %1000 = "llvm.getelementptr"(%998, %999) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1001 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1002 = "llvm.getelementptr"(%1000, %1001) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1002) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb178(%1003 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1004 : !llvm.ptr):
      %1005 = "mid.invariant"(%1004) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1006 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb179] : () -> ()
    ^bb180:
      %1007 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1007, %1006) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb181] : () -> ()
    ^bb179:
      %1008 = "llvm.getelementptr"(%1004) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1009 = "mid.checkflag"(%1008) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1010 = "llvm.load"(%1009) : (!hi.bool) -> i1
      "cf.cond_br"(%1010) [^bb180, ^bb180] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb181:
      %1011 = "llvm.extractvalue"(%1003) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1012 = "llvm.load"(%1006) : (!llvm.ptr) -> i32
      %1013 = "llvm.getelementptr"(%1011, %1012) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1014 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1015 = "llvm.getelementptr"(%1013, %1014) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1015) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb182(%1016 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1017 : !llvm.ptr):
      %1018 = "mid.invariant"(%1017) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1019 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb183] : () -> ()
    ^bb184:
      %1020 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1020, %1019) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb185] : () -> ()
    ^bb183:
      %1021 = "llvm.getelementptr"(%1017) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1022 = "mid.checkflag"(%1021) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1023 = "llvm.load"(%1022) : (!hi.bool) -> i1
      "cf.cond_br"(%1023) [^bb184, ^bb184] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb185:
      %1024 = "llvm.extractvalue"(%1016) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1025 = "llvm.load"(%1019) : (!llvm.ptr) -> i32
      %1026 = "llvm.getelementptr"(%1024, %1025) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1027 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1028 = "llvm.getelementptr"(%1026, %1027) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1028) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb186(%1029 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1030 : !llvm.ptr):
      %1031 = "mid.invariant"(%1030) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1032 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb187] : () -> ()
    ^bb187:
      %1033 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1033, %1032) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb188:
      %1034 = "llvm.extractvalue"(%1029) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1035 = "llvm.load"(%1032) : (!llvm.ptr) -> i32
      %1036 = "llvm.getelementptr"(%1034, %1035) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1037 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1038 = "llvm.getelementptr"(%1036, %1037) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1038) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb189(%1039 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1040 : !llvm.ptr):
      %1041 = "mid.invariant"(%1040) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1042 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb190] : () -> ()
    ^bb191:
      %1043 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1043, %1042) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb192] : () -> ()
    ^bb190:
      %1044 = "llvm.getelementptr"(%1040) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1045 = "mid.checkflag"(%1044) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1046 = "llvm.load"(%1045) : (!hi.bool) -> i1
      "cf.cond_br"(%1046) [^bb191, ^bb191] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb192:
      %1047 = "llvm.extractvalue"(%1039) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1048 = "llvm.load"(%1042) : (!llvm.ptr) -> i32
      %1049 = "llvm.getelementptr"(%1047, %1048) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1050 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1051 = "llvm.getelementptr"(%1049, %1050) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1051) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb193(%1052 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1053 : !llvm.ptr):
      %1054 = "mid.invariant"(%1053) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1055 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb194] : () -> ()
    ^bb195:
      %1056 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1056, %1055) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb196] : () -> ()
    ^bb194:
      %1057 = "llvm.getelementptr"(%1053) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1058 = "mid.checkflag"(%1057) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1059 = "llvm.load"(%1058) : (!hi.bool) -> i1
      "cf.cond_br"(%1059) [^bb195, ^bb195] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb196:
      %1060 = "llvm.extractvalue"(%1052) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1061 = "llvm.load"(%1055) : (!llvm.ptr) -> i32
      %1062 = "llvm.getelementptr"(%1060, %1061) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1063 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1064 = "llvm.getelementptr"(%1062, %1063) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1064) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb197(%1065 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1066 : !llvm.ptr):
      %1067 = "mid.invariant"(%1066) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1068 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb198] : () -> ()
    ^bb199:
      %1069 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1069, %1068) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb200] : () -> ()
    ^bb198:
      %1070 = "llvm.getelementptr"(%1066) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1071 = "mid.checkflag"(%1070) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1072 = "llvm.load"(%1071) : (!hi.bool) -> i1
      "cf.cond_br"(%1072) [^bb199, ^bb199] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb200:
      %1073 = "llvm.extractvalue"(%1065) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1074 = "llvm.load"(%1068) : (!llvm.ptr) -> i32
      %1075 = "llvm.getelementptr"(%1073, %1074) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1076 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1077 = "llvm.getelementptr"(%1075, %1076) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1077) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb201(%1078 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1079 : !llvm.ptr):
      %1080 = "mid.invariant"(%1079) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1081 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb202] : () -> ()
    ^bb203:
      %1082 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1082, %1081) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb204] : () -> ()
    ^bb202:
      %1083 = "llvm.getelementptr"(%1079) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1084 = "mid.checkflag"(%1083) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1085 = "llvm.load"(%1084) : (!hi.bool) -> i1
      "cf.cond_br"(%1085) [^bb203, ^bb203] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb204:
      %1086 = "llvm.extractvalue"(%1078) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1087 = "llvm.load"(%1081) : (!llvm.ptr) -> i32
      %1088 = "llvm.getelementptr"(%1086, %1087) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1089 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1090 = "llvm.getelementptr"(%1088, %1089) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1090) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb205(%1091 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1092 : !llvm.ptr):
      %1093 = "mid.invariant"(%1092) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1094 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb206] : () -> ()
    ^bb207:
      %1095 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1095, %1094) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb208] : () -> ()
    ^bb206:
      %1096 = "llvm.getelementptr"(%1092) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1097 = "mid.checkflag"(%1096) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1098 = "llvm.load"(%1097) : (!hi.bool) -> i1
      "cf.cond_br"(%1098) [^bb207, ^bb207] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb208:
      %1099 = "llvm.extractvalue"(%1091) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1100 = "llvm.load"(%1094) : (!llvm.ptr) -> i32
      %1101 = "llvm.getelementptr"(%1099, %1100) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1102 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1103 = "llvm.getelementptr"(%1101, %1102) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1103) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb209(%1104 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1105 : !llvm.ptr):
      %1106 = "mid.invariant"(%1105) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1107 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb210] : () -> ()
    ^bb211:
      %1108 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1108, %1107) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb212] : () -> ()
    ^bb210:
      %1109 = "llvm.getelementptr"(%1105) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1110 = "mid.checkflag"(%1109) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1111 = "llvm.load"(%1110) : (!hi.bool) -> i1
      "cf.cond_br"(%1111) [^bb211, ^bb211] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb212:
      %1112 = "llvm.extractvalue"(%1104) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1113 = "llvm.load"(%1107) : (!llvm.ptr) -> i32
      %1114 = "llvm.getelementptr"(%1112, %1113) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1115 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1116 = "llvm.getelementptr"(%1114, %1115) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1116) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapped_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Mapper", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Mapper_field_Mapper_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Mapper_field_Mapper_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Mapper_getter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorMapper.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Mapper_setter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorMapper.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Mapper_field_iterator", "getter_name" = "Mapper_getter_iterator", "setter_name" = "Mapper_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Mapper_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapper.T_subtype_Any_to_Mapper.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Mapper_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapper.T_subtype_Any_to_Mapper.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Mapper_field_f", "getter_name" = "Mapper_getter_f", "setter_name" = "Mapper_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb213(%1117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1118 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1119 : !llvm.ptr, %1120 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1121 : !llvm.struct<(!llvm.ptr)>):
      %1122 = "mid.wrap"(%1117) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>
      %1123 = "hi.cast"(%1122) {"from_typ" = !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>, "to_typ" = !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>, "from_typ_name" = "Mapper", "to_typ_name" = "Mapper"} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>) -> !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>
      %1124 = "mid.wrap"(%1120) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>
      %1125 = "hi.cast"(%1124) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>
      %1126 = "hi.cast"(%1125) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>
      "mid.set_field"(%1123, %1126) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>) -> ()
      %1127 = "mid.wrap"(%1121) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>
      %1128 = "hi.cast"(%1127) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>
      %1129 = "hi.cast"(%1128) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>
      "mid.set_field"(%1123, %1129) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>, !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>) -> ()
    }) {"func_name" = "Mapper_init_iteratorIteratorT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb214(%1130 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1131 : !llvm.ptr):
      %1132 = "mid.invariant"(%1131) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1133 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb215] : () -> ()
    ^bb216:
      %1134 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1134, %1133) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb217] : () -> ()
    ^bb218:
      %1135 = "llvm.getelementptr"(%1131) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1136 = "mid.checkflag"(%1135) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1137 = "llvm.load"(%1136) : (!hi.bool) -> i1
      "cf.cond_br"(%1137) [^bb216, ^bb216] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb215:
      %1138 = "llvm.getelementptr"(%1131) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1139 = "mid.checkflag"(%1138) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1140 = "llvm.load"(%1139) : (!hi.bool) -> i1
      "cf.cond_br"(%1140) [^bb218, ^bb218] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb217:
      %1141 = "llvm.extractvalue"(%1130) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1142 = "llvm.load"(%1133) : (!llvm.ptr) -> i32
      %1143 = "llvm.getelementptr"(%1141, %1142) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1144 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1145 = "llvm.getelementptr"(%1143, %1144) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1145) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapper_B_init_iteratorIteratorT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb219(%1146 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1147 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1148 : !llvm.ptr):
      %1149 = "mid.wrap"(%1146) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>
      %1150 = "hi.cast"(%1149) {"from_typ" = !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>, "to_typ" = !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>, "from_typ_name" = "Mapper", "to_typ_name" = "Mapper"} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>) -> !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>
      %1151 = "mid.get_field"(%1150) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>
      %1152 = "mid.unwrap"(%1151) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1153 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1154 = "mid.method_call"(%1153, %1152) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1155 = "hi.cast"(%1154) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Mapper">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Mapper">, !hi.nil]>
      %1156 = "mid.get_type_field"(%1150) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>) -> !hi.reified_type
      %1157 = "mid.checkflag"(%1155) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Mapper">, !hi.nil]>) -> si1
      %1158 = "mid.unwrap"(%1157) : (si1) -> i1
      "mid.if"(%1158) ({
        %1159 = "hi.cast"(%1155) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Mapper">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Mapper">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Mapper">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Mapper">
        %1160 = "hi.cast"(%1159) {"from_typ" = !hi.type_param<"T", !hi.any, "Mapper">, "to_typ" = !hi.type_param<"T", !hi.any, "Mapper">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Mapper">) -> !hi.type_param<"T", !hi.any, "Mapper">
        %1161 = "mid.unwrap"(%1160) : (!hi.type_param<"T", !hi.any, "Mapper">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1162 = "mid.get_field"(%1150) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "Mapper">, !hi.type_param<"U", !hi.any, "Mapper">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>
        %1163 = "mid.unwrap"(%1162) : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>) -> !llvm.ptr
        %1164 = "mid.fptr_call"(%1163, %1161) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"U", !hi.any, "Mapper">
        %1165 = "hi.cast"(%1164) {"from_typ" = !hi.type_param<"U", !hi.any, "Mapper">, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "Mapper">]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"U", !hi.any, "Mapper">) -> !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "Mapper">]>
        "mid.return"(%1165) : (!hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "Mapper">]>) -> ()
      }) : (i1) -> ()
      %1166 = "hi.cast"(%1155) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Mapper">, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Mapper">, !hi.nil]>) -> !hi.nil
      "mid.remove_region"() {"reg_name" = "gknaczgvzv"} : () -> ()
      %1167 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1168 = "hi.cast"(%1167) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "Mapper">]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "Mapper">]>
      "mid.return"(%1168) : (!hi.union<[!hi.nil, !hi.type_param<"U", !hi.any, "Mapper">]>) -> ()
    }) {"func_name" = "Mapper_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb220(%1169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1170 : !llvm.ptr):
      %1171 = "mid.invariant"(%1170) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1172 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb221] : () -> ()
    ^bb221:
      %1173 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1173, %1172) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb222] : () -> ()
    ^bb222:
      %1174 = "llvm.extractvalue"(%1169) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1175 = "llvm.load"(%1172) : (!llvm.ptr) -> i32
      %1176 = "llvm.getelementptr"(%1174, %1175) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1177 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1178 = "llvm.getelementptr"(%1176, %1177) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1178) : (!llvm.ptr) -> ()
    }) {"func_name" = "Mapper_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Filtered", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Filtered_field_Filtered_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Filtered_getter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableFiltered.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Filtered_setter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableFiltered.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Filtered_field_iterable", "getter_name" = "Filtered_getter_iterable", "setter_name" = "Filtered_setter_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Filtered_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFiltered.T_subtype_Any_to_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Filtered_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFiltered.T_subtype_Any_to_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Filtered_field_f", "getter_name" = "Filtered_getter_f", "setter_name" = "Filtered_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb223(%1179 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1180 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1181 : !llvm.ptr, %1182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1183 : !llvm.struct<(!llvm.ptr)>):
      %1184 = "mid.wrap"(%1179) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1185 = "hi.cast"(%1184) {"from_typ" = !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>, "to_typ" = !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>, "from_typ_name" = "Filtered", "to_typ_name" = "Filtered"} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1186 = "mid.wrap"(%1182) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1187 = "hi.cast"(%1186) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1188 = "hi.cast"(%1187) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>
      "mid.set_field"(%1185, %1188) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> ()
      %1189 = "mid.wrap"(%1183) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>
      %1190 = "hi.cast"(%1189) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>
      %1191 = "hi.cast"(%1190) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>
      "mid.set_field"(%1185, %1191) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>, !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>) -> ()
    }) {"func_name" = "Filtered_init_iterableIterableT_fFunctionT_to_Bool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb224(%1192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1193 : !llvm.ptr):
      %1194 = "mid.invariant"(%1193) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1195 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb225] : () -> ()
    ^bb226:
      %1196 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1196, %1195) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb227] : () -> ()
    ^bb228:
      %1197 = "llvm.getelementptr"(%1193) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1198 = "mid.checkflag"(%1197) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1199 = "llvm.load"(%1198) : (!hi.bool) -> i1
      "cf.cond_br"(%1199) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb225:
      %1200 = "llvm.getelementptr"(%1193) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1201 = "mid.checkflag"(%1200) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1202 = "llvm.load"(%1201) : (!hi.bool) -> i1
      "cf.cond_br"(%1202) [^bb228, ^bb228] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb227:
      %1203 = "llvm.extractvalue"(%1192) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1204 = "llvm.load"(%1195) : (!llvm.ptr) -> i32
      %1205 = "llvm.getelementptr"(%1203, %1204) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1206 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1207 = "llvm.getelementptr"(%1205, %1206) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1207) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_init_iterableIterableT_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb229(%1208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1209 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1210 : !llvm.ptr):
      %1211 = "mid.wrap"(%1208) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1212 = "hi.cast"(%1211) {"from_typ" = !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>, "to_typ" = !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>, "from_typ_name" = "Filtered", "to_typ_name" = "Filtered"} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1213 = "mid.get_field"(%1212) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1214 = "mid.unwrap"(%1213) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1215 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1216 = "mid.method_call"(%1215, %1214) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1217 = "hi.cast"(%1216) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1218 = "mid.get_field"(%1212) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>
      %1219 = "mid.unwrap"(%1217) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1220 = "mid.unwrap"(%1218) : (!hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1221 = "mid.get_type_field"(%1212) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.reified_type
      %1222 = "mid.new"(%1221) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "Filterer", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1223 = "mid.get_field"(%1212) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1224 = "mid.unwrap"(%1223) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1225 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1226 = "mid.method_call"(%1225, %1224) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1227 = "hi.cast"(%1226) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>
      %1228 = "mid.get_field"(%1212) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>
      %1229 = "hi.cast"(%1227) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>
      %1230 = "mid.unwrap"(%1229) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1231 = "hi.cast"(%1228) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Filtered">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>
      %1232 = "mid.unwrap"(%1231) : (!hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1233 = "mid.unwrap"(%1222) : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1234 = "mid.get_type_field"(%1212) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.reified_type
      %1235 = "mid.parameterization"(%1234) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorFiltered.T_subtype_Any", ["Filtered.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1236 = "mid.get_type_field"(%1212) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Filtered", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.reified_type
      %1237 = "mid.parameterization"(%1236) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionFiltered.T_subtype_Any_to_Bool", ["Bool"], ["Filtered.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1238 = "mid.parameterizations_array"(%1235, %1237) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1238, %1233, %1230, %1232) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1239 = "hi.cast"(%1222) {"from_typ" = !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filtered">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>, "from_typ_name" = "Filterer", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>
      "mid.return"(%1239) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filtered">]>) -> ()
    }) {"func_name" = "Filtered_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb230(%1240 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1241 : !llvm.ptr):
      %1242 = "mid.invariant"(%1241) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1243 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb231] : () -> ()
    ^bb231:
      %1244 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1244, %1243) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb232] : () -> ()
    ^bb232:
      %1245 = "llvm.extractvalue"(%1240) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1246 = "llvm.load"(%1243) : (!llvm.ptr) -> i32
      %1247 = "llvm.getelementptr"(%1245, %1246) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1248 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1249 = "llvm.getelementptr"(%1247, %1248) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1249) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb233(%1250 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1251 : !llvm.ptr):
      %1252 = "mid.invariant"(%1251) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1253 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb234] : () -> ()
    ^bb235:
      %1254 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1254, %1253) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb236] : () -> ()
    ^bb234:
      %1255 = "llvm.getelementptr"(%1251) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1256 = "mid.checkflag"(%1255) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1257 = "llvm.load"(%1256) : (!hi.bool) -> i1
      "cf.cond_br"(%1257) [^bb235, ^bb235] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb236:
      %1258 = "llvm.extractvalue"(%1250) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1259 = "llvm.load"(%1253) : (!llvm.ptr) -> i32
      %1260 = "llvm.getelementptr"(%1258, %1259) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1261 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1262 = "llvm.getelementptr"(%1260, %1261) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1262) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb237(%1263 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1264 : !llvm.ptr):
      %1265 = "mid.invariant"(%1264) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1266 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb238] : () -> ()
    ^bb239:
      %1267 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1267, %1266) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb240] : () -> ()
    ^bb241:
      %1268 = "llvm.getelementptr"(%1264) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1269 = "mid.checkflag"(%1268) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1270 = "llvm.load"(%1269) : (!hi.bool) -> i1
      "cf.cond_br"(%1270) [^bb239, ^bb239] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb238:
      %1271 = "llvm.getelementptr"(%1264) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1272 = "mid.checkflag"(%1271) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1273 = "llvm.load"(%1272) : (!hi.bool) -> i1
      "cf.cond_br"(%1273) [^bb241, ^bb241] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb240:
      %1274 = "llvm.extractvalue"(%1263) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1275 = "llvm.load"(%1266) : (!llvm.ptr) -> i32
      %1276 = "llvm.getelementptr"(%1274, %1275) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1277 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1278 = "llvm.getelementptr"(%1276, %1277) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1278) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb242(%1279 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1280 : !llvm.ptr):
      %1281 = "mid.invariant"(%1280) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1282 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb243] : () -> ()
    ^bb244:
      %1283 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1283, %1282) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb245] : () -> ()
    ^bb243:
      %1284 = "llvm.getelementptr"(%1280) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1285 = "mid.checkflag"(%1284) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1286 = "llvm.load"(%1285) : (!hi.bool) -> i1
      "cf.cond_br"(%1286) [^bb244, ^bb244] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb245:
      %1287 = "llvm.extractvalue"(%1279) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1288 = "llvm.load"(%1282) : (!llvm.ptr) -> i32
      %1289 = "llvm.getelementptr"(%1287, %1288) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1290 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1291 = "llvm.getelementptr"(%1289, %1290) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1291) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb246(%1292 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1293 : !llvm.ptr):
      %1294 = "mid.invariant"(%1293) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1295 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb247] : () -> ()
    ^bb248:
      %1296 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1296, %1295) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb249] : () -> ()
    ^bb247:
      %1297 = "llvm.getelementptr"(%1293) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1298 = "mid.checkflag"(%1297) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1299 = "llvm.load"(%1298) : (!hi.bool) -> i1
      "cf.cond_br"(%1299) [^bb248, ^bb248] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb249:
      %1300 = "llvm.extractvalue"(%1292) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1301 = "llvm.load"(%1295) : (!llvm.ptr) -> i32
      %1302 = "llvm.getelementptr"(%1300, %1301) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1303 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1304 = "llvm.getelementptr"(%1302, %1303) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1304) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb250(%1305 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1306 : !llvm.ptr):
      %1307 = "mid.invariant"(%1306) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1308 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb251] : () -> ()
    ^bb251:
      %1309 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1309, %1308) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb252] : () -> ()
    ^bb252:
      %1310 = "llvm.extractvalue"(%1305) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1311 = "llvm.load"(%1308) : (!llvm.ptr) -> i32
      %1312 = "llvm.getelementptr"(%1310, %1311) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1313 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1314 = "llvm.getelementptr"(%1312, %1313) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1314) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb253(%1315 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1316 : !llvm.ptr):
      %1317 = "mid.invariant"(%1316) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1318 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb254] : () -> ()
    ^bb255:
      %1319 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1319, %1318) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb256] : () -> ()
    ^bb254:
      %1320 = "llvm.getelementptr"(%1316) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1321 = "mid.checkflag"(%1320) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1322 = "llvm.load"(%1321) : (!hi.bool) -> i1
      "cf.cond_br"(%1322) [^bb255, ^bb255] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb256:
      %1323 = "llvm.extractvalue"(%1315) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1324 = "llvm.load"(%1318) : (!llvm.ptr) -> i32
      %1325 = "llvm.getelementptr"(%1323, %1324) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1326 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1327 = "llvm.getelementptr"(%1325, %1326) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1327) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb257(%1328 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1329 : !llvm.ptr):
      %1330 = "mid.invariant"(%1329) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1331 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb258] : () -> ()
    ^bb259:
      %1332 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1332, %1331) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb260] : () -> ()
    ^bb258:
      %1333 = "llvm.getelementptr"(%1329) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1334 = "mid.checkflag"(%1333) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1335 = "llvm.load"(%1334) : (!hi.bool) -> i1
      "cf.cond_br"(%1335) [^bb259, ^bb259] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb260:
      %1336 = "llvm.extractvalue"(%1328) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1337 = "llvm.load"(%1331) : (!llvm.ptr) -> i32
      %1338 = "llvm.getelementptr"(%1336, %1337) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1339 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1340 = "llvm.getelementptr"(%1338, %1339) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1340) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb261(%1341 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1342 : !llvm.ptr):
      %1343 = "mid.invariant"(%1342) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1344 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb262] : () -> ()
    ^bb263:
      %1345 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1345, %1344) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb264] : () -> ()
    ^bb262:
      %1346 = "llvm.getelementptr"(%1342) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1347 = "mid.checkflag"(%1346) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1348 = "llvm.load"(%1347) : (!hi.bool) -> i1
      "cf.cond_br"(%1348) [^bb263, ^bb263] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb264:
      %1349 = "llvm.extractvalue"(%1341) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1350 = "llvm.load"(%1344) : (!llvm.ptr) -> i32
      %1351 = "llvm.getelementptr"(%1349, %1350) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1352 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1353 = "llvm.getelementptr"(%1351, %1352) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1353) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb265(%1354 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1355 : !llvm.ptr):
      %1356 = "mid.invariant"(%1355) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1357 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb266] : () -> ()
    ^bb267:
      %1358 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1358, %1357) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb268] : () -> ()
    ^bb266:
      %1359 = "llvm.getelementptr"(%1355) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1360 = "mid.checkflag"(%1359) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1361 = "llvm.load"(%1360) : (!hi.bool) -> i1
      "cf.cond_br"(%1361) [^bb267, ^bb267] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb268:
      %1362 = "llvm.extractvalue"(%1354) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1363 = "llvm.load"(%1357) : (!llvm.ptr) -> i32
      %1364 = "llvm.getelementptr"(%1362, %1363) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1365 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1366 = "llvm.getelementptr"(%1364, %1365) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1366) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb269(%1367 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1368 : !llvm.ptr):
      %1369 = "mid.invariant"(%1368) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1370 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb270] : () -> ()
    ^bb271:
      %1371 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1371, %1370) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb272] : () -> ()
    ^bb270:
      %1372 = "llvm.getelementptr"(%1368) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1373 = "mid.checkflag"(%1372) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1374 = "llvm.load"(%1373) : (!hi.bool) -> i1
      "cf.cond_br"(%1374) [^bb271, ^bb271] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb272:
      %1375 = "llvm.extractvalue"(%1367) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1376 = "llvm.load"(%1370) : (!llvm.ptr) -> i32
      %1377 = "llvm.getelementptr"(%1375, %1376) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1378 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1379 = "llvm.getelementptr"(%1377, %1378) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1379) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb273(%1380 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1381 : !llvm.ptr):
      %1382 = "mid.invariant"(%1381) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1383 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb274] : () -> ()
    ^bb275:
      %1384 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1384, %1383) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb276] : () -> ()
    ^bb274:
      %1385 = "llvm.getelementptr"(%1381) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1386 = "mid.checkflag"(%1385) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1387 = "llvm.load"(%1386) : (!hi.bool) -> i1
      "cf.cond_br"(%1387) [^bb275, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb276:
      %1388 = "llvm.extractvalue"(%1380) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1389 = "llvm.load"(%1383) : (!llvm.ptr) -> i32
      %1390 = "llvm.getelementptr"(%1388, %1389) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1391 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1392 = "llvm.getelementptr"(%1390, %1391) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1392) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filtered_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Filterer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Filterer_field_Filterer_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Filterer_getter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorFilterer.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Filterer_setter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorFilterer.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Filterer_field_iterator", "getter_name" = "Filterer_getter_iterator", "setter_name" = "Filterer_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Filterer_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterer.T_subtype_Any_to_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Filterer_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterer.T_subtype_Any_to_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Filterer_field_f", "getter_name" = "Filterer_getter_f", "setter_name" = "Filterer_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb277(%1393 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1394 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1395 : !llvm.ptr, %1396 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1397 : !llvm.struct<(!llvm.ptr)>):
      %1398 = "mid.wrap"(%1393) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>
      %1399 = "hi.cast"(%1398) {"from_typ" = !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>, "to_typ" = !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>, "from_typ_name" = "Filterer", "to_typ_name" = "Filterer"} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>
      %1400 = "mid.wrap"(%1396) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>
      %1401 = "hi.cast"(%1400) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>
      %1402 = "hi.cast"(%1401) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>
      "mid.set_field"(%1399, %1402) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> ()
      %1403 = "mid.wrap"(%1397) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>
      %1404 = "hi.cast"(%1403) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>
      %1405 = "hi.cast"(%1404) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>
      "mid.set_field"(%1399, %1405) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>, !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>) -> ()
    }) {"func_name" = "Filterer_init_iteratorIteratorT_fFunctionT_to_Bool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb278(%1406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1407 : !llvm.ptr):
      %1408 = "mid.invariant"(%1407) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1409 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb279] : () -> ()
    ^bb280:
      %1410 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1410, %1409) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb281] : () -> ()
    ^bb282:
      %1411 = "llvm.getelementptr"(%1407) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1412 = "mid.checkflag"(%1411) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1413 = "llvm.load"(%1412) : (!hi.bool) -> i1
      "cf.cond_br"(%1413) [^bb280, ^bb280] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb279:
      %1414 = "llvm.getelementptr"(%1407) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1415 = "mid.checkflag"(%1414) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1416 = "llvm.load"(%1415) : (!hi.bool) -> i1
      "cf.cond_br"(%1416) [^bb282, ^bb282] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb281:
      %1417 = "llvm.extractvalue"(%1406) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1418 = "llvm.load"(%1409) : (!llvm.ptr) -> i32
      %1419 = "llvm.getelementptr"(%1417, %1418) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1420 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1421 = "llvm.getelementptr"(%1419, %1420) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1421) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filterer_B_init_iteratorIteratorT_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb283(%1422 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1423 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1424 : !llvm.ptr):
      %1425 = "mid.wrap"(%1422) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>
      %1426 = "hi.cast"(%1425) {"from_typ" = !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>, "to_typ" = !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>, "from_typ_name" = "Filterer", "to_typ_name" = "Filterer"} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>
      %1427 = "mid.get_field"(%1426) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>
      %1428 = "mid.unwrap"(%1427) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1429 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1430 = "mid.method_call"(%1429, %1428) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1431 = "hi.cast"(%1430) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>
      "mid.while"() ({
        %1432 = "mid.get_type_field"(%1426) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !hi.reified_type
        %1433 = "mid.checkflag"(%1431) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>) -> si1
        %1434 = "mid.unwrap"(%1433) : (si1) -> i1
      }, {
        %1435 = "hi.cast"(%1431) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Filterer">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Filterer">
        %1436 = "hi.cast"(%1435) {"from_typ" = !hi.type_param<"T", !hi.any, "Filterer">, "to_typ" = !hi.type_param<"T", !hi.any, "Filterer">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Filterer">) -> !hi.type_param<"T", !hi.any, "Filterer">
        %1437 = "mid.unwrap"(%1436) : (!hi.type_param<"T", !hi.any, "Filterer">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1438 = "mid.get_field"(%1426) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>
        %1439 = "mid.unwrap"(%1438) : (!hi.function<[!hi.type_param<"T", !hi.any, "Filterer">], !hi.any, !hi.bool>) -> !llvm.ptr
        %1440 = "mid.fptr_call"(%1439, %1437) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %1441 = "mid.unwrap"(%1440) : (!hi.bool) -> i1
        "mid.if"(%1441) ({
          %1442 = "hi.cast"(%1435) {"from_typ" = !hi.type_param<"T", !hi.any, "Filterer">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Filterer">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>
          "mid.return"(%1442) : (!hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1443 = "mid.get_field"(%1426) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Filterer", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>
        %1444 = "mid.unwrap"(%1443) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Filterer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1445 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1446 = "mid.method_call"(%1445, %1444) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1447 = "hi.cast"(%1446) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>
        %1448 = "hi.cast"(%1447) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>
        "mid.assign"(%1431, %1448) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>) -> ()
      }) : () -> ()
      %1449 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1450 = "hi.cast"(%1449) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>
      "mid.return"(%1450) : (!hi.union<[!hi.type_param<"T", !hi.any, "Filterer">, !hi.nil]>) -> ()
    }) {"func_name" = "Filterer_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb284(%1451 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1452 : !llvm.ptr):
      %1453 = "mid.invariant"(%1452) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1454 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb285] : () -> ()
    ^bb285:
      %1455 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1455, %1454) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb286] : () -> ()
    ^bb286:
      %1456 = "llvm.extractvalue"(%1451) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1457 = "llvm.load"(%1454) : (!llvm.ptr) -> i32
      %1458 = "llvm.getelementptr"(%1456, %1457) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1459 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1460 = "llvm.getelementptr"(%1458, %1459) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1460) : (!llvm.ptr) -> ()
    }) {"func_name" = "Filterer_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Chained", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Chained_field_Chained_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Chained_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChained.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Chained_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChained.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Chained_field_first", "getter_name" = "Chained_getter_first", "setter_name" = "Chained_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Chained_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChained.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Chained_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChained.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Chained_field_second", "getter_name" = "Chained_getter_second", "setter_name" = "Chained_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb287(%1461 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1462 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1463 : !llvm.ptr, %1464 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1465 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1466 = "mid.wrap"(%1461) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1467 = "hi.cast"(%1466) {"from_typ" = !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Chained", "to_typ_name" = "Chained"} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1468 = "mid.wrap"(%1464) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1469 = "hi.cast"(%1468) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1470 = "hi.cast"(%1469) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      "mid.set_field"(%1467, %1470) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> ()
      %1471 = "mid.wrap"(%1465) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1472 = "hi.cast"(%1471) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1473 = "hi.cast"(%1472) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      "mid.set_field"(%1467, %1473) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> ()
    }) {"func_name" = "Chained_init_firstIterableT_secondIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb288(%1474 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1475 : !llvm.ptr):
      %1476 = "mid.invariant"(%1475) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1477 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb289] : () -> ()
    ^bb290:
      %1478 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1478, %1477) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb291] : () -> ()
    ^bb292:
      %1479 = "llvm.getelementptr"(%1475) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1480 = "mid.checkflag"(%1479) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1481 = "llvm.load"(%1480) : (!hi.bool) -> i1
      "cf.cond_br"(%1481) [^bb290, ^bb290] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb289:
      %1482 = "llvm.getelementptr"(%1475) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1483 = "mid.checkflag"(%1482) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1484 = "llvm.load"(%1483) : (!hi.bool) -> i1
      "cf.cond_br"(%1484) [^bb292, ^bb292] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb291:
      %1485 = "llvm.extractvalue"(%1474) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1486 = "llvm.load"(%1477) : (!llvm.ptr) -> i32
      %1487 = "llvm.getelementptr"(%1485, %1486) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1488 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1489 = "llvm.getelementptr"(%1487, %1488) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1489) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_init_firstIterableT_secondIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb293(%1490 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1491 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1492 : !llvm.ptr):
      %1493 = "mid.wrap"(%1490) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1494 = "hi.cast"(%1493) {"from_typ" = !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Chained", "to_typ_name" = "Chained"} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1495 = "mid.get_field"(%1494) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1496 = "mid.unwrap"(%1495) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1497 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1498 = "mid.method_call"(%1497, %1496) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1499 = "hi.cast"(%1498) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1500 = "mid.get_field"(%1494) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1501 = "mid.unwrap"(%1500) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1502 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1503 = "mid.method_call"(%1502, %1501) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1504 = "hi.cast"(%1503) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1505 = "mid.unwrap"(%1499) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1506 = "mid.unwrap"(%1504) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1507 = "mid.get_type_field"(%1494) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.reified_type
      %1508 = "mid.new"(%1507) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "Chainer", "num_data_fields" = 3 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1509 = "mid.get_field"(%1494) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1510 = "mid.unwrap"(%1509) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1511 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1512 = "mid.method_call"(%1511, %1510) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1513 = "hi.cast"(%1512) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1514 = "mid.get_field"(%1494) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1515 = "mid.unwrap"(%1514) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1516 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1517 = "mid.method_call"(%1516, %1515) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1518 = "hi.cast"(%1517) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>
      %1519 = "hi.cast"(%1513) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1520 = "mid.unwrap"(%1519) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1521 = "hi.cast"(%1518) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1522 = "mid.unwrap"(%1521) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1523 = "mid.unwrap"(%1508) : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1524 = "mid.get_type_field"(%1494) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.reified_type
      %1525 = "mid.parameterization"(%1524) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChained.T_subtype_Any", ["Chained.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1526 = "mid.get_type_field"(%1494) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Chained", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.reified_type
      %1527 = "mid.parameterization"(%1526) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChained.T_subtype_Any", ["Chained.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1528 = "mid.parameterizations_array"(%1525, %1527) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1528, %1523, %1520, %1522) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1529 = "hi.cast"(%1508) {"from_typ" = !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chained">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>, "from_typ_name" = "Chainer", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chained">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>
      "mid.return"(%1529) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chained">]>) -> ()
    }) {"func_name" = "Chained_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb294(%1530 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1531 : !llvm.ptr):
      %1532 = "mid.invariant"(%1531) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1533 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb295] : () -> ()
    ^bb295:
      %1534 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1534, %1533) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb296] : () -> ()
    ^bb296:
      %1535 = "llvm.extractvalue"(%1530) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1536 = "llvm.load"(%1533) : (!llvm.ptr) -> i32
      %1537 = "llvm.getelementptr"(%1535, %1536) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1538 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1539 = "llvm.getelementptr"(%1537, %1538) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1539) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb297(%1540 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1541 : !llvm.ptr):
      %1542 = "mid.invariant"(%1541) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1543 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb298] : () -> ()
    ^bb299:
      %1544 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1544, %1543) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb300] : () -> ()
    ^bb298:
      %1545 = "llvm.getelementptr"(%1541) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1546 = "mid.checkflag"(%1545) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1547 = "llvm.load"(%1546) : (!hi.bool) -> i1
      "cf.cond_br"(%1547) [^bb299, ^bb299] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb300:
      %1548 = "llvm.extractvalue"(%1540) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1549 = "llvm.load"(%1543) : (!llvm.ptr) -> i32
      %1550 = "llvm.getelementptr"(%1548, %1549) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1551 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1552 = "llvm.getelementptr"(%1550, %1551) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1552) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb301(%1553 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1554 : !llvm.ptr):
      %1555 = "mid.invariant"(%1554) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1556 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb302] : () -> ()
    ^bb303:
      %1557 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1557, %1556) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb304] : () -> ()
    ^bb305:
      %1558 = "llvm.getelementptr"(%1554) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1559 = "mid.checkflag"(%1558) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1560 = "llvm.load"(%1559) : (!hi.bool) -> i1
      "cf.cond_br"(%1560) [^bb303, ^bb303] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb302:
      %1561 = "llvm.getelementptr"(%1554) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1562 = "mid.checkflag"(%1561) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1563 = "llvm.load"(%1562) : (!hi.bool) -> i1
      "cf.cond_br"(%1563) [^bb305, ^bb305] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb304:
      %1564 = "llvm.extractvalue"(%1553) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1565 = "llvm.load"(%1556) : (!llvm.ptr) -> i32
      %1566 = "llvm.getelementptr"(%1564, %1565) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1567 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1568 = "llvm.getelementptr"(%1566, %1567) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1568) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb306(%1569 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1570 : !llvm.ptr):
      %1571 = "mid.invariant"(%1570) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1572 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb307] : () -> ()
    ^bb308:
      %1573 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1573, %1572) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb309] : () -> ()
    ^bb307:
      %1574 = "llvm.getelementptr"(%1570) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1575 = "mid.checkflag"(%1574) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1576 = "llvm.load"(%1575) : (!hi.bool) -> i1
      "cf.cond_br"(%1576) [^bb308, ^bb308] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb309:
      %1577 = "llvm.extractvalue"(%1569) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1578 = "llvm.load"(%1572) : (!llvm.ptr) -> i32
      %1579 = "llvm.getelementptr"(%1577, %1578) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1580 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1581 = "llvm.getelementptr"(%1579, %1580) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1581) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb310(%1582 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1583 : !llvm.ptr):
      %1584 = "mid.invariant"(%1583) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1585 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb311] : () -> ()
    ^bb312:
      %1586 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1586, %1585) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb313] : () -> ()
    ^bb311:
      %1587 = "llvm.getelementptr"(%1583) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1588 = "mid.checkflag"(%1587) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1589 = "llvm.load"(%1588) : (!hi.bool) -> i1
      "cf.cond_br"(%1589) [^bb312, ^bb312] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb313:
      %1590 = "llvm.extractvalue"(%1582) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1591 = "llvm.load"(%1585) : (!llvm.ptr) -> i32
      %1592 = "llvm.getelementptr"(%1590, %1591) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1593 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1594 = "llvm.getelementptr"(%1592, %1593) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1594) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb314(%1595 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1596 : !llvm.ptr):
      %1597 = "mid.invariant"(%1596) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1598 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb315] : () -> ()
    ^bb315:
      %1599 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1599, %1598) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb316] : () -> ()
    ^bb316:
      %1600 = "llvm.extractvalue"(%1595) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1601 = "llvm.load"(%1598) : (!llvm.ptr) -> i32
      %1602 = "llvm.getelementptr"(%1600, %1601) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1603 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1604 = "llvm.getelementptr"(%1602, %1603) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1604) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb317(%1605 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1606 : !llvm.ptr):
      %1607 = "mid.invariant"(%1606) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1608 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb318] : () -> ()
    ^bb319:
      %1609 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1609, %1608) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb320] : () -> ()
    ^bb318:
      %1610 = "llvm.getelementptr"(%1606) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1611 = "mid.checkflag"(%1610) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1612 = "llvm.load"(%1611) : (!hi.bool) -> i1
      "cf.cond_br"(%1612) [^bb319, ^bb319] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb320:
      %1613 = "llvm.extractvalue"(%1605) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1614 = "llvm.load"(%1608) : (!llvm.ptr) -> i32
      %1615 = "llvm.getelementptr"(%1613, %1614) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1616 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1617 = "llvm.getelementptr"(%1615, %1616) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1617) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb321(%1618 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1619 : !llvm.ptr):
      %1620 = "mid.invariant"(%1619) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1621 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb322] : () -> ()
    ^bb323:
      %1622 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1622, %1621) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb324] : () -> ()
    ^bb322:
      %1623 = "llvm.getelementptr"(%1619) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1624 = "mid.checkflag"(%1623) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1625 = "llvm.load"(%1624) : (!hi.bool) -> i1
      "cf.cond_br"(%1625) [^bb323, ^bb323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb324:
      %1626 = "llvm.extractvalue"(%1618) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1627 = "llvm.load"(%1621) : (!llvm.ptr) -> i32
      %1628 = "llvm.getelementptr"(%1626, %1627) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1629 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1630 = "llvm.getelementptr"(%1628, %1629) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1630) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb325(%1631 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1632 : !llvm.ptr):
      %1633 = "mid.invariant"(%1632) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1634 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb326] : () -> ()
    ^bb327:
      %1635 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1635, %1634) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb328] : () -> ()
    ^bb326:
      %1636 = "llvm.getelementptr"(%1632) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1637 = "mid.checkflag"(%1636) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1638 = "llvm.load"(%1637) : (!hi.bool) -> i1
      "cf.cond_br"(%1638) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb328:
      %1639 = "llvm.extractvalue"(%1631) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1640 = "llvm.load"(%1634) : (!llvm.ptr) -> i32
      %1641 = "llvm.getelementptr"(%1639, %1640) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1642 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1643 = "llvm.getelementptr"(%1641, %1642) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1643) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb329(%1644 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1645 : !llvm.ptr):
      %1646 = "mid.invariant"(%1645) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1647 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb330] : () -> ()
    ^bb331:
      %1648 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1648, %1647) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb332] : () -> ()
    ^bb330:
      %1649 = "llvm.getelementptr"(%1645) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1650 = "mid.checkflag"(%1649) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1651 = "llvm.load"(%1650) : (!hi.bool) -> i1
      "cf.cond_br"(%1651) [^bb331, ^bb331] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb332:
      %1652 = "llvm.extractvalue"(%1644) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1653 = "llvm.load"(%1647) : (!llvm.ptr) -> i32
      %1654 = "llvm.getelementptr"(%1652, %1653) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1655 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1656 = "llvm.getelementptr"(%1654, %1655) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1656) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb333(%1657 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1658 : !llvm.ptr):
      %1659 = "mid.invariant"(%1658) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1660 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb334] : () -> ()
    ^bb335:
      %1661 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1661, %1660) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb336] : () -> ()
    ^bb334:
      %1662 = "llvm.getelementptr"(%1658) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1663 = "mid.checkflag"(%1662) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1664 = "llvm.load"(%1663) : (!hi.bool) -> i1
      "cf.cond_br"(%1664) [^bb335, ^bb335] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb336:
      %1665 = "llvm.extractvalue"(%1657) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1666 = "llvm.load"(%1660) : (!llvm.ptr) -> i32
      %1667 = "llvm.getelementptr"(%1665, %1666) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1668 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1669 = "llvm.getelementptr"(%1667, %1668) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1669) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb337(%1670 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1671 : !llvm.ptr):
      %1672 = "mid.invariant"(%1671) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1673 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb338] : () -> ()
    ^bb339:
      %1674 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1674, %1673) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb340] : () -> ()
    ^bb338:
      %1675 = "llvm.getelementptr"(%1671) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1676 = "mid.checkflag"(%1675) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1677 = "llvm.load"(%1676) : (!hi.bool) -> i1
      "cf.cond_br"(%1677) [^bb339, ^bb339] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb340:
      %1678 = "llvm.extractvalue"(%1670) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1679 = "llvm.load"(%1673) : (!llvm.ptr) -> i32
      %1680 = "llvm.getelementptr"(%1678, %1679) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1681 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1682 = "llvm.getelementptr"(%1680, %1681) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1682) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chained_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Chainer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Chainer_field_Chainer_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Chainer_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainer.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Chainer_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainer.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Chainer_field_first", "getter_name" = "Chainer_getter_first", "setter_name" = "Chainer_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Chainer_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainer.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Chainer_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainer.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Chainer_field_second", "getter_name" = "Chainer_getter_second", "setter_name" = "Chainer_setter_second"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Chainer_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Chainer_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Chainer_field_on_first", "getter_name" = "Chainer_getter_on_first", "setter_name" = "Chainer_setter_on_first"} : () -> ()
    "mid.func"() ({
    ^bb341(%1683 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1684 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1685 : !llvm.ptr, %1686 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1687 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1688 = "mid.wrap"(%1683) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1689 = "hi.cast"(%1688) {"from_typ" = !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>, "to_typ" = !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Chainer", "to_typ_name" = "Chainer"} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1690 = "mid.wrap"(%1686) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1691 = "hi.cast"(%1690) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1692 = "hi.cast"(%1691) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      "mid.set_field"(%1689, %1692) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> ()
      %1693 = "mid.wrap"(%1687) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1694 = "hi.cast"(%1693) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1695 = "hi.cast"(%1694) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      "mid.set_field"(%1689, %1695) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> ()
      %1696 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1697 = "hi.cast"(%1696) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1689, %1697) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>, !hi.bool) -> ()
    }) {"func_name" = "Chainer_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb342(%1698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1699 : !llvm.ptr):
      %1700 = "mid.invariant"(%1699) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1701 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb343] : () -> ()
    ^bb344:
      %1702 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1702, %1701) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb345] : () -> ()
    ^bb346:
      %1703 = "llvm.getelementptr"(%1699) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1704 = "mid.checkflag"(%1703) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1705 = "llvm.load"(%1704) : (!hi.bool) -> i1
      "cf.cond_br"(%1705) [^bb344, ^bb344] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb343:
      %1706 = "llvm.getelementptr"(%1699) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1707 = "mid.checkflag"(%1706) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1708 = "llvm.load"(%1707) : (!hi.bool) -> i1
      "cf.cond_br"(%1708) [^bb346, ^bb346] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb345:
      %1709 = "llvm.extractvalue"(%1698) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1710 = "llvm.load"(%1701) : (!llvm.ptr) -> i32
      %1711 = "llvm.getelementptr"(%1709, %1710) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1712 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1713 = "llvm.getelementptr"(%1711, %1712) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1713) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chainer_B_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb347(%1714 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1715 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1716 : !llvm.ptr):
      %1717 = "mid.wrap"(%1714) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1718 = "hi.cast"(%1717) {"from_typ" = !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>, "to_typ" = !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Chainer", "to_typ_name" = "Chainer"} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1719 = "mid.get_field"(%1718) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.bool
      %1720 = "mid.unwrap"(%1719) : (!hi.bool) -> i1
      "mid.if"(%1720) ({
        %1721 = "mid.get_field"(%1718) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
        %1722 = "mid.unwrap"(%1721) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1723 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1724 = "mid.method_call"(%1723, %1722) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1725 = "hi.cast"(%1724) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>
        %1726 = "mid.get_type_field"(%1718) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.reified_type
        %1727 = "mid.checkflag"(%1725) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>) -> si1
        %1728 = "mid.unwrap"(%1727) : (si1) -> i1
        "mid.if"(%1728) ({
          %1729 = "hi.cast"(%1725) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Chainer">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Chainer">
          %1730 = "hi.cast"(%1729) {"from_typ" = !hi.type_param<"T", !hi.any, "Chainer">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Chainer">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>
          "mid.return"(%1730) : (!hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1731 = "hi.cast"(%1725) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>) -> !hi.nil
        %1732 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1733 = "hi.cast"(%1732) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.set_field"(%1718, %1733) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>, !hi.bool) -> ()
      }) : (i1) -> ()
      %1734 = "mid.get_field"(%1718) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1735 = "mid.unwrap"(%1734) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1736 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1737 = "mid.method_call"(%1736, %1735) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1738 = "hi.cast"(%1737) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>
      %1739 = "hi.cast"(%1738) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>
      "mid.return"(%1739) : (!hi.union<[!hi.type_param<"T", !hi.any, "Chainer">, !hi.nil]>) -> ()
    }) {"func_name" = "Chainer_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb348(%1740 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1741 : !llvm.ptr):
      %1742 = "mid.invariant"(%1741) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1743 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb349] : () -> ()
    ^bb349:
      %1744 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1744, %1743) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb350] : () -> ()
    ^bb350:
      %1745 = "llvm.extractvalue"(%1740) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1746 = "llvm.load"(%1743) : (!llvm.ptr) -> i32
      %1747 = "llvm.getelementptr"(%1745, %1746) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1748 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1749 = "llvm.getelementptr"(%1747, %1748) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1749) : (!llvm.ptr) -> ()
    }) {"func_name" = "Chainer_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Interleaved", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Interleaved_field_Interleaved_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Interleaved_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaved.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Interleaved_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaved.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Interleaved_field_first", "getter_name" = "Interleaved_getter_first", "setter_name" = "Interleaved_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Interleaved_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaved.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Interleaved_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaved.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Interleaved_field_second", "getter_name" = "Interleaved_getter_second", "setter_name" = "Interleaved_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb351(%1750 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1751 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1752 : !llvm.ptr, %1753 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1754 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1755 = "mid.wrap"(%1750) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1756 = "hi.cast"(%1755) {"from_typ" = !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Interleaved", "to_typ_name" = "Interleaved"} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1757 = "mid.wrap"(%1753) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1758 = "hi.cast"(%1757) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1759 = "hi.cast"(%1758) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      "mid.set_field"(%1756, %1759) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> ()
      %1760 = "mid.wrap"(%1754) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1761 = "hi.cast"(%1760) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1762 = "hi.cast"(%1761) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      "mid.set_field"(%1756, %1762) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> ()
    }) {"func_name" = "Interleaved_init_firstIterableT_secondIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb352(%1763 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1764 : !llvm.ptr):
      %1765 = "mid.invariant"(%1764) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1766 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb353] : () -> ()
    ^bb354:
      %1767 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1767, %1766) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb355] : () -> ()
    ^bb356:
      %1768 = "llvm.getelementptr"(%1764) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1769 = "mid.checkflag"(%1768) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1770 = "llvm.load"(%1769) : (!hi.bool) -> i1
      "cf.cond_br"(%1770) [^bb354, ^bb354] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb353:
      %1771 = "llvm.getelementptr"(%1764) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1772 = "mid.checkflag"(%1771) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1773 = "llvm.load"(%1772) : (!hi.bool) -> i1
      "cf.cond_br"(%1773) [^bb356, ^bb356] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb355:
      %1774 = "llvm.extractvalue"(%1763) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1775 = "llvm.load"(%1766) : (!llvm.ptr) -> i32
      %1776 = "llvm.getelementptr"(%1774, %1775) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1777 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1778 = "llvm.getelementptr"(%1776, %1777) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1778) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_init_firstIterableT_secondIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb357(%1779 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1780 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1781 : !llvm.ptr):
      %1782 = "mid.wrap"(%1779) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1783 = "hi.cast"(%1782) {"from_typ" = !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Interleaved", "to_typ_name" = "Interleaved"} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1784 = "mid.get_field"(%1783) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1785 = "mid.unwrap"(%1784) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1786 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1787 = "mid.method_call"(%1786, %1785) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1788 = "hi.cast"(%1787) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1789 = "mid.get_field"(%1783) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1790 = "mid.unwrap"(%1789) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1791 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1792 = "mid.method_call"(%1791, %1790) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1793 = "hi.cast"(%1792) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1794 = "mid.unwrap"(%1788) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1795 = "mid.unwrap"(%1793) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1796 = "mid.get_type_field"(%1783) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.reified_type
      %1797 = "mid.new"(%1796) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "Interleaver", "num_data_fields" = 3 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1798 = "mid.get_field"(%1783) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1799 = "mid.unwrap"(%1798) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1800 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1801 = "mid.method_call"(%1800, %1799) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1802 = "hi.cast"(%1801) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1803 = "mid.get_field"(%1783) {"offset" = 2 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1804 = "mid.unwrap"(%1803) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1805 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1806 = "mid.method_call"(%1805, %1804) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1807 = "hi.cast"(%1806) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      %1808 = "hi.cast"(%1802) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1809 = "mid.unwrap"(%1808) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1810 = "hi.cast"(%1807) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1811 = "mid.unwrap"(%1810) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1812 = "mid.unwrap"(%1797) : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1813 = "mid.get_type_field"(%1783) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.reified_type
      %1814 = "mid.parameterization"(%1813) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleaved.T_subtype_Any", ["Interleaved.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1815 = "mid.get_type_field"(%1783) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32} : (!hi.fatptr<"Interleaved", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.reified_type
      %1816 = "mid.parameterization"(%1815) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleaved.T_subtype_Any", ["Interleaved.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1817 = "mid.parameterizations_array"(%1814, %1816) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1817, %1812, %1809, %1811) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1818 = "hi.cast"(%1797) {"from_typ" = !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>, "from_typ_name" = "Interleaver", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>
      "mid.return"(%1818) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaved">]>) -> ()
    }) {"func_name" = "Interleaved_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb358(%1819 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1820 : !llvm.ptr):
      %1821 = "mid.invariant"(%1820) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1822 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb359] : () -> ()
    ^bb359:
      %1823 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1823, %1822) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb360] : () -> ()
    ^bb360:
      %1824 = "llvm.extractvalue"(%1819) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1825 = "llvm.load"(%1822) : (!llvm.ptr) -> i32
      %1826 = "llvm.getelementptr"(%1824, %1825) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1827 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1828 = "llvm.getelementptr"(%1826, %1827) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1828) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb361(%1829 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1830 : !llvm.ptr):
      %1831 = "mid.invariant"(%1830) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1832 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb362] : () -> ()
    ^bb363:
      %1833 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1833, %1832) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb364] : () -> ()
    ^bb362:
      %1834 = "llvm.getelementptr"(%1830) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1835 = "mid.checkflag"(%1834) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1836 = "llvm.load"(%1835) : (!hi.bool) -> i1
      "cf.cond_br"(%1836) [^bb363, ^bb363] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb364:
      %1837 = "llvm.extractvalue"(%1829) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1838 = "llvm.load"(%1832) : (!llvm.ptr) -> i32
      %1839 = "llvm.getelementptr"(%1837, %1838) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1840 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1841 = "llvm.getelementptr"(%1839, %1840) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1841) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb365(%1842 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1843 : !llvm.ptr):
      %1844 = "mid.invariant"(%1843) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1845 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb366] : () -> ()
    ^bb367:
      %1846 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1846, %1845) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb368] : () -> ()
    ^bb369:
      %1847 = "llvm.getelementptr"(%1843) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1848 = "mid.checkflag"(%1847) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1849 = "llvm.load"(%1848) : (!hi.bool) -> i1
      "cf.cond_br"(%1849) [^bb367, ^bb367] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb366:
      %1850 = "llvm.getelementptr"(%1843) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1851 = "mid.checkflag"(%1850) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1852 = "llvm.load"(%1851) : (!hi.bool) -> i1
      "cf.cond_br"(%1852) [^bb369, ^bb369] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb368:
      %1853 = "llvm.extractvalue"(%1842) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1854 = "llvm.load"(%1845) : (!llvm.ptr) -> i32
      %1855 = "llvm.getelementptr"(%1853, %1854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1856 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1857 = "llvm.getelementptr"(%1855, %1856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1857) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb370(%1858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1859 : !llvm.ptr):
      %1860 = "mid.invariant"(%1859) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1861 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb371] : () -> ()
    ^bb372:
      %1862 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1862, %1861) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb373] : () -> ()
    ^bb371:
      %1863 = "llvm.getelementptr"(%1859) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1864 = "mid.checkflag"(%1863) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1865 = "llvm.load"(%1864) : (!hi.bool) -> i1
      "cf.cond_br"(%1865) [^bb372, ^bb372] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb373:
      %1866 = "llvm.extractvalue"(%1858) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1867 = "llvm.load"(%1861) : (!llvm.ptr) -> i32
      %1868 = "llvm.getelementptr"(%1866, %1867) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1869 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1870 = "llvm.getelementptr"(%1868, %1869) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1870) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb374(%1871 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1872 : !llvm.ptr):
      %1873 = "mid.invariant"(%1872) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1874 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb375] : () -> ()
    ^bb376:
      %1875 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1875, %1874) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb377] : () -> ()
    ^bb375:
      %1876 = "llvm.getelementptr"(%1872) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1877 = "mid.checkflag"(%1876) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1878 = "llvm.load"(%1877) : (!hi.bool) -> i1
      "cf.cond_br"(%1878) [^bb376, ^bb376] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb377:
      %1879 = "llvm.extractvalue"(%1871) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1880 = "llvm.load"(%1874) : (!llvm.ptr) -> i32
      %1881 = "llvm.getelementptr"(%1879, %1880) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1882 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1883 = "llvm.getelementptr"(%1881, %1882) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1883) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb378(%1884 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1885 : !llvm.ptr):
      %1886 = "mid.invariant"(%1885) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1887 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb379] : () -> ()
    ^bb379:
      %1888 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1888, %1887) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb380] : () -> ()
    ^bb380:
      %1889 = "llvm.extractvalue"(%1884) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1890 = "llvm.load"(%1887) : (!llvm.ptr) -> i32
      %1891 = "llvm.getelementptr"(%1889, %1890) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1892 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1893 = "llvm.getelementptr"(%1891, %1892) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1893) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb381(%1894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1895 : !llvm.ptr):
      %1896 = "mid.invariant"(%1895) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1897 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb382] : () -> ()
    ^bb383:
      %1898 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1898, %1897) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb384] : () -> ()
    ^bb382:
      %1899 = "llvm.getelementptr"(%1895) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1900 = "mid.checkflag"(%1899) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1901 = "llvm.load"(%1900) : (!hi.bool) -> i1
      "cf.cond_br"(%1901) [^bb383, ^bb383] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb384:
      %1902 = "llvm.extractvalue"(%1894) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1903 = "llvm.load"(%1897) : (!llvm.ptr) -> i32
      %1904 = "llvm.getelementptr"(%1902, %1903) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1905 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1906 = "llvm.getelementptr"(%1904, %1905) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1906) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb385(%1907 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1908 : !llvm.ptr):
      %1909 = "mid.invariant"(%1908) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1910 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb386] : () -> ()
    ^bb387:
      %1911 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1911, %1910) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb388] : () -> ()
    ^bb386:
      %1912 = "llvm.getelementptr"(%1908) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1913 = "mid.checkflag"(%1912) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1914 = "llvm.load"(%1913) : (!hi.bool) -> i1
      "cf.cond_br"(%1914) [^bb387, ^bb387] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb388:
      %1915 = "llvm.extractvalue"(%1907) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1916 = "llvm.load"(%1910) : (!llvm.ptr) -> i32
      %1917 = "llvm.getelementptr"(%1915, %1916) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1918 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1919 = "llvm.getelementptr"(%1917, %1918) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1919) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb389(%1920 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1921 : !llvm.ptr):
      %1922 = "mid.invariant"(%1921) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1923 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb390] : () -> ()
    ^bb391:
      %1924 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1924, %1923) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb392] : () -> ()
    ^bb390:
      %1925 = "llvm.getelementptr"(%1921) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1926 = "mid.checkflag"(%1925) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1927 = "llvm.load"(%1926) : (!hi.bool) -> i1
      "cf.cond_br"(%1927) [^bb391, ^bb391] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb392:
      %1928 = "llvm.extractvalue"(%1920) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1929 = "llvm.load"(%1923) : (!llvm.ptr) -> i32
      %1930 = "llvm.getelementptr"(%1928, %1929) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1931 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1932 = "llvm.getelementptr"(%1930, %1931) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1932) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb393(%1933 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1934 : !llvm.ptr):
      %1935 = "mid.invariant"(%1934) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1936 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb394] : () -> ()
    ^bb395:
      %1937 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1937, %1936) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb396] : () -> ()
    ^bb394:
      %1938 = "llvm.getelementptr"(%1934) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1939 = "mid.checkflag"(%1938) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1940 = "llvm.load"(%1939) : (!hi.bool) -> i1
      "cf.cond_br"(%1940) [^bb395, ^bb395] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb396:
      %1941 = "llvm.extractvalue"(%1933) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1942 = "llvm.load"(%1936) : (!llvm.ptr) -> i32
      %1943 = "llvm.getelementptr"(%1941, %1942) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1944 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1945 = "llvm.getelementptr"(%1943, %1944) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1945) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb397(%1946 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1947 : !llvm.ptr):
      %1948 = "mid.invariant"(%1947) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1949 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb398] : () -> ()
    ^bb399:
      %1950 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1950, %1949) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb400] : () -> ()
    ^bb398:
      %1951 = "llvm.getelementptr"(%1947) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1952 = "mid.checkflag"(%1951) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1953 = "llvm.load"(%1952) : (!hi.bool) -> i1
      "cf.cond_br"(%1953) [^bb399, ^bb399] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb400:
      %1954 = "llvm.extractvalue"(%1946) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1955 = "llvm.load"(%1949) : (!llvm.ptr) -> i32
      %1956 = "llvm.getelementptr"(%1954, %1955) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1957 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1958 = "llvm.getelementptr"(%1956, %1957) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1958) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb401(%1959 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1960 : !llvm.ptr):
      %1961 = "mid.invariant"(%1960) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1962 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb402] : () -> ()
    ^bb403:
      %1963 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1963, %1962) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb404] : () -> ()
    ^bb402:
      %1964 = "llvm.getelementptr"(%1960) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1965 = "mid.checkflag"(%1964) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1966 = "llvm.load"(%1965) : (!hi.bool) -> i1
      "cf.cond_br"(%1966) [^bb403, ^bb403] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb404:
      %1967 = "llvm.extractvalue"(%1959) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1968 = "llvm.load"(%1962) : (!llvm.ptr) -> i32
      %1969 = "llvm.getelementptr"(%1967, %1968) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1970 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1971 = "llvm.getelementptr"(%1969, %1970) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1971) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaved_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Interleaver", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Interleaver_field_Interleaver_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Interleaver_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaver.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Interleaver_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaver.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Interleaver_field_first", "getter_name" = "Interleaver_getter_first", "setter_name" = "Interleaver_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Interleaver_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaver.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Interleaver_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaver.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Interleaver_field_second", "getter_name" = "Interleaver_getter_second", "setter_name" = "Interleaver_setter_second"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Interleaver_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Interleaver_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Interleaver_field_on_first", "getter_name" = "Interleaver_getter_on_first", "setter_name" = "Interleaver_setter_on_first"} : () -> ()
    "mid.func"() ({
    ^bb405(%1972 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1973 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1974 : !llvm.ptr, %1975 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1976 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1977 = "mid.wrap"(%1972) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1978 = "hi.cast"(%1977) {"from_typ" = !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "to_typ" = !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Interleaver", "to_typ_name" = "Interleaver"} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1979 = "mid.wrap"(%1975) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1980 = "hi.cast"(%1979) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1981 = "hi.cast"(%1980) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      "mid.set_field"(%1978, %1981) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> ()
      %1982 = "mid.wrap"(%1976) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1983 = "hi.cast"(%1982) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1984 = "hi.cast"(%1983) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      "mid.set_field"(%1978, %1984) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> ()
      %1985 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1986 = "hi.cast"(%1985) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1978, %1986) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, !hi.bool) -> ()
    }) {"func_name" = "Interleaver_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb406(%1987 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1988 : !llvm.ptr):
      %1989 = "mid.invariant"(%1988) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1990 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb407] : () -> ()
    ^bb408:
      %1991 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1991, %1990) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb409] : () -> ()
    ^bb410:
      %1992 = "llvm.getelementptr"(%1988) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1993 = "mid.checkflag"(%1992) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1994 = "llvm.load"(%1993) : (!hi.bool) -> i1
      "cf.cond_br"(%1994) [^bb408, ^bb408] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb407:
      %1995 = "llvm.getelementptr"(%1988) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1996 = "mid.checkflag"(%1995) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1997 = "llvm.load"(%1996) : (!hi.bool) -> i1
      "cf.cond_br"(%1997) [^bb410, ^bb410] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb409:
      %1998 = "llvm.extractvalue"(%1987) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1999 = "llvm.load"(%1990) : (!llvm.ptr) -> i32
      %2000 = "llvm.getelementptr"(%1998, %1999) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2001 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2002 = "llvm.getelementptr"(%2000, %2001) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2002) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaver_B_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb411(%2003 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2004 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2005 : !llvm.ptr):
      %2006 = "mid.wrap"(%2003) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %2007 = "hi.cast"(%2006) {"from_typ" = !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "to_typ" = !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Interleaver", "to_typ_name" = "Interleaver"} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %2008 = "mid.get_field"(%2007) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.bool
      %2009 = "mid.unwrap"(%2008) : (!hi.bool) -> i1
      "mid.if"(%2009) ({
        %2010 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %2011 = "hi.cast"(%2010) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.set_field"(%2007, %2011) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, !hi.bool) -> ()
        %2012 = "mid.get_field"(%2007) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
        %2013 = "mid.unwrap"(%2012) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2014 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2015 = "mid.method_call"(%2014, %2013) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %2016 = "hi.cast"(%2015) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>
        %2017 = "mid.get_type_field"(%2007) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.reified_type
        %2018 = "mid.checkflag"(%2016) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> si1
        %2019 = "mid.unwrap"(%2018) : (si1) -> i1
        "mid.if"(%2019) ({
          %2020 = "hi.cast"(%2016) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Interleaver">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Interleaver">
          %2021 = "hi.cast"(%2020) {"from_typ" = !hi.type_param<"T", !hi.any, "Interleaver">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Interleaver">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>
          "mid.return"(%2021) : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %2022 = "hi.cast"(%2016) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> !hi.nil
        %2023 = "mid.get_field"(%2007) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
        %2024 = "mid.unwrap"(%2023) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2025 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2026 = "mid.method_call"(%2025, %2024) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %2027 = "hi.cast"(%2026) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>
        %2028 = "hi.cast"(%2027) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>
        "mid.return"(%2028) : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %2029 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %2030 = "hi.cast"(%2029) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%2007, %2030) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>, !hi.bool) -> ()
      %2031 = "mid.get_field"(%2007) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %2032 = "mid.unwrap"(%2031) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2033 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2034 = "mid.method_call"(%2033, %2032) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2035 = "hi.cast"(%2034) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>
      %2036 = "mid.get_type_field"(%2007) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.reified_type
      %2037 = "mid.checkflag"(%2035) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> si1
      %2038 = "mid.unwrap"(%2037) : (si1) -> i1
      "mid.if"(%2038) ({
        %2039 = "hi.cast"(%2035) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Interleaver">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Interleaver">
        %2040 = "hi.cast"(%2039) {"from_typ" = !hi.type_param<"T", !hi.any, "Interleaver">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Interleaver">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>
        "mid.return"(%2040) : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %2041 = "hi.cast"(%2035) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> !hi.nil
      %2042 = "mid.get_field"(%2007) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %2043 = "mid.unwrap"(%2042) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2044 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2045 = "mid.method_call"(%2044, %2043) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2046 = "hi.cast"(%2045) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>
      %2047 = "hi.cast"(%2046) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>
      "mid.return"(%2047) : (!hi.union<[!hi.type_param<"T", !hi.any, "Interleaver">, !hi.nil]>) -> ()
    }) {"func_name" = "Interleaver_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb412(%2048 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2049 : !llvm.ptr):
      %2050 = "mid.invariant"(%2049) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2051 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb413] : () -> ()
    ^bb413:
      %2052 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%2052, %2051) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb414] : () -> ()
    ^bb414:
      %2053 = "llvm.extractvalue"(%2048) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2054 = "llvm.load"(%2051) : (!llvm.ptr) -> i32
      %2055 = "llvm.getelementptr"(%2053, %2054) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2056 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2057 = "llvm.getelementptr"(%2055, %2056) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2057) : (!llvm.ptr) -> ()
    }) {"func_name" = "Interleaver_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Zipped", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Zipped_field_Zipped_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Zipped_field_Zipped_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Zipped_field_Zipped_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Zipped_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipped.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Zipped_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipped.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Zipped_field_first", "getter_name" = "Zipped_getter_first", "setter_name" = "Zipped_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Zipped_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipped.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Zipped_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipped.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Zipped_field_second", "getter_name" = "Zipped_getter_second", "setter_name" = "Zipped_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb415(%2058 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2059 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2060 : !llvm.ptr, %2061 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2062 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2063 = "mid.wrap"(%2058) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>
      %2064 = "hi.cast"(%2063) {"from_typ" = !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>, "from_typ_name" = "Zipped", "to_typ_name" = "Zipped"} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>
      %2065 = "mid.wrap"(%2061) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>
      %2066 = "hi.cast"(%2065) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>
      %2067 = "hi.cast"(%2066) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>
      "mid.set_field"(%2064, %2067) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>) -> ()
      %2068 = "mid.wrap"(%2062) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>
      %2069 = "hi.cast"(%2068) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>
      %2070 = "hi.cast"(%2069) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>
      "mid.set_field"(%2064, %2070) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>) -> ()
    }) {"func_name" = "Zipped_init_firstIterableT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb416(%2071 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2072 : !llvm.ptr):
      %2073 = "mid.invariant"(%2072) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2074 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb417] : () -> ()
    ^bb418:
      %2075 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%2075, %2074) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb419] : () -> ()
    ^bb420:
      %2076 = "llvm.getelementptr"(%2072) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2077 = "mid.checkflag"(%2076) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2078 = "llvm.load"(%2077) : (!hi.bool) -> i1
      "cf.cond_br"(%2078) [^bb418, ^bb418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb417:
      %2079 = "llvm.getelementptr"(%2072) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2080 = "mid.checkflag"(%2079) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2081 = "llvm.load"(%2080) : (!hi.bool) -> i1
      "cf.cond_br"(%2081) [^bb420, ^bb420] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb419:
      %2082 = "llvm.extractvalue"(%2071) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2083 = "llvm.load"(%2074) : (!llvm.ptr) -> i32
      %2084 = "llvm.getelementptr"(%2082, %2083) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2085 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2086 = "llvm.getelementptr"(%2084, %2085) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2086) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_init_firstIterableT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb421(%2087 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2088 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2089 : !llvm.ptr):
      %2090 = "mid.wrap"(%2087) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>
      %2091 = "hi.cast"(%2090) {"from_typ" = !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>, "from_typ_name" = "Zipped", "to_typ_name" = "Zipped"} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>
      %2092 = "mid.get_field"(%2091) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>
      %2093 = "mid.unwrap"(%2092) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2094 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2095 = "mid.method_call"(%2094, %2093) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2096 = "hi.cast"(%2095) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipped">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipped">]>
      %2097 = "mid.get_field"(%2091) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>
      %2098 = "mid.unwrap"(%2097) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2099 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2100 = "mid.method_call"(%2099, %2098) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2101 = "hi.cast"(%2100) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipped">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipped">]>
      %2102 = "mid.unwrap"(%2096) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2103 = "mid.unwrap"(%2101) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2104 = "mid.get_type_field"(%2091) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.reified_type
      %2105 = "mid.get_type_field"(%2091) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.reified_type
      %2106 = "mid.get_type_field"(%2091) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.reified_type
      %2107 = "mid.get_type_field"(%2091) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.reified_type
      %2108 = "mid.parameterization"(%2106, %2107) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairZipped.T_subtype_Any._Zipped.U_subtype_Any", ["Zipped.T_subtype_Any"], ["Zipped.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %2109 = "mid.new"(%2104, %2105, %2108) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Zipper", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>
      %2110 = "mid.get_field"(%2091) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>
      %2111 = "mid.unwrap"(%2110) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2112 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2113 = "mid.method_call"(%2112, %2111) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2114 = "hi.cast"(%2113) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipped">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipped">]>
      %2115 = "mid.get_field"(%2091) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>
      %2116 = "mid.unwrap"(%2115) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2117 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2118 = "mid.method_call"(%2117, %2116) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2119 = "hi.cast"(%2118) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipped">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipped">]>
      %2120 = "hi.cast"(%2114) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>
      %2121 = "mid.unwrap"(%2120) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2122 = "hi.cast"(%2119) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>
      %2123 = "mid.unwrap"(%2122) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2124 = "mid.unwrap"(%2109) : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2125 = "mid.get_type_field"(%2091) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.reified_type
      %2126 = "mid.parameterization"(%2125) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZipped.T_subtype_Any", ["Zipped.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %2127 = "mid.get_type_field"(%2091) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Zipped", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.reified_type
      %2128 = "mid.parameterization"(%2127) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZipped.U_subtype_Any", ["Zipped.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %2129 = "mid.parameterizations_array"(%2126, %2128) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2129, %2124, %2121, %2123) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2130 = "hi.cast"(%2109) {"from_typ" = !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Zipper", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipped">, !hi.type_param<"U", !hi.any, "Zipped">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%2130) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Zipped_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb422(%2131 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2132 : !llvm.ptr):
      %2133 = "mid.invariant"(%2132) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2134 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb423] : () -> ()
    ^bb423:
      %2135 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%2135, %2134) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb424] : () -> ()
    ^bb424:
      %2136 = "llvm.extractvalue"(%2131) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2137 = "llvm.load"(%2134) : (!llvm.ptr) -> i32
      %2138 = "llvm.getelementptr"(%2136, %2137) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2139 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2140 = "llvm.getelementptr"(%2138, %2139) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2140) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb425(%2141 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2142 : !llvm.ptr):
      %2143 = "mid.invariant"(%2142) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2144 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb426] : () -> ()
    ^bb427:
      %2145 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%2145, %2144) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb428] : () -> ()
    ^bb426:
      %2146 = "llvm.getelementptr"(%2142) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2147 = "mid.checkflag"(%2146) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2148 = "llvm.load"(%2147) : (!hi.bool) -> i1
      "cf.cond_br"(%2148) [^bb427, ^bb427] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb428:
      %2149 = "llvm.extractvalue"(%2141) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2150 = "llvm.load"(%2144) : (!llvm.ptr) -> i32
      %2151 = "llvm.getelementptr"(%2149, %2150) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2152 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2153 = "llvm.getelementptr"(%2151, %2152) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2153) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb429(%2154 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2155 : !llvm.ptr):
      %2156 = "mid.invariant"(%2155) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2157 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb430] : () -> ()
    ^bb431:
      %2158 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%2158, %2157) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb432] : () -> ()
    ^bb433:
      %2159 = "llvm.getelementptr"(%2155) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2160 = "mid.checkflag"(%2159) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2161 = "llvm.load"(%2160) : (!hi.bool) -> i1
      "cf.cond_br"(%2161) [^bb431, ^bb431] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb430:
      %2162 = "llvm.getelementptr"(%2155) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2163 = "mid.checkflag"(%2162) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %2164 = "llvm.load"(%2163) : (!hi.bool) -> i1
      "cf.cond_br"(%2164) [^bb433, ^bb433] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb432:
      %2165 = "llvm.extractvalue"(%2154) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2166 = "llvm.load"(%2157) : (!llvm.ptr) -> i32
      %2167 = "llvm.getelementptr"(%2165, %2166) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2168 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2169 = "llvm.getelementptr"(%2167, %2168) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2169) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb434(%2170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2171 : !llvm.ptr):
      %2172 = "mid.invariant"(%2171) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2173 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb435] : () -> ()
    ^bb436:
      %2174 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%2174, %2173) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb437] : () -> ()
    ^bb435:
      %2175 = "llvm.getelementptr"(%2171) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2176 = "mid.checkflag"(%2175) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2177 = "llvm.load"(%2176) : (!hi.bool) -> i1
      "cf.cond_br"(%2177) [^bb436, ^bb436] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb437:
      %2178 = "llvm.extractvalue"(%2170) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2179 = "llvm.load"(%2173) : (!llvm.ptr) -> i32
      %2180 = "llvm.getelementptr"(%2178, %2179) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2181 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2182 = "llvm.getelementptr"(%2180, %2181) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2182) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb438(%2183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2184 : !llvm.ptr):
      %2185 = "mid.invariant"(%2184) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2186 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb439] : () -> ()
    ^bb440:
      %2187 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%2187, %2186) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb441] : () -> ()
    ^bb439:
      %2188 = "llvm.getelementptr"(%2184) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2189 = "mid.checkflag"(%2188) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2190 = "llvm.load"(%2189) : (!hi.bool) -> i1
      "cf.cond_br"(%2190) [^bb440, ^bb440] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb441:
      %2191 = "llvm.extractvalue"(%2183) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2192 = "llvm.load"(%2186) : (!llvm.ptr) -> i32
      %2193 = "llvm.getelementptr"(%2191, %2192) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2194 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2195 = "llvm.getelementptr"(%2193, %2194) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2195) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb442(%2196 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2197 : !llvm.ptr):
      %2198 = "mid.invariant"(%2197) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2199 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb443] : () -> ()
    ^bb443:
      %2200 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%2200, %2199) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb444] : () -> ()
    ^bb444:
      %2201 = "llvm.extractvalue"(%2196) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2202 = "llvm.load"(%2199) : (!llvm.ptr) -> i32
      %2203 = "llvm.getelementptr"(%2201, %2202) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2204 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2205 = "llvm.getelementptr"(%2203, %2204) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2205) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb445(%2206 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2207 : !llvm.ptr):
      %2208 = "mid.invariant"(%2207) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2209 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb446] : () -> ()
    ^bb447:
      %2210 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%2210, %2209) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb448] : () -> ()
    ^bb446:
      %2211 = "llvm.getelementptr"(%2207) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2212 = "mid.checkflag"(%2211) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2213 = "llvm.load"(%2212) : (!hi.bool) -> i1
      "cf.cond_br"(%2213) [^bb447, ^bb447] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb448:
      %2214 = "llvm.extractvalue"(%2206) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2215 = "llvm.load"(%2209) : (!llvm.ptr) -> i32
      %2216 = "llvm.getelementptr"(%2214, %2215) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2217 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2218 = "llvm.getelementptr"(%2216, %2217) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2218) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb449(%2219 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2220 : !llvm.ptr):
      %2221 = "mid.invariant"(%2220) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2222 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb450] : () -> ()
    ^bb451:
      %2223 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%2223, %2222) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb452] : () -> ()
    ^bb450:
      %2224 = "llvm.getelementptr"(%2220) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2225 = "mid.checkflag"(%2224) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2226 = "llvm.load"(%2225) : (!hi.bool) -> i1
      "cf.cond_br"(%2226) [^bb451, ^bb451] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb452:
      %2227 = "llvm.extractvalue"(%2219) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2228 = "llvm.load"(%2222) : (!llvm.ptr) -> i32
      %2229 = "llvm.getelementptr"(%2227, %2228) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2230 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2231 = "llvm.getelementptr"(%2229, %2230) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2231) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb453(%2232 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2233 : !llvm.ptr):
      %2234 = "mid.invariant"(%2233) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2235 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb454] : () -> ()
    ^bb455:
      %2236 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%2236, %2235) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb456] : () -> ()
    ^bb454:
      %2237 = "llvm.getelementptr"(%2233) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2238 = "mid.checkflag"(%2237) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2239 = "llvm.load"(%2238) : (!hi.bool) -> i1
      "cf.cond_br"(%2239) [^bb455, ^bb455] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb456:
      %2240 = "llvm.extractvalue"(%2232) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2241 = "llvm.load"(%2235) : (!llvm.ptr) -> i32
      %2242 = "llvm.getelementptr"(%2240, %2241) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2243 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2244 = "llvm.getelementptr"(%2242, %2243) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2244) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb457(%2245 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2246 : !llvm.ptr):
      %2247 = "mid.invariant"(%2246) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2248 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb458] : () -> ()
    ^bb459:
      %2249 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%2249, %2248) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb460] : () -> ()
    ^bb458:
      %2250 = "llvm.getelementptr"(%2246) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2251 = "mid.checkflag"(%2250) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2252 = "llvm.load"(%2251) : (!hi.bool) -> i1
      "cf.cond_br"(%2252) [^bb459, ^bb459] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb460:
      %2253 = "llvm.extractvalue"(%2245) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2254 = "llvm.load"(%2248) : (!llvm.ptr) -> i32
      %2255 = "llvm.getelementptr"(%2253, %2254) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2256 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2257 = "llvm.getelementptr"(%2255, %2256) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2257) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb461(%2258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2259 : !llvm.ptr):
      %2260 = "mid.invariant"(%2259) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2261 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb462] : () -> ()
    ^bb463:
      %2262 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%2262, %2261) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb464] : () -> ()
    ^bb462:
      %2263 = "llvm.getelementptr"(%2259) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2264 = "mid.checkflag"(%2263) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2265 = "llvm.load"(%2264) : (!hi.bool) -> i1
      "cf.cond_br"(%2265) [^bb463, ^bb463] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb464:
      %2266 = "llvm.extractvalue"(%2258) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2267 = "llvm.load"(%2261) : (!llvm.ptr) -> i32
      %2268 = "llvm.getelementptr"(%2266, %2267) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2269 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2270 = "llvm.getelementptr"(%2268, %2269) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2270) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb465(%2271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2272 : !llvm.ptr):
      %2273 = "mid.invariant"(%2272) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2274 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb466] : () -> ()
    ^bb467:
      %2275 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%2275, %2274) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb468] : () -> ()
    ^bb466:
      %2276 = "llvm.getelementptr"(%2272) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2277 = "mid.checkflag"(%2276) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2278 = "llvm.load"(%2277) : (!hi.bool) -> i1
      "cf.cond_br"(%2278) [^bb467, ^bb467] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb468:
      %2279 = "llvm.extractvalue"(%2271) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2280 = "llvm.load"(%2274) : (!llvm.ptr) -> i32
      %2281 = "llvm.getelementptr"(%2279, %2280) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2282 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2283 = "llvm.getelementptr"(%2281, %2282) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2283) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipped_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Zipper", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Zipper_field_Zipper_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Zipper_field_Zipper_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Zipper_field_Zipper_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Zipper_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipper.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Zipper_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipper.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Zipper_field_first", "getter_name" = "Zipper_getter_first", "setter_name" = "Zipper_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Zipper_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipper.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Zipper_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipper.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Zipper_field_second", "getter_name" = "Zipper_getter_second", "setter_name" = "Zipper_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb469(%2284 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2285 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2286 : !llvm.ptr, %2287 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2288 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2289 = "mid.wrap"(%2284) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>
      %2290 = "hi.cast"(%2289) {"from_typ" = !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>, "to_typ" = !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>, "from_typ_name" = "Zipper", "to_typ_name" = "Zipper"} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>
      %2291 = "mid.wrap"(%2287) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>
      %2292 = "hi.cast"(%2291) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>
      %2293 = "hi.cast"(%2292) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>
      "mid.set_field"(%2290, %2293) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>) -> ()
      %2294 = "mid.wrap"(%2288) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>
      %2295 = "hi.cast"(%2294) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>
      %2296 = "hi.cast"(%2295) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>
      "mid.set_field"(%2290, %2296) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>) -> ()
    }) {"func_name" = "Zipper_init_firstIteratorT_secondIteratorU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb470(%2297 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2298 : !llvm.ptr):
      %2299 = "mid.invariant"(%2298) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2300 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb471] : () -> ()
    ^bb472:
      %2301 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%2301, %2300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb473] : () -> ()
    ^bb474:
      %2302 = "llvm.getelementptr"(%2298) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2303 = "mid.checkflag"(%2302) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2304 = "llvm.load"(%2303) : (!hi.bool) -> i1
      "cf.cond_br"(%2304) [^bb472, ^bb472] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb471:
      %2305 = "llvm.getelementptr"(%2298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2306 = "mid.checkflag"(%2305) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2307 = "llvm.load"(%2306) : (!hi.bool) -> i1
      "cf.cond_br"(%2307) [^bb474, ^bb474] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb473:
      %2308 = "llvm.extractvalue"(%2297) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2309 = "llvm.load"(%2300) : (!llvm.ptr) -> i32
      %2310 = "llvm.getelementptr"(%2308, %2309) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2311 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2312 = "llvm.getelementptr"(%2310, %2311) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2312) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipper_B_init_firstIteratorT_secondIteratorU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb475(%2313 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2314 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2315 : !llvm.ptr):
      %2316 = "mid.wrap"(%2313) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>
      %2317 = "hi.cast"(%2316) {"from_typ" = !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>, "to_typ" = !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>, "from_typ_name" = "Zipper", "to_typ_name" = "Zipper"} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>
      %2318 = "mid.get_field"(%2317) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>
      %2319 = "mid.unwrap"(%2318) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2320 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2321 = "mid.method_call"(%2320, %2319) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2322 = "hi.cast"(%2321) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Zipper">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Zipper">, !hi.nil]>
      %2323 = "mid.get_field"(%2317) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>
      %2324 = "mid.unwrap"(%2323) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2325 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2326 = "mid.method_call"(%2325, %2324) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2327 = "hi.cast"(%2326) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "Zipper">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"U", !hi.any, "Zipper">, !hi.nil]>
      %2328 = "mid.checkflag"(%2322) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Zipper">, !hi.nil]>) -> si1
      %2329 = "hi.logical"(%2328) ({
        %2330 = "mid.checkflag"(%2327) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "Zipper">, !hi.nil]>) -> si1
        func.return %2330 : si1
      }) {"op" = "or"} : (si1) -> si1
      %2331 = "mid.unwrap"(%2329) : (si1) -> i1
      "mid.if"(%2331) ({
        %2332 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %2333 = "hi.cast"(%2332) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        "mid.return"(%2333) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %2334 = "hi.cast"(%2322) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Zipper">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Zipper">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Zipper">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Zipper">
      %2335 = "hi.cast"(%2327) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "Zipper">, !hi.nil]>, "to_typ" = !hi.type_param<"U", !hi.any, "Zipper">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "Zipper">, !hi.nil]>) -> !hi.type_param<"U", !hi.any, "Zipper">
      %2336 = "mid.unwrap"(%2334) : (!hi.type_param<"T", !hi.any, "Zipper">) -> !llvm.struct<(!llvm.ptr, i160)>
      %2337 = "mid.unwrap"(%2335) : (!hi.type_param<"U", !hi.any, "Zipper">) -> !llvm.struct<(!llvm.ptr, i160)>
      %2338 = "mid.get_type_field"(%2317) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.reified_type
      %2339 = "mid.get_type_field"(%2317) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.reified_type
      %2340 = "mid.new"(%2338, %2339) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>
      %2341 = "hi.cast"(%2334) {"from_typ" = !hi.type_param<"T", !hi.any, "Zipper">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Zipper">) -> !hi.type_param<"T", !hi.any, "Pair">
      %2342 = "mid.unwrap"(%2341) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
      %2343 = "hi.cast"(%2335) {"from_typ" = !hi.type_param<"U", !hi.any, "Zipper">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Zipper">) -> !hi.type_param<"U", !hi.any, "Pair">
      %2344 = "mid.unwrap"(%2343) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
      %2345 = "mid.unwrap"(%2340) : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2346 = "mid.get_type_field"(%2317) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.reified_type
      %2347 = "mid.get_type_field"(%2317) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.reified_type
      %2348 = "mid.parameterizations_array"(%2346, %2347) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      "mid.method_call"(%2348, %2345, %2342, %2344) {"offset" = 8 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2349 = "hi.cast"(%2340) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Zipper">, !hi.type_param<"U", !hi.any, "Zipper">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%2349) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "Zipper_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb476(%2350 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2351 : !llvm.ptr):
      %2352 = "mid.invariant"(%2351) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2353 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb477] : () -> ()
    ^bb477:
      %2354 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%2354, %2353) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb478] : () -> ()
    ^bb478:
      %2355 = "llvm.extractvalue"(%2350) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2356 = "llvm.load"(%2353) : (!llvm.ptr) -> i32
      %2357 = "llvm.getelementptr"(%2355, %2356) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2358 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2359 = "llvm.getelementptr"(%2357, %2358) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2359) : (!llvm.ptr) -> ()
    }) {"func_name" = "Zipper_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Products", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Products_field_Products_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Products_field_Products_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Products_field_Products_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Products_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProducts.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Products_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProducts.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Products_field_first", "getter_name" = "Products_getter_first", "setter_name" = "Products_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Products_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProducts.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Products_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProducts.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Products_field_second", "getter_name" = "Products_getter_second", "setter_name" = "Products_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb479(%2360 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2361 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2362 : !llvm.ptr, %2363 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2364 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2365 = "mid.wrap"(%2360) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>
      %2366 = "hi.cast"(%2365) {"from_typ" = !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>, "from_typ_name" = "Products", "to_typ_name" = "Products"} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>
      %2367 = "mid.wrap"(%2363) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>
      %2368 = "hi.cast"(%2367) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>
      %2369 = "hi.cast"(%2368) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>
      "mid.set_field"(%2366, %2369) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>) -> ()
      %2370 = "mid.wrap"(%2364) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>
      %2371 = "hi.cast"(%2370) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>
      %2372 = "hi.cast"(%2371) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>
      "mid.set_field"(%2366, %2372) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>) -> ()
    }) {"func_name" = "Products_init_firstIterableT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb480(%2373 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2374 : !llvm.ptr):
      %2375 = "mid.invariant"(%2374) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2376 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb481] : () -> ()
    ^bb482:
      %2377 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%2377, %2376) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb483] : () -> ()
    ^bb484:
      %2378 = "llvm.getelementptr"(%2374) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2379 = "mid.checkflag"(%2378) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2380 = "llvm.load"(%2379) : (!hi.bool) -> i1
      "cf.cond_br"(%2380) [^bb482, ^bb482] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb481:
      %2381 = "llvm.getelementptr"(%2374) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2382 = "mid.checkflag"(%2381) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2383 = "llvm.load"(%2382) : (!hi.bool) -> i1
      "cf.cond_br"(%2383) [^bb484, ^bb484] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb483:
      %2384 = "llvm.extractvalue"(%2373) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2385 = "llvm.load"(%2376) : (!llvm.ptr) -> i32
      %2386 = "llvm.getelementptr"(%2384, %2385) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2387 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2388 = "llvm.getelementptr"(%2386, %2387) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2388) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_init_firstIterableT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb485(%2389 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2390 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2391 : !llvm.ptr):
      %2392 = "mid.wrap"(%2389) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>
      %2393 = "hi.cast"(%2392) {"from_typ" = !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>, "from_typ_name" = "Products", "to_typ_name" = "Products"} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>
      %2394 = "mid.get_field"(%2393) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>
      %2395 = "mid.unwrap"(%2394) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2396 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2397 = "mid.method_call"(%2396, %2395) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2398 = "hi.cast"(%2397) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Products">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Products">]>
      %2399 = "mid.get_field"(%2393) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>
      %2400 = "mid.unwrap"(%2398) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Products">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2401 = "mid.unwrap"(%2399) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2402 = "mid.get_type_field"(%2393) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.reified_type
      %2403 = "mid.get_type_field"(%2393) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.reified_type
      %2404 = "mid.get_type_field"(%2393) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.reified_type
      %2405 = "mid.get_type_field"(%2393) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.reified_type
      %2406 = "mid.parameterization"(%2404, %2405) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairProducts.T_subtype_Any._Products.U_subtype_Any", ["Products.T_subtype_Any"], ["Products.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %2407 = "mid.new"(%2402, %2403, %2406) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Productizer", "num_data_fields" = 4 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>
      %2408 = "mid.get_field"(%2393) {"offset" = 3 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>
      %2409 = "mid.unwrap"(%2408) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Products">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2410 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2411 = "mid.method_call"(%2410, %2409) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2412 = "hi.cast"(%2411) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Products">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Products">]>
      %2413 = "mid.get_field"(%2393) {"offset" = 4 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>
      %2414 = "hi.cast"(%2412) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Products">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>
      %2415 = "mid.unwrap"(%2414) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2416 = "hi.cast"(%2413) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>
      %2417 = "mid.unwrap"(%2416) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2418 = "mid.unwrap"(%2407) : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2419 = "mid.get_type_field"(%2393) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.reified_type
      %2420 = "mid.parameterization"(%2419) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorProducts.T_subtype_Any", ["Products.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %2421 = "mid.get_type_field"(%2393) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32} : (!hi.fatptr<"Products", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.reified_type
      %2422 = "mid.parameterization"(%2421) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableProducts.U_subtype_Any", ["Products.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %2423 = "mid.parameterizations_array"(%2420, %2422) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2423, %2418, %2415, %2417) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2424 = "hi.cast"(%2407) {"from_typ" = !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Productizer", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Products">, !hi.type_param<"U", !hi.any, "Products">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%2424) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Products_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb486(%2425 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2426 : !llvm.ptr):
      %2427 = "mid.invariant"(%2426) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2428 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb487] : () -> ()
    ^bb487:
      %2429 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%2429, %2428) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb488] : () -> ()
    ^bb488:
      %2430 = "llvm.extractvalue"(%2425) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2431 = "llvm.load"(%2428) : (!llvm.ptr) -> i32
      %2432 = "llvm.getelementptr"(%2430, %2431) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2433 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2434 = "llvm.getelementptr"(%2432, %2433) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2434) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb489(%2435 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2436 : !llvm.ptr):
      %2437 = "mid.invariant"(%2436) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2438 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb490] : () -> ()
    ^bb491:
      %2439 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%2439, %2438) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb492] : () -> ()
    ^bb490:
      %2440 = "llvm.getelementptr"(%2436) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2441 = "mid.checkflag"(%2440) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2442 = "llvm.load"(%2441) : (!hi.bool) -> i1
      "cf.cond_br"(%2442) [^bb491, ^bb491] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb492:
      %2443 = "llvm.extractvalue"(%2435) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2444 = "llvm.load"(%2438) : (!llvm.ptr) -> i32
      %2445 = "llvm.getelementptr"(%2443, %2444) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2446 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2447 = "llvm.getelementptr"(%2445, %2446) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2447) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb493(%2448 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2449 : !llvm.ptr):
      %2450 = "mid.invariant"(%2449) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2451 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb494] : () -> ()
    ^bb495:
      %2452 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%2452, %2451) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb496] : () -> ()
    ^bb497:
      %2453 = "llvm.getelementptr"(%2449) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2454 = "mid.checkflag"(%2453) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2455 = "llvm.load"(%2454) : (!hi.bool) -> i1
      "cf.cond_br"(%2455) [^bb495, ^bb495] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb494:
      %2456 = "llvm.getelementptr"(%2449) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2457 = "mid.checkflag"(%2456) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %2458 = "llvm.load"(%2457) : (!hi.bool) -> i1
      "cf.cond_br"(%2458) [^bb497, ^bb497] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb496:
      %2459 = "llvm.extractvalue"(%2448) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2460 = "llvm.load"(%2451) : (!llvm.ptr) -> i32
      %2461 = "llvm.getelementptr"(%2459, %2460) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2462 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2463 = "llvm.getelementptr"(%2461, %2462) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2463) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb498(%2464 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2465 : !llvm.ptr):
      %2466 = "mid.invariant"(%2465) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2467 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb499] : () -> ()
    ^bb500:
      %2468 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%2468, %2467) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb501] : () -> ()
    ^bb499:
      %2469 = "llvm.getelementptr"(%2465) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2470 = "mid.checkflag"(%2469) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2471 = "llvm.load"(%2470) : (!hi.bool) -> i1
      "cf.cond_br"(%2471) [^bb500, ^bb500] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb501:
      %2472 = "llvm.extractvalue"(%2464) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2473 = "llvm.load"(%2467) : (!llvm.ptr) -> i32
      %2474 = "llvm.getelementptr"(%2472, %2473) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2475 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2476 = "llvm.getelementptr"(%2474, %2475) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2476) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb502(%2477 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2478 : !llvm.ptr):
      %2479 = "mid.invariant"(%2478) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2480 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb503] : () -> ()
    ^bb504:
      %2481 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%2481, %2480) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb505] : () -> ()
    ^bb503:
      %2482 = "llvm.getelementptr"(%2478) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2483 = "mid.checkflag"(%2482) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2484 = "llvm.load"(%2483) : (!hi.bool) -> i1
      "cf.cond_br"(%2484) [^bb504, ^bb504] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb505:
      %2485 = "llvm.extractvalue"(%2477) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2486 = "llvm.load"(%2480) : (!llvm.ptr) -> i32
      %2487 = "llvm.getelementptr"(%2485, %2486) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2488 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2489 = "llvm.getelementptr"(%2487, %2488) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2489) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb506(%2490 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2491 : !llvm.ptr):
      %2492 = "mid.invariant"(%2491) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2493 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb507] : () -> ()
    ^bb507:
      %2494 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%2494, %2493) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb508] : () -> ()
    ^bb508:
      %2495 = "llvm.extractvalue"(%2490) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2496 = "llvm.load"(%2493) : (!llvm.ptr) -> i32
      %2497 = "llvm.getelementptr"(%2495, %2496) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2498 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2499 = "llvm.getelementptr"(%2497, %2498) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2499) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb509(%2500 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2501 : !llvm.ptr):
      %2502 = "mid.invariant"(%2501) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2503 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb510] : () -> ()
    ^bb511:
      %2504 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%2504, %2503) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb512] : () -> ()
    ^bb510:
      %2505 = "llvm.getelementptr"(%2501) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2506 = "mid.checkflag"(%2505) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2507 = "llvm.load"(%2506) : (!hi.bool) -> i1
      "cf.cond_br"(%2507) [^bb511, ^bb511] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb512:
      %2508 = "llvm.extractvalue"(%2500) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2509 = "llvm.load"(%2503) : (!llvm.ptr) -> i32
      %2510 = "llvm.getelementptr"(%2508, %2509) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2511 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2512 = "llvm.getelementptr"(%2510, %2511) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2512) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb513(%2513 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2514 : !llvm.ptr):
      %2515 = "mid.invariant"(%2514) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2516 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb514] : () -> ()
    ^bb515:
      %2517 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%2517, %2516) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb516] : () -> ()
    ^bb514:
      %2518 = "llvm.getelementptr"(%2514) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2519 = "mid.checkflag"(%2518) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2520 = "llvm.load"(%2519) : (!hi.bool) -> i1
      "cf.cond_br"(%2520) [^bb515, ^bb515] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb516:
      %2521 = "llvm.extractvalue"(%2513) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2522 = "llvm.load"(%2516) : (!llvm.ptr) -> i32
      %2523 = "llvm.getelementptr"(%2521, %2522) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2524 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2525 = "llvm.getelementptr"(%2523, %2524) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2525) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb517(%2526 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2527 : !llvm.ptr):
      %2528 = "mid.invariant"(%2527) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2529 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb518] : () -> ()
    ^bb519:
      %2530 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%2530, %2529) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb520] : () -> ()
    ^bb518:
      %2531 = "llvm.getelementptr"(%2527) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2532 = "mid.checkflag"(%2531) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2533 = "llvm.load"(%2532) : (!hi.bool) -> i1
      "cf.cond_br"(%2533) [^bb519, ^bb519] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb520:
      %2534 = "llvm.extractvalue"(%2526) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2535 = "llvm.load"(%2529) : (!llvm.ptr) -> i32
      %2536 = "llvm.getelementptr"(%2534, %2535) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2537 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2538 = "llvm.getelementptr"(%2536, %2537) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2538) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb521(%2539 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2540 : !llvm.ptr):
      %2541 = "mid.invariant"(%2540) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2542 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb522] : () -> ()
    ^bb523:
      %2543 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%2543, %2542) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb524] : () -> ()
    ^bb522:
      %2544 = "llvm.getelementptr"(%2540) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2545 = "mid.checkflag"(%2544) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2546 = "llvm.load"(%2545) : (!hi.bool) -> i1
      "cf.cond_br"(%2546) [^bb523, ^bb523] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb524:
      %2547 = "llvm.extractvalue"(%2539) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2548 = "llvm.load"(%2542) : (!llvm.ptr) -> i32
      %2549 = "llvm.getelementptr"(%2547, %2548) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2550 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2551 = "llvm.getelementptr"(%2549, %2550) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2551) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb525(%2552 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2553 : !llvm.ptr):
      %2554 = "mid.invariant"(%2553) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2555 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb526] : () -> ()
    ^bb527:
      %2556 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%2556, %2555) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb528] : () -> ()
    ^bb526:
      %2557 = "llvm.getelementptr"(%2553) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2558 = "mid.checkflag"(%2557) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2559 = "llvm.load"(%2558) : (!hi.bool) -> i1
      "cf.cond_br"(%2559) [^bb527, ^bb527] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb528:
      %2560 = "llvm.extractvalue"(%2552) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2561 = "llvm.load"(%2555) : (!llvm.ptr) -> i32
      %2562 = "llvm.getelementptr"(%2560, %2561) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2563 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2564 = "llvm.getelementptr"(%2562, %2563) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2564) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb529(%2565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2566 : !llvm.ptr):
      %2567 = "mid.invariant"(%2566) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2568 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb530] : () -> ()
    ^bb531:
      %2569 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%2569, %2568) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb532] : () -> ()
    ^bb530:
      %2570 = "llvm.getelementptr"(%2566) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2571 = "mid.checkflag"(%2570) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2572 = "llvm.load"(%2571) : (!hi.bool) -> i1
      "cf.cond_br"(%2572) [^bb531, ^bb531] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb532:
      %2573 = "llvm.extractvalue"(%2565) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2574 = "llvm.load"(%2568) : (!llvm.ptr) -> i32
      %2575 = "llvm.getelementptr"(%2573, %2574) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2576 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2577 = "llvm.getelementptr"(%2575, %2576) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2577) : (!llvm.ptr) -> ()
    }) {"func_name" = "Products_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Productizer", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Productizer_field_Productizer_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Productizer_field_Productizer_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Productizer_field_Productizer_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Productizer_getter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductizer.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Productizer_setter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductizer.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Productizer_field_first_iterator", "getter_name" = "Productizer_getter_first_iterator", "setter_name" = "Productizer_setter_first_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Productizer_getter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductizer.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Productizer_setter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductizer.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Productizer_field_second_iterator", "getter_name" = "Productizer_getter_second_iterator", "setter_name" = "Productizer_setter_second_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Productizer_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductizer.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Productizer_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductizer.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Productizer_field_second", "getter_name" = "Productizer_getter_second", "setter_name" = "Productizer_setter_second"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Productizer_getter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Productizer.T_subtype_Any_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Productizer_setter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Productizer.T_subtype_Any_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Productizer_field_current_first", "getter_name" = "Productizer_getter_current_first", "setter_name" = "Productizer_setter_current_first"} : () -> ()
    "mid.func"() ({
    ^bb533(%2578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2580 : !llvm.ptr, %2581 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2582 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2583 = "mid.wrap"(%2578) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>
      %2584 = "hi.cast"(%2583) {"from_typ" = !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, "to_typ" = !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Productizer", "to_typ_name" = "Productizer"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>
      %2585 = "mid.wrap"(%2581) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>
      %2586 = "hi.cast"(%2585) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>
      %2587 = "hi.cast"(%2586) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>
      "mid.set_field"(%2584, %2587) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>) -> ()
      %2588 = "mid.wrap"(%2582) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>
      %2589 = "hi.cast"(%2588) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>
      %2590 = "hi.cast"(%2589) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>
      "mid.set_field"(%2584, %2590) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> ()
      %2591 = "mid.get_field"(%2584) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>
      %2592 = "mid.unwrap"(%2591) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2593 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2594 = "mid.method_call"(%2593, %2592) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2595 = "hi.cast"(%2594) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>
      %2596 = "hi.cast"(%2595) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>
      "mid.set_field"(%2584, %2596) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> ()
      %2597 = "mid.get_field"(%2584) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>
      %2598 = "mid.unwrap"(%2597) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2599 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2600 = "mid.method_call"(%2599, %2598) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2601 = "hi.cast"(%2600) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
      %2602 = "hi.cast"(%2601) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
      "mid.set_field"(%2584, %2602) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> ()
    }) {"func_name" = "Productizer_init_first_iteratorIteratorT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb534(%2603 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2604 : !llvm.ptr):
      %2605 = "mid.invariant"(%2604) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2606 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb535] : () -> ()
    ^bb536:
      %2607 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%2607, %2606) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb537] : () -> ()
    ^bb538:
      %2608 = "llvm.getelementptr"(%2604) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2609 = "mid.checkflag"(%2608) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2610 = "llvm.load"(%2609) : (!hi.bool) -> i1
      "cf.cond_br"(%2610) [^bb536, ^bb536] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb535:
      %2611 = "llvm.getelementptr"(%2604) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2612 = "mid.checkflag"(%2611) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2613 = "llvm.load"(%2612) : (!hi.bool) -> i1
      "cf.cond_br"(%2613) [^bb538, ^bb538] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb537:
      %2614 = "llvm.extractvalue"(%2603) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2615 = "llvm.load"(%2606) : (!llvm.ptr) -> i32
      %2616 = "llvm.getelementptr"(%2614, %2615) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2617 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2618 = "llvm.getelementptr"(%2616, %2617) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2618) : (!llvm.ptr) -> ()
    }) {"func_name" = "Productizer_B_init_first_iteratorIteratorT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb539(%2619 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2620 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2621 : !llvm.ptr):
      %2622 = "mid.wrap"(%2619) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>
      %2623 = "hi.cast"(%2622) {"from_typ" = !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, "to_typ" = !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Productizer", "to_typ_name" = "Productizer"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>
      %2624 = "mid.get_field"(%2623) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
      %2625 = "mid.refer"(%2624) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
      "mid.while"() ({
        %2626 = "mid.get_type_field"(%2623) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.reified_type
        %2627 = "mid.checkflag"(%2625) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> si1
        %2628 = "mid.unwrap"(%2627) : (si1) -> i1
      }, {
        %2629 = "hi.cast"(%2625) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Productizer">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Productizer">
        %2630 = "mid.get_field"(%2623) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>
        %2631 = "mid.unwrap"(%2630) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2632 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2633 = "mid.method_call"(%2632, %2631) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %2634 = "hi.cast"(%2633) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "Productizer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"U", !hi.any, "Productizer">, !hi.nil]>
        %2635 = "mid.get_type_field"(%2623) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.reified_type
        %2636 = "mid.checkflag"(%2634) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"U", !hi.any, "Productizer">, !hi.nil]>) -> si1
        %2637 = "mid.unwrap"(%2636) : (si1) -> i1
        "mid.if"(%2637) ({
          %2638 = "hi.cast"(%2634) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "Productizer">, !hi.nil]>, "to_typ" = !hi.type_param<"U", !hi.any, "Productizer">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "Productizer">, !hi.nil]>) -> !hi.type_param<"U", !hi.any, "Productizer">
          %2639 = "mid.unwrap"(%2629) : (!hi.type_param<"T", !hi.any, "Productizer">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2640 = "mid.unwrap"(%2638) : (!hi.type_param<"U", !hi.any, "Productizer">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2641 = "mid.get_type_field"(%2623) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.reified_type
          %2642 = "mid.get_type_field"(%2623) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.reified_type
          %2643 = "mid.new"(%2641, %2642) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>
          %2644 = "hi.cast"(%2629) {"from_typ" = !hi.type_param<"T", !hi.any, "Productizer">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Productizer">) -> !hi.type_param<"T", !hi.any, "Pair">
          %2645 = "mid.unwrap"(%2644) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2646 = "hi.cast"(%2638) {"from_typ" = !hi.type_param<"U", !hi.any, "Productizer">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Productizer">) -> !hi.type_param<"U", !hi.any, "Pair">
          %2647 = "mid.unwrap"(%2646) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2648 = "mid.unwrap"(%2643) : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2649 = "mid.get_type_field"(%2623) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.reified_type
          %2650 = "mid.get_type_field"(%2623) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.reified_type
          %2651 = "mid.parameterizations_array"(%2649, %2650) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
          "mid.method_call"(%2651, %2648, %2645, %2647) {"offset" = 8 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2652 = "hi.cast"(%2643) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
          "mid.return"(%2652) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %2653 = "hi.cast"(%2634) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "Productizer">, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "Productizer">, !hi.nil]>) -> !hi.nil
        %2654 = "mid.get_field"(%2623) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>
        %2655 = "mid.unwrap"(%2654) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2656 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2657 = "mid.method_call"(%2656, %2655) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %2658 = "hi.cast"(%2657) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
        %2659 = "hi.cast"(%2658) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
        "mid.set_field"(%2623, %2659) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> ()
        %2660 = "mid.get_field"(%2623) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>
        %2661 = "mid.unwrap"(%2660) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2662 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2663 = "mid.method_call"(%2662, %2661) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
        %2664 = "hi.cast"(%2663) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>
        %2665 = "hi.cast"(%2664) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>
        "mid.set_field"(%2623, %2665) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> ()
        %2666 = "mid.get_field"(%2623) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "Productizer">, !hi.type_param<"U", !hi.any, "Productizer">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
        %2667 = "mid.refer"(%2666) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
        %2668 = "hi.cast"(%2667) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>
        "mid.assign"(%2625, %2668) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Productizer">, !hi.nil]>) -> ()
      }) : () -> ()
      %2669 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %2670 = "hi.cast"(%2669) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%2670) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "Productizer_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb540(%2671 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2672 : !llvm.ptr):
      %2673 = "mid.invariant"(%2672) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2674 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb541] : () -> ()
    ^bb541:
      %2675 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%2675, %2674) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb542] : () -> ()
    ^bb542:
      %2676 = "llvm.extractvalue"(%2671) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2677 = "llvm.load"(%2674) : (!llvm.ptr) -> i32
      %2678 = "llvm.getelementptr"(%2676, %2677) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2679 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2680 = "llvm.getelementptr"(%2678, %2679) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2680) : (!llvm.ptr) -> ()
    }) {"func_name" = "Productizer_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "collection"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.typedef"() {"class_name" = "Collection", "methods" = [], "hash_tbl" = [@any_typ, @Iterable, @Collection, @Object], "offset_tbl" = [10 : i32, 44 : i32, 10 : i32, 69 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 1375598993350293883 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Collection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "EnumeratedCollection", "methods" = [@EnumeratedCollection_field_EnumeratedCollection_0, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_field_iterable, @EnumeratedCollection_B_init_iterableCollectionT, @EnumeratedCollection_B_size_, @EnumeratedCollection_B_is_empty_, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU, @EnumeratedCollection_init_iterableCollectionT, @EnumeratedCollection_size_, @Collection_is_empty_, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_size_, @EnumeratedCollection_B_is_empty_, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU, @EnumeratedCollection_size_, @Collection_is_empty_, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, @EnumeratedCollection, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Collection, @Object], "offset_tbl" = [10 : i32, 107 : i32, 10 : i32, 0 : i32, 0 : i32, 0 : i32, 48 : i32, 132 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 7081690788784801875 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_EnumeratedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MappedCollection", "methods" = [@MappedCollection_field_MappedCollection_0, @MappedCollection_field_MappedCollection_1, @MappedCollection_field_iterable, @MappedCollection_field_f, @MappedCollection_B_init_iterableCollectionT_fFunctionT_to_U, @MappedCollection_B_size_, @MappedCollection_B_is_empty_, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherCollectionU_product_otherIterableU, @MappedCollection_init_iterableCollectionT_fFunctionT_to_U, @MappedCollection_size_, @Collection_is_empty_, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_size_, @MappedCollection_B_is_empty_, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherCollectionU_product_otherIterableU, @MappedCollection_size_, @Collection_is_empty_, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherCollectionU_product_otherIterableU, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherCollectionU_product_otherIterableU, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @MappedCollection, @Collection], "offset_tbl" = [133 : i32, 10 : i32, 0 : i32, 0 : i32, 0 : i32, 108 : i32, 10 : i32, 49 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5460697656559120915 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MappedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ChainedCollection", "methods" = [@ChainedCollection_field_ChainedCollection_0, @ChainedCollection_field_first, @ChainedCollection_field_second, @ChainedCollection_B_init_firstCollectionT_secondCollectionT, @ChainedCollection_B_size_, @ChainedCollection_B_is_empty_, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherCollectionU_product_otherIterableU, @ChainedCollection_init_firstCollectionT_secondCollectionT, @ChainedCollection_size_, @Collection_is_empty_, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_size_, @ChainedCollection_B_is_empty_, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherCollectionU_product_otherIterableU, @ChainedCollection_size_, @Collection_is_empty_, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherCollectionU_product_otherIterableU, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherCollectionU_product_otherIterableU, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Iterable, @Object, @any_typ, @ChainedCollection, 18446744073709551615 : i64, 18446744073709551615 : i64, @Collection, 18446744073709551615 : i64], "offset_tbl" = [107 : i32, 132 : i32, 10 : i32, 10 : i32, 0 : i32, 0 : i32, 48 : i32, 0 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 14310207089174208817 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ChainedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "InterleavedCollection", "methods" = [@InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_field_first, @InterleavedCollection_field_second, @InterleavedCollection_B_init_firstCollectionT_secondCollectionT, @InterleavedCollection_B_size_, @InterleavedCollection_B_is_empty_, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherCollectionU_product_otherIterableU, @InterleavedCollection_init_firstCollectionT_secondCollectionT, @InterleavedCollection_size_, @Collection_is_empty_, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_size_, @InterleavedCollection_B_is_empty_, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherCollectionU_product_otherIterableU, @InterleavedCollection_size_, @Collection_is_empty_, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherCollectionU_product_otherIterableU, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherCollectionU_product_otherIterableU, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @InterleavedCollection, @Iterable, 18446744073709551615 : i64, @Collection], "offset_tbl" = [132 : i32, 10 : i32, 0 : i32, 0 : i32, 10 : i32, 107 : i32, 0 : i32, 48 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 8589355597059143861 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InterleavedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ZippedCollection", "methods" = [@ZippedCollection_field_ZippedCollection_0, @ZippedCollection_field_ZippedCollection_1, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_field_first, @ZippedCollection_field_second, @ZippedCollection_B_init_firstCollectionT_secondCollectionU, @ZippedCollection_B_size_, @ZippedCollection_B_is_empty_, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherCollectionU_product_otherIterableU, @ZippedCollection_init_firstCollectionT_secondCollectionU, @ZippedCollection_size_, @Collection_is_empty_, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_size_, @ZippedCollection_B_is_empty_, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherCollectionU_product_otherIterableU, @ZippedCollection_size_, @Collection_is_empty_, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherCollectionU_product_otherIterableU, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherCollectionU_product_otherIterableU, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Iterable, @Object, @any_typ, 18446744073709551615 : i64, @ZippedCollection, 18446744073709551615 : i64, @Collection, 18446744073709551615 : i64], "offset_tbl" = [109 : i32, 134 : i32, 10 : i32, 0 : i32, 10 : i32, 0 : i32, 50 : i32, 0 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 880335312586431241 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZippedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ProductCollection", "methods" = [@ProductCollection_field_ProductCollection_0, @ProductCollection_field_ProductCollection_1, @ProductCollection_field_ProductCollection_2, @ProductCollection_field_first, @ProductCollection_field_second, @ProductCollection_B_init_firstCollectionT_secondCollectionU, @ProductCollection_B_size_, @ProductCollection_B_is_empty_, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherCollectionU_product_otherIterableU, @ProductCollection_init_firstCollectionT_secondCollectionU, @ProductCollection_size_, @Collection_is_empty_, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_size_, @ProductCollection_B_is_empty_, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherCollectionU_product_otherIterableU, @ProductCollection_size_, @Collection_is_empty_, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherCollectionU_product_otherIterableU, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherIterableT_interleave_otherCollectionT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherCollectionU_product_otherIterableU, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@ProductCollection, @Object, @any_typ, 18446744073709551615 : i64, @Collection, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 134 : i32, 10 : i32, 0 : i32, 50 : i32, 109 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 18135768441938478679 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Collection", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Collection_field_Collection_0"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb1:
      %4 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %5 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %6 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %7 = "llvm.getelementptr"(%5, %6) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %8 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %9 = "llvm.getelementptr"(%7, %8) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%9) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb3(%10 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12 : !llvm.ptr):
      %13 = "mid.wrap"(%10) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %14 = "hi.cast"(%13) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %15 = "mid.unwrap"(%14) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %16 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %17 = "mid.method_call"(%16, %15) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %18 = "hi.cast"(%17) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %19 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %20 = "hi.comparison"(%18, %19) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %21 = "hi.cast"(%20) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (si1) -> !hi.bool
      "mid.return"(%21) : (!hi.bool) -> ()
    }) {"func_name" = "Collection_is_empty_", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb4(%22 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %23 : !llvm.ptr):
      %24 = "mid.invariant"(%23) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %25 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      %26 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%26, %25) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %27 = "llvm.extractvalue"(%22) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %28 = "llvm.load"(%25) : (!llvm.ptr) -> i32
      %29 = "llvm.getelementptr"(%27, %28) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %30 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %31 = "llvm.getelementptr"(%29, %30) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%31) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_iterator_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb7(%32 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %33 : !llvm.ptr):
      %34 = "mid.invariant"(%33) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %35 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb8:
      %36 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%36, %35) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb9:
      %37 = "llvm.extractvalue"(%32) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %38 = "llvm.load"(%35) : (!llvm.ptr) -> i32
      %39 = "llvm.getelementptr"(%37, %38) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %40 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %41 = "llvm.getelementptr"(%39, %40) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%41) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb10(%42 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %43 : !llvm.ptr):
      %44 = "mid.invariant"(%43) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %45 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb11] : () -> ()
    ^bb12:
      %46 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%46, %45) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb11:
      %47 = "llvm.getelementptr"(%43) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %48 = "mid.checkflag"(%47) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %49 = "llvm.load"(%48) : (!hi.bool) -> i1
      "cf.cond_br"(%49) [^bb12, ^bb12] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb13:
      %50 = "llvm.extractvalue"(%42) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %51 = "llvm.load"(%45) : (!llvm.ptr) -> i32
      %52 = "llvm.getelementptr"(%50, %51) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %53 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %54 = "llvm.getelementptr"(%52, %53) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%54) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb14(%55 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %56 : !llvm.ptr):
      %57 = "mid.invariant"(%56) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %58 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb15] : () -> ()
    ^bb16:
      %59 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%59, %58) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb17] : () -> ()
    ^bb18:
      %60 = "llvm.getelementptr"(%56) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %61 = "mid.checkflag"(%60) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %62 = "llvm.load"(%61) : (!hi.bool) -> i1
      "cf.cond_br"(%62) [^bb16, ^bb16] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb15:
      %63 = "llvm.getelementptr"(%56) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %64 = "mid.checkflag"(%63) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %65 = "llvm.load"(%64) : (!hi.bool) -> i1
      "cf.cond_br"(%65) [^bb18, ^bb18] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb17:
      %66 = "llvm.extractvalue"(%55) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %67 = "llvm.load"(%58) : (!llvm.ptr) -> i32
      %68 = "llvm.getelementptr"(%66, %67) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %69 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %70 = "llvm.getelementptr"(%68, %69) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%70) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb19(%71 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %72 : !llvm.ptr):
      %73 = "mid.invariant"(%72) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %74 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb20] : () -> ()
    ^bb21:
      %75 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%75, %74) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb20:
      %76 = "llvm.getelementptr"(%72) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %77 = "mid.checkflag"(%76) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %78 = "llvm.load"(%77) : (!hi.bool) -> i1
      "cf.cond_br"(%78) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %79 = "llvm.extractvalue"(%71) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %80 = "llvm.load"(%74) : (!llvm.ptr) -> i32
      %81 = "llvm.getelementptr"(%79, %80) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %82 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %83 = "llvm.getelementptr"(%81, %82) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%83) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb23(%84 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %85 : !llvm.ptr):
      %86 = "mid.invariant"(%85) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %87 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb24] : () -> ()
    ^bb25:
      %88 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%88, %87) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb26] : () -> ()
    ^bb24:
      %89 = "llvm.getelementptr"(%85) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %90 = "mid.checkflag"(%89) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %91 = "llvm.load"(%90) : (!hi.bool) -> i1
      "cf.cond_br"(%91) [^bb25, ^bb25] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %92 = "llvm.extractvalue"(%84) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %93 = "llvm.load"(%87) : (!llvm.ptr) -> i32
      %94 = "llvm.getelementptr"(%92, %93) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %95 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %96 = "llvm.getelementptr"(%94, %95) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%96) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%97 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %98 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %99 : !llvm.ptr):
      %100 = "mid.wrap"(%97) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %101 = "hi.cast"(%100) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %102 = "mid.unwrap"(%101) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %103 = "mid.get_type_field"(%101) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %104 = "mid.get_type_field"(%101) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %105 = "mid.parameterization"(%104) {"id_hierarchy" = ["Pair", ["i32_typ"], [0 : i32]], "name_hierarchy" = ["Pairi32._Collection.T_subtype_Any", ["i32"], ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %106 = "mid.new"(%103, %105) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "EnumeratedCollection", "num_data_fields" = 1 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %107 = "hi.cast"(%101) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %108 = "mid.unwrap"(%107) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %109 = "mid.unwrap"(%106) : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %110 = "mid.get_type_field"(%101) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %111 = "mid.parameterization"(%110) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %112 = "mid.parameterizations_array"(%111) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%112, %109, %108) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 122 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %113 = "hi.cast"(%106) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Collection">]>]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Collection">]>]>
      "mid.return"(%113) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_enumerate_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb28(%114 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %115 : !llvm.ptr):
      %116 = "mid.invariant"(%115) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %117 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      %118 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%118, %117) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb30] : () -> ()
    ^bb30:
      %119 = "llvm.extractvalue"(%114) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %120 = "llvm.load"(%117) : (!llvm.ptr) -> i32
      %121 = "llvm.getelementptr"(%119, %120) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %122 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %123 = "llvm.getelementptr"(%121, %122) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%123) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb31(%124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %125 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %126 : !llvm.ptr, %127 : !llvm.struct<(!llvm.ptr)>):
      %128 = "mid.wrap"(%124) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %129 = "hi.cast"(%128) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %130 = "mid.wrap"(%127) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>
      %131 = "hi.cast"(%130) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>
      %132 = "mid.unwrap"(%129) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %133 = "mid.unwrap"(%131) : (!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>) -> !llvm.struct<(!llvm.ptr)>
      %134 = "mid.get_type_field"(%129) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %135 = "llvm.getelementptr"(%126) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %136 = "llvm.load"(%135) : (!llvm.ptr) -> !llvm.ptr
      %137 = "mid.parameterization_indexation"(%136) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %138 = "mid.new"(%134, %137) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MappedCollection", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %139 = "hi.cast"(%129) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %140 = "mid.unwrap"(%139) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %141 = "hi.cast"(%131) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %142 = "mid.unwrap"(%141) : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !llvm.struct<(!llvm.ptr)>
      %143 = "mid.unwrap"(%138) : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %144 = "mid.get_type_field"(%129) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %145 = "mid.parameterization"(%144) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %146 = "llvm.getelementptr"(%126) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %147 = "llvm.load"(%146) : (!llvm.ptr) -> !llvm.ptr
      %148 = "mid.parameterization_indexation"(%147) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %149 = "mid.get_type_field"(%129) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %150 = "mid.parameterization"(%148, %149) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionCollection.T_subtype_Any_to_Collection.U_subtype_Any", ["Collection.U_subtype_Any"], ["Collection.T_subtype_Any"]]} : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
      %151 = "mid.parameterizations_array"(%145, %150) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%151, %143, %140, %142) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 123 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %152 = "hi.cast"(%138) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>
      "mid.return"(%152) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb32(%153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %154 : !llvm.ptr):
      %155 = "mid.invariant"(%154) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %156 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb33] : () -> ()
    ^bb34:
      %157 = "llvm.mlir.constant"() <{"value" = 63 : i32}> : () -> i32
      "llvm.store"(%157, %156) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb35] : () -> ()
    ^bb36:
      %158 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%158, %156) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb35] : () -> ()
    ^bb33:
      %159 = "llvm.getelementptr"(%154) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %160 = "mid.checkflag"(%159) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %161 = "llvm.load"(%160) : (!hi.bool) -> i1
      "cf.cond_br"(%161) [^bb34, ^bb37] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %162 = "llvm.getelementptr"(%154) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %163 = "mid.checkflag"(%162) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %164 = "llvm.load"(%163) : (!hi.bool) -> i1
      "cf.cond_br"(%164) [^bb36, ^bb36] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb35:
      %165 = "llvm.extractvalue"(%153) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %166 = "llvm.load"(%156) : (!llvm.ptr) -> i32
      %167 = "llvm.getelementptr"(%165, %166) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %168 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %169 = "llvm.getelementptr"(%167, %168) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%169) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb38(%170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %171 : !llvm.ptr):
      %172 = "mid.invariant"(%171) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %173 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb39] : () -> ()
    ^bb40:
      %174 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%174, %173) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb41] : () -> ()
    ^bb39:
      %175 = "llvm.getelementptr"(%171) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %176 = "mid.checkflag"(%175) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %177 = "llvm.load"(%176) : (!hi.bool) -> i1
      "cf.cond_br"(%177) [^bb40, ^bb40] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb41:
      %178 = "llvm.extractvalue"(%170) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %179 = "llvm.load"(%173) : (!llvm.ptr) -> i32
      %180 = "llvm.getelementptr"(%178, %179) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %181 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %182 = "llvm.getelementptr"(%180, %181) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%182) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb42(%183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %184 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %185 : !llvm.ptr, %186 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %187 = "mid.wrap"(%183) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %188 = "hi.cast"(%187) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %189 = "mid.wrap"(%186) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      %190 = "hi.cast"(%189) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %191 = "mid.unwrap"(%188) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %192 = "mid.unwrap"(%190) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %193 = "mid.get_type_field"(%188) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %194 = "mid.new"(%193) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainedCollection", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %195 = "hi.cast"(%188) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %196 = "mid.unwrap"(%195) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %197 = "hi.cast"(%190) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %198 = "mid.unwrap"(%197) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %199 = "mid.unwrap"(%194) : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %200 = "mid.get_type_field"(%188) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %201 = "mid.parameterization"(%200) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %202 = "mid.get_type_field"(%188) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %203 = "mid.parameterization"(%202) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %204 = "mid.parameterizations_array"(%201, %203) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%204, %199, %196, %198) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 122 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %205 = "hi.cast"(%194) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      "mid.return"(%205) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_chain_otherCollectionT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb43(%206 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %207 : !llvm.ptr):
      %208 = "mid.invariant"(%207) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %209 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb44] : () -> ()
    ^bb45:
      %210 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%210, %209) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb46] : () -> ()
    ^bb47:
      %211 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%211, %209) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb46] : () -> ()
    ^bb44:
      %212 = "llvm.getelementptr"(%207) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %213 = "mid.checkflag"(%212) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %214 = "llvm.load"(%213) : (!hi.bool) -> i1
      "cf.cond_br"(%214) [^bb45, ^bb48] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb48:
      %215 = "llvm.getelementptr"(%207) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %216 = "mid.checkflag"(%215) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %217 = "llvm.load"(%216) : (!hi.bool) -> i1
      "cf.cond_br"(%217) [^bb49, ^bb47] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb49:
      %218 = "llvm.getelementptr"(%207) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %219 = "mid.checkflag"(%218) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %220 = "llvm.load"(%219) : (!hi.bool) -> i1
      "cf.cond_br"(%220) [^bb47, ^bb47] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb46:
      %221 = "llvm.extractvalue"(%206) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %222 = "llvm.load"(%209) : (!llvm.ptr) -> i32
      %223 = "llvm.getelementptr"(%221, %222) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %224 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %225 = "llvm.getelementptr"(%223, %224) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%225) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb50(%226 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %227 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %228 : !llvm.ptr, %229 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %230 = "mid.wrap"(%226) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %231 = "hi.cast"(%230) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %232 = "mid.wrap"(%229) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      %233 = "hi.cast"(%232) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %234 = "mid.unwrap"(%231) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %235 = "mid.unwrap"(%233) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %236 = "mid.get_type_field"(%231) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %237 = "mid.new"(%236) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleavedCollection", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %238 = "hi.cast"(%231) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %239 = "mid.unwrap"(%238) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %240 = "hi.cast"(%233) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %241 = "mid.unwrap"(%240) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %242 = "mid.unwrap"(%237) : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %243 = "mid.get_type_field"(%231) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %244 = "mid.parameterization"(%243) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %245 = "mid.get_type_field"(%231) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %246 = "mid.parameterization"(%245) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %247 = "mid.parameterizations_array"(%244, %246) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%247, %242, %239, %241) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 122 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %248 = "hi.cast"(%237) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      "mid.return"(%248) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_interleave_otherCollectionT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb51(%249 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %250 : !llvm.ptr):
      %251 = "mid.invariant"(%250) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %252 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb52] : () -> ()
    ^bb53:
      %253 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%253, %252) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb54] : () -> ()
    ^bb55:
      %254 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%254, %252) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb54] : () -> ()
    ^bb52:
      %255 = "llvm.getelementptr"(%250) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %256 = "mid.checkflag"(%255) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %257 = "llvm.load"(%256) : (!hi.bool) -> i1
      "cf.cond_br"(%257) [^bb53, ^bb56] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb56:
      %258 = "llvm.getelementptr"(%250) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %259 = "mid.checkflag"(%258) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %260 = "llvm.load"(%259) : (!hi.bool) -> i1
      "cf.cond_br"(%260) [^bb57, ^bb55] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb57:
      %261 = "llvm.getelementptr"(%250) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %262 = "mid.checkflag"(%261) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %263 = "llvm.load"(%262) : (!hi.bool) -> i1
      "cf.cond_br"(%263) [^bb55, ^bb55] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb54:
      %264 = "llvm.extractvalue"(%249) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %265 = "llvm.load"(%252) : (!llvm.ptr) -> i32
      %266 = "llvm.getelementptr"(%264, %265) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %267 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %268 = "llvm.getelementptr"(%266, %267) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%268) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb58(%269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %271 : !llvm.ptr, %272 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %273 = "mid.wrap"(%269) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %274 = "hi.cast"(%273) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %275 = "mid.wrap"(%272) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>
      %276 = "hi.cast"(%275) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>
      %277 = "mid.unwrap"(%274) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %278 = "mid.unwrap"(%276) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %279 = "mid.get_type_field"(%274) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %280 = "mid.wrap"(%272) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %281 = "mid.get_type_field"(%280) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!llvm.ptr) -> !hi.reified_type
      %282 = "mid.get_type_field"(%274) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %283 = "mid.wrap"(%272) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %284 = "mid.get_type_field"(%283) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!llvm.ptr) -> !hi.reified_type
      %285 = "mid.parameterization"(%282, %284) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairCollection.T_subtype_Any._Collection.U_subtype_Any", ["Collection.T_subtype_Any"], ["Collection.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %286 = "mid.new"(%279, %281, %285) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZippedCollection", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %287 = "hi.cast"(%274) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %288 = "mid.unwrap"(%287) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %289 = "hi.cast"(%276) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %290 = "mid.unwrap"(%289) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %291 = "mid.unwrap"(%286) : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %292 = "mid.get_type_field"(%274) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %293 = "mid.parameterization"(%292) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %294 = "mid.wrap"(%272) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %295 = "mid.get_type_field"(%294) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!llvm.ptr) -> !hi.reified_type
      %296 = "mid.parameterization"(%295) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.U_subtype_Any", ["Collection.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %297 = "mid.parameterizations_array"(%293, %296) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%297, %291, %288, %290) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 124 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %298 = "hi.cast"(%286) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>
      "mid.return"(%298) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_zip_otherCollectionU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb59(%299 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %300 : !llvm.ptr):
      %301 = "mid.invariant"(%300) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %302 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb60] : () -> ()
    ^bb61:
      %303 = "llvm.mlir.constant"() <{"value" = 69 : i32}> : () -> i32
      "llvm.store"(%303, %302) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb62] : () -> ()
    ^bb63:
      %304 = "llvm.mlir.constant"() <{"value" = 68 : i32}> : () -> i32
      "llvm.store"(%304, %302) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb62] : () -> ()
    ^bb60:
      %305 = "llvm.getelementptr"(%300) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %306 = "mid.checkflag"(%305) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %307 = "llvm.load"(%306) : (!hi.bool) -> i1
      "cf.cond_br"(%307) [^bb61, ^bb64] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb64:
      %308 = "llvm.getelementptr"(%300) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %309 = "mid.checkflag"(%308) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %310 = "llvm.load"(%309) : (!hi.bool) -> i1
      "cf.cond_br"(%310) [^bb65, ^bb63] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb65:
      %311 = "llvm.getelementptr"(%300) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %312 = "mid.checkflag"(%311) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %313 = "llvm.load"(%312) : (!hi.bool) -> i1
      "cf.cond_br"(%313) [^bb63, ^bb63] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb62:
      %314 = "llvm.extractvalue"(%299) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %315 = "llvm.load"(%302) : (!llvm.ptr) -> i32
      %316 = "llvm.getelementptr"(%314, %315) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %317 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %318 = "llvm.getelementptr"(%316, %317) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%318) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb66(%319 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %320 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %321 : !llvm.ptr, %322 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %323 = "mid.wrap"(%319) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %324 = "hi.cast"(%323) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %325 = "mid.wrap"(%322) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>
      %326 = "hi.cast"(%325) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>
      %327 = "mid.unwrap"(%324) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %328 = "mid.unwrap"(%326) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %329 = "mid.get_type_field"(%324) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %330 = "mid.wrap"(%322) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %331 = "mid.get_type_field"(%330) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!llvm.ptr) -> !hi.reified_type
      %332 = "mid.get_type_field"(%324) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %333 = "mid.wrap"(%322) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %334 = "mid.get_type_field"(%333) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!llvm.ptr) -> !hi.reified_type
      %335 = "mid.parameterization"(%332, %334) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairCollection.T_subtype_Any._Collection.U_subtype_Any", ["Collection.T_subtype_Any"], ["Collection.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %336 = "mid.new"(%329, %331, %335) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductCollection", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %337 = "hi.cast"(%324) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %338 = "mid.unwrap"(%337) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %339 = "hi.cast"(%326) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %340 = "mid.unwrap"(%339) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %341 = "mid.unwrap"(%336) : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %342 = "mid.get_type_field"(%324) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.reified_type
      %343 = "mid.parameterization"(%342) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.T_subtype_Any", ["Collection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %344 = "mid.wrap"(%322) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %345 = "mid.get_type_field"(%344) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32} : (!llvm.ptr) -> !hi.reified_type
      %346 = "mid.parameterization"(%345) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionCollection.U_subtype_Any", ["Collection.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %347 = "mid.parameterizations_array"(%343, %346) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%347, %341, %338, %340) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 124 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %348 = "hi.cast"(%336) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>
      "mid.return"(%348) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_product_otherCollectionU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb67(%349 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %350 : !llvm.ptr):
      %351 = "mid.invariant"(%350) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %352 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb68] : () -> ()
    ^bb69:
      %353 = "llvm.mlir.constant"() <{"value" = 70 : i32}> : () -> i32
      "llvm.store"(%353, %352) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb70] : () -> ()
    ^bb71:
      %354 = "llvm.mlir.constant"() <{"value" = 71 : i32}> : () -> i32
      "llvm.store"(%354, %352) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb70] : () -> ()
    ^bb68:
      %355 = "llvm.getelementptr"(%350) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %356 = "mid.checkflag"(%355) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %357 = "llvm.load"(%356) : (!hi.bool) -> i1
      "cf.cond_br"(%357) [^bb69, ^bb72] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb72:
      %358 = "llvm.getelementptr"(%350) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %359 = "mid.checkflag"(%358) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %360 = "llvm.load"(%359) : (!hi.bool) -> i1
      "cf.cond_br"(%360) [^bb73, ^bb71] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb73:
      %361 = "llvm.getelementptr"(%350) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %362 = "mid.checkflag"(%361) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %363 = "llvm.load"(%362) : (!hi.bool) -> i1
      "cf.cond_br"(%363) [^bb71, ^bb71] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb70:
      %364 = "llvm.extractvalue"(%349) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %365 = "llvm.load"(%352) : (!llvm.ptr) -> i32
      %366 = "llvm.getelementptr"(%364, %365) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %367 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %368 = "llvm.getelementptr"(%366, %367) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%368) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_EnumeratedCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "EnumeratedCollection_field_EnumeratedCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "EnumeratedCollection_field_EnumeratedCollection_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "EnumeratedCollection_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionEnumeratedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "EnumeratedCollection_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionEnumeratedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "EnumeratedCollection_field_iterable", "getter_name" = "EnumeratedCollection_getter_iterable", "setter_name" = "EnumeratedCollection_setter_iterable"} : () -> ()
    "mid.func"() ({
    ^bb74(%369 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %371 : !llvm.ptr, %372 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %373 = "mid.wrap"(%369) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %374 = "hi.cast"(%373) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %375 = "mid.wrap"(%372) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %376 = "hi.cast"(%375) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %377 = "hi.cast"(%376) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      "mid.set_field"(%374, %377) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> ()
    }) {"func_name" = "EnumeratedCollection_init_iterableCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb75(%378 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %379 : !llvm.ptr):
      %380 = "mid.invariant"(%379) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %381 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb76] : () -> ()
    ^bb77:
      %382 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%382, %381) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb78] : () -> ()
    ^bb76:
      %383 = "llvm.getelementptr"(%379) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %384 = "mid.checkflag"(%383) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %385 = "llvm.load"(%384) : (!hi.bool) -> i1
      "cf.cond_br"(%385) [^bb77, ^bb77] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb78:
      %386 = "llvm.extractvalue"(%378) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %387 = "llvm.load"(%381) : (!llvm.ptr) -> i32
      %388 = "llvm.getelementptr"(%386, %387) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %389 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %390 = "llvm.getelementptr"(%388, %389) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%390) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_init_iterableCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb79(%391 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %392 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %393 : !llvm.ptr):
      %394 = "mid.wrap"(%391) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %395 = "hi.cast"(%394) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %396 = "mid.get_field"(%395) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %397 = "mid.unwrap"(%396) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %398 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %399 = "mid.method_call"(%398, %397) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %400 = "hi.cast"(%399) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %401 = "hi.cast"(%400) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%401) : (si32) -> ()
    }) {"func_name" = "EnumeratedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb80(%402 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %403 : !llvm.ptr):
      %404 = "mid.invariant"(%403) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %405 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb81] : () -> ()
    ^bb81:
      %406 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%406, %405) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb82] : () -> ()
    ^bb82:
      %407 = "llvm.extractvalue"(%402) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %408 = "llvm.load"(%405) : (!llvm.ptr) -> i32
      %409 = "llvm.getelementptr"(%407, %408) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %410 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %411 = "llvm.getelementptr"(%409, %410) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%411) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb83(%412 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %413 : !llvm.ptr):
      %414 = "mid.invariant"(%413) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %415 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb84] : () -> ()
    ^bb84:
      %416 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%416, %415) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb85] : () -> ()
    ^bb85:
      %417 = "llvm.extractvalue"(%412) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %418 = "llvm.load"(%415) : (!llvm.ptr) -> i32
      %419 = "llvm.getelementptr"(%417, %418) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %420 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %421 = "llvm.getelementptr"(%419, %420) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%421) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb86(%422 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %423 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %424 : !llvm.ptr):
      %425 = "mid.wrap"(%422) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %426 = "hi.cast"(%425) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %427 = "mid.get_field"(%426) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %428 = "mid.unwrap"(%427) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %429 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %430 = "mid.method_call"(%429, %428) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %431 = "hi.cast"(%430) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %432 = "mid.unwrap"(%431) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %433 = "mid.get_type_field"(%426) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.reified_type
      %434 = "mid.get_type_field"(%426) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.reified_type
      %435 = "mid.parameterization"(%434) {"id_hierarchy" = ["Pair", ["i32_typ"], [0 : i32]], "name_hierarchy" = ["Pairi32._EnumeratedCollection.T_subtype_Any", ["i32"], ["EnumeratedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %436 = "mid.new"(%433, %435) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "Enumerator", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %437 = "mid.get_field"(%426) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %438 = "mid.unwrap"(%437) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %439 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %440 = "mid.method_call"(%439, %438) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %441 = "hi.cast"(%440) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %442 = "hi.cast"(%441) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %443 = "mid.unwrap"(%442) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %444 = "mid.unwrap"(%436) : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %445 = "mid.get_type_field"(%426) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.reified_type
      %446 = "mid.parameterization"(%445) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorEnumeratedCollection.T_subtype_Any", ["EnumeratedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %447 = "mid.parameterizations_array"(%446) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%447, %444, %443) {"offset" = 4 : i32, "vptrs" = [#none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %448 = "hi.cast"(%436) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%448) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "EnumeratedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb87(%449 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %450 : !llvm.ptr):
      %451 = "mid.invariant"(%450) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %452 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb88] : () -> ()
    ^bb88:
      %453 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%453, %452) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb89] : () -> ()
    ^bb89:
      %454 = "llvm.extractvalue"(%449) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %455 = "llvm.load"(%452) : (!llvm.ptr) -> i32
      %456 = "llvm.getelementptr"(%454, %455) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %457 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %458 = "llvm.getelementptr"(%456, %457) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%458) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb90(%459 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %460 : !llvm.ptr):
      %461 = "mid.invariant"(%460) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %462 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb91] : () -> ()
    ^bb92:
      %463 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%463, %462) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb93] : () -> ()
    ^bb91:
      %464 = "llvm.getelementptr"(%460) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %465 = "mid.checkflag"(%464) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %466 = "llvm.load"(%465) : (!hi.bool) -> i1
      "cf.cond_br"(%466) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb93:
      %467 = "llvm.extractvalue"(%459) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %468 = "llvm.load"(%462) : (!llvm.ptr) -> i32
      %469 = "llvm.getelementptr"(%467, %468) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %470 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %471 = "llvm.getelementptr"(%469, %470) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%471) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb94(%472 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %473 : !llvm.ptr):
      %474 = "mid.invariant"(%473) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %475 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb95] : () -> ()
    ^bb96:
      %476 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%476, %475) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb97] : () -> ()
    ^bb98:
      %477 = "llvm.getelementptr"(%473) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %478 = "mid.checkflag"(%477) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %479 = "llvm.load"(%478) : (!hi.bool) -> i1
      "cf.cond_br"(%479) [^bb96, ^bb96] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb95:
      %480 = "llvm.getelementptr"(%473) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %481 = "mid.checkflag"(%480) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %482 = "llvm.load"(%481) : (!hi.bool) -> i1
      "cf.cond_br"(%482) [^bb98, ^bb98] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb97:
      %483 = "llvm.extractvalue"(%472) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %484 = "llvm.load"(%475) : (!llvm.ptr) -> i32
      %485 = "llvm.getelementptr"(%483, %484) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %486 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %487 = "llvm.getelementptr"(%485, %486) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%487) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb99(%488 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %489 : !llvm.ptr):
      %490 = "mid.invariant"(%489) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %491 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb100] : () -> ()
    ^bb101:
      %492 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%492, %491) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb102] : () -> ()
    ^bb100:
      %493 = "llvm.getelementptr"(%489) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %494 = "mid.checkflag"(%493) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %495 = "llvm.load"(%494) : (!hi.bool) -> i1
      "cf.cond_br"(%495) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb102:
      %496 = "llvm.extractvalue"(%488) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %497 = "llvm.load"(%491) : (!llvm.ptr) -> i32
      %498 = "llvm.getelementptr"(%496, %497) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %499 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %500 = "llvm.getelementptr"(%498, %499) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%500) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb103(%501 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %502 : !llvm.ptr):
      %503 = "mid.invariant"(%502) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %504 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb104] : () -> ()
    ^bb105:
      %505 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%505, %504) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb106] : () -> ()
    ^bb104:
      %506 = "llvm.getelementptr"(%502) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %507 = "mid.checkflag"(%506) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %508 = "llvm.load"(%507) : (!hi.bool) -> i1
      "cf.cond_br"(%508) [^bb105, ^bb105] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb106:
      %509 = "llvm.extractvalue"(%501) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %510 = "llvm.load"(%504) : (!llvm.ptr) -> i32
      %511 = "llvm.getelementptr"(%509, %510) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %512 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %513 = "llvm.getelementptr"(%511, %512) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%513) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb107(%514 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %515 : !llvm.ptr):
      %516 = "mid.invariant"(%515) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %517 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb108] : () -> ()
    ^bb108:
      %518 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%518, %517) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb109] : () -> ()
    ^bb109:
      %519 = "llvm.extractvalue"(%514) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %520 = "llvm.load"(%517) : (!llvm.ptr) -> i32
      %521 = "llvm.getelementptr"(%519, %520) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %522 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %523 = "llvm.getelementptr"(%521, %522) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%523) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb110(%524 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %525 : !llvm.ptr):
      %526 = "mid.invariant"(%525) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %527 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb111] : () -> ()
    ^bb112:
      %528 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%528, %527) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %529 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%529, %527) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb113] : () -> ()
    ^bb111:
      %530 = "llvm.getelementptr"(%525) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %531 = "mid.checkflag"(%530) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %532 = "llvm.load"(%531) : (!hi.bool) -> i1
      "cf.cond_br"(%532) [^bb112, ^bb115] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb115:
      %533 = "llvm.getelementptr"(%525) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %534 = "mid.checkflag"(%533) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %535 = "llvm.load"(%534) : (!hi.bool) -> i1
      "cf.cond_br"(%535) [^bb114, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb113:
      %536 = "llvm.extractvalue"(%524) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %537 = "llvm.load"(%527) : (!llvm.ptr) -> i32
      %538 = "llvm.getelementptr"(%536, %537) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %539 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %540 = "llvm.getelementptr"(%538, %539) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%540) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb116(%541 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %542 : !llvm.ptr):
      %543 = "mid.invariant"(%542) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %544 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb117] : () -> ()
    ^bb118:
      %545 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%545, %544) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb119] : () -> ()
    ^bb117:
      %546 = "llvm.getelementptr"(%542) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %547 = "mid.checkflag"(%546) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %548 = "llvm.load"(%547) : (!hi.bool) -> i1
      "cf.cond_br"(%548) [^bb118, ^bb118] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb119:
      %549 = "llvm.extractvalue"(%541) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %550 = "llvm.load"(%544) : (!llvm.ptr) -> i32
      %551 = "llvm.getelementptr"(%549, %550) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %552 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %553 = "llvm.getelementptr"(%551, %552) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%553) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb120(%554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %555 : !llvm.ptr):
      %556 = "mid.invariant"(%555) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %557 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb121] : () -> ()
    ^bb122:
      %558 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%558, %557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb124:
      %559 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%559, %557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb121:
      %560 = "llvm.getelementptr"(%555) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %561 = "mid.checkflag"(%560) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %562 = "llvm.load"(%561) : (!hi.bool) -> i1
      "cf.cond_br"(%562) [^bb122, ^bb125] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb125:
      %563 = "llvm.getelementptr"(%555) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %564 = "mid.checkflag"(%563) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %565 = "llvm.load"(%564) : (!hi.bool) -> i1
      "cf.cond_br"(%565) [^bb126, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb126:
      %566 = "llvm.getelementptr"(%555) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %567 = "mid.checkflag"(%566) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %568 = "llvm.load"(%567) : (!hi.bool) -> i1
      "cf.cond_br"(%568) [^bb124, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %569 = "llvm.extractvalue"(%554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %570 = "llvm.load"(%557) : (!llvm.ptr) -> i32
      %571 = "llvm.getelementptr"(%569, %570) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %572 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %573 = "llvm.getelementptr"(%571, %572) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%573) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb127(%574 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %575 : !llvm.ptr):
      %576 = "mid.invariant"(%575) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %577 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb128] : () -> ()
    ^bb129:
      %578 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%578, %577) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb131:
      %579 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%579, %577) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb128:
      %580 = "llvm.getelementptr"(%575) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %581 = "mid.checkflag"(%580) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %582 = "llvm.load"(%581) : (!hi.bool) -> i1
      "cf.cond_br"(%582) [^bb129, ^bb132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb132:
      %583 = "llvm.getelementptr"(%575) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %584 = "mid.checkflag"(%583) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %585 = "llvm.load"(%584) : (!hi.bool) -> i1
      "cf.cond_br"(%585) [^bb133, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb133:
      %586 = "llvm.getelementptr"(%575) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %587 = "mid.checkflag"(%586) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %588 = "llvm.load"(%587) : (!hi.bool) -> i1
      "cf.cond_br"(%588) [^bb131, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb130:
      %589 = "llvm.extractvalue"(%574) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %590 = "llvm.load"(%577) : (!llvm.ptr) -> i32
      %591 = "llvm.getelementptr"(%589, %590) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %592 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %593 = "llvm.getelementptr"(%591, %592) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%593) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb134(%594 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %595 : !llvm.ptr):
      %596 = "mid.invariant"(%595) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %597 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb135] : () -> ()
    ^bb136:
      %598 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%598, %597) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb137] : () -> ()
    ^bb138:
      %599 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%599, %597) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb137] : () -> ()
    ^bb135:
      %600 = "llvm.getelementptr"(%595) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %601 = "mid.checkflag"(%600) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %602 = "llvm.load"(%601) : (!hi.bool) -> i1
      "cf.cond_br"(%602) [^bb136, ^bb139] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %603 = "llvm.getelementptr"(%595) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %604 = "mid.checkflag"(%603) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %605 = "llvm.load"(%604) : (!hi.bool) -> i1
      "cf.cond_br"(%605) [^bb140, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb140:
      %606 = "llvm.getelementptr"(%595) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %607 = "mid.checkflag"(%606) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %608 = "llvm.load"(%607) : (!hi.bool) -> i1
      "cf.cond_br"(%608) [^bb138, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb137:
      %609 = "llvm.extractvalue"(%594) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %610 = "llvm.load"(%597) : (!llvm.ptr) -> i32
      %611 = "llvm.getelementptr"(%609, %610) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %612 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %613 = "llvm.getelementptr"(%611, %612) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%613) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb141(%614 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %615 : !llvm.ptr):
      %616 = "mid.invariant"(%615) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %617 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb142] : () -> ()
    ^bb143:
      %618 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%618, %617) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb144] : () -> ()
    ^bb145:
      %619 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%619, %617) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb144] : () -> ()
    ^bb142:
      %620 = "llvm.getelementptr"(%615) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %621 = "mid.checkflag"(%620) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %622 = "llvm.load"(%621) : (!hi.bool) -> i1
      "cf.cond_br"(%622) [^bb143, ^bb146] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb146:
      %623 = "llvm.getelementptr"(%615) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %624 = "mid.checkflag"(%623) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %625 = "llvm.load"(%624) : (!hi.bool) -> i1
      "cf.cond_br"(%625) [^bb147, ^bb145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb147:
      %626 = "llvm.getelementptr"(%615) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %627 = "mid.checkflag"(%626) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %628 = "llvm.load"(%627) : (!hi.bool) -> i1
      "cf.cond_br"(%628) [^bb145, ^bb145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb144:
      %629 = "llvm.extractvalue"(%614) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %630 = "llvm.load"(%617) : (!llvm.ptr) -> i32
      %631 = "llvm.getelementptr"(%629, %630) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %632 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %633 = "llvm.getelementptr"(%631, %632) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%633) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MappedCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MappedCollection_field_MappedCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MappedCollection_field_MappedCollection_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MappedCollection_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionMappedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MappedCollection_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionMappedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MappedCollection_field_iterable", "getter_name" = "MappedCollection_getter_iterable", "setter_name" = "MappedCollection_setter_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MappedCollection_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMappedCollection.T_subtype_Any_to_MappedCollection.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MappedCollection_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMappedCollection.T_subtype_Any_to_MappedCollection.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MappedCollection_field_f", "getter_name" = "MappedCollection_getter_f", "setter_name" = "MappedCollection_setter_f"} : () -> ()
    "mid.func"() ({
    ^bb148(%634 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %635 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %636 : !llvm.ptr, %637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %638 : !llvm.struct<(!llvm.ptr)>):
      %639 = "mid.wrap"(%634) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %640 = "hi.cast"(%639) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %641 = "mid.wrap"(%637) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %642 = "hi.cast"(%641) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %643 = "hi.cast"(%642) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      "mid.set_field"(%640, %643) {"offset" = 2 : i64, "vtable_bytes" = 984 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> ()
      %644 = "mid.wrap"(%638) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %645 = "hi.cast"(%644) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %646 = "hi.cast"(%645) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      "mid.set_field"(%640, %646) {"offset" = 3 : i64, "vtable_bytes" = 984 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> ()
    }) {"func_name" = "MappedCollection_init_iterableCollectionT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb149(%647 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %648 : !llvm.ptr):
      %649 = "mid.invariant"(%648) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %650 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb150] : () -> ()
    ^bb151:
      %651 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%651, %650) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb152] : () -> ()
    ^bb153:
      %652 = "llvm.getelementptr"(%648) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %653 = "mid.checkflag"(%652) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %654 = "llvm.load"(%653) : (!hi.bool) -> i1
      "cf.cond_br"(%654) [^bb151, ^bb151] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb150:
      %655 = "llvm.getelementptr"(%648) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %656 = "mid.checkflag"(%655) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %657 = "llvm.load"(%656) : (!hi.bool) -> i1
      "cf.cond_br"(%657) [^bb153, ^bb153] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb152:
      %658 = "llvm.extractvalue"(%647) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %659 = "llvm.load"(%650) : (!llvm.ptr) -> i32
      %660 = "llvm.getelementptr"(%658, %659) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %661 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %662 = "llvm.getelementptr"(%660, %661) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%662) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_init_iterableCollectionT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb154(%663 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %664 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %665 : !llvm.ptr):
      %666 = "mid.wrap"(%663) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %667 = "hi.cast"(%666) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %668 = "mid.get_field"(%667) {"offset" = 2 : i64, "vtable_bytes" = 984 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %669 = "mid.unwrap"(%668) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %670 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %671 = "mid.method_call"(%670, %669) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %672 = "hi.cast"(%671) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %673 = "hi.cast"(%672) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%673) : (si32) -> ()
    }) {"func_name" = "MappedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb155(%674 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %675 : !llvm.ptr):
      %676 = "mid.invariant"(%675) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %677 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb156] : () -> ()
    ^bb156:
      %678 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%678, %677) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb157] : () -> ()
    ^bb157:
      %679 = "llvm.extractvalue"(%674) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %680 = "llvm.load"(%677) : (!llvm.ptr) -> i32
      %681 = "llvm.getelementptr"(%679, %680) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %682 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %683 = "llvm.getelementptr"(%681, %682) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%683) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb158(%684 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %685 : !llvm.ptr):
      %686 = "mid.invariant"(%685) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %687 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb159] : () -> ()
    ^bb159:
      %688 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%688, %687) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb160] : () -> ()
    ^bb160:
      %689 = "llvm.extractvalue"(%684) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %690 = "llvm.load"(%687) : (!llvm.ptr) -> i32
      %691 = "llvm.getelementptr"(%689, %690) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %692 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %693 = "llvm.getelementptr"(%691, %692) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%693) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb161(%694 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %695 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %696 : !llvm.ptr):
      %697 = "mid.wrap"(%694) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %698 = "hi.cast"(%697) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %699 = "mid.get_field"(%698) {"offset" = 2 : i64, "vtable_bytes" = 984 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %700 = "mid.unwrap"(%699) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %701 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %702 = "mid.method_call"(%701, %700) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %703 = "hi.cast"(%702) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %704 = "mid.get_field"(%698) {"offset" = 3 : i64, "vtable_bytes" = 984 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %705 = "mid.unwrap"(%703) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %706 = "mid.unwrap"(%704) : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !llvm.struct<(!llvm.ptr)>
      %707 = "mid.get_type_field"(%698) {"offset" = 0 : i64, "vtable_bytes" = 984 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %708 = "mid.get_type_field"(%698) {"offset" = 1 : i64, "vtable_bytes" = 984 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %709 = "mid.new"(%707, %708) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "Mapper", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %710 = "mid.get_field"(%698) {"offset" = 2 : i64, "vtable_bytes" = 984 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %711 = "mid.unwrap"(%710) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %712 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %713 = "mid.method_call"(%712, %711) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %714 = "hi.cast"(%713) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %715 = "mid.get_field"(%698) {"offset" = 3 : i64, "vtable_bytes" = 984 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %716 = "hi.cast"(%714) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>
      %717 = "mid.unwrap"(%716) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Mapper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %718 = "hi.cast"(%715) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>
      %719 = "mid.unwrap"(%718) : (!hi.function<[!hi.type_param<"T", !hi.any, "Mapper">], !hi.any, !hi.type_param<"U", !hi.any, "Mapper">>) -> !llvm.struct<(!llvm.ptr)>
      %720 = "mid.unwrap"(%709) : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %721 = "mid.get_type_field"(%698) {"offset" = 0 : i64, "vtable_bytes" = 984 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %722 = "mid.parameterization"(%721) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorMappedCollection.T_subtype_Any", ["MappedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %723 = "mid.get_type_field"(%698) {"offset" = 1 : i64, "vtable_bytes" = 984 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %724 = "mid.get_type_field"(%698) {"offset" = 0 : i64, "vtable_bytes" = 984 : i32} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.reified_type
      %725 = "mid.parameterization"(%723, %724) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionMappedCollection.T_subtype_Any_to_MappedCollection.U_subtype_Any", ["MappedCollection.U_subtype_Any"], ["MappedCollection.T_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %726 = "mid.parameterizations_array"(%722, %725) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%726, %720, %717, %719) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %727 = "hi.cast"(%709) {"from_typ" = !hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "Mapper", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Mapper", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>
      "mid.return"(%727) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>) -> ()
    }) {"func_name" = "MappedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb162(%728 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %729 : !llvm.ptr):
      %730 = "mid.invariant"(%729) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %731 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb163] : () -> ()
    ^bb163:
      %732 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%732, %731) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb164] : () -> ()
    ^bb164:
      %733 = "llvm.extractvalue"(%728) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %734 = "llvm.load"(%731) : (!llvm.ptr) -> i32
      %735 = "llvm.getelementptr"(%733, %734) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %736 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %737 = "llvm.getelementptr"(%735, %736) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%737) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb165(%738 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %739 : !llvm.ptr):
      %740 = "mid.invariant"(%739) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %741 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb166] : () -> ()
    ^bb167:
      %742 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%742, %741) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb168] : () -> ()
    ^bb166:
      %743 = "llvm.getelementptr"(%739) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %744 = "mid.checkflag"(%743) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %745 = "llvm.load"(%744) : (!hi.bool) -> i1
      "cf.cond_br"(%745) [^bb167, ^bb167] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb168:
      %746 = "llvm.extractvalue"(%738) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %747 = "llvm.load"(%741) : (!llvm.ptr) -> i32
      %748 = "llvm.getelementptr"(%746, %747) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %749 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %750 = "llvm.getelementptr"(%748, %749) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%750) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb169(%751 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %752 : !llvm.ptr):
      %753 = "mid.invariant"(%752) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %754 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb170] : () -> ()
    ^bb171:
      %755 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%755, %754) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb172] : () -> ()
    ^bb173:
      %756 = "llvm.getelementptr"(%752) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %757 = "mid.checkflag"(%756) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %758 = "llvm.load"(%757) : (!hi.bool) -> i1
      "cf.cond_br"(%758) [^bb171, ^bb171] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb170:
      %759 = "llvm.getelementptr"(%752) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %760 = "mid.checkflag"(%759) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %761 = "llvm.load"(%760) : (!hi.bool) -> i1
      "cf.cond_br"(%761) [^bb173, ^bb173] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb172:
      %762 = "llvm.extractvalue"(%751) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %763 = "llvm.load"(%754) : (!llvm.ptr) -> i32
      %764 = "llvm.getelementptr"(%762, %763) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %765 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %766 = "llvm.getelementptr"(%764, %765) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%766) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb174(%767 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %768 : !llvm.ptr):
      %769 = "mid.invariant"(%768) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %770 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb175] : () -> ()
    ^bb176:
      %771 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%771, %770) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb177] : () -> ()
    ^bb175:
      %772 = "llvm.getelementptr"(%768) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %773 = "mid.checkflag"(%772) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %774 = "llvm.load"(%773) : (!hi.bool) -> i1
      "cf.cond_br"(%774) [^bb176, ^bb176] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb177:
      %775 = "llvm.extractvalue"(%767) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %776 = "llvm.load"(%770) : (!llvm.ptr) -> i32
      %777 = "llvm.getelementptr"(%775, %776) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %778 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %779 = "llvm.getelementptr"(%777, %778) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%779) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb178(%780 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %781 : !llvm.ptr):
      %782 = "mid.invariant"(%781) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %783 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb179] : () -> ()
    ^bb180:
      %784 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%784, %783) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb181] : () -> ()
    ^bb179:
      %785 = "llvm.getelementptr"(%781) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %786 = "mid.checkflag"(%785) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %787 = "llvm.load"(%786) : (!hi.bool) -> i1
      "cf.cond_br"(%787) [^bb180, ^bb180] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb181:
      %788 = "llvm.extractvalue"(%780) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %789 = "llvm.load"(%783) : (!llvm.ptr) -> i32
      %790 = "llvm.getelementptr"(%788, %789) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %791 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %792 = "llvm.getelementptr"(%790, %791) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%792) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb182(%793 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %794 : !llvm.ptr):
      %795 = "mid.invariant"(%794) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %796 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb183] : () -> ()
    ^bb183:
      %797 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%797, %796) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb184] : () -> ()
    ^bb184:
      %798 = "llvm.extractvalue"(%793) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %799 = "llvm.load"(%796) : (!llvm.ptr) -> i32
      %800 = "llvm.getelementptr"(%798, %799) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %801 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %802 = "llvm.getelementptr"(%800, %801) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%802) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb185(%803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %804 : !llvm.ptr):
      %805 = "mid.invariant"(%804) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %806 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb186] : () -> ()
    ^bb187:
      %807 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%807, %806) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb189:
      %808 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%808, %806) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb186:
      %809 = "llvm.getelementptr"(%804) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %810 = "mid.checkflag"(%809) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %811 = "llvm.load"(%810) : (!hi.bool) -> i1
      "cf.cond_br"(%811) [^bb187, ^bb190] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb190:
      %812 = "llvm.getelementptr"(%804) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %813 = "mid.checkflag"(%812) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %814 = "llvm.load"(%813) : (!hi.bool) -> i1
      "cf.cond_br"(%814) [^bb189, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb188:
      %815 = "llvm.extractvalue"(%803) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %816 = "llvm.load"(%806) : (!llvm.ptr) -> i32
      %817 = "llvm.getelementptr"(%815, %816) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %818 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %819 = "llvm.getelementptr"(%817, %818) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%819) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb191(%820 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %821 : !llvm.ptr):
      %822 = "mid.invariant"(%821) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %823 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb192] : () -> ()
    ^bb193:
      %824 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%824, %823) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb194] : () -> ()
    ^bb192:
      %825 = "llvm.getelementptr"(%821) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %826 = "mid.checkflag"(%825) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %827 = "llvm.load"(%826) : (!hi.bool) -> i1
      "cf.cond_br"(%827) [^bb193, ^bb193] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb194:
      %828 = "llvm.extractvalue"(%820) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %829 = "llvm.load"(%823) : (!llvm.ptr) -> i32
      %830 = "llvm.getelementptr"(%828, %829) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %831 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %832 = "llvm.getelementptr"(%830, %831) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%832) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb195(%833 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %834 : !llvm.ptr):
      %835 = "mid.invariant"(%834) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %836 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb196] : () -> ()
    ^bb197:
      %837 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%837, %836) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb198] : () -> ()
    ^bb199:
      %838 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%838, %836) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb198] : () -> ()
    ^bb196:
      %839 = "llvm.getelementptr"(%834) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %840 = "mid.checkflag"(%839) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %841 = "llvm.load"(%840) : (!hi.bool) -> i1
      "cf.cond_br"(%841) [^bb197, ^bb200] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb200:
      %842 = "llvm.getelementptr"(%834) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %843 = "mid.checkflag"(%842) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %844 = "llvm.load"(%843) : (!hi.bool) -> i1
      "cf.cond_br"(%844) [^bb201, ^bb199] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb201:
      %845 = "llvm.getelementptr"(%834) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %846 = "mid.checkflag"(%845) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %847 = "llvm.load"(%846) : (!hi.bool) -> i1
      "cf.cond_br"(%847) [^bb199, ^bb199] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb198:
      %848 = "llvm.extractvalue"(%833) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %849 = "llvm.load"(%836) : (!llvm.ptr) -> i32
      %850 = "llvm.getelementptr"(%848, %849) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %851 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %852 = "llvm.getelementptr"(%850, %851) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%852) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb202(%853 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %854 : !llvm.ptr):
      %855 = "mid.invariant"(%854) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %856 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb203] : () -> ()
    ^bb204:
      %857 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%857, %856) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb205] : () -> ()
    ^bb206:
      %858 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%858, %856) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb205] : () -> ()
    ^bb203:
      %859 = "llvm.getelementptr"(%854) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %860 = "mid.checkflag"(%859) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %861 = "llvm.load"(%860) : (!hi.bool) -> i1
      "cf.cond_br"(%861) [^bb204, ^bb207] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb207:
      %862 = "llvm.getelementptr"(%854) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %863 = "mid.checkflag"(%862) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %864 = "llvm.load"(%863) : (!hi.bool) -> i1
      "cf.cond_br"(%864) [^bb208, ^bb206] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb208:
      %865 = "llvm.getelementptr"(%854) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %866 = "mid.checkflag"(%865) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %867 = "llvm.load"(%866) : (!hi.bool) -> i1
      "cf.cond_br"(%867) [^bb206, ^bb206] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb205:
      %868 = "llvm.extractvalue"(%853) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %869 = "llvm.load"(%856) : (!llvm.ptr) -> i32
      %870 = "llvm.getelementptr"(%868, %869) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %871 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %872 = "llvm.getelementptr"(%870, %871) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%872) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb209(%873 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %874 : !llvm.ptr):
      %875 = "mid.invariant"(%874) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %876 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb210] : () -> ()
    ^bb211:
      %877 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%877, %876) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb212] : () -> ()
    ^bb213:
      %878 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%878, %876) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb212] : () -> ()
    ^bb210:
      %879 = "llvm.getelementptr"(%874) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %880 = "mid.checkflag"(%879) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %881 = "llvm.load"(%880) : (!hi.bool) -> i1
      "cf.cond_br"(%881) [^bb211, ^bb214] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb214:
      %882 = "llvm.getelementptr"(%874) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %883 = "mid.checkflag"(%882) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %884 = "llvm.load"(%883) : (!hi.bool) -> i1
      "cf.cond_br"(%884) [^bb215, ^bb213] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb215:
      %885 = "llvm.getelementptr"(%874) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %886 = "mid.checkflag"(%885) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %887 = "llvm.load"(%886) : (!hi.bool) -> i1
      "cf.cond_br"(%887) [^bb213, ^bb213] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb212:
      %888 = "llvm.extractvalue"(%873) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %889 = "llvm.load"(%876) : (!llvm.ptr) -> i32
      %890 = "llvm.getelementptr"(%888, %889) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %891 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %892 = "llvm.getelementptr"(%890, %891) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%892) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb216(%893 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %894 : !llvm.ptr):
      %895 = "mid.invariant"(%894) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %896 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb217] : () -> ()
    ^bb218:
      %897 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%897, %896) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb219] : () -> ()
    ^bb220:
      %898 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%898, %896) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb219] : () -> ()
    ^bb217:
      %899 = "llvm.getelementptr"(%894) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %900 = "mid.checkflag"(%899) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %901 = "llvm.load"(%900) : (!hi.bool) -> i1
      "cf.cond_br"(%901) [^bb218, ^bb221] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb221:
      %902 = "llvm.getelementptr"(%894) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %903 = "mid.checkflag"(%902) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %904 = "llvm.load"(%903) : (!hi.bool) -> i1
      "cf.cond_br"(%904) [^bb222, ^bb220] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb222:
      %905 = "llvm.getelementptr"(%894) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %906 = "mid.checkflag"(%905) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %907 = "llvm.load"(%906) : (!hi.bool) -> i1
      "cf.cond_br"(%907) [^bb220, ^bb220] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb219:
      %908 = "llvm.extractvalue"(%893) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %909 = "llvm.load"(%896) : (!llvm.ptr) -> i32
      %910 = "llvm.getelementptr"(%908, %909) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<123 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %911 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %912 = "llvm.getelementptr"(%910, %911) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%912) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ChainedCollection", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainedCollection_field_ChainedCollection_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainedCollection_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainedCollection_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainedCollection_field_first", "getter_name" = "ChainedCollection_getter_first", "setter_name" = "ChainedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainedCollection_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainedCollection_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainedCollection_field_second", "getter_name" = "ChainedCollection_getter_second", "setter_name" = "ChainedCollection_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb223(%913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %914 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %915 : !llvm.ptr, %916 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %918 = "mid.wrap"(%913) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %919 = "hi.cast"(%918) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %920 = "mid.wrap"(%916) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %921 = "hi.cast"(%920) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %922 = "hi.cast"(%921) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.set_field"(%919, %922) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
      %923 = "mid.wrap"(%917) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %924 = "hi.cast"(%923) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %925 = "hi.cast"(%924) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.set_field"(%919, %925) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
    }) {"func_name" = "ChainedCollection_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb224(%926 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %927 : !llvm.ptr):
      %928 = "mid.invariant"(%927) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %929 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb225] : () -> ()
    ^bb226:
      %930 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%930, %929) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb227] : () -> ()
    ^bb228:
      %931 = "llvm.getelementptr"(%927) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %932 = "mid.checkflag"(%931) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %933 = "llvm.load"(%932) : (!hi.bool) -> i1
      "cf.cond_br"(%933) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb225:
      %934 = "llvm.getelementptr"(%927) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %935 = "mid.checkflag"(%934) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %936 = "llvm.load"(%935) : (!hi.bool) -> i1
      "cf.cond_br"(%936) [^bb228, ^bb228] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb227:
      %937 = "llvm.extractvalue"(%926) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %938 = "llvm.load"(%929) : (!llvm.ptr) -> i32
      %939 = "llvm.getelementptr"(%937, %938) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %940 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %941 = "llvm.getelementptr"(%939, %940) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%941) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb229(%942 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %943 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %944 : !llvm.ptr):
      %945 = "mid.wrap"(%942) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %946 = "hi.cast"(%945) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %947 = "mid.get_field"(%946) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %948 = "mid.unwrap"(%947) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %949 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %950 = "mid.method_call"(%949, %948) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %951 = "hi.cast"(%950) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %952 = "mid.get_field"(%946) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %953 = "mid.unwrap"(%952) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %954 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %955 = "mid.method_call"(%954, %953) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %956 = "hi.cast"(%955) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %957 = "hi.arithmetic"(%951, %956) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %958 = "hi.cast"(%957) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%958) : (si32) -> ()
    }) {"func_name" = "ChainedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb230(%959 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %960 : !llvm.ptr):
      %961 = "mid.invariant"(%960) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %962 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb231] : () -> ()
    ^bb231:
      %963 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%963, %962) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb232] : () -> ()
    ^bb232:
      %964 = "llvm.extractvalue"(%959) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %965 = "llvm.load"(%962) : (!llvm.ptr) -> i32
      %966 = "llvm.getelementptr"(%964, %965) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %967 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %968 = "llvm.getelementptr"(%966, %967) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%968) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb233(%969 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %970 : !llvm.ptr):
      %971 = "mid.invariant"(%970) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %972 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb234] : () -> ()
    ^bb234:
      %973 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%973, %972) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb235] : () -> ()
    ^bb235:
      %974 = "llvm.extractvalue"(%969) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %975 = "llvm.load"(%972) : (!llvm.ptr) -> i32
      %976 = "llvm.getelementptr"(%974, %975) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %977 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %978 = "llvm.getelementptr"(%976, %977) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%978) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb236(%979 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %980 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %981 : !llvm.ptr):
      %982 = "mid.wrap"(%979) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %983 = "hi.cast"(%982) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %984 = "mid.get_field"(%983) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %985 = "mid.unwrap"(%984) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %986 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %987 = "mid.method_call"(%986, %985) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %988 = "hi.cast"(%987) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %989 = "mid.get_field"(%983) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %990 = "mid.unwrap"(%989) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %991 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %992 = "mid.method_call"(%991, %990) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %993 = "hi.cast"(%992) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %994 = "mid.unwrap"(%988) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %995 = "mid.unwrap"(%993) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %996 = "mid.get_type_field"(%983) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.reified_type
      %997 = "mid.new"(%996) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "Chainer", "num_data_fields" = 3 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %998 = "mid.get_field"(%983) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %999 = "mid.unwrap"(%998) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1000 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1001 = "mid.method_call"(%1000, %999) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1002 = "hi.cast"(%1001) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %1003 = "mid.get_field"(%983) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %1004 = "mid.unwrap"(%1003) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1005 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1006 = "mid.method_call"(%1005, %1004) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1007 = "hi.cast"(%1006) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %1008 = "hi.cast"(%1002) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1009 = "mid.unwrap"(%1008) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1010 = "hi.cast"(%1007) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>
      %1011 = "mid.unwrap"(%1010) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Chainer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1012 = "mid.unwrap"(%997) : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1013 = "mid.get_type_field"(%983) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.reified_type
      %1014 = "mid.parameterization"(%1013) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChainedCollection.T_subtype_Any", ["ChainedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1015 = "mid.get_type_field"(%983) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.reified_type
      %1016 = "mid.parameterization"(%1015) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChainedCollection.T_subtype_Any", ["ChainedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1017 = "mid.parameterizations_array"(%1014, %1016) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1017, %1012, %1009, %1011) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1018 = "hi.cast"(%997) {"from_typ" = !hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Chainer", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Chainer", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.return"(%1018) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
    }) {"func_name" = "ChainedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb237(%1019 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1020 : !llvm.ptr):
      %1021 = "mid.invariant"(%1020) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1022 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb238] : () -> ()
    ^bb238:
      %1023 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1023, %1022) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb239] : () -> ()
    ^bb239:
      %1024 = "llvm.extractvalue"(%1019) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1025 = "llvm.load"(%1022) : (!llvm.ptr) -> i32
      %1026 = "llvm.getelementptr"(%1024, %1025) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1027 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1028 = "llvm.getelementptr"(%1026, %1027) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1028) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb240(%1029 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1030 : !llvm.ptr):
      %1031 = "mid.invariant"(%1030) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1032 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb241] : () -> ()
    ^bb242:
      %1033 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1033, %1032) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb243] : () -> ()
    ^bb241:
      %1034 = "llvm.getelementptr"(%1030) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1035 = "mid.checkflag"(%1034) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1036 = "llvm.load"(%1035) : (!hi.bool) -> i1
      "cf.cond_br"(%1036) [^bb242, ^bb242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb243:
      %1037 = "llvm.extractvalue"(%1029) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1038 = "llvm.load"(%1032) : (!llvm.ptr) -> i32
      %1039 = "llvm.getelementptr"(%1037, %1038) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1040 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1041 = "llvm.getelementptr"(%1039, %1040) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1041) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb244(%1042 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1043 : !llvm.ptr):
      %1044 = "mid.invariant"(%1043) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1045 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb245] : () -> ()
    ^bb246:
      %1046 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1046, %1045) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb247] : () -> ()
    ^bb248:
      %1047 = "llvm.getelementptr"(%1043) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1048 = "mid.checkflag"(%1047) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1049 = "llvm.load"(%1048) : (!hi.bool) -> i1
      "cf.cond_br"(%1049) [^bb246, ^bb246] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb245:
      %1050 = "llvm.getelementptr"(%1043) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1051 = "mid.checkflag"(%1050) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1052 = "llvm.load"(%1051) : (!hi.bool) -> i1
      "cf.cond_br"(%1052) [^bb248, ^bb248] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb247:
      %1053 = "llvm.extractvalue"(%1042) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1054 = "llvm.load"(%1045) : (!llvm.ptr) -> i32
      %1055 = "llvm.getelementptr"(%1053, %1054) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1056 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1057 = "llvm.getelementptr"(%1055, %1056) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1057) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb249(%1058 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1059 : !llvm.ptr):
      %1060 = "mid.invariant"(%1059) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1061 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb250] : () -> ()
    ^bb251:
      %1062 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1062, %1061) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb252] : () -> ()
    ^bb250:
      %1063 = "llvm.getelementptr"(%1059) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1064 = "mid.checkflag"(%1063) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1065 = "llvm.load"(%1064) : (!hi.bool) -> i1
      "cf.cond_br"(%1065) [^bb251, ^bb251] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb252:
      %1066 = "llvm.extractvalue"(%1058) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1067 = "llvm.load"(%1061) : (!llvm.ptr) -> i32
      %1068 = "llvm.getelementptr"(%1066, %1067) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1069 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1070 = "llvm.getelementptr"(%1068, %1069) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1070) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb253(%1071 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1072 : !llvm.ptr):
      %1073 = "mid.invariant"(%1072) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1074 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb254] : () -> ()
    ^bb255:
      %1075 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1075, %1074) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb256] : () -> ()
    ^bb254:
      %1076 = "llvm.getelementptr"(%1072) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1077 = "mid.checkflag"(%1076) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1078 = "llvm.load"(%1077) : (!hi.bool) -> i1
      "cf.cond_br"(%1078) [^bb255, ^bb255] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb256:
      %1079 = "llvm.extractvalue"(%1071) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1080 = "llvm.load"(%1074) : (!llvm.ptr) -> i32
      %1081 = "llvm.getelementptr"(%1079, %1080) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1082 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1083 = "llvm.getelementptr"(%1081, %1082) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1083) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb257(%1084 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1085 : !llvm.ptr):
      %1086 = "mid.invariant"(%1085) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1087 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb258] : () -> ()
    ^bb258:
      %1088 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1088, %1087) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb259] : () -> ()
    ^bb259:
      %1089 = "llvm.extractvalue"(%1084) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1090 = "llvm.load"(%1087) : (!llvm.ptr) -> i32
      %1091 = "llvm.getelementptr"(%1089, %1090) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1092 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1093 = "llvm.getelementptr"(%1091, %1092) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1093) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb260(%1094 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1095 : !llvm.ptr):
      %1096 = "mid.invariant"(%1095) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1097 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb261] : () -> ()
    ^bb262:
      %1098 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1098, %1097) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb263] : () -> ()
    ^bb264:
      %1099 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1099, %1097) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb263] : () -> ()
    ^bb261:
      %1100 = "llvm.getelementptr"(%1095) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1101 = "mid.checkflag"(%1100) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1102 = "llvm.load"(%1101) : (!hi.bool) -> i1
      "cf.cond_br"(%1102) [^bb262, ^bb265] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb265:
      %1103 = "llvm.getelementptr"(%1095) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1104 = "mid.checkflag"(%1103) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1105 = "llvm.load"(%1104) : (!hi.bool) -> i1
      "cf.cond_br"(%1105) [^bb264, ^bb264] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb263:
      %1106 = "llvm.extractvalue"(%1094) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1107 = "llvm.load"(%1097) : (!llvm.ptr) -> i32
      %1108 = "llvm.getelementptr"(%1106, %1107) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1109 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1110 = "llvm.getelementptr"(%1108, %1109) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1110) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb266(%1111 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1112 : !llvm.ptr):
      %1113 = "mid.invariant"(%1112) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1114 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb267] : () -> ()
    ^bb268:
      %1115 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1115, %1114) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb269] : () -> ()
    ^bb267:
      %1116 = "llvm.getelementptr"(%1112) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1117 = "mid.checkflag"(%1116) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1118 = "llvm.load"(%1117) : (!hi.bool) -> i1
      "cf.cond_br"(%1118) [^bb268, ^bb268] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb269:
      %1119 = "llvm.extractvalue"(%1111) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1120 = "llvm.load"(%1114) : (!llvm.ptr) -> i32
      %1121 = "llvm.getelementptr"(%1119, %1120) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1122 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1123 = "llvm.getelementptr"(%1121, %1122) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1123) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb270(%1124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1125 : !llvm.ptr):
      %1126 = "mid.invariant"(%1125) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1127 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb271] : () -> ()
    ^bb272:
      %1128 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1128, %1127) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb273] : () -> ()
    ^bb274:
      %1129 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1129, %1127) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb273] : () -> ()
    ^bb271:
      %1130 = "llvm.getelementptr"(%1125) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1131 = "mid.checkflag"(%1130) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1132 = "llvm.load"(%1131) : (!hi.bool) -> i1
      "cf.cond_br"(%1132) [^bb272, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb275:
      %1133 = "llvm.getelementptr"(%1125) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1134 = "mid.checkflag"(%1133) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1135 = "llvm.load"(%1134) : (!hi.bool) -> i1
      "cf.cond_br"(%1135) [^bb276, ^bb274] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb276:
      %1136 = "llvm.getelementptr"(%1125) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1137 = "mid.checkflag"(%1136) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1138 = "llvm.load"(%1137) : (!hi.bool) -> i1
      "cf.cond_br"(%1138) [^bb274, ^bb274] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb273:
      %1139 = "llvm.extractvalue"(%1124) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1140 = "llvm.load"(%1127) : (!llvm.ptr) -> i32
      %1141 = "llvm.getelementptr"(%1139, %1140) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1142 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1143 = "llvm.getelementptr"(%1141, %1142) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1143) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb277(%1144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1145 : !llvm.ptr):
      %1146 = "mid.invariant"(%1145) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1147 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb278] : () -> ()
    ^bb279:
      %1148 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1148, %1147) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb280] : () -> ()
    ^bb281:
      %1149 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1149, %1147) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb280] : () -> ()
    ^bb278:
      %1150 = "llvm.getelementptr"(%1145) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1151 = "mid.checkflag"(%1150) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1152 = "llvm.load"(%1151) : (!hi.bool) -> i1
      "cf.cond_br"(%1152) [^bb279, ^bb282] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb282:
      %1153 = "llvm.getelementptr"(%1145) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1154 = "mid.checkflag"(%1153) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1155 = "llvm.load"(%1154) : (!hi.bool) -> i1
      "cf.cond_br"(%1155) [^bb283, ^bb281] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb283:
      %1156 = "llvm.getelementptr"(%1145) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1157 = "mid.checkflag"(%1156) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1158 = "llvm.load"(%1157) : (!hi.bool) -> i1
      "cf.cond_br"(%1158) [^bb281, ^bb281] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb280:
      %1159 = "llvm.extractvalue"(%1144) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1160 = "llvm.load"(%1147) : (!llvm.ptr) -> i32
      %1161 = "llvm.getelementptr"(%1159, %1160) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1162 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1163 = "llvm.getelementptr"(%1161, %1162) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1163) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb284(%1164 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1165 : !llvm.ptr):
      %1166 = "mid.invariant"(%1165) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1167 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb285] : () -> ()
    ^bb286:
      %1168 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1168, %1167) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb287] : () -> ()
    ^bb288:
      %1169 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1169, %1167) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb287] : () -> ()
    ^bb285:
      %1170 = "llvm.getelementptr"(%1165) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1171 = "mid.checkflag"(%1170) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1172 = "llvm.load"(%1171) : (!hi.bool) -> i1
      "cf.cond_br"(%1172) [^bb286, ^bb289] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb289:
      %1173 = "llvm.getelementptr"(%1165) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1174 = "mid.checkflag"(%1173) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1175 = "llvm.load"(%1174) : (!hi.bool) -> i1
      "cf.cond_br"(%1175) [^bb290, ^bb288] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb290:
      %1176 = "llvm.getelementptr"(%1165) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1177 = "mid.checkflag"(%1176) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1178 = "llvm.load"(%1177) : (!hi.bool) -> i1
      "cf.cond_br"(%1178) [^bb288, ^bb288] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb287:
      %1179 = "llvm.extractvalue"(%1164) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1180 = "llvm.load"(%1167) : (!llvm.ptr) -> i32
      %1181 = "llvm.getelementptr"(%1179, %1180) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1182 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1183 = "llvm.getelementptr"(%1181, %1182) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1183) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb291(%1184 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1185 : !llvm.ptr):
      %1186 = "mid.invariant"(%1185) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1187 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb292] : () -> ()
    ^bb293:
      %1188 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1188, %1187) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb294] : () -> ()
    ^bb295:
      %1189 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1189, %1187) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb294] : () -> ()
    ^bb292:
      %1190 = "llvm.getelementptr"(%1185) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1191 = "mid.checkflag"(%1190) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1192 = "llvm.load"(%1191) : (!hi.bool) -> i1
      "cf.cond_br"(%1192) [^bb293, ^bb296] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb296:
      %1193 = "llvm.getelementptr"(%1185) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1194 = "mid.checkflag"(%1193) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1195 = "llvm.load"(%1194) : (!hi.bool) -> i1
      "cf.cond_br"(%1195) [^bb297, ^bb295] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb297:
      %1196 = "llvm.getelementptr"(%1185) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1197 = "mid.checkflag"(%1196) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1198 = "llvm.load"(%1197) : (!hi.bool) -> i1
      "cf.cond_br"(%1198) [^bb295, ^bb295] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb294:
      %1199 = "llvm.extractvalue"(%1184) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1200 = "llvm.load"(%1187) : (!llvm.ptr) -> i32
      %1201 = "llvm.getelementptr"(%1199, %1200) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1202 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1203 = "llvm.getelementptr"(%1201, %1202) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1203) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_InterleavedCollection", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleavedCollection_field_InterleavedCollection_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleavedCollection_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleavedCollection_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleavedCollection_field_first", "getter_name" = "InterleavedCollection_getter_first", "setter_name" = "InterleavedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleavedCollection_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleavedCollection_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleavedCollection_field_second", "getter_name" = "InterleavedCollection_getter_second", "setter_name" = "InterleavedCollection_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb298(%1204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1205 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1206 : !llvm.ptr, %1207 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1209 = "mid.wrap"(%1204) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1210 = "hi.cast"(%1209) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1211 = "mid.wrap"(%1207) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1212 = "hi.cast"(%1211) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1213 = "hi.cast"(%1212) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.set_field"(%1210, %1213) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
      %1214 = "mid.wrap"(%1208) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1215 = "hi.cast"(%1214) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1216 = "hi.cast"(%1215) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.set_field"(%1210, %1216) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
    }) {"func_name" = "InterleavedCollection_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb299(%1217 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1218 : !llvm.ptr):
      %1219 = "mid.invariant"(%1218) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1220 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb300] : () -> ()
    ^bb301:
      %1221 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1221, %1220) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb302] : () -> ()
    ^bb303:
      %1222 = "llvm.getelementptr"(%1218) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1223 = "mid.checkflag"(%1222) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1224 = "llvm.load"(%1223) : (!hi.bool) -> i1
      "cf.cond_br"(%1224) [^bb301, ^bb301] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb300:
      %1225 = "llvm.getelementptr"(%1218) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1226 = "mid.checkflag"(%1225) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1227 = "llvm.load"(%1226) : (!hi.bool) -> i1
      "cf.cond_br"(%1227) [^bb303, ^bb303] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb302:
      %1228 = "llvm.extractvalue"(%1217) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1229 = "llvm.load"(%1220) : (!llvm.ptr) -> i32
      %1230 = "llvm.getelementptr"(%1228, %1229) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1231 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1232 = "llvm.getelementptr"(%1230, %1231) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1232) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb304(%1233 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1234 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1235 : !llvm.ptr):
      %1236 = "mid.wrap"(%1233) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1237 = "hi.cast"(%1236) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1238 = "mid.get_field"(%1237) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1239 = "mid.unwrap"(%1238) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1240 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1241 = "mid.method_call"(%1240, %1239) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1242 = "hi.cast"(%1241) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1243 = "mid.get_field"(%1237) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1244 = "mid.unwrap"(%1243) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1245 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1246 = "mid.method_call"(%1245, %1244) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1247 = "hi.cast"(%1246) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1248 = "hi.arithmetic"(%1242, %1247) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1249 = "hi.cast"(%1248) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%1249) : (si32) -> ()
    }) {"func_name" = "InterleavedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb305(%1250 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1251 : !llvm.ptr):
      %1252 = "mid.invariant"(%1251) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1253 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb306] : () -> ()
    ^bb306:
      %1254 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1254, %1253) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb307] : () -> ()
    ^bb307:
      %1255 = "llvm.extractvalue"(%1250) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1256 = "llvm.load"(%1253) : (!llvm.ptr) -> i32
      %1257 = "llvm.getelementptr"(%1255, %1256) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1258 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1259 = "llvm.getelementptr"(%1257, %1258) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1259) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb308(%1260 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1261 : !llvm.ptr):
      %1262 = "mid.invariant"(%1261) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1263 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb309] : () -> ()
    ^bb309:
      %1264 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1264, %1263) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb310] : () -> ()
    ^bb310:
      %1265 = "llvm.extractvalue"(%1260) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1266 = "llvm.load"(%1263) : (!llvm.ptr) -> i32
      %1267 = "llvm.getelementptr"(%1265, %1266) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1268 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1269 = "llvm.getelementptr"(%1267, %1268) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1269) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb311(%1270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1272 : !llvm.ptr):
      %1273 = "mid.wrap"(%1270) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1274 = "hi.cast"(%1273) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1275 = "mid.get_field"(%1274) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1276 = "mid.unwrap"(%1275) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1277 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1278 = "mid.method_call"(%1277, %1276) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1279 = "hi.cast"(%1278) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1280 = "mid.get_field"(%1274) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1281 = "mid.unwrap"(%1280) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1282 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1283 = "mid.method_call"(%1282, %1281) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1284 = "hi.cast"(%1283) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1285 = "mid.unwrap"(%1279) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1286 = "mid.unwrap"(%1284) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1287 = "mid.get_type_field"(%1274) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.reified_type
      %1288 = "mid.new"(%1287) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "Interleaver", "num_data_fields" = 3 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1289 = "mid.get_field"(%1274) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1290 = "mid.unwrap"(%1289) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1291 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1292 = "mid.method_call"(%1291, %1290) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1293 = "hi.cast"(%1292) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1294 = "mid.get_field"(%1274) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1295 = "mid.unwrap"(%1294) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1296 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1297 = "mid.method_call"(%1296, %1295) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1298 = "hi.cast"(%1297) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1299 = "hi.cast"(%1293) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1300 = "mid.unwrap"(%1299) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1301 = "hi.cast"(%1298) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>
      %1302 = "mid.unwrap"(%1301) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Interleaver">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1303 = "mid.unwrap"(%1288) : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1304 = "mid.get_type_field"(%1274) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.reified_type
      %1305 = "mid.parameterization"(%1304) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleavedCollection.T_subtype_Any", ["InterleavedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1306 = "mid.get_type_field"(%1274) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.reified_type
      %1307 = "mid.parameterization"(%1306) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleavedCollection.T_subtype_Any", ["InterleavedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1308 = "mid.parameterizations_array"(%1305, %1307) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1308, %1303, %1300, %1302) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1309 = "hi.cast"(%1288) {"from_typ" = !hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Interleaver", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Interleaver", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.return"(%1309) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
    }) {"func_name" = "InterleavedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb312(%1310 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1311 : !llvm.ptr):
      %1312 = "mid.invariant"(%1311) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1313 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb313] : () -> ()
    ^bb313:
      %1314 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1314, %1313) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb314] : () -> ()
    ^bb314:
      %1315 = "llvm.extractvalue"(%1310) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1316 = "llvm.load"(%1313) : (!llvm.ptr) -> i32
      %1317 = "llvm.getelementptr"(%1315, %1316) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1318 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1319 = "llvm.getelementptr"(%1317, %1318) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1319) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb315(%1320 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1321 : !llvm.ptr):
      %1322 = "mid.invariant"(%1321) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1323 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb316] : () -> ()
    ^bb317:
      %1324 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1324, %1323) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb318] : () -> ()
    ^bb316:
      %1325 = "llvm.getelementptr"(%1321) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1326 = "mid.checkflag"(%1325) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1327 = "llvm.load"(%1326) : (!hi.bool) -> i1
      "cf.cond_br"(%1327) [^bb317, ^bb317] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb318:
      %1328 = "llvm.extractvalue"(%1320) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1329 = "llvm.load"(%1323) : (!llvm.ptr) -> i32
      %1330 = "llvm.getelementptr"(%1328, %1329) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1331 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1332 = "llvm.getelementptr"(%1330, %1331) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1332) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb319(%1333 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1334 : !llvm.ptr):
      %1335 = "mid.invariant"(%1334) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1336 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb320] : () -> ()
    ^bb321:
      %1337 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1337, %1336) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb322] : () -> ()
    ^bb323:
      %1338 = "llvm.getelementptr"(%1334) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1339 = "mid.checkflag"(%1338) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1340 = "llvm.load"(%1339) : (!hi.bool) -> i1
      "cf.cond_br"(%1340) [^bb321, ^bb321] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb320:
      %1341 = "llvm.getelementptr"(%1334) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1342 = "mid.checkflag"(%1341) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1343 = "llvm.load"(%1342) : (!hi.bool) -> i1
      "cf.cond_br"(%1343) [^bb323, ^bb323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb322:
      %1344 = "llvm.extractvalue"(%1333) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1345 = "llvm.load"(%1336) : (!llvm.ptr) -> i32
      %1346 = "llvm.getelementptr"(%1344, %1345) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1347 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1348 = "llvm.getelementptr"(%1346, %1347) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1348) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb324(%1349 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1350 : !llvm.ptr):
      %1351 = "mid.invariant"(%1350) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1352 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb325] : () -> ()
    ^bb326:
      %1353 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1353, %1352) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb327] : () -> ()
    ^bb325:
      %1354 = "llvm.getelementptr"(%1350) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1355 = "mid.checkflag"(%1354) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1356 = "llvm.load"(%1355) : (!hi.bool) -> i1
      "cf.cond_br"(%1356) [^bb326, ^bb326] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb327:
      %1357 = "llvm.extractvalue"(%1349) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1358 = "llvm.load"(%1352) : (!llvm.ptr) -> i32
      %1359 = "llvm.getelementptr"(%1357, %1358) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1360 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1361 = "llvm.getelementptr"(%1359, %1360) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1361) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb328(%1362 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1363 : !llvm.ptr):
      %1364 = "mid.invariant"(%1363) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1365 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb329] : () -> ()
    ^bb330:
      %1366 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1366, %1365) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb331] : () -> ()
    ^bb329:
      %1367 = "llvm.getelementptr"(%1363) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1368 = "mid.checkflag"(%1367) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1369 = "llvm.load"(%1368) : (!hi.bool) -> i1
      "cf.cond_br"(%1369) [^bb330, ^bb330] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb331:
      %1370 = "llvm.extractvalue"(%1362) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1371 = "llvm.load"(%1365) : (!llvm.ptr) -> i32
      %1372 = "llvm.getelementptr"(%1370, %1371) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1373 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1374 = "llvm.getelementptr"(%1372, %1373) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1374) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb332(%1375 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1376 : !llvm.ptr):
      %1377 = "mid.invariant"(%1376) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1378 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb333] : () -> ()
    ^bb333:
      %1379 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1379, %1378) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb334] : () -> ()
    ^bb334:
      %1380 = "llvm.extractvalue"(%1375) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1381 = "llvm.load"(%1378) : (!llvm.ptr) -> i32
      %1382 = "llvm.getelementptr"(%1380, %1381) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1383 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1384 = "llvm.getelementptr"(%1382, %1383) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1384) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb335(%1385 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1386 : !llvm.ptr):
      %1387 = "mid.invariant"(%1386) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1388 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb336] : () -> ()
    ^bb337:
      %1389 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1389, %1388) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb338] : () -> ()
    ^bb339:
      %1390 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1390, %1388) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb338] : () -> ()
    ^bb336:
      %1391 = "llvm.getelementptr"(%1386) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1392 = "mid.checkflag"(%1391) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1393 = "llvm.load"(%1392) : (!hi.bool) -> i1
      "cf.cond_br"(%1393) [^bb337, ^bb340] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb340:
      %1394 = "llvm.getelementptr"(%1386) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1395 = "mid.checkflag"(%1394) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1396 = "llvm.load"(%1395) : (!hi.bool) -> i1
      "cf.cond_br"(%1396) [^bb339, ^bb339] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb338:
      %1397 = "llvm.extractvalue"(%1385) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1398 = "llvm.load"(%1388) : (!llvm.ptr) -> i32
      %1399 = "llvm.getelementptr"(%1397, %1398) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1400 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1401 = "llvm.getelementptr"(%1399, %1400) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1401) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb341(%1402 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1403 : !llvm.ptr):
      %1404 = "mid.invariant"(%1403) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1405 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb342] : () -> ()
    ^bb343:
      %1406 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1406, %1405) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb344] : () -> ()
    ^bb342:
      %1407 = "llvm.getelementptr"(%1403) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1408 = "mid.checkflag"(%1407) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1409 = "llvm.load"(%1408) : (!hi.bool) -> i1
      "cf.cond_br"(%1409) [^bb343, ^bb343] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb344:
      %1410 = "llvm.extractvalue"(%1402) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1411 = "llvm.load"(%1405) : (!llvm.ptr) -> i32
      %1412 = "llvm.getelementptr"(%1410, %1411) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1413 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1414 = "llvm.getelementptr"(%1412, %1413) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1414) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb345(%1415 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1416 : !llvm.ptr):
      %1417 = "mid.invariant"(%1416) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1418 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb346] : () -> ()
    ^bb347:
      %1419 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1419, %1418) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb348] : () -> ()
    ^bb349:
      %1420 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1420, %1418) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb348] : () -> ()
    ^bb346:
      %1421 = "llvm.getelementptr"(%1416) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1422 = "mid.checkflag"(%1421) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1423 = "llvm.load"(%1422) : (!hi.bool) -> i1
      "cf.cond_br"(%1423) [^bb347, ^bb350] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb350:
      %1424 = "llvm.getelementptr"(%1416) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1425 = "mid.checkflag"(%1424) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1426 = "llvm.load"(%1425) : (!hi.bool) -> i1
      "cf.cond_br"(%1426) [^bb351, ^bb349] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb351:
      %1427 = "llvm.getelementptr"(%1416) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1428 = "mid.checkflag"(%1427) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1429 = "llvm.load"(%1428) : (!hi.bool) -> i1
      "cf.cond_br"(%1429) [^bb349, ^bb349] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb348:
      %1430 = "llvm.extractvalue"(%1415) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1431 = "llvm.load"(%1418) : (!llvm.ptr) -> i32
      %1432 = "llvm.getelementptr"(%1430, %1431) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1433 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1434 = "llvm.getelementptr"(%1432, %1433) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1434) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb352(%1435 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1436 : !llvm.ptr):
      %1437 = "mid.invariant"(%1436) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1438 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb353] : () -> ()
    ^bb354:
      %1439 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1439, %1438) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb355] : () -> ()
    ^bb356:
      %1440 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1440, %1438) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb355] : () -> ()
    ^bb353:
      %1441 = "llvm.getelementptr"(%1436) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1442 = "mid.checkflag"(%1441) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1443 = "llvm.load"(%1442) : (!hi.bool) -> i1
      "cf.cond_br"(%1443) [^bb354, ^bb357] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb357:
      %1444 = "llvm.getelementptr"(%1436) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1445 = "mid.checkflag"(%1444) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1446 = "llvm.load"(%1445) : (!hi.bool) -> i1
      "cf.cond_br"(%1446) [^bb358, ^bb356] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb358:
      %1447 = "llvm.getelementptr"(%1436) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1448 = "mid.checkflag"(%1447) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1449 = "llvm.load"(%1448) : (!hi.bool) -> i1
      "cf.cond_br"(%1449) [^bb356, ^bb356] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb355:
      %1450 = "llvm.extractvalue"(%1435) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1451 = "llvm.load"(%1438) : (!llvm.ptr) -> i32
      %1452 = "llvm.getelementptr"(%1450, %1451) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1453 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1454 = "llvm.getelementptr"(%1452, %1453) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1454) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb359(%1455 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1456 : !llvm.ptr):
      %1457 = "mid.invariant"(%1456) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1458 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb360] : () -> ()
    ^bb361:
      %1459 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1459, %1458) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb362] : () -> ()
    ^bb363:
      %1460 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1460, %1458) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb362] : () -> ()
    ^bb360:
      %1461 = "llvm.getelementptr"(%1456) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1462 = "mid.checkflag"(%1461) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1463 = "llvm.load"(%1462) : (!hi.bool) -> i1
      "cf.cond_br"(%1463) [^bb361, ^bb364] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb364:
      %1464 = "llvm.getelementptr"(%1456) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1465 = "mid.checkflag"(%1464) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1466 = "llvm.load"(%1465) : (!hi.bool) -> i1
      "cf.cond_br"(%1466) [^bb365, ^bb363] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb365:
      %1467 = "llvm.getelementptr"(%1456) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1468 = "mid.checkflag"(%1467) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1469 = "llvm.load"(%1468) : (!hi.bool) -> i1
      "cf.cond_br"(%1469) [^bb363, ^bb363] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb362:
      %1470 = "llvm.extractvalue"(%1455) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1471 = "llvm.load"(%1458) : (!llvm.ptr) -> i32
      %1472 = "llvm.getelementptr"(%1470, %1471) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1473 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1474 = "llvm.getelementptr"(%1472, %1473) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1474) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb366(%1475 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1476 : !llvm.ptr):
      %1477 = "mid.invariant"(%1476) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1478 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb367] : () -> ()
    ^bb368:
      %1479 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1479, %1478) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb369] : () -> ()
    ^bb370:
      %1480 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1480, %1478) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb369] : () -> ()
    ^bb367:
      %1481 = "llvm.getelementptr"(%1476) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1482 = "mid.checkflag"(%1481) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1483 = "llvm.load"(%1482) : (!hi.bool) -> i1
      "cf.cond_br"(%1483) [^bb368, ^bb371] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb371:
      %1484 = "llvm.getelementptr"(%1476) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1485 = "mid.checkflag"(%1484) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1486 = "llvm.load"(%1485) : (!hi.bool) -> i1
      "cf.cond_br"(%1486) [^bb372, ^bb370] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb372:
      %1487 = "llvm.getelementptr"(%1476) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1488 = "mid.checkflag"(%1487) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1489 = "llvm.load"(%1488) : (!hi.bool) -> i1
      "cf.cond_br"(%1489) [^bb370, ^bb370] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb369:
      %1490 = "llvm.extractvalue"(%1475) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1491 = "llvm.load"(%1478) : (!llvm.ptr) -> i32
      %1492 = "llvm.getelementptr"(%1490, %1491) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1493 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1494 = "llvm.getelementptr"(%1492, %1493) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1494) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ZippedCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZippedCollection_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZippedCollection_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZippedCollection_field_first", "getter_name" = "ZippedCollection_getter_first", "setter_name" = "ZippedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZippedCollection_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZippedCollection_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZippedCollection_field_second", "getter_name" = "ZippedCollection_getter_second", "setter_name" = "ZippedCollection_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb373(%1495 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1496 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1497 : !llvm.ptr, %1498 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1499 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1500 = "mid.wrap"(%1495) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1501 = "hi.cast"(%1500) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1502 = "mid.wrap"(%1498) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1503 = "hi.cast"(%1502) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1504 = "hi.cast"(%1503) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      "mid.set_field"(%1501, %1504) {"offset" = 3 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> ()
      %1505 = "mid.wrap"(%1499) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1506 = "hi.cast"(%1505) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1507 = "hi.cast"(%1506) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      "mid.set_field"(%1501, %1507) {"offset" = 4 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> ()
    }) {"func_name" = "ZippedCollection_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb374(%1508 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1509 : !llvm.ptr):
      %1510 = "mid.invariant"(%1509) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1511 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb375] : () -> ()
    ^bb376:
      %1512 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1512, %1511) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb377] : () -> ()
    ^bb378:
      %1513 = "llvm.getelementptr"(%1509) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1514 = "mid.checkflag"(%1513) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1515 = "llvm.load"(%1514) : (!hi.bool) -> i1
      "cf.cond_br"(%1515) [^bb376, ^bb376] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb375:
      %1516 = "llvm.getelementptr"(%1509) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1517 = "mid.checkflag"(%1516) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1518 = "llvm.load"(%1517) : (!hi.bool) -> i1
      "cf.cond_br"(%1518) [^bb378, ^bb378] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb377:
      %1519 = "llvm.extractvalue"(%1508) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1520 = "llvm.load"(%1511) : (!llvm.ptr) -> i32
      %1521 = "llvm.getelementptr"(%1519, %1520) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1522 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1523 = "llvm.getelementptr"(%1521, %1522) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1523) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb379(%1524 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1525 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1526 : !llvm.ptr):
      %1527 = "mid.wrap"(%1524) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1528 = "hi.cast"(%1527) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1529 = "mid.get_field"(%1528) {"offset" = 3 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1530 = "mid.unwrap"(%1529) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1531 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1532 = "mid.method_call"(%1531, %1530) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1533 = "hi.cast"(%1532) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1534 = "mid.get_field"(%1528) {"offset" = 4 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1535 = "mid.unwrap"(%1534) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1536 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1537 = "mid.method_call"(%1536, %1535) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1538 = "hi.cast"(%1537) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1539 = "hi.comparison"(%1533, %1538) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1540 = "mid.unwrap"(%1539) : (si1) -> i1
      "mid.if"(%1540) ({
        %1541 = "hi.cast"(%1533) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.return"(%1541) : (si32) -> ()
      }) : (i1) -> ()
      %1542 = "hi.cast"(%1538) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%1542) : (si32) -> ()
    }) {"func_name" = "ZippedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb380(%1543 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1544 : !llvm.ptr):
      %1545 = "mid.invariant"(%1544) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1546 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb381] : () -> ()
    ^bb381:
      %1547 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1547, %1546) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb382] : () -> ()
    ^bb382:
      %1548 = "llvm.extractvalue"(%1543) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1549 = "llvm.load"(%1546) : (!llvm.ptr) -> i32
      %1550 = "llvm.getelementptr"(%1548, %1549) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1551 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1552 = "llvm.getelementptr"(%1550, %1551) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1552) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb383(%1553 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1554 : !llvm.ptr):
      %1555 = "mid.invariant"(%1554) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1556 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb384] : () -> ()
    ^bb384:
      %1557 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1557, %1556) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb385] : () -> ()
    ^bb385:
      %1558 = "llvm.extractvalue"(%1553) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1559 = "llvm.load"(%1556) : (!llvm.ptr) -> i32
      %1560 = "llvm.getelementptr"(%1558, %1559) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1561 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1562 = "llvm.getelementptr"(%1560, %1561) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1562) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb386(%1563 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1564 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1565 : !llvm.ptr):
      %1566 = "mid.wrap"(%1563) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1567 = "hi.cast"(%1566) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1568 = "mid.get_field"(%1567) {"offset" = 3 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1569 = "mid.unwrap"(%1568) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1570 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1571 = "mid.method_call"(%1570, %1569) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1572 = "hi.cast"(%1571) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1573 = "mid.get_field"(%1567) {"offset" = 4 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1574 = "mid.unwrap"(%1573) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1575 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1576 = "mid.method_call"(%1575, %1574) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1577 = "hi.cast"(%1576) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1578 = "mid.unwrap"(%1572) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1579 = "mid.unwrap"(%1577) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1580 = "mid.get_type_field"(%1567) {"offset" = 0 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1581 = "mid.get_type_field"(%1567) {"offset" = 1 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1582 = "mid.get_type_field"(%1567) {"offset" = 0 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1583 = "mid.get_type_field"(%1567) {"offset" = 1 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1584 = "mid.parameterization"(%1582, %1583) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairZippedCollection.T_subtype_Any._ZippedCollection.U_subtype_Any", ["ZippedCollection.T_subtype_Any"], ["ZippedCollection.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %1585 = "mid.new"(%1580, %1581, %1584) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Zipper", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1586 = "mid.get_field"(%1567) {"offset" = 3 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1587 = "mid.unwrap"(%1586) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1588 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1589 = "mid.method_call"(%1588, %1587) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1590 = "hi.cast"(%1589) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1591 = "mid.get_field"(%1567) {"offset" = 4 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1592 = "mid.unwrap"(%1591) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1593 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1594 = "mid.method_call"(%1593, %1592) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1595 = "hi.cast"(%1594) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1596 = "hi.cast"(%1590) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>
      %1597 = "mid.unwrap"(%1596) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Zipper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1598 = "hi.cast"(%1595) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>
      %1599 = "mid.unwrap"(%1598) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "Zipper">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1600 = "mid.unwrap"(%1585) : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1601 = "mid.get_type_field"(%1567) {"offset" = 0 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1602 = "mid.parameterization"(%1601) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZippedCollection.T_subtype_Any", ["ZippedCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1603 = "mid.get_type_field"(%1567) {"offset" = 1 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.reified_type
      %1604 = "mid.parameterization"(%1603) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZippedCollection.U_subtype_Any", ["ZippedCollection.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1605 = "mid.parameterizations_array"(%1602, %1604) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1605, %1600, %1597, %1599) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1606 = "hi.cast"(%1585) {"from_typ" = !hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Zipper", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Zipper", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%1606) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "ZippedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb387(%1607 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1608 : !llvm.ptr):
      %1609 = "mid.invariant"(%1608) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1610 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb388] : () -> ()
    ^bb388:
      %1611 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1611, %1610) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb389] : () -> ()
    ^bb389:
      %1612 = "llvm.extractvalue"(%1607) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1613 = "llvm.load"(%1610) : (!llvm.ptr) -> i32
      %1614 = "llvm.getelementptr"(%1612, %1613) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1615 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1616 = "llvm.getelementptr"(%1614, %1615) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1616) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb390(%1617 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1618 : !llvm.ptr):
      %1619 = "mid.invariant"(%1618) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1620 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb391] : () -> ()
    ^bb392:
      %1621 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1621, %1620) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb393] : () -> ()
    ^bb391:
      %1622 = "llvm.getelementptr"(%1618) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1623 = "mid.checkflag"(%1622) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1624 = "llvm.load"(%1623) : (!hi.bool) -> i1
      "cf.cond_br"(%1624) [^bb392, ^bb392] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb393:
      %1625 = "llvm.extractvalue"(%1617) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1626 = "llvm.load"(%1620) : (!llvm.ptr) -> i32
      %1627 = "llvm.getelementptr"(%1625, %1626) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1628 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1629 = "llvm.getelementptr"(%1627, %1628) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1629) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb394(%1630 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1631 : !llvm.ptr):
      %1632 = "mid.invariant"(%1631) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1633 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb395] : () -> ()
    ^bb396:
      %1634 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1634, %1633) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb397] : () -> ()
    ^bb398:
      %1635 = "llvm.getelementptr"(%1631) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1636 = "mid.checkflag"(%1635) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1637 = "llvm.load"(%1636) : (!hi.bool) -> i1
      "cf.cond_br"(%1637) [^bb396, ^bb396] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb395:
      %1638 = "llvm.getelementptr"(%1631) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1639 = "mid.checkflag"(%1638) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1640 = "llvm.load"(%1639) : (!hi.bool) -> i1
      "cf.cond_br"(%1640) [^bb398, ^bb398] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb397:
      %1641 = "llvm.extractvalue"(%1630) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1642 = "llvm.load"(%1633) : (!llvm.ptr) -> i32
      %1643 = "llvm.getelementptr"(%1641, %1642) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1644 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1645 = "llvm.getelementptr"(%1643, %1644) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1645) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb399(%1646 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1647 : !llvm.ptr):
      %1648 = "mid.invariant"(%1647) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1649 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb400] : () -> ()
    ^bb401:
      %1650 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1650, %1649) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb402] : () -> ()
    ^bb400:
      %1651 = "llvm.getelementptr"(%1647) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1652 = "mid.checkflag"(%1651) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1653 = "llvm.load"(%1652) : (!hi.bool) -> i1
      "cf.cond_br"(%1653) [^bb401, ^bb401] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb402:
      %1654 = "llvm.extractvalue"(%1646) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1655 = "llvm.load"(%1649) : (!llvm.ptr) -> i32
      %1656 = "llvm.getelementptr"(%1654, %1655) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1657 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1658 = "llvm.getelementptr"(%1656, %1657) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1658) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb403(%1659 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1660 : !llvm.ptr):
      %1661 = "mid.invariant"(%1660) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1662 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb404] : () -> ()
    ^bb405:
      %1663 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1663, %1662) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb406] : () -> ()
    ^bb404:
      %1664 = "llvm.getelementptr"(%1660) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1665 = "mid.checkflag"(%1664) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1666 = "llvm.load"(%1665) : (!hi.bool) -> i1
      "cf.cond_br"(%1666) [^bb405, ^bb405] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb406:
      %1667 = "llvm.extractvalue"(%1659) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1668 = "llvm.load"(%1662) : (!llvm.ptr) -> i32
      %1669 = "llvm.getelementptr"(%1667, %1668) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1670 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1671 = "llvm.getelementptr"(%1669, %1670) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1671) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb407(%1672 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1673 : !llvm.ptr):
      %1674 = "mid.invariant"(%1673) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1675 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb408] : () -> ()
    ^bb408:
      %1676 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1676, %1675) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb409] : () -> ()
    ^bb409:
      %1677 = "llvm.extractvalue"(%1672) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1678 = "llvm.load"(%1675) : (!llvm.ptr) -> i32
      %1679 = "llvm.getelementptr"(%1677, %1678) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1680 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1681 = "llvm.getelementptr"(%1679, %1680) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1681) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb410(%1682 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1683 : !llvm.ptr):
      %1684 = "mid.invariant"(%1683) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1685 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb411] : () -> ()
    ^bb412:
      %1686 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1686, %1685) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb413] : () -> ()
    ^bb414:
      %1687 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1687, %1685) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb413] : () -> ()
    ^bb411:
      %1688 = "llvm.getelementptr"(%1683) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1689 = "mid.checkflag"(%1688) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1690 = "llvm.load"(%1689) : (!hi.bool) -> i1
      "cf.cond_br"(%1690) [^bb412, ^bb415] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb415:
      %1691 = "llvm.getelementptr"(%1683) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1692 = "mid.checkflag"(%1691) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1693 = "llvm.load"(%1692) : (!hi.bool) -> i1
      "cf.cond_br"(%1693) [^bb414, ^bb414] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb413:
      %1694 = "llvm.extractvalue"(%1682) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1695 = "llvm.load"(%1685) : (!llvm.ptr) -> i32
      %1696 = "llvm.getelementptr"(%1694, %1695) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1697 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1698 = "llvm.getelementptr"(%1696, %1697) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1698) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb416(%1699 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1700 : !llvm.ptr):
      %1701 = "mid.invariant"(%1700) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1702 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb417] : () -> ()
    ^bb418:
      %1703 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1703, %1702) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb419] : () -> ()
    ^bb417:
      %1704 = "llvm.getelementptr"(%1700) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1705 = "mid.checkflag"(%1704) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1706 = "llvm.load"(%1705) : (!hi.bool) -> i1
      "cf.cond_br"(%1706) [^bb418, ^bb418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb419:
      %1707 = "llvm.extractvalue"(%1699) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1708 = "llvm.load"(%1702) : (!llvm.ptr) -> i32
      %1709 = "llvm.getelementptr"(%1707, %1708) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1710 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1711 = "llvm.getelementptr"(%1709, %1710) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1711) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb420(%1712 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1713 : !llvm.ptr):
      %1714 = "mid.invariant"(%1713) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1715 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb421] : () -> ()
    ^bb422:
      %1716 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1716, %1715) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb423] : () -> ()
    ^bb424:
      %1717 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1717, %1715) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb423] : () -> ()
    ^bb421:
      %1718 = "llvm.getelementptr"(%1713) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1719 = "mid.checkflag"(%1718) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1720 = "llvm.load"(%1719) : (!hi.bool) -> i1
      "cf.cond_br"(%1720) [^bb422, ^bb425] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb425:
      %1721 = "llvm.getelementptr"(%1713) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1722 = "mid.checkflag"(%1721) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1723 = "llvm.load"(%1722) : (!hi.bool) -> i1
      "cf.cond_br"(%1723) [^bb426, ^bb424] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb426:
      %1724 = "llvm.getelementptr"(%1713) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1725 = "mid.checkflag"(%1724) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1726 = "llvm.load"(%1725) : (!hi.bool) -> i1
      "cf.cond_br"(%1726) [^bb424, ^bb424] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb423:
      %1727 = "llvm.extractvalue"(%1712) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1728 = "llvm.load"(%1715) : (!llvm.ptr) -> i32
      %1729 = "llvm.getelementptr"(%1727, %1728) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1730 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1731 = "llvm.getelementptr"(%1729, %1730) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1731) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb427(%1732 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1733 : !llvm.ptr):
      %1734 = "mid.invariant"(%1733) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1735 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb428] : () -> ()
    ^bb429:
      %1736 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1736, %1735) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb430] : () -> ()
    ^bb431:
      %1737 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1737, %1735) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb430] : () -> ()
    ^bb428:
      %1738 = "llvm.getelementptr"(%1733) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1739 = "mid.checkflag"(%1738) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1740 = "llvm.load"(%1739) : (!hi.bool) -> i1
      "cf.cond_br"(%1740) [^bb429, ^bb432] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb432:
      %1741 = "llvm.getelementptr"(%1733) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1742 = "mid.checkflag"(%1741) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1743 = "llvm.load"(%1742) : (!hi.bool) -> i1
      "cf.cond_br"(%1743) [^bb433, ^bb431] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb433:
      %1744 = "llvm.getelementptr"(%1733) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1745 = "mid.checkflag"(%1744) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1746 = "llvm.load"(%1745) : (!hi.bool) -> i1
      "cf.cond_br"(%1746) [^bb431, ^bb431] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb430:
      %1747 = "llvm.extractvalue"(%1732) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1748 = "llvm.load"(%1735) : (!llvm.ptr) -> i32
      %1749 = "llvm.getelementptr"(%1747, %1748) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1750 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1751 = "llvm.getelementptr"(%1749, %1750) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1751) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb434(%1752 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1753 : !llvm.ptr):
      %1754 = "mid.invariant"(%1753) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1755 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb435] : () -> ()
    ^bb436:
      %1756 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1756, %1755) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb437] : () -> ()
    ^bb438:
      %1757 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1757, %1755) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb437] : () -> ()
    ^bb435:
      %1758 = "llvm.getelementptr"(%1753) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1759 = "mid.checkflag"(%1758) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1760 = "llvm.load"(%1759) : (!hi.bool) -> i1
      "cf.cond_br"(%1760) [^bb436, ^bb439] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb439:
      %1761 = "llvm.getelementptr"(%1753) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1762 = "mid.checkflag"(%1761) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1763 = "llvm.load"(%1762) : (!hi.bool) -> i1
      "cf.cond_br"(%1763) [^bb440, ^bb438] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb440:
      %1764 = "llvm.getelementptr"(%1753) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1765 = "mid.checkflag"(%1764) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1766 = "llvm.load"(%1765) : (!hi.bool) -> i1
      "cf.cond_br"(%1766) [^bb438, ^bb438] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb437:
      %1767 = "llvm.extractvalue"(%1752) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1768 = "llvm.load"(%1755) : (!llvm.ptr) -> i32
      %1769 = "llvm.getelementptr"(%1767, %1768) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1770 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1771 = "llvm.getelementptr"(%1769, %1770) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1771) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb441(%1772 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1773 : !llvm.ptr):
      %1774 = "mid.invariant"(%1773) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1775 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb442] : () -> ()
    ^bb443:
      %1776 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%1776, %1775) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb444] : () -> ()
    ^bb445:
      %1777 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%1777, %1775) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb444] : () -> ()
    ^bb442:
      %1778 = "llvm.getelementptr"(%1773) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1779 = "mid.checkflag"(%1778) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1780 = "llvm.load"(%1779) : (!hi.bool) -> i1
      "cf.cond_br"(%1780) [^bb443, ^bb446] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb446:
      %1781 = "llvm.getelementptr"(%1773) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1782 = "mid.checkflag"(%1781) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1783 = "llvm.load"(%1782) : (!hi.bool) -> i1
      "cf.cond_br"(%1783) [^bb447, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb447:
      %1784 = "llvm.getelementptr"(%1773) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1785 = "mid.checkflag"(%1784) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1786 = "llvm.load"(%1785) : (!hi.bool) -> i1
      "cf.cond_br"(%1786) [^bb445, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb444:
      %1787 = "llvm.extractvalue"(%1772) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1788 = "llvm.load"(%1775) : (!llvm.ptr) -> i32
      %1789 = "llvm.getelementptr"(%1787, %1788) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1790 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1791 = "llvm.getelementptr"(%1789, %1790) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1791) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ProductCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductCollection_field_ProductCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductCollection_field_ProductCollection_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductCollection_field_ProductCollection_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductCollection_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductCollection_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductCollection_field_first", "getter_name" = "ProductCollection_getter_first", "setter_name" = "ProductCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductCollection_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.U_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductCollection_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.U_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductCollection_field_second", "getter_name" = "ProductCollection_getter_second", "setter_name" = "ProductCollection_setter_second"} : () -> ()
    "mid.func"() ({
    ^bb448(%1792 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1793 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1794 : !llvm.ptr, %1795 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1796 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1797 = "mid.wrap"(%1792) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1798 = "hi.cast"(%1797) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1799 = "mid.wrap"(%1795) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1800 = "hi.cast"(%1799) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1801 = "hi.cast"(%1800) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      "mid.set_field"(%1798, %1801) {"offset" = 3 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> ()
      %1802 = "mid.wrap"(%1796) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1803 = "hi.cast"(%1802) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1804 = "hi.cast"(%1803) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      "mid.set_field"(%1798, %1804) {"offset" = 4 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> ()
    }) {"func_name" = "ProductCollection_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb449(%1805 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1806 : !llvm.ptr):
      %1807 = "mid.invariant"(%1806) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1808 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb450] : () -> ()
    ^bb451:
      %1809 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1809, %1808) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb452] : () -> ()
    ^bb453:
      %1810 = "llvm.getelementptr"(%1806) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1811 = "mid.checkflag"(%1810) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1812 = "llvm.load"(%1811) : (!hi.bool) -> i1
      "cf.cond_br"(%1812) [^bb451, ^bb451] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb450:
      %1813 = "llvm.getelementptr"(%1806) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1814 = "mid.checkflag"(%1813) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1815 = "llvm.load"(%1814) : (!hi.bool) -> i1
      "cf.cond_br"(%1815) [^bb453, ^bb453] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb452:
      %1816 = "llvm.extractvalue"(%1805) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1817 = "llvm.load"(%1808) : (!llvm.ptr) -> i32
      %1818 = "llvm.getelementptr"(%1816, %1817) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1819 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1820 = "llvm.getelementptr"(%1818, %1819) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1820) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb454(%1821 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1822 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1823 : !llvm.ptr):
      %1824 = "mid.wrap"(%1821) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1825 = "hi.cast"(%1824) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1826 = "mid.get_field"(%1825) {"offset" = 3 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1827 = "mid.unwrap"(%1826) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1828 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1829 = "mid.method_call"(%1828, %1827) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1830 = "hi.cast"(%1829) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1831 = "mid.get_field"(%1825) {"offset" = 4 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1832 = "mid.unwrap"(%1831) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1833 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1834 = "mid.method_call"(%1833, %1832) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1835 = "hi.cast"(%1834) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1836 = "hi.arithmetic"(%1830, %1835) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1837 = "hi.cast"(%1836) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%1837) : (si32) -> ()
    }) {"func_name" = "ProductCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb455(%1838 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1839 : !llvm.ptr):
      %1840 = "mid.invariant"(%1839) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1841 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb456] : () -> ()
    ^bb456:
      %1842 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1842, %1841) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb457] : () -> ()
    ^bb457:
      %1843 = "llvm.extractvalue"(%1838) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1844 = "llvm.load"(%1841) : (!llvm.ptr) -> i32
      %1845 = "llvm.getelementptr"(%1843, %1844) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1846 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1847 = "llvm.getelementptr"(%1845, %1846) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1847) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb458(%1848 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1849 : !llvm.ptr):
      %1850 = "mid.invariant"(%1849) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1851 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb459] : () -> ()
    ^bb459:
      %1852 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1852, %1851) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb460] : () -> ()
    ^bb460:
      %1853 = "llvm.extractvalue"(%1848) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1854 = "llvm.load"(%1851) : (!llvm.ptr) -> i32
      %1855 = "llvm.getelementptr"(%1853, %1854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1856 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1857 = "llvm.getelementptr"(%1855, %1856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1857) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb461(%1858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1859 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1860 : !llvm.ptr):
      %1861 = "mid.wrap"(%1858) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1862 = "hi.cast"(%1861) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1863 = "mid.get_field"(%1862) {"offset" = 3 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1864 = "mid.unwrap"(%1863) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1865 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1866 = "mid.method_call"(%1865, %1864) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1867 = "hi.cast"(%1866) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1868 = "mid.get_field"(%1862) {"offset" = 4 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1869 = "mid.unwrap"(%1867) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1870 = "mid.unwrap"(%1868) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1871 = "mid.get_type_field"(%1862) {"offset" = 0 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1872 = "mid.get_type_field"(%1862) {"offset" = 1 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1873 = "mid.get_type_field"(%1862) {"offset" = 0 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1874 = "mid.get_type_field"(%1862) {"offset" = 1 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1875 = "mid.parameterization"(%1873, %1874) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairProductCollection.T_subtype_Any._ProductCollection.U_subtype_Any", ["ProductCollection.T_subtype_Any"], ["ProductCollection.U_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %1876 = "mid.new"(%1871, %1872, %1875) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Productizer", "num_data_fields" = 4 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1877 = "mid.get_field"(%1862) {"offset" = 3 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1878 = "mid.unwrap"(%1877) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1879 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1880 = "mid.method_call"(%1879, %1878) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1881 = "hi.cast"(%1880) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1882 = "mid.get_field"(%1862) {"offset" = 4 : i64, "vtable_bytes" = 992 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1883 = "hi.cast"(%1881) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>
      %1884 = "mid.unwrap"(%1883) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1885 = "hi.cast"(%1882) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>, "from_typ_name" = "Collection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>
      %1886 = "mid.unwrap"(%1885) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Productizer">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1887 = "mid.unwrap"(%1876) : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1888 = "mid.get_type_field"(%1862) {"offset" = 0 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1889 = "mid.parameterization"(%1888) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorProductCollection.T_subtype_Any", ["ProductCollection.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1890 = "mid.get_type_field"(%1862) {"offset" = 1 : i64, "vtable_bytes" = 992 : i32} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.reified_type
      %1891 = "mid.parameterization"(%1890) {"id_hierarchy" = ["Collection", [0 : i32]], "name_hierarchy" = ["CollectionProductCollection.U_subtype_Any", ["ProductCollection.U_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %1892 = "mid.parameterizations_array"(%1889, %1891) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1892, %1887, %1884, %1886) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1893 = "hi.cast"(%1876) {"from_typ" = !hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Productizer", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Productizer", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%1893) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "ProductCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb462(%1894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1895 : !llvm.ptr):
      %1896 = "mid.invariant"(%1895) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1897 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb463] : () -> ()
    ^bb463:
      %1898 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1898, %1897) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb464] : () -> ()
    ^bb464:
      %1899 = "llvm.extractvalue"(%1894) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1900 = "llvm.load"(%1897) : (!llvm.ptr) -> i32
      %1901 = "llvm.getelementptr"(%1899, %1900) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1902 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1903 = "llvm.getelementptr"(%1901, %1902) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1903) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb465(%1904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1905 : !llvm.ptr):
      %1906 = "mid.invariant"(%1905) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1907 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb466] : () -> ()
    ^bb467:
      %1908 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1908, %1907) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb468] : () -> ()
    ^bb466:
      %1909 = "llvm.getelementptr"(%1905) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1910 = "mid.checkflag"(%1909) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1911 = "llvm.load"(%1910) : (!hi.bool) -> i1
      "cf.cond_br"(%1911) [^bb467, ^bb467] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb468:
      %1912 = "llvm.extractvalue"(%1904) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1913 = "llvm.load"(%1907) : (!llvm.ptr) -> i32
      %1914 = "llvm.getelementptr"(%1912, %1913) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1915 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1916 = "llvm.getelementptr"(%1914, %1915) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1916) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb469(%1917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1918 : !llvm.ptr):
      %1919 = "mid.invariant"(%1918) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1920 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb470] : () -> ()
    ^bb471:
      %1921 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1921, %1920) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb472] : () -> ()
    ^bb473:
      %1922 = "llvm.getelementptr"(%1918) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1923 = "mid.checkflag"(%1922) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1924 = "llvm.load"(%1923) : (!hi.bool) -> i1
      "cf.cond_br"(%1924) [^bb471, ^bb471] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb470:
      %1925 = "llvm.getelementptr"(%1918) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1926 = "mid.checkflag"(%1925) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1927 = "llvm.load"(%1926) : (!hi.bool) -> i1
      "cf.cond_br"(%1927) [^bb473, ^bb473] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb472:
      %1928 = "llvm.extractvalue"(%1917) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1929 = "llvm.load"(%1920) : (!llvm.ptr) -> i32
      %1930 = "llvm.getelementptr"(%1928, %1929) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1931 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1932 = "llvm.getelementptr"(%1930, %1931) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1932) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb474(%1933 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1934 : !llvm.ptr):
      %1935 = "mid.invariant"(%1934) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1936 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb475] : () -> ()
    ^bb476:
      %1937 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1937, %1936) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb477] : () -> ()
    ^bb475:
      %1938 = "llvm.getelementptr"(%1934) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1939 = "mid.checkflag"(%1938) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1940 = "llvm.load"(%1939) : (!hi.bool) -> i1
      "cf.cond_br"(%1940) [^bb476, ^bb476] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb477:
      %1941 = "llvm.extractvalue"(%1933) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1942 = "llvm.load"(%1936) : (!llvm.ptr) -> i32
      %1943 = "llvm.getelementptr"(%1941, %1942) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1944 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1945 = "llvm.getelementptr"(%1943, %1944) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1945) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb478(%1946 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1947 : !llvm.ptr):
      %1948 = "mid.invariant"(%1947) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1949 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb479] : () -> ()
    ^bb480:
      %1950 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1950, %1949) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb481] : () -> ()
    ^bb479:
      %1951 = "llvm.getelementptr"(%1947) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1952 = "mid.checkflag"(%1951) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1953 = "llvm.load"(%1952) : (!hi.bool) -> i1
      "cf.cond_br"(%1953) [^bb480, ^bb480] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb481:
      %1954 = "llvm.extractvalue"(%1946) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1955 = "llvm.load"(%1949) : (!llvm.ptr) -> i32
      %1956 = "llvm.getelementptr"(%1954, %1955) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1957 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1958 = "llvm.getelementptr"(%1956, %1957) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1958) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb482(%1959 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1960 : !llvm.ptr):
      %1961 = "mid.invariant"(%1960) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1962 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb483] : () -> ()
    ^bb483:
      %1963 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1963, %1962) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb484] : () -> ()
    ^bb484:
      %1964 = "llvm.extractvalue"(%1959) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1965 = "llvm.load"(%1962) : (!llvm.ptr) -> i32
      %1966 = "llvm.getelementptr"(%1964, %1965) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1967 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1968 = "llvm.getelementptr"(%1966, %1967) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1968) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb485(%1969 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1970 : !llvm.ptr):
      %1971 = "mid.invariant"(%1970) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1972 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb486] : () -> ()
    ^bb487:
      %1973 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1973, %1972) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb488] : () -> ()
    ^bb489:
      %1974 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1974, %1972) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb488] : () -> ()
    ^bb486:
      %1975 = "llvm.getelementptr"(%1970) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1976 = "mid.checkflag"(%1975) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1977 = "llvm.load"(%1976) : (!hi.bool) -> i1
      "cf.cond_br"(%1977) [^bb487, ^bb490] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb490:
      %1978 = "llvm.getelementptr"(%1970) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1979 = "mid.checkflag"(%1978) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1980 = "llvm.load"(%1979) : (!hi.bool) -> i1
      "cf.cond_br"(%1980) [^bb489, ^bb489] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb488:
      %1981 = "llvm.extractvalue"(%1969) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1982 = "llvm.load"(%1972) : (!llvm.ptr) -> i32
      %1983 = "llvm.getelementptr"(%1981, %1982) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1984 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1985 = "llvm.getelementptr"(%1983, %1984) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1985) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb491(%1986 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1987 : !llvm.ptr):
      %1988 = "mid.invariant"(%1987) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1989 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb492] : () -> ()
    ^bb493:
      %1990 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1990, %1989) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb494] : () -> ()
    ^bb492:
      %1991 = "llvm.getelementptr"(%1987) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1992 = "mid.checkflag"(%1991) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1993 = "llvm.load"(%1992) : (!hi.bool) -> i1
      "cf.cond_br"(%1993) [^bb493, ^bb493] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb494:
      %1994 = "llvm.extractvalue"(%1986) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1995 = "llvm.load"(%1989) : (!llvm.ptr) -> i32
      %1996 = "llvm.getelementptr"(%1994, %1995) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1997 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1998 = "llvm.getelementptr"(%1996, %1997) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1998) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb495(%1999 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2000 : !llvm.ptr):
      %2001 = "mid.invariant"(%2000) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2002 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb496] : () -> ()
    ^bb497:
      %2003 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%2003, %2002) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb498] : () -> ()
    ^bb499:
      %2004 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%2004, %2002) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb498] : () -> ()
    ^bb496:
      %2005 = "llvm.getelementptr"(%2000) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2006 = "mid.checkflag"(%2005) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2007 = "llvm.load"(%2006) : (!hi.bool) -> i1
      "cf.cond_br"(%2007) [^bb497, ^bb500] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb500:
      %2008 = "llvm.getelementptr"(%2000) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2009 = "mid.checkflag"(%2008) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2010 = "llvm.load"(%2009) : (!hi.bool) -> i1
      "cf.cond_br"(%2010) [^bb501, ^bb499] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb501:
      %2011 = "llvm.getelementptr"(%2000) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2012 = "mid.checkflag"(%2011) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2013 = "llvm.load"(%2012) : (!hi.bool) -> i1
      "cf.cond_br"(%2013) [^bb499, ^bb499] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb498:
      %2014 = "llvm.extractvalue"(%1999) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2015 = "llvm.load"(%2002) : (!llvm.ptr) -> i32
      %2016 = "llvm.getelementptr"(%2014, %2015) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2017 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2018 = "llvm.getelementptr"(%2016, %2017) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2018) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb502(%2019 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2020 : !llvm.ptr):
      %2021 = "mid.invariant"(%2020) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2022 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb503] : () -> ()
    ^bb504:
      %2023 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%2023, %2022) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb505] : () -> ()
    ^bb506:
      %2024 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%2024, %2022) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb505] : () -> ()
    ^bb503:
      %2025 = "llvm.getelementptr"(%2020) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2026 = "mid.checkflag"(%2025) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2027 = "llvm.load"(%2026) : (!hi.bool) -> i1
      "cf.cond_br"(%2027) [^bb504, ^bb507] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb507:
      %2028 = "llvm.getelementptr"(%2020) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2029 = "mid.checkflag"(%2028) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2030 = "llvm.load"(%2029) : (!hi.bool) -> i1
      "cf.cond_br"(%2030) [^bb508, ^bb506] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb508:
      %2031 = "llvm.getelementptr"(%2020) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2032 = "mid.checkflag"(%2031) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2033 = "llvm.load"(%2032) : (!hi.bool) -> i1
      "cf.cond_br"(%2033) [^bb506, ^bb506] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb505:
      %2034 = "llvm.extractvalue"(%2019) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2035 = "llvm.load"(%2022) : (!llvm.ptr) -> i32
      %2036 = "llvm.getelementptr"(%2034, %2035) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2037 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2038 = "llvm.getelementptr"(%2036, %2037) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2038) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb509(%2039 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2040 : !llvm.ptr):
      %2041 = "mid.invariant"(%2040) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2042 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb510] : () -> ()
    ^bb511:
      %2043 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%2043, %2042) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb512] : () -> ()
    ^bb513:
      %2044 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%2044, %2042) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb512] : () -> ()
    ^bb510:
      %2045 = "llvm.getelementptr"(%2040) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2046 = "mid.checkflag"(%2045) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2047 = "llvm.load"(%2046) : (!hi.bool) -> i1
      "cf.cond_br"(%2047) [^bb511, ^bb514] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb514:
      %2048 = "llvm.getelementptr"(%2040) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2049 = "mid.checkflag"(%2048) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2050 = "llvm.load"(%2049) : (!hi.bool) -> i1
      "cf.cond_br"(%2050) [^bb515, ^bb513] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb515:
      %2051 = "llvm.getelementptr"(%2040) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2052 = "mid.checkflag"(%2051) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2053 = "llvm.load"(%2052) : (!hi.bool) -> i1
      "cf.cond_br"(%2053) [^bb513, ^bb513] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb512:
      %2054 = "llvm.extractvalue"(%2039) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2055 = "llvm.load"(%2042) : (!llvm.ptr) -> i32
      %2056 = "llvm.getelementptr"(%2054, %2055) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2057 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2058 = "llvm.getelementptr"(%2056, %2057) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2058) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb516(%2059 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2060 : !llvm.ptr):
      %2061 = "mid.invariant"(%2060) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2062 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb517] : () -> ()
    ^bb518:
      %2063 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%2063, %2062) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb519] : () -> ()
    ^bb520:
      %2064 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%2064, %2062) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb519] : () -> ()
    ^bb517:
      %2065 = "llvm.getelementptr"(%2060) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2066 = "mid.checkflag"(%2065) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2067 = "llvm.load"(%2066) : (!hi.bool) -> i1
      "cf.cond_br"(%2067) [^bb518, ^bb521] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb521:
      %2068 = "llvm.getelementptr"(%2060) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2069 = "mid.checkflag"(%2068) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2070 = "llvm.load"(%2069) : (!hi.bool) -> i1
      "cf.cond_br"(%2070) [^bb522, ^bb520] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb522:
      %2071 = "llvm.getelementptr"(%2060) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2072 = "mid.checkflag"(%2071) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %2073 = "llvm.load"(%2072) : (!hi.bool) -> i1
      "cf.cond_br"(%2073) [^bb520, ^bb520] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb519:
      %2074 = "llvm.extractvalue"(%2059) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2075 = "llvm.load"(%2062) : (!llvm.ptr) -> i32
      %2076 = "llvm.getelementptr"(%2074, %2075) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<124 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2077 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2078 = "llvm.getelementptr"(%2076, %2077) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2078) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "list"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.typedef"() {"class_name" = "List", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @List, @Collection], "offset_tbl" = [146 : i32, 10 : i32, 0 : i32, 0 : i32, 0 : i32, 121 : i32, 10 : i32, 62 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18363623912344854639 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_List", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_List", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "List_field_List_0"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr):
      %1 = "mid.invariant"(%0) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb1:
      %3 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%3, %2) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %4 = "mid.addr_of"() {"global_name" = @List} : () -> !llvm.ptr
      %5 = "llvm.load"(%2) : (!llvm.ptr) -> i32
      %6 = "llvm.getelementptr"(%4, %5) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %7 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %8 = "llvm.getelementptr"(%6, %7) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%8) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B__Self_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb3(%9 : !llvm.ptr):
      %10 = "mid.invariant"(%9) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %11 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb4] : () -> ()
    ^bb5:
      %12 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%12, %11) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb6] : () -> ()
    ^bb4:
      %13 = "llvm.getelementptr"(%9) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %14 = "mid.checkflag"(%13) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %15 = "llvm.load"(%14) : (!hi.bool) -> i1
      "cf.cond_br"(%15) [^bb5, ^bb5] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb6:
      %16 = "mid.addr_of"() {"global_name" = @List} : () -> !llvm.ptr
      %17 = "llvm.load"(%11) : (!llvm.ptr) -> i32
      %18 = "llvm.getelementptr"(%16, %17) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %19 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %20 = "llvm.getelementptr"(%18, %19) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%20) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B__Self_from_iterable_iterableIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb7(%21 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %22 : !llvm.ptr):
      %23 = "mid.invariant"(%22) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %24 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %25 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%25, %24) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb8:
      %26 = "llvm.getelementptr"(%22) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %27 = "mid.checkflag"(%26) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %28 = "llvm.load"(%27) : (!hi.bool) -> i1
      "cf.cond_br"(%28) [^bb9, ^bb9] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %29 = "llvm.extractvalue"(%21) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %30 = "llvm.load"(%24) : (!llvm.ptr) -> i32
      %31 = "llvm.getelementptr"(%29, %30) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %32 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %33 = "llvm.getelementptr"(%31, %32) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%33) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_append_xT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb11(%34 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %35 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %36 : !llvm.ptr):
      %37 = "mid.wrap"(%34) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %38 = "hi.cast"(%37) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "List", "to_typ_name" = "List"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %39 = "mid.unwrap"(%38) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %40 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %41 = "mid.method_call"(%40, %39) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 136 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %42 = "hi.cast"(%41) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %43 = "hi.cast"(%42) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%43) : (si32) -> ()
    }) {"func_name" = "List_length_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb12(%44 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %45 : !llvm.ptr):
      %46 = "mid.invariant"(%45) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %47 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %48 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%48, %47) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      %49 = "llvm.extractvalue"(%44) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %50 = "llvm.load"(%47) : (!llvm.ptr) -> i32
      %51 = "llvm.getelementptr"(%49, %50) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %52 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %53 = "llvm.getelementptr"(%51, %52) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%53) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_length_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb15(%54 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %55 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %56 : !llvm.ptr):
      %57 = "mid.wrap"(%54) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %58 = "hi.cast"(%57) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "List", "to_typ_name" = "List"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %59 = "mid.unwrap"(%58) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %60 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %61 = "mid.method_call"(%60, %59) {"offset" = 11 : i32, "vptrs" = [], "vtable_size" = 136 : i64, "ret_type" = i1, "ret_type_unq" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.bool
      %62 = "hi.cast"(%61) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      %63 = "mid.unwrap"(%62) : (!hi.bool) -> i1
      "mid.if"(%63) ({
        %64 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %65 = "hi.cast"(%64) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
        "mid.return"(%65) : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %66 = "mid.unwrap"(%58) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %67 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %68 = "mid.method_call"(%67, %66) {"offset" = 12 : i32, "vptrs" = [], "vtable_size" = 136 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "List">]>
      %69 = "hi.cast"(%68) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"ConstantTimeIterator", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "Iterator", "to_typ_name" = "ConstantTimeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"ConstantTimeIterator", [!hi.type_param<"T", !hi.any, "List">]>
      %70 = "mid.refer"(%69) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ConstantTimeIterator", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"ConstantTimeIterator", [!hi.type_param<"T", !hi.any, "List">]>
      "mid.while"() ({
        %71 = "mid.unwrap"(%70) : (!hi.fatptr<"ConstantTimeIterator", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %72 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %73 = "mid.method_call"(%72, %71) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ConstantTimeIterator">, !hi.nil]>
        %74 = "hi.cast"(%73) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ConstantTimeIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ConstantTimeIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
        %75 = "mid.get_type_field"(%58) {"offset" = 0 : i64, "vtable_bytes" = 1088 : i32} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.reified_type
        %76 = "mid.checkflag"(%74) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> si1
        %77 = "mid.unwrap"(%76) : (si1) -> i1
      }, {
        %78 = "hi.cast"(%74) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "List">
        %79 = "hi.cast"(%78) {"from_typ" = !hi.type_param<"T", !hi.any, "List">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "List">) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
        "mid.return"(%79) : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> ()
      }) : () -> ()
    }) {"func_name" = "List_first_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb16(%80 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %81 : !llvm.ptr):
      %82 = "mid.invariant"(%81) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %83 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      %84 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%84, %83) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      %85 = "llvm.extractvalue"(%80) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %86 = "llvm.load"(%83) : (!llvm.ptr) -> i32
      %87 = "llvm.getelementptr"(%85, %86) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %88 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %89 = "llvm.getelementptr"(%87, %88) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%89) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_first_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb19(%90 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %91 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %92 : !llvm.ptr):
      %93 = "mid.wrap"(%90) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %94 = "hi.cast"(%93) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "List", "to_typ_name" = "List"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %95 = "mid.unwrap"(%94) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %96 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %97 = "mid.method_call"(%96, %95) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 136 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %98 = "hi.cast"(%97) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %99 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %100 = "hi.arithmetic"(%98, %99) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %101 = "hi.cast"(%100) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %102 = "mid.unwrap"(%101) : (si32) -> i32
      %103 = "mid.unwrap"(%94) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %104 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %105 = "mid.parameterizations_array"(%104) : (!llvm.ptr) -> !llvm.ptr
      %106 = "mid.method_call"(%105, %103, %102) {"offset" = 8 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 136 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
      %107 = "hi.cast"(%106) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
      %108 = "hi.cast"(%107) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
      "mid.return"(%108) : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> ()
    }) {"func_name" = "List_last_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb20(%109 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %110 : !llvm.ptr):
      %111 = "mid.invariant"(%110) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %112 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb21] : () -> ()
    ^bb21:
      %113 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%113, %112) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb22:
      %114 = "llvm.extractvalue"(%109) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %115 = "llvm.load"(%112) : (!llvm.ptr) -> i32
      %116 = "llvm.getelementptr"(%114, %115) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %117 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %118 = "llvm.getelementptr"(%116, %117) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%118) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_last_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb23(%119 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %120 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %121 : !llvm.ptr, %122 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %123 = "mid.wrap"(%119) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %124 = "hi.cast"(%123) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "List", "to_typ_name" = "List"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %125 = "mid.wrap"(%122) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>
      %126 = "hi.cast"(%125) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>
      %127 = "mid.unwrap"(%126) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %128 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %129 = "mid.method_call"(%128, %127) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %130 = "hi.cast"(%129) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "List">]>
      %131 = "mid.refer"(%130) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "List">]>
      "mid.while"() ({
        %132 = "mid.unwrap"(%131) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %133 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %134 = "mid.method_call"(%133, %132) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %135 = "hi.cast"(%134) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
        %136 = "mid.get_type_field"(%124) {"offset" = 0 : i64, "vtable_bytes" = 1088 : i32} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.reified_type
        %137 = "mid.checkflag"(%135) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> si1
        %138 = "mid.unwrap"(%137) : (si1) -> i1
      }, {
        %139 = "hi.cast"(%135) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "List">
        %140 = "hi.cast"(%139) {"from_typ" = !hi.type_param<"T", !hi.any, "List">, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "List">) -> !hi.type_param<"T", !hi.any, "List">
        %141 = "mid.unwrap"(%140) : (!hi.type_param<"T", !hi.any, "List">) -> !llvm.struct<(!llvm.ptr, i160)>
        %142 = "mid.unwrap"(%124) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %143 = "mid.get_type_field"(%124) {"offset" = 0 : i64, "vtable_bytes" = 1088 : i32} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.reified_type
        %144 = "mid.parameterizations_array"(%143) : (!hi.reified_type) -> !llvm.ptr
        %145 = "mid.method_call"(%144, %142, %141) {"offset" = 3 : i32, "vptrs" = ["any_typ"], "vtable_size" = 136 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
        %146 = "hi.cast"(%145) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "List", "to_typ_name" = "List"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
        %147 = "hi.cast"(%139) {"from_typ" = !hi.type_param<"T", !hi.any, "List">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "List">) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
        "mid.assign"(%135, %147) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> ()
      }) : () -> ()
      %148 = "hi.cast"(%124) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "List", "to_typ_name" = "List"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      "mid.return"(%148) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> ()
    }) {"func_name" = "List_extend_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%149 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %150 : !llvm.ptr):
      %151 = "mid.invariant"(%150) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %152 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb26:
      %153 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%153, %152) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb27] : () -> ()
    ^bb25:
      %154 = "llvm.getelementptr"(%150) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %155 = "mid.checkflag"(%154) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %156 = "llvm.load"(%155) : (!hi.bool) -> i1
      "cf.cond_br"(%156) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %157 = "llvm.extractvalue"(%149) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %158 = "llvm.load"(%152) : (!llvm.ptr) -> i32
      %159 = "llvm.getelementptr"(%157, %158) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %160 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %161 = "llvm.getelementptr"(%159, %160) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%161) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_extend_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb28(%162 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %163 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %164 : !llvm.ptr, %165 : i32):
      %166 = "mid.wrap"(%162) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %167 = "hi.cast"(%166) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "List", "to_typ_name" = "List"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %168 = "mid.wrap"(%165) : (i32) -> si32
      %169 = "hi.cast"(%168) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %170 = "mid.unwrap"(%167) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %171 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %172 = "mid.method_call"(%171, %170) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 136 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %173 = "hi.cast"(%172) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %174 = "hi.comparison"(%169, %173) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %175 = "mid.unwrap"(%174) : (si1) -> i1
      "mid.if"(%175) ({
        %176 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %177 = "hi.cast"(%176) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
        "mid.return"(%177) : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %178 = "mid.unwrap"(%167) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %179 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %180 = "mid.method_call"(%179, %178) {"offset" = 17 : i32, "vptrs" = [], "vtable_size" = 136 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>
      %181 = "hi.cast"(%180) {"from_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>, "to_typ" = !hi.fatptr<"Collection", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>) -> !hi.fatptr<"Collection", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>
      %182 = "mid.unwrap"(%181) : (!hi.fatptr<"Collection", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %183 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %184 = "mid.method_call"(%183, %182) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %185 = "hi.cast"(%184) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>
      %186 = "mid.refer"(%185) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>
      "mid.while"() ({
        %187 = "mid.unwrap"(%186) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %188 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %189 = "mid.method_call"(%188, %187) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %190 = "hi.cast"(%189) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>
        %191 = "mid.checkflag"(%190) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>) -> si1
        %192 = "mid.unwrap"(%191) : (si1) -> i1
      }, {
        %193 = "hi.cast"(%190) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Pair"} : (!hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>) -> !hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>
        %194 = "mid.unwrap"(%193) : (!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %195 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %196 = "mid.method_call"(%195, %194) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 14 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"T", !hi.any, "Pair">
        %197 = "hi.cast"(%196) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> si32
        %198 = "hi.comparison"(%197, %169) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %199 = "mid.unwrap"(%198) : (si1) -> i1
        "mid.if"(%199) ({
          %200 = "mid.unwrap"(%193) : (!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %201 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %202 = "mid.method_call"(%201, %200) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 14 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"U", !hi.any, "Pair">
          %203 = "hi.cast"(%202) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "List">
          %204 = "hi.cast"(%203) {"from_typ" = !hi.type_param<"T", !hi.any, "List">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "List">) -> !hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>
          "mid.return"(%204) : (!hi.union<[!hi.type_param<"T", !hi.any, "List">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %205 = "hi.cast"(%193) {"from_typ" = !hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>) -> !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>
        "mid.assign"(%190, %205) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>) -> ()
      }) : () -> ()
    }) {"func_name" = "List_get_indexi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb29(%206 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %207 : !llvm.ptr):
      %208 = "mid.invariant"(%207) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %209 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb30] : () -> ()
    ^bb31:
      %210 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%210, %209) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb32] : () -> ()
    ^bb30:
      %211 = "llvm.getelementptr"(%207) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %212 = "mid.checkflag"(%211) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %213 = "llvm.load"(%212) : (!hi.bool) -> i1
      "cf.cond_br"(%213) [^bb31, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %214 = "llvm.extractvalue"(%206) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %215 = "llvm.load"(%209) : (!llvm.ptr) -> i32
      %216 = "llvm.getelementptr"(%214, %215) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %217 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %218 = "llvm.getelementptr"(%216, %217) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%218) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_get_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb33(%219 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %220 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %221 : !llvm.ptr, %222 : !llvm.struct<(!llvm.ptr, i160)>, %223 : !llvm.struct<(!llvm.ptr)>):
      %224 = "mid.wrap"(%219) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %225 = "hi.cast"(%224) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "List", "to_typ_name" = "List"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %226 = "mid.wrap"(%222) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "List">
      %227 = "hi.cast"(%226) {"from_typ" = !hi.type_param<"T", !hi.any, "List">, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "List">) -> !hi.type_param<"T", !hi.any, "List">
      %228 = "mid.wrap"(%223) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "List">, !hi.type_param<"T", !hi.any, "List">], !hi.any, !hi.bool>
      %229 = "hi.cast"(%228) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "List">, !hi.type_param<"T", !hi.any, "List">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "List">, !hi.type_param<"T", !hi.any, "List">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "List">, !hi.type_param<"T", !hi.any, "List">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "List">, !hi.type_param<"T", !hi.any, "List">], !hi.any, !hi.bool>
      %230 = "mid.unwrap"(%225) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %231 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %232 = "mid.method_call"(%231, %230) {"offset" = 11 : i32, "vptrs" = [], "vtable_size" = 136 : i64, "ret_type" = i1, "ret_type_unq" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.bool
      %233 = "hi.cast"(%232) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      %234 = "mid.unwrap"(%233) : (!hi.bool) -> i1
      "mid.if"(%234) ({
        %235 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %236 = "hi.cast"(%235) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[si32, !hi.nil]>
        "mid.return"(%236) : (!hi.union<[si32, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %237 = "mid.unwrap"(%225) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %238 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %239 = "mid.method_call"(%238, %237) {"offset" = 17 : i32, "vptrs" = [], "vtable_size" = 136 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>
      %240 = "hi.cast"(%239) {"from_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>, "to_typ" = !hi.fatptr<"Collection", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>) -> !hi.fatptr<"Collection", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>
      %241 = "mid.unwrap"(%240) : (!hi.fatptr<"Collection", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %242 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %243 = "mid.method_call"(%242, %241) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %244 = "hi.cast"(%243) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>
      %245 = "mid.refer"(%244) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>
      "mid.while"() ({
        %246 = "mid.unwrap"(%245) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %247 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %248 = "mid.method_call"(%247, %246) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %249 = "hi.cast"(%248) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>
        %250 = "mid.checkflag"(%249) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>) -> si1
        %251 = "mid.unwrap"(%250) : (si1) -> i1
      }, {
        %252 = "hi.cast"(%249) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Pair"} : (!hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>) -> !hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>
        %253 = "mid.unwrap"(%252) : (!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %254 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %255 = "mid.method_call"(%254, %253) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 14 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"U", !hi.any, "Pair">
        %256 = "hi.cast"(%255) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "List">
        %257 = "hi.cast"(%256) {"from_typ" = !hi.type_param<"T", !hi.any, "List">, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "List">) -> !hi.type_param<"T", !hi.any, "List">
        %258 = "mid.unwrap"(%257) : (!hi.type_param<"T", !hi.any, "List">) -> !llvm.struct<(!llvm.ptr, i160)>
        %259 = "hi.cast"(%227) {"from_typ" = !hi.type_param<"T", !hi.any, "List">, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "List">) -> !hi.type_param<"T", !hi.any, "List">
        %260 = "mid.unwrap"(%259) : (!hi.type_param<"T", !hi.any, "List">) -> !llvm.struct<(!llvm.ptr, i160)>
        %261 = "mid.unwrap"(%229) : (!hi.function<[!hi.type_param<"T", !hi.any, "List">, !hi.type_param<"T", !hi.any, "List">], !hi.any, !hi.bool>) -> !llvm.ptr
        %262 = "mid.fptr_call"(%261, %258, %260) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %263 = "mid.unwrap"(%262) : (!hi.bool) -> i1
        "mid.if"(%263) ({
          %264 = "mid.unwrap"(%252) : (!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %265 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %266 = "mid.method_call"(%265, %264) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 14 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"T", !hi.any, "Pair">
          %267 = "hi.cast"(%266) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> si32
          %268 = "hi.cast"(%267) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
          "mid.return"(%268) : (!hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %269 = "hi.cast"(%252) {"from_typ" = !hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>) -> !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>
        "mid.assign"(%249, %269) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>, !hi.union<[!hi.fatptr<"Pair", [si32, !hi.type_param<"T", !hi.any, "List">]>, !hi.nil]>) -> ()
      }) : () -> ()
      %270 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %271 = "hi.cast"(%270) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[si32, !hi.nil]>
      "mid.return"(%271) : (!hi.union<[si32, !hi.nil]>) -> ()
    }) {"func_name" = "List_index_of_targetT_eqFunctionT._T_to_Bool", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb34(%272 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %273 : !llvm.ptr):
      %274 = "mid.invariant"(%273) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %275 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb35] : () -> ()
    ^bb36:
      %276 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%276, %275) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb37] : () -> ()
    ^bb38:
      %277 = "llvm.getelementptr"(%273) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %278 = "mid.checkflag"(%277) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %279 = "llvm.load"(%278) : (!hi.bool) -> i1
      "cf.cond_br"(%279) [^bb36, ^bb36] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb35:
      %280 = "llvm.getelementptr"(%273) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %281 = "mid.checkflag"(%280) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %282 = "llvm.load"(%281) : (!hi.bool) -> i1
      "cf.cond_br"(%282) [^bb38, ^bb38] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %283 = "llvm.extractvalue"(%272) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %284 = "llvm.load"(%275) : (!llvm.ptr) -> i32
      %285 = "llvm.getelementptr"(%283, %284) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %286 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %287 = "llvm.getelementptr"(%285, %286) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%287) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_index_of_targetT_eqFunctionT._T_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_size_", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb39(%288 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %289 : !llvm.ptr):
      %290 = "mid.invariant"(%289) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %291 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb40] : () -> ()
    ^bb40:
      %292 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%292, %291) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb41] : () -> ()
    ^bb41:
      %293 = "llvm.extractvalue"(%288) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %294 = "llvm.load"(%291) : (!llvm.ptr) -> i32
      %295 = "llvm.getelementptr"(%293, %294) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %296 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %297 = "llvm.getelementptr"(%295, %296) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%297) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_is_empty_", "function_type" = !llvm.func<i1 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb42(%298 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %299 : !llvm.ptr):
      %300 = "mid.invariant"(%299) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %301 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      %302 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%302, %301) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb44] : () -> ()
    ^bb44:
      %303 = "llvm.extractvalue"(%298) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %304 = "llvm.load"(%301) : (!llvm.ptr) -> i32
      %305 = "llvm.getelementptr"(%303, %304) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %306 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %307 = "llvm.getelementptr"(%305, %306) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%307) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb45(%308 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %309 : !llvm.ptr):
      %310 = "mid.invariant"(%309) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %311 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb46] : () -> ()
    ^bb46:
      %312 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%312, %311) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb47:
      %313 = "llvm.extractvalue"(%308) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %314 = "llvm.load"(%311) : (!llvm.ptr) -> i32
      %315 = "llvm.getelementptr"(%313, %314) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %316 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %317 = "llvm.getelementptr"(%315, %316) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%317) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb48(%318 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %319 : !llvm.ptr):
      %320 = "mid.invariant"(%319) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %321 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb49] : () -> ()
    ^bb50:
      %322 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%322, %321) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb51] : () -> ()
    ^bb49:
      %323 = "llvm.getelementptr"(%319) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %324 = "mid.checkflag"(%323) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %325 = "llvm.load"(%324) : (!hi.bool) -> i1
      "cf.cond_br"(%325) [^bb50, ^bb50] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb51:
      %326 = "llvm.extractvalue"(%318) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %327 = "llvm.load"(%321) : (!llvm.ptr) -> i32
      %328 = "llvm.getelementptr"(%326, %327) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %329 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %330 = "llvm.getelementptr"(%328, %329) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%330) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb52(%331 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %332 : !llvm.ptr):
      %333 = "mid.invariant"(%332) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %334 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb53] : () -> ()
    ^bb54:
      %335 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%335, %334) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb55] : () -> ()
    ^bb56:
      %336 = "llvm.getelementptr"(%332) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %337 = "mid.checkflag"(%336) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %338 = "llvm.load"(%337) : (!hi.bool) -> i1
      "cf.cond_br"(%338) [^bb54, ^bb54] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %339 = "llvm.getelementptr"(%332) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %340 = "mid.checkflag"(%339) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %341 = "llvm.load"(%340) : (!hi.bool) -> i1
      "cf.cond_br"(%341) [^bb56, ^bb56] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb55:
      %342 = "llvm.extractvalue"(%331) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %343 = "llvm.load"(%334) : (!llvm.ptr) -> i32
      %344 = "llvm.getelementptr"(%342, %343) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %345 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %346 = "llvm.getelementptr"(%344, %345) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%346) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb57(%347 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %348 : !llvm.ptr):
      %349 = "mid.invariant"(%348) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %350 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb58] : () -> ()
    ^bb59:
      %351 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%351, %350) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb60] : () -> ()
    ^bb58:
      %352 = "llvm.getelementptr"(%348) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %353 = "mid.checkflag"(%352) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %354 = "llvm.load"(%353) : (!hi.bool) -> i1
      "cf.cond_br"(%354) [^bb59, ^bb59] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb60:
      %355 = "llvm.extractvalue"(%347) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %356 = "llvm.load"(%350) : (!llvm.ptr) -> i32
      %357 = "llvm.getelementptr"(%355, %356) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %358 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %359 = "llvm.getelementptr"(%357, %358) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%359) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb61(%360 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %361 : !llvm.ptr):
      %362 = "mid.invariant"(%361) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %363 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb62] : () -> ()
    ^bb63:
      %364 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%364, %363) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb64] : () -> ()
    ^bb62:
      %365 = "llvm.getelementptr"(%361) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %366 = "mid.checkflag"(%365) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %367 = "llvm.load"(%366) : (!hi.bool) -> i1
      "cf.cond_br"(%367) [^bb63, ^bb63] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb64:
      %368 = "llvm.extractvalue"(%360) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %369 = "llvm.load"(%363) : (!llvm.ptr) -> i32
      %370 = "llvm.getelementptr"(%368, %369) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %371 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %372 = "llvm.getelementptr"(%370, %371) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%372) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb65(%373 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %374 : !llvm.ptr):
      %375 = "mid.invariant"(%374) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %376 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb66] : () -> ()
    ^bb66:
      %377 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%377, %376) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb67] : () -> ()
    ^bb67:
      %378 = "llvm.extractvalue"(%373) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %379 = "llvm.load"(%376) : (!llvm.ptr) -> i32
      %380 = "llvm.getelementptr"(%378, %379) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %381 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %382 = "llvm.getelementptr"(%380, %381) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%382) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb68(%383 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %384 : !llvm.ptr):
      %385 = "mid.invariant"(%384) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %386 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb69] : () -> ()
    ^bb70:
      %387 = "llvm.mlir.constant"() <{"value" = 124 : i32}> : () -> i32
      "llvm.store"(%387, %386) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb71] : () -> ()
    ^bb72:
      %388 = "llvm.mlir.constant"() <{"value" = 125 : i32}> : () -> i32
      "llvm.store"(%388, %386) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb71] : () -> ()
    ^bb69:
      %389 = "llvm.getelementptr"(%384) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %390 = "mid.checkflag"(%389) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %391 = "llvm.load"(%390) : (!hi.bool) -> i1
      "cf.cond_br"(%391) [^bb70, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb73:
      %392 = "llvm.getelementptr"(%384) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %393 = "mid.checkflag"(%392) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %394 = "llvm.load"(%393) : (!hi.bool) -> i1
      "cf.cond_br"(%394) [^bb72, ^bb72] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb71:
      %395 = "llvm.extractvalue"(%383) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %396 = "llvm.load"(%386) : (!llvm.ptr) -> i32
      %397 = "llvm.getelementptr"(%395, %396) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %398 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %399 = "llvm.getelementptr"(%397, %398) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%399) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb74(%400 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %401 : !llvm.ptr):
      %402 = "mid.invariant"(%401) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %403 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb75] : () -> ()
    ^bb76:
      %404 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%404, %403) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb77] : () -> ()
    ^bb75:
      %405 = "llvm.getelementptr"(%401) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %406 = "mid.checkflag"(%405) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %407 = "llvm.load"(%406) : (!hi.bool) -> i1
      "cf.cond_br"(%407) [^bb76, ^bb76] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb77:
      %408 = "llvm.extractvalue"(%400) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %409 = "llvm.load"(%403) : (!llvm.ptr) -> i32
      %410 = "llvm.getelementptr"(%408, %409) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %411 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %412 = "llvm.getelementptr"(%410, %411) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%412) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb78(%413 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %414 : !llvm.ptr):
      %415 = "mid.invariant"(%414) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %416 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb79] : () -> ()
    ^bb80:
      %417 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%417, %416) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb81] : () -> ()
    ^bb82:
      %418 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%418, %416) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb81] : () -> ()
    ^bb79:
      %419 = "llvm.getelementptr"(%414) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %420 = "mid.checkflag"(%419) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %421 = "llvm.load"(%420) : (!hi.bool) -> i1
      "cf.cond_br"(%421) [^bb80, ^bb83] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %422 = "llvm.getelementptr"(%414) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %423 = "mid.checkflag"(%422) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %424 = "llvm.load"(%423) : (!hi.bool) -> i1
      "cf.cond_br"(%424) [^bb84, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb84:
      %425 = "llvm.getelementptr"(%414) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %426 = "mid.checkflag"(%425) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %427 = "llvm.load"(%426) : (!hi.bool) -> i1
      "cf.cond_br"(%427) [^bb82, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb81:
      %428 = "llvm.extractvalue"(%413) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %429 = "llvm.load"(%416) : (!llvm.ptr) -> i32
      %430 = "llvm.getelementptr"(%428, %429) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %431 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %432 = "llvm.getelementptr"(%430, %431) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%432) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb85(%433 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %434 : !llvm.ptr):
      %435 = "mid.invariant"(%434) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %436 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb86] : () -> ()
    ^bb87:
      %437 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%437, %436) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb88] : () -> ()
    ^bb89:
      %438 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%438, %436) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb88] : () -> ()
    ^bb86:
      %439 = "llvm.getelementptr"(%434) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %440 = "mid.checkflag"(%439) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %441 = "llvm.load"(%440) : (!hi.bool) -> i1
      "cf.cond_br"(%441) [^bb87, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %442 = "llvm.getelementptr"(%434) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %443 = "mid.checkflag"(%442) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %444 = "llvm.load"(%443) : (!hi.bool) -> i1
      "cf.cond_br"(%444) [^bb91, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb91:
      %445 = "llvm.getelementptr"(%434) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %446 = "mid.checkflag"(%445) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %447 = "llvm.load"(%446) : (!hi.bool) -> i1
      "cf.cond_br"(%447) [^bb89, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb88:
      %448 = "llvm.extractvalue"(%433) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %449 = "llvm.load"(%436) : (!llvm.ptr) -> i32
      %450 = "llvm.getelementptr"(%448, %449) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %451 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %452 = "llvm.getelementptr"(%450, %451) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%452) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb92(%453 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %454 : !llvm.ptr):
      %455 = "mid.invariant"(%454) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %456 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb93] : () -> ()
    ^bb94:
      %457 = "llvm.mlir.constant"() <{"value" = 132 : i32}> : () -> i32
      "llvm.store"(%457, %456) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb95] : () -> ()
    ^bb96:
      %458 = "llvm.mlir.constant"() <{"value" = 131 : i32}> : () -> i32
      "llvm.store"(%458, %456) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb95] : () -> ()
    ^bb93:
      %459 = "llvm.getelementptr"(%454) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %460 = "mid.checkflag"(%459) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %461 = "llvm.load"(%460) : (!hi.bool) -> i1
      "cf.cond_br"(%461) [^bb94, ^bb97] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb97:
      %462 = "llvm.getelementptr"(%454) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %463 = "mid.checkflag"(%462) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %464 = "llvm.load"(%463) : (!hi.bool) -> i1
      "cf.cond_br"(%464) [^bb98, ^bb96] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb98:
      %465 = "llvm.getelementptr"(%454) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %466 = "mid.checkflag"(%465) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %467 = "llvm.load"(%466) : (!hi.bool) -> i1
      "cf.cond_br"(%467) [^bb96, ^bb96] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb95:
      %468 = "llvm.extractvalue"(%453) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %469 = "llvm.load"(%456) : (!llvm.ptr) -> i32
      %470 = "llvm.getelementptr"(%468, %469) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %471 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %472 = "llvm.getelementptr"(%470, %471) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%472) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb99(%473 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %474 : !llvm.ptr):
      %475 = "mid.invariant"(%474) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %476 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb100] : () -> ()
    ^bb101:
      %477 = "llvm.mlir.constant"() <{"value" = 133 : i32}> : () -> i32
      "llvm.store"(%477, %476) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb102] : () -> ()
    ^bb103:
      %478 = "llvm.mlir.constant"() <{"value" = 134 : i32}> : () -> i32
      "llvm.store"(%478, %476) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb102] : () -> ()
    ^bb100:
      %479 = "llvm.getelementptr"(%474) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %480 = "mid.checkflag"(%479) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %481 = "llvm.load"(%480) : (!hi.bool) -> i1
      "cf.cond_br"(%481) [^bb101, ^bb104] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb104:
      %482 = "llvm.getelementptr"(%474) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %483 = "mid.checkflag"(%482) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %484 = "llvm.load"(%483) : (!hi.bool) -> i1
      "cf.cond_br"(%484) [^bb105, ^bb103] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb105:
      %485 = "llvm.getelementptr"(%474) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %486 = "mid.checkflag"(%485) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %487 = "llvm.load"(%486) : (!hi.bool) -> i1
      "cf.cond_br"(%487) [^bb103, ^bb103] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb102:
      %488 = "llvm.extractvalue"(%473) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %489 = "llvm.load"(%476) : (!llvm.ptr) -> i32
      %490 = "llvm.getelementptr"(%488, %489) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<136 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %491 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %492 = "llvm.getelementptr"(%490, %491) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%492) : (!llvm.ptr) -> ()
    }) {"func_name" = "List_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "indexable"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.typedef"() {"class_name" = "Indexable", "methods" = [], "hash_tbl" = [@Object, @Indexable, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [16 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8246772220324864030 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>, "data_size_fn" = "_data_size_Indexable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "IndexableCollection", "methods" = [], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @IndexableCollection, @Indexable, @Collection, @Object, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 54 : i32, 60 : i32, 60 : i32, 0 : i32, 119 : i32], "prime" = 4611686018427388429 : i64, "hash_id" = 18139308192391689699 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>, "data_size_fn" = "_data_size_IndexableCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Indexable", "types" = [!llvm.ptr, !llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Indexable_field_Indexable_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Indexable_field_Indexable_1"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb2:
      %4 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb1:
      %5 = "llvm.getelementptr"(%1) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %6 = "mid.checkflag"(%5) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %7 = "llvm.load"(%6) : (!hi.bool) -> i1
      "cf.cond_br"(%7) [^bb2, ^bb2] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb3:
      %8 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %9 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %10 = "llvm.getelementptr"(%8, %9) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %11 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%12) : (!llvm.ptr) -> ()
    }) {"func_name" = "Indexable_B__index_indexI", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb4(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb5] : () -> ()
    ^bb6:
      %17 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb7] : () -> ()
    ^bb8:
      %18 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %19 = "mid.checkflag"(%18) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %20 = "llvm.load"(%19) : (!hi.bool) -> i1
      "cf.cond_br"(%20) [^bb6, ^bb6] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb5:
      %21 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %22 = "mid.checkflag"(%21) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %23 = "llvm.load"(%22) : (!hi.bool) -> i1
      "cf.cond_br"(%23) [^bb8, ^bb8] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb7:
      %24 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %25 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %26 = "llvm.getelementptr"(%24, %25) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %27 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %28 = "llvm.getelementptr"(%26, %27) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%28) : (!llvm.ptr) -> ()
    }) {"func_name" = "Indexable_B__set_index_indexI_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_IndexableCollection", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "IndexableCollection_field_IndexableCollection_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "IndexableCollection_field_IndexableCollection_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "IndexableCollection_field_IndexableCollection_2"} : () -> ()
    "mid.func"() ({
    ^bb9(%29 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %30 : !llvm.ptr):
      %31 = "mid.invariant"(%30) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %32 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb10:
      %33 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%33, %32) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb11] : () -> ()
    ^bb11:
      %34 = "llvm.extractvalue"(%29) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %35 = "llvm.load"(%32) : (!llvm.ptr) -> i32
      %36 = "llvm.getelementptr"(%34, %35) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %37 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%38) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_indices_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb12(%39 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %40 : !llvm.ptr):
      %41 = "mid.invariant"(%40) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %42 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %43 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%43, %42) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      %44 = "llvm.extractvalue"(%39) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %45 = "llvm.load"(%42) : (!llvm.ptr) -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %47 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%48) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_values_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb15(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %53 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb16:
      %54 = "llvm.getelementptr"(%50) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %55 = "mid.checkflag"(%54) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %56 = "llvm.load"(%55) : (!hi.bool) -> i1
      "cf.cond_br"(%56) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %57 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %58 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %59 = "llvm.getelementptr"(%57, %58) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %60 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %61 = "llvm.getelementptr"(%59, %60) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%61) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B__index_indexI", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb19(%62 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %63 : !llvm.ptr):
      %64 = "mid.invariant"(%63) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %65 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb20] : () -> ()
    ^bb21:
      %66 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%66, %65) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %67 = "llvm.getelementptr"(%63) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %68 = "mid.checkflag"(%67) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %69 = "llvm.load"(%68) : (!hi.bool) -> i1
      "cf.cond_br"(%69) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb20:
      %70 = "llvm.getelementptr"(%63) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %71 = "mid.checkflag"(%70) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %72 = "llvm.load"(%71) : (!hi.bool) -> i1
      "cf.cond_br"(%72) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %73 = "llvm.extractvalue"(%62) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %74 = "llvm.load"(%65) : (!llvm.ptr) -> i32
      %75 = "llvm.getelementptr"(%73, %74) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %76 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %77 = "llvm.getelementptr"(%75, %76) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%77) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B__set_index_indexI_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_size_", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb24(%78 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %79 : !llvm.ptr):
      %80 = "mid.invariant"(%79) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %81 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb25:
      %82 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%82, %81) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      %83 = "llvm.extractvalue"(%78) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %84 = "llvm.load"(%81) : (!llvm.ptr) -> i32
      %85 = "llvm.getelementptr"(%83, %84) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %86 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %87 = "llvm.getelementptr"(%85, %86) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%87) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_is_empty_", "function_type" = !llvm.func<i1 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb27(%88 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %89 : !llvm.ptr):
      %90 = "mid.invariant"(%89) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %91 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb28] : () -> ()
    ^bb28:
      %92 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%92, %91) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      %93 = "llvm.extractvalue"(%88) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %94 = "llvm.load"(%91) : (!llvm.ptr) -> i32
      %95 = "llvm.getelementptr"(%93, %94) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %96 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %97 = "llvm.getelementptr"(%95, %96) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%97) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_iterator_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb30(%98 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %99 : !llvm.ptr):
      %100 = "mid.invariant"(%99) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %101 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb31] : () -> ()
    ^bb31:
      %102 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%102, %101) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb32] : () -> ()
    ^bb32:
      %103 = "llvm.extractvalue"(%98) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %104 = "llvm.load"(%101) : (!llvm.ptr) -> i32
      %105 = "llvm.getelementptr"(%103, %104) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %106 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %107 = "llvm.getelementptr"(%105, %106) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%107) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb33(%108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %109 : !llvm.ptr):
      %110 = "mid.invariant"(%109) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %111 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb34] : () -> ()
    ^bb35:
      %112 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%112, %111) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb36] : () -> ()
    ^bb34:
      %113 = "llvm.getelementptr"(%109) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %114 = "mid.checkflag"(%113) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %115 = "llvm.load"(%114) : (!hi.bool) -> i1
      "cf.cond_br"(%115) [^bb35, ^bb35] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb36:
      %116 = "llvm.extractvalue"(%108) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %117 = "llvm.load"(%111) : (!llvm.ptr) -> i32
      %118 = "llvm.getelementptr"(%116, %117) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %119 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %120 = "llvm.getelementptr"(%118, %119) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%120) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb37(%121 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %122 : !llvm.ptr):
      %123 = "mid.invariant"(%122) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %124 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb39:
      %125 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%125, %124) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb40] : () -> ()
    ^bb41:
      %126 = "llvm.getelementptr"(%122) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %127 = "mid.checkflag"(%126) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %128 = "llvm.load"(%127) : (!hi.bool) -> i1
      "cf.cond_br"(%128) [^bb39, ^bb39] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb38:
      %129 = "llvm.getelementptr"(%122) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %130 = "mid.checkflag"(%129) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %131 = "llvm.load"(%130) : (!hi.bool) -> i1
      "cf.cond_br"(%131) [^bb41, ^bb41] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb40:
      %132 = "llvm.extractvalue"(%121) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %133 = "llvm.load"(%124) : (!llvm.ptr) -> i32
      %134 = "llvm.getelementptr"(%132, %133) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %135 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %136 = "llvm.getelementptr"(%134, %135) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%136) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb42(%137 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %138 : !llvm.ptr):
      %139 = "mid.invariant"(%138) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %140 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb43] : () -> ()
    ^bb44:
      %141 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%141, %140) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb45] : () -> ()
    ^bb43:
      %142 = "llvm.getelementptr"(%138) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %143 = "mid.checkflag"(%142) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %144 = "llvm.load"(%143) : (!hi.bool) -> i1
      "cf.cond_br"(%144) [^bb44, ^bb44] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb45:
      %145 = "llvm.extractvalue"(%137) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %146 = "llvm.load"(%140) : (!llvm.ptr) -> i32
      %147 = "llvm.getelementptr"(%145, %146) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %148 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %149 = "llvm.getelementptr"(%147, %148) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%149) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb46(%150 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %151 : !llvm.ptr):
      %152 = "mid.invariant"(%151) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %153 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb47] : () -> ()
    ^bb48:
      %154 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%154, %153) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb49] : () -> ()
    ^bb47:
      %155 = "llvm.getelementptr"(%151) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %156 = "mid.checkflag"(%155) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %157 = "llvm.load"(%156) : (!hi.bool) -> i1
      "cf.cond_br"(%157) [^bb48, ^bb48] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb49:
      %158 = "llvm.extractvalue"(%150) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %159 = "llvm.load"(%153) : (!llvm.ptr) -> i32
      %160 = "llvm.getelementptr"(%158, %159) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %161 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %162 = "llvm.getelementptr"(%160, %161) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%162) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb50(%163 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %164 : !llvm.ptr):
      %165 = "mid.invariant"(%164) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %166 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb51] : () -> ()
    ^bb51:
      %167 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%167, %166) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb52] : () -> ()
    ^bb52:
      %168 = "llvm.extractvalue"(%163) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %169 = "llvm.load"(%166) : (!llvm.ptr) -> i32
      %170 = "llvm.getelementptr"(%168, %169) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %171 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %172 = "llvm.getelementptr"(%170, %171) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%172) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb53(%173 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %174 : !llvm.ptr):
      %175 = "mid.invariant"(%174) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %176 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb54] : () -> ()
    ^bb55:
      %177 = "llvm.mlir.constant"() <{"value" = 336 : i32}> : () -> i32
      "llvm.store"(%177, %176) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb56] : () -> ()
    ^bb57:
      %178 = "llvm.mlir.constant"() <{"value" = 337 : i32}> : () -> i32
      "llvm.store"(%178, %176) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb56] : () -> ()
    ^bb54:
      %179 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %180 = "mid.checkflag"(%179) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %181 = "llvm.load"(%180) : (!hi.bool) -> i1
      "cf.cond_br"(%181) [^bb55, ^bb58] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb58:
      %182 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %183 = "mid.checkflag"(%182) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %184 = "llvm.load"(%183) : (!hi.bool) -> i1
      "cf.cond_br"(%184) [^bb57, ^bb57] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb56:
      %185 = "llvm.extractvalue"(%173) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %186 = "llvm.load"(%176) : (!llvm.ptr) -> i32
      %187 = "llvm.getelementptr"(%185, %186) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %188 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %189 = "llvm.getelementptr"(%187, %188) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%189) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb59(%190 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %191 : !llvm.ptr):
      %192 = "mid.invariant"(%191) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %193 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb60] : () -> ()
    ^bb61:
      %194 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%194, %193) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb62] : () -> ()
    ^bb60:
      %195 = "llvm.getelementptr"(%191) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %196 = "mid.checkflag"(%195) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %197 = "llvm.load"(%196) : (!hi.bool) -> i1
      "cf.cond_br"(%197) [^bb61, ^bb61] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb62:
      %198 = "llvm.extractvalue"(%190) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %199 = "llvm.load"(%193) : (!llvm.ptr) -> i32
      %200 = "llvm.getelementptr"(%198, %199) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %201 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %202 = "llvm.getelementptr"(%200, %201) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%202) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb63(%203 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %204 : !llvm.ptr):
      %205 = "mid.invariant"(%204) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %206 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb64] : () -> ()
    ^bb65:
      %207 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%207, %206) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb66] : () -> ()
    ^bb67:
      %208 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%208, %206) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb66] : () -> ()
    ^bb64:
      %209 = "llvm.getelementptr"(%204) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %210 = "mid.checkflag"(%209) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %211 = "llvm.load"(%210) : (!hi.bool) -> i1
      "cf.cond_br"(%211) [^bb65, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %212 = "llvm.getelementptr"(%204) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %213 = "mid.checkflag"(%212) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %214 = "llvm.load"(%213) : (!hi.bool) -> i1
      "cf.cond_br"(%214) [^bb69, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %215 = "llvm.getelementptr"(%204) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %216 = "mid.checkflag"(%215) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %217 = "llvm.load"(%216) : (!hi.bool) -> i1
      "cf.cond_br"(%217) [^bb67, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb66:
      %218 = "llvm.extractvalue"(%203) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %219 = "llvm.load"(%206) : (!llvm.ptr) -> i32
      %220 = "llvm.getelementptr"(%218, %219) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %221 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %222 = "llvm.getelementptr"(%220, %221) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%222) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb70(%223 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %224 : !llvm.ptr):
      %225 = "mid.invariant"(%224) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %226 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb71] : () -> ()
    ^bb72:
      %227 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%227, %226) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb73] : () -> ()
    ^bb74:
      %228 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%228, %226) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb73] : () -> ()
    ^bb71:
      %229 = "llvm.getelementptr"(%224) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %230 = "mid.checkflag"(%229) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %231 = "llvm.load"(%230) : (!hi.bool) -> i1
      "cf.cond_br"(%231) [^bb72, ^bb75] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb75:
      %232 = "llvm.getelementptr"(%224) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %233 = "mid.checkflag"(%232) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %234 = "llvm.load"(%233) : (!hi.bool) -> i1
      "cf.cond_br"(%234) [^bb76, ^bb74] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb76:
      %235 = "llvm.getelementptr"(%224) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %236 = "mid.checkflag"(%235) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %237 = "llvm.load"(%236) : (!hi.bool) -> i1
      "cf.cond_br"(%237) [^bb74, ^bb74] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb73:
      %238 = "llvm.extractvalue"(%223) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %239 = "llvm.load"(%226) : (!llvm.ptr) -> i32
      %240 = "llvm.getelementptr"(%238, %239) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %241 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %242 = "llvm.getelementptr"(%240, %241) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%242) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb77(%243 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %244 : !llvm.ptr):
      %245 = "mid.invariant"(%244) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %246 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb78] : () -> ()
    ^bb79:
      %247 = "llvm.mlir.constant"() <{"value" = 344 : i32}> : () -> i32
      "llvm.store"(%247, %246) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb80] : () -> ()
    ^bb81:
      %248 = "llvm.mlir.constant"() <{"value" = 343 : i32}> : () -> i32
      "llvm.store"(%248, %246) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb80] : () -> ()
    ^bb78:
      %249 = "llvm.getelementptr"(%244) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %250 = "mid.checkflag"(%249) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %251 = "llvm.load"(%250) : (!hi.bool) -> i1
      "cf.cond_br"(%251) [^bb79, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb82:
      %252 = "llvm.getelementptr"(%244) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %253 = "mid.checkflag"(%252) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %254 = "llvm.load"(%253) : (!hi.bool) -> i1
      "cf.cond_br"(%254) [^bb83, ^bb81] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %255 = "llvm.getelementptr"(%244) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %256 = "mid.checkflag"(%255) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %257 = "llvm.load"(%256) : (!hi.bool) -> i1
      "cf.cond_br"(%257) [^bb81, ^bb81] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb80:
      %258 = "llvm.extractvalue"(%243) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %259 = "llvm.load"(%246) : (!llvm.ptr) -> i32
      %260 = "llvm.getelementptr"(%258, %259) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %261 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %262 = "llvm.getelementptr"(%260, %261) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%262) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb84(%263 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %264 : !llvm.ptr):
      %265 = "mid.invariant"(%264) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %266 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb85] : () -> ()
    ^bb86:
      %267 = "llvm.mlir.constant"() <{"value" = 345 : i32}> : () -> i32
      "llvm.store"(%267, %266) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb87] : () -> ()
    ^bb88:
      %268 = "llvm.mlir.constant"() <{"value" = 346 : i32}> : () -> i32
      "llvm.store"(%268, %266) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb87] : () -> ()
    ^bb85:
      %269 = "llvm.getelementptr"(%264) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %270 = "mid.checkflag"(%269) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %271 = "llvm.load"(%270) : (!hi.bool) -> i1
      "cf.cond_br"(%271) [^bb86, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb89:
      %272 = "llvm.getelementptr"(%264) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %273 = "mid.checkflag"(%272) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %274 = "llvm.load"(%273) : (!hi.bool) -> i1
      "cf.cond_br"(%274) [^bb90, ^bb88] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %275 = "llvm.getelementptr"(%264) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %276 = "mid.checkflag"(%275) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %277 = "llvm.load"(%276) : (!hi.bool) -> i1
      "cf.cond_br"(%277) [^bb88, ^bb88] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %278 = "llvm.extractvalue"(%263) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %279 = "llvm.load"(%266) : (!llvm.ptr) -> i32
      %280 = "llvm.getelementptr"(%278, %279) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<134 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %281 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %282 = "llvm.getelementptr"(%280, %281) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%282) : (!llvm.ptr) -> ()
    }) {"func_name" = "IndexableCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "range"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.typedef"() {"class_name" = "Range", "methods" = [@Range_field_start, @Range_field_end, @Range_field_step, @Range_field_Range_0, @Range_B_init_endi32, @Range_B_init_starti32_endi32, @Range_B_step_stepi32, @Range_B_size_, @Range_B_is_empty_, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_Bool, @Range_B_any_fFunctionT_to_Bool, @Range_B_enumerate_, @Range_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_Bool, @Range_B_chain_otherIterableT_chain_otherCollectionT, @Range_B_interleave_otherIterableT_interleave_otherCollectionT, @Range_B_zip_otherIterableU_zip_otherCollectionU, @Range_B_product_otherCollectionU_product_otherIterableU, @Range_init_endi32, @Range_init_starti32_endi32, @Range_step_stepi32, @Range_size_, @Collection_is_empty_, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Range_field_Range_0, @Range_B_size_, @Range_B_is_empty_, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_Bool, @Range_B_any_fFunctionT_to_Bool, @Range_B_enumerate_, @Range_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_Bool, @Range_B_chain_otherIterableT_chain_otherCollectionT, @Range_B_interleave_otherIterableT_interleave_otherCollectionT, @Range_B_zip_otherIterableU_zip_otherCollectionU, @Range_B_product_otherCollectionU_product_otherIterableU, @Range_size_, @Collection_is_empty_, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Range_field_Range_0, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_Bool, @Range_B_any_fFunctionT_to_Bool, @Range_B_enumerate_, @Range_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_Bool, @Range_B_chain_otherIterableT_chain_otherCollectionT, @Range_B_interleave_otherIterableT_interleave_otherCollectionT, @Range_B_zip_otherIterableU_zip_otherCollectionU, @Range_B_product_otherCollectionU_product_otherIterableU, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Range_field_Range_0, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_Bool, @Range_B_any_fFunctionT_to_Bool, @Range_B_enumerate_, @Range_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_Bool, @Range_B_chain_otherIterableT_chain_otherCollectionT, @Range_B_interleave_otherIterableT_interleave_otherCollectionT, @Range_B_zip_otherIterableU_zip_otherCollectionU, @Range_B_product_otherCollectionU_product_otherIterableU, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Iterable, @Object, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Collection, @Range], "offset_tbl" = [112 : i32, 137 : i32, 10 : i32, 0 : i32, 0 : i32, 0 : i32, 53 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 5490049236840671069 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_Range", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "RangeIterator", "methods" = [@RangeIterator_field_counter, @RangeIterator_field_end, @RangeIterator_field_step, @RangeIterator_field_RangeIterator_0, @RangeIterator_B_init_counteri32_endi32_stepi32, @RangeIterator_B_next_, @RangeIterator_init_counteri32_endi32_stepi32, @RangeIterator_next_, @RangeIterator_field_RangeIterator_0, @RangeIterator_B_next_, @RangeIterator_next_], "hash_tbl" = [@RangeIterator, @Iterator, @any_typ, @Object], "offset_tbl" = [10 : i32, 18 : i32, 10 : i32, 21 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 17533181587765144941 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_RangeIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Range", "types" = [i32, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_start", "getter_name" = "Range_getter_start", "setter_name" = "Range_setter_start"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_end", "getter_name" = "Range_getter_end", "setter_name" = "Range_setter_end"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_step", "getter_name" = "Range_getter_step", "setter_name" = "Range_setter_step"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "Range_field_Range_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : i32):
      %4 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %5 = "hi.cast"(%4) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %6 = "mid.wrap"(%3) : (i32) -> si32
      %7 = "hi.cast"(%6) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %8 = "hi.cast"(%7) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%5, %8) {"offset" = 1 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, si32) -> ()
      %9 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %10 = "hi.cast"(%9) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%5, %10) {"offset" = 0 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, si32) -> ()
      %11 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %12 = "hi.cast"(%11) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%5, %12) {"offset" = 2 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, si32) -> ()
    }) {"func_name" = "Range_init_endi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %17 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %18 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %19 = "mid.checkflag"(%18) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %20 = "llvm.load"(%19) : (!hi.bool) -> i1
      "cf.cond_br"(%20) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %21 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %22 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %23 = "llvm.getelementptr"(%21, %22) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %24 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %25 = "llvm.getelementptr"(%23, %24) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%25) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_init_endi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%26 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %27 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %28 : !llvm.ptr, %29 : i32, %30 : i32):
      %31 = "mid.wrap"(%26) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %32 = "hi.cast"(%31) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %33 = "mid.wrap"(%29) : (i32) -> si32
      %34 = "hi.cast"(%33) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %35 = "hi.cast"(%34) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%32, %35) {"offset" = 0 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, si32) -> ()
      %36 = "mid.wrap"(%30) : (i32) -> si32
      %37 = "hi.cast"(%36) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %38 = "hi.cast"(%37) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%32, %38) {"offset" = 1 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, si32) -> ()
      %39 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %40 = "hi.cast"(%39) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%32, %40) {"offset" = 2 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, si32) -> ()
    }) {"func_name" = "Range_init_starti32_endi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%41 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %42 : !llvm.ptr):
      %43 = "mid.invariant"(%42) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %44 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb8:
      %45 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%45, %44) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb10:
      %46 = "llvm.getelementptr"(%42) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %47 = "mid.checkflag"(%46) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %48 = "llvm.load"(%47) : (!hi.bool) -> i1
      "cf.cond_br"(%48) [^bb8, ^bb8] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb7:
      %49 = "llvm.getelementptr"(%42) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %50 = "mid.checkflag"(%49) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %51 = "llvm.load"(%50) : (!hi.bool) -> i1
      "cf.cond_br"(%51) [^bb10, ^bb10] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb9:
      %52 = "llvm.extractvalue"(%41) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %53 = "llvm.load"(%44) : (!llvm.ptr) -> i32
      %54 = "llvm.getelementptr"(%52, %53) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %55 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%56) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_init_starti32_endi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb11(%57 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %58 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %59 : !llvm.ptr, %60 : i32):
      %61 = "mid.wrap"(%57) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %62 = "hi.cast"(%61) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %63 = "mid.wrap"(%60) : (i32) -> si32
      %64 = "hi.cast"(%63) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %65 = "hi.cast"(%64) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%62, %65) {"offset" = 2 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, si32) -> ()
      %66 = "hi.cast"(%62) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      "mid.return"(%66) : (!hi.fatptr<"Range">) -> ()
    }) {"func_name" = "Range_step_stepi32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb12(%67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.ptr):
      %69 = "mid.invariant"(%68) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %70 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb14:
      %71 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%71, %70) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb15] : () -> ()
    ^bb13:
      %72 = "llvm.getelementptr"(%68) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %73 = "mid.checkflag"(%72) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %74 = "llvm.load"(%73) : (!hi.bool) -> i1
      "cf.cond_br"(%74) [^bb14, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb15:
      %75 = "llvm.extractvalue"(%67) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %76 = "llvm.load"(%70) : (!llvm.ptr) -> i32
      %77 = "llvm.getelementptr"(%75, %76) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %78 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %79 = "llvm.getelementptr"(%77, %78) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%79) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_step_stepi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb16(%80 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %81 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %82 : !llvm.ptr):
      %83 = "mid.wrap"(%80) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %84 = "hi.cast"(%83) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %85 = "mid.get_field"(%84) {"offset" = 2 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %86 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %87 = "hi.comparison"(%85, %86) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %88 = "mid.unwrap"(%87) : (si1) -> i1
      "mid.if"(%88) ({
        %89 = "mid.get_field"(%84) {"offset" = 1 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
        %90 = "mid.get_field"(%84) {"offset" = 0 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
        %91 = "hi.arithmetic"(%89, %90) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %92 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %93 = "hi.arithmetic"(%91, %92) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %94 = "hi.cast"(%93) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.return"(%94) : (si32) -> ()
      }) : (i1) -> ()
      %95 = "mid.get_field"(%84) {"offset" = 1 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %96 = "mid.get_field"(%84) {"offset" = 0 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %97 = "hi.arithmetic"(%95, %96) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %98 = "mid.get_field"(%84) {"offset" = 2 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %99 = "hi.arithmetic"(%97, %98) {"op" = "DIV", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %100 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %101 = "hi.arithmetic"(%99, %100) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %102 = "hi.cast"(%101) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%102) : (si32) -> ()
    }) {"func_name" = "Range_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb17(%103 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %104 : !llvm.ptr):
      %105 = "mid.invariant"(%104) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %106 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      %107 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%107, %106) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      %108 = "llvm.extractvalue"(%103) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %109 = "llvm.load"(%106) : (!llvm.ptr) -> i32
      %110 = "llvm.getelementptr"(%108, %109) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %111 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %112 = "llvm.getelementptr"(%110, %111) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%112) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_is_empty_", "function_type" = !llvm.func<i1 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb20(%113 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %114 : !llvm.ptr):
      %115 = "mid.invariant"(%114) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %116 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb21] : () -> ()
    ^bb21:
      %117 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%117, %116) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb22:
      %118 = "llvm.extractvalue"(%113) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %119 = "llvm.load"(%116) : (!llvm.ptr) -> i32
      %120 = "llvm.getelementptr"(%118, %119) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %121 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %122 = "llvm.getelementptr"(%120, %121) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%122) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb23(%123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %125 : !llvm.ptr):
      %126 = "mid.wrap"(%123) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %127 = "hi.cast"(%126) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %128 = "mid.get_field"(%127) {"offset" = 0 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %129 = "mid.get_field"(%127) {"offset" = 1 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %130 = "mid.get_field"(%127) {"offset" = 2 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %131 = "mid.unwrap"(%128) : (si32) -> i32
      %132 = "mid.unwrap"(%129) : (si32) -> i32
      %133 = "mid.unwrap"(%130) : (si32) -> i32
      %134 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "RangeIterator", "num_data_fields" = 3 : i32, "region_id" = "ret"} : () -> !hi.fatptr<"RangeIterator">
      %135 = "mid.get_field"(%127) {"offset" = 0 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %136 = "mid.get_field"(%127) {"offset" = 1 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %137 = "mid.get_field"(%127) {"offset" = 2 : i64, "vtable_bytes" = 1016 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> si32
      %138 = "hi.cast"(%135) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %139 = "mid.unwrap"(%138) : (si32) -> i32
      %140 = "hi.cast"(%136) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %141 = "mid.unwrap"(%140) : (si32) -> i32
      %142 = "hi.cast"(%137) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %143 = "mid.unwrap"(%142) : (si32) -> i32
      %144 = "mid.unwrap"(%134) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %145 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %146 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %147 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %148 = "mid.parameterizations_array"(%145, %146, %147) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%148, %144, %139, %141, %143) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32, i32) -> ()
      %149 = "hi.cast"(%134) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "RangeIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%149) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Range_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%150 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %151 : !llvm.ptr):
      %152 = "mid.invariant"(%151) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %153 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb25:
      %154 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%154, %153) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      %155 = "llvm.extractvalue"(%150) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %156 = "llvm.load"(%153) : (!llvm.ptr) -> i32
      %157 = "llvm.getelementptr"(%155, %156) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %158 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %159 = "llvm.getelementptr"(%157, %158) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%159) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb27(%160 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %161 : !llvm.ptr):
      %162 = "mid.invariant"(%161) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %163 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb28] : () -> ()
    ^bb29:
      %164 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%164, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb30] : () -> ()
    ^bb28:
      %165 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %166 = "mid.checkflag"(%165) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %167 = "llvm.load"(%166) : (!hi.bool) -> i1
      "cf.cond_br"(%167) [^bb29, ^bb29] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %168 = "llvm.extractvalue"(%160) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %169 = "llvm.load"(%163) : (!llvm.ptr) -> i32
      %170 = "llvm.getelementptr"(%168, %169) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %171 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %172 = "llvm.getelementptr"(%170, %171) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%172) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb31(%173 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %174 : !llvm.ptr):
      %175 = "mid.invariant"(%174) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %176 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb32] : () -> ()
    ^bb33:
      %177 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%177, %176) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb34] : () -> ()
    ^bb35:
      %178 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %179 = "mid.checkflag"(%178) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %180 = "llvm.load"(%179) : (!hi.bool) -> i1
      "cf.cond_br"(%180) [^bb33, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %181 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %182 = "mid.checkflag"(%181) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %183 = "llvm.load"(%182) : (!hi.bool) -> i1
      "cf.cond_br"(%183) [^bb35, ^bb35] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb34:
      %184 = "llvm.extractvalue"(%173) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %185 = "llvm.load"(%176) : (!llvm.ptr) -> i32
      %186 = "llvm.getelementptr"(%184, %185) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %187 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %188 = "llvm.getelementptr"(%186, %187) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%188) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb36(%189 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %190 : !llvm.ptr):
      %191 = "mid.invariant"(%190) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %192 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb37] : () -> ()
    ^bb38:
      %193 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%193, %192) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb37:
      %194 = "llvm.getelementptr"(%190) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %195 = "mid.checkflag"(%194) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %196 = "llvm.load"(%195) : (!hi.bool) -> i1
      "cf.cond_br"(%196) [^bb38, ^bb38] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb39:
      %197 = "llvm.extractvalue"(%189) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %198 = "llvm.load"(%192) : (!llvm.ptr) -> i32
      %199 = "llvm.getelementptr"(%197, %198) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %200 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %201 = "llvm.getelementptr"(%199, %200) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%201) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb40(%202 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %203 : !llvm.ptr):
      %204 = "mid.invariant"(%203) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %205 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb41] : () -> ()
    ^bb42:
      %206 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%206, %205) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb41:
      %207 = "llvm.getelementptr"(%203) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %208 = "mid.checkflag"(%207) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %209 = "llvm.load"(%208) : (!hi.bool) -> i1
      "cf.cond_br"(%209) [^bb42, ^bb42] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb43:
      %210 = "llvm.extractvalue"(%202) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %211 = "llvm.load"(%205) : (!llvm.ptr) -> i32
      %212 = "llvm.getelementptr"(%210, %211) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %213 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %214 = "llvm.getelementptr"(%212, %213) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%214) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb44(%215 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %216 : !llvm.ptr):
      %217 = "mid.invariant"(%216) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %218 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb45] : () -> ()
    ^bb45:
      %219 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%219, %218) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb46] : () -> ()
    ^bb46:
      %220 = "llvm.extractvalue"(%215) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %221 = "llvm.load"(%218) : (!llvm.ptr) -> i32
      %222 = "llvm.getelementptr"(%220, %221) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %223 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %224 = "llvm.getelementptr"(%222, %223) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%224) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb47(%225 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %226 : !llvm.ptr):
      %227 = "mid.invariant"(%226) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %228 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb48] : () -> ()
    ^bb49:
      %229 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%229, %228) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb50] : () -> ()
    ^bb51:
      %230 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%230, %228) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb50] : () -> ()
    ^bb48:
      %231 = "llvm.getelementptr"(%226) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %232 = "mid.checkflag"(%231) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %233 = "llvm.load"(%232) : (!hi.bool) -> i1
      "cf.cond_br"(%233) [^bb49, ^bb52] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb52:
      %234 = "llvm.getelementptr"(%226) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %235 = "mid.checkflag"(%234) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %236 = "llvm.load"(%235) : (!hi.bool) -> i1
      "cf.cond_br"(%236) [^bb51, ^bb51] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb50:
      %237 = "llvm.extractvalue"(%225) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %238 = "llvm.load"(%228) : (!llvm.ptr) -> i32
      %239 = "llvm.getelementptr"(%237, %238) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %240 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %241 = "llvm.getelementptr"(%239, %240) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%241) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb53(%242 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %243 : !llvm.ptr):
      %244 = "mid.invariant"(%243) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %245 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb54] : () -> ()
    ^bb55:
      %246 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%246, %245) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb56] : () -> ()
    ^bb54:
      %247 = "llvm.getelementptr"(%243) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %248 = "mid.checkflag"(%247) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %249 = "llvm.load"(%248) : (!hi.bool) -> i1
      "cf.cond_br"(%249) [^bb55, ^bb55] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb56:
      %250 = "llvm.extractvalue"(%242) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %251 = "llvm.load"(%245) : (!llvm.ptr) -> i32
      %252 = "llvm.getelementptr"(%250, %251) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %253 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %254 = "llvm.getelementptr"(%252, %253) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%254) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb57(%255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %256 : !llvm.ptr):
      %257 = "mid.invariant"(%256) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %258 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb58] : () -> ()
    ^bb59:
      %259 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%259, %258) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb60] : () -> ()
    ^bb61:
      %260 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%260, %258) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb60] : () -> ()
    ^bb58:
      %261 = "llvm.getelementptr"(%256) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %262 = "mid.checkflag"(%261) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %263 = "llvm.load"(%262) : (!hi.bool) -> i1
      "cf.cond_br"(%263) [^bb59, ^bb62] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb62:
      %264 = "llvm.getelementptr"(%256) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %265 = "mid.checkflag"(%264) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %266 = "llvm.load"(%265) : (!hi.bool) -> i1
      "cf.cond_br"(%266) [^bb63, ^bb61] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb63:
      %267 = "llvm.getelementptr"(%256) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %268 = "mid.checkflag"(%267) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %269 = "llvm.load"(%268) : (!hi.bool) -> i1
      "cf.cond_br"(%269) [^bb61, ^bb61] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb60:
      %270 = "llvm.extractvalue"(%255) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %271 = "llvm.load"(%258) : (!llvm.ptr) -> i32
      %272 = "llvm.getelementptr"(%270, %271) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %273 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %274 = "llvm.getelementptr"(%272, %273) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%274) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb64(%275 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %276 : !llvm.ptr):
      %277 = "mid.invariant"(%276) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %278 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb65] : () -> ()
    ^bb66:
      %279 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%279, %278) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb67] : () -> ()
    ^bb68:
      %280 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%280, %278) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb67] : () -> ()
    ^bb65:
      %281 = "llvm.getelementptr"(%276) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %282 = "mid.checkflag"(%281) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %283 = "llvm.load"(%282) : (!hi.bool) -> i1
      "cf.cond_br"(%283) [^bb66, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %284 = "llvm.getelementptr"(%276) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %285 = "mid.checkflag"(%284) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %286 = "llvm.load"(%285) : (!hi.bool) -> i1
      "cf.cond_br"(%286) [^bb70, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb70:
      %287 = "llvm.getelementptr"(%276) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %288 = "mid.checkflag"(%287) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %289 = "llvm.load"(%288) : (!hi.bool) -> i1
      "cf.cond_br"(%289) [^bb68, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb67:
      %290 = "llvm.extractvalue"(%275) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %291 = "llvm.load"(%278) : (!llvm.ptr) -> i32
      %292 = "llvm.getelementptr"(%290, %291) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %293 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %294 = "llvm.getelementptr"(%292, %293) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%294) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb71(%295 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %296 : !llvm.ptr):
      %297 = "mid.invariant"(%296) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %298 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %299 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%299, %298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb75:
      %300 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%300, %298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb72:
      %301 = "llvm.getelementptr"(%296) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %302 = "mid.checkflag"(%301) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %303 = "llvm.load"(%302) : (!hi.bool) -> i1
      "cf.cond_br"(%303) [^bb73, ^bb76] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb76:
      %304 = "llvm.getelementptr"(%296) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %305 = "mid.checkflag"(%304) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %306 = "llvm.load"(%305) : (!hi.bool) -> i1
      "cf.cond_br"(%306) [^bb77, ^bb75] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb77:
      %307 = "llvm.getelementptr"(%296) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %308 = "mid.checkflag"(%307) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %309 = "llvm.load"(%308) : (!hi.bool) -> i1
      "cf.cond_br"(%309) [^bb75, ^bb75] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %310 = "llvm.extractvalue"(%295) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %311 = "llvm.load"(%298) : (!llvm.ptr) -> i32
      %312 = "llvm.getelementptr"(%310, %311) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %313 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %314 = "llvm.getelementptr"(%312, %313) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%314) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb78(%315 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %316 : !llvm.ptr):
      %317 = "mid.invariant"(%316) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %318 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb79] : () -> ()
    ^bb80:
      %319 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%319, %318) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb81] : () -> ()
    ^bb82:
      %320 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%320, %318) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb81] : () -> ()
    ^bb79:
      %321 = "llvm.getelementptr"(%316) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %322 = "mid.checkflag"(%321) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %323 = "llvm.load"(%322) : (!hi.bool) -> i1
      "cf.cond_br"(%323) [^bb80, ^bb83] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %324 = "llvm.getelementptr"(%316) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %325 = "mid.checkflag"(%324) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %326 = "llvm.load"(%325) : (!hi.bool) -> i1
      "cf.cond_br"(%326) [^bb84, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb84:
      %327 = "llvm.getelementptr"(%316) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %328 = "mid.checkflag"(%327) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %329 = "llvm.load"(%328) : (!hi.bool) -> i1
      "cf.cond_br"(%329) [^bb82, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb81:
      %330 = "llvm.extractvalue"(%315) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %331 = "llvm.load"(%318) : (!llvm.ptr) -> i32
      %332 = "llvm.getelementptr"(%330, %331) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<127 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %333 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %334 = "llvm.getelementptr"(%332, %333) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%334) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_RangeIterator", "types" = [i32, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_counter", "getter_name" = "RangeIterator_getter_counter", "setter_name" = "RangeIterator_setter_counter"} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_end", "getter_name" = "RangeIterator_getter_end", "setter_name" = "RangeIterator_setter_end"} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_step", "getter_name" = "RangeIterator_getter_step", "setter_name" = "RangeIterator_setter_step"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "RangeIterator_field_RangeIterator_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
    "mid.func"() ({
    ^bb85(%335 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %336 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %337 : !llvm.ptr, %338 : i32, %339 : i32, %340 : i32):
      %341 = "mid.wrap"(%335) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"RangeIterator">
      %342 = "hi.cast"(%341) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      %343 = "mid.wrap"(%338) : (i32) -> si32
      %344 = "hi.cast"(%343) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %345 = "hi.cast"(%344) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%342, %345) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, si32) -> ()
      %346 = "mid.wrap"(%339) : (i32) -> si32
      %347 = "hi.cast"(%346) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %348 = "hi.cast"(%347) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%342, %348) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, si32) -> ()
      %349 = "mid.wrap"(%340) : (i32) -> si32
      %350 = "hi.cast"(%349) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %351 = "hi.cast"(%350) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%342, %351) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, si32) -> ()
    }) {"func_name" = "RangeIterator_init_counteri32_endi32_stepi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb86(%352 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %353 : !llvm.ptr):
      %354 = "mid.invariant"(%353) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %355 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb87] : () -> ()
    ^bb88:
      %356 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%356, %355) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb89] : () -> ()
    ^bb90:
      %357 = "llvm.getelementptr"(%353) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %358 = "mid.checkflag"(%357) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %359 = "llvm.load"(%358) : (!hi.bool) -> i1
      "cf.cond_br"(%359) [^bb88, ^bb88] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb91:
      %360 = "llvm.getelementptr"(%353) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %361 = "mid.checkflag"(%360) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %362 = "llvm.load"(%361) : (!hi.bool) -> i1
      "cf.cond_br"(%362) [^bb90, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %363 = "llvm.getelementptr"(%353) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %364 = "mid.checkflag"(%363) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %365 = "llvm.load"(%364) : (!hi.bool) -> i1
      "cf.cond_br"(%365) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb89:
      %366 = "llvm.extractvalue"(%352) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %367 = "llvm.load"(%355) : (!llvm.ptr) -> i32
      %368 = "llvm.getelementptr"(%366, %367) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %369 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %370 = "llvm.getelementptr"(%368, %369) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%370) : (!llvm.ptr) -> ()
    }) {"func_name" = "RangeIterator_B_init_counteri32_endi32_stepi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb92(%371 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %372 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %373 : !llvm.ptr):
      %374 = "mid.wrap"(%371) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"RangeIterator">
      %375 = "hi.cast"(%374) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      %376 = "mid.get_field"(%375) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> si32
      %377 = "mid.get_field"(%375) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> si32
      %378 = "hi.comparison"(%376, %377) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %379 = "mid.unwrap"(%378) : (si1) -> i1
      "mid.if"(%379) ({
        %380 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %381 = "hi.cast"(%380) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        "mid.return"(%381) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %382 = "mid.get_field"(%375) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> si32
      %383 = "mid.refer"(%382) {"typ" = i32} : (si32) -> si32
      %384 = "mid.get_field"(%375) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> si32
      %385 = "mid.get_field"(%375) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> si32
      %386 = "hi.arithmetic"(%384, %385) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %387 = "hi.cast"(%386) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%375, %387) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, si32) -> ()
      %388 = "hi.cast"(%383) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%388) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "RangeIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb93(%389 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %390 : !llvm.ptr):
      %391 = "mid.invariant"(%390) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %392 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb94] : () -> ()
    ^bb94:
      %393 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%393, %392) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb95] : () -> ()
    ^bb95:
      %394 = "llvm.extractvalue"(%389) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %395 = "llvm.load"(%392) : (!llvm.ptr) -> i32
      %396 = "llvm.getelementptr"(%394, %395) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %397 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %398 = "llvm.getelementptr"(%396, %397) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%398) : (!llvm.ptr) -> ()
    }) {"func_name" = "RangeIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "core"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.typedef"() {"class_name" = "Unicode", "methods" = [@Unicode_B__Self_replacement_codepoint_, @Unicode_B__Self_replacement_str_, @Unicode_B__Self_replacement_buf_, @Unicode_B__Self_decode_one_bytesBufferi8_indexi32_leni32, @Unicode_B__Self_encode_one_cpi32, @Unicode__Self_replacement_codepoint_, @Unicode__Self_replacement_str_, @Unicode__Self_replacement_buf_, @Unicode__Self_decode_one_bytesBufferi8_indexi32_leni32, @Unicode__Self_encode_one_cpi32], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Unicode], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 10992518002160706297 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Unicode", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Representable", "methods" = [@Representable_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 12 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 11185903432579561498 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Representable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "String", "methods" = [@String_field_bytes, @String_field_byte_length, @String_field_char_length, @String_field_capacity, @String_field_String_0, @String_B_byte_length_, @String_B_capacity_, @String_B__Self_from_bytes_source_bytesBufferi8_source_leni32, @String_B__Self_from_bytes_lossy_source_bytesBufferi8_source_leni32, @String_B__Self_from_c_string_c_stringBufferi8, @String_B_init_, @String_B_init_capacityi32, @String_B_init_bytesBufferi8_byte_lengthi32_char_lengthi32_capacityi32, @String_B_c_string_, @String_B_append_char_from_bytes_source_bytesBufferi8_start_indexi32_n_bytesi32, @String_B_reserve_new_capacityi32, @String_B__EQ_otherString, @String_B_decode_at_byte_indexi32, @String_B_unchecked_index_xi32, @String_B_unchecked_insert_xi32_valuei8, @String_B_copy_, @String_B__Self_empty_, @String_B__Self_from_iterable_iterableIterableCharacter, @String_B_append_charCharacter, @String_B_length_, @String_B_first_, @String_B_last_, @String_B_extend_otherCollectionCharacter_extend_otherIterableT_extend_otherString, @String_B_get_indexi32, @String_B_index_of_targetT_eqFunctionT._T_to_Bool, @String_B_size_, @String_B_is_empty_, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherIterableT_interleave_otherCollectionT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherCollectionU_product_otherIterableU, @String_B_repr_, @String_byte_length_, @String_capacity_, @String__Self_from_bytes_source_bytesBufferi8_source_leni32, @String__Self_from_bytes_lossy_source_bytesBufferi8_source_leni32, @String__Self_from_c_string_c_stringBufferi8, @String_init_, @String_init_capacityi32, @String_init_bytesBufferi8_byte_lengthi32_char_lengthi32_capacityi32, @String_c_string_, @String_append_char_from_bytes_source_bytesBufferi8_start_indexi32_n_bytesi32, @String_reserve_new_capacityi32, @String__EQ_otherString, @String_decode_at_byte_indexi32, @String_unchecked_index_xi32, @String_unchecked_insert_xi32_valuei8, @String_copy_, @String__Self_empty_, @String__Self_from_iterable_iterableIterableCharacter, @String_append_charCharacter, @List_length_, @List_first_, @List_last_, @String_extend_otherCollectionCharacter, @List_extend_otherIterableT, @String_extend_otherString, @List_get_indexi32, @List_index_of_targetT_eqFunctionT._T_to_Bool, @String_size_, @Collection_is_empty_, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @String_repr_, @String_field_String_0, @String_B__Self_empty_, @String_B__Self_from_iterable_iterableIterableCharacter, @String_B_append_charCharacter, @String_B_length_, @String_B_first_, @String_B_last_, @String_B_extend_otherCollectionCharacter_extend_otherIterableT_extend_otherString, @String_B_get_indexi32, @String_B_index_of_targetT_eqFunctionT._T_to_Bool, @String_B_size_, @String_B_is_empty_, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherIterableT_interleave_otherCollectionT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherCollectionU_product_otherIterableU, @String__Self_empty_, @String__Self_from_iterable_iterableIterableCharacter, @String_append_charCharacter, @List_length_, @List_first_, @List_last_, @List_extend_otherIterableT, @List_get_indexi32, @List_index_of_targetT_eqFunctionT._T_to_Bool, @String_size_, @Collection_is_empty_, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @String_field_String_0, @String_B_size_, @String_B_is_empty_, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherIterableT_interleave_otherCollectionT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherCollectionU_product_otherIterableU, @String_size_, @Collection_is_empty_, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @String_field_String_0, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherIterableT_interleave_otherCollectionT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherCollectionU_product_otherIterableU, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_field_String_0, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherIterableT_interleave_otherCollectionT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherCollectionU_product_otherIterableU, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_field_String_0, @String_B_size_, @String_B_is_empty_, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherIterableT_interleave_otherCollectionT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherCollectionU_product_otherIterableU, @String_size_, @Collection_is_empty_, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @String_field_String_0, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherIterableT_interleave_otherCollectionT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherCollectionU_product_otherIterableU, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_field_String_0, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT_chain_otherCollectionT, @String_B_interleave_otherIterableT_interleave_otherCollectionT, @String_B_zip_otherIterableU_zip_otherCollectionU, @String_B_product_otherCollectionU_product_otherIterableU, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_B_repr_, @String_repr_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @List, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64, @Object, @String, @Representable, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Collection, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 0 : i32, 0 : i32, 102 : i32, 297 : i32, 0 : i32, 0 : i32, 322 : i32, 10 : i32, 322 : i32, 0 : i32, 0 : i32, 0 : i32, 238 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427389917 : i64, "hash_id" = 6499063144389013426 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "data_size_fn" = "_data_size_String", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Character", "methods" = [@Character_field_codepoint, @Character_B_codepoint_, @Character_B_init_codepointi32, @Character_B_to_string_, @Character_B__EQ_otherCharacter, @Character_B_n_bytes_, @Character_codepoint_, @Character_init_codepointi32, @Character_to_string_, @Character__EQ_otherCharacter, @Character_n_bytes_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Character], "offset_tbl" = [21 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6681222582356018452 : i64, "base_typ" = !llvm.struct<(i32)>, "data_size_fn" = "_data_size_Character", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "StringIterator", "methods" = [@StringIterator_field_str, @StringIterator_field_byte_index, @StringIterator_field_StringIterator_0, @StringIterator_B_init_strString, @StringIterator_B_next_, @StringIterator_init_strString, @StringIterator_next_, @StringIterator_field_StringIterator_0, @StringIterator_B_next_, @StringIterator_next_, @StringIterator_field_StringIterator_0, @StringIterator_B_next_, @StringIterator_next_, @StringIterator_field_StringIterator_0, @StringIterator_B_next_, @StringIterator_next_], "hash_tbl" = [@StringIterator, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterator, @Object, @ConstantTimeIterator, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 0 : i32, 0 : i32, 23 : i32, 26 : i32, 17 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 11186173084763598986 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_StringIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Stacktrace", "methods" = [@Stacktrace_field_stacktrace, @Stacktrace_field_n_frames, @Stacktrace_B_init_, @Stacktrace_B_print_, @Stacktrace_init_, @Stacktrace_print_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Stacktrace], "offset_tbl" = [16 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18387359861185834519 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i64)>, "data_size_fn" = "_data_size_Stacktrace", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Exception", "methods" = [@Exception_field_line_number, @Exception_field_file_name, @Exception_field_message, @Exception_field_stacktrace, @Exception_B_init_messageString, @Exception_B_init_, @Exception_B_set_info_line_numberi32_file_nameString, @Exception_B_report_, @Exception_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Exception], "offset_tbl" = [24 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 9027164862567808692 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Exception", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "InvalidUTF8Error", "methods" = [@InvalidUTF8Error_field_line_number, @InvalidUTF8Error_field_file_name, @InvalidUTF8Error_field_message, @InvalidUTF8Error_field_stacktrace, @InvalidUTF8Error_B_init_messageString, @InvalidUTF8Error_B_init_, @InvalidUTF8Error_B_set_info_line_numberi32_file_nameString, @InvalidUTF8Error_B_report_, @InvalidUTF8Error_B_print_message_, @Exception_init_messageString, @InvalidUTF8Error_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_, @InvalidUTF8Error_field_line_number, @InvalidUTF8Error_field_file_name, @InvalidUTF8Error_field_message, @InvalidUTF8Error_field_stacktrace, @InvalidUTF8Error_B_init_messageString, @InvalidUTF8Error_B_init_, @InvalidUTF8Error_B_set_info_line_numberi32_file_nameString, @InvalidUTF8Error_B_report_, @InvalidUTF8Error_B_print_message_, @Exception_init_messageString, @InvalidUTF8Error_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@any_typ, @Exception, @InvalidUTF8Error, @Object], "offset_tbl" = [10 : i32, 24 : i32, 10 : i32, 38 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 4104693287331019315 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InvalidUTF8Error", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "OutOfBounds", "methods" = [@OutOfBounds_field_details, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_field_stacktrace, @OutOfBounds_B_init_boundsi32_indexi32, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberi32_file_nameString, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @OutOfBounds_init_boundsi32_indexi32, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @OutOfBounds_print_message_, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_field_stacktrace, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberi32_file_nameString, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @OutOfBounds_print_message_], "hash_tbl" = [@any_typ, @Exception, @OutOfBounds, @Object], "offset_tbl" = [10 : i32, 27 : i32, 10 : i32, 41 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5348403617834207535 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_OutOfBounds", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "OutOfBoundsDetails", "methods" = [@OutOfBoundsDetails_field_bounds, @OutOfBoundsDetails_field_index, @OutOfBoundsDetails_B_init_boundsi32_indexi32, @OutOfBoundsDetails_B_report_, @OutOfBoundsDetails_init_boundsi32_indexi32, @OutOfBoundsDetails_report_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @OutOfBoundsDetails], "offset_tbl" = [16 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 4650630525701360429 : i64, "base_typ" = !llvm.struct<(i32, i32)>, "data_size_fn" = "_data_size_OutOfBoundsDetails", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Unicode", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr):
      %1 = "mid.literal"() {"value" = -3 : i32, "typ" = i32} : () -> si32
      %2 = "hi.cast"(%1) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%2) : (si32) -> ()
    }) {"func_name" = "Unicode__Self_replacement_codepoint_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%3 : !llvm.ptr):
      %4 = "mid.invariant"(%3) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %5 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %6 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%6, %5) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %7 = "mid.addr_of"() {"global_name" = @Unicode} : () -> !llvm.ptr
      %8 = "llvm.load"(%5) : (!llvm.ptr) -> i32
      %9 = "llvm.getelementptr"(%7, %8) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %10 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %11 = "llvm.getelementptr"(%9, %10) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%11) : (!llvm.ptr) -> ()
    }) {"func_name" = "Unicode_B__Self_replacement_codepoint_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb4(%12 : !llvm.ptr):
      %13 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %14 = "mid.class_method_call"(%13) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>, "class_name" = "Unicode"} : (!llvm.ptr) -> !hi.buffer<si8>
      %15 = "hi.cast"(%14) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %16 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %17 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %18 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %19 = "mid.unwrap"(%15) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %20 = "mid.unwrap"(%16) : (si32) -> i32
      %21 = "mid.unwrap"(%17) : (si32) -> i32
      %22 = "mid.unwrap"(%18) : (si32) -> i32
      %23 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %24 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %25 = "mid.class_method_call"(%24) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>, "class_name" = "Unicode"} : (!llvm.ptr) -> !hi.buffer<si8>
      %26 = "hi.cast"(%25) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %27 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %28 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %29 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %30 = "hi.cast"(%26) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %31 = "mid.unwrap"(%30) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %32 = "hi.cast"(%27) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %33 = "mid.unwrap"(%32) : (si32) -> i32
      %34 = "hi.cast"(%28) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %35 = "mid.unwrap"(%34) : (si32) -> i32
      %36 = "hi.cast"(%29) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %37 = "mid.unwrap"(%36) : (si32) -> i32
      %38 = "mid.unwrap"(%23) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %39 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %40 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %41 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %42 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %43 = "mid.parameterizations_array"(%39, %40, %41, %42) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%43, %38, %31, %33, %35, %37) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %44 = "hi.cast"(%23) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%44) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Unicode__Self_replacement_str_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%45 : !llvm.ptr):
      %46 = "mid.invariant"(%45) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %47 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %48 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%48, %47) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %49 = "mid.addr_of"() {"global_name" = @Unicode} : () -> !llvm.ptr
      %50 = "llvm.load"(%47) : (!llvm.ptr) -> i32
      %51 = "llvm.getelementptr"(%49, %50) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %52 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %53 = "llvm.getelementptr"(%51, %52) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%53) : (!llvm.ptr) -> ()
    }) {"func_name" = "Unicode_B__Self_replacement_str_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb8(%54 : !llvm.ptr):
      %55 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %56 = "hi.cast"(%55) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %57 = "mid.create_buffer"(%56) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %58 = "mid.refer"(%57) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %59 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %60 = "mid.literal"() {"value" = -17 : i8, "typ" = i8} : () -> si8
      %61 = "hi.cast"(%60) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      %62 = "hi.cast"(%59) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%58, %62, %61) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
      %63 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %64 = "mid.literal"() {"value" = -65 : i8, "typ" = i8} : () -> si8
      %65 = "hi.cast"(%64) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      %66 = "hi.cast"(%63) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%58, %66, %65) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
      %67 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %68 = "mid.literal"() {"value" = -67 : i8, "typ" = i8} : () -> si8
      %69 = "hi.cast"(%68) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      %70 = "hi.cast"(%67) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%58, %70, %69) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
      %71 = "hi.cast"(%58) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      "mid.return"(%71) : (!hi.buffer<si8>) -> ()
    }) {"func_name" = "Unicode__Self_replacement_buf_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb9(%72 : !llvm.ptr):
      %73 = "mid.invariant"(%72) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %74 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb10:
      %75 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%75, %74) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb11] : () -> ()
    ^bb11:
      %76 = "mid.addr_of"() {"global_name" = @Unicode} : () -> !llvm.ptr
      %77 = "llvm.load"(%74) : (!llvm.ptr) -> i32
      %78 = "llvm.getelementptr"(%76, %77) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %79 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %80 = "llvm.getelementptr"(%78, %79) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%80) : (!llvm.ptr) -> ()
    }) {"func_name" = "Unicode_B__Self_replacement_buf_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb12(%81 : !llvm.ptr, %82 : !llvm.struct<(!llvm.ptr)>, %83 : i32, %84 : i32):
      %85 = "mid.wrap"(%82) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si8>
      %86 = "hi.cast"(%85) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %87 = "mid.wrap"(%83) : (i32) -> si32
      %88 = "hi.cast"(%87) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %89 = "mid.wrap"(%84) : (i32) -> si32
      %90 = "hi.cast"(%89) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %91 = "hi.comparison"(%88, %90) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %92 = "mid.unwrap"(%91) : (si1) -> i1
      "mid.if"(%92) ({
        %93 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %94 = "hi.cast"(%93) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
        "mid.return"(%94) : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %95 = "hi.cast"(%88) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %96 = "mid.buffer_get"(%86, %95) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
      %97 = "hi.cast"(%96) {"from_typ" = si8, "to_typ" = si32, "from_typ_name" = "i8_typ", "to_typ_name" = "i32_typ"} : (si8) -> si32
      %98 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %99 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %100 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
      %101 = "hi.arithmetic"(%97, %100) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %102 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %103 = "hi.comparison"(%101, %102) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %104 = "mid.unwrap"(%103) : (si1) -> i1
      "mid.if"(%104) ({
        %105 = "hi.cast"(%97) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%98, %105) {"typ" = i32} : (si32, si32) -> ()
        %106 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %107 = "hi.cast"(%106) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%99, %107) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %108 = "mid.literal"() {"value" = -32 : i32, "typ" = i32} : () -> si32
      %109 = "hi.arithmetic"(%97, %108) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %110 = "mid.literal"() {"value" = -64 : i32, "typ" = i32} : () -> si32
      %111 = "hi.comparison"(%109, %110) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %112 = "mid.unwrap"(%111) : (si1) -> i1
      "mid.if"(%112) ({
        %113 = "mid.literal"() {"value" = 31 : i32, "typ" = i32} : () -> si32
        %114 = "hi.arithmetic"(%97, %113) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %115 = "hi.cast"(%114) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%98, %115) {"typ" = i32} : (si32, si32) -> ()
        %116 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %117 = "hi.cast"(%116) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%99, %117) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %118 = "mid.literal"() {"value" = -16 : i32, "typ" = i32} : () -> si32
      %119 = "hi.arithmetic"(%97, %118) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %120 = "mid.literal"() {"value" = -32 : i32, "typ" = i32} : () -> si32
      %121 = "hi.comparison"(%119, %120) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %122 = "mid.unwrap"(%121) : (si1) -> i1
      "mid.if"(%122) ({
        %123 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
        %124 = "hi.arithmetic"(%97, %123) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %125 = "hi.cast"(%124) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%98, %125) {"typ" = i32} : (si32, si32) -> ()
        %126 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %127 = "hi.cast"(%126) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%99, %127) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %128 = "mid.literal"() {"value" = -8 : i32, "typ" = i32} : () -> si32
      %129 = "hi.arithmetic"(%97, %128) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %130 = "mid.literal"() {"value" = -16 : i32, "typ" = i32} : () -> si32
      %131 = "hi.comparison"(%129, %130) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %132 = "mid.unwrap"(%131) : (si1) -> i1
      "mid.if"(%132) ({
        %133 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
        %134 = "hi.arithmetic"(%97, %133) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %135 = "hi.cast"(%134) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%98, %135) {"typ" = i32} : (si32, si32) -> ()
        %136 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %137 = "hi.cast"(%136) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%99, %137) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %138 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %139 = "hi.comparison"(%99, %138) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %140 = "hi.logical"(%139) ({
        %141 = "hi.arithmetic"(%88, %99) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %142 = "hi.comparison"(%141, %90) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        func.return %142 : si1
      }) {"op" = "or"} : (si1) -> si1
      %143 = "mid.unwrap"(%140) : (si1) -> i1
      "mid.if"(%143) ({
        %144 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %145 = "hi.cast"(%144) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
        "mid.return"(%145) : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %146 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %147 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %148 = "hi.arithmetic"(%99, %147) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %149 = "mid.unwrap"(%146) : (si32) -> i32
      %150 = "mid.unwrap"(%148) : (si32) -> i32
      %151 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Range">
      %152 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %153 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %154 = "hi.arithmetic"(%99, %153) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %155 = "hi.cast"(%152) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %156 = "mid.unwrap"(%155) : (si32) -> i32
      %157 = "hi.cast"(%154) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %158 = "mid.unwrap"(%157) : (si32) -> i32
      %159 = "mid.unwrap"(%151) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %160 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %161 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %162 = "mid.parameterizations_array"(%160, %161) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%162, %159, %156, %158) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %163 = "mid.unwrap"(%151) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %164 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %165 = "mid.method_call"(%164, %163) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 127 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %166 = "hi.cast"(%165) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"RangeIterator">
      %167 = "mid.refer"(%166) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      "mid.while"() ({
        %168 = "mid.unwrap"(%167) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %169 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %170 = "mid.method_call"(%169, %168) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %171 = "hi.cast"(%170) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %172 = "mid.checkflag"(%171) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %173 = "mid.unwrap"(%172) : (si1) -> i1
      }, {
        %174 = "hi.cast"(%171) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
        %175 = "hi.arithmetic"(%88, %174) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %176 = "hi.cast"(%175) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %177 = "mid.buffer_get"(%86, %176) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %178 = "hi.cast"(%177) {"from_typ" = si8, "to_typ" = si32, "from_typ_name" = "i8_typ", "to_typ_name" = "i32_typ"} : (si8) -> si32
        %179 = "mid.literal"() {"value" = -64 : i32, "typ" = i32} : () -> si32
        %180 = "hi.arithmetic"(%178, %179) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %181 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
        %182 = "hi.comparison"(%180, %181) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %183 = "mid.unwrap"(%182) : (si1) -> i1
        "mid.if"(%183) ({
          %184 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
          %185 = "hi.cast"(%184) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
          "mid.return"(%185) : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %186 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
        %187 = "hi.arithmetic"(%98, %186) {"op" = "LSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %188 = "mid.literal"() {"value" = 63 : i32, "typ" = i32} : () -> si32
        %189 = "hi.arithmetic"(%178, %188) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %190 = "hi.arithmetic"(%187, %189) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %191 = "hi.cast"(%190) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%98, %191) {"typ" = i32} : (si32, si32) -> ()
        %192 = "hi.cast"(%174) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
        "mid.assign"(%171, %192) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
      }) : () -> ()
      %193 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %194 = "hi.comparison"(%99, %193) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %195 = "hi.logical"(%194) ({
        %196 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
        %197 = "hi.comparison"(%98, %196) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        func.return %197 : si1
      }) {"op" = "and"} : (si1) -> si1
      %198 = "hi.logical"(%195) ({
        %199 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %200 = "hi.comparison"(%99, %199) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %201 = "hi.logical"(%200) ({
          %202 = "mid.literal"() {"value" = 2048 : i32, "typ" = i32} : () -> si32
          %203 = "hi.comparison"(%98, %202) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          func.return %203 : si1
        }) {"op" = "and"} : (si1) -> si1
        func.return %201 : si1
      }) {"op" = "or"} : (si1) -> si1
      %204 = "hi.logical"(%198) ({
        %205 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %206 = "hi.comparison"(%99, %205) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %207 = "hi.logical"(%206) ({
          %208 = "mid.literal"() {"value" = 65536 : i32, "typ" = i32} : () -> si32
          %209 = "hi.comparison"(%98, %208) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          func.return %209 : si1
        }) {"op" = "and"} : (si1) -> si1
        func.return %207 : si1
      }) {"op" = "or"} : (si1) -> si1
      %210 = "hi.logical"(%204) ({
        %211 = "mid.literal"() {"value" = -10240 : i32, "typ" = i32} : () -> si32
        %212 = "hi.comparison"(%98, %211) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %213 = "hi.logical"(%212) ({
          %214 = "mid.literal"() {"value" = -8193 : i32, "typ" = i32} : () -> si32
          %215 = "hi.comparison"(%98, %214) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          func.return %215 : si1
        }) {"op" = "and"} : (si1) -> si1
        func.return %213 : si1
      }) {"op" = "or"} : (si1) -> si1
      %216 = "hi.logical"(%210) ({
        %217 = "mid.literal"() {"value" = 1114111 : i32, "typ" = i32} : () -> si32
        %218 = "hi.comparison"(%98, %217) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        func.return %218 : si1
      }) {"op" = "or"} : (si1) -> si1
      %219 = "mid.unwrap"(%216) : (si1) -> i1
      "mid.if"(%219) ({
        %220 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %221 = "hi.cast"(%220) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
        "mid.return"(%221) : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %222 = "mid.unwrap"(%98) : (si32) -> i32
      %223 = "mid.unwrap"(%99) : (si32) -> i32
      %224 = "mid.create_tuple"(%222, %223) {"typ" = vector<2xi32>} : (i32, i32) -> !hi.tuple<[si32, si32]>
      %225 = "hi.cast"(%224) {"from_typ" = !hi.tuple<[si32, si32]>, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!hi.tuple<[si32, si32]>) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
      "mid.return"(%225) : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
    }) {"func_name" = "Unicode__Self_decode_one_bytesBufferi8_indexi32_leni32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb13(%226 : !llvm.ptr):
      %227 = "mid.invariant"(%226) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %228 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb14] : () -> ()
    ^bb15:
      %229 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%229, %228) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %230 = "llvm.getelementptr"(%226) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %231 = "mid.checkflag"(%230) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %232 = "llvm.load"(%231) : (!hi.bool) -> i1
      "cf.cond_br"(%232) [^bb15, ^bb15] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %233 = "llvm.getelementptr"(%226) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %234 = "mid.checkflag"(%233) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %235 = "llvm.load"(%234) : (!hi.bool) -> i1
      "cf.cond_br"(%235) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb14:
      %236 = "llvm.getelementptr"(%226) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %237 = "mid.checkflag"(%236) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %238 = "llvm.load"(%237) : (!hi.bool) -> i1
      "cf.cond_br"(%238) [^bb18, ^bb18] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %239 = "mid.addr_of"() {"global_name" = @Unicode} : () -> !llvm.ptr
      %240 = "llvm.load"(%228) : (!llvm.ptr) -> i32
      %241 = "llvm.getelementptr"(%239, %240) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %242 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %243 = "llvm.getelementptr"(%241, %242) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%243) : (!llvm.ptr) -> ()
    }) {"func_name" = "Unicode_B__Self_decode_one_bytesBufferi8_indexi32_leni32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb19(%244 : !llvm.ptr, %245 : i32):
      %246 = "mid.wrap"(%245) : (i32) -> si32
      %247 = "hi.cast"(%246) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %248 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %249 = "hi.cast"(%248) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %250 = "mid.create_buffer"(%249) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %251 = "mid.refer"(%250) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %252 = "mid.literal"() {"value" = 127 : i32, "typ" = i32} : () -> si32
      %253 = "hi.comparison"(%247, %252) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %254 = "mid.unwrap"(%253) : (si1) -> i1
      "mid.if"(%254) ({
        %255 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %256 = "hi.cast"(%247) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %257 = "hi.cast"(%256) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %258 = "hi.cast"(%255) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %258, %257) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %259 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %260 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %261 = "mid.unwrap"(%251) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %262 = "mid.unwrap"(%259) : (si32) -> i32
        %263 = "mid.unwrap"(%260) : (si32) -> i32
        %264 = "mid.unwrap"(%248) : (si32) -> i32
        %265 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %266 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %267 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %268 = "hi.cast"(%251) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %269 = "mid.unwrap"(%268) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %270 = "hi.cast"(%266) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %271 = "mid.unwrap"(%270) : (si32) -> i32
        %272 = "hi.cast"(%267) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %273 = "mid.unwrap"(%272) : (si32) -> i32
        %274 = "hi.cast"(%248) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %275 = "mid.unwrap"(%274) : (si32) -> i32
        %276 = "mid.unwrap"(%265) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %277 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %278 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %279 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %280 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %281 = "mid.parameterizations_array"(%277, %278, %279, %280) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%281, %276, %269, %271, %273, %275) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %282 = "hi.cast"(%265) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        "mid.return"(%282) : (!hi.fatptr<"String">) -> ()
      }) : (i1) -> ()
      %283 = "mid.literal"() {"value" = 2047 : i32, "typ" = i32} : () -> si32
      %284 = "hi.comparison"(%247, %283) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %285 = "mid.unwrap"(%284) : (si1) -> i1
      "mid.if"(%285) ({
        %286 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %287 = "mid.literal"() {"value" = -64 : i32, "typ" = i32} : () -> si32
        %288 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
        %289 = "hi.arithmetic"(%247, %288) {"op" = "RSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %290 = "hi.arithmetic"(%287, %289) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %291 = "hi.cast"(%290) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %292 = "hi.cast"(%291) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %293 = "hi.cast"(%286) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %293, %292) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %294 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %295 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
        %296 = "mid.literal"() {"value" = 63 : i32, "typ" = i32} : () -> si32
        %297 = "hi.arithmetic"(%247, %296) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %298 = "hi.arithmetic"(%295, %297) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %299 = "hi.cast"(%298) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %300 = "hi.cast"(%299) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %301 = "hi.cast"(%294) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %301, %300) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %302 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %303 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %304 = "mid.unwrap"(%251) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %305 = "mid.unwrap"(%302) : (si32) -> i32
        %306 = "mid.unwrap"(%303) : (si32) -> i32
        %307 = "mid.unwrap"(%248) : (si32) -> i32
        %308 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %309 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %310 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %311 = "hi.cast"(%251) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %312 = "mid.unwrap"(%311) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %313 = "hi.cast"(%309) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %314 = "mid.unwrap"(%313) : (si32) -> i32
        %315 = "hi.cast"(%310) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %316 = "mid.unwrap"(%315) : (si32) -> i32
        %317 = "hi.cast"(%248) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %318 = "mid.unwrap"(%317) : (si32) -> i32
        %319 = "mid.unwrap"(%308) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %320 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %321 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %322 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %323 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %324 = "mid.parameterizations_array"(%320, %321, %322, %323) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%324, %319, %312, %314, %316, %318) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %325 = "hi.cast"(%308) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        "mid.return"(%325) : (!hi.fatptr<"String">) -> ()
      }) : (i1) -> ()
      %326 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
      %327 = "hi.comparison"(%247, %326) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %328 = "mid.unwrap"(%327) : (si1) -> i1
      "mid.if"(%328) ({
        %329 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %330 = "mid.literal"() {"value" = -32 : i32, "typ" = i32} : () -> si32
        %331 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
        %332 = "hi.arithmetic"(%247, %331) {"op" = "RSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %333 = "hi.arithmetic"(%330, %332) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %334 = "hi.cast"(%333) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %335 = "hi.cast"(%334) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %336 = "hi.cast"(%329) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %336, %335) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %337 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %338 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
        %339 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
        %340 = "hi.arithmetic"(%247, %339) {"op" = "RSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %341 = "mid.literal"() {"value" = 63 : i32, "typ" = i32} : () -> si32
        %342 = "hi.arithmetic"(%340, %341) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %343 = "hi.arithmetic"(%338, %342) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %344 = "hi.cast"(%343) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %345 = "hi.cast"(%344) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %346 = "hi.cast"(%337) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %346, %345) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %347 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %348 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
        %349 = "mid.literal"() {"value" = 63 : i32, "typ" = i32} : () -> si32
        %350 = "hi.arithmetic"(%247, %349) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %351 = "hi.arithmetic"(%348, %350) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %352 = "hi.cast"(%351) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %353 = "hi.cast"(%352) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %354 = "hi.cast"(%347) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %354, %353) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %355 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %356 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %357 = "mid.unwrap"(%251) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %358 = "mid.unwrap"(%355) : (si32) -> i32
        %359 = "mid.unwrap"(%356) : (si32) -> i32
        %360 = "mid.unwrap"(%248) : (si32) -> i32
        %361 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %362 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %363 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %364 = "hi.cast"(%251) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %365 = "mid.unwrap"(%364) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %366 = "hi.cast"(%362) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %367 = "mid.unwrap"(%366) : (si32) -> i32
        %368 = "hi.cast"(%363) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %369 = "mid.unwrap"(%368) : (si32) -> i32
        %370 = "hi.cast"(%248) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %371 = "mid.unwrap"(%370) : (si32) -> i32
        %372 = "mid.unwrap"(%361) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %373 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %374 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %375 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %376 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %377 = "mid.parameterizations_array"(%373, %374, %375, %376) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%377, %372, %365, %367, %369, %371) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %378 = "hi.cast"(%361) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        "mid.return"(%378) : (!hi.fatptr<"String">) -> ()
      }) : (i1) -> ()
      %379 = "mid.literal"() {"value" = 1114111 : i32, "typ" = i32} : () -> si32
      %380 = "hi.comparison"(%247, %379) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %381 = "mid.unwrap"(%380) : (si1) -> i1
      "mid.if"(%381) ({
        %382 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %383 = "mid.literal"() {"value" = -16 : i32, "typ" = i32} : () -> si32
        %384 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
        %385 = "hi.arithmetic"(%247, %384) {"op" = "RSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %386 = "hi.arithmetic"(%383, %385) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %387 = "hi.cast"(%386) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %388 = "hi.cast"(%387) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %389 = "hi.cast"(%382) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %389, %388) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %390 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %391 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
        %392 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
        %393 = "hi.arithmetic"(%247, %392) {"op" = "RSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %394 = "mid.literal"() {"value" = 63 : i32, "typ" = i32} : () -> si32
        %395 = "hi.arithmetic"(%393, %394) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %396 = "hi.arithmetic"(%391, %395) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %397 = "hi.cast"(%396) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %398 = "hi.cast"(%397) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %399 = "hi.cast"(%390) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %399, %398) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %400 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %401 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
        %402 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
        %403 = "hi.arithmetic"(%247, %402) {"op" = "RSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %404 = "mid.literal"() {"value" = 63 : i32, "typ" = i32} : () -> si32
        %405 = "hi.arithmetic"(%403, %404) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %406 = "hi.arithmetic"(%401, %405) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %407 = "hi.cast"(%406) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %408 = "hi.cast"(%407) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %409 = "hi.cast"(%400) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %409, %408) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %410 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %411 = "mid.literal"() {"value" = -128 : i32, "typ" = i32} : () -> si32
        %412 = "mid.literal"() {"value" = 63 : i32, "typ" = i32} : () -> si32
        %413 = "hi.arithmetic"(%247, %412) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %414 = "hi.arithmetic"(%411, %413) {"op" = "bit_or", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %415 = "hi.cast"(%414) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
        %416 = "hi.cast"(%415) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %417 = "hi.cast"(%410) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%251, %417, %416) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %418 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %419 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %420 = "mid.unwrap"(%251) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %421 = "mid.unwrap"(%418) : (si32) -> i32
        %422 = "mid.unwrap"(%419) : (si32) -> i32
        %423 = "mid.unwrap"(%248) : (si32) -> i32
        %424 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %425 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %426 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %427 = "hi.cast"(%251) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %428 = "mid.unwrap"(%427) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %429 = "hi.cast"(%425) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %430 = "mid.unwrap"(%429) : (si32) -> i32
        %431 = "hi.cast"(%426) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %432 = "mid.unwrap"(%431) : (si32) -> i32
        %433 = "hi.cast"(%248) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %434 = "mid.unwrap"(%433) : (si32) -> i32
        %435 = "mid.unwrap"(%424) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %436 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %437 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %438 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %439 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %440 = "mid.parameterizations_array"(%436, %437, %438, %439) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%440, %435, %428, %430, %432, %434) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %441 = "hi.cast"(%424) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        "mid.return"(%441) : (!hi.fatptr<"String">) -> ()
      }) : (i1) -> ()
      %442 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %443 = "mid.class_method_call"(%442) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "class_name" = "Unicode"} : (!llvm.ptr) -> !hi.fatptr<"String">
      %444 = "hi.cast"(%443) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %445 = "hi.cast"(%444) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%445) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Unicode__Self_encode_one_cpi32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb20(%446 : !llvm.ptr):
      %447 = "mid.invariant"(%446) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %448 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb21] : () -> ()
    ^bb22:
      %449 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%449, %448) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb23] : () -> ()
    ^bb21:
      %450 = "llvm.getelementptr"(%446) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %451 = "mid.checkflag"(%450) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %452 = "llvm.load"(%451) : (!hi.bool) -> i1
      "cf.cond_br"(%452) [^bb22, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %453 = "mid.addr_of"() {"global_name" = @Unicode} : () -> !llvm.ptr
      %454 = "llvm.load"(%448) : (!llvm.ptr) -> i32
      %455 = "llvm.getelementptr"(%453, %454) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %456 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %457 = "llvm.getelementptr"(%455, %456) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%457) : (!llvm.ptr) -> ()
    }) {"func_name" = "Unicode_B__Self_encode_one_cpi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Representable", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb24(%458 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %459 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %460 : !llvm.ptr):
      %461 = "mid.wrap"(%458) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Representable">
      %462 = "hi.cast"(%461) {"from_typ" = !hi.fatptr<"Representable">, "to_typ" = !hi.fatptr<"Representable">, "from_typ_name" = "Representable", "to_typ_name" = "Representable"} : (!hi.fatptr<"Representable">) -> !hi.fatptr<"Representable">
      %463 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %464 = "hi.cast"(%463) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %465 = "mid.create_buffer"(%464) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %466 = "mid.refer"(%465) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %467 = "mid.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "Object"} : () -> !llvm.ptr
      %468 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%466, %468, %467) {"typ" = !llvm.array<6 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %469 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %470 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %471 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %472 = "mid.unwrap"(%466) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %473 = "mid.unwrap"(%469) : (si32) -> i32
      %474 = "mid.unwrap"(%470) : (si32) -> i32
      %475 = "mid.unwrap"(%471) : (si32) -> i32
      %476 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "single_region_nkyfzfwkhm"} : () -> !hi.fatptr<"String">
      %477 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %478 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %479 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %480 = "hi.cast"(%466) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %481 = "mid.unwrap"(%480) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %482 = "hi.cast"(%477) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %483 = "mid.unwrap"(%482) : (si32) -> i32
      %484 = "hi.cast"(%478) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %485 = "mid.unwrap"(%484) : (si32) -> i32
      %486 = "hi.cast"(%479) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %487 = "mid.unwrap"(%486) : (si32) -> i32
      %488 = "mid.unwrap"(%476) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %489 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %490 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %491 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %492 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %493 = "mid.parameterizations_array"(%489, %490, %491, %492) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%493, %488, %481, %483, %485, %487) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %494 = "hi.cast"(%476) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%494) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Representable_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb25(%495 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %496 : !llvm.ptr):
      %497 = "mid.invariant"(%496) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %498 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      %499 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%499, %498) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb27] : () -> ()
    ^bb27:
      %500 = "llvm.extractvalue"(%495) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %501 = "llvm.load"(%498) : (!llvm.ptr) -> i32
      %502 = "llvm.getelementptr"(%500, %501) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %503 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %504 = "llvm.getelementptr"(%502, %503) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%504) : (!llvm.ptr) -> ()
    }) {"func_name" = "Representable_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_String", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_bytes", "getter_name" = "String_getter_bytes", "setter_name" = "String_setter_bytes"} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_byte_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_byte_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_byte_length", "getter_name" = "String_getter_byte_length", "setter_name" = "String_setter_byte_length"} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_char_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_char_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_char_length", "getter_name" = "String_getter_char_length", "setter_name" = "String_setter_char_length"} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_capacity", "getter_name" = "String_getter_capacity", "setter_name" = "String_setter_capacity"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 4 : i32, "meth_name" = "String_field_String_0", "id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> ()
    "mid.func"() ({
    ^bb28(%505 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %507 : !llvm.ptr):
      %508 = "mid.wrap"(%505) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %509 = "hi.cast"(%508) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %510 = "mid.get_field"(%509) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %511 = "hi.cast"(%510) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%511) : (si32) -> ()
    }) {"func_name" = "String_byte_length_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb29(%512 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %513 : !llvm.ptr):
      %514 = "mid.invariant"(%513) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %515 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb30] : () -> ()
    ^bb30:
      %516 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%516, %515) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb31:
      %517 = "llvm.extractvalue"(%512) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %518 = "llvm.load"(%515) : (!llvm.ptr) -> i32
      %519 = "llvm.getelementptr"(%517, %518) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %520 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %521 = "llvm.getelementptr"(%519, %520) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%521) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_byte_length_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb32(%522 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %523 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %524 : !llvm.ptr):
      %525 = "mid.wrap"(%522) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %526 = "hi.cast"(%525) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %527 = "mid.get_field"(%526) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %528 = "hi.cast"(%527) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%528) : (si32) -> ()
    }) {"func_name" = "String_capacity_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb33(%529 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %530 : !llvm.ptr):
      %531 = "mid.invariant"(%530) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %532 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      %533 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%533, %532) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb35] : () -> ()
    ^bb35:
      %534 = "llvm.extractvalue"(%529) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %535 = "llvm.load"(%532) : (!llvm.ptr) -> i32
      %536 = "llvm.getelementptr"(%534, %535) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %537 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %538 = "llvm.getelementptr"(%536, %537) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%538) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb36(%539 : !llvm.ptr, %540 : !llvm.struct<(!llvm.ptr)>, %541 : i32):
      %542 = "mid.wrap"(%540) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si8>
      %543 = "hi.cast"(%542) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %544 = "mid.wrap"(%541) : (i32) -> si32
      %545 = "hi.cast"(%544) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %546 = "mid.unwrap"(%545) : (si32) -> i32
      %547 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %548 = "hi.cast"(%545) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %549 = "mid.unwrap"(%548) : (si32) -> i32
      %550 = "mid.unwrap"(%547) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %551 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %552 = "mid.parameterizations_array"(%551) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%552, %550, %549) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %553 = "mid.refer"(%547) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %554 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %555 = "hi.comparison"(%554, %545) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %556 = "mid.unwrap"(%555) : (si1) -> i1
      }, {
        %557 = "hi.cast"(%543) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %558 = "mid.unwrap"(%557) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %559 = "hi.cast"(%554) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %560 = "mid.unwrap"(%559) : (si32) -> i32
        %561 = "hi.cast"(%545) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %562 = "mid.unwrap"(%561) : (si32) -> i32
        %563 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %564 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %565 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %566 = "mid.parameterizations_array"(%563, %564, %565) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %567 = "mid.class_method_call"(%566, %558, %560, %562) {"offset" = 3 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i64)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i64)>, "class_name" = "Unicode"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
        %568 = "hi.cast"(%567) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
        %569 = "mid.checkflag"(%568) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> si1
        %570 = "mid.unwrap"(%569) : (si1) -> i1
        "mid.if"(%570) ({
          %571 = "hi.cast"(%568) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.nil
          %572 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InvalidUTF8Error", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"InvalidUTF8Error">
          %573 = "mid.unwrap"(%572) : (!hi.fatptr<"InvalidUTF8Error">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %574 = "mid.parameterizations_array"() : () -> !llvm.ptr
          "mid.method_call"(%574, %573) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
          %575 = "mid.literal"() {"value" = 141 : i32, "typ" = i32} : () -> si32
          %576 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
          %577 = "hi.cast"(%576) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
          %578 = "mid.create_buffer"(%577) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
          %579 = "mid.refer"(%578) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
          %580 = "mid.literal"() {"typ" = !llvm.array<55 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/core.mini"} : () -> !llvm.ptr
          %581 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
          "mid.buffer_set"(%579, %581, %580) {"typ" = !llvm.array<55 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
          %582 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
          %583 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
          %584 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
          %585 = "mid.unwrap"(%579) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
          %586 = "mid.unwrap"(%582) : (si32) -> i32
          %587 = "mid.unwrap"(%583) : (si32) -> i32
          %588 = "mid.unwrap"(%584) : (si32) -> i32
          %589 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
          %590 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
          %591 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
          %592 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
          %593 = "hi.cast"(%579) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
          %594 = "mid.unwrap"(%593) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
          %595 = "hi.cast"(%590) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %596 = "mid.unwrap"(%595) : (si32) -> i32
          %597 = "hi.cast"(%591) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %598 = "mid.unwrap"(%597) : (si32) -> i32
          %599 = "hi.cast"(%592) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %600 = "mid.unwrap"(%599) : (si32) -> i32
          %601 = "mid.unwrap"(%589) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %602 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %603 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %604 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %605 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %606 = "mid.parameterizations_array"(%602, %603, %604, %605) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%606, %601, %594, %596, %598, %600) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
          %607 = "hi.cast"(%575) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %608 = "mid.unwrap"(%607) : (si32) -> i32
          %609 = "hi.cast"(%589) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
          %610 = "mid.unwrap"(%609) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %611 = "mid.unwrap"(%572) : (!hi.fatptr<"InvalidUTF8Error">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %612 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %613 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
          %614 = "mid.parameterizations_array"(%612, %613) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%614, %611, %608, %610) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
          %615 = "hi.cast"(%572) {"from_typ" = !hi.fatptr<"InvalidUTF8Error">, "to_typ" = !hi.union<[!hi.fatptr<"InvalidUTF8Error">, !hi.nil]>, "from_typ_name" = "InvalidUTF8Error", "to_typ_name" = "union_typ"} : (!hi.fatptr<"InvalidUTF8Error">) -> !hi.union<[!hi.fatptr<"InvalidUTF8Error">, !hi.nil]>
          %616 = "mid.unwrap"(%615) : (!hi.union<[!hi.fatptr<"InvalidUTF8Error">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %617 = "mid.coro_yield"(%616) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
          %618 = "mid.wrap"(%617) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"InvalidUTF8Error">, !hi.nil]>
          %619 = "hi.cast"(%571) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
          "mid.assign"(%568, %619) {"typ" = !llvm.struct<(!llvm.ptr, i64)>} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %620 = "mid.checkflag"(%568) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> si1
        %621 = "mid.unwrap"(%620) : (si1) -> i1
        "mid.if"(%621) ({
          %622 = "hi.cast"(%568) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.tuple<[si32, si32]>, "from_typ_name" = "union_typ", "to_typ_name" = "tuple_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.tuple<[si32, si32]>
          %623 = "mid.tuple_indexation"(%622) {"typ" = vector<2xi32>, "index" = 1 : i32} : (!hi.tuple<[si32, si32]>) -> si32
          %624 = "hi.cast"(%543) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
          %625 = "mid.unwrap"(%624) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
          %626 = "hi.cast"(%554) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %627 = "mid.unwrap"(%626) : (si32) -> i32
          %628 = "hi.cast"(%623) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %629 = "mid.unwrap"(%628) : (si32) -> i32
          %630 = "mid.unwrap"(%553) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %631 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %632 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %633 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %634 = "mid.parameterizations_array"(%631, %632, %633) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          %635 = "mid.method_call"(%634, %630, %625, %627, %629) {"offset" = 14 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> !hi.fatptr<"String">
          %636 = "hi.cast"(%635) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
          %637 = "hi.arithmetic"(%554, %623) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %638 = "hi.cast"(%637) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%554, %638) {"typ" = i32} : (si32, si32) -> ()
          %639 = "hi.cast"(%622) {"from_typ" = !hi.tuple<[si32, si32]>, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!hi.tuple<[si32, si32]>) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
          "mid.assign"(%568, %639) {"typ" = !llvm.struct<(!llvm.ptr, i64)>} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
      }) : () -> ()
      %640 = "hi.cast"(%553) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%640) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String__Self_from_bytes_source_bytesBufferi8_source_leni32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.fatptr<"InvalidUTF8Error">} : () -> ()
    "mid.func"() ({
    ^bb37(%641 : !llvm.ptr):
      %642 = "mid.invariant"(%641) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %643 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb39:
      %644 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%644, %643) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb40] : () -> ()
    ^bb41:
      %645 = "llvm.getelementptr"(%641) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %646 = "mid.checkflag"(%645) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %647 = "llvm.load"(%646) : (!hi.bool) -> i1
      "cf.cond_br"(%647) [^bb39, ^bb39] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb38:
      %648 = "llvm.getelementptr"(%641) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %649 = "mid.checkflag"(%648) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %650 = "llvm.load"(%649) : (!hi.bool) -> i1
      "cf.cond_br"(%650) [^bb41, ^bb41] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb40:
      %651 = "mid.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
      %652 = "llvm.load"(%643) : (!llvm.ptr) -> i32
      %653 = "llvm.getelementptr"(%651, %652) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %654 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %655 = "llvm.getelementptr"(%653, %654) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%655) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__Self_from_bytes_source_bytesBufferi8_source_leni32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb42(%656 : !llvm.ptr, %657 : !llvm.struct<(!llvm.ptr)>, %658 : i32):
      %659 = "mid.wrap"(%657) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si8>
      %660 = "hi.cast"(%659) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %661 = "mid.wrap"(%658) : (i32) -> si32
      %662 = "hi.cast"(%661) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %663 = "mid.unwrap"(%662) : (si32) -> i32
      %664 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %665 = "hi.cast"(%662) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %666 = "mid.unwrap"(%665) : (si32) -> i32
      %667 = "mid.unwrap"(%664) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %668 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %669 = "mid.parameterizations_array"(%668) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%669, %667, %666) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %670 = "mid.refer"(%664) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %671 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %672 = "mid.class_method_call"(%671) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>, "class_name" = "Unicode"} : (!llvm.ptr) -> !hi.buffer<si8>
      %673 = "hi.cast"(%672) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %674 = "mid.refer"(%673) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %675 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %676 = "hi.comparison"(%675, %662) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %677 = "mid.unwrap"(%676) : (si1) -> i1
      }, {
        %678 = "hi.cast"(%660) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %679 = "mid.unwrap"(%678) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %680 = "hi.cast"(%675) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %681 = "mid.unwrap"(%680) : (si32) -> i32
        %682 = "hi.cast"(%662) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %683 = "mid.unwrap"(%682) : (si32) -> i32
        %684 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %685 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %686 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %687 = "mid.parameterizations_array"(%684, %685, %686) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %688 = "mid.class_method_call"(%687, %679, %681, %683) {"offset" = 3 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i64)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i64)>, "class_name" = "Unicode"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
        %689 = "hi.cast"(%688) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
        %690 = "mid.checkflag"(%689) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> si1
        %691 = "mid.unwrap"(%690) : (si1) -> i1
        "mid.if"(%691) ({
          %692 = "hi.cast"(%689) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.tuple<[si32, si32]>, "from_typ_name" = "union_typ", "to_typ_name" = "tuple_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.tuple<[si32, si32]>
          %693 = "mid.tuple_indexation"(%692) {"typ" = vector<2xi32>, "index" = 1 : i32} : (!hi.tuple<[si32, si32]>) -> si32
          %694 = "hi.cast"(%660) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
          %695 = "mid.unwrap"(%694) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
          %696 = "hi.cast"(%675) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %697 = "mid.unwrap"(%696) : (si32) -> i32
          %698 = "hi.cast"(%693) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %699 = "mid.unwrap"(%698) : (si32) -> i32
          %700 = "mid.unwrap"(%670) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %701 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %702 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %703 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %704 = "mid.parameterizations_array"(%701, %702, %703) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          %705 = "mid.method_call"(%704, %700, %695, %697, %699) {"offset" = 14 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> !hi.fatptr<"String">
          %706 = "hi.cast"(%705) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
          %707 = "hi.arithmetic"(%675, %693) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %708 = "hi.cast"(%707) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%675, %708) {"typ" = i32} : (si32, si32) -> ()
          %709 = "hi.cast"(%692) {"from_typ" = !hi.tuple<[si32, si32]>, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!hi.tuple<[si32, si32]>) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
          "mid.assign"(%689, %709) {"typ" = !llvm.struct<(!llvm.ptr, i64)>} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
        }, {
          %710 = "hi.cast"(%689) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.nil
          %711 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
          %712 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
          %713 = "hi.cast"(%674) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
          %714 = "mid.unwrap"(%713) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
          %715 = "hi.cast"(%711) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %716 = "mid.unwrap"(%715) : (si32) -> i32
          %717 = "hi.cast"(%712) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %718 = "mid.unwrap"(%717) : (si32) -> i32
          %719 = "mid.unwrap"(%670) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %720 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %721 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %722 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %723 = "mid.parameterizations_array"(%720, %721, %722) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          %724 = "mid.method_call"(%723, %719, %714, %716, %718) {"offset" = 14 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> !hi.fatptr<"String">
          %725 = "hi.cast"(%724) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
          %726 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %727 = "hi.arithmetic"(%675, %726) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %728 = "hi.cast"(%727) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%675, %728) {"typ" = i32} : (si32, si32) -> ()
          %729 = "hi.cast"(%710) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
          "mid.assign"(%689, %729) {"typ" = !llvm.struct<(!llvm.ptr, i64)>} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
        }) : (i1) -> ()
      }) : () -> ()
      %730 = "hi.cast"(%670) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%730) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String__Self_from_bytes_lossy_source_bytesBufferi8_source_leni32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb43(%731 : !llvm.ptr):
      %732 = "mid.invariant"(%731) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %733 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb44] : () -> ()
    ^bb45:
      %734 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%734, %733) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb46] : () -> ()
    ^bb47:
      %735 = "llvm.getelementptr"(%731) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %736 = "mid.checkflag"(%735) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %737 = "llvm.load"(%736) : (!hi.bool) -> i1
      "cf.cond_br"(%737) [^bb45, ^bb45] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb44:
      %738 = "llvm.getelementptr"(%731) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %739 = "mid.checkflag"(%738) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %740 = "llvm.load"(%739) : (!hi.bool) -> i1
      "cf.cond_br"(%740) [^bb47, ^bb47] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb46:
      %741 = "mid.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
      %742 = "llvm.load"(%733) : (!llvm.ptr) -> i32
      %743 = "llvm.getelementptr"(%741, %742) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %744 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %745 = "llvm.getelementptr"(%743, %744) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%745) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__Self_from_bytes_lossy_source_bytesBufferi8_source_leni32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb48(%746 : !llvm.ptr, %747 : !llvm.struct<(!llvm.ptr)>):
      %748 = "mid.wrap"(%747) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si8>
      %749 = "hi.cast"(%748) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %750 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> si8
      %751 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %752 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %753 = "mid.unwrap"(%752) : (!hi.bool) -> i1
      }, {
        %754 = "hi.cast"(%751) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %755 = "mid.buffer_get"(%749, %754) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %756 = "hi.comparison"(%755, %750) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
        %757 = "mid.unwrap"(%756) : (si1) -> i1
        "mid.if"(%757) ({
          "mid.break"() [^bb49] : () -> ()
        }) : (i1) -> ()
        %758 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %759 = "hi.arithmetic"(%751, %758) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %760 = "hi.cast"(%759) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%751, %760) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %761 = "hi.cast"(%749) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %762 = "mid.unwrap"(%761) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %763 = "hi.cast"(%751) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %764 = "mid.unwrap"(%763) : (si32) -> i32
      %765 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %766 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %767 = "mid.parameterizations_array"(%765, %766) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %768 = "mid.class_method_call"(%767, %762, %764) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "class_name" = "String"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32) -> !hi.fatptr<"String">
      %769 = "hi.cast"(%768) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %770 = "hi.cast"(%769) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%770) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String__Self_from_c_string_c_stringBufferi8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb50(%771 : !llvm.ptr):
      %772 = "mid.invariant"(%771) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %773 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb51] : () -> ()
    ^bb52:
      %774 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%774, %773) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb53] : () -> ()
    ^bb51:
      %775 = "llvm.getelementptr"(%771) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %776 = "mid.checkflag"(%775) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %777 = "llvm.load"(%776) : (!hi.bool) -> i1
      "cf.cond_br"(%777) [^bb52, ^bb52] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %778 = "mid.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
      %779 = "llvm.load"(%773) : (!llvm.ptr) -> i32
      %780 = "llvm.getelementptr"(%778, %779) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %781 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %782 = "llvm.getelementptr"(%780, %781) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%782) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__Self_from_c_string_c_stringBufferi8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb54(%783 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %784 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %785 : !llvm.ptr):
      %786 = "mid.wrap"(%783) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %787 = "hi.cast"(%786) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %788 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %789 = "hi.cast"(%788) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %790 = "mid.create_buffer"(%789) {"typ" = i8, "region_id" = "self.bytes"} : (si64) -> !llvm.ptr
      %791 = "hi.cast"(%790) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<si8>
      "mid.set_field"(%787, %791) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<si8>) -> ()
      %792 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %793 = "hi.cast"(%792) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%787, %793) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %794 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %795 = "hi.cast"(%794) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%787, %795) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %796 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %797 = "hi.cast"(%796) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%787, %797) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
    }) {"func_name" = "String_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb55(%798 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %799 : !llvm.ptr):
      %800 = "mid.invariant"(%799) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %801 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb56] : () -> ()
    ^bb56:
      %802 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%802, %801) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb57] : () -> ()
    ^bb57:
      %803 = "llvm.extractvalue"(%798) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %804 = "llvm.load"(%801) : (!llvm.ptr) -> i32
      %805 = "llvm.getelementptr"(%803, %804) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %806 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %807 = "llvm.getelementptr"(%805, %806) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%807) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb58(%808 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %809 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %810 : !llvm.ptr, %811 : i32):
      %812 = "mid.wrap"(%808) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %813 = "hi.cast"(%812) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %814 = "mid.wrap"(%811) : (i32) -> si32
      %815 = "hi.cast"(%814) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %816 = "hi.cast"(%815) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%813, %816) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %817 = "mid.get_field"(%813) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %818 = "hi.cast"(%817) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %819 = "mid.create_buffer"(%818) {"typ" = i8, "region_id" = "self.bytes"} : (si64) -> !llvm.ptr
      %820 = "hi.cast"(%819) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<si8>
      "mid.set_field"(%813, %820) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<si8>) -> ()
      %821 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %822 = "hi.cast"(%821) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%813, %822) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %823 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %824 = "hi.cast"(%823) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%813, %824) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
    }) {"func_name" = "String_init_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb59(%825 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %826 : !llvm.ptr):
      %827 = "mid.invariant"(%826) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %828 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb60] : () -> ()
    ^bb61:
      %829 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%829, %828) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb62] : () -> ()
    ^bb60:
      %830 = "llvm.getelementptr"(%826) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %831 = "mid.checkflag"(%830) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %832 = "llvm.load"(%831) : (!hi.bool) -> i1
      "cf.cond_br"(%832) [^bb61, ^bb61] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb62:
      %833 = "llvm.extractvalue"(%825) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %834 = "llvm.load"(%828) : (!llvm.ptr) -> i32
      %835 = "llvm.getelementptr"(%833, %834) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %836 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %837 = "llvm.getelementptr"(%835, %836) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%837) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb63(%838 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %839 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %840 : !llvm.ptr, %841 : !llvm.struct<(!llvm.ptr)>, %842 : i32, %843 : i32, %844 : i32):
      %845 = "mid.wrap"(%838) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %846 = "hi.cast"(%845) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %847 = "mid.wrap"(%841) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si8>
      %848 = "hi.cast"(%847) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %849 = "hi.cast"(%848) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      "mid.set_field"(%846, %849) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<si8>) -> ()
      %850 = "mid.wrap"(%842) : (i32) -> si32
      %851 = "hi.cast"(%850) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %852 = "hi.cast"(%851) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%846, %852) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %853 = "mid.wrap"(%843) : (i32) -> si32
      %854 = "hi.cast"(%853) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %855 = "hi.cast"(%854) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%846, %855) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %856 = "mid.wrap"(%844) : (i32) -> si32
      %857 = "hi.cast"(%856) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %858 = "hi.cast"(%857) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%846, %858) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
    }) {"func_name" = "String_init_bytesBufferi8_byte_lengthi32_char_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb64(%859 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %860 : !llvm.ptr):
      %861 = "mid.invariant"(%860) {"num_bytes" = 32 : i64} : (!llvm.ptr) -> !llvm.ptr
      %862 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb65] : () -> ()
    ^bb66:
      %863 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%863, %862) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb67] : () -> ()
    ^bb68:
      %864 = "llvm.getelementptr"(%860) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %865 = "mid.checkflag"(%864) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %866 = "llvm.load"(%865) : (!hi.bool) -> i1
      "cf.cond_br"(%866) [^bb66, ^bb66] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %867 = "llvm.getelementptr"(%860) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %868 = "mid.checkflag"(%867) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %869 = "llvm.load"(%868) : (!hi.bool) -> i1
      "cf.cond_br"(%869) [^bb68, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb70:
      %870 = "llvm.getelementptr"(%860) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %871 = "mid.checkflag"(%870) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %872 = "llvm.load"(%871) : (!hi.bool) -> i1
      "cf.cond_br"(%872) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb65:
      %873 = "llvm.getelementptr"(%860) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %874 = "mid.checkflag"(%873) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %875 = "llvm.load"(%874) : (!hi.bool) -> i1
      "cf.cond_br"(%875) [^bb70, ^bb70] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb67:
      %876 = "llvm.extractvalue"(%859) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %877 = "llvm.load"(%862) : (!llvm.ptr) -> i32
      %878 = "llvm.getelementptr"(%876, %877) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %879 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %880 = "llvm.getelementptr"(%878, %879) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%880) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_bytesBufferi8_byte_lengthi32_char_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb71(%881 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %882 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %883 : !llvm.ptr):
      %884 = "mid.wrap"(%881) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %885 = "hi.cast"(%884) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %886 = "mid.get_field"(%885) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %887 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %888 = "hi.arithmetic"(%886, %887) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %889 = "hi.cast"(%888) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %890 = "mid.create_buffer"(%889) {"typ" = i8, "region_id" = "single_region_gvvgxsaakm"} : (si64) -> !llvm.ptr
      %891 = "mid.refer"(%890) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %892 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %893 = "mid.get_field"(%885) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %894 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %895 = "hi.arithmetic"(%893, %894) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %896 = "mid.unwrap"(%892) : (si32) -> i32
      %897 = "mid.unwrap"(%895) : (si32) -> i32
      %898 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "single_region_gvvgxsaakm"} : () -> !hi.fatptr<"Range">
      %899 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %900 = "mid.get_field"(%885) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %901 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %902 = "hi.arithmetic"(%900, %901) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %903 = "hi.cast"(%899) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %904 = "mid.unwrap"(%903) : (si32) -> i32
      %905 = "hi.cast"(%902) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %906 = "mid.unwrap"(%905) : (si32) -> i32
      %907 = "mid.unwrap"(%898) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %908 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %909 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %910 = "mid.parameterizations_array"(%908, %909) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%910, %907, %904, %906) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %911 = "mid.unwrap"(%898) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %912 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %913 = "mid.method_call"(%912, %911) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 127 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %914 = "hi.cast"(%913) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"RangeIterator">
      %915 = "mid.refer"(%914) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      "mid.while"() ({
        %916 = "mid.unwrap"(%915) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %917 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %918 = "mid.method_call"(%917, %916) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %919 = "hi.cast"(%918) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %920 = "mid.checkflag"(%919) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %921 = "mid.unwrap"(%920) : (si1) -> i1
      }, {
        %922 = "hi.cast"(%919) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
        %923 = "mid.get_field"(%885) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
        %924 = "hi.cast"(%922) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %925 = "mid.buffer_get"(%923, %924) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %926 = "hi.cast"(%925) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %927 = "hi.cast"(%922) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%891, %927, %926) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %928 = "hi.cast"(%922) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
        "mid.assign"(%919, %928) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
      }) : () -> ()
      %929 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> si8
      %930 = "mid.get_field"(%885) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %931 = "hi.cast"(%929) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      %932 = "hi.cast"(%930) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%891, %932, %931) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
      %933 = "hi.cast"(%891) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      "mid.return"(%933) : (!hi.buffer<si8>) -> ()
    }) {"func_name" = "String_c_string_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb72(%934 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %935 : !llvm.ptr):
      %936 = "mid.invariant"(%935) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %937 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb73] : () -> ()
    ^bb73:
      %938 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%938, %937) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb74:
      %939 = "llvm.extractvalue"(%934) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %940 = "llvm.load"(%937) : (!llvm.ptr) -> i32
      %941 = "llvm.getelementptr"(%939, %940) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %942 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %943 = "llvm.getelementptr"(%941, %942) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%943) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_c_string_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb75(%944 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %945 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %946 : !llvm.ptr, %947 : !llvm.struct<(!llvm.ptr)>, %948 : i32, %949 : i32):
      %950 = "mid.wrap"(%944) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %951 = "hi.cast"(%950) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %952 = "mid.wrap"(%947) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si8>
      %953 = "hi.cast"(%952) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %954 = "mid.wrap"(%948) : (i32) -> si32
      %955 = "hi.cast"(%954) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %956 = "mid.wrap"(%949) : (i32) -> si32
      %957 = "hi.cast"(%956) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %958 = "mid.get_field"(%951) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %959 = "hi.arithmetic"(%958, %957) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %960 = "mid.get_field"(%951) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %961 = "hi.comparison"(%959, %960) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %962 = "mid.unwrap"(%961) : (si1) -> i1
      "mid.if"(%962) ({
        %963 = "mid.get_field"(%951) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
        %964 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %965 = "hi.arithmetic"(%963, %964) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %966 = "hi.cast"(%965) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %967 = "mid.unwrap"(%966) : (si32) -> i32
        %968 = "mid.unwrap"(%951) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %969 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %970 = "mid.parameterizations_array"(%969) : (!llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%970, %968, %967) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      }) : (i1) -> ()
      %971 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %972 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %973 = "hi.arithmetic"(%957, %972) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %974 = "mid.unwrap"(%971) : (si32) -> i32
      %975 = "mid.unwrap"(%973) : (si32) -> i32
      %976 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "single_region_yapwplogym"} : () -> !hi.fatptr<"Range">
      %977 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %978 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %979 = "hi.arithmetic"(%957, %978) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %980 = "hi.cast"(%977) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %981 = "mid.unwrap"(%980) : (si32) -> i32
      %982 = "hi.cast"(%979) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %983 = "mid.unwrap"(%982) : (si32) -> i32
      %984 = "mid.unwrap"(%976) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %985 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %986 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %987 = "mid.parameterizations_array"(%985, %986) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%987, %984, %981, %983) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %988 = "mid.unwrap"(%976) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %989 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %990 = "mid.method_call"(%989, %988) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 127 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %991 = "hi.cast"(%990) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"RangeIterator">
      %992 = "mid.refer"(%991) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      "mid.while"() ({
        %993 = "mid.unwrap"(%992) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %994 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %995 = "mid.method_call"(%994, %993) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %996 = "hi.cast"(%995) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %997 = "mid.checkflag"(%996) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %998 = "mid.unwrap"(%997) : (si1) -> i1
      }, {
        %999 = "hi.cast"(%996) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
        %1000 = "mid.get_field"(%951) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
        %1001 = "hi.arithmetic"(%1000, %999) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1002 = "hi.arithmetic"(%955, %999) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1003 = "hi.cast"(%1002) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1004 = "mid.buffer_get"(%953, %1003) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %1005 = "mid.get_field"(%951) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
        %1006 = "hi.cast"(%1004) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %1007 = "hi.cast"(%1001) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%1005, %1007, %1006) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %1008 = "hi.cast"(%999) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
        "mid.assign"(%996, %1008) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
      }) : () -> ()
      %1009 = "mid.get_field"(%951) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1010 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1011 = "hi.arithmetic"(%1009, %1010) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1012 = "hi.cast"(%1011) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%951, %1012) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %1013 = "mid.get_field"(%951) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1014 = "hi.arithmetic"(%1013, %957) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1015 = "hi.cast"(%1014) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%951, %1015) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %1016 = "hi.cast"(%951) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%1016) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_append_char_from_bytes_source_bytesBufferi8_start_indexi32_n_bytesi32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb76(%1017 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1018 : !llvm.ptr):
      %1019 = "mid.invariant"(%1018) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1020 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %1021 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
      "llvm.store"(%1021, %1020) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb80:
      %1022 = "llvm.getelementptr"(%1018) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1023 = "mid.checkflag"(%1022) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1024 = "llvm.load"(%1023) : (!hi.bool) -> i1
      "cf.cond_br"(%1024) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb81:
      %1025 = "llvm.getelementptr"(%1018) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1026 = "mid.checkflag"(%1025) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1027 = "llvm.load"(%1026) : (!hi.bool) -> i1
      "cf.cond_br"(%1027) [^bb80, ^bb80] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb77:
      %1028 = "llvm.getelementptr"(%1018) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1029 = "mid.checkflag"(%1028) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %1030 = "llvm.load"(%1029) : (!hi.bool) -> i1
      "cf.cond_br"(%1030) [^bb81, ^bb81] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %1031 = "llvm.extractvalue"(%1017) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1032 = "llvm.load"(%1020) : (!llvm.ptr) -> i32
      %1033 = "llvm.getelementptr"(%1031, %1032) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1034 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1035 = "llvm.getelementptr"(%1033, %1034) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1035) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_append_char_from_bytes_source_bytesBufferi8_start_indexi32_n_bytesi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb82(%1036 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1037 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1038 : !llvm.ptr, %1039 : i32):
      %1040 = "mid.wrap"(%1036) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1041 = "hi.cast"(%1040) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1042 = "mid.wrap"(%1039) : (i32) -> si32
      %1043 = "hi.cast"(%1042) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1044 = "mid.get_field"(%1041) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1045 = "hi.comparison"(%1043, %1044) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1046 = "mid.unwrap"(%1045) : (si1) -> i1
      "mid.if"(%1046) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %1047 = "hi.cast"(%1043) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%1041, %1047) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %1048 = "mid.get_field"(%1041) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
      %1049 = "mid.refer"(%1048) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1050 = "mid.get_field"(%1041) {"offset" = 3 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1051 = "hi.cast"(%1050) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1052 = "mid.create_buffer"(%1051) {"typ" = i8, "region_id" = "single_region_ouvayrfcyw"} : (si64) -> !llvm.ptr
      %1053 = "hi.cast"(%1052) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<si8>
      "mid.set_field"(%1041, %1053) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<si8>) -> ()
      %1054 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1055 = "mid.get_field"(%1041) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1056 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1057 = "hi.arithmetic"(%1055, %1056) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1058 = "mid.unwrap"(%1054) : (si32) -> i32
      %1059 = "mid.unwrap"(%1057) : (si32) -> i32
      %1060 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "single_region_ouvayrfcyw"} : () -> !hi.fatptr<"Range">
      %1061 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1062 = "mid.get_field"(%1041) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1063 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1064 = "hi.arithmetic"(%1062, %1063) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1065 = "hi.cast"(%1061) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1066 = "mid.unwrap"(%1065) : (si32) -> i32
      %1067 = "hi.cast"(%1064) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1068 = "mid.unwrap"(%1067) : (si32) -> i32
      %1069 = "mid.unwrap"(%1060) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1070 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1071 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1072 = "mid.parameterizations_array"(%1070, %1071) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1072, %1069, %1066, %1068) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %1073 = "mid.unwrap"(%1060) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1074 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1075 = "mid.method_call"(%1074, %1073) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 127 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1076 = "hi.cast"(%1075) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"RangeIterator">
      %1077 = "mid.refer"(%1076) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      "mid.while"() ({
        %1078 = "mid.unwrap"(%1077) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1079 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1080 = "mid.method_call"(%1079, %1078) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1081 = "hi.cast"(%1080) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %1082 = "mid.checkflag"(%1081) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %1083 = "mid.unwrap"(%1082) : (si1) -> i1
      }, {
        %1084 = "hi.cast"(%1081) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
        %1085 = "hi.cast"(%1084) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1086 = "mid.buffer_get"(%1049, %1085) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %1087 = "mid.get_field"(%1041) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
        %1088 = "hi.cast"(%1086) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %1089 = "hi.cast"(%1084) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%1087, %1089, %1088) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %1090 = "hi.cast"(%1084) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
        "mid.assign"(%1081, %1090) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
      }) : () -> ()
    }) {"func_name" = "String_reserve_new_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb83(%1091 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1092 : !llvm.ptr):
      %1093 = "mid.invariant"(%1092) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1094 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb84] : () -> ()
    ^bb85:
      %1095 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
      "llvm.store"(%1095, %1094) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb84:
      %1096 = "llvm.getelementptr"(%1092) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1097 = "mid.checkflag"(%1096) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1098 = "llvm.load"(%1097) : (!hi.bool) -> i1
      "cf.cond_br"(%1098) [^bb85, ^bb85] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb86:
      %1099 = "llvm.extractvalue"(%1091) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1100 = "llvm.load"(%1094) : (!llvm.ptr) -> i32
      %1101 = "llvm.getelementptr"(%1099, %1100) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1102 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1103 = "llvm.getelementptr"(%1101, %1102) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1103) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_reserve_new_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb87(%1104 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1105 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1106 : !llvm.ptr, %1107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1108 = "mid.wrap"(%1104) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1109 = "hi.cast"(%1108) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1110 = "mid.wrap"(%1107) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1111 = "hi.cast"(%1110) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1112 = "mid.get_field"(%1109) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1113 = "mid.unwrap"(%1111) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1114 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1115 = "mid.method_call"(%1114, %1113) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1116 = "hi.cast"(%1115) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1117 = "hi.comparison"(%1112, %1116) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1118 = "mid.unwrap"(%1117) : (si1) -> i1
      "mid.if"(%1118) ({
        %1119 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1120 = "hi.cast"(%1119) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.return"(%1120) : (!hi.bool) -> ()
      }) : (i1) -> ()
      %1121 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1122 = "mid.get_field"(%1109) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1123 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1124 = "hi.arithmetic"(%1122, %1123) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1125 = "mid.unwrap"(%1121) : (si32) -> i32
      %1126 = "mid.unwrap"(%1124) : (si32) -> i32
      %1127 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "single_region_visurgieat"} : () -> !hi.fatptr<"Range">
      %1128 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1129 = "mid.get_field"(%1109) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1130 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1131 = "hi.arithmetic"(%1129, %1130) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1132 = "hi.cast"(%1128) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1133 = "mid.unwrap"(%1132) : (si32) -> i32
      %1134 = "hi.cast"(%1131) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1135 = "mid.unwrap"(%1134) : (si32) -> i32
      %1136 = "mid.unwrap"(%1127) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1137 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1138 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1139 = "mid.parameterizations_array"(%1137, %1138) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1139, %1136, %1133, %1135) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %1140 = "mid.unwrap"(%1127) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1141 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1142 = "mid.method_call"(%1141, %1140) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 127 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1143 = "hi.cast"(%1142) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"RangeIterator">
      %1144 = "mid.refer"(%1143) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      "mid.while"() ({
        %1145 = "mid.unwrap"(%1144) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1146 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1147 = "mid.method_call"(%1146, %1145) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1148 = "hi.cast"(%1147) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %1149 = "mid.checkflag"(%1148) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %1150 = "mid.unwrap"(%1149) : (si1) -> i1
      }, {
        %1151 = "hi.cast"(%1148) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
        %1152 = "mid.get_field"(%1109) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
        %1153 = "hi.cast"(%1151) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1154 = "mid.buffer_get"(%1152, %1153) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %1155 = "hi.cast"(%1151) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1156 = "mid.unwrap"(%1155) : (si32) -> i32
        %1157 = "mid.unwrap"(%1111) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1158 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1159 = "mid.parameterizations_array"(%1158) : (!llvm.ptr) -> !llvm.ptr
        %1160 = "mid.method_call"(%1159, %1157, %1156) {"offset" = 18 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 314 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> si8
        %1161 = "hi.cast"(%1160) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %1162 = "hi.comparison"(%1154, %1161) {"op" = "NEQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
        %1163 = "mid.unwrap"(%1162) : (si1) -> i1
        "mid.if"(%1163) ({
          %1164 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %1165 = "hi.cast"(%1164) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%1165) : (!hi.bool) -> ()
        }) : (i1) -> ()
        %1166 = "hi.cast"(%1151) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
        "mid.assign"(%1148, %1166) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
      }) : () -> ()
      %1167 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1168 = "hi.cast"(%1167) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%1168) : (!hi.bool) -> ()
    }) {"func_name" = "String__EQ_otherString", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb88(%1169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1170 : !llvm.ptr):
      %1171 = "mid.invariant"(%1170) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1172 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb89] : () -> ()
    ^bb90:
      %1173 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
      "llvm.store"(%1173, %1172) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb91] : () -> ()
    ^bb89:
      %1174 = "llvm.getelementptr"(%1170) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1175 = "mid.checkflag"(%1174) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1176 = "llvm.load"(%1175) : (!hi.bool) -> i1
      "cf.cond_br"(%1176) [^bb90, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb91:
      %1177 = "llvm.extractvalue"(%1169) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1178 = "llvm.load"(%1172) : (!llvm.ptr) -> i32
      %1179 = "llvm.getelementptr"(%1177, %1178) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1180 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1181 = "llvm.getelementptr"(%1179, %1180) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1181) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__EQ_otherString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb92(%1182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1184 : !llvm.ptr, %1185 : i32):
      %1186 = "mid.wrap"(%1182) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1187 = "hi.cast"(%1186) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1188 = "mid.wrap"(%1185) : (i32) -> si32
      %1189 = "hi.cast"(%1188) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1190 = "mid.get_field"(%1187) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
      %1191 = "mid.get_field"(%1187) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1192 = "hi.cast"(%1190) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1193 = "mid.unwrap"(%1192) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1194 = "hi.cast"(%1189) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1195 = "mid.unwrap"(%1194) : (si32) -> i32
      %1196 = "hi.cast"(%1191) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1197 = "mid.unwrap"(%1196) : (si32) -> i32
      %1198 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1199 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1200 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1201 = "mid.parameterizations_array"(%1198, %1199, %1200) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1202 = "mid.class_method_call"(%1201, %1193, %1195, %1197) {"offset" = 3 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i64)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i64)>, "class_name" = "Unicode"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
      %1203 = "hi.cast"(%1202) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
      %1204 = "hi.cast"(%1203) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
      "mid.return"(%1204) : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> ()
    }) {"func_name" = "String_decode_at_byte_indexi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb93(%1205 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1206 : !llvm.ptr):
      %1207 = "mid.invariant"(%1206) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1208 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb94] : () -> ()
    ^bb95:
      %1209 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
      "llvm.store"(%1209, %1208) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb96] : () -> ()
    ^bb94:
      %1210 = "llvm.getelementptr"(%1206) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1211 = "mid.checkflag"(%1210) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1212 = "llvm.load"(%1211) : (!hi.bool) -> i1
      "cf.cond_br"(%1212) [^bb95, ^bb95] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb96:
      %1213 = "llvm.extractvalue"(%1205) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1214 = "llvm.load"(%1208) : (!llvm.ptr) -> i32
      %1215 = "llvm.getelementptr"(%1213, %1214) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1216 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1217 = "llvm.getelementptr"(%1215, %1216) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1217) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_decode_at_byte_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb97(%1218 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1219 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1220 : !llvm.ptr, %1221 : i32):
      %1222 = "mid.wrap"(%1218) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1223 = "hi.cast"(%1222) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1224 = "mid.wrap"(%1221) : (i32) -> si32
      %1225 = "hi.cast"(%1224) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1226 = "mid.get_field"(%1223) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
      %1227 = "hi.cast"(%1225) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1228 = "mid.buffer_get"(%1226, %1227) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
      %1229 = "hi.cast"(%1228) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      "mid.return"(%1229) : (si8) -> ()
    }) {"func_name" = "String_unchecked_index_xi32", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb98(%1230 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1231 : !llvm.ptr):
      %1232 = "mid.invariant"(%1231) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1233 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb99] : () -> ()
    ^bb100:
      %1234 = "llvm.mlir.constant"() <{"value" = 58 : i32}> : () -> i32
      "llvm.store"(%1234, %1233) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb101] : () -> ()
    ^bb99:
      %1235 = "llvm.getelementptr"(%1231) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1236 = "mid.checkflag"(%1235) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1237 = "llvm.load"(%1236) : (!hi.bool) -> i1
      "cf.cond_br"(%1237) [^bb100, ^bb100] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb101:
      %1238 = "llvm.extractvalue"(%1230) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1239 = "llvm.load"(%1233) : (!llvm.ptr) -> i32
      %1240 = "llvm.getelementptr"(%1238, %1239) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1241 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1242 = "llvm.getelementptr"(%1240, %1241) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1242) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_unchecked_index_xi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb102(%1243 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1244 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1245 : !llvm.ptr, %1246 : i32, %1247 : i8):
      %1248 = "mid.wrap"(%1243) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1249 = "hi.cast"(%1248) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1250 = "mid.wrap"(%1246) : (i32) -> si32
      %1251 = "hi.cast"(%1250) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1252 = "mid.wrap"(%1247) : (i8) -> si8
      %1253 = "hi.cast"(%1252) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      %1254 = "mid.get_field"(%1249) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
      %1255 = "hi.cast"(%1253) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      %1256 = "hi.cast"(%1251) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%1254, %1256, %1255) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
    }) {"func_name" = "String_unchecked_insert_xi32_valuei8", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb103(%1257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1258 : !llvm.ptr):
      %1259 = "mid.invariant"(%1258) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1260 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb104] : () -> ()
    ^bb105:
      %1261 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%1261, %1260) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb106] : () -> ()
    ^bb107:
      %1262 = "llvm.getelementptr"(%1258) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1263 = "mid.checkflag"(%1262) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %1264 = "llvm.load"(%1263) : (!hi.bool) -> i1
      "cf.cond_br"(%1264) [^bb105, ^bb105] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb104:
      %1265 = "llvm.getelementptr"(%1258) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1266 = "mid.checkflag"(%1265) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1267 = "llvm.load"(%1266) : (!hi.bool) -> i1
      "cf.cond_br"(%1267) [^bb107, ^bb107] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb106:
      %1268 = "llvm.extractvalue"(%1257) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1269 = "llvm.load"(%1260) : (!llvm.ptr) -> i32
      %1270 = "llvm.getelementptr"(%1268, %1269) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1271 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1272 = "llvm.getelementptr"(%1270, %1271) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1272) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_unchecked_insert_xi32_valuei8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb108(%1273 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1274 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1275 : !llvm.ptr):
      %1276 = "mid.wrap"(%1273) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1277 = "hi.cast"(%1276) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1278 = "mid.get_field"(%1277) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1279 = "hi.cast"(%1278) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1280 = "mid.create_buffer"(%1279) {"typ" = i8, "region_id" = "single_region_zfnibttqwc"} : (si64) -> !llvm.ptr
      %1281 = "mid.refer"(%1280) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1282 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1283 = "mid.get_field"(%1277) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1284 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1285 = "hi.arithmetic"(%1283, %1284) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1286 = "mid.unwrap"(%1282) : (si32) -> i32
      %1287 = "mid.unwrap"(%1285) : (si32) -> i32
      %1288 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "single_region_zfnibttqwc"} : () -> !hi.fatptr<"Range">
      %1289 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1290 = "mid.get_field"(%1277) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1291 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1292 = "hi.arithmetic"(%1290, %1291) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1293 = "hi.cast"(%1289) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1294 = "mid.unwrap"(%1293) : (si32) -> i32
      %1295 = "hi.cast"(%1292) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1296 = "mid.unwrap"(%1295) : (si32) -> i32
      %1297 = "mid.unwrap"(%1288) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1298 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1299 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1300 = "mid.parameterizations_array"(%1298, %1299) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1300, %1297, %1294, %1296) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %1301 = "mid.unwrap"(%1288) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1302 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1303 = "mid.method_call"(%1302, %1301) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 127 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1304 = "hi.cast"(%1303) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"RangeIterator">
      %1305 = "mid.refer"(%1304) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      "mid.while"() ({
        %1306 = "mid.unwrap"(%1305) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1307 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1308 = "mid.method_call"(%1307, %1306) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1309 = "hi.cast"(%1308) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %1310 = "mid.checkflag"(%1309) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %1311 = "mid.unwrap"(%1310) : (si1) -> i1
      }, {
        %1312 = "hi.cast"(%1309) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
        %1313 = "mid.get_field"(%1277) {"offset" = 0 : i64, "vtable_bytes" = 2512 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<si8>
        %1314 = "hi.cast"(%1312) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1315 = "mid.buffer_get"(%1313, %1314) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %1316 = "hi.cast"(%1315) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %1317 = "hi.cast"(%1312) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%1281, %1317, %1316) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %1318 = "hi.cast"(%1312) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
        "mid.assign"(%1309, %1318) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
      }) : () -> ()
      %1319 = "mid.get_field"(%1277) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1320 = "mid.get_field"(%1277) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1321 = "mid.get_field"(%1277) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1322 = "mid.unwrap"(%1281) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1323 = "mid.unwrap"(%1319) : (si32) -> i32
      %1324 = "mid.unwrap"(%1320) : (si32) -> i32
      %1325 = "mid.unwrap"(%1321) : (si32) -> i32
      %1326 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "single_region_zfnibttqwc"} : () -> !hi.fatptr<"String">
      %1327 = "mid.get_field"(%1277) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1328 = "mid.get_field"(%1277) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1329 = "mid.get_field"(%1277) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1330 = "hi.cast"(%1281) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1331 = "mid.unwrap"(%1330) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1332 = "hi.cast"(%1327) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1333 = "mid.unwrap"(%1332) : (si32) -> i32
      %1334 = "hi.cast"(%1328) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1335 = "mid.unwrap"(%1334) : (si32) -> i32
      %1336 = "hi.cast"(%1329) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1337 = "mid.unwrap"(%1336) : (si32) -> i32
      %1338 = "mid.unwrap"(%1326) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1339 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1340 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1341 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1342 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1343 = "mid.parameterizations_array"(%1339, %1340, %1341, %1342) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1343, %1338, %1331, %1333, %1335, %1337) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1344 = "hi.cast"(%1326) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%1344) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb109(%1345 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1346 : !llvm.ptr):
      %1347 = "mid.invariant"(%1346) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1348 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb110] : () -> ()
    ^bb110:
      %1349 = "llvm.mlir.constant"() <{"value" = 60 : i32}> : () -> i32
      "llvm.store"(%1349, %1348) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb111] : () -> ()
    ^bb111:
      %1350 = "llvm.extractvalue"(%1345) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1351 = "llvm.load"(%1348) : (!llvm.ptr) -> i32
      %1352 = "llvm.getelementptr"(%1350, %1351) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1353 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1354 = "llvm.getelementptr"(%1352, %1353) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1354) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb112(%1355 : !llvm.ptr):
      %1356 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1357 = "mid.unwrap"(%1356) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1358 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1358, %1357) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1359 = "hi.cast"(%1356) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "String", "to_typ_name" = "List"} : (!hi.fatptr<"String">) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      "mid.return"(%1359) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> ()
    }) {"func_name" = "String__Self_empty_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb113(%1360 : !llvm.ptr):
      %1361 = "mid.invariant"(%1360) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1362 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb114] : () -> ()
    ^bb114:
      %1363 = "llvm.mlir.constant"() <{"value" = 61 : i32}> : () -> i32
      "llvm.store"(%1363, %1362) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb115] : () -> ()
    ^bb115:
      %1364 = "mid.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
      %1365 = "llvm.load"(%1362) : (!llvm.ptr) -> i32
      %1366 = "llvm.getelementptr"(%1364, %1365) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1367 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1368 = "llvm.getelementptr"(%1366, %1367) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1368) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__Self_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb116(%1369 : !llvm.ptr, %1370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1371 = "mid.wrap"(%1370) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>
      %1372 = "hi.cast"(%1371) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Character">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Character">]>
      %1373 = "hi.cast"(%1372) {"from_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Character">]>, "to_typ" = !hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>, "from_typ_name" = "Iterable", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Iterable", [!hi.fatptr<"Character">]>) -> !hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>
      %1374 = "mid.unwrap"(%1373) : (!hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1375 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1376 = "mid.class_method_call"(%1375) {"offset" = 21 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "class_name" = "String"} : (!llvm.ptr) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      %1377 = "hi.cast"(%1376) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "List", "to_typ_name" = "String"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"String">
      %1378 = "mid.unwrap"(%1377) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1379 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["Character"]], "name_hierarchy" = ["IterableCharacter", ["Character"]]} : () -> !llvm.ptr
      %1380 = "mid.parameterizations_array"(%1379) : (!llvm.ptr) -> !llvm.ptr
      %1381 = "mid.method_call"(%1380, %1378, %1374) {"offset" = 27 : i32, "vptrs" = [#none], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>
      %1382 = "hi.cast"(%1381) {"from_typ" = !hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "union_typ", "to_typ_name" = "String"} : (!hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>) -> !hi.fatptr<"String">
      %1383 = "hi.cast"(%1382) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "String", "to_typ_name" = "List"} : (!hi.fatptr<"String">) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      "mid.return"(%1383) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> ()
    }) {"func_name" = "String__Self_from_iterable_iterableIterableCharacter", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb117(%1384 : !llvm.ptr):
      %1385 = "mid.invariant"(%1384) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1386 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb118] : () -> ()
    ^bb119:
      %1387 = "llvm.mlir.constant"() <{"value" = 62 : i32}> : () -> i32
      "llvm.store"(%1387, %1386) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb120] : () -> ()
    ^bb118:
      %1388 = "llvm.getelementptr"(%1384) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1389 = "mid.checkflag"(%1388) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1390 = "llvm.load"(%1389) : (!hi.bool) -> i1
      "cf.cond_br"(%1390) [^bb119, ^bb119] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb120:
      %1391 = "mid.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
      %1392 = "llvm.load"(%1386) : (!llvm.ptr) -> i32
      %1393 = "llvm.getelementptr"(%1391, %1392) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1394 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1395 = "llvm.getelementptr"(%1393, %1394) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1395) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__Self_from_iterable_iterableIterableCharacter", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb121(%1396 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1397 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1398 : !llvm.ptr, %1399 : !llvm.struct<(!llvm.ptr, i160)>):
      %1400 = "mid.wrap"(%1396) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1401 = "hi.cast"(%1400) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1402 = "mid.wrap"(%1399) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "List">
      %1403 = "hi.cast"(%1402) {"from_typ" = !hi.type_param<"T", !hi.any, "List">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "any_typ", "to_typ_name" = "Character"} : (!hi.type_param<"T", !hi.any, "List">) -> !hi.fatptr<"Character">
      %1404 = "mid.unwrap"(%1403) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1405 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1406 = "mid.method_call"(%1405, %1404) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1407 = "hi.cast"(%1406) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1408 = "hi.cast"(%1407) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>
      %1409 = "mid.unwrap"(%1408) : (!hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1410 = "mid.unwrap"(%1401) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1411 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1412 = "mid.parameterizations_array"(%1411) : (!llvm.ptr) -> !llvm.ptr
      %1413 = "mid.method_call"(%1412, %1410, %1409) {"offset" = 27 : i32, "vptrs" = [#none], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>
      %1414 = "hi.cast"(%1413) {"from_typ" = !hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "union_typ", "to_typ_name" = "String"} : (!hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>) -> !hi.fatptr<"String">
      %1415 = "hi.cast"(%1414) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "from_typ_name" = "String", "to_typ_name" = "List"} : (!hi.fatptr<"String">) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
      "mid.return"(%1415) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> ()
    }) {"func_name" = "String_append_charCharacter", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb122(%1416 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1417 : !llvm.ptr):
      %1418 = "mid.invariant"(%1417) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1419 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb123] : () -> ()
    ^bb124:
      %1420 = "llvm.mlir.constant"() <{"value" = 63 : i32}> : () -> i32
      "llvm.store"(%1420, %1419) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb125] : () -> ()
    ^bb123:
      %1421 = "llvm.getelementptr"(%1417) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1422 = "mid.checkflag"(%1421) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %1423 = "llvm.load"(%1422) : (!hi.bool) -> i1
      "cf.cond_br"(%1423) [^bb124, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb125:
      %1424 = "llvm.extractvalue"(%1416) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1425 = "llvm.load"(%1419) : (!llvm.ptr) -> i32
      %1426 = "llvm.getelementptr"(%1424, %1425) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1427 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1428 = "llvm.getelementptr"(%1426, %1427) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1428) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_append_charCharacter", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_length_", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb126(%1429 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1430 : !llvm.ptr):
      %1431 = "mid.invariant"(%1430) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1432 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb127] : () -> ()
    ^bb127:
      %1433 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%1433, %1432) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb128] : () -> ()
    ^bb128:
      %1434 = "llvm.extractvalue"(%1429) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1435 = "llvm.load"(%1432) : (!llvm.ptr) -> i32
      %1436 = "llvm.getelementptr"(%1434, %1435) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1437 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1438 = "llvm.getelementptr"(%1436, %1437) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1438) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_length_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_first_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb129(%1439 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1440 : !llvm.ptr):
      %1441 = "mid.invariant"(%1440) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1442 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb130] : () -> ()
    ^bb130:
      %1443 = "llvm.mlir.constant"() <{"value" = 65 : i32}> : () -> i32
      "llvm.store"(%1443, %1442) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb131] : () -> ()
    ^bb131:
      %1444 = "llvm.extractvalue"(%1439) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1445 = "llvm.load"(%1442) : (!llvm.ptr) -> i32
      %1446 = "llvm.getelementptr"(%1444, %1445) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1447 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1448 = "llvm.getelementptr"(%1446, %1447) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1448) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_first_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_last_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb132(%1449 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1450 : !llvm.ptr):
      %1451 = "mid.invariant"(%1450) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1452 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb133] : () -> ()
    ^bb133:
      %1453 = "llvm.mlir.constant"() <{"value" = 66 : i32}> : () -> i32
      "llvm.store"(%1453, %1452) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb134] : () -> ()
    ^bb134:
      %1454 = "llvm.extractvalue"(%1449) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1455 = "llvm.load"(%1452) : (!llvm.ptr) -> i32
      %1456 = "llvm.getelementptr"(%1454, %1455) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1457 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1458 = "llvm.getelementptr"(%1456, %1457) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1458) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_last_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb135(%1459 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1460 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1461 : !llvm.ptr, %1462 : !llvm.struct<(!llvm.ptr, i160)>):
      %1463 = "mid.wrap"(%1459) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1464 = "hi.cast"(%1463) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1465 = "mid.wrap"(%1462) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>
      %1466 = "hi.cast"(%1465) {"from_typ" = !hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>, "to_typ" = !hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Collection"} : (!hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>) -> !hi.fatptr<"Collection", [!hi.fatptr<"Character">]>
      %1467 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1468 = "mid.unwrap"(%1466) : (!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1469 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1470 = "mid.method_call"(%1469, %1468) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1471 = "hi.cast"(%1470) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>
      %1472 = "mid.refer"(%1471) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>
      "mid.while"() ({
        %1473 = "mid.unwrap"(%1472) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1474 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1475 = "mid.method_call"(%1474, %1473) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1476 = "hi.cast"(%1475) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
        %1477 = "mid.checkflag"(%1476) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> si1
        %1478 = "mid.unwrap"(%1477) : (si1) -> i1
      }, {
        %1479 = "hi.cast"(%1476) {"from_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> !hi.fatptr<"Character">
        %1480 = "mid.unwrap"(%1479) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1481 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1482 = "mid.method_call"(%1481, %1480) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %1483 = "hi.cast"(%1482) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1484 = "hi.arithmetic"(%1467, %1483) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1485 = "hi.cast"(%1484) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1467, %1485) {"typ" = i32} : (si32, si32) -> ()
        %1486 = "hi.cast"(%1479) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "Character", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Character">) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
        "mid.assign"(%1476, %1486) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>, !hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> ()
      }) : () -> ()
      %1487 = "mid.get_field"(%1464) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1488 = "hi.arithmetic"(%1487, %1467) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1489 = "hi.cast"(%1488) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1490 = "mid.unwrap"(%1489) : (si32) -> i32
      %1491 = "mid.unwrap"(%1464) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1492 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1493 = "mid.parameterizations_array"(%1492) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1493, %1491, %1490) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1494 = "mid.unwrap"(%1466) : (!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1495 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1496 = "mid.method_call"(%1495, %1494) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1497 = "hi.cast"(%1496) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>
      %1498 = "mid.refer"(%1497) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>
      "mid.while"() ({
        %1499 = "mid.unwrap"(%1498) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1500 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1501 = "mid.method_call"(%1500, %1499) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1502 = "hi.cast"(%1501) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
        %1503 = "mid.checkflag"(%1502) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> si1
        %1504 = "mid.unwrap"(%1503) : (si1) -> i1
      }, {
        %1505 = "hi.cast"(%1502) {"from_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> !hi.fatptr<"Character">
        %1506 = "hi.cast"(%1505) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.type_param<"T", !hi.any, "List">, "from_typ_name" = "Character", "to_typ_name" = "any_typ"} : (!hi.fatptr<"Character">) -> !hi.type_param<"T", !hi.any, "List">
        %1507 = "mid.unwrap"(%1506) : (!hi.type_param<"T", !hi.any, "List">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1508 = "mid.unwrap"(%1464) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1509 = "mid.parameterization"() {"id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> !llvm.ptr
        %1510 = "mid.parameterizations_array"(%1509) : (!llvm.ptr) -> !llvm.ptr
        %1511 = "mid.method_call"(%1510, %1508, %1507) {"offset" = 23 : i32, "vptrs" = [#none], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>
        %1512 = "hi.cast"(%1511) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "List", "to_typ_name" = "String"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>) -> !hi.fatptr<"String">
        %1513 = "hi.cast"(%1505) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "Character", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Character">) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
        "mid.assign"(%1502, %1513) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>, !hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> ()
      }) : () -> ()
      %1514 = "hi.cast"(%1464) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>
      "mid.return"(%1514) : (!hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>) -> ()
    }) {"func_name" = "String_extend_otherCollectionCharacter", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "List_extend_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb136(%1515 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1516 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1517 : !llvm.ptr, %1518 : !llvm.struct<(!llvm.ptr, i160)>):
      %1519 = "mid.wrap"(%1515) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1520 = "hi.cast"(%1519) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1521 = "mid.wrap"(%1518) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>
      %1522 = "hi.cast"(%1521) {"from_typ" = !hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "union_typ", "to_typ_name" = "String"} : (!hi.union<[!hi.fatptr<"Collection", [!hi.fatptr<"Character">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "List">]>]>) -> !hi.fatptr<"String">
      %1523 = "mid.unwrap"(%1522) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1524 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1525 = "mid.method_call"(%1524, %1523) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1526 = "hi.cast"(%1525) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1527 = "mid.get_field"(%1520) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1528 = "mid.refer"(%1527) {"typ" = i32} : (si32) -> si32
      %1529 = "hi.arithmetic"(%1528, %1526) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1530 = "hi.cast"(%1529) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1531 = "mid.unwrap"(%1530) : (si32) -> i32
      %1532 = "mid.unwrap"(%1520) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1533 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1534 = "mid.parameterizations_array"(%1533) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1534, %1532, %1531) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1535 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1536 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1537 = "hi.arithmetic"(%1526, %1536) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1538 = "mid.unwrap"(%1535) : (si32) -> i32
      %1539 = "mid.unwrap"(%1537) : (si32) -> i32
      %1540 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "single_region_iyjxauxwbu"} : () -> !hi.fatptr<"Range">
      %1541 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1542 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %1543 = "hi.arithmetic"(%1526, %1542) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1544 = "hi.cast"(%1541) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1545 = "mid.unwrap"(%1544) : (si32) -> i32
      %1546 = "hi.cast"(%1543) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1547 = "mid.unwrap"(%1546) : (si32) -> i32
      %1548 = "mid.unwrap"(%1540) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1549 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1550 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1551 = "mid.parameterizations_array"(%1549, %1550) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1551, %1548, %1545, %1547) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %1552 = "mid.unwrap"(%1540) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1553 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1554 = "mid.method_call"(%1553, %1552) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 127 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1555 = "hi.cast"(%1554) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"RangeIterator">
      %1556 = "mid.refer"(%1555) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      "mid.while"() ({
        %1557 = "mid.unwrap"(%1556) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1558 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1559 = "mid.method_call"(%1558, %1557) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1560 = "hi.cast"(%1559) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %1561 = "mid.checkflag"(%1560) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %1562 = "mid.unwrap"(%1561) : (si1) -> i1
      }, {
        %1563 = "hi.cast"(%1560) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
        %1564 = "hi.arithmetic"(%1563, %1528) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1565 = "hi.cast"(%1563) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1566 = "mid.unwrap"(%1565) : (si32) -> i32
        %1567 = "mid.unwrap"(%1522) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1568 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1569 = "mid.parameterizations_array"(%1568) : (!llvm.ptr) -> !llvm.ptr
        %1570 = "mid.method_call"(%1569, %1567, %1566) {"offset" = 18 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 314 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> si8
        %1571 = "hi.cast"(%1570) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %1572 = "hi.cast"(%1564) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1573 = "mid.unwrap"(%1572) : (si32) -> i32
        %1574 = "hi.cast"(%1571) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %1575 = "mid.unwrap"(%1574) : (si8) -> i8
        %1576 = "mid.unwrap"(%1520) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1577 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1578 = "mid.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
        %1579 = "mid.parameterizations_array"(%1577, %1578) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1579, %1576, %1573, %1575) {"offset" = 19 : i32, "vptrs" = ["i32_typ", "i8_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i8) -> ()
        %1580 = "hi.cast"(%1563) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
        "mid.assign"(%1560, %1580) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
      }) : () -> ()
      %1581 = "hi.cast"(%1529) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%1520, %1581) {"offset" = 1 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %1582 = "mid.get_field"(%1520) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1583 = "mid.unwrap"(%1522) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1584 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1585 = "mid.method_call"(%1584, %1583) {"offset" = 30 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1586 = "hi.cast"(%1585) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1587 = "hi.arithmetic"(%1582, %1586) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1588 = "hi.cast"(%1587) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%1520, %1588) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">, si32) -> ()
      %1589 = "hi.cast"(%1520) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>
      "mid.return"(%1589) : (!hi.union<[!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "List">]>, !hi.fatptr<"String">]>) -> ()
    }) {"func_name" = "String_extend_otherString", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb137(%1590 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1591 : !llvm.ptr):
      %1592 = "mid.invariant"(%1591) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1593 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb138] : () -> ()
    ^bb139:
      %1594 = "llvm.mlir.constant"() <{"value" = 69 : i32}> : () -> i32
      "llvm.store"(%1594, %1593) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb140] : () -> ()
    ^bb141:
      %1595 = "llvm.mlir.constant"() <{"value" = 67 : i32}> : () -> i32
      "llvm.store"(%1595, %1593) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb140] : () -> ()
    ^bb142:
      %1596 = "llvm.mlir.constant"() <{"value" = 68 : i32}> : () -> i32
      "llvm.store"(%1596, %1593) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb140] : () -> ()
    ^bb138:
      %1597 = "llvm.getelementptr"(%1591) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1598 = "mid.checkflag"(%1597) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1599 = "llvm.load"(%1598) : (!hi.bool) -> i1
      "cf.cond_br"(%1599) [^bb139, ^bb143] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb143:
      %1600 = "llvm.getelementptr"(%1591) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1601 = "mid.checkflag"(%1600) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1602 = "llvm.load"(%1601) : (!hi.bool) -> i1
      "cf.cond_br"(%1602) [^bb144, ^bb145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb144:
      %1603 = "llvm.getelementptr"(%1591) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1604 = "mid.checkflag"(%1603) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1605 = "llvm.load"(%1604) : (!hi.bool) -> i1
      "cf.cond_br"(%1605) [^bb145, ^bb141] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb145:
      %1606 = "llvm.getelementptr"(%1591) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1607 = "mid.checkflag"(%1606) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1608 = "llvm.load"(%1607) : (!hi.bool) -> i1
      "cf.cond_br"(%1608) [^bb146, ^bb142] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb146:
      %1609 = "llvm.getelementptr"(%1591) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1610 = "mid.checkflag"(%1609) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1611 = "llvm.load"(%1610) : (!hi.bool) -> i1
      "cf.cond_br"(%1611) [^bb142, ^bb142] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb140:
      %1612 = "llvm.extractvalue"(%1590) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1613 = "llvm.load"(%1593) : (!llvm.ptr) -> i32
      %1614 = "llvm.getelementptr"(%1612, %1613) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1615 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1616 = "llvm.getelementptr"(%1614, %1615) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1616) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_extend_otherCollectionCharacter_extend_otherIterableT_extend_otherString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_get_indexi32", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb147(%1617 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1618 : !llvm.ptr):
      %1619 = "mid.invariant"(%1618) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1620 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb148] : () -> ()
    ^bb149:
      %1621 = "llvm.mlir.constant"() <{"value" = 70 : i32}> : () -> i32
      "llvm.store"(%1621, %1620) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb150] : () -> ()
    ^bb148:
      %1622 = "llvm.getelementptr"(%1618) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1623 = "mid.checkflag"(%1622) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1624 = "llvm.load"(%1623) : (!hi.bool) -> i1
      "cf.cond_br"(%1624) [^bb149, ^bb149] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb150:
      %1625 = "llvm.extractvalue"(%1617) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1626 = "llvm.load"(%1620) : (!llvm.ptr) -> i32
      %1627 = "llvm.getelementptr"(%1625, %1626) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1628 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1629 = "llvm.getelementptr"(%1627, %1628) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1629) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_get_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_index_of_targetT_eqFunctionT._T_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb151(%1630 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1631 : !llvm.ptr):
      %1632 = "mid.invariant"(%1631) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1633 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb152] : () -> ()
    ^bb153:
      %1634 = "llvm.mlir.constant"() <{"value" = 71 : i32}> : () -> i32
      "llvm.store"(%1634, %1633) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb154] : () -> ()
    ^bb155:
      %1635 = "llvm.getelementptr"(%1631) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1636 = "mid.checkflag"(%1635) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1637 = "llvm.load"(%1636) : (!hi.bool) -> i1
      "cf.cond_br"(%1637) [^bb153, ^bb153] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb152:
      %1638 = "llvm.getelementptr"(%1631) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1639 = "mid.checkflag"(%1638) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %1640 = "llvm.load"(%1639) : (!hi.bool) -> i1
      "cf.cond_br"(%1640) [^bb155, ^bb155] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb154:
      %1641 = "llvm.extractvalue"(%1630) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1642 = "llvm.load"(%1633) : (!llvm.ptr) -> i32
      %1643 = "llvm.getelementptr"(%1641, %1642) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1644 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1645 = "llvm.getelementptr"(%1643, %1644) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1645) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_index_of_targetT_eqFunctionT._T_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb156(%1646 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1647 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1648 : !llvm.ptr):
      %1649 = "mid.wrap"(%1646) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1650 = "hi.cast"(%1649) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1651 = "mid.get_field"(%1650) {"offset" = 2 : i64, "vtable_bytes" = 2512 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> si32
      %1652 = "hi.cast"(%1651) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%1652) : (si32) -> ()
    }) {"func_name" = "String_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb157(%1653 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1654 : !llvm.ptr):
      %1655 = "mid.invariant"(%1654) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1656 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb158] : () -> ()
    ^bb158:
      %1657 = "llvm.mlir.constant"() <{"value" = 72 : i32}> : () -> i32
      "llvm.store"(%1657, %1656) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb159] : () -> ()
    ^bb159:
      %1658 = "llvm.extractvalue"(%1653) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1659 = "llvm.load"(%1656) : (!llvm.ptr) -> i32
      %1660 = "llvm.getelementptr"(%1658, %1659) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1661 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1662 = "llvm.getelementptr"(%1660, %1661) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1662) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_is_empty_", "function_type" = !llvm.func<i1 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb160(%1663 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1664 : !llvm.ptr):
      %1665 = "mid.invariant"(%1664) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1666 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb161] : () -> ()
    ^bb161:
      %1667 = "llvm.mlir.constant"() <{"value" = 73 : i32}> : () -> i32
      "llvm.store"(%1667, %1666) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb162] : () -> ()
    ^bb162:
      %1668 = "llvm.extractvalue"(%1663) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1669 = "llvm.load"(%1666) : (!llvm.ptr) -> i32
      %1670 = "llvm.getelementptr"(%1668, %1669) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1671 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1672 = "llvm.getelementptr"(%1670, %1671) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1672) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb163(%1673 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1674 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1675 : !llvm.ptr):
      %1676 = "mid.wrap"(%1673) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1677 = "hi.cast"(%1676) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1678 = "mid.unwrap"(%1677) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1679 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "StringIterator", "num_data_fields" = 2 : i32, "region_id" = "ret"} : () -> !hi.fatptr<"StringIterator">
      %1680 = "hi.cast"(%1677) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1681 = "mid.unwrap"(%1680) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1682 = "mid.unwrap"(%1679) : (!hi.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1683 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1684 = "mid.parameterizations_array"(%1683) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1684, %1682, %1681) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 16 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1685 = "hi.cast"(%1679) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "StringIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%1685) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "String_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb164(%1686 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1687 : !llvm.ptr):
      %1688 = "mid.invariant"(%1687) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1689 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb165] : () -> ()
    ^bb165:
      %1690 = "llvm.mlir.constant"() <{"value" = 74 : i32}> : () -> i32
      "llvm.store"(%1690, %1689) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb166] : () -> ()
    ^bb166:
      %1691 = "llvm.extractvalue"(%1686) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1692 = "llvm.load"(%1689) : (!llvm.ptr) -> i32
      %1693 = "llvm.getelementptr"(%1691, %1692) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1694 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1695 = "llvm.getelementptr"(%1693, %1694) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1695) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb167(%1696 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1697 : !llvm.ptr):
      %1698 = "mid.invariant"(%1697) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1699 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb168] : () -> ()
    ^bb169:
      %1700 = "llvm.mlir.constant"() <{"value" = 75 : i32}> : () -> i32
      "llvm.store"(%1700, %1699) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb170] : () -> ()
    ^bb168:
      %1701 = "llvm.getelementptr"(%1697) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1702 = "mid.checkflag"(%1701) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1703 = "llvm.load"(%1702) : (!hi.bool) -> i1
      "cf.cond_br"(%1703) [^bb169, ^bb169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb170:
      %1704 = "llvm.extractvalue"(%1696) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1705 = "llvm.load"(%1699) : (!llvm.ptr) -> i32
      %1706 = "llvm.getelementptr"(%1704, %1705) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1707 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1708 = "llvm.getelementptr"(%1706, %1707) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1708) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb171(%1709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1710 : !llvm.ptr):
      %1711 = "mid.invariant"(%1710) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1712 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb172] : () -> ()
    ^bb173:
      %1713 = "llvm.mlir.constant"() <{"value" = 76 : i32}> : () -> i32
      "llvm.store"(%1713, %1712) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb174] : () -> ()
    ^bb175:
      %1714 = "llvm.getelementptr"(%1710) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1715 = "mid.checkflag"(%1714) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1716 = "llvm.load"(%1715) : (!hi.bool) -> i1
      "cf.cond_br"(%1716) [^bb173, ^bb173] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb172:
      %1717 = "llvm.getelementptr"(%1710) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1718 = "mid.checkflag"(%1717) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %1719 = "llvm.load"(%1718) : (!hi.bool) -> i1
      "cf.cond_br"(%1719) [^bb175, ^bb175] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb174:
      %1720 = "llvm.extractvalue"(%1709) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1721 = "llvm.load"(%1712) : (!llvm.ptr) -> i32
      %1722 = "llvm.getelementptr"(%1720, %1721) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1723 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1724 = "llvm.getelementptr"(%1722, %1723) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1724) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb176(%1725 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1726 : !llvm.ptr):
      %1727 = "mid.invariant"(%1726) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1728 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb177] : () -> ()
    ^bb178:
      %1729 = "llvm.mlir.constant"() <{"value" = 77 : i32}> : () -> i32
      "llvm.store"(%1729, %1728) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb179] : () -> ()
    ^bb177:
      %1730 = "llvm.getelementptr"(%1726) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1731 = "mid.checkflag"(%1730) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1732 = "llvm.load"(%1731) : (!hi.bool) -> i1
      "cf.cond_br"(%1732) [^bb178, ^bb178] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb179:
      %1733 = "llvm.extractvalue"(%1725) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1734 = "llvm.load"(%1728) : (!llvm.ptr) -> i32
      %1735 = "llvm.getelementptr"(%1733, %1734) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1736 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1737 = "llvm.getelementptr"(%1735, %1736) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1737) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb180(%1738 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1739 : !llvm.ptr):
      %1740 = "mid.invariant"(%1739) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1741 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb181] : () -> ()
    ^bb182:
      %1742 = "llvm.mlir.constant"() <{"value" = 78 : i32}> : () -> i32
      "llvm.store"(%1742, %1741) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb183] : () -> ()
    ^bb181:
      %1743 = "llvm.getelementptr"(%1739) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1744 = "mid.checkflag"(%1743) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1745 = "llvm.load"(%1744) : (!hi.bool) -> i1
      "cf.cond_br"(%1745) [^bb182, ^bb182] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb183:
      %1746 = "llvm.extractvalue"(%1738) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1747 = "llvm.load"(%1741) : (!llvm.ptr) -> i32
      %1748 = "llvm.getelementptr"(%1746, %1747) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1749 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1750 = "llvm.getelementptr"(%1748, %1749) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1750) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb184(%1751 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1752 : !llvm.ptr):
      %1753 = "mid.invariant"(%1752) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1754 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb185] : () -> ()
    ^bb185:
      %1755 = "llvm.mlir.constant"() <{"value" = 79 : i32}> : () -> i32
      "llvm.store"(%1755, %1754) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb186] : () -> ()
    ^bb186:
      %1756 = "llvm.extractvalue"(%1751) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1757 = "llvm.load"(%1754) : (!llvm.ptr) -> i32
      %1758 = "llvm.getelementptr"(%1756, %1757) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1759 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1760 = "llvm.getelementptr"(%1758, %1759) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1760) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb187(%1761 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1762 : !llvm.ptr):
      %1763 = "mid.invariant"(%1762) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1764 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb188] : () -> ()
    ^bb189:
      %1765 = "llvm.mlir.constant"() <{"value" = 80 : i32}> : () -> i32
      "llvm.store"(%1765, %1764) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb190] : () -> ()
    ^bb191:
      %1766 = "llvm.mlir.constant"() <{"value" = 81 : i32}> : () -> i32
      "llvm.store"(%1766, %1764) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb190] : () -> ()
    ^bb188:
      %1767 = "llvm.getelementptr"(%1762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1768 = "mid.checkflag"(%1767) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1769 = "llvm.load"(%1768) : (!hi.bool) -> i1
      "cf.cond_br"(%1769) [^bb189, ^bb192] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb192:
      %1770 = "llvm.getelementptr"(%1762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1771 = "mid.checkflag"(%1770) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1772 = "llvm.load"(%1771) : (!hi.bool) -> i1
      "cf.cond_br"(%1772) [^bb191, ^bb191] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb190:
      %1773 = "llvm.extractvalue"(%1761) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1774 = "llvm.load"(%1764) : (!llvm.ptr) -> i32
      %1775 = "llvm.getelementptr"(%1773, %1774) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1776 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1777 = "llvm.getelementptr"(%1775, %1776) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1777) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb193(%1778 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1779 : !llvm.ptr):
      %1780 = "mid.invariant"(%1779) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1781 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb194] : () -> ()
    ^bb195:
      %1782 = "llvm.mlir.constant"() <{"value" = 82 : i32}> : () -> i32
      "llvm.store"(%1782, %1781) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb196] : () -> ()
    ^bb194:
      %1783 = "llvm.getelementptr"(%1779) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1784 = "mid.checkflag"(%1783) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1785 = "llvm.load"(%1784) : (!hi.bool) -> i1
      "cf.cond_br"(%1785) [^bb195, ^bb195] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb196:
      %1786 = "llvm.extractvalue"(%1778) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1787 = "llvm.load"(%1781) : (!llvm.ptr) -> i32
      %1788 = "llvm.getelementptr"(%1786, %1787) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1789 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1790 = "llvm.getelementptr"(%1788, %1789) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1790) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb197(%1791 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1792 : !llvm.ptr):
      %1793 = "mid.invariant"(%1792) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1794 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb198] : () -> ()
    ^bb199:
      %1795 = "llvm.mlir.constant"() <{"value" = 84 : i32}> : () -> i32
      "llvm.store"(%1795, %1794) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb200] : () -> ()
    ^bb201:
      %1796 = "llvm.mlir.constant"() <{"value" = 83 : i32}> : () -> i32
      "llvm.store"(%1796, %1794) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb200] : () -> ()
    ^bb198:
      %1797 = "llvm.getelementptr"(%1792) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1798 = "mid.checkflag"(%1797) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1799 = "llvm.load"(%1798) : (!hi.bool) -> i1
      "cf.cond_br"(%1799) [^bb199, ^bb202] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb202:
      %1800 = "llvm.getelementptr"(%1792) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1801 = "mid.checkflag"(%1800) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1802 = "llvm.load"(%1801) : (!hi.bool) -> i1
      "cf.cond_br"(%1802) [^bb203, ^bb201] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb203:
      %1803 = "llvm.getelementptr"(%1792) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1804 = "mid.checkflag"(%1803) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1805 = "llvm.load"(%1804) : (!hi.bool) -> i1
      "cf.cond_br"(%1805) [^bb201, ^bb201] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb200:
      %1806 = "llvm.extractvalue"(%1791) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1807 = "llvm.load"(%1794) : (!llvm.ptr) -> i32
      %1808 = "llvm.getelementptr"(%1806, %1807) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1809 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1810 = "llvm.getelementptr"(%1808, %1809) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1810) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb204(%1811 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1812 : !llvm.ptr):
      %1813 = "mid.invariant"(%1812) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1814 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb205] : () -> ()
    ^bb206:
      %1815 = "llvm.mlir.constant"() <{"value" = 86 : i32}> : () -> i32
      "llvm.store"(%1815, %1814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb207] : () -> ()
    ^bb208:
      %1816 = "llvm.mlir.constant"() <{"value" = 85 : i32}> : () -> i32
      "llvm.store"(%1816, %1814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb207] : () -> ()
    ^bb205:
      %1817 = "llvm.getelementptr"(%1812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1818 = "mid.checkflag"(%1817) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1819 = "llvm.load"(%1818) : (!hi.bool) -> i1
      "cf.cond_br"(%1819) [^bb206, ^bb209] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb209:
      %1820 = "llvm.getelementptr"(%1812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1821 = "mid.checkflag"(%1820) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1822 = "llvm.load"(%1821) : (!hi.bool) -> i1
      "cf.cond_br"(%1822) [^bb210, ^bb208] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb210:
      %1823 = "llvm.getelementptr"(%1812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1824 = "mid.checkflag"(%1823) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1825 = "llvm.load"(%1824) : (!hi.bool) -> i1
      "cf.cond_br"(%1825) [^bb208, ^bb208] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb207:
      %1826 = "llvm.extractvalue"(%1811) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1827 = "llvm.load"(%1814) : (!llvm.ptr) -> i32
      %1828 = "llvm.getelementptr"(%1826, %1827) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1829 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1830 = "llvm.getelementptr"(%1828, %1829) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1830) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb211(%1831 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1832 : !llvm.ptr):
      %1833 = "mid.invariant"(%1832) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1834 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb212] : () -> ()
    ^bb213:
      %1835 = "llvm.mlir.constant"() <{"value" = 88 : i32}> : () -> i32
      "llvm.store"(%1835, %1834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb214] : () -> ()
    ^bb215:
      %1836 = "llvm.mlir.constant"() <{"value" = 87 : i32}> : () -> i32
      "llvm.store"(%1836, %1834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb214] : () -> ()
    ^bb212:
      %1837 = "llvm.getelementptr"(%1832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1838 = "mid.checkflag"(%1837) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1839 = "llvm.load"(%1838) : (!hi.bool) -> i1
      "cf.cond_br"(%1839) [^bb213, ^bb216] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb216:
      %1840 = "llvm.getelementptr"(%1832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1841 = "mid.checkflag"(%1840) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1842 = "llvm.load"(%1841) : (!hi.bool) -> i1
      "cf.cond_br"(%1842) [^bb217, ^bb215] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb217:
      %1843 = "llvm.getelementptr"(%1832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1844 = "mid.checkflag"(%1843) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1845 = "llvm.load"(%1844) : (!hi.bool) -> i1
      "cf.cond_br"(%1845) [^bb215, ^bb215] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb214:
      %1846 = "llvm.extractvalue"(%1831) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1847 = "llvm.load"(%1834) : (!llvm.ptr) -> i32
      %1848 = "llvm.getelementptr"(%1846, %1847) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1849 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1850 = "llvm.getelementptr"(%1848, %1849) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1850) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb218(%1851 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1852 : !llvm.ptr):
      %1853 = "mid.invariant"(%1852) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1854 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb219] : () -> ()
    ^bb220:
      %1855 = "llvm.mlir.constant"() <{"value" = 89 : i32}> : () -> i32
      "llvm.store"(%1855, %1854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb221] : () -> ()
    ^bb222:
      %1856 = "llvm.mlir.constant"() <{"value" = 90 : i32}> : () -> i32
      "llvm.store"(%1856, %1854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb221] : () -> ()
    ^bb219:
      %1857 = "llvm.getelementptr"(%1852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1858 = "mid.checkflag"(%1857) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1859 = "llvm.load"(%1858) : (!hi.bool) -> i1
      "cf.cond_br"(%1859) [^bb220, ^bb223] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb223:
      %1860 = "llvm.getelementptr"(%1852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1861 = "mid.checkflag"(%1860) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1862 = "llvm.load"(%1861) : (!hi.bool) -> i1
      "cf.cond_br"(%1862) [^bb224, ^bb222] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb224:
      %1863 = "llvm.getelementptr"(%1852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1864 = "mid.checkflag"(%1863) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1865 = "llvm.load"(%1864) : (!hi.bool) -> i1
      "cf.cond_br"(%1865) [^bb222, ^bb222] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb221:
      %1866 = "llvm.extractvalue"(%1851) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1867 = "llvm.load"(%1854) : (!llvm.ptr) -> i32
      %1868 = "llvm.getelementptr"(%1866, %1867) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1869 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1870 = "llvm.getelementptr"(%1868, %1869) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1870) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb225(%1871 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1872 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1873 : !llvm.ptr):
      %1874 = "mid.wrap"(%1871) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1875 = "hi.cast"(%1874) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1876 = "hi.cast"(%1875) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%1876) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb226(%1877 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1878 : !llvm.ptr):
      %1879 = "mid.invariant"(%1878) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1880 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb227] : () -> ()
    ^bb227:
      %1881 = "llvm.mlir.constant"() <{"value" = 91 : i32}> : () -> i32
      "llvm.store"(%1881, %1880) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb228] : () -> ()
    ^bb228:
      %1882 = "llvm.extractvalue"(%1877) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1883 = "llvm.load"(%1880) : (!llvm.ptr) -> i32
      %1884 = "llvm.getelementptr"(%1882, %1883) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<314 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1885 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1886 = "llvm.getelementptr"(%1884, %1885) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1886) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Character", "types" = [i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Character_getter_codepoint", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Character_setter_codepoint", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Character_field_codepoint", "getter_name" = "Character_getter_codepoint", "setter_name" = "Character_setter_codepoint"} : () -> ()
    "mid.func"() ({
    ^bb229(%1887 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1888 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1889 : !llvm.ptr):
      %1890 = "mid.wrap"(%1887) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %1891 = "hi.cast"(%1890) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %1892 = "mid.get_field"(%1891) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Character">) -> si32
      %1893 = "hi.cast"(%1892) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%1893) : (si32) -> ()
    }) {"func_name" = "Character_codepoint_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb230(%1894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1895 : !llvm.ptr):
      %1896 = "mid.invariant"(%1895) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1897 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb231] : () -> ()
    ^bb231:
      %1898 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1898, %1897) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb232] : () -> ()
    ^bb232:
      %1899 = "llvm.extractvalue"(%1894) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1900 = "llvm.load"(%1897) : (!llvm.ptr) -> i32
      %1901 = "llvm.getelementptr"(%1899, %1900) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1902 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1903 = "llvm.getelementptr"(%1901, %1902) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1903) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B_codepoint_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb233(%1904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1905 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1906 : !llvm.ptr, %1907 : i32):
      %1908 = "mid.wrap"(%1904) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %1909 = "hi.cast"(%1908) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %1910 = "mid.wrap"(%1907) : (i32) -> si32
      %1911 = "hi.cast"(%1910) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1912 = "hi.cast"(%1911) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%1909, %1912) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Character">, si32) -> ()
    }) {"func_name" = "Character_init_codepointi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb234(%1913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1914 : !llvm.ptr):
      %1915 = "mid.invariant"(%1914) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1916 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb235] : () -> ()
    ^bb236:
      %1917 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1917, %1916) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb237] : () -> ()
    ^bb235:
      %1918 = "llvm.getelementptr"(%1914) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1919 = "mid.checkflag"(%1918) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1920 = "llvm.load"(%1919) : (!hi.bool) -> i1
      "cf.cond_br"(%1920) [^bb236, ^bb236] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb237:
      %1921 = "llvm.extractvalue"(%1913) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1922 = "llvm.load"(%1916) : (!llvm.ptr) -> i32
      %1923 = "llvm.getelementptr"(%1921, %1922) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1924 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1925 = "llvm.getelementptr"(%1923, %1924) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1925) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B_init_codepointi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb238(%1926 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1927 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1928 : !llvm.ptr):
      %1929 = "mid.wrap"(%1926) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %1930 = "hi.cast"(%1929) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %1931 = "mid.get_field"(%1930) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Character">) -> si32
      %1932 = "hi.cast"(%1931) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1933 = "mid.unwrap"(%1932) : (si32) -> i32
      %1934 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1935 = "mid.parameterizations_array"(%1934) : (!llvm.ptr) -> !llvm.ptr
      %1936 = "mid.class_method_call"(%1935, %1933) {"offset" = 4 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "class_name" = "Unicode"} : (!llvm.ptr, i32) -> !hi.fatptr<"String">
      %1937 = "hi.cast"(%1936) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1938 = "hi.cast"(%1937) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%1938) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Character_to_string_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb239(%1939 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1940 : !llvm.ptr):
      %1941 = "mid.invariant"(%1940) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1942 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb240] : () -> ()
    ^bb240:
      %1943 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%1943, %1942) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb241] : () -> ()
    ^bb241:
      %1944 = "llvm.extractvalue"(%1939) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1945 = "llvm.load"(%1942) : (!llvm.ptr) -> i32
      %1946 = "llvm.getelementptr"(%1944, %1945) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1947 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1948 = "llvm.getelementptr"(%1946, %1947) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1948) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B_to_string_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb242(%1949 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1950 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1951 : !llvm.ptr, %1952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1953 = "mid.wrap"(%1949) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %1954 = "hi.cast"(%1953) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %1955 = "mid.wrap"(%1952) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %1956 = "hi.cast"(%1955) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %1957 = "mid.get_field"(%1954) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Character">) -> si32
      %1958 = "mid.unwrap"(%1956) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1959 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1960 = "mid.method_call"(%1959, %1958) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %1961 = "hi.cast"(%1960) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1962 = "hi.comparison"(%1957, %1961) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1963 = "hi.cast"(%1962) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (si1) -> !hi.bool
      "mid.return"(%1963) : (!hi.bool) -> ()
    }) {"func_name" = "Character__EQ_otherCharacter", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb243(%1964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1965 : !llvm.ptr):
      %1966 = "mid.invariant"(%1965) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1967 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb244] : () -> ()
    ^bb245:
      %1968 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%1968, %1967) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb246] : () -> ()
    ^bb244:
      %1969 = "llvm.getelementptr"(%1965) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1970 = "mid.checkflag"(%1969) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %1971 = "llvm.load"(%1970) : (!hi.bool) -> i1
      "cf.cond_br"(%1971) [^bb245, ^bb245] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb246:
      %1972 = "llvm.extractvalue"(%1964) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1973 = "llvm.load"(%1967) : (!llvm.ptr) -> i32
      %1974 = "llvm.getelementptr"(%1972, %1973) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1975 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1976 = "llvm.getelementptr"(%1974, %1975) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1976) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B__EQ_otherCharacter", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb247(%1977 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1978 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1979 : !llvm.ptr):
      %1980 = "mid.wrap"(%1977) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %1981 = "hi.cast"(%1980) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %1982 = "mid.get_field"(%1981) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Character">) -> si32
      %1983 = "mid.refer"(%1982) {"typ" = i32} : (si32) -> si32
      %1984 = "mid.literal"() {"value" = 127 : i32, "typ" = i32} : () -> si32
      %1985 = "hi.comparison"(%1983, %1984) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1986 = "mid.unwrap"(%1985) : (si1) -> i1
      "mid.if"(%1986) ({
        %1987 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %1988 = "hi.cast"(%1987) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.return"(%1988) : (si32) -> ()
      }) : (i1) -> ()
      %1989 = "mid.literal"() {"value" = 2047 : i32, "typ" = i32} : () -> si32
      %1990 = "hi.comparison"(%1983, %1989) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1991 = "mid.unwrap"(%1990) : (si1) -> i1
      "mid.if"(%1991) ({
        %1992 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %1993 = "hi.cast"(%1992) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.return"(%1993) : (si32) -> ()
      }) : (i1) -> ()
      %1994 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
      %1995 = "hi.comparison"(%1983, %1994) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1996 = "mid.unwrap"(%1995) : (si1) -> i1
      "mid.if"(%1996) ({
        %1997 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %1998 = "hi.cast"(%1997) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.return"(%1998) : (si32) -> ()
      }) : (i1) -> ()
      %1999 = "mid.literal"() {"value" = 1114111 : i32, "typ" = i32} : () -> si32
      %2000 = "hi.comparison"(%1983, %1999) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %2001 = "mid.unwrap"(%2000) : (si1) -> i1
      "mid.if"(%2001) ({
        %2002 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2003 = "hi.cast"(%2002) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.return"(%2003) : (si32) -> ()
      }) : (i1) -> ()
      %2004 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %2005 = "hi.cast"(%2004) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%2005) : (si32) -> ()
    }) {"func_name" = "Character_n_bytes_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb248(%2006 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2007 : !llvm.ptr):
      %2008 = "mid.invariant"(%2007) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2009 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb249] : () -> ()
    ^bb249:
      %2010 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%2010, %2009) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb250] : () -> ()
    ^bb250:
      %2011 = "llvm.extractvalue"(%2006) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2012 = "llvm.load"(%2009) : (!llvm.ptr) -> i32
      %2013 = "llvm.getelementptr"(%2011, %2012) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2014 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2015 = "llvm.getelementptr"(%2013, %2014) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2015) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B_n_bytes_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_StringIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "StringIterator_getter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "StringIterator_setter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "StringIterator_field_str", "getter_name" = "StringIterator_getter_str", "setter_name" = "StringIterator_setter_str"} : () -> ()
    "mid.getter_def"() {"meth_name" = "StringIterator_getter_byte_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "StringIterator_setter_byte_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "StringIterator_field_byte_index", "getter_name" = "StringIterator_getter_byte_index", "setter_name" = "StringIterator_setter_byte_index"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "StringIterator_field_StringIterator_0", "id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> ()
    "mid.func"() ({
    ^bb251(%2016 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2017 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2018 : !llvm.ptr, %2019 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2020 = "mid.wrap"(%2016) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"StringIterator">
      %2021 = "hi.cast"(%2020) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"StringIterator">
      %2022 = "mid.wrap"(%2019) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %2023 = "hi.cast"(%2022) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %2024 = "hi.cast"(%2023) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2021, %2024) {"offset" = 0 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"StringIterator">, !hi.fatptr<"String">) -> ()
      %2025 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2026 = "hi.cast"(%2025) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%2021, %2026) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">, si32) -> ()
    }) {"func_name" = "StringIterator_init_strString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb252(%2027 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2028 : !llvm.ptr):
      %2029 = "mid.invariant"(%2028) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2030 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb253] : () -> ()
    ^bb254:
      %2031 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%2031, %2030) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb255] : () -> ()
    ^bb253:
      %2032 = "llvm.getelementptr"(%2028) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2033 = "mid.checkflag"(%2032) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %2034 = "llvm.load"(%2033) : (!hi.bool) -> i1
      "cf.cond_br"(%2034) [^bb254, ^bb254] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb255:
      %2035 = "llvm.extractvalue"(%2027) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2036 = "llvm.load"(%2030) : (!llvm.ptr) -> i32
      %2037 = "llvm.getelementptr"(%2035, %2036) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2038 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2039 = "llvm.getelementptr"(%2037, %2038) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2039) : (!llvm.ptr) -> ()
    }) {"func_name" = "StringIterator_B_init_strString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb256(%2040 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2041 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2042 : !llvm.ptr):
      %2043 = "mid.wrap"(%2040) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"StringIterator">
      %2044 = "hi.cast"(%2043) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"StringIterator">
      %2045 = "mid.get_field"(%2044) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> si32
      %2046 = "mid.get_field"(%2044) {"offset" = 0 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"String">
      %2047 = "mid.unwrap"(%2046) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2048 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2049 = "mid.method_call"(%2048, %2047) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %2050 = "hi.cast"(%2049) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2051 = "hi.comparison"(%2045, %2050) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %2052 = "mid.unwrap"(%2051) : (si1) -> i1
      "mid.if"(%2052) ({
        %2053 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %2054 = "hi.cast"(%2053) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        "mid.return"(%2054) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %2055 = "mid.get_field"(%2044) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> si32
      %2056 = "hi.cast"(%2055) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2057 = "mid.unwrap"(%2056) : (si32) -> i32
      %2058 = "mid.get_field"(%2044) {"offset" = 0 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"String">
      %2059 = "mid.unwrap"(%2058) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2060 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2061 = "mid.parameterizations_array"(%2060) : (!llvm.ptr) -> !llvm.ptr
      %2062 = "mid.method_call"(%2061, %2059, %2057) {"offset" = 17 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i64)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i64)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
      %2063 = "hi.cast"(%2062) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>
      %2064 = "mid.checkflag"(%2063) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> si1
      %2065 = "mid.unwrap"(%2064) : (si1) -> i1
      "mid.if"(%2065) ({
        %2066 = "hi.cast"(%2063) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.tuple<[si32, si32]>, "from_typ_name" = "union_typ", "to_typ_name" = "tuple_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.tuple<[si32, si32]>
        %2067 = "mid.tuple_indexation"(%2066) {"typ" = vector<2xi32>, "index" = 0 : i32} : (!hi.tuple<[si32, si32]>) -> si32
        "mid.remove_region"() {"reg_name" = "aacrjkyeir"} : () -> ()
        "mid.remove_region"() {"reg_name" = "decode_result"} : () -> ()
        "mid.remove_region"() {"reg_name" = "decode_result.1"} : () -> ()
        %2068 = "mid.tuple_indexation"(%2066) {"typ" = vector<2xi32>, "index" = 1 : i32} : (!hi.tuple<[si32, si32]>) -> si32
        "mid.remove_region"() {"reg_name" = "aacrjkyeir"} : () -> ()
        "mid.remove_region"() {"reg_name" = "decode_result"} : () -> ()
        "mid.remove_region"() {"reg_name" = "decode_result.1"} : () -> ()
        %2069 = "mid.get_field"(%2044) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> si32
        %2070 = "hi.arithmetic"(%2069, %2068) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %2071 = "hi.cast"(%2070) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.set_field"(%2044, %2071) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">, si32) -> ()
        %2072 = "mid.unwrap"(%2067) : (si32) -> i32
        %2073 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Character", "num_data_fields" = 1 : i32, "region_id" = "ret"} : () -> !hi.fatptr<"Character">
        %2074 = "hi.cast"(%2067) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2075 = "mid.unwrap"(%2074) : (si32) -> i32
        %2076 = "mid.unwrap"(%2073) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2077 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2078 = "mid.parameterizations_array"(%2077) : (!llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2078, %2076, %2075) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
        %2079 = "hi.cast"(%2073) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Character", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Character">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        "mid.return"(%2079) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %2080 = "hi.cast"(%2063) {"from_typ" = !hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.tuple<[si32, si32]>, !hi.nil]>) -> !hi.nil
      "mid.remove_region"() {"reg_name" = "aacrjkyeir"} : () -> ()
      "mid.remove_region"() {"reg_name" = "decode_result"} : () -> ()
      "mid.remove_region"() {"reg_name" = "decode_result.1"} : () -> ()
      %2081 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %2082 = "hi.cast"(%2081) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%2082) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "StringIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb257(%2083 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2084 : !llvm.ptr):
      %2085 = "mid.invariant"(%2084) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2086 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb258] : () -> ()
    ^bb258:
      %2087 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%2087, %2086) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb259] : () -> ()
    ^bb259:
      %2088 = "llvm.extractvalue"(%2083) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2089 = "llvm.load"(%2086) : (!llvm.ptr) -> i32
      %2090 = "llvm.getelementptr"(%2088, %2089) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2091 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2092 = "llvm.getelementptr"(%2090, %2091) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2092) : (!llvm.ptr) -> ()
    }) {"func_name" = "StringIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Stacktrace", "types" = [!llvm.struct<(!llvm.ptr)>, i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Stacktrace_getter_stacktrace", "types" = [!llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Stacktrace_setter_stacktrace", "types" = [!llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Stacktrace_field_stacktrace", "getter_name" = "Stacktrace_getter_stacktrace", "setter_name" = "Stacktrace_setter_stacktrace"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Stacktrace_getter_n_frames", "types" = [!llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Stacktrace_setter_n_frames", "types" = [!llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Stacktrace_field_n_frames", "getter_name" = "Stacktrace_getter_n_frames", "setter_name" = "Stacktrace_setter_n_frames"} : () -> ()
    "mid.func"() ({
    ^bb260(%2093 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2094 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2095 : !llvm.ptr):
      %2096 = "mid.wrap"(%2093) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Stacktrace">
      %2097 = "hi.cast"(%2096) {"from_typ" = !hi.fatptr<"Stacktrace">, "to_typ" = !hi.fatptr<"Stacktrace">, "from_typ_name" = "Stacktrace", "to_typ_name" = "Stacktrace"} : (!hi.fatptr<"Stacktrace">) -> !hi.fatptr<"Stacktrace">
      %2098 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> si32
      %2099 = "hi.cast"(%2098) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2100 = "mid.create_buffer"(%2099) {"typ" = i64, "region_id" = "self.stacktrace"} : (si64) -> !llvm.ptr
      %2101 = "hi.cast"(%2100) {"from_typ" = !hi.buffer<si64>, "to_typ" = !hi.buffer<si64>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<si64>
      "mid.set_field"(%2097, %2101) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Stacktrace">, !hi.buffer<si64>) -> ()
      %2102 = "mid.literal"() {"value" = 100 : i64, "typ" = i64} : () -> si64
      %2103 = "mid.get_field"(%2097) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Stacktrace">) -> !hi.buffer<si64>
      %2104 = "mid.unwrap"(%2102) : (si64) -> i64
      %2105 = "mid.unwrap"(%2103) : (!hi.buffer<si64>) -> !llvm.struct<(!llvm.ptr)>
      %2106 = "mid.call"(%2104, %2105) {"func_name" = "capture_backtrace", "ret_type" = i64} : (i64, !llvm.struct<(!llvm.ptr)>) -> si64
      %2107 = "hi.cast"(%2106) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
      "mid.set_field"(%2097, %2107) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i64} : (!hi.fatptr<"Stacktrace">, si64) -> ()
    }) {"func_name" = "Stacktrace_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb261(%2108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2109 : !llvm.ptr):
      %2110 = "mid.invariant"(%2109) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2111 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb262] : () -> ()
    ^bb262:
      %2112 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%2112, %2111) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb263] : () -> ()
    ^bb263:
      %2113 = "llvm.extractvalue"(%2108) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2114 = "llvm.load"(%2111) : (!llvm.ptr) -> i32
      %2115 = "llvm.getelementptr"(%2113, %2114) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2116 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2117 = "llvm.getelementptr"(%2115, %2116) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2117) : (!llvm.ptr) -> ()
    }) {"func_name" = "Stacktrace_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb264(%2118 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2119 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2120 : !llvm.ptr):
      %2121 = "mid.wrap"(%2118) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Stacktrace">
      %2122 = "hi.cast"(%2121) {"from_typ" = !hi.fatptr<"Stacktrace">, "to_typ" = !hi.fatptr<"Stacktrace">, "from_typ_name" = "Stacktrace", "to_typ_name" = "Stacktrace"} : (!hi.fatptr<"Stacktrace">) -> !hi.fatptr<"Stacktrace">
      %2123 = "mid.get_field"(%2122) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Stacktrace">) -> !hi.buffer<si64>
      %2124 = "mid.get_field"(%2122) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i64} : (!hi.fatptr<"Stacktrace">) -> si64
      %2125 = "mid.unwrap"(%2123) : (!hi.buffer<si64>) -> !llvm.struct<(!llvm.ptr)>
      %2126 = "mid.unwrap"(%2124) : (si64) -> i64
      "mid.call"(%2125, %2126) {"func_name" = "print_backtrace", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr)>, i64) -> ()
    }) {"func_name" = "Stacktrace_print_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb265(%2127 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2128 : !llvm.ptr):
      %2129 = "mid.invariant"(%2128) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2130 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb266] : () -> ()
    ^bb266:
      %2131 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%2131, %2130) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb267] : () -> ()
    ^bb267:
      %2132 = "llvm.extractvalue"(%2127) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2133 = "llvm.load"(%2130) : (!llvm.ptr) -> i32
      %2134 = "llvm.getelementptr"(%2132, %2133) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2135 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2136 = "llvm.getelementptr"(%2134, %2135) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2136) : (!llvm.ptr) -> ()
    }) {"func_name" = "Stacktrace_B_print_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Exception", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_line_number", "getter_name" = "Exception_getter_line_number", "setter_name" = "Exception_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_file_name", "getter_name" = "Exception_getter_file_name", "setter_name" = "Exception_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_message", "getter_name" = "Exception_getter_message", "setter_name" = "Exception_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_stacktrace", "getter_name" = "Exception_getter_stacktrace", "setter_name" = "Exception_setter_stacktrace"} : () -> ()
    "mid.func"() ({
    ^bb268(%2137 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2138 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2139 : !llvm.ptr, %2140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2141 = "mid.wrap"(%2137) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %2142 = "hi.cast"(%2141) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %2143 = "mid.wrap"(%2140) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %2144 = "hi.cast"(%2143) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %2145 = "hi.cast"(%2144) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2142, %2145) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %2146 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2147 = "hi.cast"(%2146) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%2142, %2147) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, si32) -> ()
      %2148 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2149 = "hi.cast"(%2148) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2150 = "mid.create_buffer"(%2149) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2151 = "mid.refer"(%2150) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2152 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %2153 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2151, %2153, %2152) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2154 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2155 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2156 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2157 = "mid.unwrap"(%2151) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2158 = "mid.unwrap"(%2154) : (si32) -> i32
      %2159 = "mid.unwrap"(%2155) : (si32) -> i32
      %2160 = "mid.unwrap"(%2156) : (si32) -> i32
      %2161 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "self.file_name"} : () -> !hi.fatptr<"String">
      %2162 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2163 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2164 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2165 = "hi.cast"(%2151) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2166 = "mid.unwrap"(%2165) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2167 = "hi.cast"(%2162) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2168 = "mid.unwrap"(%2167) : (si32) -> i32
      %2169 = "hi.cast"(%2163) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2170 = "mid.unwrap"(%2169) : (si32) -> i32
      %2171 = "hi.cast"(%2164) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2172 = "mid.unwrap"(%2171) : (si32) -> i32
      %2173 = "mid.unwrap"(%2161) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2174 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2175 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2176 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2177 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2178 = "mid.parameterizations_array"(%2174, %2175, %2176, %2177) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2178, %2173, %2166, %2168, %2170, %2172) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2179 = "hi.cast"(%2161) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2142, %2179) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %2180 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "Stacktrace", "num_data_fields" = 2 : i32, "region_id" = "self.stacktrace"} : () -> !hi.fatptr<"Stacktrace">
      %2181 = "mid.unwrap"(%2180) : (!hi.fatptr<"Stacktrace">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2182 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%2182, %2181) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2183 = "hi.cast"(%2180) {"from_typ" = !hi.fatptr<"Stacktrace">, "to_typ" = !hi.fatptr<"Stacktrace">, "from_typ_name" = "Stacktrace", "to_typ_name" = "Stacktrace"} : (!hi.fatptr<"Stacktrace">) -> !hi.fatptr<"Stacktrace">
      "mid.set_field"(%2142, %2183) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"Stacktrace">) -> ()
    }) {"func_name" = "Exception_init_messageString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb269(%2184 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2185 : !llvm.ptr):
      %2186 = "mid.invariant"(%2185) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2187 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb270] : () -> ()
    ^bb271:
      %2188 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%2188, %2187) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb272] : () -> ()
    ^bb270:
      %2189 = "llvm.getelementptr"(%2185) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2190 = "mid.checkflag"(%2189) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %2191 = "llvm.load"(%2190) : (!hi.bool) -> i1
      "cf.cond_br"(%2191) [^bb271, ^bb271] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb272:
      %2192 = "llvm.extractvalue"(%2184) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2193 = "llvm.load"(%2187) : (!llvm.ptr) -> i32
      %2194 = "llvm.getelementptr"(%2192, %2193) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2195 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2196 = "llvm.getelementptr"(%2194, %2195) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2196) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb273(%2197 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2198 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2199 : !llvm.ptr):
      %2200 = "mid.wrap"(%2197) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %2201 = "hi.cast"(%2200) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %2202 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2203 = "hi.cast"(%2202) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%2201, %2203) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, si32) -> ()
      %2204 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %2205 = "hi.cast"(%2204) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2206 = "mid.create_buffer"(%2205) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2207 = "mid.refer"(%2206) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2208 = "mid.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "<None>"} : () -> !llvm.ptr
      %2209 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2207, %2209, %2208) {"typ" = !llvm.array<6 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2210 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %2211 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %2212 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %2213 = "mid.unwrap"(%2207) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2214 = "mid.unwrap"(%2210) : (si32) -> i32
      %2215 = "mid.unwrap"(%2211) : (si32) -> i32
      %2216 = "mid.unwrap"(%2212) : (si32) -> i32
      %2217 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "self.message"} : () -> !hi.fatptr<"String">
      %2218 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %2219 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %2220 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %2221 = "hi.cast"(%2207) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2222 = "mid.unwrap"(%2221) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2223 = "hi.cast"(%2218) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2224 = "mid.unwrap"(%2223) : (si32) -> i32
      %2225 = "hi.cast"(%2219) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2226 = "mid.unwrap"(%2225) : (si32) -> i32
      %2227 = "hi.cast"(%2220) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2228 = "mid.unwrap"(%2227) : (si32) -> i32
      %2229 = "mid.unwrap"(%2217) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2230 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2231 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2232 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2233 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2234 = "mid.parameterizations_array"(%2230, %2231, %2232, %2233) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2234, %2229, %2222, %2224, %2226, %2228) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2235 = "hi.cast"(%2217) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2201, %2235) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %2236 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2237 = "hi.cast"(%2236) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2238 = "mid.create_buffer"(%2237) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2239 = "mid.refer"(%2238) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2240 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %2241 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2239, %2241, %2240) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2242 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2243 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2244 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2245 = "mid.unwrap"(%2239) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2246 = "mid.unwrap"(%2242) : (si32) -> i32
      %2247 = "mid.unwrap"(%2243) : (si32) -> i32
      %2248 = "mid.unwrap"(%2244) : (si32) -> i32
      %2249 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "self.file_name"} : () -> !hi.fatptr<"String">
      %2250 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2251 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2252 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2253 = "hi.cast"(%2239) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2254 = "mid.unwrap"(%2253) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2255 = "hi.cast"(%2250) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2256 = "mid.unwrap"(%2255) : (si32) -> i32
      %2257 = "hi.cast"(%2251) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2258 = "mid.unwrap"(%2257) : (si32) -> i32
      %2259 = "hi.cast"(%2252) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2260 = "mid.unwrap"(%2259) : (si32) -> i32
      %2261 = "mid.unwrap"(%2249) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2262 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2263 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2264 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2265 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2266 = "mid.parameterizations_array"(%2262, %2263, %2264, %2265) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2266, %2261, %2254, %2256, %2258, %2260) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2267 = "hi.cast"(%2249) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2201, %2267) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %2268 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "Stacktrace", "num_data_fields" = 2 : i32, "region_id" = "self.stacktrace"} : () -> !hi.fatptr<"Stacktrace">
      %2269 = "mid.unwrap"(%2268) : (!hi.fatptr<"Stacktrace">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2270 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%2270, %2269) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2271 = "hi.cast"(%2268) {"from_typ" = !hi.fatptr<"Stacktrace">, "to_typ" = !hi.fatptr<"Stacktrace">, "from_typ_name" = "Stacktrace", "to_typ_name" = "Stacktrace"} : (!hi.fatptr<"Stacktrace">) -> !hi.fatptr<"Stacktrace">
      "mid.set_field"(%2201, %2271) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"Stacktrace">) -> ()
    }) {"func_name" = "Exception_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb274(%2272 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2273 : !llvm.ptr):
      %2274 = "mid.invariant"(%2273) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2275 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb275] : () -> ()
    ^bb275:
      %2276 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%2276, %2275) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb276] : () -> ()
    ^bb276:
      %2277 = "llvm.extractvalue"(%2272) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2278 = "llvm.load"(%2275) : (!llvm.ptr) -> i32
      %2279 = "llvm.getelementptr"(%2277, %2278) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2280 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2281 = "llvm.getelementptr"(%2279, %2280) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2281) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb277(%2282 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2283 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2284 : !llvm.ptr, %2285 : i32, %2286 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2287 = "mid.wrap"(%2282) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %2288 = "hi.cast"(%2287) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %2289 = "mid.wrap"(%2285) : (i32) -> si32
      %2290 = "hi.cast"(%2289) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2291 = "hi.cast"(%2290) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%2288, %2291) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, si32) -> ()
      %2292 = "mid.wrap"(%2286) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %2293 = "hi.cast"(%2292) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %2294 = "hi.cast"(%2293) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2288, %2294) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
    }) {"func_name" = "Exception_set_info_line_numberi32_file_nameString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb278(%2295 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2296 : !llvm.ptr):
      %2297 = "mid.invariant"(%2296) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2298 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb279] : () -> ()
    ^bb280:
      %2299 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%2299, %2298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb281] : () -> ()
    ^bb282:
      %2300 = "llvm.getelementptr"(%2296) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2301 = "mid.checkflag"(%2300) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %2302 = "llvm.load"(%2301) : (!hi.bool) -> i1
      "cf.cond_br"(%2302) [^bb280, ^bb280] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb279:
      %2303 = "llvm.getelementptr"(%2296) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2304 = "mid.checkflag"(%2303) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %2305 = "llvm.load"(%2304) : (!hi.bool) -> i1
      "cf.cond_br"(%2305) [^bb282, ^bb282] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb281:
      %2306 = "llvm.extractvalue"(%2295) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2307 = "llvm.load"(%2298) : (!llvm.ptr) -> i32
      %2308 = "llvm.getelementptr"(%2306, %2307) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2309 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2310 = "llvm.getelementptr"(%2308, %2309) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2310) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb283(%2311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2312 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2313 : !llvm.ptr):
      %2314 = "mid.wrap"(%2311) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %2315 = "hi.cast"(%2314) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %2316 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %2317 = "hi.cast"(%2316) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2318 = "mid.create_buffer"(%2317) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2319 = "mid.refer"(%2318) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2320 = "mid.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
      %2321 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2319, %2321, %2320) {"typ" = !llvm.array<9 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2322 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2323 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2324 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %2325 = "mid.unwrap"(%2319) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2326 = "mid.unwrap"(%2322) : (si32) -> i32
      %2327 = "mid.unwrap"(%2323) : (si32) -> i32
      %2328 = "mid.unwrap"(%2324) : (si32) -> i32
      %2329 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2330 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2331 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2332 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %2333 = "hi.cast"(%2319) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2334 = "mid.unwrap"(%2333) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2335 = "hi.cast"(%2330) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2336 = "mid.unwrap"(%2335) : (si32) -> i32
      %2337 = "hi.cast"(%2331) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2338 = "mid.unwrap"(%2337) : (si32) -> i32
      %2339 = "hi.cast"(%2332) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2340 = "mid.unwrap"(%2339) : (si32) -> i32
      %2341 = "mid.unwrap"(%2329) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2342 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2343 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2344 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2345 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2346 = "mid.parameterizations_array"(%2342, %2343, %2344, %2345) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2346, %2341, %2334, %2336, %2338, %2340) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2347 = "mid.unwrap"(%2329) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2348 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2349 = "mid.method_call"(%2348, %2347) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2350 = "hi.cast"(%2349) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2351 = "mid.print"(%2350) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %2352 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %2353 = "hi.cast"(%2352) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2354 = "mid.create_buffer"(%2353) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2355 = "mid.refer"(%2354) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2356 = "mid.literal"() {"typ" = !llvm.array<26 x i8>, "value" = "Exception thrown from file"} : () -> !llvm.ptr
      %2357 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2355, %2357, %2356) {"typ" = !llvm.array<26 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2358 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> si32
      %2359 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> si32
      %2360 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %2361 = "mid.unwrap"(%2355) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2362 = "mid.unwrap"(%2358) : (si32) -> i32
      %2363 = "mid.unwrap"(%2359) : (si32) -> i32
      %2364 = "mid.unwrap"(%2360) : (si32) -> i32
      %2365 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2366 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> si32
      %2367 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> si32
      %2368 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %2369 = "hi.cast"(%2355) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2370 = "mid.unwrap"(%2369) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2371 = "hi.cast"(%2366) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2372 = "mid.unwrap"(%2371) : (si32) -> i32
      %2373 = "hi.cast"(%2367) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2374 = "mid.unwrap"(%2373) : (si32) -> i32
      %2375 = "hi.cast"(%2368) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2376 = "mid.unwrap"(%2375) : (si32) -> i32
      %2377 = "mid.unwrap"(%2365) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2378 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2379 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2380 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2381 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2382 = "mid.parameterizations_array"(%2378, %2379, %2380, %2381) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2382, %2377, %2370, %2372, %2374, %2376) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2383 = "mid.unwrap"(%2365) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2384 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2385 = "mid.method_call"(%2384, %2383) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2386 = "hi.cast"(%2385) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2387 = "mid.print"(%2386) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %2388 = "mid.get_field"(%2315) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"String">
      %2389 = "mid.unwrap"(%2388) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2390 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2391 = "mid.method_call"(%2390, %2389) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2392 = "hi.cast"(%2391) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2393 = "mid.print"(%2392) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %2394 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %2395 = "hi.cast"(%2394) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2396 = "mid.create_buffer"(%2395) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2397 = "mid.refer"(%2396) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2398 = "mid.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "At line"} : () -> !llvm.ptr
      %2399 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2397, %2399, %2398) {"typ" = !llvm.array<7 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2400 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %2401 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %2402 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %2403 = "mid.unwrap"(%2397) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2404 = "mid.unwrap"(%2400) : (si32) -> i32
      %2405 = "mid.unwrap"(%2401) : (si32) -> i32
      %2406 = "mid.unwrap"(%2402) : (si32) -> i32
      %2407 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2408 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %2409 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
      %2410 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %2411 = "hi.cast"(%2397) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2412 = "mid.unwrap"(%2411) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2413 = "hi.cast"(%2408) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2414 = "mid.unwrap"(%2413) : (si32) -> i32
      %2415 = "hi.cast"(%2409) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2416 = "mid.unwrap"(%2415) : (si32) -> i32
      %2417 = "hi.cast"(%2410) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2418 = "mid.unwrap"(%2417) : (si32) -> i32
      %2419 = "mid.unwrap"(%2407) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2420 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2421 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2422 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2423 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2424 = "mid.parameterizations_array"(%2420, %2421, %2422, %2423) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2424, %2419, %2412, %2414, %2416, %2418) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2425 = "mid.unwrap"(%2407) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2426 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2427 = "mid.method_call"(%2426, %2425) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2428 = "hi.cast"(%2427) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2429 = "mid.print"(%2428) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %2430 = "mid.get_field"(%2315) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">) -> si32
      %2431 = "mid.print"(%2430) {"typ" = i32} : (si32) -> i32
      %2432 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2433 = "hi.cast"(%2432) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2434 = "mid.create_buffer"(%2433) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2435 = "mid.refer"(%2434) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2436 = "mid.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "With message"} : () -> !llvm.ptr
      %2437 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2435, %2437, %2436) {"typ" = !llvm.array<12 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2438 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %2439 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %2440 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2441 = "mid.unwrap"(%2435) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2442 = "mid.unwrap"(%2438) : (si32) -> i32
      %2443 = "mid.unwrap"(%2439) : (si32) -> i32
      %2444 = "mid.unwrap"(%2440) : (si32) -> i32
      %2445 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2446 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %2447 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %2448 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2449 = "hi.cast"(%2435) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2450 = "mid.unwrap"(%2449) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2451 = "hi.cast"(%2446) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2452 = "mid.unwrap"(%2451) : (si32) -> i32
      %2453 = "hi.cast"(%2447) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2454 = "mid.unwrap"(%2453) : (si32) -> i32
      %2455 = "hi.cast"(%2448) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2456 = "mid.unwrap"(%2455) : (si32) -> i32
      %2457 = "mid.unwrap"(%2445) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2458 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2459 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2460 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2461 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2462 = "mid.parameterizations_array"(%2458, %2459, %2460, %2461) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2462, %2457, %2450, %2452, %2454, %2456) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2463 = "mid.unwrap"(%2445) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2464 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2465 = "mid.method_call"(%2464, %2463) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2466 = "hi.cast"(%2465) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2467 = "mid.print"(%2466) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %2468 = "mid.unwrap"(%2315) : (!hi.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2469 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%2469, %2468) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2470 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2471 = "hi.cast"(%2470) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2472 = "mid.create_buffer"(%2471) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2473 = "mid.refer"(%2472) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2474 = "mid.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "Stack trace:"} : () -> !llvm.ptr
      %2475 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2473, %2475, %2474) {"typ" = !llvm.array<12 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2476 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %2477 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %2478 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2479 = "mid.unwrap"(%2473) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2480 = "mid.unwrap"(%2476) : (si32) -> i32
      %2481 = "mid.unwrap"(%2477) : (si32) -> i32
      %2482 = "mid.unwrap"(%2478) : (si32) -> i32
      %2483 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2484 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %2485 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %2486 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2487 = "hi.cast"(%2473) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2488 = "mid.unwrap"(%2487) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2489 = "hi.cast"(%2484) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2490 = "mid.unwrap"(%2489) : (si32) -> i32
      %2491 = "hi.cast"(%2485) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2492 = "mid.unwrap"(%2491) : (si32) -> i32
      %2493 = "hi.cast"(%2486) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2494 = "mid.unwrap"(%2493) : (si32) -> i32
      %2495 = "mid.unwrap"(%2483) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2496 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2497 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2498 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2499 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2500 = "mid.parameterizations_array"(%2496, %2497, %2498, %2499) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2500, %2495, %2488, %2490, %2492, %2494) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2501 = "mid.unwrap"(%2483) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2502 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2503 = "mid.method_call"(%2502, %2501) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2504 = "hi.cast"(%2503) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2505 = "mid.print"(%2504) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %2506 = "mid.get_field"(%2315) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Stacktrace"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Stacktrace">
      %2507 = "mid.unwrap"(%2506) : (!hi.fatptr<"Stacktrace">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2508 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%2508, %2507) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2509 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %2510 = "hi.cast"(%2509) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2511 = "mid.create_buffer"(%2510) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2512 = "mid.refer"(%2511) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2513 = "mid.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
      %2514 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2512, %2514, %2513) {"typ" = !llvm.array<9 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2515 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2516 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2517 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %2518 = "mid.unwrap"(%2512) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2519 = "mid.unwrap"(%2515) : (si32) -> i32
      %2520 = "mid.unwrap"(%2516) : (si32) -> i32
      %2521 = "mid.unwrap"(%2517) : (si32) -> i32
      %2522 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2523 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2524 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2525 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %2526 = "hi.cast"(%2512) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2527 = "mid.unwrap"(%2526) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2528 = "hi.cast"(%2523) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2529 = "mid.unwrap"(%2528) : (si32) -> i32
      %2530 = "hi.cast"(%2524) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2531 = "mid.unwrap"(%2530) : (si32) -> i32
      %2532 = "hi.cast"(%2525) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2533 = "mid.unwrap"(%2532) : (si32) -> i32
      %2534 = "mid.unwrap"(%2522) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2535 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2536 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2537 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2538 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2539 = "mid.parameterizations_array"(%2535, %2536, %2537, %2538) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2539, %2534, %2527, %2529, %2531, %2533) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2540 = "mid.unwrap"(%2522) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2541 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2542 = "mid.method_call"(%2541, %2540) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2543 = "hi.cast"(%2542) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2544 = "mid.print"(%2543) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
    }) {"func_name" = "Exception_report_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb284(%2545 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2546 : !llvm.ptr):
      %2547 = "mid.invariant"(%2546) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2548 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb285] : () -> ()
    ^bb285:
      %2549 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%2549, %2548) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb286] : () -> ()
    ^bb286:
      %2550 = "llvm.extractvalue"(%2545) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2551 = "llvm.load"(%2548) : (!llvm.ptr) -> i32
      %2552 = "llvm.getelementptr"(%2550, %2551) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2553 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2554 = "llvm.getelementptr"(%2552, %2553) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2554) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb287(%2555 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2556 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2557 : !llvm.ptr):
      %2558 = "mid.wrap"(%2555) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %2559 = "hi.cast"(%2558) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %2560 = "mid.get_field"(%2559) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"String">
      %2561 = "mid.unwrap"(%2560) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2562 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2563 = "mid.method_call"(%2562, %2561) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2564 = "hi.cast"(%2563) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2565 = "mid.print"(%2564) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
    }) {"func_name" = "Exception_print_message_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb288(%2566 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2567 : !llvm.ptr):
      %2568 = "mid.invariant"(%2567) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2569 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb289] : () -> ()
    ^bb289:
      %2570 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%2570, %2569) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb290] : () -> ()
    ^bb290:
      %2571 = "llvm.extractvalue"(%2566) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2572 = "llvm.load"(%2569) : (!llvm.ptr) -> i32
      %2573 = "llvm.getelementptr"(%2571, %2572) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2574 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2575 = "llvm.getelementptr"(%2573, %2574) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2575) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_InvalidUTF8Error", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "InvalidUTF8Error_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InvalidUTF8Error_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InvalidUTF8Error_field_line_number", "getter_name" = "InvalidUTF8Error_getter_line_number", "setter_name" = "InvalidUTF8Error_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InvalidUTF8Error_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InvalidUTF8Error_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InvalidUTF8Error_field_file_name", "getter_name" = "InvalidUTF8Error_getter_file_name", "setter_name" = "InvalidUTF8Error_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InvalidUTF8Error_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InvalidUTF8Error_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InvalidUTF8Error_field_message", "getter_name" = "InvalidUTF8Error_getter_message", "setter_name" = "InvalidUTF8Error_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InvalidUTF8Error_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InvalidUTF8Error_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InvalidUTF8Error_field_stacktrace", "getter_name" = "InvalidUTF8Error_getter_stacktrace", "setter_name" = "InvalidUTF8Error_setter_stacktrace"} : () -> ()
    "mid.func"() ({
    ^bb291(%2576 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2577 : !llvm.ptr):
      %2578 = "mid.invariant"(%2577) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2579 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb292] : () -> ()
    ^bb293:
      %2580 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%2580, %2579) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb294] : () -> ()
    ^bb292:
      %2581 = "llvm.getelementptr"(%2577) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2582 = "mid.checkflag"(%2581) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %2583 = "llvm.load"(%2582) : (!hi.bool) -> i1
      "cf.cond_br"(%2583) [^bb293, ^bb293] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb294:
      %2584 = "llvm.extractvalue"(%2576) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2585 = "llvm.load"(%2579) : (!llvm.ptr) -> i32
      %2586 = "llvm.getelementptr"(%2584, %2585) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2587 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2588 = "llvm.getelementptr"(%2586, %2587) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2588) : (!llvm.ptr) -> ()
    }) {"func_name" = "InvalidUTF8Error_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb295(%2589 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2590 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2591 : !llvm.ptr):
      %2592 = "mid.wrap"(%2589) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InvalidUTF8Error">
      %2593 = "hi.cast"(%2592) {"from_typ" = !hi.fatptr<"InvalidUTF8Error">, "to_typ" = !hi.fatptr<"InvalidUTF8Error">, "from_typ_name" = "InvalidUTF8Error", "to_typ_name" = "InvalidUTF8Error"} : (!hi.fatptr<"InvalidUTF8Error">) -> !hi.fatptr<"InvalidUTF8Error">
      %2594 = "mid.literal"() {"value" = 61 : i32, "typ" = i32} : () -> si32
      %2595 = "hi.cast"(%2594) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2596 = "mid.create_buffer"(%2595) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2597 = "mid.refer"(%2596) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2598 = "mid.literal"() {"typ" = !llvm.array<60 x i8>, "value" = "Invalid UTF-8 sequence encountered during string conversion."} : () -> !llvm.ptr
      %2599 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2597, %2599, %2598) {"typ" = !llvm.array<60 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2600 = "mid.literal"() {"value" = 60 : i32, "typ" = i32} : () -> si32
      %2601 = "mid.literal"() {"value" = 60 : i32, "typ" = i32} : () -> si32
      %2602 = "mid.literal"() {"value" = 61 : i32, "typ" = i32} : () -> si32
      %2603 = "mid.unwrap"(%2597) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2604 = "mid.unwrap"(%2600) : (si32) -> i32
      %2605 = "mid.unwrap"(%2601) : (si32) -> i32
      %2606 = "mid.unwrap"(%2602) : (si32) -> i32
      %2607 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "self.message"} : () -> !hi.fatptr<"String">
      %2608 = "mid.literal"() {"value" = 60 : i32, "typ" = i32} : () -> si32
      %2609 = "mid.literal"() {"value" = 60 : i32, "typ" = i32} : () -> si32
      %2610 = "mid.literal"() {"value" = 61 : i32, "typ" = i32} : () -> si32
      %2611 = "hi.cast"(%2597) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2612 = "mid.unwrap"(%2611) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2613 = "hi.cast"(%2608) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2614 = "mid.unwrap"(%2613) : (si32) -> i32
      %2615 = "hi.cast"(%2609) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2616 = "mid.unwrap"(%2615) : (si32) -> i32
      %2617 = "hi.cast"(%2610) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2618 = "mid.unwrap"(%2617) : (si32) -> i32
      %2619 = "mid.unwrap"(%2607) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2620 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2621 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2622 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2623 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2624 = "mid.parameterizations_array"(%2620, %2621, %2622, %2623) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2624, %2619, %2612, %2614, %2616, %2618) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2625 = "hi.cast"(%2607) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2593, %2625) {"offset" = 2 : i64, "vtable_bytes" = 224 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InvalidUTF8Error">, !hi.fatptr<"String">) -> ()
      %2626 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2627 = "hi.cast"(%2626) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%2593, %2627) {"offset" = 0 : i64, "vtable_bytes" = 224 : i32, "original_type" = i32} : (!hi.fatptr<"InvalidUTF8Error">, si32) -> ()
      %2628 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2629 = "hi.cast"(%2628) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2630 = "mid.create_buffer"(%2629) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2631 = "mid.refer"(%2630) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2632 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %2633 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2631, %2633, %2632) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2634 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2635 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2636 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2637 = "mid.unwrap"(%2631) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2638 = "mid.unwrap"(%2634) : (si32) -> i32
      %2639 = "mid.unwrap"(%2635) : (si32) -> i32
      %2640 = "mid.unwrap"(%2636) : (si32) -> i32
      %2641 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "self.file_name"} : () -> !hi.fatptr<"String">
      %2642 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2643 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2644 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2645 = "hi.cast"(%2631) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2646 = "mid.unwrap"(%2645) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2647 = "hi.cast"(%2642) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2648 = "mid.unwrap"(%2647) : (si32) -> i32
      %2649 = "hi.cast"(%2643) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2650 = "mid.unwrap"(%2649) : (si32) -> i32
      %2651 = "hi.cast"(%2644) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2652 = "mid.unwrap"(%2651) : (si32) -> i32
      %2653 = "mid.unwrap"(%2641) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2654 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2655 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2656 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2657 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2658 = "mid.parameterizations_array"(%2654, %2655, %2656, %2657) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2658, %2653, %2646, %2648, %2650, %2652) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2659 = "hi.cast"(%2641) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2593, %2659) {"offset" = 1 : i64, "vtable_bytes" = 224 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InvalidUTF8Error">, !hi.fatptr<"String">) -> ()
      %2660 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "Stacktrace", "num_data_fields" = 2 : i32, "region_id" = "self.stacktrace"} : () -> !hi.fatptr<"Stacktrace">
      %2661 = "mid.unwrap"(%2660) : (!hi.fatptr<"Stacktrace">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2662 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%2662, %2661) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2663 = "hi.cast"(%2660) {"from_typ" = !hi.fatptr<"Stacktrace">, "to_typ" = !hi.fatptr<"Stacktrace">, "from_typ_name" = "Stacktrace", "to_typ_name" = "Stacktrace"} : (!hi.fatptr<"Stacktrace">) -> !hi.fatptr<"Stacktrace">
      "mid.set_field"(%2593, %2663) {"offset" = 3 : i64, "vtable_bytes" = 224 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InvalidUTF8Error">, !hi.fatptr<"Stacktrace">) -> ()
    }) {"func_name" = "InvalidUTF8Error_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb296(%2664 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2665 : !llvm.ptr):
      %2666 = "mid.invariant"(%2665) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2667 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb297] : () -> ()
    ^bb297:
      %2668 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%2668, %2667) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb298] : () -> ()
    ^bb298:
      %2669 = "llvm.extractvalue"(%2664) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2670 = "llvm.load"(%2667) : (!llvm.ptr) -> i32
      %2671 = "llvm.getelementptr"(%2669, %2670) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2672 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2673 = "llvm.getelementptr"(%2671, %2672) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2673) : (!llvm.ptr) -> ()
    }) {"func_name" = "InvalidUTF8Error_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb299(%2674 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2675 : !llvm.ptr):
      %2676 = "mid.invariant"(%2675) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2677 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb300] : () -> ()
    ^bb301:
      %2678 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%2678, %2677) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb302] : () -> ()
    ^bb303:
      %2679 = "llvm.getelementptr"(%2675) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2680 = "mid.checkflag"(%2679) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %2681 = "llvm.load"(%2680) : (!hi.bool) -> i1
      "cf.cond_br"(%2681) [^bb301, ^bb301] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb300:
      %2682 = "llvm.getelementptr"(%2675) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2683 = "mid.checkflag"(%2682) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %2684 = "llvm.load"(%2683) : (!hi.bool) -> i1
      "cf.cond_br"(%2684) [^bb303, ^bb303] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb302:
      %2685 = "llvm.extractvalue"(%2674) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2686 = "llvm.load"(%2677) : (!llvm.ptr) -> i32
      %2687 = "llvm.getelementptr"(%2685, %2686) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2688 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2689 = "llvm.getelementptr"(%2687, %2688) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2689) : (!llvm.ptr) -> ()
    }) {"func_name" = "InvalidUTF8Error_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb304(%2690 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2691 : !llvm.ptr):
      %2692 = "mid.invariant"(%2691) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2693 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb305] : () -> ()
    ^bb305:
      %2694 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%2694, %2693) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb306] : () -> ()
    ^bb306:
      %2695 = "llvm.extractvalue"(%2690) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2696 = "llvm.load"(%2693) : (!llvm.ptr) -> i32
      %2697 = "llvm.getelementptr"(%2695, %2696) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2698 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2699 = "llvm.getelementptr"(%2697, %2698) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2699) : (!llvm.ptr) -> ()
    }) {"func_name" = "InvalidUTF8Error_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb307(%2700 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2701 : !llvm.ptr):
      %2702 = "mid.invariant"(%2701) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2703 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb308] : () -> ()
    ^bb308:
      %2704 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%2704, %2703) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb309] : () -> ()
    ^bb309:
      %2705 = "llvm.extractvalue"(%2700) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2706 = "llvm.load"(%2703) : (!llvm.ptr) -> i32
      %2707 = "llvm.getelementptr"(%2705, %2706) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2708 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2709 = "llvm.getelementptr"(%2707, %2708) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2709) : (!llvm.ptr) -> ()
    }) {"func_name" = "InvalidUTF8Error_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_OutOfBounds", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_OutOfBoundsDetails_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_OutOfBoundsDetails_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_details", "getter_name" = "OutOfBounds_getter_details", "setter_name" = "OutOfBounds_setter_details"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_line_number", "getter_name" = "OutOfBounds_getter_line_number", "setter_name" = "OutOfBounds_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_file_name", "getter_name" = "OutOfBounds_getter_file_name", "setter_name" = "OutOfBounds_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_message", "getter_name" = "OutOfBounds_getter_message", "setter_name" = "OutOfBounds_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_stacktrace", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_stacktrace", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_stacktrace", "getter_name" = "OutOfBounds_getter_stacktrace", "setter_name" = "OutOfBounds_setter_stacktrace"} : () -> ()
    "mid.func"() ({
    ^bb310(%2710 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2711 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2712 : !llvm.ptr, %2713 : i32, %2714 : i32):
      %2715 = "mid.wrap"(%2710) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBounds">
      %2716 = "hi.cast"(%2715) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.fatptr<"OutOfBounds">, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"OutOfBounds">
      %2717 = "mid.wrap"(%2713) : (i32) -> si32
      %2718 = "hi.cast"(%2717) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2719 = "mid.wrap"(%2714) : (i32) -> si32
      %2720 = "hi.cast"(%2719) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2721 = "mid.unwrap"(%2718) : (si32) -> i32
      %2722 = "mid.unwrap"(%2720) : (si32) -> i32
      %2723 = "mid.new"() {"typ" = !llvm.struct<(i32, i32)>, "class_name" = "OutOfBoundsDetails", "num_data_fields" = 2 : i32, "region_id" = "self.details"} : () -> !hi.fatptr<"OutOfBoundsDetails">
      %2724 = "hi.cast"(%2718) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2725 = "mid.unwrap"(%2724) : (si32) -> i32
      %2726 = "hi.cast"(%2720) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2727 = "mid.unwrap"(%2726) : (si32) -> i32
      %2728 = "mid.unwrap"(%2723) : (!hi.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2729 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2730 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2731 = "mid.parameterizations_array"(%2729, %2730) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2731, %2728, %2725, %2727) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %2732 = "hi.cast"(%2723) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
      "mid.set_field"(%2716, %2732) {"offset" = 0 : i64, "vtable_bytes" = 248 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"OutOfBounds">, !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> ()
      %2733 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2734 = "hi.cast"(%2733) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%2716, %2734) {"offset" = 1 : i64, "vtable_bytes" = 248 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBounds">, si32) -> ()
      %2735 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2736 = "hi.cast"(%2735) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2737 = "mid.create_buffer"(%2736) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2738 = "mid.refer"(%2737) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2739 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %2740 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2738, %2740, %2739) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2741 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2742 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2743 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2744 = "mid.unwrap"(%2738) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2745 = "mid.unwrap"(%2741) : (si32) -> i32
      %2746 = "mid.unwrap"(%2742) : (si32) -> i32
      %2747 = "mid.unwrap"(%2743) : (si32) -> i32
      %2748 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "self.file_name"} : () -> !hi.fatptr<"String">
      %2749 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2750 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2751 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2752 = "hi.cast"(%2738) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2753 = "mid.unwrap"(%2752) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2754 = "hi.cast"(%2749) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2755 = "mid.unwrap"(%2754) : (si32) -> i32
      %2756 = "hi.cast"(%2750) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2757 = "mid.unwrap"(%2756) : (si32) -> i32
      %2758 = "hi.cast"(%2751) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2759 = "mid.unwrap"(%2758) : (si32) -> i32
      %2760 = "mid.unwrap"(%2748) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2761 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2762 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2763 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2764 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2765 = "mid.parameterizations_array"(%2761, %2762, %2763, %2764) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2765, %2760, %2753, %2755, %2757, %2759) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2766 = "hi.cast"(%2748) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2716, %2766) {"offset" = 2 : i64, "vtable_bytes" = 248 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"OutOfBounds">, !hi.fatptr<"String">) -> ()
      %2767 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> si32
      %2768 = "hi.cast"(%2767) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2769 = "mid.create_buffer"(%2768) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2770 = "mid.refer"(%2769) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2771 = "mid.literal"() {"typ" = !llvm.array<65 x i8>, "value" = "An out-of-bounds error occurred while indexing into a collection."} : () -> !llvm.ptr
      %2772 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2770, %2772, %2771) {"typ" = !llvm.array<65 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2773 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> si32
      %2774 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> si32
      %2775 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> si32
      %2776 = "mid.unwrap"(%2770) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2777 = "mid.unwrap"(%2773) : (si32) -> i32
      %2778 = "mid.unwrap"(%2774) : (si32) -> i32
      %2779 = "mid.unwrap"(%2775) : (si32) -> i32
      %2780 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "self.message"} : () -> !hi.fatptr<"String">
      %2781 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> si32
      %2782 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> si32
      %2783 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> si32
      %2784 = "hi.cast"(%2770) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2785 = "mid.unwrap"(%2784) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2786 = "hi.cast"(%2781) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2787 = "mid.unwrap"(%2786) : (si32) -> i32
      %2788 = "hi.cast"(%2782) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2789 = "mid.unwrap"(%2788) : (si32) -> i32
      %2790 = "hi.cast"(%2783) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2791 = "mid.unwrap"(%2790) : (si32) -> i32
      %2792 = "mid.unwrap"(%2780) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2793 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2794 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2795 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2796 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2797 = "mid.parameterizations_array"(%2793, %2794, %2795, %2796) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2797, %2792, %2785, %2787, %2789, %2791) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2798 = "hi.cast"(%2780) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%2716, %2798) {"offset" = 3 : i64, "vtable_bytes" = 248 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"OutOfBounds">, !hi.fatptr<"String">) -> ()
      %2799 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "Stacktrace", "num_data_fields" = 2 : i32, "region_id" = "self.stacktrace"} : () -> !hi.fatptr<"Stacktrace">
      %2800 = "mid.unwrap"(%2799) : (!hi.fatptr<"Stacktrace">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2801 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%2801, %2800) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2802 = "hi.cast"(%2799) {"from_typ" = !hi.fatptr<"Stacktrace">, "to_typ" = !hi.fatptr<"Stacktrace">, "from_typ_name" = "Stacktrace", "to_typ_name" = "Stacktrace"} : (!hi.fatptr<"Stacktrace">) -> !hi.fatptr<"Stacktrace">
      "mid.set_field"(%2716, %2802) {"offset" = 4 : i64, "vtable_bytes" = 248 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"OutOfBounds">, !hi.fatptr<"Stacktrace">) -> ()
    }) {"func_name" = "OutOfBounds_init_boundsi32_indexi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb311(%2803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2804 : !llvm.ptr):
      %2805 = "mid.invariant"(%2804) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2806 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb312] : () -> ()
    ^bb313:
      %2807 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%2807, %2806) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb314] : () -> ()
    ^bb315:
      %2808 = "llvm.getelementptr"(%2804) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2809 = "mid.checkflag"(%2808) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %2810 = "llvm.load"(%2809) : (!hi.bool) -> i1
      "cf.cond_br"(%2810) [^bb313, ^bb313] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb312:
      %2811 = "llvm.getelementptr"(%2804) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2812 = "mid.checkflag"(%2811) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %2813 = "llvm.load"(%2812) : (!hi.bool) -> i1
      "cf.cond_br"(%2813) [^bb315, ^bb315] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb314:
      %2814 = "llvm.extractvalue"(%2803) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2815 = "llvm.load"(%2806) : (!llvm.ptr) -> i32
      %2816 = "llvm.getelementptr"(%2814, %2815) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<31 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2817 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2818 = "llvm.getelementptr"(%2816, %2817) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2818) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_boundsi32_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb316(%2819 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2820 : !llvm.ptr):
      %2821 = "mid.invariant"(%2820) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2822 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb317] : () -> ()
    ^bb318:
      %2823 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%2823, %2822) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb319] : () -> ()
    ^bb317:
      %2824 = "llvm.getelementptr"(%2820) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2825 = "mid.checkflag"(%2824) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %2826 = "llvm.load"(%2825) : (!hi.bool) -> i1
      "cf.cond_br"(%2826) [^bb318, ^bb318] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb319:
      %2827 = "llvm.extractvalue"(%2819) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2828 = "llvm.load"(%2822) : (!llvm.ptr) -> i32
      %2829 = "llvm.getelementptr"(%2827, %2828) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<31 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2830 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2831 = "llvm.getelementptr"(%2829, %2830) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2831) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb320(%2832 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2833 : !llvm.ptr):
      %2834 = "mid.invariant"(%2833) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2835 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb321] : () -> ()
    ^bb321:
      %2836 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%2836, %2835) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb322] : () -> ()
    ^bb322:
      %2837 = "llvm.extractvalue"(%2832) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2838 = "llvm.load"(%2835) : (!llvm.ptr) -> i32
      %2839 = "llvm.getelementptr"(%2837, %2838) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<31 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2840 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2841 = "llvm.getelementptr"(%2839, %2840) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2841) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb323(%2842 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2843 : !llvm.ptr):
      %2844 = "mid.invariant"(%2843) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2845 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb324] : () -> ()
    ^bb325:
      %2846 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%2846, %2845) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb326] : () -> ()
    ^bb327:
      %2847 = "llvm.getelementptr"(%2843) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2848 = "mid.checkflag"(%2847) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %2849 = "llvm.load"(%2848) : (!hi.bool) -> i1
      "cf.cond_br"(%2849) [^bb325, ^bb325] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb324:
      %2850 = "llvm.getelementptr"(%2843) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2851 = "mid.checkflag"(%2850) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %2852 = "llvm.load"(%2851) : (!hi.bool) -> i1
      "cf.cond_br"(%2852) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb326:
      %2853 = "llvm.extractvalue"(%2842) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2854 = "llvm.load"(%2845) : (!llvm.ptr) -> i32
      %2855 = "llvm.getelementptr"(%2853, %2854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<31 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2856 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2857 = "llvm.getelementptr"(%2855, %2856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2857) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb328(%2858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2859 : !llvm.ptr):
      %2860 = "mid.invariant"(%2859) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2861 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb329] : () -> ()
    ^bb329:
      %2862 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%2862, %2861) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb330] : () -> ()
    ^bb330:
      %2863 = "llvm.extractvalue"(%2858) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2864 = "llvm.load"(%2861) : (!llvm.ptr) -> i32
      %2865 = "llvm.getelementptr"(%2863, %2864) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<31 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2866 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2867 = "llvm.getelementptr"(%2865, %2866) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2867) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb331(%2868 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2869 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2870 : !llvm.ptr):
      %2871 = "mid.wrap"(%2868) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBounds">
      %2872 = "hi.cast"(%2871) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.fatptr<"OutOfBounds">, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"OutOfBounds">
      %2873 = "mid.get_field"(%2872) {"offset" = 3 : i64, "vtable_bytes" = 248 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"String">
      %2874 = "mid.unwrap"(%2873) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2875 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2876 = "mid.method_call"(%2875, %2874) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2877 = "hi.cast"(%2876) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2878 = "mid.print"(%2877) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %2879 = "mid.get_field"(%2872) {"offset" = 0 : i64, "vtable_bytes" = 248 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"OutOfBounds">) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
      %2880 = "mid.refer"(%2879) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
      %2881 = "mid.checkflag"(%2880) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> si1
      %2882 = "mid.unwrap"(%2881) : (si1) -> i1
      "mid.if"(%2882) ({
        %2883 = "hi.cast"(%2880) {"from_typ" = !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "union_typ", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> !hi.fatptr<"OutOfBoundsDetails">
        %2884 = "mid.unwrap"(%2883) : (!hi.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2885 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%2885, %2884) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %2886 = "hi.cast"(%2883) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>
        "mid.assign"(%2880, %2886) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>, !hi.union<[!hi.fatptr<"OutOfBoundsDetails">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "OutOfBounds_print_message_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb332(%2887 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2888 : !llvm.ptr):
      %2889 = "mid.invariant"(%2888) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2890 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb333] : () -> ()
    ^bb333:
      %2891 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%2891, %2890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb334] : () -> ()
    ^bb334:
      %2892 = "llvm.extractvalue"(%2887) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2893 = "llvm.load"(%2890) : (!llvm.ptr) -> i32
      %2894 = "llvm.getelementptr"(%2892, %2893) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<31 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2895 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2896 = "llvm.getelementptr"(%2894, %2895) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2896) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_OutOfBoundsDetails", "types" = [i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_bounds", "getter_name" = "OutOfBoundsDetails_getter_bounds", "setter_name" = "OutOfBoundsDetails_setter_bounds"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_index", "getter_name" = "OutOfBoundsDetails_getter_index", "setter_name" = "OutOfBoundsDetails_setter_index"} : () -> ()
    "mid.func"() ({
    ^bb335(%2897 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2898 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2899 : !llvm.ptr, %2900 : i32, %2901 : i32):
      %2902 = "mid.wrap"(%2897) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBoundsDetails">
      %2903 = "hi.cast"(%2902) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.fatptr<"OutOfBoundsDetails">
      %2904 = "mid.wrap"(%2900) : (i32) -> si32
      %2905 = "hi.cast"(%2904) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2906 = "hi.cast"(%2905) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%2903, %2906) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">, si32) -> ()
      %2907 = "mid.wrap"(%2901) : (i32) -> si32
      %2908 = "hi.cast"(%2907) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2909 = "hi.cast"(%2908) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%2903, %2909) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">, si32) -> ()
    }) {"func_name" = "OutOfBoundsDetails_init_boundsi32_indexi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb336(%2910 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2911 : !llvm.ptr):
      %2912 = "mid.invariant"(%2911) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2913 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb337] : () -> ()
    ^bb338:
      %2914 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%2914, %2913) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb339] : () -> ()
    ^bb340:
      %2915 = "llvm.getelementptr"(%2911) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2916 = "mid.checkflag"(%2915) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %2917 = "llvm.load"(%2916) : (!hi.bool) -> i1
      "cf.cond_br"(%2917) [^bb338, ^bb338] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb337:
      %2918 = "llvm.getelementptr"(%2911) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2919 = "mid.checkflag"(%2918) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %2920 = "llvm.load"(%2919) : (!hi.bool) -> i1
      "cf.cond_br"(%2920) [^bb340, ^bb340] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb339:
      %2921 = "llvm.extractvalue"(%2910) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2922 = "llvm.load"(%2913) : (!llvm.ptr) -> i32
      %2923 = "llvm.getelementptr"(%2921, %2922) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2924 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2925 = "llvm.getelementptr"(%2923, %2924) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2925) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBoundsDetails_B_init_boundsi32_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb341(%2926 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2927 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2928 : !llvm.ptr):
      %2929 = "mid.wrap"(%2926) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBoundsDetails">
      %2930 = "hi.cast"(%2929) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.fatptr<"OutOfBoundsDetails">
      %2931 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> si32
      %2932 = "hi.cast"(%2931) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2933 = "mid.create_buffer"(%2932) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2934 = "mid.refer"(%2933) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2935 = "mid.literal"() {"typ" = !llvm.array<44 x i8>, "value" = "The size of the collection being indexed was"} : () -> !llvm.ptr
      %2936 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2934, %2936, %2935) {"typ" = !llvm.array<44 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2937 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> si32
      %2938 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> si32
      %2939 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> si32
      %2940 = "mid.unwrap"(%2934) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2941 = "mid.unwrap"(%2937) : (si32) -> i32
      %2942 = "mid.unwrap"(%2938) : (si32) -> i32
      %2943 = "mid.unwrap"(%2939) : (si32) -> i32
      %2944 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2945 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> si32
      %2946 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> si32
      %2947 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> si32
      %2948 = "hi.cast"(%2934) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2949 = "mid.unwrap"(%2948) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2950 = "hi.cast"(%2945) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2951 = "mid.unwrap"(%2950) : (si32) -> i32
      %2952 = "hi.cast"(%2946) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2953 = "mid.unwrap"(%2952) : (si32) -> i32
      %2954 = "hi.cast"(%2947) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2955 = "mid.unwrap"(%2954) : (si32) -> i32
      %2956 = "mid.unwrap"(%2944) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2957 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2958 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2959 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2960 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2961 = "mid.parameterizations_array"(%2957, %2958, %2959, %2960) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2961, %2956, %2949, %2951, %2953, %2955) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2962 = "mid.unwrap"(%2944) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2963 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2964 = "mid.method_call"(%2963, %2962) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %2965 = "hi.cast"(%2964) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2966 = "mid.print"(%2965) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %2967 = "mid.get_field"(%2930) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">) -> si32
      %2968 = "mid.print"(%2967) {"typ" = i32} : (si32) -> i32
      %2969 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> si32
      %2970 = "hi.cast"(%2969) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2971 = "mid.create_buffer"(%2970) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2972 = "mid.refer"(%2971) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2973 = "mid.literal"() {"typ" = !llvm.array<25 x i8>, "value" = "The indexing argument was"} : () -> !llvm.ptr
      %2974 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2972, %2974, %2973) {"typ" = !llvm.array<25 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2975 = "mid.literal"() {"value" = 25 : i32, "typ" = i32} : () -> si32
      %2976 = "mid.literal"() {"value" = 25 : i32, "typ" = i32} : () -> si32
      %2977 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> si32
      %2978 = "mid.unwrap"(%2972) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2979 = "mid.unwrap"(%2975) : (si32) -> i32
      %2980 = "mid.unwrap"(%2976) : (si32) -> i32
      %2981 = "mid.unwrap"(%2977) : (si32) -> i32
      %2982 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2983 = "mid.literal"() {"value" = 25 : i32, "typ" = i32} : () -> si32
      %2984 = "mid.literal"() {"value" = 25 : i32, "typ" = i32} : () -> si32
      %2985 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> si32
      %2986 = "hi.cast"(%2972) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2987 = "mid.unwrap"(%2986) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2988 = "hi.cast"(%2983) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2989 = "mid.unwrap"(%2988) : (si32) -> i32
      %2990 = "hi.cast"(%2984) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2991 = "mid.unwrap"(%2990) : (si32) -> i32
      %2992 = "hi.cast"(%2985) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2993 = "mid.unwrap"(%2992) : (si32) -> i32
      %2994 = "mid.unwrap"(%2982) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2995 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2996 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2997 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2998 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2999 = "mid.parameterizations_array"(%2995, %2996, %2997, %2998) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2999, %2994, %2987, %2989, %2991, %2993) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %3000 = "mid.unwrap"(%2982) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3001 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %3002 = "mid.method_call"(%3001, %3000) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %3003 = "hi.cast"(%3002) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %3004 = "mid.print"(%3003) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      %3005 = "mid.get_field"(%2930) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">) -> si32
      %3006 = "mid.print"(%3005) {"typ" = i32} : (si32) -> i32
    }) {"func_name" = "OutOfBoundsDetails_report_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb342(%3007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3008 : !llvm.ptr):
      %3009 = "mid.invariant"(%3008) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3010 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb343] : () -> ()
    ^bb343:
      %3011 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%3011, %3010) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb344] : () -> ()
    ^bb344:
      %3012 = "llvm.extractvalue"(%3007) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %3013 = "llvm.load"(%3010) : (!llvm.ptr) -> i32
      %3014 = "llvm.getelementptr"(%3012, %3013) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %3015 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %3016 = "llvm.getelementptr"(%3014, %3015) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%3016) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBoundsDetails_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb345(%3017 : !llvm.struct<(!llvm.ptr)>):
      %3018 = "mid.wrap"(%3017) : (!llvm.struct<(!llvm.ptr)>) -> !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>
      %3019 = "hi.cast"(%3018) {"from_typ" = !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>, "to_typ" = !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>) -> !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>
      %3020 = "llvm.load"(%3019) : (!hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>) -> !llvm.ptr
      %3021 = "mid.coro_get_result"(%3020) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %3022 = "mid.wrap"(%3021) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      %3023 = "mid.checkflag"(%3022) {"typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> si1
      %3024 = "mid.unwrap"(%3023) : (si1) -> i1
      "mid.if"(%3024) ({
        %3025 = "hi.cast"(%3022) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "union_typ", "to_typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.fatptr<"Exception">
        %3026 = "mid.unwrap"(%3025) : (!hi.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %3027 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%3027, %3026) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %3028 = "hi.cast"(%3025) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        "mid.assign"(%3022, %3028) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "report_exception", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "map"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.typedef"() {"class_name" = "KeyNotFound", "methods" = [@KeyNotFound_field_line_number, @KeyNotFound_field_file_name, @KeyNotFound_field_message, @KeyNotFound_field_stacktrace, @KeyNotFound_B_init_messageString, @KeyNotFound_B_init_, @KeyNotFound_B_set_info_line_numberi32_file_nameString, @KeyNotFound_B_report_, @KeyNotFound_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_, @KeyNotFound_field_line_number, @KeyNotFound_field_file_name, @KeyNotFound_field_message, @KeyNotFound_field_stacktrace, @KeyNotFound_B_init_messageString, @KeyNotFound_B_init_, @KeyNotFound_B_set_info_line_numberi32_file_nameString, @KeyNotFound_B_report_, @KeyNotFound_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, @KeyNotFound, @any_typ, @Exception], "offset_tbl" = [38 : i32, 10 : i32, 10 : i32, 24 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 2946564862774055400 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_KeyNotFound", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Map", "methods" = [], "hash_tbl" = [@Indexable, @Map, @IndexableCollection, 18446744073709551615 : i64, @Collection, @Iterable, @any_typ, @Object], "offset_tbl" = [198 : i32, 10 : i32, 64 : i32, 0 : i32, 204 : i32, 263 : i32, 10 : i32, 204 : i32], "prime" = 4611686018427389201 : i64, "hash_id" = 13196888402582771646 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>, "data_size_fn" = "_data_size_Map", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MapKeys", "methods" = [@MapKeys_field_MapKeys_1, @MapKeys_field_MapKeys_0, @MapKeys_field_map, @MapKeys_B_init_mapMapK._V, @MapKeys_B_size_, @MapKeys_B_is_empty_, @MapKeys_B_iterator_, @MapKeys_B_each_fFunctionT_to_Nothing, @MapKeys_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapKeys_B_all_fFunctionT_to_Bool, @MapKeys_B_any_fFunctionT_to_Bool, @MapKeys_B_enumerate_, @MapKeys_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MapKeys_B_filter_fFunctionT_to_Bool, @MapKeys_B_chain_otherIterableT_chain_otherCollectionT, @MapKeys_B_interleave_otherIterableT_interleave_otherCollectionT, @MapKeys_B_zip_otherIterableU_zip_otherCollectionU, @MapKeys_B_product_otherCollectionU_product_otherIterableU, @MapKeys_init_mapMapK._V, @MapKeys_size_, @Collection_is_empty_, @MapKeys_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @MapKeys_field_MapKeys_0, @MapKeys_B_size_, @MapKeys_B_is_empty_, @MapKeys_B_iterator_, @MapKeys_B_each_fFunctionT_to_Nothing, @MapKeys_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapKeys_B_all_fFunctionT_to_Bool, @MapKeys_B_any_fFunctionT_to_Bool, @MapKeys_B_enumerate_, @MapKeys_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MapKeys_B_filter_fFunctionT_to_Bool, @MapKeys_B_chain_otherIterableT_chain_otherCollectionT, @MapKeys_B_interleave_otherIterableT_interleave_otherCollectionT, @MapKeys_B_zip_otherIterableU_zip_otherCollectionU, @MapKeys_B_product_otherCollectionU_product_otherIterableU, @MapKeys_size_, @Collection_is_empty_, @MapKeys_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @MapKeys_field_MapKeys_0, @MapKeys_B_iterator_, @MapKeys_B_each_fFunctionT_to_Nothing, @MapKeys_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapKeys_B_all_fFunctionT_to_Bool, @MapKeys_B_any_fFunctionT_to_Bool, @MapKeys_B_enumerate_, @MapKeys_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MapKeys_B_filter_fFunctionT_to_Bool, @MapKeys_B_chain_otherIterableT_chain_otherCollectionT, @MapKeys_B_interleave_otherIterableT_interleave_otherCollectionT, @MapKeys_B_zip_otherIterableU_zip_otherCollectionU, @MapKeys_B_product_otherCollectionU_product_otherIterableU, @MapKeys_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @MapKeys_field_MapKeys_0, @MapKeys_B_iterator_, @MapKeys_B_each_fFunctionT_to_Nothing, @MapKeys_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapKeys_B_all_fFunctionT_to_Bool, @MapKeys_B_any_fFunctionT_to_Bool, @MapKeys_B_enumerate_, @MapKeys_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MapKeys_B_filter_fFunctionT_to_Bool, @MapKeys_B_chain_otherIterableT_chain_otherCollectionT, @MapKeys_B_interleave_otherIterableT_interleave_otherCollectionT, @MapKeys_B_zip_otherIterableU_zip_otherCollectionU, @MapKeys_B_product_otherCollectionU_product_otherIterableU, @MapKeys_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Iterable, @Object, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Collection, @MapKeys], "offset_tbl" = [107 : i32, 132 : i32, 10 : i32, 0 : i32, 0 : i32, 0 : i32, 48 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 11691328477629805411 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_MapKeys", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MapValues", "methods" = [@MapValues_field_MapValues_0, @MapValues_field_MapValues_1, @MapValues_field_map, @MapValues_B_init_mapMapK._V, @MapValues_B_size_, @MapValues_B_is_empty_, @MapValues_B_iterator_, @MapValues_B_each_fFunctionT_to_Nothing, @MapValues_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapValues_B_all_fFunctionT_to_Bool, @MapValues_B_any_fFunctionT_to_Bool, @MapValues_B_enumerate_, @MapValues_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MapValues_B_filter_fFunctionT_to_Bool, @MapValues_B_chain_otherIterableT_chain_otherCollectionT, @MapValues_B_interleave_otherIterableT_interleave_otherCollectionT, @MapValues_B_zip_otherIterableU_zip_otherCollectionU, @MapValues_B_product_otherCollectionU_product_otherIterableU, @MapValues_init_mapMapK._V, @MapValues_size_, @Collection_is_empty_, @MapValues_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @MapValues_field_MapValues_1, @MapValues_B_size_, @MapValues_B_is_empty_, @MapValues_B_iterator_, @MapValues_B_each_fFunctionT_to_Nothing, @MapValues_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapValues_B_all_fFunctionT_to_Bool, @MapValues_B_any_fFunctionT_to_Bool, @MapValues_B_enumerate_, @MapValues_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MapValues_B_filter_fFunctionT_to_Bool, @MapValues_B_chain_otherIterableT_chain_otherCollectionT, @MapValues_B_interleave_otherIterableT_interleave_otherCollectionT, @MapValues_B_zip_otherIterableU_zip_otherCollectionU, @MapValues_B_product_otherCollectionU_product_otherIterableU, @MapValues_size_, @Collection_is_empty_, @MapValues_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @MapValues_field_MapValues_1, @MapValues_B_iterator_, @MapValues_B_each_fFunctionT_to_Nothing, @MapValues_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapValues_B_all_fFunctionT_to_Bool, @MapValues_B_any_fFunctionT_to_Bool, @MapValues_B_enumerate_, @MapValues_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MapValues_B_filter_fFunctionT_to_Bool, @MapValues_B_chain_otherIterableT_chain_otherCollectionT, @MapValues_B_interleave_otherIterableT_interleave_otherCollectionT, @MapValues_B_zip_otherIterableU_zip_otherCollectionU, @MapValues_B_product_otherCollectionU_product_otherIterableU, @MapValues_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @MapValues_field_MapValues_1, @MapValues_B_iterator_, @MapValues_B_each_fFunctionT_to_Nothing, @MapValues_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapValues_B_all_fFunctionT_to_Bool, @MapValues_B_any_fFunctionT_to_Bool, @MapValues_B_enumerate_, @MapValues_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MapValues_B_filter_fFunctionT_to_Bool, @MapValues_B_chain_otherIterableT_chain_otherCollectionT, @MapValues_B_interleave_otherIterableT_interleave_otherCollectionT, @MapValues_B_zip_otherIterableU_zip_otherCollectionU, @MapValues_B_product_otherCollectionU_product_otherIterableU, @MapValues_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, @MapValues, 18446744073709551615 : i64, 18446744073709551615 : i64, @Collection, @Object], "offset_tbl" = [10 : i32, 107 : i32, 0 : i32, 10 : i32, 0 : i32, 0 : i32, 48 : i32, 132 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 2074062704914054732 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_MapValues", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MapKeyIterator", "methods" = [@MapKeyIterator_field_MapKeyIterator_1, @MapKeyIterator_field_MapKeyIterator_0, @MapKeyIterator_field_map_iterator, @MapKeyIterator_B_init_map_iteratorIteratorPairK._V, @MapKeyIterator_B_next_, @MapKeyIterator_init_map_iteratorIteratorPairK._V, @MapKeyIterator_next_, @MapKeyIterator_field_MapKeyIterator_0, @MapKeyIterator_B_next_, @MapKeyIterator_next_], "hash_tbl" = [@Object, @MapKeyIterator, @any_typ, @Iterator], "offset_tbl" = [20 : i32, 10 : i32, 10 : i32, 17 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 7211362081012783701 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_MapKeyIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MapValueIterator", "methods" = [@MapValueIterator_field_MapValueIterator_0, @MapValueIterator_field_MapValueIterator_1, @MapValueIterator_field_map_iterator, @MapValueIterator_B_init_map_iteratorIteratorPairK._V, @MapValueIterator_B_next_, @MapValueIterator_init_map_iteratorIteratorPairK._V, @MapValueIterator_next_, @MapValueIterator_field_MapValueIterator_1, @MapValueIterator_B_next_, @MapValueIterator_next_], "hash_tbl" = [@any_typ, @Iterator, @MapValueIterator, @Object], "offset_tbl" = [10 : i32, 17 : i32, 10 : i32, 20 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 13464941020225438231 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_MapValueIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "HashMap", "methods" = [], "hash_tbl" = [@Map, @any_typ, 18446744073709551615 : i64, @Collection, 18446744073709551615 : i64, @Indexable, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @IndexableCollection, 18446744073709551615 : i64, 18446744073709551615 : i64, @HashMap, 18446744073709551615 : i64, @Object, 18446744073709551615 : i64], "offset_tbl" = [66 : i32, 10 : i32, 0 : i32, 484 : i32, 0 : i32, 478 : i32, 0 : i32, 0 : i32, 543 : i32, 344 : i32, 0 : i32, 0 : i32, 10 : i32, 0 : i32, 484 : i32, 0 : i32], "prime" = 4611686018427390107 : i64, "hash_id" = 15597100789811399287 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>, "data_size_fn" = "_data_size_HashMap", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_KeyNotFound", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_line_number", "getter_name" = "KeyNotFound_getter_line_number", "setter_name" = "KeyNotFound_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_file_name", "getter_name" = "KeyNotFound_getter_file_name", "setter_name" = "KeyNotFound_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_message", "getter_name" = "KeyNotFound_getter_message", "setter_name" = "KeyNotFound_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "KeyNotFound_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.setter_def"() {"meth_name" = "KeyNotFound_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "KeyNotFound_field_stacktrace", "getter_name" = "KeyNotFound_getter_stacktrace", "setter_name" = "KeyNotFound_setter_stacktrace"} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_messageString", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb2:
      %4 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb1:
      %5 = "llvm.getelementptr"(%1) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %6 = "mid.checkflag"(%5) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %7 = "llvm.load"(%6) : (!hi.bool) -> i1
      "cf.cond_br"(%7) [^bb2, ^bb2] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb3:
      %8 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %9 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %10 = "llvm.getelementptr"(%8, %9) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %11 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%12) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb4(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      %17 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %18 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %19 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %20 = "llvm.getelementptr"(%18, %19) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %21 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %22 = "llvm.getelementptr"(%20, %21) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%22) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_set_info_line_numberi32_file_nameString", "function_type" = !llvm.func<void (i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb7(%23 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %24 : !llvm.ptr):
      %25 = "mid.invariant"(%24) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %26 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %27 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%27, %26) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %28 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %29 = "mid.checkflag"(%28) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %30 = "llvm.load"(%29) : (!hi.bool) -> i1
      "cf.cond_br"(%30) [^bb9, ^bb9] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb8:
      %31 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %32 = "mid.checkflag"(%31) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %33 = "llvm.load"(%32) : (!hi.bool) -> i1
      "cf.cond_br"(%33) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %34 = "llvm.extractvalue"(%23) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %35 = "llvm.load"(%26) : (!llvm.ptr) -> i32
      %36 = "llvm.getelementptr"(%34, %35) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %37 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%38) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_report_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb12(%39 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %40 : !llvm.ptr):
      %41 = "mid.invariant"(%40) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %42 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %43 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%43, %42) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      %44 = "llvm.extractvalue"(%39) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %45 = "llvm.load"(%42) : (!llvm.ptr) -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %47 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%48) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_print_message_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb15(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      %53 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      %54 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %55 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %57 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %58 = "llvm.getelementptr"(%56, %57) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%58) : (!llvm.ptr) -> ()
    }) {"func_name" = "KeyNotFound_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Map", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Map_field_Map_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Map_field_Map_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Map_field_Map_4"} : () -> ()
    "mid.func"() ({
    ^bb18(%59 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %60 : !llvm.ptr):
      %61 = "mid.invariant"(%60) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %62 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb19] : () -> ()
    ^bb20:
      %63 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%63, %62) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb21] : () -> ()
    ^bb19:
      %64 = "llvm.getelementptr"(%60) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %65 = "mid.checkflag"(%64) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %66 = "llvm.load"(%65) : (!hi.bool) -> i1
      "cf.cond_br"(%66) [^bb20, ^bb20] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb21:
      %67 = "llvm.extractvalue"(%59) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %68 = "llvm.load"(%62) : (!llvm.ptr) -> i32
      %69 = "llvm.getelementptr"(%67, %68) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %70 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %71 = "llvm.getelementptr"(%69, %70) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%71) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_get_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb22(%72 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %73 : !llvm.ptr):
      %74 = "mid.invariant"(%73) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %75 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb23] : () -> ()
    ^bb24:
      %76 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%76, %75) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb25] : () -> ()
    ^bb26:
      %77 = "llvm.getelementptr"(%73) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %78 = "mid.checkflag"(%77) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %79 = "llvm.load"(%78) : (!hi.bool) -> i1
      "cf.cond_br"(%79) [^bb24, ^bb24] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %80 = "llvm.getelementptr"(%73) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %81 = "mid.checkflag"(%80) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %82 = "llvm.load"(%81) : (!hi.bool) -> i1
      "cf.cond_br"(%82) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb25:
      %83 = "llvm.extractvalue"(%72) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %84 = "llvm.load"(%75) : (!llvm.ptr) -> i32
      %85 = "llvm.getelementptr"(%83, %84) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %86 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %87 = "llvm.getelementptr"(%85, %86) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%87) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_insert_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%88 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %89 : !llvm.ptr):
      %90 = "mid.invariant"(%89) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %91 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb28] : () -> ()
    ^bb29:
      %92 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%92, %91) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb30] : () -> ()
    ^bb28:
      %93 = "llvm.getelementptr"(%89) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %94 = "mid.checkflag"(%93) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %95 = "llvm.load"(%94) : (!hi.bool) -> i1
      "cf.cond_br"(%95) [^bb29, ^bb29] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %96 = "llvm.extractvalue"(%88) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %97 = "llvm.load"(%91) : (!llvm.ptr) -> i32
      %98 = "llvm.getelementptr"(%96, %97) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %99 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %100 = "llvm.getelementptr"(%98, %99) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%100) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_remove_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb31(%101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %102 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %103 : !llvm.ptr):
      %104 = "mid.wrap"(%101) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %105 = "hi.cast"(%104) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %106 = "mid.unwrap"(%105) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %107 = "mid.get_type_field"(%105) {"offset" = 1 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %108 = "mid.get_type_field"(%105) {"offset" = 0 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %109 = "mid.new"(%107, %108) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "MapKeys", "num_data_fields" = 1 : i32, "region_id" = "single_region_aoqrhdlkqu", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %110 = "hi.cast"(%105) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %111 = "mid.unwrap"(%110) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %112 = "mid.unwrap"(%109) : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %113 = "mid.get_type_field"(%105) {"offset" = 0 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %114 = "mid.get_type_field"(%105) {"offset" = 1 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %115 = "mid.parameterization"(%113, %114) {"id_hierarchy" = ["Map", [0 : i32], [1 : i32]], "name_hierarchy" = ["MapMap.K_subtype_Any._Map.V_subtype_Any", ["Map.K_subtype_Any"], ["Map.V_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %116 = "mid.parameterizations_array"(%115) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%116, %112, %111) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 122 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %117 = "hi.cast"(%109) {"from_typ" = !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>, "from_typ_name" = "MapKeys", "to_typ_name" = "Collection"} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>
      "mid.return"(%117) : (!hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>) -> ()
    }) {"func_name" = "Map_keys_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb32(%118 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %119 : !llvm.ptr):
      %120 = "mid.invariant"(%119) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %121 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb33] : () -> ()
    ^bb33:
      %122 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%122, %121) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      %123 = "llvm.extractvalue"(%118) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %124 = "llvm.load"(%121) : (!llvm.ptr) -> i32
      %125 = "llvm.getelementptr"(%123, %124) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %126 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %127 = "llvm.getelementptr"(%125, %126) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%127) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_keys_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb35(%128 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %129 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %130 : !llvm.ptr):
      %131 = "mid.wrap"(%128) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %132 = "hi.cast"(%131) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %133 = "mid.unwrap"(%132) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %134 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %135 = "mid.method_call"(%134, %133) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 278 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>
      %136 = "hi.cast"(%135) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>
      %137 = "mid.unwrap"(%136) : (!hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %138 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %139 = "mid.method_call"(%138, %137) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %140 = "hi.cast"(%139) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"K", !hi.any, "Map">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"K", !hi.any, "Map">]>
      %141 = "mid.refer"(%140) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"K", !hi.any, "Map">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"K", !hi.any, "Map">]>
      "mid.while"() ({
        %142 = "mid.unwrap"(%141) : (!hi.fatptr<"Iterator", [!hi.type_param<"K", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %143 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %144 = "mid.method_call"(%143, %142) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %145 = "hi.cast"(%144) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>
        %146 = "mid.get_type_field"(%132) {"offset" = 0 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
        %147 = "mid.checkflag"(%145) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>) -> si1
        %148 = "mid.unwrap"(%147) : (si1) -> i1
      }, {
        %149 = "hi.cast"(%145) {"from_typ" = !hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>, "to_typ" = !hi.type_param<"K", !hi.any, "Map">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>) -> !hi.type_param<"K", !hi.any, "Map">
        %150 = "hi.cast"(%149) {"from_typ" = !hi.type_param<"K", !hi.any, "Map">, "to_typ" = !hi.type_param<"K", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Map">) -> !hi.type_param<"K", !hi.any, "Map">
        %151 = "mid.unwrap"(%150) : (!hi.type_param<"K", !hi.any, "Map">) -> !llvm.struct<(!llvm.ptr, i160)>
        %152 = "mid.unwrap"(%132) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %153 = "mid.get_type_field"(%132) {"offset" = 0 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
        %154 = "mid.parameterizations_array"(%153) : (!hi.reified_type) -> !llvm.ptr
        %155 = "mid.method_call"(%154, %152, %151) {"offset" = 5 : i32, "vptrs" = ["any_typ"], "vtable_size" = 278 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>
        %156 = "hi.cast"(%155) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>
        %157 = "hi.cast"(%149) {"from_typ" = !hi.type_param<"K", !hi.any, "Map">, "to_typ" = !hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"K", !hi.any, "Map">) -> !hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>
        "mid.assign"(%145, %157) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>, !hi.union<[!hi.type_param<"K", !hi.any, "Map">, !hi.nil]>) -> ()
      }) : () -> ()
    }) {"func_name" = "Map_clear_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb36(%158 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %159 : !llvm.ptr):
      %160 = "mid.invariant"(%159) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %161 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb37] : () -> ()
    ^bb37:
      %162 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%162, %161) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %163 = "llvm.extractvalue"(%158) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %164 = "llvm.load"(%161) : (!llvm.ptr) -> i32
      %165 = "llvm.getelementptr"(%163, %164) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %166 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %167 = "llvm.getelementptr"(%165, %166) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%167) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_clear_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb39(%168 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %170 : !llvm.ptr):
      %171 = "mid.wrap"(%168) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %172 = "hi.cast"(%171) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %173 = "mid.unwrap"(%172) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %174 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %175 = "mid.method_call"(%174, %173) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 278 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>
      %176 = "hi.cast"(%175) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>
      %177 = "hi.cast"(%176) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>
      "mid.return"(%177) : (!hi.fatptr<"Collection", [!hi.type_param<"K", !hi.any, "Map">]>) -> ()
    }) {"func_name" = "Map_indices_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb40(%178 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %179 : !llvm.ptr):
      %180 = "mid.invariant"(%179) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %181 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb41] : () -> ()
    ^bb41:
      %182 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%182, %181) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb42:
      %183 = "llvm.extractvalue"(%178) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %184 = "llvm.load"(%181) : (!llvm.ptr) -> i32
      %185 = "llvm.getelementptr"(%183, %184) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %186 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %187 = "llvm.getelementptr"(%185, %186) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%187) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_indices_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb43(%188 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %189 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %190 : !llvm.ptr):
      %191 = "mid.wrap"(%188) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %192 = "hi.cast"(%191) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %193 = "mid.unwrap"(%192) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %194 = "mid.get_type_field"(%192) {"offset" = 0 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %195 = "mid.get_type_field"(%192) {"offset" = 1 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %196 = "mid.new"(%194, %195) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "MapValues", "num_data_fields" = 1 : i32, "region_id" = "single_region_lgwyarmhnk", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %197 = "hi.cast"(%192) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %198 = "mid.unwrap"(%197) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %199 = "mid.unwrap"(%196) : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %200 = "mid.get_type_field"(%192) {"offset" = 0 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %201 = "mid.get_type_field"(%192) {"offset" = 1 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %202 = "mid.parameterization"(%200, %201) {"id_hierarchy" = ["Map", [0 : i32], [1 : i32]], "name_hierarchy" = ["MapMap.K_subtype_Any._Map.V_subtype_Any", ["Map.K_subtype_Any"], ["Map.V_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %203 = "mid.parameterizations_array"(%202) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%203, %199, %198) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 122 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %204 = "hi.cast"(%196) {"from_typ" = !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "MapValues", "to_typ_name" = "Collection"} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"V", !hi.any, "Map">]>
      "mid.return"(%204) : (!hi.fatptr<"Collection", [!hi.type_param<"V", !hi.any, "Map">]>) -> ()
    }) {"func_name" = "Map_values_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb44(%205 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %206 : !llvm.ptr):
      %207 = "mid.invariant"(%206) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %208 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb45] : () -> ()
    ^bb45:
      %209 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%209, %208) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb46] : () -> ()
    ^bb46:
      %210 = "llvm.extractvalue"(%205) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %211 = "llvm.load"(%208) : (!llvm.ptr) -> i32
      %212 = "llvm.getelementptr"(%210, %211) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %213 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %214 = "llvm.getelementptr"(%212, %213) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%214) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_values_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb47(%215 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %217 : !llvm.ptr, %218 : !llvm.struct<(!llvm.ptr, i160)>):
      %219 = "mid.wrap"(%215) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %220 = "hi.cast"(%219) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %221 = "mid.wrap"(%218) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "Map">
      %222 = "hi.cast"(%221) {"from_typ" = !hi.type_param<"K", !hi.any, "Map">, "to_typ" = !hi.type_param<"K", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Map">) -> !hi.type_param<"K", !hi.any, "Map">
      %223 = "hi.cast"(%222) {"from_typ" = !hi.type_param<"K", !hi.any, "Map">, "to_typ" = !hi.type_param<"K", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Map">) -> !hi.type_param<"K", !hi.any, "Map">
      %224 = "mid.unwrap"(%223) : (!hi.type_param<"K", !hi.any, "Map">) -> !llvm.struct<(!llvm.ptr, i160)>
      %225 = "mid.unwrap"(%220) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %226 = "mid.get_type_field"(%220) {"offset" = 0 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %227 = "mid.parameterizations_array"(%226) : (!hi.reified_type) -> !llvm.ptr
      %228 = "mid.method_call"(%227, %225, %224) {"offset" = 3 : i32, "vptrs" = ["any_typ"], "vtable_size" = 278 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>
      %229 = "hi.cast"(%228) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>) -> !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>
      %230 = "mid.get_type_field"(%220) {"offset" = 1 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %231 = "mid.checkflag"(%229) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>) -> si1
      %232 = "mid.unwrap"(%231) : (si1) -> i1
      "mid.if"(%232) ({
        %233 = "hi.cast"(%229) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>, "to_typ" = !hi.type_param<"V", !hi.any, "Map">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>) -> !hi.type_param<"V", !hi.any, "Map">
        %234 = "hi.cast"(%233) {"from_typ" = !hi.type_param<"V", !hi.any, "Map">, "to_typ" = !hi.type_param<"V", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Map">) -> !hi.type_param<"V", !hi.any, "Map">
        "mid.return"(%234) : (!hi.type_param<"V", !hi.any, "Map">) -> ()
      }) : (i1) -> ()
      %235 = "hi.cast"(%229) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "Map">, !hi.nil]>) -> !hi.nil
      %236 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "KeyNotFound", "num_data_fields" = 4 : i32, "region_id" = "single_region_hskowmoidm"} : () -> !hi.fatptr<"KeyNotFound">
      %237 = "mid.unwrap"(%236) : (!hi.fatptr<"KeyNotFound">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %238 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%238, %237) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %239 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> si32
      %240 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
      %241 = "hi.cast"(%240) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %242 = "mid.create_buffer"(%241) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %243 = "mid.refer"(%242) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %244 = "mid.literal"() {"typ" = !llvm.array<54 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/map.mini"} : () -> !llvm.ptr
      %245 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%243, %245, %244) {"typ" = !llvm.array<54 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %246 = "mid.literal"() {"value" = 54 : i32, "typ" = i32} : () -> si32
      %247 = "mid.literal"() {"value" = 54 : i32, "typ" = i32} : () -> si32
      %248 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
      %249 = "mid.unwrap"(%243) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %250 = "mid.unwrap"(%246) : (si32) -> i32
      %251 = "mid.unwrap"(%247) : (si32) -> i32
      %252 = "mid.unwrap"(%248) : (si32) -> i32
      %253 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %254 = "mid.literal"() {"value" = 54 : i32, "typ" = i32} : () -> si32
      %255 = "mid.literal"() {"value" = 54 : i32, "typ" = i32} : () -> si32
      %256 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
      %257 = "hi.cast"(%243) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %258 = "mid.unwrap"(%257) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %259 = "hi.cast"(%254) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %260 = "mid.unwrap"(%259) : (si32) -> i32
      %261 = "hi.cast"(%255) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %262 = "mid.unwrap"(%261) : (si32) -> i32
      %263 = "hi.cast"(%256) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %264 = "mid.unwrap"(%263) : (si32) -> i32
      %265 = "mid.unwrap"(%253) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %266 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %267 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %268 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %269 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %270 = "mid.parameterizations_array"(%266, %267, %268, %269) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%270, %265, %258, %260, %262, %264) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %271 = "hi.cast"(%239) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %272 = "mid.unwrap"(%271) : (si32) -> i32
      %273 = "hi.cast"(%253) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %274 = "mid.unwrap"(%273) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %275 = "mid.unwrap"(%236) : (!hi.fatptr<"KeyNotFound">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %276 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %277 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %278 = "mid.parameterizations_array"(%276, %277) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%278, %275, %272, %274) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %279 = "hi.cast"(%236) {"from_typ" = !hi.fatptr<"KeyNotFound">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "KeyNotFound", "to_typ_name" = "union_typ"} : (!hi.fatptr<"KeyNotFound">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      %280 = "mid.unwrap"(%279) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %281 = "mid.coro_yield"(%280) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %282 = "mid.wrap"(%281) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"KeyNotFound">, !hi.nil]>
    }) {"func_name" = "Map__index_keyK", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb48(%283 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %284 : !llvm.ptr):
      %285 = "mid.invariant"(%284) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %286 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb49] : () -> ()
    ^bb50:
      %287 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%287, %286) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb51] : () -> ()
    ^bb49:
      %288 = "llvm.getelementptr"(%284) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %289 = "mid.checkflag"(%288) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %290 = "llvm.load"(%289) : (!hi.bool) -> i1
      "cf.cond_br"(%290) [^bb50, ^bb50] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb51:
      %291 = "llvm.extractvalue"(%283) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %292 = "llvm.load"(%286) : (!llvm.ptr) -> i32
      %293 = "llvm.getelementptr"(%291, %292) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %294 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %295 = "llvm.getelementptr"(%293, %294) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%295) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B__index_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb52(%296 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %297 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %298 : !llvm.ptr, %299 : !llvm.struct<(!llvm.ptr, i160)>, %300 : !llvm.struct<(!llvm.ptr, i160)>):
      %301 = "mid.wrap"(%296) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %302 = "hi.cast"(%301) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>
      %303 = "mid.wrap"(%299) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "Map">
      %304 = "hi.cast"(%303) {"from_typ" = !hi.type_param<"K", !hi.any, "Map">, "to_typ" = !hi.type_param<"K", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Map">) -> !hi.type_param<"K", !hi.any, "Map">
      %305 = "mid.wrap"(%300) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"V", !hi.any, "Map">
      %306 = "hi.cast"(%305) {"from_typ" = !hi.type_param<"V", !hi.any, "Map">, "to_typ" = !hi.type_param<"V", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Map">) -> !hi.type_param<"V", !hi.any, "Map">
      %307 = "hi.cast"(%304) {"from_typ" = !hi.type_param<"K", !hi.any, "Map">, "to_typ" = !hi.type_param<"K", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Map">) -> !hi.type_param<"K", !hi.any, "Map">
      %308 = "mid.unwrap"(%307) : (!hi.type_param<"K", !hi.any, "Map">) -> !llvm.struct<(!llvm.ptr, i160)>
      %309 = "hi.cast"(%306) {"from_typ" = !hi.type_param<"V", !hi.any, "Map">, "to_typ" = !hi.type_param<"V", !hi.any, "Map">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Map">) -> !hi.type_param<"V", !hi.any, "Map">
      %310 = "mid.unwrap"(%309) : (!hi.type_param<"V", !hi.any, "Map">) -> !llvm.struct<(!llvm.ptr, i160)>
      %311 = "mid.unwrap"(%302) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %312 = "mid.get_type_field"(%302) {"offset" = 0 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %313 = "mid.get_type_field"(%302) {"offset" = 1 : i64, "vtable_bytes" = 2224 : i32} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "Map">, !hi.type_param<"V", !hi.any, "Map">]>) -> !hi.reified_type
      %314 = "mid.parameterizations_array"(%312, %313) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      "mid.method_call"(%314, %311, %308, %310) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 278 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "Map__set_index_keyK_valueV", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb53(%315 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %316 : !llvm.ptr):
      %317 = "mid.invariant"(%316) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %318 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb54] : () -> ()
    ^bb55:
      %319 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%319, %318) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb56] : () -> ()
    ^bb57:
      %320 = "llvm.getelementptr"(%316) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %321 = "mid.checkflag"(%320) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %322 = "llvm.load"(%321) : (!hi.bool) -> i1
      "cf.cond_br"(%322) [^bb55, ^bb55] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb54:
      %323 = "llvm.getelementptr"(%316) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %324 = "mid.checkflag"(%323) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %325 = "llvm.load"(%324) : (!hi.bool) -> i1
      "cf.cond_br"(%325) [^bb57, ^bb57] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb56:
      %326 = "llvm.extractvalue"(%315) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %327 = "llvm.load"(%318) : (!llvm.ptr) -> i32
      %328 = "llvm.getelementptr"(%326, %327) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %329 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %330 = "llvm.getelementptr"(%328, %329) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%330) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B__set_index_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_size_", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb58(%331 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %332 : !llvm.ptr):
      %333 = "mid.invariant"(%332) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %334 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb59] : () -> ()
    ^bb59:
      %335 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%335, %334) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb60] : () -> ()
    ^bb60:
      %336 = "llvm.extractvalue"(%331) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %337 = "llvm.load"(%334) : (!llvm.ptr) -> i32
      %338 = "llvm.getelementptr"(%336, %337) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %339 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %340 = "llvm.getelementptr"(%338, %339) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%340) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_is_empty_", "function_type" = !llvm.func<i1 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb61(%341 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %342 : !llvm.ptr):
      %343 = "mid.invariant"(%342) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %344 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb62] : () -> ()
    ^bb62:
      %345 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%345, %344) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb63] : () -> ()
    ^bb63:
      %346 = "llvm.extractvalue"(%341) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %347 = "llvm.load"(%344) : (!llvm.ptr) -> i32
      %348 = "llvm.getelementptr"(%346, %347) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %349 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %350 = "llvm.getelementptr"(%348, %349) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%350) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_iterator_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb64(%351 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %352 : !llvm.ptr):
      %353 = "mid.invariant"(%352) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %354 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb65] : () -> ()
    ^bb65:
      %355 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%355, %354) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb66] : () -> ()
    ^bb66:
      %356 = "llvm.extractvalue"(%351) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %357 = "llvm.load"(%354) : (!llvm.ptr) -> i32
      %358 = "llvm.getelementptr"(%356, %357) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %359 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %360 = "llvm.getelementptr"(%358, %359) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%360) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb67(%361 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %362 : !llvm.ptr):
      %363 = "mid.invariant"(%362) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %364 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb68] : () -> ()
    ^bb69:
      %365 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%365, %364) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb70] : () -> ()
    ^bb68:
      %366 = "llvm.getelementptr"(%362) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %367 = "mid.checkflag"(%366) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %368 = "llvm.load"(%367) : (!hi.bool) -> i1
      "cf.cond_br"(%368) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb70:
      %369 = "llvm.extractvalue"(%361) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %370 = "llvm.load"(%364) : (!llvm.ptr) -> i32
      %371 = "llvm.getelementptr"(%369, %370) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %372 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %373 = "llvm.getelementptr"(%371, %372) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%373) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb71(%374 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %375 : !llvm.ptr):
      %376 = "mid.invariant"(%375) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %377 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %378 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%378, %377) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb75:
      %379 = "llvm.getelementptr"(%375) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %380 = "mid.checkflag"(%379) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %381 = "llvm.load"(%380) : (!hi.bool) -> i1
      "cf.cond_br"(%381) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb72:
      %382 = "llvm.getelementptr"(%375) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %383 = "mid.checkflag"(%382) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %384 = "llvm.load"(%383) : (!hi.bool) -> i1
      "cf.cond_br"(%384) [^bb75, ^bb75] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %385 = "llvm.extractvalue"(%374) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %386 = "llvm.load"(%377) : (!llvm.ptr) -> i32
      %387 = "llvm.getelementptr"(%385, %386) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %388 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %389 = "llvm.getelementptr"(%387, %388) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%389) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb76(%390 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %391 : !llvm.ptr):
      %392 = "mid.invariant"(%391) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %393 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %394 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%394, %393) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb77:
      %395 = "llvm.getelementptr"(%391) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %396 = "mid.checkflag"(%395) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %397 = "llvm.load"(%396) : (!hi.bool) -> i1
      "cf.cond_br"(%397) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %398 = "llvm.extractvalue"(%390) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %399 = "llvm.load"(%393) : (!llvm.ptr) -> i32
      %400 = "llvm.getelementptr"(%398, %399) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %401 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %402 = "llvm.getelementptr"(%400, %401) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%402) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb80(%403 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %404 : !llvm.ptr):
      %405 = "mid.invariant"(%404) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %406 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb81] : () -> ()
    ^bb82:
      %407 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%407, %406) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb83] : () -> ()
    ^bb81:
      %408 = "llvm.getelementptr"(%404) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %409 = "mid.checkflag"(%408) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %410 = "llvm.load"(%409) : (!hi.bool) -> i1
      "cf.cond_br"(%410) [^bb82, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %411 = "llvm.extractvalue"(%403) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %412 = "llvm.load"(%406) : (!llvm.ptr) -> i32
      %413 = "llvm.getelementptr"(%411, %412) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %414 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %415 = "llvm.getelementptr"(%413, %414) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%415) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb84(%416 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %417 : !llvm.ptr):
      %418 = "mid.invariant"(%417) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %419 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb85] : () -> ()
    ^bb85:
      %420 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%420, %419) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb86:
      %421 = "llvm.extractvalue"(%416) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %422 = "llvm.load"(%419) : (!llvm.ptr) -> i32
      %423 = "llvm.getelementptr"(%421, %422) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %424 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %425 = "llvm.getelementptr"(%423, %424) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%425) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb87(%426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %427 : !llvm.ptr):
      %428 = "mid.invariant"(%427) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %429 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb88] : () -> ()
    ^bb89:
      %430 = "llvm.mlir.constant"() <{"value" = 170 : i32}> : () -> i32
      "llvm.store"(%430, %429) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb90] : () -> ()
    ^bb91:
      %431 = "llvm.mlir.constant"() <{"value" = 169 : i32}> : () -> i32
      "llvm.store"(%431, %429) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb90] : () -> ()
    ^bb88:
      %432 = "llvm.getelementptr"(%427) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %433 = "mid.checkflag"(%432) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %434 = "llvm.load"(%433) : (!hi.bool) -> i1
      "cf.cond_br"(%434) [^bb89, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb92:
      %435 = "llvm.getelementptr"(%427) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %436 = "mid.checkflag"(%435) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %437 = "llvm.load"(%436) : (!hi.bool) -> i1
      "cf.cond_br"(%437) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %438 = "llvm.extractvalue"(%426) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %439 = "llvm.load"(%429) : (!llvm.ptr) -> i32
      %440 = "llvm.getelementptr"(%438, %439) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %441 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %442 = "llvm.getelementptr"(%440, %441) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%442) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb93(%443 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %444 : !llvm.ptr):
      %445 = "mid.invariant"(%444) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %446 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb94] : () -> ()
    ^bb95:
      %447 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%447, %446) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb96] : () -> ()
    ^bb94:
      %448 = "llvm.getelementptr"(%444) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %449 = "mid.checkflag"(%448) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %450 = "llvm.load"(%449) : (!hi.bool) -> i1
      "cf.cond_br"(%450) [^bb95, ^bb95] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb96:
      %451 = "llvm.extractvalue"(%443) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %452 = "llvm.load"(%446) : (!llvm.ptr) -> i32
      %453 = "llvm.getelementptr"(%451, %452) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %454 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %455 = "llvm.getelementptr"(%453, %454) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%455) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb97(%456 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %457 : !llvm.ptr):
      %458 = "mid.invariant"(%457) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %459 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb98] : () -> ()
    ^bb99:
      %460 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%460, %459) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb100] : () -> ()
    ^bb101:
      %461 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%461, %459) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb100] : () -> ()
    ^bb98:
      %462 = "llvm.getelementptr"(%457) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %463 = "mid.checkflag"(%462) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %464 = "llvm.load"(%463) : (!hi.bool) -> i1
      "cf.cond_br"(%464) [^bb99, ^bb102] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb102:
      %465 = "llvm.getelementptr"(%457) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %466 = "mid.checkflag"(%465) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %467 = "llvm.load"(%466) : (!hi.bool) -> i1
      "cf.cond_br"(%467) [^bb103, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb103:
      %468 = "llvm.getelementptr"(%457) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %469 = "mid.checkflag"(%468) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %470 = "llvm.load"(%469) : (!hi.bool) -> i1
      "cf.cond_br"(%470) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb100:
      %471 = "llvm.extractvalue"(%456) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %472 = "llvm.load"(%459) : (!llvm.ptr) -> i32
      %473 = "llvm.getelementptr"(%471, %472) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %474 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %475 = "llvm.getelementptr"(%473, %474) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%475) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb104(%476 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %477 : !llvm.ptr):
      %478 = "mid.invariant"(%477) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %479 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb105] : () -> ()
    ^bb106:
      %480 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%480, %479) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb107] : () -> ()
    ^bb108:
      %481 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%481, %479) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb107] : () -> ()
    ^bb105:
      %482 = "llvm.getelementptr"(%477) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %483 = "mid.checkflag"(%482) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %484 = "llvm.load"(%483) : (!hi.bool) -> i1
      "cf.cond_br"(%484) [^bb106, ^bb109] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb109:
      %485 = "llvm.getelementptr"(%477) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %486 = "mid.checkflag"(%485) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %487 = "llvm.load"(%486) : (!hi.bool) -> i1
      "cf.cond_br"(%487) [^bb110, ^bb108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb110:
      %488 = "llvm.getelementptr"(%477) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %489 = "mid.checkflag"(%488) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %490 = "llvm.load"(%489) : (!hi.bool) -> i1
      "cf.cond_br"(%490) [^bb108, ^bb108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb107:
      %491 = "llvm.extractvalue"(%476) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %492 = "llvm.load"(%479) : (!llvm.ptr) -> i32
      %493 = "llvm.getelementptr"(%491, %492) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %494 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %495 = "llvm.getelementptr"(%493, %494) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%495) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb111(%496 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %497 : !llvm.ptr):
      %498 = "mid.invariant"(%497) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %499 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb112] : () -> ()
    ^bb113:
      %500 = "llvm.mlir.constant"() <{"value" = 177 : i32}> : () -> i32
      "llvm.store"(%500, %499) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb114] : () -> ()
    ^bb115:
      %501 = "llvm.mlir.constant"() <{"value" = 176 : i32}> : () -> i32
      "llvm.store"(%501, %499) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb114] : () -> ()
    ^bb112:
      %502 = "llvm.getelementptr"(%497) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %503 = "mid.checkflag"(%502) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %504 = "llvm.load"(%503) : (!hi.bool) -> i1
      "cf.cond_br"(%504) [^bb113, ^bb116] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb116:
      %505 = "llvm.getelementptr"(%497) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %506 = "mid.checkflag"(%505) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %507 = "llvm.load"(%506) : (!hi.bool) -> i1
      "cf.cond_br"(%507) [^bb117, ^bb115] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb117:
      %508 = "llvm.getelementptr"(%497) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %509 = "mid.checkflag"(%508) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %510 = "llvm.load"(%509) : (!hi.bool) -> i1
      "cf.cond_br"(%510) [^bb115, ^bb115] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb114:
      %511 = "llvm.extractvalue"(%496) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %512 = "llvm.load"(%499) : (!llvm.ptr) -> i32
      %513 = "llvm.getelementptr"(%511, %512) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %514 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %515 = "llvm.getelementptr"(%513, %514) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%515) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb118(%516 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %517 : !llvm.ptr):
      %518 = "mid.invariant"(%517) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %519 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb119] : () -> ()
    ^bb120:
      %520 = "llvm.mlir.constant"() <{"value" = 178 : i32}> : () -> i32
      "llvm.store"(%520, %519) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb121] : () -> ()
    ^bb122:
      %521 = "llvm.mlir.constant"() <{"value" = 179 : i32}> : () -> i32
      "llvm.store"(%521, %519) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb121] : () -> ()
    ^bb119:
      %522 = "llvm.getelementptr"(%517) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %523 = "mid.checkflag"(%522) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %524 = "llvm.load"(%523) : (!hi.bool) -> i1
      "cf.cond_br"(%524) [^bb120, ^bb123] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %525 = "llvm.getelementptr"(%517) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %526 = "mid.checkflag"(%525) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %527 = "llvm.load"(%526) : (!hi.bool) -> i1
      "cf.cond_br"(%527) [^bb124, ^bb122] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb124:
      %528 = "llvm.getelementptr"(%517) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %529 = "mid.checkflag"(%528) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %530 = "llvm.load"(%529) : (!hi.bool) -> i1
      "cf.cond_br"(%530) [^bb122, ^bb122] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb121:
      %531 = "llvm.extractvalue"(%516) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %532 = "llvm.load"(%519) : (!llvm.ptr) -> i32
      %533 = "llvm.getelementptr"(%531, %532) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<278 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %534 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %535 = "llvm.getelementptr"(%533, %534) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%535) : (!llvm.ptr) -> ()
    }) {"func_name" = "Map_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MapKeys", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapKeys_field_MapKeys_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapKeys_field_MapKeys_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapKeys_getter_map", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Map", "parameterization" = "_parameterization_MapMapKeys.K_subtype_Any._MapKeys.V_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapKeys_setter_map", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Map", "parameterization" = "_parameterization_MapMapKeys.K_subtype_Any._MapKeys.V_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapKeys_field_map", "getter_name" = "MapKeys_getter_map", "setter_name" = "MapKeys_setter_map"} : () -> ()
    "mid.func"() ({
    ^bb125(%536 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %537 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %538 : !llvm.ptr, %539 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %540 = "mid.wrap"(%536) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %541 = "hi.cast"(%540) {"from_typ" = !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "to_typ" = !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "from_typ_name" = "MapKeys", "to_typ_name" = "MapKeys"} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %542 = "mid.wrap"(%539) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %543 = "hi.cast"(%542) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %544 = "hi.cast"(%543) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      "mid.set_field"(%541, %544) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> ()
    }) {"func_name" = "MapKeys_init_mapMapK._V", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb126(%545 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %546 : !llvm.ptr):
      %547 = "mid.invariant"(%546) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %548 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb127] : () -> ()
    ^bb128:
      %549 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%549, %548) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb129] : () -> ()
    ^bb127:
      %550 = "llvm.getelementptr"(%546) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %551 = "mid.checkflag"(%550) {"typ_name" = "Map"} : (!llvm.ptr) -> !hi.bool
      %552 = "llvm.load"(%551) : (!hi.bool) -> i1
      "cf.cond_br"(%552) [^bb128, ^bb128] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb129:
      %553 = "llvm.extractvalue"(%545) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %554 = "llvm.load"(%548) : (!llvm.ptr) -> i32
      %555 = "llvm.getelementptr"(%553, %554) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %556 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %557 = "llvm.getelementptr"(%555, %556) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%557) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_init_mapMapK._V", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb130(%558 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %559 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %560 : !llvm.ptr):
      %561 = "mid.wrap"(%558) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %562 = "hi.cast"(%561) {"from_typ" = !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "to_typ" = !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "from_typ_name" = "MapKeys", "to_typ_name" = "MapKeys"} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %563 = "mid.get_field"(%562) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Map"} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %564 = "mid.unwrap"(%563) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %565 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %566 = "mid.method_call"(%565, %564) {"offset" = 12 : i32, "vptrs" = [], "vtable_size" = 278 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %567 = "hi.cast"(%566) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %568 = "hi.cast"(%567) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%568) : (si32) -> ()
    }) {"func_name" = "MapKeys_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb131(%569 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %570 : !llvm.ptr):
      %571 = "mid.invariant"(%570) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %572 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb132] : () -> ()
    ^bb132:
      %573 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%573, %572) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb133] : () -> ()
    ^bb133:
      %574 = "llvm.extractvalue"(%569) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %575 = "llvm.load"(%572) : (!llvm.ptr) -> i32
      %576 = "llvm.getelementptr"(%574, %575) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %577 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %578 = "llvm.getelementptr"(%576, %577) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%578) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb134(%579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %580 : !llvm.ptr):
      %581 = "mid.invariant"(%580) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %582 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb135] : () -> ()
    ^bb135:
      %583 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%583, %582) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb136] : () -> ()
    ^bb136:
      %584 = "llvm.extractvalue"(%579) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %585 = "llvm.load"(%582) : (!llvm.ptr) -> i32
      %586 = "llvm.getelementptr"(%584, %585) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %587 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %588 = "llvm.getelementptr"(%586, %587) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%588) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb137(%589 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %590 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %591 : !llvm.ptr):
      %592 = "mid.wrap"(%589) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %593 = "hi.cast"(%592) {"from_typ" = !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "to_typ" = !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "from_typ_name" = "MapKeys", "to_typ_name" = "MapKeys"} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %594 = "mid.get_field"(%593) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Map"} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %595 = "mid.unwrap"(%594) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %596 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %597 = "mid.method_call"(%596, %595) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 278 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %598 = "hi.cast"(%597) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>]>
      %599 = "mid.unwrap"(%598) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %600 = "mid.get_type_field"(%593) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.reified_type
      %601 = "mid.get_type_field"(%593) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.reified_type
      %602 = "mid.new"(%600, %601) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "MapKeyIterator", "num_data_fields" = 1 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %603 = "mid.get_field"(%593) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Map"} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>
      %604 = "mid.unwrap"(%603) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %605 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %606 = "mid.method_call"(%605, %604) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 278 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %607 = "hi.cast"(%606) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>]>
      %608 = "hi.cast"(%607) {"from_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>
      %609 = "mid.unwrap"(%608) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %610 = "mid.unwrap"(%602) : (!hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %611 = "mid.get_type_field"(%593) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.reified_type
      %612 = "mid.get_type_field"(%593) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"MapKeys", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.reified_type
      %613 = "mid.parameterization"(%611, %612) {"id_hierarchy" = ["Iterator", ["Pair", [0 : i32], [1 : i32]]], "name_hierarchy" = ["IteratorPairMapKeys.K_subtype_Any._MapKeys.V_subtype_Any", ["PairMapKeys.K_subtype_Any._MapKeys.V_subtype_Any", ["MapKeys.K_subtype_Any"], ["MapKeys.V_subtype_Any"]]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %614 = "mid.parameterizations_array"(%613) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%614, %610, %609) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %615 = "hi.cast"(%602) {"from_typ" = !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"K", !hi.any, "MapKeys">]>, "from_typ_name" = "MapKeyIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeys">, !hi.type_param<"V", !hi.any, "MapKeys">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"K", !hi.any, "MapKeys">]>
      "mid.return"(%615) : (!hi.fatptr<"Iterator", [!hi.type_param<"K", !hi.any, "MapKeys">]>) -> ()
    }) {"func_name" = "MapKeys_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb138(%616 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %617 : !llvm.ptr):
      %618 = "mid.invariant"(%617) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %619 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb139] : () -> ()
    ^bb139:
      %620 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%620, %619) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb140] : () -> ()
    ^bb140:
      %621 = "llvm.extractvalue"(%616) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %622 = "llvm.load"(%619) : (!llvm.ptr) -> i32
      %623 = "llvm.getelementptr"(%621, %622) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %624 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %625 = "llvm.getelementptr"(%623, %624) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%625) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb141(%626 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %627 : !llvm.ptr):
      %628 = "mid.invariant"(%627) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %629 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb142] : () -> ()
    ^bb143:
      %630 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%630, %629) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb144] : () -> ()
    ^bb142:
      %631 = "llvm.getelementptr"(%627) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %632 = "mid.checkflag"(%631) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %633 = "llvm.load"(%632) : (!hi.bool) -> i1
      "cf.cond_br"(%633) [^bb143, ^bb143] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb144:
      %634 = "llvm.extractvalue"(%626) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %635 = "llvm.load"(%629) : (!llvm.ptr) -> i32
      %636 = "llvm.getelementptr"(%634, %635) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %637 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %638 = "llvm.getelementptr"(%636, %637) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%638) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb145(%639 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %640 : !llvm.ptr):
      %641 = "mid.invariant"(%640) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %642 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb146] : () -> ()
    ^bb147:
      %643 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%643, %642) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb148] : () -> ()
    ^bb149:
      %644 = "llvm.getelementptr"(%640) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %645 = "mid.checkflag"(%644) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %646 = "llvm.load"(%645) : (!hi.bool) -> i1
      "cf.cond_br"(%646) [^bb147, ^bb147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb146:
      %647 = "llvm.getelementptr"(%640) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %648 = "mid.checkflag"(%647) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %649 = "llvm.load"(%648) : (!hi.bool) -> i1
      "cf.cond_br"(%649) [^bb149, ^bb149] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb148:
      %650 = "llvm.extractvalue"(%639) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %651 = "llvm.load"(%642) : (!llvm.ptr) -> i32
      %652 = "llvm.getelementptr"(%650, %651) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %653 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %654 = "llvm.getelementptr"(%652, %653) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%654) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb150(%655 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %656 : !llvm.ptr):
      %657 = "mid.invariant"(%656) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %658 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb151] : () -> ()
    ^bb152:
      %659 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%659, %658) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb153] : () -> ()
    ^bb151:
      %660 = "llvm.getelementptr"(%656) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %661 = "mid.checkflag"(%660) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %662 = "llvm.load"(%661) : (!hi.bool) -> i1
      "cf.cond_br"(%662) [^bb152, ^bb152] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb153:
      %663 = "llvm.extractvalue"(%655) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %664 = "llvm.load"(%658) : (!llvm.ptr) -> i32
      %665 = "llvm.getelementptr"(%663, %664) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %666 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %667 = "llvm.getelementptr"(%665, %666) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%667) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb154(%668 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %669 : !llvm.ptr):
      %670 = "mid.invariant"(%669) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %671 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb155] : () -> ()
    ^bb156:
      %672 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%672, %671) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb157] : () -> ()
    ^bb155:
      %673 = "llvm.getelementptr"(%669) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %674 = "mid.checkflag"(%673) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %675 = "llvm.load"(%674) : (!hi.bool) -> i1
      "cf.cond_br"(%675) [^bb156, ^bb156] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb157:
      %676 = "llvm.extractvalue"(%668) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %677 = "llvm.load"(%671) : (!llvm.ptr) -> i32
      %678 = "llvm.getelementptr"(%676, %677) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %679 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %680 = "llvm.getelementptr"(%678, %679) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%680) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb158(%681 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %682 : !llvm.ptr):
      %683 = "mid.invariant"(%682) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %684 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb159] : () -> ()
    ^bb159:
      %685 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%685, %684) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb160] : () -> ()
    ^bb160:
      %686 = "llvm.extractvalue"(%681) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %687 = "llvm.load"(%684) : (!llvm.ptr) -> i32
      %688 = "llvm.getelementptr"(%686, %687) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %689 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %690 = "llvm.getelementptr"(%688, %689) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%690) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb161(%691 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %692 : !llvm.ptr):
      %693 = "mid.invariant"(%692) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %694 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb162] : () -> ()
    ^bb163:
      %695 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%695, %694) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb164] : () -> ()
    ^bb165:
      %696 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%696, %694) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb164] : () -> ()
    ^bb162:
      %697 = "llvm.getelementptr"(%692) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %698 = "mid.checkflag"(%697) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %699 = "llvm.load"(%698) : (!hi.bool) -> i1
      "cf.cond_br"(%699) [^bb163, ^bb166] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb166:
      %700 = "llvm.getelementptr"(%692) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %701 = "mid.checkflag"(%700) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %702 = "llvm.load"(%701) : (!hi.bool) -> i1
      "cf.cond_br"(%702) [^bb165, ^bb165] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb164:
      %703 = "llvm.extractvalue"(%691) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %704 = "llvm.load"(%694) : (!llvm.ptr) -> i32
      %705 = "llvm.getelementptr"(%703, %704) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %706 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %707 = "llvm.getelementptr"(%705, %706) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%707) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb167(%708 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %709 : !llvm.ptr):
      %710 = "mid.invariant"(%709) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %711 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb168] : () -> ()
    ^bb169:
      %712 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%712, %711) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb170] : () -> ()
    ^bb168:
      %713 = "llvm.getelementptr"(%709) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %714 = "mid.checkflag"(%713) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %715 = "llvm.load"(%714) : (!hi.bool) -> i1
      "cf.cond_br"(%715) [^bb169, ^bb169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb170:
      %716 = "llvm.extractvalue"(%708) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %717 = "llvm.load"(%711) : (!llvm.ptr) -> i32
      %718 = "llvm.getelementptr"(%716, %717) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %719 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %720 = "llvm.getelementptr"(%718, %719) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%720) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb171(%721 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %722 : !llvm.ptr):
      %723 = "mid.invariant"(%722) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %724 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb172] : () -> ()
    ^bb173:
      %725 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%725, %724) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb174] : () -> ()
    ^bb175:
      %726 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%726, %724) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb174] : () -> ()
    ^bb172:
      %727 = "llvm.getelementptr"(%722) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %728 = "mid.checkflag"(%727) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %729 = "llvm.load"(%728) : (!hi.bool) -> i1
      "cf.cond_br"(%729) [^bb173, ^bb176] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb176:
      %730 = "llvm.getelementptr"(%722) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %731 = "mid.checkflag"(%730) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %732 = "llvm.load"(%731) : (!hi.bool) -> i1
      "cf.cond_br"(%732) [^bb177, ^bb175] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb177:
      %733 = "llvm.getelementptr"(%722) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %734 = "mid.checkflag"(%733) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %735 = "llvm.load"(%734) : (!hi.bool) -> i1
      "cf.cond_br"(%735) [^bb175, ^bb175] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb174:
      %736 = "llvm.extractvalue"(%721) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %737 = "llvm.load"(%724) : (!llvm.ptr) -> i32
      %738 = "llvm.getelementptr"(%736, %737) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %739 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %740 = "llvm.getelementptr"(%738, %739) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%740) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb178(%741 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %742 : !llvm.ptr):
      %743 = "mid.invariant"(%742) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %744 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb179] : () -> ()
    ^bb180:
      %745 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%745, %744) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb181] : () -> ()
    ^bb182:
      %746 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%746, %744) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb181] : () -> ()
    ^bb179:
      %747 = "llvm.getelementptr"(%742) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %748 = "mid.checkflag"(%747) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %749 = "llvm.load"(%748) : (!hi.bool) -> i1
      "cf.cond_br"(%749) [^bb180, ^bb183] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb183:
      %750 = "llvm.getelementptr"(%742) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %751 = "mid.checkflag"(%750) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %752 = "llvm.load"(%751) : (!hi.bool) -> i1
      "cf.cond_br"(%752) [^bb184, ^bb182] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb184:
      %753 = "llvm.getelementptr"(%742) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %754 = "mid.checkflag"(%753) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %755 = "llvm.load"(%754) : (!hi.bool) -> i1
      "cf.cond_br"(%755) [^bb182, ^bb182] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb181:
      %756 = "llvm.extractvalue"(%741) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %757 = "llvm.load"(%744) : (!llvm.ptr) -> i32
      %758 = "llvm.getelementptr"(%756, %757) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %759 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %760 = "llvm.getelementptr"(%758, %759) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%760) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb185(%761 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %762 : !llvm.ptr):
      %763 = "mid.invariant"(%762) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %764 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb186] : () -> ()
    ^bb187:
      %765 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%765, %764) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb189:
      %766 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%766, %764) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb186:
      %767 = "llvm.getelementptr"(%762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %768 = "mid.checkflag"(%767) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %769 = "llvm.load"(%768) : (!hi.bool) -> i1
      "cf.cond_br"(%769) [^bb187, ^bb190] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb190:
      %770 = "llvm.getelementptr"(%762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %771 = "mid.checkflag"(%770) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %772 = "llvm.load"(%771) : (!hi.bool) -> i1
      "cf.cond_br"(%772) [^bb191, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb191:
      %773 = "llvm.getelementptr"(%762) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %774 = "mid.checkflag"(%773) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %775 = "llvm.load"(%774) : (!hi.bool) -> i1
      "cf.cond_br"(%775) [^bb189, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb188:
      %776 = "llvm.extractvalue"(%761) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %777 = "llvm.load"(%764) : (!llvm.ptr) -> i32
      %778 = "llvm.getelementptr"(%776, %777) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %779 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %780 = "llvm.getelementptr"(%778, %779) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%780) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb192(%781 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %782 : !llvm.ptr):
      %783 = "mid.invariant"(%782) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %784 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb193] : () -> ()
    ^bb194:
      %785 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%785, %784) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb195] : () -> ()
    ^bb196:
      %786 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%786, %784) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb195] : () -> ()
    ^bb193:
      %787 = "llvm.getelementptr"(%782) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %788 = "mid.checkflag"(%787) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %789 = "llvm.load"(%788) : (!hi.bool) -> i1
      "cf.cond_br"(%789) [^bb194, ^bb197] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb197:
      %790 = "llvm.getelementptr"(%782) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %791 = "mid.checkflag"(%790) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %792 = "llvm.load"(%791) : (!hi.bool) -> i1
      "cf.cond_br"(%792) [^bb198, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb198:
      %793 = "llvm.getelementptr"(%782) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %794 = "mid.checkflag"(%793) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %795 = "llvm.load"(%794) : (!hi.bool) -> i1
      "cf.cond_br"(%795) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb195:
      %796 = "llvm.extractvalue"(%781) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %797 = "llvm.load"(%784) : (!llvm.ptr) -> i32
      %798 = "llvm.getelementptr"(%796, %797) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %799 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %800 = "llvm.getelementptr"(%798, %799) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%800) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeys_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MapValues", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapValues_field_MapValues_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapValues_field_MapValues_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapValues_getter_map", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Map", "parameterization" = "_parameterization_MapMapValues.K_subtype_Any._MapValues.V_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapValues_setter_map", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Map", "parameterization" = "_parameterization_MapMapValues.K_subtype_Any._MapValues.V_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapValues_field_map", "getter_name" = "MapValues_getter_map", "setter_name" = "MapValues_setter_map"} : () -> ()
    "mid.func"() ({
    ^bb199(%801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %802 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %803 : !llvm.ptr, %804 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %805 = "mid.wrap"(%801) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %806 = "hi.cast"(%805) {"from_typ" = !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "to_typ" = !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "from_typ_name" = "MapValues", "to_typ_name" = "MapValues"} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %807 = "mid.wrap"(%804) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %808 = "hi.cast"(%807) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %809 = "hi.cast"(%808) {"from_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "to_typ" = !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "from_typ_name" = "Map", "to_typ_name" = "Map"} : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      "mid.set_field"(%806, %809) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> ()
    }) {"func_name" = "MapValues_init_mapMapK._V", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb200(%810 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %811 : !llvm.ptr):
      %812 = "mid.invariant"(%811) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %813 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb201] : () -> ()
    ^bb202:
      %814 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%814, %813) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb203] : () -> ()
    ^bb201:
      %815 = "llvm.getelementptr"(%811) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %816 = "mid.checkflag"(%815) {"typ_name" = "Map"} : (!llvm.ptr) -> !hi.bool
      %817 = "llvm.load"(%816) : (!hi.bool) -> i1
      "cf.cond_br"(%817) [^bb202, ^bb202] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb203:
      %818 = "llvm.extractvalue"(%810) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %819 = "llvm.load"(%813) : (!llvm.ptr) -> i32
      %820 = "llvm.getelementptr"(%818, %819) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %821 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %822 = "llvm.getelementptr"(%820, %821) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%822) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_init_mapMapK._V", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb204(%823 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %824 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %825 : !llvm.ptr):
      %826 = "mid.wrap"(%823) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %827 = "hi.cast"(%826) {"from_typ" = !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "to_typ" = !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "from_typ_name" = "MapValues", "to_typ_name" = "MapValues"} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %828 = "mid.get_field"(%827) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Map"} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %829 = "mid.unwrap"(%828) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %830 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %831 = "mid.method_call"(%830, %829) {"offset" = 12 : i32, "vptrs" = [], "vtable_size" = 278 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %832 = "hi.cast"(%831) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %833 = "hi.cast"(%832) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%833) : (si32) -> ()
    }) {"func_name" = "MapValues_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb205(%834 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %835 : !llvm.ptr):
      %836 = "mid.invariant"(%835) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %837 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb206] : () -> ()
    ^bb206:
      %838 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%838, %837) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb207] : () -> ()
    ^bb207:
      %839 = "llvm.extractvalue"(%834) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %840 = "llvm.load"(%837) : (!llvm.ptr) -> i32
      %841 = "llvm.getelementptr"(%839, %840) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %842 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %843 = "llvm.getelementptr"(%841, %842) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%843) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb208(%844 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %845 : !llvm.ptr):
      %846 = "mid.invariant"(%845) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %847 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb209] : () -> ()
    ^bb209:
      %848 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%848, %847) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb210] : () -> ()
    ^bb210:
      %849 = "llvm.extractvalue"(%844) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %850 = "llvm.load"(%847) : (!llvm.ptr) -> i32
      %851 = "llvm.getelementptr"(%849, %850) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %852 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %853 = "llvm.getelementptr"(%851, %852) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%853) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb211(%854 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %856 : !llvm.ptr):
      %857 = "mid.wrap"(%854) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %858 = "hi.cast"(%857) {"from_typ" = !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "to_typ" = !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "from_typ_name" = "MapValues", "to_typ_name" = "MapValues"} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %859 = "mid.get_field"(%858) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Map"} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %860 = "mid.unwrap"(%859) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %861 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %862 = "mid.method_call"(%861, %860) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 278 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %863 = "hi.cast"(%862) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>]>
      %864 = "mid.unwrap"(%863) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %865 = "mid.get_type_field"(%858) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.reified_type
      %866 = "mid.get_type_field"(%858) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.reified_type
      %867 = "mid.new"(%865, %866) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "MapValueIterator", "num_data_fields" = 1 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %868 = "mid.get_field"(%858) {"offset" = 2 : i64, "vtable_bytes" = 976 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Map"} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>
      %869 = "mid.unwrap"(%868) : (!hi.fatptr<"Map", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %870 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %871 = "mid.method_call"(%870, %869) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 278 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %872 = "hi.cast"(%871) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>]>
      %873 = "hi.cast"(%872) {"from_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>
      %874 = "mid.unwrap"(%873) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %875 = "mid.unwrap"(%867) : (!hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %876 = "mid.get_type_field"(%858) {"offset" = 0 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.reified_type
      %877 = "mid.get_type_field"(%858) {"offset" = 1 : i64, "vtable_bytes" = 976 : i32} : (!hi.fatptr<"MapValues", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.reified_type
      %878 = "mid.parameterization"(%876, %877) {"id_hierarchy" = ["Iterator", ["Pair", [0 : i32], [1 : i32]]], "name_hierarchy" = ["IteratorPairMapValues.K_subtype_Any._MapValues.V_subtype_Any", ["PairMapValues.K_subtype_Any._MapValues.V_subtype_Any", ["MapValues.K_subtype_Any"], ["MapValues.V_subtype_Any"]]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %879 = "mid.parameterizations_array"(%878) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%879, %875, %874) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %880 = "hi.cast"(%867) {"from_typ" = !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"V", !hi.any, "MapValues">]>, "from_typ_name" = "MapValueIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValues">, !hi.type_param<"V", !hi.any, "MapValues">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"V", !hi.any, "MapValues">]>
      "mid.return"(%880) : (!hi.fatptr<"Iterator", [!hi.type_param<"V", !hi.any, "MapValues">]>) -> ()
    }) {"func_name" = "MapValues_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb212(%881 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %882 : !llvm.ptr):
      %883 = "mid.invariant"(%882) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %884 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb213] : () -> ()
    ^bb213:
      %885 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%885, %884) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb214] : () -> ()
    ^bb214:
      %886 = "llvm.extractvalue"(%881) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %887 = "llvm.load"(%884) : (!llvm.ptr) -> i32
      %888 = "llvm.getelementptr"(%886, %887) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %889 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %890 = "llvm.getelementptr"(%888, %889) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%890) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb215(%891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %892 : !llvm.ptr):
      %893 = "mid.invariant"(%892) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %894 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb216] : () -> ()
    ^bb217:
      %895 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%895, %894) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb218] : () -> ()
    ^bb216:
      %896 = "llvm.getelementptr"(%892) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %897 = "mid.checkflag"(%896) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %898 = "llvm.load"(%897) : (!hi.bool) -> i1
      "cf.cond_br"(%898) [^bb217, ^bb217] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb218:
      %899 = "llvm.extractvalue"(%891) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %900 = "llvm.load"(%894) : (!llvm.ptr) -> i32
      %901 = "llvm.getelementptr"(%899, %900) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %902 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %903 = "llvm.getelementptr"(%901, %902) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%903) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb219(%904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %905 : !llvm.ptr):
      %906 = "mid.invariant"(%905) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %907 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb220] : () -> ()
    ^bb221:
      %908 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%908, %907) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb222] : () -> ()
    ^bb223:
      %909 = "llvm.getelementptr"(%905) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %910 = "mid.checkflag"(%909) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %911 = "llvm.load"(%910) : (!hi.bool) -> i1
      "cf.cond_br"(%911) [^bb221, ^bb221] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb220:
      %912 = "llvm.getelementptr"(%905) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %913 = "mid.checkflag"(%912) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %914 = "llvm.load"(%913) : (!hi.bool) -> i1
      "cf.cond_br"(%914) [^bb223, ^bb223] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb222:
      %915 = "llvm.extractvalue"(%904) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %916 = "llvm.load"(%907) : (!llvm.ptr) -> i32
      %917 = "llvm.getelementptr"(%915, %916) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %918 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %919 = "llvm.getelementptr"(%917, %918) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%919) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb224(%920 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %921 : !llvm.ptr):
      %922 = "mid.invariant"(%921) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %923 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb225] : () -> ()
    ^bb226:
      %924 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%924, %923) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb227] : () -> ()
    ^bb225:
      %925 = "llvm.getelementptr"(%921) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %926 = "mid.checkflag"(%925) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %927 = "llvm.load"(%926) : (!hi.bool) -> i1
      "cf.cond_br"(%927) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb227:
      %928 = "llvm.extractvalue"(%920) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %929 = "llvm.load"(%923) : (!llvm.ptr) -> i32
      %930 = "llvm.getelementptr"(%928, %929) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %931 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %932 = "llvm.getelementptr"(%930, %931) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%932) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb228(%933 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %934 : !llvm.ptr):
      %935 = "mid.invariant"(%934) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %936 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb229] : () -> ()
    ^bb230:
      %937 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%937, %936) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb231] : () -> ()
    ^bb229:
      %938 = "llvm.getelementptr"(%934) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %939 = "mid.checkflag"(%938) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %940 = "llvm.load"(%939) : (!hi.bool) -> i1
      "cf.cond_br"(%940) [^bb230, ^bb230] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb231:
      %941 = "llvm.extractvalue"(%933) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %942 = "llvm.load"(%936) : (!llvm.ptr) -> i32
      %943 = "llvm.getelementptr"(%941, %942) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %944 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %945 = "llvm.getelementptr"(%943, %944) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%945) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb232(%946 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %947 : !llvm.ptr):
      %948 = "mid.invariant"(%947) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %949 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb233] : () -> ()
    ^bb233:
      %950 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%950, %949) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb234] : () -> ()
    ^bb234:
      %951 = "llvm.extractvalue"(%946) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %952 = "llvm.load"(%949) : (!llvm.ptr) -> i32
      %953 = "llvm.getelementptr"(%951, %952) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %954 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %955 = "llvm.getelementptr"(%953, %954) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%955) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb235(%956 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %957 : !llvm.ptr):
      %958 = "mid.invariant"(%957) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %959 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb236] : () -> ()
    ^bb237:
      %960 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%960, %959) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb238] : () -> ()
    ^bb239:
      %961 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%961, %959) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb238] : () -> ()
    ^bb236:
      %962 = "llvm.getelementptr"(%957) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %963 = "mid.checkflag"(%962) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %964 = "llvm.load"(%963) : (!hi.bool) -> i1
      "cf.cond_br"(%964) [^bb237, ^bb240] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb240:
      %965 = "llvm.getelementptr"(%957) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %966 = "mid.checkflag"(%965) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %967 = "llvm.load"(%966) : (!hi.bool) -> i1
      "cf.cond_br"(%967) [^bb239, ^bb239] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb238:
      %968 = "llvm.extractvalue"(%956) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %969 = "llvm.load"(%959) : (!llvm.ptr) -> i32
      %970 = "llvm.getelementptr"(%968, %969) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %971 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %972 = "llvm.getelementptr"(%970, %971) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%972) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb241(%973 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %974 : !llvm.ptr):
      %975 = "mid.invariant"(%974) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %976 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb242] : () -> ()
    ^bb243:
      %977 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%977, %976) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb244] : () -> ()
    ^bb242:
      %978 = "llvm.getelementptr"(%974) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %979 = "mid.checkflag"(%978) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %980 = "llvm.load"(%979) : (!hi.bool) -> i1
      "cf.cond_br"(%980) [^bb243, ^bb243] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb244:
      %981 = "llvm.extractvalue"(%973) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %982 = "llvm.load"(%976) : (!llvm.ptr) -> i32
      %983 = "llvm.getelementptr"(%981, %982) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %984 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %985 = "llvm.getelementptr"(%983, %984) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%985) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb245(%986 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %987 : !llvm.ptr):
      %988 = "mid.invariant"(%987) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %989 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb246] : () -> ()
    ^bb247:
      %990 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%990, %989) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb248] : () -> ()
    ^bb249:
      %991 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%991, %989) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb248] : () -> ()
    ^bb246:
      %992 = "llvm.getelementptr"(%987) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %993 = "mid.checkflag"(%992) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %994 = "llvm.load"(%993) : (!hi.bool) -> i1
      "cf.cond_br"(%994) [^bb247, ^bb250] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb250:
      %995 = "llvm.getelementptr"(%987) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %996 = "mid.checkflag"(%995) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %997 = "llvm.load"(%996) : (!hi.bool) -> i1
      "cf.cond_br"(%997) [^bb251, ^bb249] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb251:
      %998 = "llvm.getelementptr"(%987) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %999 = "mid.checkflag"(%998) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1000 = "llvm.load"(%999) : (!hi.bool) -> i1
      "cf.cond_br"(%1000) [^bb249, ^bb249] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb248:
      %1001 = "llvm.extractvalue"(%986) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1002 = "llvm.load"(%989) : (!llvm.ptr) -> i32
      %1003 = "llvm.getelementptr"(%1001, %1002) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1004 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1005 = "llvm.getelementptr"(%1003, %1004) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1005) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb252(%1006 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1007 : !llvm.ptr):
      %1008 = "mid.invariant"(%1007) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1009 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb253] : () -> ()
    ^bb254:
      %1010 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1010, %1009) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb255] : () -> ()
    ^bb256:
      %1011 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1011, %1009) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb255] : () -> ()
    ^bb253:
      %1012 = "llvm.getelementptr"(%1007) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1013 = "mid.checkflag"(%1012) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1014 = "llvm.load"(%1013) : (!hi.bool) -> i1
      "cf.cond_br"(%1014) [^bb254, ^bb257] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb257:
      %1015 = "llvm.getelementptr"(%1007) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1016 = "mid.checkflag"(%1015) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1017 = "llvm.load"(%1016) : (!hi.bool) -> i1
      "cf.cond_br"(%1017) [^bb258, ^bb256] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb258:
      %1018 = "llvm.getelementptr"(%1007) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1019 = "mid.checkflag"(%1018) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1020 = "llvm.load"(%1019) : (!hi.bool) -> i1
      "cf.cond_br"(%1020) [^bb256, ^bb256] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb255:
      %1021 = "llvm.extractvalue"(%1006) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1022 = "llvm.load"(%1009) : (!llvm.ptr) -> i32
      %1023 = "llvm.getelementptr"(%1021, %1022) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1024 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1025 = "llvm.getelementptr"(%1023, %1024) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1025) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb259(%1026 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1027 : !llvm.ptr):
      %1028 = "mid.invariant"(%1027) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1029 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb260] : () -> ()
    ^bb261:
      %1030 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1030, %1029) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb262] : () -> ()
    ^bb263:
      %1031 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1031, %1029) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb262] : () -> ()
    ^bb260:
      %1032 = "llvm.getelementptr"(%1027) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1033 = "mid.checkflag"(%1032) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1034 = "llvm.load"(%1033) : (!hi.bool) -> i1
      "cf.cond_br"(%1034) [^bb261, ^bb264] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb264:
      %1035 = "llvm.getelementptr"(%1027) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1036 = "mid.checkflag"(%1035) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1037 = "llvm.load"(%1036) : (!hi.bool) -> i1
      "cf.cond_br"(%1037) [^bb265, ^bb263] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb265:
      %1038 = "llvm.getelementptr"(%1027) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1039 = "mid.checkflag"(%1038) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1040 = "llvm.load"(%1039) : (!hi.bool) -> i1
      "cf.cond_br"(%1040) [^bb263, ^bb263] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb262:
      %1041 = "llvm.extractvalue"(%1026) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1042 = "llvm.load"(%1029) : (!llvm.ptr) -> i32
      %1043 = "llvm.getelementptr"(%1041, %1042) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1044 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1045 = "llvm.getelementptr"(%1043, %1044) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1045) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb266(%1046 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1047 : !llvm.ptr):
      %1048 = "mid.invariant"(%1047) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1049 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb267] : () -> ()
    ^bb268:
      %1050 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1050, %1049) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb269] : () -> ()
    ^bb270:
      %1051 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1051, %1049) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb269] : () -> ()
    ^bb267:
      %1052 = "llvm.getelementptr"(%1047) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1053 = "mid.checkflag"(%1052) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1054 = "llvm.load"(%1053) : (!hi.bool) -> i1
      "cf.cond_br"(%1054) [^bb268, ^bb271] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb271:
      %1055 = "llvm.getelementptr"(%1047) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1056 = "mid.checkflag"(%1055) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1057 = "llvm.load"(%1056) : (!hi.bool) -> i1
      "cf.cond_br"(%1057) [^bb272, ^bb270] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb272:
      %1058 = "llvm.getelementptr"(%1047) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1059 = "mid.checkflag"(%1058) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1060 = "llvm.load"(%1059) : (!hi.bool) -> i1
      "cf.cond_br"(%1060) [^bb270, ^bb270] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb269:
      %1061 = "llvm.extractvalue"(%1046) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1062 = "llvm.load"(%1049) : (!llvm.ptr) -> i32
      %1063 = "llvm.getelementptr"(%1061, %1062) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<122 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1064 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1065 = "llvm.getelementptr"(%1063, %1064) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1065) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValues_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MapKeyIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapKeyIterator_field_MapKeyIterator_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapKeyIterator_field_MapKeyIterator_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapKeyIterator_getter_map_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorPairMapKeyIterator.K_subtype_Any._MapKeyIterator.V_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapKeyIterator_setter_map_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorPairMapKeyIterator.K_subtype_Any._MapKeyIterator.V_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapKeyIterator_field_map_iterator", "getter_name" = "MapKeyIterator_getter_map_iterator", "setter_name" = "MapKeyIterator_setter_map_iterator"} : () -> ()
    "mid.func"() ({
    ^bb273(%1066 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1067 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1068 : !llvm.ptr, %1069 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1070 = "mid.wrap"(%1066) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>
      %1071 = "hi.cast"(%1070) {"from_typ" = !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, "to_typ" = !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, "from_typ_name" = "MapKeyIterator", "to_typ_name" = "MapKeyIterator"} : (!hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>) -> !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>
      %1072 = "mid.wrap"(%1069) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>
      %1073 = "hi.cast"(%1072) {"from_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>
      %1074 = "hi.cast"(%1073) {"from_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>
      "mid.set_field"(%1071, %1074) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>) -> ()
    }) {"func_name" = "MapKeyIterator_init_map_iteratorIteratorPairK._V", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb274(%1075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1076 : !llvm.ptr):
      %1077 = "mid.invariant"(%1076) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1078 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb275] : () -> ()
    ^bb276:
      %1079 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1079, %1078) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb277] : () -> ()
    ^bb275:
      %1080 = "llvm.getelementptr"(%1076) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1081 = "mid.checkflag"(%1080) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1082 = "llvm.load"(%1081) : (!hi.bool) -> i1
      "cf.cond_br"(%1082) [^bb276, ^bb276] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb277:
      %1083 = "llvm.extractvalue"(%1075) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1084 = "llvm.load"(%1078) : (!llvm.ptr) -> i32
      %1085 = "llvm.getelementptr"(%1083, %1084) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1086 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1087 = "llvm.getelementptr"(%1085, %1086) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1087) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeyIterator_B_init_map_iteratorIteratorPairK._V", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb278(%1088 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1089 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1090 : !llvm.ptr):
      %1091 = "mid.wrap"(%1088) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>
      %1092 = "hi.cast"(%1091) {"from_typ" = !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, "to_typ" = !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, "from_typ_name" = "MapKeyIterator", "to_typ_name" = "MapKeyIterator"} : (!hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>) -> !hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>
      %1093 = "mid.get_field"(%1092) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"MapKeyIterator", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>
      %1094 = "mid.unwrap"(%1093) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1095 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1096 = "mid.method_call"(%1095, %1094) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1097 = "hi.cast"(%1096) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, !hi.nil]>
      %1098 = "mid.checkflag"(%1097) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, !hi.nil]>) -> si1
      %1099 = "mid.unwrap"(%1098) : (si1) -> i1
      "mid.if"(%1099) ({
        %1100 = "hi.cast"(%1097) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Pair"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, !hi.nil]>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>
        %1101 = "mid.unwrap"(%1100) : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1102 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1103 = "mid.method_call"(%1102, %1101) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 14 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"T", !hi.any, "Pair">
        %1104 = "hi.cast"(%1103) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"K", !hi.any, "MapKeyIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"K", !hi.any, "MapKeyIterator">
        %1105 = "hi.cast"(%1104) {"from_typ" = !hi.type_param<"K", !hi.any, "MapKeyIterator">, "to_typ" = !hi.union<[!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"K", !hi.any, "MapKeyIterator">) -> !hi.union<[!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.nil]>
        "mid.return"(%1105) : (!hi.union<[!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1106 = "hi.cast"(%1097) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.type_param<"V", !hi.any, "MapKeyIterator">]>, !hi.nil]>) -> !hi.nil
      "mid.remove_region"() {"reg_name" = "pair"} : () -> ()
      "mid.remove_region"() {"reg_name" = "toqjyopjoi.second"} : () -> ()
      %1107 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1108 = "hi.cast"(%1107) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.nil]>
      "mid.return"(%1108) : (!hi.union<[!hi.type_param<"K", !hi.any, "MapKeyIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "MapKeyIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb279(%1109 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1110 : !llvm.ptr):
      %1111 = "mid.invariant"(%1110) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1112 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb280] : () -> ()
    ^bb280:
      %1113 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1113, %1112) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb281] : () -> ()
    ^bb281:
      %1114 = "llvm.extractvalue"(%1109) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1115 = "llvm.load"(%1112) : (!llvm.ptr) -> i32
      %1116 = "llvm.getelementptr"(%1114, %1115) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1117 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1118 = "llvm.getelementptr"(%1116, %1117) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1118) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapKeyIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MapValueIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapValueIterator_field_MapValueIterator_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapValueIterator_field_MapValueIterator_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapValueIterator_getter_map_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorPairMapValueIterator.K_subtype_Any._MapValueIterator.V_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapValueIterator_setter_map_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorPairMapValueIterator.K_subtype_Any._MapValueIterator.V_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapValueIterator_field_map_iterator", "getter_name" = "MapValueIterator_getter_map_iterator", "setter_name" = "MapValueIterator_setter_map_iterator"} : () -> ()
    "mid.func"() ({
    ^bb282(%1119 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1120 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1121 : !llvm.ptr, %1122 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1123 = "mid.wrap"(%1119) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>
      %1124 = "hi.cast"(%1123) {"from_typ" = !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, "to_typ" = !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, "from_typ_name" = "MapValueIterator", "to_typ_name" = "MapValueIterator"} : (!hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>) -> !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>
      %1125 = "mid.wrap"(%1122) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>
      %1126 = "hi.cast"(%1125) {"from_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>
      %1127 = "hi.cast"(%1126) {"from_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>
      "mid.set_field"(%1124, %1127) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>) -> ()
    }) {"func_name" = "MapValueIterator_init_map_iteratorIteratorPairK._V", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb283(%1128 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1129 : !llvm.ptr):
      %1130 = "mid.invariant"(%1129) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1131 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb284] : () -> ()
    ^bb285:
      %1132 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1132, %1131) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb286] : () -> ()
    ^bb284:
      %1133 = "llvm.getelementptr"(%1129) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1134 = "mid.checkflag"(%1133) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1135 = "llvm.load"(%1134) : (!hi.bool) -> i1
      "cf.cond_br"(%1135) [^bb285, ^bb285] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb286:
      %1136 = "llvm.extractvalue"(%1128) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1137 = "llvm.load"(%1131) : (!llvm.ptr) -> i32
      %1138 = "llvm.getelementptr"(%1136, %1137) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1139 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1140 = "llvm.getelementptr"(%1138, %1139) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1140) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValueIterator_B_init_map_iteratorIteratorPairK._V", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb287(%1141 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1142 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1143 : !llvm.ptr):
      %1144 = "mid.wrap"(%1141) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>
      %1145 = "hi.cast"(%1144) {"from_typ" = !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, "to_typ" = !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, "from_typ_name" = "MapValueIterator", "to_typ_name" = "MapValueIterator"} : (!hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>) -> !hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>
      %1146 = "mid.get_field"(%1145) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"MapValueIterator", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>
      %1147 = "mid.unwrap"(%1146) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1148 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1149 = "mid.method_call"(%1148, %1147) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1150 = "hi.cast"(%1149) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, !hi.nil]>
      %1151 = "mid.checkflag"(%1150) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, !hi.nil]>) -> si1
      %1152 = "mid.unwrap"(%1151) : (si1) -> i1
      "mid.if"(%1152) ({
        %1153 = "hi.cast"(%1150) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Pair"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, !hi.nil]>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>
        %1154 = "mid.unwrap"(%1153) : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1155 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1156 = "mid.method_call"(%1155, %1154) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 14 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"U", !hi.any, "Pair">
        %1157 = "hi.cast"(%1156) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"V", !hi.any, "MapValueIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"V", !hi.any, "MapValueIterator">
        %1158 = "hi.cast"(%1157) {"from_typ" = !hi.type_param<"V", !hi.any, "MapValueIterator">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "MapValueIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "MapValueIterator">) -> !hi.union<[!hi.type_param<"V", !hi.any, "MapValueIterator">, !hi.nil]>
        "mid.return"(%1158) : (!hi.union<[!hi.type_param<"V", !hi.any, "MapValueIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1159 = "hi.cast"(%1150) {"from_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "MapValueIterator">, !hi.type_param<"V", !hi.any, "MapValueIterator">]>, !hi.nil]>) -> !hi.nil
      "mid.remove_region"() {"reg_name" = "cnzlusxqoy"} : () -> ()
      "mid.remove_region"() {"reg_name" = "cnzlusxqoy.first"} : () -> ()
      %1160 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1161 = "hi.cast"(%1160) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "MapValueIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "MapValueIterator">, !hi.nil]>
      "mid.return"(%1161) : (!hi.union<[!hi.type_param<"V", !hi.any, "MapValueIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "MapValueIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb288(%1162 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1163 : !llvm.ptr):
      %1164 = "mid.invariant"(%1163) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1165 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb289] : () -> ()
    ^bb289:
      %1166 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1166, %1165) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb290] : () -> ()
    ^bb290:
      %1167 = "llvm.extractvalue"(%1162) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1168 = "llvm.load"(%1165) : (!llvm.ptr) -> i32
      %1169 = "llvm.getelementptr"(%1167, %1168) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1170 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1171 = "llvm.getelementptr"(%1169, %1170) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1171) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapValueIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_HashMap", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "HashMap_field_HashMap_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "HashMap_field_HashMap_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "HashMap_field_HashMap_6"} : () -> ()
    "mid.func"() ({
    ^bb291(%1172 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1173 : !llvm.ptr):
      %1174 = "mid.invariant"(%1173) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1175 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb292] : () -> ()
    ^bb293:
      %1176 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1176, %1175) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb294] : () -> ()
    ^bb295:
      %1177 = "llvm.getelementptr"(%1173) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1178 = "mid.checkflag"(%1177) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1179 = "llvm.load"(%1178) : (!hi.bool) -> i1
      "cf.cond_br"(%1179) [^bb293, ^bb293] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb292:
      %1180 = "llvm.getelementptr"(%1173) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1181 = "mid.checkflag"(%1180) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1182 = "llvm.load"(%1181) : (!hi.bool) -> i1
      "cf.cond_br"(%1182) [^bb295, ^bb295] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb294:
      %1183 = "llvm.extractvalue"(%1172) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1184 = "llvm.load"(%1175) : (!llvm.ptr) -> i32
      %1185 = "llvm.getelementptr"(%1183, %1184) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1186 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1187 = "llvm.getelementptr"(%1185, %1186) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1187) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb296(%1188 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1189 : !llvm.ptr):
      %1190 = "mid.invariant"(%1189) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1191 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb297] : () -> ()
    ^bb298:
      %1192 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1192, %1191) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb299] : () -> ()
    ^bb297:
      %1193 = "llvm.getelementptr"(%1189) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1194 = "mid.checkflag"(%1193) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1195 = "llvm.load"(%1194) : (!hi.bool) -> i1
      "cf.cond_br"(%1195) [^bb298, ^bb298] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb299:
      %1196 = "llvm.extractvalue"(%1188) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1197 = "llvm.load"(%1191) : (!llvm.ptr) -> i32
      %1198 = "llvm.getelementptr"(%1196, %1197) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1199 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1200 = "llvm.getelementptr"(%1198, %1199) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1200) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_get_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb300(%1201 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1202 : !llvm.ptr):
      %1203 = "mid.invariant"(%1202) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1204 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb301] : () -> ()
    ^bb302:
      %1205 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1205, %1204) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb303] : () -> ()
    ^bb304:
      %1206 = "llvm.getelementptr"(%1202) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1207 = "mid.checkflag"(%1206) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1208 = "llvm.load"(%1207) : (!hi.bool) -> i1
      "cf.cond_br"(%1208) [^bb302, ^bb302] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb301:
      %1209 = "llvm.getelementptr"(%1202) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1210 = "mid.checkflag"(%1209) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1211 = "llvm.load"(%1210) : (!hi.bool) -> i1
      "cf.cond_br"(%1211) [^bb304, ^bb304] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb303:
      %1212 = "llvm.extractvalue"(%1201) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1213 = "llvm.load"(%1204) : (!llvm.ptr) -> i32
      %1214 = "llvm.getelementptr"(%1212, %1213) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1215 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1216 = "llvm.getelementptr"(%1214, %1215) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1216) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_insert_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb305(%1217 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1218 : !llvm.ptr):
      %1219 = "mid.invariant"(%1218) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1220 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb306] : () -> ()
    ^bb307:
      %1221 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1221, %1220) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb308] : () -> ()
    ^bb306:
      %1222 = "llvm.getelementptr"(%1218) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1223 = "mid.checkflag"(%1222) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1224 = "llvm.load"(%1223) : (!hi.bool) -> i1
      "cf.cond_br"(%1224) [^bb307, ^bb307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb308:
      %1225 = "llvm.extractvalue"(%1217) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1226 = "llvm.load"(%1220) : (!llvm.ptr) -> i32
      %1227 = "llvm.getelementptr"(%1225, %1226) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1228 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1229 = "llvm.getelementptr"(%1227, %1228) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1229) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_remove_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb309(%1230 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1231 : !llvm.ptr):
      %1232 = "mid.invariant"(%1231) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1233 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb310] : () -> ()
    ^bb310:
      %1234 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1234, %1233) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb311] : () -> ()
    ^bb311:
      %1235 = "llvm.extractvalue"(%1230) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1236 = "llvm.load"(%1233) : (!llvm.ptr) -> i32
      %1237 = "llvm.getelementptr"(%1235, %1236) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1238 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1239 = "llvm.getelementptr"(%1237, %1238) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1239) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_keys_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb312(%1240 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1241 : !llvm.ptr):
      %1242 = "mid.invariant"(%1241) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1243 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb313] : () -> ()
    ^bb313:
      %1244 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1244, %1243) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb314] : () -> ()
    ^bb314:
      %1245 = "llvm.extractvalue"(%1240) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1246 = "llvm.load"(%1243) : (!llvm.ptr) -> i32
      %1247 = "llvm.getelementptr"(%1245, %1246) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1248 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1249 = "llvm.getelementptr"(%1247, %1248) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1249) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_clear_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb315(%1250 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1251 : !llvm.ptr):
      %1252 = "mid.invariant"(%1251) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1253 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb316] : () -> ()
    ^bb316:
      %1254 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1254, %1253) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb317] : () -> ()
    ^bb317:
      %1255 = "llvm.extractvalue"(%1250) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1256 = "llvm.load"(%1253) : (!llvm.ptr) -> i32
      %1257 = "llvm.getelementptr"(%1255, %1256) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1258 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1259 = "llvm.getelementptr"(%1257, %1258) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1259) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_indices_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb318(%1260 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1261 : !llvm.ptr):
      %1262 = "mid.invariant"(%1261) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1263 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb319] : () -> ()
    ^bb319:
      %1264 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1264, %1263) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb320] : () -> ()
    ^bb320:
      %1265 = "llvm.extractvalue"(%1260) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1266 = "llvm.load"(%1263) : (!llvm.ptr) -> i32
      %1267 = "llvm.getelementptr"(%1265, %1266) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1268 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1269 = "llvm.getelementptr"(%1267, %1268) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1269) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_values_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb321(%1270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1271 : !llvm.ptr):
      %1272 = "mid.invariant"(%1271) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1273 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb322] : () -> ()
    ^bb323:
      %1274 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1274, %1273) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb324] : () -> ()
    ^bb322:
      %1275 = "llvm.getelementptr"(%1271) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1276 = "mid.checkflag"(%1275) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1277 = "llvm.load"(%1276) : (!hi.bool) -> i1
      "cf.cond_br"(%1277) [^bb323, ^bb323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb324:
      %1278 = "llvm.extractvalue"(%1270) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1279 = "llvm.load"(%1273) : (!llvm.ptr) -> i32
      %1280 = "llvm.getelementptr"(%1278, %1279) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1281 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1282 = "llvm.getelementptr"(%1280, %1281) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1282) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B__index_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb325(%1283 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1284 : !llvm.ptr):
      %1285 = "mid.invariant"(%1284) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1286 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb326] : () -> ()
    ^bb327:
      %1287 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1287, %1286) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb328] : () -> ()
    ^bb329:
      %1288 = "llvm.getelementptr"(%1284) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1289 = "mid.checkflag"(%1288) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1290 = "llvm.load"(%1289) : (!hi.bool) -> i1
      "cf.cond_br"(%1290) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb326:
      %1291 = "llvm.getelementptr"(%1284) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1292 = "mid.checkflag"(%1291) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1293 = "llvm.load"(%1292) : (!hi.bool) -> i1
      "cf.cond_br"(%1293) [^bb329, ^bb329] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb328:
      %1294 = "llvm.extractvalue"(%1283) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1295 = "llvm.load"(%1286) : (!llvm.ptr) -> i32
      %1296 = "llvm.getelementptr"(%1294, %1295) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1297 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1298 = "llvm.getelementptr"(%1296, %1297) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1298) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B__set_index_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb330(%1299 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1300 : !llvm.ptr):
      %1301 = "mid.invariant"(%1300) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1302 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb331] : () -> ()
    ^bb331:
      %1303 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1303, %1302) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb332] : () -> ()
    ^bb332:
      %1304 = "llvm.extractvalue"(%1299) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1305 = "llvm.load"(%1302) : (!llvm.ptr) -> i32
      %1306 = "llvm.getelementptr"(%1304, %1305) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1307 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1308 = "llvm.getelementptr"(%1306, %1307) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1308) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb333(%1309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1310 : !llvm.ptr):
      %1311 = "mid.invariant"(%1310) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1312 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb334] : () -> ()
    ^bb334:
      %1313 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%1313, %1312) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb335] : () -> ()
    ^bb335:
      %1314 = "llvm.extractvalue"(%1309) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1315 = "llvm.load"(%1312) : (!llvm.ptr) -> i32
      %1316 = "llvm.getelementptr"(%1314, %1315) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1317 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1318 = "llvm.getelementptr"(%1316, %1317) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1318) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb336(%1319 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1320 : !llvm.ptr):
      %1321 = "mid.invariant"(%1320) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1322 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb337] : () -> ()
    ^bb337:
      %1323 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%1323, %1322) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb338] : () -> ()
    ^bb338:
      %1324 = "llvm.extractvalue"(%1319) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1325 = "llvm.load"(%1322) : (!llvm.ptr) -> i32
      %1326 = "llvm.getelementptr"(%1324, %1325) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1327 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1328 = "llvm.getelementptr"(%1326, %1327) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1328) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb339(%1329 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1330 : !llvm.ptr):
      %1331 = "mid.invariant"(%1330) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1332 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb340] : () -> ()
    ^bb341:
      %1333 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%1333, %1332) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb342] : () -> ()
    ^bb340:
      %1334 = "llvm.getelementptr"(%1330) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1335 = "mid.checkflag"(%1334) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1336 = "llvm.load"(%1335) : (!hi.bool) -> i1
      "cf.cond_br"(%1336) [^bb341, ^bb341] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb342:
      %1337 = "llvm.extractvalue"(%1329) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1338 = "llvm.load"(%1332) : (!llvm.ptr) -> i32
      %1339 = "llvm.getelementptr"(%1337, %1338) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1340 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1341 = "llvm.getelementptr"(%1339, %1340) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1341) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb343(%1342 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1343 : !llvm.ptr):
      %1344 = "mid.invariant"(%1343) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1345 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb344] : () -> ()
    ^bb345:
      %1346 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%1346, %1345) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb346] : () -> ()
    ^bb347:
      %1347 = "llvm.getelementptr"(%1343) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1348 = "mid.checkflag"(%1347) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1349 = "llvm.load"(%1348) : (!hi.bool) -> i1
      "cf.cond_br"(%1349) [^bb345, ^bb345] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb344:
      %1350 = "llvm.getelementptr"(%1343) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1351 = "mid.checkflag"(%1350) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1352 = "llvm.load"(%1351) : (!hi.bool) -> i1
      "cf.cond_br"(%1352) [^bb347, ^bb347] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb346:
      %1353 = "llvm.extractvalue"(%1342) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1354 = "llvm.load"(%1345) : (!llvm.ptr) -> i32
      %1355 = "llvm.getelementptr"(%1353, %1354) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1356 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1357 = "llvm.getelementptr"(%1355, %1356) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1357) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb348(%1358 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1359 : !llvm.ptr):
      %1360 = "mid.invariant"(%1359) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1361 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb349] : () -> ()
    ^bb350:
      %1362 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%1362, %1361) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb351] : () -> ()
    ^bb349:
      %1363 = "llvm.getelementptr"(%1359) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1364 = "mid.checkflag"(%1363) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1365 = "llvm.load"(%1364) : (!hi.bool) -> i1
      "cf.cond_br"(%1365) [^bb350, ^bb350] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb351:
      %1366 = "llvm.extractvalue"(%1358) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1367 = "llvm.load"(%1361) : (!llvm.ptr) -> i32
      %1368 = "llvm.getelementptr"(%1366, %1367) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1369 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1370 = "llvm.getelementptr"(%1368, %1369) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1370) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb352(%1371 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1372 : !llvm.ptr):
      %1373 = "mid.invariant"(%1372) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1374 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb353] : () -> ()
    ^bb354:
      %1375 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%1375, %1374) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb355] : () -> ()
    ^bb353:
      %1376 = "llvm.getelementptr"(%1372) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1377 = "mid.checkflag"(%1376) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1378 = "llvm.load"(%1377) : (!hi.bool) -> i1
      "cf.cond_br"(%1378) [^bb354, ^bb354] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb355:
      %1379 = "llvm.extractvalue"(%1371) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1380 = "llvm.load"(%1374) : (!llvm.ptr) -> i32
      %1381 = "llvm.getelementptr"(%1379, %1380) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1382 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1383 = "llvm.getelementptr"(%1381, %1382) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1383) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb356(%1384 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1385 : !llvm.ptr):
      %1386 = "mid.invariant"(%1385) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1387 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb357] : () -> ()
    ^bb357:
      %1388 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%1388, %1387) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb358] : () -> ()
    ^bb358:
      %1389 = "llvm.extractvalue"(%1384) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1390 = "llvm.load"(%1387) : (!llvm.ptr) -> i32
      %1391 = "llvm.getelementptr"(%1389, %1390) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1392 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1393 = "llvm.getelementptr"(%1391, %1392) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1393) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb359(%1394 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1395 : !llvm.ptr):
      %1396 = "mid.invariant"(%1395) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1397 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb360] : () -> ()
    ^bb361:
      %1398 = "llvm.mlir.constant"() <{"value" = 115 : i32}> : () -> i32
      "llvm.store"(%1398, %1397) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb362] : () -> ()
    ^bb363:
      %1399 = "llvm.mlir.constant"() <{"value" = 116 : i32}> : () -> i32
      "llvm.store"(%1399, %1397) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb362] : () -> ()
    ^bb360:
      %1400 = "llvm.getelementptr"(%1395) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1401 = "mid.checkflag"(%1400) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1402 = "llvm.load"(%1401) : (!hi.bool) -> i1
      "cf.cond_br"(%1402) [^bb361, ^bb364] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb364:
      %1403 = "llvm.getelementptr"(%1395) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1404 = "mid.checkflag"(%1403) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1405 = "llvm.load"(%1404) : (!hi.bool) -> i1
      "cf.cond_br"(%1405) [^bb363, ^bb363] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb362:
      %1406 = "llvm.extractvalue"(%1394) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1407 = "llvm.load"(%1397) : (!llvm.ptr) -> i32
      %1408 = "llvm.getelementptr"(%1406, %1407) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1409 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1410 = "llvm.getelementptr"(%1408, %1409) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1410) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb365(%1411 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1412 : !llvm.ptr):
      %1413 = "mid.invariant"(%1412) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1414 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb366] : () -> ()
    ^bb367:
      %1415 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%1415, %1414) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb368] : () -> ()
    ^bb366:
      %1416 = "llvm.getelementptr"(%1412) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1417 = "mid.checkflag"(%1416) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1418 = "llvm.load"(%1417) : (!hi.bool) -> i1
      "cf.cond_br"(%1418) [^bb367, ^bb367] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb368:
      %1419 = "llvm.extractvalue"(%1411) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1420 = "llvm.load"(%1414) : (!llvm.ptr) -> i32
      %1421 = "llvm.getelementptr"(%1419, %1420) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1422 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1423 = "llvm.getelementptr"(%1421, %1422) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1423) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb369(%1424 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1425 : !llvm.ptr):
      %1426 = "mid.invariant"(%1425) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1427 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb370] : () -> ()
    ^bb371:
      %1428 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%1428, %1427) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb372] : () -> ()
    ^bb373:
      %1429 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%1429, %1427) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb372] : () -> ()
    ^bb370:
      %1430 = "llvm.getelementptr"(%1425) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1431 = "mid.checkflag"(%1430) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1432 = "llvm.load"(%1431) : (!hi.bool) -> i1
      "cf.cond_br"(%1432) [^bb371, ^bb374] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb374:
      %1433 = "llvm.getelementptr"(%1425) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1434 = "mid.checkflag"(%1433) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1435 = "llvm.load"(%1434) : (!hi.bool) -> i1
      "cf.cond_br"(%1435) [^bb375, ^bb373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb375:
      %1436 = "llvm.getelementptr"(%1425) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1437 = "mid.checkflag"(%1436) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1438 = "llvm.load"(%1437) : (!hi.bool) -> i1
      "cf.cond_br"(%1438) [^bb373, ^bb373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb372:
      %1439 = "llvm.extractvalue"(%1424) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1440 = "llvm.load"(%1427) : (!llvm.ptr) -> i32
      %1441 = "llvm.getelementptr"(%1439, %1440) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1442 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1443 = "llvm.getelementptr"(%1441, %1442) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1443) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb376(%1444 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1445 : !llvm.ptr):
      %1446 = "mid.invariant"(%1445) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1447 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb377] : () -> ()
    ^bb378:
      %1448 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%1448, %1447) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb379] : () -> ()
    ^bb380:
      %1449 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%1449, %1447) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb379] : () -> ()
    ^bb377:
      %1450 = "llvm.getelementptr"(%1445) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1451 = "mid.checkflag"(%1450) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1452 = "llvm.load"(%1451) : (!hi.bool) -> i1
      "cf.cond_br"(%1452) [^bb378, ^bb381] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb381:
      %1453 = "llvm.getelementptr"(%1445) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1454 = "mid.checkflag"(%1453) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1455 = "llvm.load"(%1454) : (!hi.bool) -> i1
      "cf.cond_br"(%1455) [^bb382, ^bb380] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb382:
      %1456 = "llvm.getelementptr"(%1445) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1457 = "mid.checkflag"(%1456) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1458 = "llvm.load"(%1457) : (!hi.bool) -> i1
      "cf.cond_br"(%1458) [^bb380, ^bb380] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb379:
      %1459 = "llvm.extractvalue"(%1444) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1460 = "llvm.load"(%1447) : (!llvm.ptr) -> i32
      %1461 = "llvm.getelementptr"(%1459, %1460) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1462 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1463 = "llvm.getelementptr"(%1461, %1462) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1463) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb383(%1464 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1465 : !llvm.ptr):
      %1466 = "mid.invariant"(%1465) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1467 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb384] : () -> ()
    ^bb385:
      %1468 = "llvm.mlir.constant"() <{"value" = 123 : i32}> : () -> i32
      "llvm.store"(%1468, %1467) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb386] : () -> ()
    ^bb387:
      %1469 = "llvm.mlir.constant"() <{"value" = 122 : i32}> : () -> i32
      "llvm.store"(%1469, %1467) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb386] : () -> ()
    ^bb384:
      %1470 = "llvm.getelementptr"(%1465) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1471 = "mid.checkflag"(%1470) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1472 = "llvm.load"(%1471) : (!hi.bool) -> i1
      "cf.cond_br"(%1472) [^bb385, ^bb388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb388:
      %1473 = "llvm.getelementptr"(%1465) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1474 = "mid.checkflag"(%1473) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1475 = "llvm.load"(%1474) : (!hi.bool) -> i1
      "cf.cond_br"(%1475) [^bb389, ^bb387] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb389:
      %1476 = "llvm.getelementptr"(%1465) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1477 = "mid.checkflag"(%1476) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1478 = "llvm.load"(%1477) : (!hi.bool) -> i1
      "cf.cond_br"(%1478) [^bb387, ^bb387] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb386:
      %1479 = "llvm.extractvalue"(%1464) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1480 = "llvm.load"(%1467) : (!llvm.ptr) -> i32
      %1481 = "llvm.getelementptr"(%1479, %1480) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1482 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1483 = "llvm.getelementptr"(%1481, %1482) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1483) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb390(%1484 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1485 : !llvm.ptr):
      %1486 = "mid.invariant"(%1485) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1487 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb391] : () -> ()
    ^bb392:
      %1488 = "llvm.mlir.constant"() <{"value" = 124 : i32}> : () -> i32
      "llvm.store"(%1488, %1487) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb393] : () -> ()
    ^bb394:
      %1489 = "llvm.mlir.constant"() <{"value" = 125 : i32}> : () -> i32
      "llvm.store"(%1489, %1487) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb393] : () -> ()
    ^bb391:
      %1490 = "llvm.getelementptr"(%1485) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1491 = "mid.checkflag"(%1490) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1492 = "llvm.load"(%1491) : (!hi.bool) -> i1
      "cf.cond_br"(%1492) [^bb392, ^bb395] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb395:
      %1493 = "llvm.getelementptr"(%1485) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1494 = "mid.checkflag"(%1493) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1495 = "llvm.load"(%1494) : (!hi.bool) -> i1
      "cf.cond_br"(%1495) [^bb396, ^bb394] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb396:
      %1496 = "llvm.getelementptr"(%1485) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1497 = "mid.checkflag"(%1496) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1498 = "llvm.load"(%1497) : (!hi.bool) -> i1
      "cf.cond_br"(%1498) [^bb394, ^bb394] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb393:
      %1499 = "llvm.extractvalue"(%1484) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1500 = "llvm.load"(%1487) : (!llvm.ptr) -> i32
      %1501 = "llvm.getelementptr"(%1499, %1500) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<558 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1502 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1503 = "llvm.getelementptr"(%1501, %1502) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1503) : (!llvm.ptr) -> ()
    }) {"func_name" = "HashMap_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb397(%1504 : i32):
      %1505 = "mid.wrap"(%1504) : (i32) -> si32
      %1506 = "hi.cast"(%1505) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1507 = "mid.literal"() {"value" = 2127912214 : i32, "typ" = i32} : () -> si32
      %1508 = "hi.arithmetic"(%1506, %1507) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1509 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> si32
      %1510 = "hi.arithmetic"(%1506, %1509) {"op" = "LSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1511 = "hi.arithmetic"(%1508, %1510) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1512 = "hi.cast"(%1511) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%1506, %1512) {"typ" = i32} : (si32, si32) -> ()
      %1513 = "mid.literal"() {"value" = -949894596 : i32, "typ" = i32} : () -> si32
      %1514 = "hi.arithmetic"(%1506, %1513) {"op" = "bit_xor", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1515 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1516 = "hi.arithmetic"(%1506, %1515) {"op" = "RSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1517 = "hi.arithmetic"(%1514, %1516) {"op" = "bit_xor", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1518 = "hi.cast"(%1517) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%1506, %1518) {"typ" = i32} : (si32, si32) -> ()
      %1519 = "mid.literal"() {"value" = 374761393 : i32, "typ" = i32} : () -> si32
      %1520 = "hi.arithmetic"(%1506, %1519) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1521 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
      %1522 = "hi.arithmetic"(%1506, %1521) {"op" = "LSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1523 = "hi.arithmetic"(%1520, %1522) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1524 = "hi.cast"(%1523) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%1506, %1524) {"typ" = i32} : (si32, si32) -> ()
      %1525 = "mid.literal"() {"value" = -744332180 : i32, "typ" = i32} : () -> si32
      %1526 = "hi.arithmetic"(%1506, %1525) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1527 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %1528 = "hi.arithmetic"(%1506, %1527) {"op" = "LSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1529 = "hi.arithmetic"(%1526, %1528) {"op" = "bit_xor", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1530 = "hi.cast"(%1529) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%1506, %1530) {"typ" = i32} : (si32, si32) -> ()
      %1531 = "mid.literal"() {"value" = -42973499 : i32, "typ" = i32} : () -> si32
      %1532 = "hi.arithmetic"(%1506, %1531) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1533 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %1534 = "hi.arithmetic"(%1506, %1533) {"op" = "LSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1535 = "hi.arithmetic"(%1532, %1534) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1536 = "hi.cast"(%1535) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%1506, %1536) {"typ" = i32} : (si32, si32) -> ()
      %1537 = "mid.literal"() {"value" = -1252372727 : i32, "typ" = i32} : () -> si32
      %1538 = "hi.arithmetic"(%1506, %1537) {"op" = "bit_xor", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1539 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> si32
      %1540 = "hi.arithmetic"(%1506, %1539) {"op" = "RSHIFT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1541 = "hi.arithmetic"(%1538, %1540) {"op" = "bit_xor", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %1542 = "hi.cast"(%1541) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%1506, %1542) {"typ" = i32} : (si32, si32) -> ()
      %1543 = "hi.cast"(%1506) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%1543) : (si32) -> ()
    }) {"func_name" = "i32_hasher", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb398(%1544 : i32, %1545 : i32):
      %1546 = "mid.wrap"(%1544) : (i32) -> si32
      %1547 = "hi.cast"(%1546) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1548 = "mid.wrap"(%1545) : (i32) -> si32
      %1549 = "hi.cast"(%1548) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1550 = "hi.comparison"(%1547, %1549) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1551 = "hi.cast"(%1550) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (si1) -> !hi.bool
      "mid.return"(%1551) : (!hi.bool) -> ()
    }) {"func_name" = "i32_eq", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb399(%1552 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1553 = "mid.wrap"(%1552) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1554 = "hi.cast"(%1553) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1555 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1556 = "mid.literal"() {"value" = 31 : i32, "typ" = i32} : () -> si32
      %1557 = "mid.unwrap"(%1554) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1558 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1559 = "mid.method_call"(%1558, %1557) {"offset" = 32 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1560 = "hi.cast"(%1559) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"ConstantTimeIterator", [!hi.fatptr<"Character">]>, "from_typ_name" = "Iterator", "to_typ_name" = "ConstantTimeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"ConstantTimeIterator", [!hi.fatptr<"Character">]>
      %1561 = "mid.refer"(%1560) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ConstantTimeIterator", [!hi.fatptr<"Character">]>) -> !hi.fatptr<"ConstantTimeIterator", [!hi.fatptr<"Character">]>
      "mid.while"() ({
        %1562 = "mid.unwrap"(%1561) : (!hi.fatptr<"ConstantTimeIterator", [!hi.fatptr<"Character">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1563 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1564 = "mid.method_call"(%1563, %1562) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ConstantTimeIterator">, !hi.nil]>
        %1565 = "hi.cast"(%1564) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ConstantTimeIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ConstantTimeIterator">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
        %1566 = "mid.checkflag"(%1565) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> si1
        %1567 = "mid.unwrap"(%1566) : (si1) -> i1
      }, {
        %1568 = "hi.cast"(%1565) {"from_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> !hi.fatptr<"Character">
        %1569 = "hi.arithmetic"(%1555, %1556) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1570 = "mid.unwrap"(%1568) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1571 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1572 = "mid.method_call"(%1571, %1570) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %1573 = "hi.cast"(%1572) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1574 = "hi.arithmetic"(%1569, %1573) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1575 = "mid.literal"() {"value" = 2147483647 : i32, "typ" = i32} : () -> si32
        %1576 = "hi.arithmetic"(%1574, %1575) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1577 = "hi.cast"(%1576) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1555, %1577) {"typ" = i32} : (si32, si32) -> ()
        %1578 = "hi.cast"(%1568) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "Character", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Character">) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
        "mid.assign"(%1565, %1578) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>, !hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> ()
      }) : () -> ()
      %1579 = "hi.cast"(%1555) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%1579) : (si32) -> ()
    }) {"func_name" = "string_hasher", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb400(%1580 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1581 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1582 = "mid.wrap"(%1580) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1583 = "hi.cast"(%1582) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1584 = "mid.wrap"(%1581) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1585 = "hi.cast"(%1584) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1586 = "hi.cast"(%1585) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1587 = "mid.unwrap"(%1586) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1588 = "mid.unwrap"(%1583) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1589 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1590 = "mid.parameterizations_array"(%1589) : (!llvm.ptr) -> !llvm.ptr
      %1591 = "mid.method_call"(%1590, %1588, %1587) {"offset" = 16 : i32, "vptrs" = [#none], "vtable_size" = 314 : i64, "ret_type" = i1, "ret_type_unq" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.bool
      %1592 = "hi.cast"(%1591) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      %1593 = "hi.cast"(%1592) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%1593) : (!hi.bool) -> ()
    }) {"func_name" = "string_eq", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "io"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.typedef"() {"class_name" = "IO", "methods" = [@IO_B__Self_print_xi32__Self_print_xString__Self_print_xRepresentable__Self_print_xi8__Self_print_xf64__Self_print_xBool__Self_print_xi64__Self_print_xNil__Self_print_xCharacter, @IO__Self_print_xi32, @IO__Self_print_xString, @IO__Self_print_xRepresentable, @IO__Self_print_xi8, @IO__Self_print_xf64, @IO__Self_print_xBool, @IO__Self_print_xi64, @IO__Self_print_xNil, @IO__Self_print_xCharacter], "hash_tbl" = [@any_typ, @IO, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 20 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5359822646784595218 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IO", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_IO", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr, %1 : !llvm.struct<(!llvm.ptr, i160)>):
      %2 = "mid.wrap"(%1) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %3 = "hi.cast"(%2) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> si32
      %4 = "mid.print"(%3) {"typ" = i32} : (si32) -> i32
    }) {"func_name" = "IO__Self_print_xi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%5 : !llvm.ptr, %6 : !llvm.struct<(!llvm.ptr, i160)>):
      %7 = "mid.wrap"(%6) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %8 = "hi.cast"(%7) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "union_typ", "to_typ_name" = "String"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !hi.fatptr<"String">
      %9 = "mid.unwrap"(%8) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %10 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %11 = "mid.method_call"(%10, %9) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %12 = "hi.cast"(%11) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %13 = "mid.print"(%12) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
    }) {"func_name" = "IO__Self_print_xString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb2(%14 : !llvm.ptr, %15 : !llvm.struct<(!llvm.ptr, i160)>):
      %16 = "mid.wrap"(%15) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %17 = "hi.cast"(%16) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = !hi.fatptr<"Representable">, "from_typ_name" = "union_typ", "to_typ_name" = "Representable"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !hi.fatptr<"Representable">
      %18 = "mid.unwrap"(%17) : (!hi.fatptr<"Representable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %19 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %20 = "mid.method_call"(%19, %18) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %21 = "hi.cast"(%20) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %22 = "mid.unwrap"(%21) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %23 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %24 = "mid.method_call"(%23, %22) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %25 = "hi.cast"(%24) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %26 = "mid.print"(%25) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
    }) {"func_name" = "IO__Self_print_xRepresentable", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb3(%27 : !llvm.ptr, %28 : !llvm.struct<(!llvm.ptr, i160)>):
      %29 = "mid.wrap"(%28) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %30 = "hi.cast"(%29) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = si8, "from_typ_name" = "union_typ", "to_typ_name" = "i8_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> si8
      %31 = "mid.print"(%30) {"typ" = i8} : (si8) -> i32
    }) {"func_name" = "IO__Self_print_xi8", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb4(%32 : !llvm.ptr, %33 : !llvm.struct<(!llvm.ptr, i160)>):
      %34 = "mid.wrap"(%33) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %35 = "hi.cast"(%34) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !hi.float
      %36 = "mid.print"(%35) {"typ" = f64} : (!hi.float) -> i32
    }) {"func_name" = "IO__Self_print_xf64", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%37 : !llvm.ptr, %38 : !llvm.struct<(!llvm.ptr, i160)>):
      %39 = "mid.wrap"(%38) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %40 = "hi.cast"(%39) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = !hi.bool, "from_typ_name" = "union_typ", "to_typ_name" = "bool_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !hi.bool
      %41 = "mid.unwrap"(%40) : (!hi.bool) -> i1
      "mid.if"(%41) ({
        %42 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %43 = "hi.cast"(%42) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %44 = "mid.create_buffer"(%43) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %45 = "mid.refer"(%44) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %46 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "true"} : () -> !llvm.ptr
        %47 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%45, %47, %46) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %48 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %49 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %50 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %51 = "mid.unwrap"(%45) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %52 = "mid.unwrap"(%48) : (si32) -> i32
        %53 = "mid.unwrap"(%49) : (si32) -> i32
        %54 = "mid.unwrap"(%50) : (si32) -> i32
        %55 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %56 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %57 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %58 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %59 = "hi.cast"(%45) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %60 = "mid.unwrap"(%59) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %61 = "hi.cast"(%56) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %62 = "mid.unwrap"(%61) : (si32) -> i32
        %63 = "hi.cast"(%57) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %64 = "mid.unwrap"(%63) : (si32) -> i32
        %65 = "hi.cast"(%58) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %66 = "mid.unwrap"(%65) : (si32) -> i32
        %67 = "mid.unwrap"(%55) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %68 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %69 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %70 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %71 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %72 = "mid.parameterizations_array"(%68, %69, %70, %71) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%72, %67, %60, %62, %64, %66) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %73 = "mid.unwrap"(%55) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %74 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %75 = "mid.method_call"(%74, %73) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
        %76 = "hi.cast"(%75) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %77 = "mid.print"(%76) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      }, {
        %78 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
        %79 = "hi.cast"(%78) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %80 = "mid.create_buffer"(%79) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %81 = "mid.refer"(%80) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %82 = "mid.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "false"} : () -> !llvm.ptr
        %83 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%81, %83, %82) {"typ" = !llvm.array<5 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %84 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %85 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %86 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
        %87 = "mid.unwrap"(%81) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %88 = "mid.unwrap"(%84) : (si32) -> i32
        %89 = "mid.unwrap"(%85) : (si32) -> i32
        %90 = "mid.unwrap"(%86) : (si32) -> i32
        %91 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %92 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %93 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %94 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
        %95 = "hi.cast"(%81) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %96 = "mid.unwrap"(%95) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %97 = "hi.cast"(%92) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %98 = "mid.unwrap"(%97) : (si32) -> i32
        %99 = "hi.cast"(%93) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %100 = "mid.unwrap"(%99) : (si32) -> i32
        %101 = "hi.cast"(%94) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %102 = "mid.unwrap"(%101) : (si32) -> i32
        %103 = "mid.unwrap"(%91) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %104 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %105 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %106 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %107 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %108 = "mid.parameterizations_array"(%104, %105, %106, %107) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%108, %103, %96, %98, %100, %102) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %109 = "mid.unwrap"(%91) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %110 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %111 = "mid.method_call"(%110, %109) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
        %112 = "hi.cast"(%111) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %113 = "mid.print"(%112) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
      }) : (i1) -> ()
    }) {"func_name" = "IO__Self_print_xBool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%114 : !llvm.ptr, %115 : !llvm.struct<(!llvm.ptr, i160)>):
      %116 = "mid.wrap"(%115) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %117 = "hi.cast"(%116) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = si64, "from_typ_name" = "union_typ", "to_typ_name" = "i64_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> si64
      %118 = "mid.print"(%117) {"typ" = i64} : (si64) -> i32
    }) {"func_name" = "IO__Self_print_xi64", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb7(%119 : !llvm.ptr, %120 : !llvm.struct<(!llvm.ptr, i160)>):
      %121 = "mid.wrap"(%120) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %122 = "hi.cast"(%121) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !hi.nil
      %123 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %124 = "hi.cast"(%123) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %125 = "mid.create_buffer"(%124) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %126 = "mid.refer"(%125) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %127 = "mid.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "nil"} : () -> !llvm.ptr
      %128 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%126, %128, %127) {"typ" = !llvm.array<3 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %129 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %130 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %131 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %132 = "mid.unwrap"(%126) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %133 = "mid.unwrap"(%129) : (si32) -> i32
      %134 = "mid.unwrap"(%130) : (si32) -> i32
      %135 = "mid.unwrap"(%131) : (si32) -> i32
      %136 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %137 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %138 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %139 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %140 = "hi.cast"(%126) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %141 = "mid.unwrap"(%140) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %142 = "hi.cast"(%137) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %143 = "mid.unwrap"(%142) : (si32) -> i32
      %144 = "hi.cast"(%138) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %145 = "mid.unwrap"(%144) : (si32) -> i32
      %146 = "hi.cast"(%139) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %147 = "mid.unwrap"(%146) : (si32) -> i32
      %148 = "mid.unwrap"(%136) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %149 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %150 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %151 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %152 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %153 = "mid.parameterizations_array"(%149, %150, %151, %152) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%153, %148, %141, %143, %145, %147) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %154 = "mid.unwrap"(%136) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %155 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %156 = "mid.method_call"(%155, %154) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %157 = "hi.cast"(%156) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %158 = "mid.print"(%157) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
    }) {"func_name" = "IO__Self_print_xNil", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb8(%159 : !llvm.ptr, %160 : !llvm.struct<(!llvm.ptr, i160)>):
      %161 = "mid.wrap"(%160) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %162 = "hi.cast"(%161) {"from_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !hi.fatptr<"Character">
      %163 = "mid.unwrap"(%162) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %164 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %165 = "mid.method_call"(%164, %163) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %166 = "hi.cast"(%165) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %167 = "mid.unwrap"(%166) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %168 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %169 = "mid.method_call"(%168, %167) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %170 = "hi.cast"(%169) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %171 = "mid.print"(%170) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> i32
    }) {"func_name" = "IO__Self_print_xCharacter", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb9(%172 : !llvm.ptr):
      %173 = "mid.invariant"(%172) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %174 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %175 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%175, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb13:
      %176 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%176, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb14:
      %177 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%177, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb15:
      %178 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%178, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb16:
      %179 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%179, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb17:
      %180 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%180, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb18:
      %181 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%181, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb19:
      %182 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%182, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb20:
      %183 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%183, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb10:
      %184 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %185 = "mid.checkflag"(%184) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %186 = "llvm.load"(%185) : (!hi.bool) -> i1
      "cf.cond_br"(%186) [^bb11, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb21:
      %187 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %188 = "mid.checkflag"(%187) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %189 = "llvm.load"(%188) : (!hi.bool) -> i1
      "cf.cond_br"(%189) [^bb13, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %190 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %191 = "mid.checkflag"(%190) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %192 = "llvm.load"(%191) : (!hi.bool) -> i1
      "cf.cond_br"(%192) [^bb14, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %193 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %194 = "mid.checkflag"(%193) {"typ_name" = "bool_typ"} : (!llvm.ptr) -> !hi.bool
      %195 = "llvm.load"(%194) : (!hi.bool) -> i1
      "cf.cond_br"(%195) [^bb15, ^bb24] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %196 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %197 = "mid.checkflag"(%196) {"typ_name" = "i64_typ"} : (!llvm.ptr) -> !hi.bool
      %198 = "llvm.load"(%197) : (!hi.bool) -> i1
      "cf.cond_br"(%198) [^bb16, ^bb25] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb25:
      %199 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %200 = "mid.checkflag"(%199) {"typ_name" = "nil_typ"} : (!llvm.ptr) -> !hi.bool
      %201 = "llvm.load"(%200) : (!hi.bool) -> i1
      "cf.cond_br"(%201) [^bb17, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %202 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %203 = "mid.checkflag"(%202) {"typ_name" = "Representable"} : (!llvm.ptr) -> !hi.bool
      %204 = "llvm.load"(%203) : (!hi.bool) -> i1
      "cf.cond_br"(%204) [^bb27, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %205 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %206 = "mid.checkflag"(%205) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %207 = "llvm.load"(%206) : (!hi.bool) -> i1
      "cf.cond_br"(%207) [^bb28, ^bb29] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb29:
      %208 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %209 = "mid.checkflag"(%208) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %210 = "llvm.load"(%209) : (!hi.bool) -> i1
      "cf.cond_br"(%210) [^bb28, ^bb18] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb28:
      %211 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %212 = "mid.checkflag"(%211) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %213 = "llvm.load"(%212) : (!hi.bool) -> i1
      "cf.cond_br"(%213) [^bb30, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %214 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %215 = "mid.checkflag"(%214) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %216 = "llvm.load"(%215) : (!hi.bool) -> i1
      "cf.cond_br"(%216) [^bb31, ^bb19] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %217 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %218 = "mid.checkflag"(%217) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %219 = "llvm.load"(%218) : (!hi.bool) -> i1
      "cf.cond_br"(%219) [^bb32, ^bb20] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %220 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %221 = "mid.checkflag"(%220) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %222 = "llvm.load"(%221) : (!hi.bool) -> i1
      "cf.cond_br"(%222) [^bb20, ^bb20] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb12:
      %223 = "mid.addr_of"() {"global_name" = @IO} : () -> !llvm.ptr
      %224 = "llvm.load"(%174) : (!llvm.ptr) -> i32
      %225 = "llvm.getelementptr"(%223, %224) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %226 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %227 = "llvm.getelementptr"(%225, %226) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%227) : (!llvm.ptr) -> ()
    }) {"func_name" = "IO_B__Self_print_xi32__Self_print_xString__Self_print_xRepresentable__Self_print_xi8__Self_print_xf64__Self_print_xBool__Self_print_xi64__Self_print_xNil__Self_print_xCharacter", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "swiss_table_v2"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.external_typedef"() {"class_name" = "KeyNotFound"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Map"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapKeys"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapValues"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapKeyIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapValueIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "HashMap"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO"} : () -> ()
    "mid.typedef"() {"class_name" = "Entry", "methods" = [@Entry_field_Entry_0, @Entry_field_Entry_1, @Entry_field_hash, @Entry_field_key, @Entry_field_value, @Entry_B_hash_, @Entry_B_key_, @Entry_B_value_, @Entry_B_init_keyK_valueV_hashi32, @Entry_B_to_pair_, @Entry_hash_, @Entry_key_, @Entry_value_, @Entry_init_keyK_valueV_hashi32, @Entry_to_pair_], "hash_tbl" = [@Entry, @Object, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 25 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 4015701072841558310 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Entry", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "SwissTable", "methods" = [@SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_field_SwissTable_8, @SwissTable_field_entries, @SwissTable_field_metadata, @SwissTable_field_entries_len, @SwissTable_field_size, @SwissTable_field_hasher, @SwissTable_field_eq, @SwissTable_B_hash_to_metadata_hashi32, @SwissTable_B_find_slot_keyK_hashi32, @SwissTable_B_resize_new_capacityi32, @SwissTable_B_ensure_capacity_required_sizei32, @SwissTable_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool, @SwissTable_B_get_keyK, @SwissTable_B_insert_keyK_valueV, @SwissTable_B_remove_keyK, @SwissTable_B_keys_, @SwissTable_B_clear_, @SwissTable_B_indices_, @SwissTable_B_values_, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_hash_to_metadata_hashi32, @SwissTable_find_slot_keyK_hashi32, @SwissTable_resize_new_capacityi32, @SwissTable_ensure_capacity_required_sizei32, @SwissTable_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool, @SwissTable_get_keyK, @SwissTable_insert_keyK_valueV, @SwissTable_remove_keyK, @Map_keys_, @SwissTable_clear_, @Map_indices_, @Map_values_, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_field_SwissTable_8, @SwissTable_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool, @SwissTable_B_get_keyK, @SwissTable_B_insert_keyK_valueV, @SwissTable_B_remove_keyK, @SwissTable_B_keys_, @SwissTable_B_clear_, @SwissTable_B_indices_, @SwissTable_B_values_, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool, @SwissTable_get_keyK, @SwissTable_insert_keyK_valueV, @SwissTable_remove_keyK, @Map_keys_, @SwissTable_clear_, @Map_indices_, @Map_values_, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_field_SwissTable_8, @SwissTable_B_get_keyK, @SwissTable_B_insert_keyK_valueV, @SwissTable_B_remove_keyK, @SwissTable_B_keys_, @SwissTable_B_clear_, @SwissTable_B_indices_, @SwissTable_B_values_, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_get_keyK, @SwissTable_insert_keyK_valueV, @SwissTable_remove_keyK, @Map_keys_, @SwissTable_clear_, @Map_indices_, @Map_values_, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_field_SwissTable_8, @SwissTable_B_indices_, @SwissTable_B_values_, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @Map_indices_, @Map_values_, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_field_SwissTable_8, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_field_SwissTable_8, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_field_SwissTable_8, @SwissTable_B_indices_, @SwissTable_B_values_, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @Map_indices_, @Map_values_, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_field_SwissTable_8, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_field_SwissTable_8, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_field_SwissTable_8, @SwissTable_B_get_keyK, @SwissTable_B_insert_keyK_valueV, @SwissTable_B_remove_keyK, @SwissTable_B_keys_, @SwissTable_B_clear_, @SwissTable_B_indices_, @SwissTable_B_values_, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_get_keyK, @SwissTable_insert_keyK_valueV, @SwissTable_remove_keyK, @Map_keys_, @SwissTable_clear_, @Map_indices_, @Map_values_, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_field_SwissTable_8, @SwissTable_B_indices_, @SwissTable_B_values_, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @Map_indices_, @Map_values_, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_field_SwissTable_8, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_field_SwissTable_8, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_field_SwissTable_8, @SwissTable_B_indices_, @SwissTable_B_values_, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @Map_indices_, @Map_values_, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_field_SwissTable_8, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_0, @SwissTable_field_SwissTable_1, @SwissTable_B__index_keyK, @SwissTable_B__set_index_keyK_valueV, @Map__index_keyK, @Map__set_index_keyK_valueV, @SwissTable_field_SwissTable_8, @SwissTable_B_size_, @SwissTable_B_is_empty_, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_size_, @Collection_is_empty_, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @SwissTable_field_SwissTable_8, @SwissTable_B_iterator_, @SwissTable_B_each_fFunctionT_to_Nothing, @SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T, @SwissTable_B_all_fFunctionT_to_Bool, @SwissTable_B_any_fFunctionT_to_Bool, @SwissTable_B_enumerate_, @SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @SwissTable_B_filter_fFunctionT_to_Bool, @SwissTable_B_chain_otherIterableT_chain_otherCollectionT, @SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT, @SwissTable_B_zip_otherIterableU_zip_otherCollectionU, @SwissTable_B_product_otherCollectionU_product_otherIterableU, @SwissTable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Indexable, @Object, @any_typ, 18446744073709551615 : i64, @Collection, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @IndexableCollection, 18446744073709551615 : i64, 18446744073709551615 : i64, @HashMap, @SwissTable, 18446744073709551615 : i64, @Map], "offset_tbl" = [1050 : i32, 1056 : i32, 10 : i32, 0 : i32, 1056 : i32, 1115 : i32, 0 : i32, 0 : i32, 0 : i32, 916 : i32, 0 : i32, 0 : i32, 80 : i32, 10 : i32, 0 : i32, 638 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 4490338885899135281 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_SwissTable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "SwissTableIterator", "methods" = [@SwissTableIterator_field_SwissTableIterator_0, @SwissTableIterator_field_SwissTableIterator_1, @SwissTableIterator_field_SwissTableIterator_2, @SwissTableIterator_field_map_entries, @SwissTableIterator_field_map_metadata, @SwissTableIterator_field_index, @SwissTableIterator_field_length, @SwissTableIterator_B_init_map_entriesBufferEntryK._V_or_Nil_map_metadataBufferi8_lengthi32, @SwissTableIterator_B_next_, @SwissTableIterator_init_map_entriesBufferEntryK._V_or_Nil_map_metadataBufferi8_lengthi32, @SwissTableIterator_next_, @SwissTableIterator_field_SwissTableIterator_2, @SwissTableIterator_B_next_, @SwissTableIterator_next_], "hash_tbl" = [@Object, @SwissTableIterator, @any_typ, @Iterator], "offset_tbl" = [24 : i32, 10 : i32, 10 : i32, 21 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 7015872805459348650 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_SwissTableIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "i32_hasher", "function_type" = !llvm.func<i32 (i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "i32_eq", "function_type" = !llvm.func<i1 (i32, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "string_hasher", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "string_eq", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
      %0 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> si8
      %1 = "hi.cast"(%0) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      "mid.return"(%1) : (si8) -> ()
    }) {"func_name" = "empty_slot", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
      %2 = "mid.literal"() {"value" = -128 : i8, "typ" = i8} : () -> si8
      %3 = "hi.cast"(%2) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      "mid.return"(%3) : (si8) -> ()
    }) {"func_name" = "tombstone_slot", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
      %4 = "mid.literal"() {"value" = 1 : i8, "typ" = i8} : () -> si8
      %5 = "hi.cast"(%4) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      "mid.return"(%5) : (si8) -> ()
    }) {"func_name" = "active_slot", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Entry", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Entry_field_Entry_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Entry_field_Entry_1"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Entry_getter_hash", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Entry_setter_hash", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Entry_field_hash", "getter_name" = "Entry_getter_hash", "setter_name" = "Entry_setter_hash"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Entry_getter_key", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Entry_setter_key", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Entry_field_key", "getter_name" = "Entry_getter_key", "setter_name" = "Entry_setter_key"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Entry_getter_value", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Entry_setter_value", "types" = [!llvm.ptr, !llvm.ptr, i32, 0 : i64, 1 : i64], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Entry_field_value", "getter_name" = "Entry_getter_value", "setter_name" = "Entry_setter_value"} : () -> ()
    "mid.func"() ({
    ^bb0(%6 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8 : !llvm.ptr):
      %9 = "mid.wrap"(%6) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %10 = "hi.cast"(%9) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %11 = "mid.get_field"(%10) {"offset" = 2 : i64, "vtable_bytes" = 120 : i32, "original_type" = i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> si32
      %12 = "hi.cast"(%11) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%12) : (si32) -> ()
    }) {"func_name" = "Entry_hash_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %17 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %18 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %19 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %20 = "llvm.getelementptr"(%18, %19) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %21 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %22 = "llvm.getelementptr"(%20, %21) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%22) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_hash_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb4(%23 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %24 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %25 : !llvm.ptr):
      %26 = "mid.wrap"(%23) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %27 = "hi.cast"(%26) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %28 = "mid.get_field"(%27) {"offset" = 3 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"K", !hi.any, "Entry">
      %29 = "hi.cast"(%28) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      %30 = "hi.cast"(%29) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      "mid.return"(%30) : (!hi.type_param<"K", !hi.any, "Entry">) -> ()
    }) {"func_name" = "Entry_key_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%31 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %32 : !llvm.ptr):
      %33 = "mid.invariant"(%32) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %34 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %35 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%35, %34) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %36 = "llvm.extractvalue"(%31) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %37 = "llvm.load"(%34) : (!llvm.ptr) -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %40 = "llvm.getelementptr"(%38, %39) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%40) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_key_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb8(%41 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %42 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %43 : !llvm.ptr):
      %44 = "mid.wrap"(%41) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %45 = "hi.cast"(%44) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %46 = "mid.get_field"(%45) {"offset" = 4 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"V", !hi.any, "Entry">
      %47 = "hi.cast"(%46) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      %48 = "hi.cast"(%47) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      "mid.return"(%48) : (!hi.type_param<"V", !hi.any, "Entry">) -> ()
    }) {"func_name" = "Entry_value_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb9(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb10:
      %53 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb11] : () -> ()
    ^bb11:
      %54 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %55 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %57 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %58 = "llvm.getelementptr"(%56, %57) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%58) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_value_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb12(%59 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %60 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %61 : !llvm.ptr, %62 : !llvm.struct<(!llvm.ptr, i160)>, %63 : !llvm.struct<(!llvm.ptr, i160)>, %64 : i32):
      %65 = "mid.wrap"(%59) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %66 = "hi.cast"(%65) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %67 = "mid.wrap"(%62) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "Entry">
      %68 = "hi.cast"(%67) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      %69 = "hi.cast"(%68) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      "mid.set_field"(%66, %69) {"offset" = 3 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, !hi.type_param<"K", !hi.any, "Entry">) -> ()
      %70 = "mid.wrap"(%63) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"V", !hi.any, "Entry">
      %71 = "hi.cast"(%70) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      %72 = "hi.cast"(%71) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      "mid.set_field"(%66, %72) {"offset" = 4 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, !hi.type_param<"V", !hi.any, "Entry">) -> ()
      %73 = "mid.wrap"(%64) : (i32) -> si32
      %74 = "hi.cast"(%73) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %75 = "hi.cast"(%74) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%66, %75) {"offset" = 2 : i64, "vtable_bytes" = 120 : i32, "original_type" = i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, si32) -> ()
    }) {"func_name" = "Entry_init_keyK_valueV_hashi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb13(%76 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %77 : !llvm.ptr):
      %78 = "mid.invariant"(%77) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %79 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb14] : () -> ()
    ^bb15:
      %80 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%80, %79) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %81 = "llvm.getelementptr"(%77) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %82 = "mid.checkflag"(%81) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %83 = "llvm.load"(%82) : (!hi.bool) -> i1
      "cf.cond_br"(%83) [^bb15, ^bb15] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %84 = "llvm.getelementptr"(%77) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %85 = "mid.checkflag"(%84) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %86 = "llvm.load"(%85) : (!hi.bool) -> i1
      "cf.cond_br"(%86) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb14:
      %87 = "llvm.getelementptr"(%77) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %88 = "mid.checkflag"(%87) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %89 = "llvm.load"(%88) : (!hi.bool) -> i1
      "cf.cond_br"(%89) [^bb18, ^bb18] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %90 = "llvm.extractvalue"(%76) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %91 = "llvm.load"(%79) : (!llvm.ptr) -> i32
      %92 = "llvm.getelementptr"(%90, %91) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %93 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %94 = "llvm.getelementptr"(%92, %93) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%94) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_init_keyK_valueV_hashi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb19(%95 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %96 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %97 : !llvm.ptr):
      %98 = "mid.wrap"(%95) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %99 = "hi.cast"(%98) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Entry", "to_typ_name" = "Entry"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %100 = "mid.get_field"(%99) {"offset" = 3 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"K", !hi.any, "Entry">
      %101 = "hi.cast"(%100) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      %102 = "mid.get_field"(%99) {"offset" = 4 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"V", !hi.any, "Entry">
      %103 = "hi.cast"(%102) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      %104 = "mid.unwrap"(%101) : (!hi.type_param<"K", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
      %105 = "mid.unwrap"(%103) : (!hi.type_param<"V", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
      %106 = "mid.get_type_field"(%99) {"offset" = 0 : i64, "vtable_bytes" = 120 : i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.reified_type
      %107 = "mid.get_type_field"(%99) {"offset" = 1 : i64, "vtable_bytes" = 120 : i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.reified_type
      %108 = "mid.new"(%106, %107) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      %109 = "mid.get_field"(%99) {"offset" = 3 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"K", !hi.any, "Entry">
      %110 = "hi.cast"(%109) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "Entry">
      %111 = "mid.get_field"(%99) {"offset" = 4 : i64, "vtable_bytes" = 120 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.type_param<"V", !hi.any, "Entry">
      %112 = "hi.cast"(%111) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "Entry">
      %113 = "hi.cast"(%110) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"T", !hi.any, "Pair">
      %114 = "mid.unwrap"(%113) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
      %115 = "hi.cast"(%112) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"U", !hi.any, "Pair">
      %116 = "mid.unwrap"(%115) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
      %117 = "mid.unwrap"(%108) : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %118 = "mid.get_type_field"(%99) {"offset" = 0 : i64, "vtable_bytes" = 120 : i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.reified_type
      %119 = "mid.get_type_field"(%99) {"offset" = 1 : i64, "vtable_bytes" = 120 : i32} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.reified_type
      %120 = "mid.parameterizations_array"(%118, %119) : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      "mid.method_call"(%120, %117, %114, %116) {"offset" = 8 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %121 = "hi.cast"(%108) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
      "mid.return"(%121) : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> ()
    }) {"func_name" = "Entry_to_pair_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb20(%122 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %123 : !llvm.ptr):
      %124 = "mid.invariant"(%123) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %125 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb21] : () -> ()
    ^bb21:
      %126 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%126, %125) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb22:
      %127 = "llvm.extractvalue"(%122) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %128 = "llvm.load"(%125) : (!llvm.ptr) -> i32
      %129 = "llvm.getelementptr"(%127, %128) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<15 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %130 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %131 = "llvm.getelementptr"(%129, %130) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%131) : (!llvm.ptr) -> ()
    }) {"func_name" = "Entry_B_to_pair_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_SwissTable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "SwissTable_field_SwissTable_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "SwissTable_field_SwissTable_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "SwissTable_field_SwissTable_8"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTable_getter_entries", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferNil_or_EntrySwissTable.K_subtype_Any._SwissTable.V_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTable_setter_entries", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferNil_or_EntrySwissTable.K_subtype_Any._SwissTable.V_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTable_field_entries", "getter_name" = "SwissTable_getter_entries", "setter_name" = "SwissTable_setter_entries"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTable_getter_metadata", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTable_setter_metadata", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTable_field_metadata", "getter_name" = "SwissTable_getter_metadata", "setter_name" = "SwissTable_setter_metadata"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTable_getter_entries_len", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 5 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTable_setter_entries_len", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 5 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTable_field_entries_len", "getter_name" = "SwissTable_getter_entries_len", "setter_name" = "SwissTable_setter_entries_len"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTable_getter_size", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 6 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTable_setter_size", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 6 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTable_field_size", "getter_name" = "SwissTable_getter_size", "setter_name" = "SwissTable_setter_size"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTable_getter_hasher", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 7 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionSwissTable.K_subtype_Any_to_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTable_setter_hasher", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 7 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionSwissTable.K_subtype_Any_to_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTable_field_hasher", "getter_name" = "SwissTable_getter_hasher", "setter_name" = "SwissTable_setter_hasher"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTable_getter_eq", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 8 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionSwissTable.K_subtype_Any._SwissTable.K_subtype_Any_to_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTable_setter_eq", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>], "offset" = 8 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionSwissTable.K_subtype_Any._SwissTable.K_subtype_Any_to_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTable_field_eq", "getter_name" = "SwissTable_getter_eq", "setter_name" = "SwissTable_setter_eq"} : () -> ()
    "mid.func"() ({
    ^bb23(%132 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %133 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %134 : !llvm.ptr, %135 : i32):
      %136 = "mid.wrap"(%132) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %137 = "hi.cast"(%136) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %138 = "mid.wrap"(%135) : (i32) -> si32
      %139 = "hi.cast"(%138) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %140 = "mid.literal"() {"value" = 127 : i32, "typ" = i32} : () -> si32
      %141 = "hi.arithmetic"(%139, %140) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %142 = "hi.cast"(%141) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
      %143 = "hi.cast"(%142) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      "mid.return"(%143) : (si8) -> ()
    }) {"func_name" = "SwissTable_hash_to_metadata_hashi32", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %145 : !llvm.ptr):
      %146 = "mid.invariant"(%145) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %147 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb26:
      %148 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%148, %147) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb27] : () -> ()
    ^bb25:
      %149 = "llvm.getelementptr"(%145) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %150 = "mid.checkflag"(%149) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %151 = "llvm.load"(%150) : (!hi.bool) -> i1
      "cf.cond_br"(%151) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %152 = "llvm.extractvalue"(%144) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %153 = "llvm.load"(%147) : (!llvm.ptr) -> i32
      %154 = "llvm.getelementptr"(%152, %153) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %155 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %156 = "llvm.getelementptr"(%154, %155) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%156) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_hash_to_metadata_hashi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb28(%157 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %158 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %159 : !llvm.ptr, %160 : !llvm.struct<(!llvm.ptr, i160)>, %161 : i32):
      %162 = "mid.wrap"(%157) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %163 = "hi.cast"(%162) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %164 = "mid.wrap"(%160) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %165 = "hi.cast"(%164) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %166 = "mid.wrap"(%161) : (i32) -> si32
      %167 = "hi.cast"(%166) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %168 = "mid.get_field"(%163) {"offset" = 5 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
      %169 = "mid.refer"(%168) {"typ" = i32} : (si32) -> si32
      %170 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %171 = "hi.arithmetic"(%169, %170) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %172 = "hi.arithmetic"(%167, %171) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %173 = "hi.cast"(%167) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %174 = "mid.unwrap"(%173) : (si32) -> i32
      %175 = "mid.unwrap"(%163) : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %176 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %177 = "mid.parameterizations_array"(%176) : (!llvm.ptr) -> !llvm.ptr
      %178 = "mid.method_call"(%177, %175, %174) {"offset" = 9 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> si8
      %179 = "hi.cast"(%178) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      %180 = "mid.refer"(%172) {"typ" = i32} : (si32) -> si32
      %181 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %182 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %183 = "mid.unwrap"(%182) : (!hi.bool) -> i1
      }, {
        %184 = "mid.get_field"(%163) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
        %185 = "hi.cast"(%180) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %186 = "mid.buffer_get"(%184, %185) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %187 = "mid.call"() {"func_name" = "empty_slot", "ret_type" = i8} : () -> si8
        %188 = "hi.comparison"(%186, %187) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
        %189 = "mid.unwrap"(%188) : (si1) -> i1
        "mid.if"(%189) ({
          %190 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
          %191 = "hi.comparison"(%181, %190) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          %192 = "mid.unwrap"(%191) : (si1) -> i1
          "mid.if"(%192) ({
            %193 = "hi.cast"(%181) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            "mid.return"(%193) : (si32) -> ()
          }) : (i1) -> ()
          %194 = "hi.cast"(%180) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.return"(%194) : (si32) -> ()
        }) : (i1) -> ()
        %195 = "mid.call"() {"func_name" = "tombstone_slot", "ret_type" = i8} : () -> si8
        %196 = "hi.comparison"(%186, %195) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
        %197 = "mid.unwrap"(%196) : (si1) -> i1
        "mid.if"(%197) ({
          %198 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
          %199 = "hi.comparison"(%181, %198) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          %200 = "mid.unwrap"(%199) : (si1) -> i1
          "mid.if"(%200) ({
            %201 = "hi.cast"(%180) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            "mid.assign"(%181, %201) {"typ" = i32} : (si32, si32) -> ()
          }) : (i1) -> ()
        }) : (i1) -> ()
        %202 = "mid.call"() {"func_name" = "active_slot", "ret_type" = i8} : () -> si8
        %203 = "hi.comparison"(%186, %202) {"op" = "GE", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
        %204 = "mid.unwrap"(%203) : (si1) -> i1
        "mid.if"(%204) ({
          %205 = "mid.get_field"(%163) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
          %206 = "hi.cast"(%180) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
          %207 = "mid.buffer_get"(%205, %206) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, si64) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
          %208 = "mid.checkflag"(%207) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> si1
          %209 = "mid.unwrap"(%208) : (si1) -> i1
          "mid.if"(%209) ({
            %210 = "hi.cast"(%207) {"from_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
            %211 = "mid.unwrap"(%210) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
            %212 = "mid.parameterizations_array"() : () -> !llvm.ptr
            %213 = "mid.method_call"(%212, %211) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
            %214 = "hi.cast"(%213) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %215 = "hi.comparison"(%214, %167) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
            %216 = "hi.logical"(%215) ({
              %217 = "mid.unwrap"(%210) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
              %218 = "mid.parameterizations_array"() : () -> !llvm.ptr
              %219 = "mid.method_call"(%218, %217) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"K", !hi.any, "Entry">
              %220 = "hi.cast"(%219) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "SwissTable">
              %221 = "hi.cast"(%220) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
              %222 = "mid.unwrap"(%221) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
              %223 = "hi.cast"(%165) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
              %224 = "mid.unwrap"(%223) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
              %225 = "mid.get_field"(%163) {"offset" = 8 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
              %226 = "mid.unwrap"(%225) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.ptr
              %227 = "mid.fptr_call"(%226, %222, %224) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
              func.return %227 : !hi.bool
            }) {"op" = "and"} : (si1) -> si1
            %228 = "mid.unwrap"(%216) : (si1) -> i1
            "mid.if"(%228) ({
              %229 = "hi.cast"(%180) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
              "mid.return"(%229) : (si32) -> ()
            }) : (i1) -> ()
            %230 = "hi.cast"(%210) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
            "mid.assign"(%207, %230) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> ()
          }) : (i1) -> ()
        }) : (i1) -> ()
        %231 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %232 = "hi.arithmetic"(%180, %231) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %233 = "hi.arithmetic"(%232, %171) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %234 = "hi.cast"(%233) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%180, %234) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
    }) {"func_name" = "SwissTable_find_slot_keyK_hashi32", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb29(%235 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %236 : !llvm.ptr):
      %237 = "mid.invariant"(%236) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %238 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb30] : () -> ()
    ^bb31:
      %239 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%239, %238) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb32] : () -> ()
    ^bb33:
      %240 = "llvm.getelementptr"(%236) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %241 = "mid.checkflag"(%240) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %242 = "llvm.load"(%241) : (!hi.bool) -> i1
      "cf.cond_br"(%242) [^bb31, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %243 = "llvm.getelementptr"(%236) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %244 = "mid.checkflag"(%243) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %245 = "llvm.load"(%244) : (!hi.bool) -> i1
      "cf.cond_br"(%245) [^bb33, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %246 = "llvm.extractvalue"(%235) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %247 = "llvm.load"(%238) : (!llvm.ptr) -> i32
      %248 = "llvm.getelementptr"(%246, %247) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %249 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %250 = "llvm.getelementptr"(%248, %249) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%250) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_find_slot_keyK_hashi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb34(%251 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %252 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %253 : !llvm.ptr, %254 : i32):
      %255 = "mid.wrap"(%251) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %256 = "hi.cast"(%255) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %257 = "mid.wrap"(%254) : (i32) -> si32
      %258 = "hi.cast"(%257) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %259 = "mid.get_field"(%256) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      %260 = "mid.refer"(%259) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      %261 = "mid.get_field"(%256) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
      %262 = "mid.refer"(%261) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %263 = "mid.get_field"(%256) {"offset" = 5 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
      %264 = "mid.refer"(%263) {"typ" = i32} : (si32) -> si32
      %265 = "hi.cast"(%258) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %266 = "mid.create_buffer"(%265) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = "single_region_whceqqbhcq"} : (si64) -> !llvm.ptr
      %267 = "hi.cast"(%266) {"from_typ" = !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      "mid.set_field"(%256, %267) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>) -> ()
      %268 = "hi.cast"(%258) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %269 = "mid.create_buffer"(%268) {"typ" = i8, "region_id" = "single_region_whceqqbhcq"} : (si64) -> !llvm.ptr
      %270 = "hi.cast"(%269) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<si8>
      "mid.set_field"(%256, %270) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, !hi.buffer<si8>) -> ()
      %271 = "hi.cast"(%258) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%256, %271) {"offset" = 5 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
      %272 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %273 = "hi.cast"(%272) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%256, %273) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
      %274 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %275 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %276 = "hi.arithmetic"(%264, %275) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %277 = "mid.unwrap"(%274) : (si32) -> i32
      %278 = "mid.unwrap"(%276) : (si32) -> i32
      %279 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "single_region_whceqqbhcq"} : () -> !hi.fatptr<"Range">
      %280 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %281 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %282 = "hi.arithmetic"(%264, %281) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %283 = "hi.cast"(%280) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %284 = "mid.unwrap"(%283) : (si32) -> i32
      %285 = "hi.cast"(%282) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %286 = "mid.unwrap"(%285) : (si32) -> i32
      %287 = "mid.unwrap"(%279) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %288 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %289 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %290 = "mid.parameterizations_array"(%288, %289) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%290, %287, %284, %286) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %291 = "mid.unwrap"(%279) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %292 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %293 = "mid.method_call"(%292, %291) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 127 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %294 = "hi.cast"(%293) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"RangeIterator">
      %295 = "mid.refer"(%294) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      "mid.while"() ({
        %296 = "mid.unwrap"(%295) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %297 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %298 = "mid.method_call"(%297, %296) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %299 = "hi.cast"(%298) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %300 = "mid.checkflag"(%299) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %301 = "mid.unwrap"(%300) : (si1) -> i1
      }, {
        %302 = "hi.cast"(%299) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
        %303 = "hi.cast"(%302) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %304 = "mid.buffer_get"(%260, %303) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, si64) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
        %305 = "mid.checkflag"(%304) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> si1
        %306 = "mid.unwrap"(%305) : (si1) -> i1
        "mid.if"(%306) ({
          %307 = "hi.cast"(%304) {"from_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
          %308 = "mid.unwrap"(%307) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %309 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %310 = "mid.method_call"(%309, %308) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"K", !hi.any, "Entry">
          %311 = "hi.cast"(%310) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %312 = "hi.cast"(%311) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %313 = "mid.unwrap"(%312) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %314 = "mid.get_field"(%256) {"offset" = 7 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
          %315 = "mid.unwrap"(%314) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.ptr
          %316 = "mid.fptr_call"(%315, %313) {"ret_type" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> si32
          %317 = "mid.unwrap"(%307) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %318 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %319 = "mid.method_call"(%318, %317) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"K", !hi.any, "Entry">
          %320 = "hi.cast"(%319) {"from_typ" = !hi.type_param<"K", !hi.any, "Entry">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "Entry">) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %321 = "hi.cast"(%320) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %322 = "mid.unwrap"(%321) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %323 = "hi.cast"(%316) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %324 = "mid.unwrap"(%323) : (si32) -> i32
          %325 = "mid.unwrap"(%256) : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %326 = "mid.get_type_field"(%256) {"offset" = 0 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
          %327 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %328 = "mid.parameterizations_array"(%326, %327) : (!hi.reified_type, !llvm.ptr) -> !llvm.ptr
          %329 = "mid.method_call"(%328, %325, %322, %324) {"offset" = 10 : i32, "vptrs" = ["any_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, i32) -> si32
          %330 = "hi.cast"(%329) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %331 = "mid.get_field"(%256) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
          %332 = "hi.cast"(%307) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
          %333 = "hi.cast"(%330) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
          "mid.buffer_set"(%331, %333, %332) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, si64, !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> ()
          %334 = "mid.call"() {"func_name" = "active_slot", "ret_type" = i8} : () -> si8
          %335 = "mid.get_field"(%256) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
          %336 = "hi.cast"(%334) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
          %337 = "hi.cast"(%330) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
          "mid.buffer_set"(%335, %337, %336) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
          %338 = "mid.get_field"(%256) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
          %339 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %340 = "hi.arithmetic"(%338, %339) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %341 = "hi.cast"(%340) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.set_field"(%256, %341) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
          %342 = "hi.cast"(%307) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
          "mid.assign"(%304, %342) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> ()
        }) : (i1) -> ()
        %343 = "hi.cast"(%302) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
        "mid.assign"(%299, %343) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
      }) : () -> ()
    }) {"func_name" = "SwissTable_resize_new_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb35(%344 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %345 : !llvm.ptr):
      %346 = "mid.invariant"(%345) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %347 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb36] : () -> ()
    ^bb37:
      %348 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%348, %347) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb38] : () -> ()
    ^bb36:
      %349 = "llvm.getelementptr"(%345) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %350 = "mid.checkflag"(%349) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %351 = "llvm.load"(%350) : (!hi.bool) -> i1
      "cf.cond_br"(%351) [^bb37, ^bb37] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb38:
      %352 = "llvm.extractvalue"(%344) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %353 = "llvm.load"(%347) : (!llvm.ptr) -> i32
      %354 = "llvm.getelementptr"(%352, %353) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %355 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %356 = "llvm.getelementptr"(%354, %355) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%356) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_resize_new_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb39(%357 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %358 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %359 : !llvm.ptr, %360 : i32):
      %361 = "mid.wrap"(%357) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %362 = "hi.cast"(%361) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %363 = "mid.wrap"(%360) : (i32) -> si32
      %364 = "hi.cast"(%363) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %365 = "mid.get_field"(%362) {"offset" = 5 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
      %366 = "mid.refer"(%365) {"typ" = i32} : (si32) -> si32
      %367 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %368 = "hi.comparison"(%366, %367) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %369 = "hi.logical"(%368) ({
        %370 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> si32
        %371 = "hi.arithmetic"(%366, %370) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %372 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
        %373 = "hi.arithmetic"(%371, %372) {"op" = "DIV", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %374 = "hi.comparison"(%364, %373) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        func.return %374 : si1
      }) {"op" = "or"} : (si1) -> si1
      %375 = "mid.unwrap"(%369) : (si1) -> i1
      "mid.if"(%375) ({
        %376 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %377 = "hi.arithmetic"(%366, %376) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %378 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
        %379 = "hi.comparison"(%377, %378) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %380 = "mid.unwrap"(%379) : (si1) -> i1
        "mid.if"(%380) ({
          %381 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
          %382 = "hi.cast"(%381) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%377, %382) {"typ" = i32} : (si32, si32) -> ()
        }) : (i1) -> ()
        %383 = "hi.cast"(%377) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %384 = "mid.unwrap"(%383) : (si32) -> i32
        %385 = "mid.unwrap"(%362) : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %386 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %387 = "mid.parameterizations_array"(%386) : (!llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%387, %385, %384) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "SwissTable_ensure_capacity_required_sizei32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb40(%388 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %389 : !llvm.ptr):
      %390 = "mid.invariant"(%389) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %391 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb41] : () -> ()
    ^bb42:
      %392 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%392, %391) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb41:
      %393 = "llvm.getelementptr"(%389) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %394 = "mid.checkflag"(%393) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %395 = "llvm.load"(%394) : (!hi.bool) -> i1
      "cf.cond_br"(%395) [^bb42, ^bb42] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb43:
      %396 = "llvm.extractvalue"(%388) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %397 = "llvm.load"(%391) : (!llvm.ptr) -> i32
      %398 = "llvm.getelementptr"(%396, %397) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %399 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %400 = "llvm.getelementptr"(%398, %399) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%400) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_ensure_capacity_required_sizei32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb44(%401 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %402 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %403 : !llvm.ptr, %404 : !llvm.struct<(!llvm.ptr)>, %405 : !llvm.struct<(!llvm.ptr)>):
      %406 = "mid.wrap"(%401) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %407 = "hi.cast"(%406) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %408 = "mid.wrap"(%404) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %409 = "hi.cast"(%408) {"from_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %410 = "hi.cast"(%409) {"from_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      "mid.set_field"(%407, %410) {"offset" = 7 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> ()
      %411 = "mid.wrap"(%405) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %412 = "hi.cast"(%411) {"from_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %413 = "hi.cast"(%412) {"from_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      "mid.set_field"(%407, %413) {"offset" = 8 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> ()
      %414 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %415 = "hi.cast"(%414) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %416 = "mid.create_buffer"(%415) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = "self.elems_reg"} : (si64) -> !llvm.ptr
      %417 = "hi.cast"(%416) {"from_typ" = !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      "mid.set_field"(%407, %417) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>) -> ()
      %418 = "hi.cast"(%414) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %419 = "mid.create_buffer"(%418) {"typ" = i8, "region_id" = "self.metadata"} : (si64) -> !llvm.ptr
      %420 = "hi.cast"(%419) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<si8>
      "mid.set_field"(%407, %420) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, !hi.buffer<si8>) -> ()
      %421 = "hi.cast"(%414) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%407, %421) {"offset" = 5 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
      %422 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %423 = "hi.cast"(%422) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%407, %423) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
    }) {"func_name" = "SwissTable_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb45(%424 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %425 : !llvm.ptr):
      %426 = "mid.invariant"(%425) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %427 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb46] : () -> ()
    ^bb47:
      %428 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%428, %427) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb48] : () -> ()
    ^bb49:
      %429 = "llvm.getelementptr"(%425) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %430 = "mid.checkflag"(%429) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %431 = "llvm.load"(%430) : (!hi.bool) -> i1
      "cf.cond_br"(%431) [^bb47, ^bb47] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb46:
      %432 = "llvm.getelementptr"(%425) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %433 = "mid.checkflag"(%432) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %434 = "llvm.load"(%433) : (!hi.bool) -> i1
      "cf.cond_br"(%434) [^bb49, ^bb49] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb48:
      %435 = "llvm.extractvalue"(%424) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %436 = "llvm.load"(%427) : (!llvm.ptr) -> i32
      %437 = "llvm.getelementptr"(%435, %436) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %438 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %439 = "llvm.getelementptr"(%437, %438) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%439) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb50(%440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %441 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %442 : !llvm.ptr, %443 : !llvm.struct<(!llvm.ptr, i160)>):
      %444 = "mid.wrap"(%440) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %445 = "hi.cast"(%444) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %446 = "mid.wrap"(%443) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %447 = "hi.cast"(%446) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %448 = "hi.cast"(%447) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %449 = "mid.unwrap"(%448) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %450 = "mid.get_field"(%445) {"offset" = 7 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %451 = "mid.unwrap"(%450) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.ptr
      %452 = "mid.fptr_call"(%451, %449) {"ret_type" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> si32
      %453 = "hi.cast"(%447) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %454 = "mid.unwrap"(%453) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %455 = "hi.cast"(%452) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %456 = "mid.unwrap"(%455) : (si32) -> i32
      %457 = "mid.unwrap"(%445) : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %458 = "mid.get_type_field"(%445) {"offset" = 0 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %459 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %460 = "mid.parameterizations_array"(%458, %459) : (!hi.reified_type, !llvm.ptr) -> !llvm.ptr
      %461 = "mid.method_call"(%460, %457, %454, %456) {"offset" = 10 : i32, "vptrs" = ["any_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, i32) -> si32
      %462 = "hi.cast"(%461) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %463 = "mid.get_field"(%445) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
      %464 = "hi.cast"(%462) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %465 = "mid.buffer_get"(%463, %464) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
      %466 = "mid.call"() {"func_name" = "empty_slot", "ret_type" = i8} : () -> si8
      %467 = "hi.comparison"(%465, %466) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
      %468 = "hi.logical"(%467) ({
        %469 = "mid.call"() {"func_name" = "tombstone_slot", "ret_type" = i8} : () -> si8
        %470 = "hi.comparison"(%465, %469) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
        func.return %470 : si1
      }) {"op" = "or"} : (si1) -> si1
      %471 = "mid.unwrap"(%468) : (si1) -> i1
      "mid.if"(%471) ({
        %472 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %473 = "hi.cast"(%472) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        "mid.return"(%473) : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %474 = "mid.get_field"(%445) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      %475 = "hi.cast"(%462) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %476 = "mid.buffer_get"(%474, %475) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, si64) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
      %477 = "mid.checkflag"(%476) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> si1
      %478 = "mid.unwrap"(%477) : (si1) -> i1
      "mid.if"(%478) ({
        %479 = "hi.cast"(%476) {"from_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
        %480 = "mid.unwrap"(%479) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %481 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %482 = "mid.method_call"(%481, %480) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"V", !hi.any, "Entry">
        %483 = "hi.cast"(%482) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "SwissTable">
        %484 = "hi.cast"(%483) {"from_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        "mid.return"(%484) : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %485 = "hi.cast"(%476) {"from_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> !hi.nil
      %486 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %487 = "hi.cast"(%486) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
      "mid.return"(%487) : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> ()
    }) {"func_name" = "SwissTable_get_keyK", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb51(%488 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %489 : !llvm.ptr):
      %490 = "mid.invariant"(%489) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %491 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb52] : () -> ()
    ^bb53:
      %492 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%492, %491) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb54] : () -> ()
    ^bb52:
      %493 = "llvm.getelementptr"(%489) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %494 = "mid.checkflag"(%493) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %495 = "llvm.load"(%494) : (!hi.bool) -> i1
      "cf.cond_br"(%495) [^bb53, ^bb53] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb54:
      %496 = "llvm.extractvalue"(%488) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %497 = "llvm.load"(%491) : (!llvm.ptr) -> i32
      %498 = "llvm.getelementptr"(%496, %497) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %499 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %500 = "llvm.getelementptr"(%498, %499) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%500) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_get_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb55(%501 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %502 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %503 : !llvm.ptr, %504 : !llvm.struct<(!llvm.ptr, i160)>, %505 : !llvm.struct<(!llvm.ptr, i160)>):
      %506 = "mid.wrap"(%501) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %507 = "hi.cast"(%506) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %508 = "mid.wrap"(%504) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %509 = "hi.cast"(%508) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %510 = "mid.wrap"(%505) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"V", !hi.any, "SwissTable">
      %511 = "hi.cast"(%510) {"from_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !hi.type_param<"V", !hi.any, "SwissTable">
      %512 = "mid.get_field"(%507) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
      %513 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %514 = "hi.arithmetic"(%512, %513) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %515 = "hi.cast"(%514) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %516 = "mid.unwrap"(%515) : (si32) -> i32
      %517 = "mid.unwrap"(%507) : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %518 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %519 = "mid.parameterizations_array"(%518) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%519, %517, %516) {"offset" = 12 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %520 = "hi.cast"(%509) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %521 = "mid.unwrap"(%520) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %522 = "mid.get_field"(%507) {"offset" = 7 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %523 = "mid.unwrap"(%522) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.ptr
      %524 = "mid.fptr_call"(%523, %521) {"ret_type" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> si32
      %525 = "hi.cast"(%509) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %526 = "mid.unwrap"(%525) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %527 = "hi.cast"(%524) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %528 = "mid.unwrap"(%527) : (si32) -> i32
      %529 = "mid.unwrap"(%507) : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %530 = "mid.get_type_field"(%507) {"offset" = 0 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %531 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %532 = "mid.parameterizations_array"(%530, %531) : (!hi.reified_type, !llvm.ptr) -> !llvm.ptr
      %533 = "mid.method_call"(%532, %529, %526, %528) {"offset" = 10 : i32, "vptrs" = ["any_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, i32) -> si32
      %534 = "hi.cast"(%533) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %535 = "mid.get_field"(%507) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
      %536 = "hi.cast"(%534) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %537 = "mid.buffer_get"(%535, %536) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
      %538 = "mid.unwrap"(%509) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %539 = "mid.unwrap"(%511) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %540 = "mid.unwrap"(%524) : (si32) -> i32
      %541 = "mid.get_type_field"(%507) {"offset" = 0 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %542 = "mid.get_type_field"(%507) {"offset" = 1 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %543 = "mid.new"(%541, %542) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, i32, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Entry", "num_data_fields" = 3 : i32, "region_id" = "single_region_bfscalqbdn", "has_type_fields"} : (!hi.reified_type, !hi.reified_type) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %544 = "hi.cast"(%509) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "Entry">
      %545 = "mid.unwrap"(%544) : (!hi.type_param<"K", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
      %546 = "hi.cast"(%511) {"from_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"V", !hi.any, "Entry">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !hi.type_param<"V", !hi.any, "Entry">
      %547 = "mid.unwrap"(%546) : (!hi.type_param<"V", !hi.any, "Entry">) -> !llvm.struct<(!llvm.ptr, i160)>
      %548 = "hi.cast"(%524) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %549 = "mid.unwrap"(%548) : (si32) -> i32
      %550 = "mid.unwrap"(%543) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %551 = "mid.get_type_field"(%507) {"offset" = 0 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %552 = "mid.get_type_field"(%507) {"offset" = 1 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %553 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %554 = "mid.parameterizations_array"(%551, %552, %553) : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%554, %550, %545, %547, %549) {"offset" = 8 : i32, "vptrs" = ["any_typ", "any_typ", "i32_typ"], "vtable_size" = 15 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, i32) -> ()
      %555 = "mid.refer"(%543) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %556 = "mid.call"() {"func_name" = "empty_slot", "ret_type" = i8} : () -> si8
      %557 = "hi.comparison"(%537, %556) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
      %558 = "mid.unwrap"(%557) : (si1) -> i1
      "mid.if"(%558) ({
        %559 = "mid.call"() {"func_name" = "active_slot", "ret_type" = i8} : () -> si8
        %560 = "mid.get_field"(%507) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
        %561 = "hi.cast"(%559) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
        %562 = "hi.cast"(%534) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%560, %562, %561) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
        %563 = "mid.get_field"(%507) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
        %564 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %565 = "hi.arithmetic"(%563, %564) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %566 = "hi.cast"(%565) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.set_field"(%507, %566) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
      }) : (i1) -> ()
      %567 = "mid.get_field"(%507) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      %568 = "hi.cast"(%555) {"from_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "from_typ_name" = "Entry", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
      %569 = "hi.cast"(%534) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%567, %569, %568) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, si64, !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> ()
    }) {"func_name" = "SwissTable_insert_keyK_valueV", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb56(%570 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %571 : !llvm.ptr):
      %572 = "mid.invariant"(%571) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %573 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb57] : () -> ()
    ^bb58:
      %574 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%574, %573) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb59] : () -> ()
    ^bb60:
      %575 = "llvm.getelementptr"(%571) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %576 = "mid.checkflag"(%575) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %577 = "llvm.load"(%576) : (!hi.bool) -> i1
      "cf.cond_br"(%577) [^bb58, ^bb58] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb57:
      %578 = "llvm.getelementptr"(%571) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %579 = "mid.checkflag"(%578) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %580 = "llvm.load"(%579) : (!hi.bool) -> i1
      "cf.cond_br"(%580) [^bb60, ^bb60] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb59:
      %581 = "llvm.extractvalue"(%570) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %582 = "llvm.load"(%573) : (!llvm.ptr) -> i32
      %583 = "llvm.getelementptr"(%581, %582) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %584 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %585 = "llvm.getelementptr"(%583, %584) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%585) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_insert_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb61(%586 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %587 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %588 : !llvm.ptr, %589 : !llvm.struct<(!llvm.ptr, i160)>):
      %590 = "mid.wrap"(%586) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %591 = "hi.cast"(%590) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %592 = "mid.wrap"(%589) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %593 = "hi.cast"(%592) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %594 = "hi.cast"(%593) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %595 = "mid.unwrap"(%594) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %596 = "mid.get_field"(%591) {"offset" = 7 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %597 = "mid.unwrap"(%596) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.ptr
      %598 = "mid.fptr_call"(%597, %595) {"ret_type" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> si32
      %599 = "hi.cast"(%593) {"from_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !hi.type_param<"K", !hi.any, "SwissTable">
      %600 = "mid.unwrap"(%599) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %601 = "hi.cast"(%598) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %602 = "mid.unwrap"(%601) : (si32) -> i32
      %603 = "mid.unwrap"(%591) : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %604 = "mid.get_type_field"(%591) {"offset" = 0 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %605 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %606 = "mid.parameterizations_array"(%604, %605) : (!hi.reified_type, !llvm.ptr) -> !llvm.ptr
      %607 = "mid.method_call"(%606, %603, %600, %602) {"offset" = 10 : i32, "vptrs" = ["any_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, i32) -> si32
      %608 = "hi.cast"(%607) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %609 = "mid.get_field"(%591) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
      %610 = "hi.cast"(%608) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %611 = "mid.buffer_get"(%609, %610) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
      %612 = "mid.call"() {"func_name" = "empty_slot", "ret_type" = i8} : () -> si8
      %613 = "hi.comparison"(%611, %612) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
      %614 = "hi.logical"(%613) ({
        %615 = "mid.call"() {"func_name" = "tombstone_slot", "ret_type" = i8} : () -> si8
        %616 = "hi.comparison"(%611, %615) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
        func.return %616 : si1
      }) {"op" = "or"} : (si1) -> si1
      %617 = "mid.unwrap"(%614) : (si1) -> i1
      "mid.if"(%617) ({
        %618 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %619 = "hi.cast"(%618) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        "mid.return"(%619) : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %620 = "mid.get_field"(%591) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      %621 = "hi.cast"(%608) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %622 = "mid.buffer_get"(%620, %621) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, si64) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
      %623 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %624 = "mid.checkflag"(%622) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> si1
      %625 = "hi.comparison"(%623, %624) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, si1) -> si1
      %626 = "mid.unwrap"(%625) : (si1) -> i1
      "mid.if"(%626) ({
        %627 = "hi.cast"(%622) {"from_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> !hi.nil
        %628 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %629 = "hi.cast"(%628) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        "mid.return"(%629) : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %630 = "hi.cast"(%622) {"from_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %631 = "mid.unwrap"(%630) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %632 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %633 = "mid.method_call"(%632, %631) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"V", !hi.any, "Entry">
      %634 = "hi.cast"(%633) {"from_typ" = !hi.type_param<"V", !hi.any, "Entry">, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "Entry">) -> !hi.type_param<"V", !hi.any, "SwissTable">
      %635 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %636 = "mid.get_type_field"(%591) {"offset" = 1 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %637 = "mid.checkflag"(%634, %636) {"typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "SwissTable">, !hi.reified_type) -> si1
      %638 = "hi.comparison"(%635, %637) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, si1) -> si1
      %639 = "mid.unwrap"(%638) : (si1) -> i1
      "mid.if"(%639) ({
        %640 = "hi.cast"(%634) {"from_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !hi.type_param<"V", !hi.any, "SwissTable">
        %641 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %642 = "hi.cast"(%641) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        "mid.return"(%642) : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %643 = "mid.call"() {"func_name" = "tombstone_slot", "ret_type" = i8} : () -> si8
      %644 = "mid.get_field"(%591) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
      %645 = "hi.cast"(%643) {"from_typ" = si8, "to_typ" = si8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (si8) -> si8
      %646 = "hi.cast"(%608) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%644, %646, %645) {"typ" = i8} : (!hi.buffer<si8>, si64, si8) -> ()
      %647 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %648 = "mid.get_field"(%591) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      %649 = "hi.cast"(%647) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>
      %650 = "hi.cast"(%608) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%648, %650, %649) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, si64, !hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>) -> ()
      %651 = "mid.get_field"(%591) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
      %652 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %653 = "hi.arithmetic"(%651, %652) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %654 = "hi.cast"(%653) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%591, %654) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
      %655 = "hi.cast"(%634) {"from_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "to_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
      "mid.return"(%655) : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> ()
    }) {"func_name" = "SwissTable_remove_keyK", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb62(%656 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %657 : !llvm.ptr):
      %658 = "mid.invariant"(%657) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %659 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb63] : () -> ()
    ^bb64:
      %660 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%660, %659) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb65] : () -> ()
    ^bb63:
      %661 = "llvm.getelementptr"(%657) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %662 = "mid.checkflag"(%661) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %663 = "llvm.load"(%662) : (!hi.bool) -> i1
      "cf.cond_br"(%663) [^bb64, ^bb64] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb65:
      %664 = "llvm.extractvalue"(%656) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %665 = "llvm.load"(%659) : (!llvm.ptr) -> i32
      %666 = "llvm.getelementptr"(%664, %665) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %667 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %668 = "llvm.getelementptr"(%666, %667) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%668) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_remove_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Map_keys_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb66(%669 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %670 : !llvm.ptr):
      %671 = "mid.invariant"(%670) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %672 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb67] : () -> ()
    ^bb67:
      %673 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%673, %672) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb68] : () -> ()
    ^bb68:
      %674 = "llvm.extractvalue"(%669) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %675 = "llvm.load"(%672) : (!llvm.ptr) -> i32
      %676 = "llvm.getelementptr"(%674, %675) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %677 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %678 = "llvm.getelementptr"(%676, %677) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%678) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_keys_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb69(%679 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %680 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %681 : !llvm.ptr):
      %682 = "mid.wrap"(%679) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %683 = "hi.cast"(%682) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %684 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %685 = "hi.cast"(%684) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %686 = "mid.create_buffer"(%685) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = "single_region_znndqbzgyh"} : (si64) -> !llvm.ptr
      %687 = "hi.cast"(%686) {"from_typ" = !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      "mid.set_field"(%683, %687) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>) -> ()
      %688 = "hi.cast"(%684) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %689 = "mid.create_buffer"(%688) {"typ" = i8, "region_id" = "single_region_znndqbzgyh"} : (si64) -> !llvm.ptr
      %690 = "hi.cast"(%689) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<si8>
      "mid.set_field"(%683, %690) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, !hi.buffer<si8>) -> ()
      %691 = "hi.cast"(%684) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%683, %691) {"offset" = 5 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
      %692 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %693 = "hi.cast"(%692) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%683, %693) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, si32) -> ()
    }) {"func_name" = "SwissTable_clear_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb70(%694 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %695 : !llvm.ptr):
      %696 = "mid.invariant"(%695) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %697 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb71] : () -> ()
    ^bb71:
      %698 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%698, %697) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb72] : () -> ()
    ^bb72:
      %699 = "llvm.extractvalue"(%694) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %700 = "llvm.load"(%697) : (!llvm.ptr) -> i32
      %701 = "llvm.getelementptr"(%699, %700) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %702 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %703 = "llvm.getelementptr"(%701, %702) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%703) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_clear_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Map_indices_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb73(%704 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %705 : !llvm.ptr):
      %706 = "mid.invariant"(%705) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %707 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb74] : () -> ()
    ^bb74:
      %708 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%708, %707) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb75] : () -> ()
    ^bb75:
      %709 = "llvm.extractvalue"(%704) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %710 = "llvm.load"(%707) : (!llvm.ptr) -> i32
      %711 = "llvm.getelementptr"(%709, %710) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %712 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %713 = "llvm.getelementptr"(%711, %712) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%713) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_indices_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Map_values_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb76(%714 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %715 : !llvm.ptr):
      %716 = "mid.invariant"(%715) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %717 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb77:
      %718 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%718, %717) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb78] : () -> ()
    ^bb78:
      %719 = "llvm.extractvalue"(%714) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %720 = "llvm.load"(%717) : (!llvm.ptr) -> i32
      %721 = "llvm.getelementptr"(%719, %720) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %722 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %723 = "llvm.getelementptr"(%721, %722) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%723) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_values_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Map__index_keyK", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb79(%724 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %725 : !llvm.ptr):
      %726 = "mid.invariant"(%725) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %727 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb80] : () -> ()
    ^bb81:
      %728 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%728, %727) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb82] : () -> ()
    ^bb80:
      %729 = "llvm.getelementptr"(%725) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %730 = "mid.checkflag"(%729) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %731 = "llvm.load"(%730) : (!hi.bool) -> i1
      "cf.cond_br"(%731) [^bb81, ^bb81] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb82:
      %732 = "llvm.extractvalue"(%724) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %733 = "llvm.load"(%727) : (!llvm.ptr) -> i32
      %734 = "llvm.getelementptr"(%732, %733) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %735 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %736 = "llvm.getelementptr"(%734, %735) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%736) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B__index_keyK", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Map__set_index_keyK_valueV", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb83(%737 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %738 : !llvm.ptr):
      %739 = "mid.invariant"(%738) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %740 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb84] : () -> ()
    ^bb85:
      %741 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%741, %740) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb87:
      %742 = "llvm.getelementptr"(%738) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %743 = "mid.checkflag"(%742) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %744 = "llvm.load"(%743) : (!hi.bool) -> i1
      "cf.cond_br"(%744) [^bb85, ^bb85] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb84:
      %745 = "llvm.getelementptr"(%738) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %746 = "mid.checkflag"(%745) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %747 = "llvm.load"(%746) : (!hi.bool) -> i1
      "cf.cond_br"(%747) [^bb87, ^bb87] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb86:
      %748 = "llvm.extractvalue"(%737) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %749 = "llvm.load"(%740) : (!llvm.ptr) -> i32
      %750 = "llvm.getelementptr"(%748, %749) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %751 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %752 = "llvm.getelementptr"(%750, %751) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%752) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B__set_index_keyK_valueV", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb88(%753 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %754 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %755 : !llvm.ptr):
      %756 = "mid.wrap"(%753) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %757 = "hi.cast"(%756) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %758 = "mid.get_field"(%757) {"offset" = 6 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
      %759 = "hi.cast"(%758) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%759) : (si32) -> ()
    }) {"func_name" = "SwissTable_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb89(%760 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %761 : !llvm.ptr):
      %762 = "mid.invariant"(%761) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %763 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb90] : () -> ()
    ^bb90:
      %764 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%764, %763) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb91] : () -> ()
    ^bb91:
      %765 = "llvm.extractvalue"(%760) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %766 = "llvm.load"(%763) : (!llvm.ptr) -> i32
      %767 = "llvm.getelementptr"(%765, %766) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %768 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %769 = "llvm.getelementptr"(%767, %768) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%769) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_is_empty_", "function_type" = !llvm.func<i1 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb92(%770 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %771 : !llvm.ptr):
      %772 = "mid.invariant"(%771) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %773 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb93] : () -> ()
    ^bb93:
      %774 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%774, %773) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb94] : () -> ()
    ^bb94:
      %775 = "llvm.extractvalue"(%770) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %776 = "llvm.load"(%773) : (!llvm.ptr) -> i32
      %777 = "llvm.getelementptr"(%775, %776) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %778 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %779 = "llvm.getelementptr"(%777, %778) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%779) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb95(%780 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %781 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %782 : !llvm.ptr):
      %783 = "mid.wrap"(%780) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %784 = "hi.cast"(%783) {"from_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "from_typ_name" = "SwissTable", "to_typ_name" = "SwissTable"} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %785 = "mid.get_field"(%784) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      %786 = "mid.get_field"(%784) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
      %787 = "mid.get_field"(%784) {"offset" = 5 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
      %788 = "mid.unwrap"(%785) : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>) -> !llvm.struct<(!llvm.ptr)>
      %789 = "mid.unwrap"(%786) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %790 = "mid.unwrap"(%787) : (si32) -> i32
      %791 = "mid.get_type_field"(%784) {"offset" = 0 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %792 = "mid.get_type_field"(%784) {"offset" = 1 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %793 = "mid.get_type_field"(%784) {"offset" = 0 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %794 = "mid.get_type_field"(%784) {"offset" = 1 : i64, "vtable_bytes" = 9040 : i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.reified_type
      %795 = "mid.parameterization"(%793, %794) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairSwissTable.K_subtype_Any._SwissTable.V_subtype_Any", ["SwissTable.K_subtype_Any"], ["SwissTable.V_subtype_Any"]]} : (!hi.reified_type, !hi.reified_type) -> !llvm.ptr
      %796 = "mid.new"(%791, %792, %795) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "SwissTableIterator", "num_data_fields" = 4 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type, !hi.reified_type, !llvm.ptr) -> !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>
      %797 = "mid.get_field"(%784) {"offset" = 3 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>
      %798 = "mid.get_field"(%784) {"offset" = 4 : i64, "vtable_bytes" = 9040 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.buffer<si8>
      %799 = "mid.get_field"(%784) {"offset" = 5 : i64, "vtable_bytes" = 9040 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTable", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> si32
      %800 = "hi.cast"(%797) {"from_typ" = !hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.nil, !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>
      %801 = "mid.unwrap"(%800) : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr)>
      %802 = "hi.cast"(%798) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %803 = "mid.unwrap"(%802) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %804 = "hi.cast"(%799) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %805 = "mid.unwrap"(%804) : (si32) -> i32
      %806 = "mid.unwrap"(%796) : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %807 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferNil_or_EntrySwissTable.K_subtype_Any._SwissTable.V_subtype_Any"]} : () -> !llvm.ptr
      %808 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %809 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %810 = "mid.parameterizations_array"(%807, %808, %809) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%810, %806, %801, %803, %805) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "buffer_typ", "i32_typ"], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32) -> ()
      %811 = "hi.cast"(%796) {"from_typ" = !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "SwissTableIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"V", !hi.any, "SwissTable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%811) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "SwissTable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb96(%812 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %813 : !llvm.ptr):
      %814 = "mid.invariant"(%813) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %815 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb97] : () -> ()
    ^bb97:
      %816 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%816, %815) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb98] : () -> ()
    ^bb98:
      %817 = "llvm.extractvalue"(%812) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %818 = "llvm.load"(%815) : (!llvm.ptr) -> i32
      %819 = "llvm.getelementptr"(%817, %818) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %820 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %821 = "llvm.getelementptr"(%819, %820) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%821) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb99(%822 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %823 : !llvm.ptr):
      %824 = "mid.invariant"(%823) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %825 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb100] : () -> ()
    ^bb101:
      %826 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
      "llvm.store"(%826, %825) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb102] : () -> ()
    ^bb100:
      %827 = "llvm.getelementptr"(%823) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %828 = "mid.checkflag"(%827) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %829 = "llvm.load"(%828) : (!hi.bool) -> i1
      "cf.cond_br"(%829) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb102:
      %830 = "llvm.extractvalue"(%822) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %831 = "llvm.load"(%825) : (!llvm.ptr) -> i32
      %832 = "llvm.getelementptr"(%830, %831) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %833 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %834 = "llvm.getelementptr"(%832, %833) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%834) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb103(%835 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %836 : !llvm.ptr):
      %837 = "mid.invariant"(%836) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %838 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb104] : () -> ()
    ^bb105:
      %839 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
      "llvm.store"(%839, %838) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb106] : () -> ()
    ^bb107:
      %840 = "llvm.getelementptr"(%836) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %841 = "mid.checkflag"(%840) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %842 = "llvm.load"(%841) : (!hi.bool) -> i1
      "cf.cond_br"(%842) [^bb105, ^bb105] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb104:
      %843 = "llvm.getelementptr"(%836) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %844 = "mid.checkflag"(%843) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %845 = "llvm.load"(%844) : (!hi.bool) -> i1
      "cf.cond_br"(%845) [^bb107, ^bb107] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb106:
      %846 = "llvm.extractvalue"(%835) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %847 = "llvm.load"(%838) : (!llvm.ptr) -> i32
      %848 = "llvm.getelementptr"(%846, %847) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %849 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %850 = "llvm.getelementptr"(%848, %849) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%850) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb108(%851 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %852 : !llvm.ptr):
      %853 = "mid.invariant"(%852) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %854 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb109] : () -> ()
    ^bb110:
      %855 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
      "llvm.store"(%855, %854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb111] : () -> ()
    ^bb109:
      %856 = "llvm.getelementptr"(%852) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %857 = "mid.checkflag"(%856) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %858 = "llvm.load"(%857) : (!hi.bool) -> i1
      "cf.cond_br"(%858) [^bb110, ^bb110] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb111:
      %859 = "llvm.extractvalue"(%851) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %860 = "llvm.load"(%854) : (!llvm.ptr) -> i32
      %861 = "llvm.getelementptr"(%859, %860) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %862 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %863 = "llvm.getelementptr"(%861, %862) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%863) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb112(%864 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %865 : !llvm.ptr):
      %866 = "mid.invariant"(%865) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %867 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %868 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
      "llvm.store"(%868, %867) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb115] : () -> ()
    ^bb113:
      %869 = "llvm.getelementptr"(%865) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %870 = "mid.checkflag"(%869) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %871 = "llvm.load"(%870) : (!hi.bool) -> i1
      "cf.cond_br"(%871) [^bb114, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb115:
      %872 = "llvm.extractvalue"(%864) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %873 = "llvm.load"(%867) : (!llvm.ptr) -> i32
      %874 = "llvm.getelementptr"(%872, %873) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %875 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %876 = "llvm.getelementptr"(%874, %875) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%876) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb116(%877 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %878 : !llvm.ptr):
      %879 = "mid.invariant"(%878) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %880 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb117] : () -> ()
    ^bb117:
      %881 = "llvm.mlir.constant"() <{"value" = 58 : i32}> : () -> i32
      "llvm.store"(%881, %880) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb118] : () -> ()
    ^bb118:
      %882 = "llvm.extractvalue"(%877) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %883 = "llvm.load"(%880) : (!llvm.ptr) -> i32
      %884 = "llvm.getelementptr"(%882, %883) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %885 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %886 = "llvm.getelementptr"(%884, %885) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%886) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb119(%887 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %888 : !llvm.ptr):
      %889 = "mid.invariant"(%888) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %890 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb120] : () -> ()
    ^bb121:
      %891 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%891, %890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb122] : () -> ()
    ^bb123:
      %892 = "llvm.mlir.constant"() <{"value" = 60 : i32}> : () -> i32
      "llvm.store"(%892, %890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb122] : () -> ()
    ^bb120:
      %893 = "llvm.getelementptr"(%888) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %894 = "mid.checkflag"(%893) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %895 = "llvm.load"(%894) : (!hi.bool) -> i1
      "cf.cond_br"(%895) [^bb121, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb124:
      %896 = "llvm.getelementptr"(%888) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %897 = "mid.checkflag"(%896) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %898 = "llvm.load"(%897) : (!hi.bool) -> i1
      "cf.cond_br"(%898) [^bb123, ^bb123] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb122:
      %899 = "llvm.extractvalue"(%887) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %900 = "llvm.load"(%890) : (!llvm.ptr) -> i32
      %901 = "llvm.getelementptr"(%899, %900) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %902 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %903 = "llvm.getelementptr"(%901, %902) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%903) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb125(%904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %905 : !llvm.ptr):
      %906 = "mid.invariant"(%905) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %907 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb126] : () -> ()
    ^bb127:
      %908 = "llvm.mlir.constant"() <{"value" = 61 : i32}> : () -> i32
      "llvm.store"(%908, %907) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb128] : () -> ()
    ^bb126:
      %909 = "llvm.getelementptr"(%905) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %910 = "mid.checkflag"(%909) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %911 = "llvm.load"(%910) : (!hi.bool) -> i1
      "cf.cond_br"(%911) [^bb127, ^bb127] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb128:
      %912 = "llvm.extractvalue"(%904) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %913 = "llvm.load"(%907) : (!llvm.ptr) -> i32
      %914 = "llvm.getelementptr"(%912, %913) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %915 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %916 = "llvm.getelementptr"(%914, %915) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%916) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb129(%917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %918 : !llvm.ptr):
      %919 = "mid.invariant"(%918) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %920 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb130] : () -> ()
    ^bb131:
      %921 = "llvm.mlir.constant"() <{"value" = 63 : i32}> : () -> i32
      "llvm.store"(%921, %920) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb132] : () -> ()
    ^bb133:
      %922 = "llvm.mlir.constant"() <{"value" = 62 : i32}> : () -> i32
      "llvm.store"(%922, %920) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb132] : () -> ()
    ^bb130:
      %923 = "llvm.getelementptr"(%918) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %924 = "mid.checkflag"(%923) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %925 = "llvm.load"(%924) : (!hi.bool) -> i1
      "cf.cond_br"(%925) [^bb131, ^bb134] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb134:
      %926 = "llvm.getelementptr"(%918) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %927 = "mid.checkflag"(%926) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %928 = "llvm.load"(%927) : (!hi.bool) -> i1
      "cf.cond_br"(%928) [^bb135, ^bb133] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb135:
      %929 = "llvm.getelementptr"(%918) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %930 = "mid.checkflag"(%929) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %931 = "llvm.load"(%930) : (!hi.bool) -> i1
      "cf.cond_br"(%931) [^bb133, ^bb133] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb132:
      %932 = "llvm.extractvalue"(%917) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %933 = "llvm.load"(%920) : (!llvm.ptr) -> i32
      %934 = "llvm.getelementptr"(%932, %933) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %935 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %936 = "llvm.getelementptr"(%934, %935) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%936) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb136(%937 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %938 : !llvm.ptr):
      %939 = "mid.invariant"(%938) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %940 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb137] : () -> ()
    ^bb138:
      %941 = "llvm.mlir.constant"() <{"value" = 65 : i32}> : () -> i32
      "llvm.store"(%941, %940) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb139] : () -> ()
    ^bb140:
      %942 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%942, %940) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb139] : () -> ()
    ^bb137:
      %943 = "llvm.getelementptr"(%938) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %944 = "mid.checkflag"(%943) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %945 = "llvm.load"(%944) : (!hi.bool) -> i1
      "cf.cond_br"(%945) [^bb138, ^bb141] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb141:
      %946 = "llvm.getelementptr"(%938) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %947 = "mid.checkflag"(%946) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %948 = "llvm.load"(%947) : (!hi.bool) -> i1
      "cf.cond_br"(%948) [^bb142, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb142:
      %949 = "llvm.getelementptr"(%938) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %950 = "mid.checkflag"(%949) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %951 = "llvm.load"(%950) : (!hi.bool) -> i1
      "cf.cond_br"(%951) [^bb140, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %952 = "llvm.extractvalue"(%937) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %953 = "llvm.load"(%940) : (!llvm.ptr) -> i32
      %954 = "llvm.getelementptr"(%952, %953) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %955 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %956 = "llvm.getelementptr"(%954, %955) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%956) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb143(%957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %958 : !llvm.ptr):
      %959 = "mid.invariant"(%958) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %960 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb144] : () -> ()
    ^bb145:
      %961 = "llvm.mlir.constant"() <{"value" = 67 : i32}> : () -> i32
      "llvm.store"(%961, %960) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb146] : () -> ()
    ^bb147:
      %962 = "llvm.mlir.constant"() <{"value" = 66 : i32}> : () -> i32
      "llvm.store"(%962, %960) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb146] : () -> ()
    ^bb144:
      %963 = "llvm.getelementptr"(%958) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %964 = "mid.checkflag"(%963) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %965 = "llvm.load"(%964) : (!hi.bool) -> i1
      "cf.cond_br"(%965) [^bb145, ^bb148] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb148:
      %966 = "llvm.getelementptr"(%958) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %967 = "mid.checkflag"(%966) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %968 = "llvm.load"(%967) : (!hi.bool) -> i1
      "cf.cond_br"(%968) [^bb149, ^bb147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb149:
      %969 = "llvm.getelementptr"(%958) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %970 = "mid.checkflag"(%969) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %971 = "llvm.load"(%970) : (!hi.bool) -> i1
      "cf.cond_br"(%971) [^bb147, ^bb147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb146:
      %972 = "llvm.extractvalue"(%957) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %973 = "llvm.load"(%960) : (!llvm.ptr) -> i32
      %974 = "llvm.getelementptr"(%972, %973) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %975 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %976 = "llvm.getelementptr"(%974, %975) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%976) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb150(%977 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %978 : !llvm.ptr):
      %979 = "mid.invariant"(%978) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %980 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb151] : () -> ()
    ^bb152:
      %981 = "llvm.mlir.constant"() <{"value" = 68 : i32}> : () -> i32
      "llvm.store"(%981, %980) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb153] : () -> ()
    ^bb154:
      %982 = "llvm.mlir.constant"() <{"value" = 69 : i32}> : () -> i32
      "llvm.store"(%982, %980) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb153] : () -> ()
    ^bb151:
      %983 = "llvm.getelementptr"(%978) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %984 = "mid.checkflag"(%983) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %985 = "llvm.load"(%984) : (!hi.bool) -> i1
      "cf.cond_br"(%985) [^bb152, ^bb155] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb155:
      %986 = "llvm.getelementptr"(%978) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %987 = "mid.checkflag"(%986) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %988 = "llvm.load"(%987) : (!hi.bool) -> i1
      "cf.cond_br"(%988) [^bb156, ^bb154] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb156:
      %989 = "llvm.getelementptr"(%978) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %990 = "mid.checkflag"(%989) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %991 = "llvm.load"(%990) : (!hi.bool) -> i1
      "cf.cond_br"(%991) [^bb154, ^bb154] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb153:
      %992 = "llvm.extractvalue"(%977) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %993 = "llvm.load"(%980) : (!llvm.ptr) -> i32
      %994 = "llvm.getelementptr"(%992, %993) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<1130 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %995 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %996 = "llvm.getelementptr"(%994, %995) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%996) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTable_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_SwissTableIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "SwissTableIterator_field_SwissTableIterator_0"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "SwissTableIterator_field_SwissTableIterator_1"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "SwissTableIterator_field_SwissTableIterator_2"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTableIterator_getter_map_entries", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntrySwissTableIterator.K_subtype_Any._SwissTableIterator.V_subtype_Any_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTableIterator_setter_map_entries", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferEntrySwissTableIterator.K_subtype_Any._SwissTableIterator.V_subtype_Any_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTableIterator_field_map_entries", "getter_name" = "SwissTableIterator_getter_map_entries", "setter_name" = "SwissTableIterator_setter_map_entries"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTableIterator_getter_map_metadata", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTableIterator_setter_map_metadata", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTableIterator_field_map_metadata", "getter_name" = "SwissTableIterator_getter_map_metadata", "setter_name" = "SwissTableIterator_setter_map_metadata"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTableIterator_getter_index", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 5 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTableIterator_setter_index", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 5 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTableIterator_field_index", "getter_name" = "SwissTableIterator_getter_index", "setter_name" = "SwissTableIterator_setter_index"} : () -> ()
    "mid.getter_def"() {"meth_name" = "SwissTableIterator_getter_length", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 6 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "SwissTableIterator_setter_length", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 6 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "SwissTableIterator_field_length", "getter_name" = "SwissTableIterator_getter_length", "setter_name" = "SwissTableIterator_setter_length"} : () -> ()
    "mid.func"() ({
    ^bb157(%997 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %998 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %999 : !llvm.ptr, %1000 : !llvm.struct<(!llvm.ptr)>, %1001 : !llvm.struct<(!llvm.ptr)>, %1002 : i32):
      %1003 = "mid.wrap"(%997) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>
      %1004 = "hi.cast"(%1003) {"from_typ" = !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, "to_typ" = !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, "from_typ_name" = "SwissTableIterator", "to_typ_name" = "SwissTableIterator"} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>
      %1005 = "mid.wrap"(%1000) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>
      %1006 = "hi.cast"(%1005) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>
      %1007 = "hi.cast"(%1006) {"from_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>, "to_typ" = !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>
      "mid.set_field"(%1004, %1007) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>) -> ()
      %1008 = "mid.wrap"(%1001) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si8>
      %1009 = "hi.cast"(%1008) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1010 = "hi.cast"(%1009) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      "mid.set_field"(%1004, %1010) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.buffer<si8>) -> ()
      %1011 = "mid.wrap"(%1002) : (i32) -> si32
      %1012 = "hi.cast"(%1011) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1013 = "hi.cast"(%1012) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%1004, %1013) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, si32) -> ()
      %1014 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1015 = "hi.cast"(%1014) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%1004, %1015) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, si32) -> ()
      %1016 = "mid.get_field"(%1004) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> si32
      %1017 = "hi.cast"(%1016) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%1004, %1017) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, si32) -> ()
    }) {"func_name" = "SwissTableIterator_init_map_entriesBufferEntryK._V_or_Nil_map_metadataBufferi8_lengthi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb158(%1018 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1019 : !llvm.ptr):
      %1020 = "mid.invariant"(%1019) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1021 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb159] : () -> ()
    ^bb160:
      %1022 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%1022, %1021) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb161] : () -> ()
    ^bb162:
      %1023 = "llvm.getelementptr"(%1019) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1024 = "mid.checkflag"(%1023) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1025 = "llvm.load"(%1024) : (!hi.bool) -> i1
      "cf.cond_br"(%1025) [^bb160, ^bb160] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb163:
      %1026 = "llvm.getelementptr"(%1019) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1027 = "mid.checkflag"(%1026) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %1028 = "llvm.load"(%1027) : (!hi.bool) -> i1
      "cf.cond_br"(%1028) [^bb162, ^bb162] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb159:
      %1029 = "llvm.getelementptr"(%1019) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1030 = "mid.checkflag"(%1029) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %1031 = "llvm.load"(%1030) : (!hi.bool) -> i1
      "cf.cond_br"(%1031) [^bb163, ^bb163] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb161:
      %1032 = "llvm.extractvalue"(%1018) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1033 = "llvm.load"(%1021) : (!llvm.ptr) -> i32
      %1034 = "llvm.getelementptr"(%1032, %1033) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1035 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1036 = "llvm.getelementptr"(%1034, %1035) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1036) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTableIterator_B_init_map_entriesBufferEntryK._V_or_Nil_map_metadataBufferi8_lengthi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb164(%1037 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1038 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1039 : !llvm.ptr):
      %1040 = "mid.wrap"(%1037) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>
      %1041 = "hi.cast"(%1040) {"from_typ" = !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, "to_typ" = !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, "from_typ_name" = "SwissTableIterator", "to_typ_name" = "SwissTableIterator"} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> !hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>
      "mid.while"() ({
        %1042 = "mid.get_field"(%1041) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> si32
        %1043 = "mid.get_field"(%1041) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> si32
        %1044 = "hi.comparison"(%1042, %1043) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %1045 = "mid.unwrap"(%1044) : (si1) -> i1
      }, {
        %1046 = "mid.get_field"(%1041) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> si32
        %1047 = "mid.get_field"(%1041) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> !hi.buffer<si8>
        %1048 = "hi.cast"(%1046) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1049 = "mid.buffer_get"(%1047, %1048) {"typ" = i8} : (!hi.buffer<si8>, si64) -> si8
        %1050 = "mid.get_field"(%1041) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> si32
        %1051 = "mid.get_field"(%1041) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> !hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>
        %1052 = "hi.cast"(%1050) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1053 = "mid.buffer_get"(%1051, %1052) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>>, si64) -> !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>
        %1054 = "mid.get_field"(%1041) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> si32
        %1055 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %1056 = "hi.arithmetic"(%1054, %1055) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1057 = "hi.cast"(%1056) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.set_field"(%1041, %1057) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = i32} : (!hi.fatptr<"SwissTableIterator", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, si32) -> ()
        %1058 = "mid.call"() {"func_name" = "empty_slot", "ret_type" = i8} : () -> si8
        %1059 = "hi.comparison"(%1049, %1058) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
        %1060 = "hi.logical"(%1059) ({
          %1061 = "mid.call"() {"func_name" = "tombstone_slot", "ret_type" = i8} : () -> si8
          %1062 = "hi.comparison"(%1049, %1061) {"op" = "EQ", "lhs_type" = si8, "rhs_type" = si8} : (si8, si8) -> si1
          func.return %1062 : si1
        }) {"op" = "or"} : (si1) -> si1
        %1063 = "mid.unwrap"(%1060) : (si1) -> i1
        "mid.if"(%1063) ({
          "mid.continue"() [^bb165] : () -> ()
        }) : (i1) -> ()
        %1064 = "mid.checkflag"(%1053) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>) -> si1
        %1065 = "mid.unwrap"(%1064) : (si1) -> i1
        "mid.if"(%1065) ({
          %1066 = "hi.cast"(%1053) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>, "to_typ" = !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, "from_typ_name" = "union_typ", "to_typ_name" = "Entry"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>) -> !hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>
          %1067 = "mid.unwrap"(%1066) : (!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1068 = "mid.parameterizations_array"() : () -> !llvm.ptr
          %1069 = "mid.method_call"(%1068, %1067) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 15 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>
          %1070 = "hi.cast"(%1069) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "Entry">, !hi.type_param<"V", !hi.any, "Entry">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>
          %1071 = "hi.cast"(%1070) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
          "mid.return"(%1071) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1072 = "hi.cast"(%1053) {"from_typ" = !hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.fatptr<"Entry", [!hi.type_param<"K", !hi.any, "SwissTableIterator">, !hi.type_param<"V", !hi.any, "SwissTableIterator">]>, !hi.nil]>) -> !hi.nil
        "mid.remove_region"() {"reg_name" = "entry_or_nil"} : () -> ()
      }) : () -> ()
      %1073 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1074 = "hi.cast"(%1073) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      "mid.return"(%1074) : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> ()
    }) {"func_name" = "SwissTableIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb166(%1075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1076 : !llvm.ptr):
      %1077 = "mid.invariant"(%1076) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1078 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb167] : () -> ()
    ^bb167:
      %1079 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%1079, %1078) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb168] : () -> ()
    ^bb168:
      %1080 = "llvm.extractvalue"(%1075) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1081 = "llvm.load"(%1078) : (!llvm.ptr) -> i32
      %1082 = "llvm.getelementptr"(%1080, %1081) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1083 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1084 = "llvm.getelementptr"(%1082, %1083) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1084) : (!llvm.ptr) -> ()
    }) {"func_name" = "SwissTableIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "math"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.typedef"() {"class_name" = "Math", "methods" = [@Math_B__Self_sqrt_xf64, @Math_B__Self_abs_xf64__Self_abs_xi32, @Math_B__Self_max_af64_bf64__Self_max_ai32_bi32, @Math_B__Self_min_af64_bf64__Self_min_ai32_bi32, @Math_B__Self_round_xf64, @Math_B__Self_floor_xf64, @Math_B__Self_ceiling_xf64, @Math__Self_sqrt_xf64, @Math__Self_abs_xf64, @Math__Self_abs_xi32, @Math__Self_max_af64_bf64, @Math__Self_max_ai32_bi32, @Math__Self_min_af64_bf64, @Math__Self_min_ai32_bi32, @Math__Self_round_xf64, @Math__Self_floor_xf64, @Math__Self_ceiling_xf64], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Math], "offset_tbl" = [27 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8094150130346788308 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Math", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Math", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr, %1 : f64):
      %2 = "mid.wrap"(%1) : (f64) -> !hi.float
      %3 = "hi.cast"(%2) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %4 = "mid.unwrap"(%3) : (!hi.float) -> f64
      %5 = "mid.intrinsic"(%4) {"call_name" = "llvm.sqrt.f64", "num_args" = 1 : i32} : (f64) -> f64
      %6 = "mid.wrap"(%5) : (f64) -> !hi.float
      %7 = "hi.cast"(%6) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%7) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_sqrt_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%8 : !llvm.ptr):
      %9 = "mid.invariant"(%8) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %10 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %11 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%11, %10) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %12 = "llvm.getelementptr"(%8) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %13 = "mid.checkflag"(%12) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %14 = "llvm.load"(%13) : (!hi.bool) -> i1
      "cf.cond_br"(%14) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %15 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %16 = "llvm.load"(%10) : (!llvm.ptr) -> i32
      %17 = "llvm.getelementptr"(%15, %16) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %18 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %19 = "llvm.getelementptr"(%17, %18) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%19) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_sqrt_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%20 : !llvm.ptr, %21 : !llvm.struct<(!llvm.ptr, i64)>):
      %22 = "mid.wrap"(%21) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %23 = "hi.cast"(%22) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[si32, !hi.float]>) -> !hi.float
      %24 = "mid.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %25 = "hi.comparison"(%23, %24) {"op" = "GE", "lhs_type" = !hi.float, "rhs_type" = !hi.float} : (!hi.float, !hi.float) -> si1
      %26 = "mid.unwrap"(%25) : (si1) -> i1
      "mid.if"(%26) ({
        %27 = "hi.cast"(%23) {"from_typ" = !hi.float, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[si32, !hi.float]>
        "mid.return"(%27) : (!hi.union<[si32, !hi.float]>) -> ()
      }) : (i1) -> ()
      %28 = "mid.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %29 = "mid.literal"() {"value" = 1.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %30 = "hi.arithmetic"(%28, %29) {"op" = "SUB", "lhs_type" = !hi.float, "rhs_type" = !hi.float} : (!hi.float, !hi.float) -> !hi.float
      %31 = "hi.arithmetic"(%30, %23) {"op" = "MUL", "lhs_type" = !hi.float, "rhs_type" = !hi.float} : (!hi.float, !hi.float) -> !hi.float
      %32 = "hi.cast"(%31) {"from_typ" = !hi.float, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[si32, !hi.float]>
      "mid.return"(%32) : (!hi.union<[si32, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_abs_xf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%33 : !llvm.ptr, %34 : !llvm.struct<(!llvm.ptr, i64)>):
      %35 = "mid.wrap"(%34) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %36 = "hi.cast"(%35) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.float]>) -> si32
      %37 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %38 = "hi.comparison"(%36, %37) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %39 = "mid.unwrap"(%38) : (si1) -> i1
      "mid.if"(%39) ({
        %40 = "hi.cast"(%36) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.float]>
        "mid.return"(%40) : (!hi.union<[si32, !hi.float]>) -> ()
      }) : (i1) -> ()
      %41 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
      %42 = "hi.arithmetic"(%41, %36) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %43 = "hi.cast"(%42) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.float]>
      "mid.return"(%43) : (!hi.union<[si32, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_abs_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb7(%44 : !llvm.ptr):
      %45 = "mid.invariant"(%44) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %46 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %47 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%47, %46) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %48 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%48, %46) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb8:
      %49 = "llvm.getelementptr"(%44) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %50 = "mid.checkflag"(%49) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %51 = "llvm.load"(%50) : (!hi.bool) -> i1
      "cf.cond_br"(%51) [^bb9, ^bb12] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb12:
      %52 = "llvm.getelementptr"(%44) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %53 = "mid.checkflag"(%52) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %54 = "llvm.load"(%53) : (!hi.bool) -> i1
      "cf.cond_br"(%54) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %55 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %56 = "llvm.load"(%46) : (!llvm.ptr) -> i32
      %57 = "llvm.getelementptr"(%55, %56) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %58 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %59 = "llvm.getelementptr"(%57, %58) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%59) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_abs_xf64__Self_abs_xi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb13(%60 : !llvm.ptr, %61 : !llvm.struct<(!llvm.ptr, i64)>, %62 : !llvm.struct<(!llvm.ptr, i64)>):
      %63 = "mid.wrap"(%61) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %64 = "hi.cast"(%63) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[si32, !hi.float]>) -> !hi.float
      %65 = "mid.wrap"(%62) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %66 = "hi.cast"(%65) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[si32, !hi.float]>) -> !hi.float
      %67 = "hi.comparison"(%64, %66) {"op" = "GT", "lhs_type" = !hi.float, "rhs_type" = !hi.float} : (!hi.float, !hi.float) -> si1
      %68 = "mid.unwrap"(%67) : (si1) -> i1
      "mid.if"(%68) ({
        %69 = "hi.cast"(%64) {"from_typ" = !hi.float, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[si32, !hi.float]>
        "mid.return"(%69) : (!hi.union<[si32, !hi.float]>) -> ()
      }) : (i1) -> ()
      %70 = "hi.cast"(%66) {"from_typ" = !hi.float, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[si32, !hi.float]>
      "mid.return"(%70) : (!hi.union<[si32, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_max_af64_bf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb14(%71 : !llvm.ptr, %72 : !llvm.struct<(!llvm.ptr, i64)>, %73 : !llvm.struct<(!llvm.ptr, i64)>):
      %74 = "mid.wrap"(%72) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %75 = "hi.cast"(%74) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.float]>) -> si32
      %76 = "mid.wrap"(%73) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %77 = "hi.cast"(%76) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.float]>) -> si32
      %78 = "hi.comparison"(%75, %77) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %79 = "mid.unwrap"(%78) : (si1) -> i1
      "mid.if"(%79) ({
        %80 = "hi.cast"(%75) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.float]>
        "mid.return"(%80) : (!hi.union<[si32, !hi.float]>) -> ()
      }) : (i1) -> ()
      %81 = "hi.cast"(%77) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.float]>
      "mid.return"(%81) : (!hi.union<[si32, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_max_ai32_bi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%82 : !llvm.ptr):
      %83 = "mid.invariant"(%82) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %84 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %85 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%85, %84) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb19:
      %86 = "llvm.getelementptr"(%82) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %87 = "mid.checkflag"(%86) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %88 = "llvm.load"(%87) : (!hi.bool) -> i1
      "cf.cond_br"(%88) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb20:
      %89 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%89, %84) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb21:
      %90 = "llvm.getelementptr"(%82) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %91 = "mid.checkflag"(%90) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %92 = "llvm.load"(%91) : (!hi.bool) -> i1
      "cf.cond_br"(%92) [^bb20, ^bb20] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %93 = "llvm.getelementptr"(%82) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %94 = "mid.checkflag"(%93) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %95 = "llvm.load"(%94) : (!hi.bool) -> i1
      "cf.cond_br"(%95) [^bb19, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %96 = "llvm.getelementptr"(%82) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %97 = "mid.checkflag"(%96) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %98 = "llvm.load"(%97) : (!hi.bool) -> i1
      "cf.cond_br"(%98) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %99 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %100 = "llvm.load"(%84) : (!llvm.ptr) -> i32
      %101 = "llvm.getelementptr"(%99, %100) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %102 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %103 = "llvm.getelementptr"(%101, %102) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%103) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_max_af64_bf64__Self_max_ai32_bi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb23(%104 : !llvm.ptr, %105 : !llvm.struct<(!llvm.ptr, i64)>, %106 : !llvm.struct<(!llvm.ptr, i64)>):
      %107 = "mid.wrap"(%105) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %108 = "hi.cast"(%107) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[si32, !hi.float]>) -> !hi.float
      %109 = "mid.wrap"(%106) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %110 = "hi.cast"(%109) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[si32, !hi.float]>) -> !hi.float
      %111 = "hi.comparison"(%108, %110) {"op" = "LT", "lhs_type" = !hi.float, "rhs_type" = !hi.float} : (!hi.float, !hi.float) -> si1
      %112 = "mid.unwrap"(%111) : (si1) -> i1
      "mid.if"(%112) ({
        %113 = "hi.cast"(%108) {"from_typ" = !hi.float, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[si32, !hi.float]>
        "mid.return"(%113) : (!hi.union<[si32, !hi.float]>) -> ()
      }) : (i1) -> ()
      %114 = "hi.cast"(%110) {"from_typ" = !hi.float, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[si32, !hi.float]>
      "mid.return"(%114) : (!hi.union<[si32, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_min_af64_bf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%115 : !llvm.ptr, %116 : !llvm.struct<(!llvm.ptr, i64)>, %117 : !llvm.struct<(!llvm.ptr, i64)>):
      %118 = "mid.wrap"(%116) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %119 = "hi.cast"(%118) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.float]>) -> si32
      %120 = "mid.wrap"(%117) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[si32, !hi.float]>
      %121 = "hi.cast"(%120) {"from_typ" = !hi.union<[si32, !hi.float]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.float]>) -> si32
      %122 = "hi.comparison"(%119, %121) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %123 = "mid.unwrap"(%122) : (si1) -> i1
      "mid.if"(%123) ({
        %124 = "hi.cast"(%119) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.float]>
        "mid.return"(%124) : (!hi.union<[si32, !hi.float]>) -> ()
      }) : (i1) -> ()
      %125 = "hi.cast"(%121) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.float]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.float]>
      "mid.return"(%125) : (!hi.union<[si32, !hi.float]>) -> ()
    }) {"func_name" = "Math__Self_min_ai32_bi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb25(%126 : !llvm.ptr):
      %127 = "mid.invariant"(%126) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %128 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb26] : () -> ()
    ^bb27:
      %129 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%129, %128) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb28] : () -> ()
    ^bb29:
      %130 = "llvm.getelementptr"(%126) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %131 = "mid.checkflag"(%130) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %132 = "llvm.load"(%131) : (!hi.bool) -> i1
      "cf.cond_br"(%132) [^bb27, ^bb27] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %133 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%133, %128) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb28] : () -> ()
    ^bb31:
      %134 = "llvm.getelementptr"(%126) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %135 = "mid.checkflag"(%134) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %136 = "llvm.load"(%135) : (!hi.bool) -> i1
      "cf.cond_br"(%136) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %137 = "llvm.getelementptr"(%126) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %138 = "mid.checkflag"(%137) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %139 = "llvm.load"(%138) : (!hi.bool) -> i1
      "cf.cond_br"(%139) [^bb29, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %140 = "llvm.getelementptr"(%126) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %141 = "mid.checkflag"(%140) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %142 = "llvm.load"(%141) : (!hi.bool) -> i1
      "cf.cond_br"(%142) [^bb31, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb28:
      %143 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %144 = "llvm.load"(%128) : (!llvm.ptr) -> i32
      %145 = "llvm.getelementptr"(%143, %144) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %146 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %147 = "llvm.getelementptr"(%145, %146) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%147) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_min_af64_bf64__Self_min_ai32_bi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb33(%148 : !llvm.ptr, %149 : f64):
      %150 = "mid.wrap"(%149) : (f64) -> !hi.float
      %151 = "hi.cast"(%150) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %152 = "mid.unwrap"(%151) : (!hi.float) -> f64
      %153 = "mid.intrinsic"(%152) {"call_name" = "llvm.round.f64", "num_args" = 1 : i32} : (f64) -> f64
      %154 = "mid.wrap"(%153) : (f64) -> !hi.float
      %155 = "hi.cast"(%154) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%155) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_round_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb34(%156 : !llvm.ptr):
      %157 = "mid.invariant"(%156) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %158 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb35] : () -> ()
    ^bb36:
      %159 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%159, %158) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb37] : () -> ()
    ^bb35:
      %160 = "llvm.getelementptr"(%156) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %161 = "mid.checkflag"(%160) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %162 = "llvm.load"(%161) : (!hi.bool) -> i1
      "cf.cond_br"(%162) [^bb36, ^bb36] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %163 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %164 = "llvm.load"(%158) : (!llvm.ptr) -> i32
      %165 = "llvm.getelementptr"(%163, %164) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %166 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %167 = "llvm.getelementptr"(%165, %166) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%167) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_round_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb38(%168 : !llvm.ptr, %169 : f64):
      %170 = "mid.wrap"(%169) : (f64) -> !hi.float
      %171 = "hi.cast"(%170) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %172 = "mid.unwrap"(%171) : (!hi.float) -> f64
      %173 = "mid.intrinsic"(%172) {"call_name" = "llvm.floor.f64", "num_args" = 1 : i32} : (f64) -> f64
      %174 = "mid.wrap"(%173) : (f64) -> !hi.float
      %175 = "hi.cast"(%174) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%175) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_floor_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb39(%176 : !llvm.ptr):
      %177 = "mid.invariant"(%176) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %178 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb40] : () -> ()
    ^bb41:
      %179 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%179, %178) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb40:
      %180 = "llvm.getelementptr"(%176) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %181 = "mid.checkflag"(%180) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %182 = "llvm.load"(%181) : (!hi.bool) -> i1
      "cf.cond_br"(%182) [^bb41, ^bb41] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb42:
      %183 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %184 = "llvm.load"(%178) : (!llvm.ptr) -> i32
      %185 = "llvm.getelementptr"(%183, %184) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %186 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %187 = "llvm.getelementptr"(%185, %186) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%187) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_floor_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb43(%188 : !llvm.ptr, %189 : f64):
      %190 = "mid.wrap"(%189) : (f64) -> !hi.float
      %191 = "hi.cast"(%190) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %192 = "mid.unwrap"(%191) : (!hi.float) -> f64
      %193 = "mid.intrinsic"(%192) {"call_name" = "llvm.ceil.f64", "num_args" = 1 : i32} : (f64) -> f64
      %194 = "mid.wrap"(%193) : (f64) -> !hi.float
      %195 = "hi.cast"(%194) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%195) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_ceiling_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb44(%196 : !llvm.ptr):
      %197 = "mid.invariant"(%196) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %198 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb45] : () -> ()
    ^bb46:
      %199 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%199, %198) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb45:
      %200 = "llvm.getelementptr"(%196) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %201 = "mid.checkflag"(%200) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %202 = "llvm.load"(%201) : (!hi.bool) -> i1
      "cf.cond_br"(%202) [^bb46, ^bb46] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb47:
      %203 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %204 = "llvm.load"(%198) : (!llvm.ptr) -> i32
      %205 = "llvm.getelementptr"(%203, %204) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %206 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %207 = "llvm.getelementptr"(%205, %206) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%207) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_ceiling_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "channel"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.typedef"() {"class_name" = "Blocking", "methods" = [@Blocking_B_init_, @Blocking_init_], "hash_tbl" = [@Object, @any_typ, @Blocking, 18446744073709551615 : i64], "offset_tbl" = [12 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 847773162914674935 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Blocking", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Channel", "methods" = [@Channel_field_Channel_0, @Channel_field_value, @Channel_B_init_, @Channel_B_get_, @Channel_B_put_new_valueT, @Channel_init_, @Channel_get_, @Channel_put_new_valueT], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Channel], "offset_tbl" = [18 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14778625957069801166 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Channel", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Blocking", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr):
      %3 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Blocking">
      %4 = "hi.cast"(%3) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.fatptr<"Blocking">, "from_typ_name" = "Blocking", "to_typ_name" = "Blocking"} : (!hi.fatptr<"Blocking">) -> !hi.fatptr<"Blocking">
    }) {"func_name" = "Blocking_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%5 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6 : !llvm.ptr):
      %7 = "mid.invariant"(%6) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %8 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %9 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%9, %8) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %10 = "llvm.extractvalue"(%5) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %11 = "llvm.load"(%8) : (!llvm.ptr) -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %13 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %14 = "llvm.getelementptr"(%12, %13) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%14) : (!llvm.ptr) -> ()
    }) {"func_name" = "Blocking_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Channel", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Channel_field_Channel_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Channel_getter_value", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Channel.T_subtype_Any_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Channel_setter_value", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Channel.T_subtype_Any_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Channel_field_value", "getter_name" = "Channel_getter_value", "setter_name" = "Channel_setter_value"} : () -> ()
    "mid.func"() ({
    ^bb4(%15 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %16 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %17 : !llvm.ptr):
      %18 = "mid.wrap"(%15) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %19 = "hi.cast"(%18) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %20 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %21 = "hi.cast"(%20) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
      "mid.set_field"(%19, %21) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> ()
    }) {"func_name" = "Channel_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%22 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %23 : !llvm.ptr):
      %24 = "mid.invariant"(%23) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %25 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %26 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%26, %25) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %27 = "llvm.extractvalue"(%22) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %28 = "llvm.load"(%25) : (!llvm.ptr) -> i32
      %29 = "llvm.getelementptr"(%27, %28) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %30 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %31 = "llvm.getelementptr"(%29, %30) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%31) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb8(%32 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %33 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %34 : !llvm.ptr):
      %35 = "mid.wrap"(%32) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %36 = "hi.cast"(%35) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      "mid.while"() ({
        %37 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %38 = "mid.unwrap"(%37) : (!hi.bool) -> i1
      }, {
        %39 = "mid.get_field"(%36) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
        %40 = "mid.refer"(%39) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
        %41 = "mid.get_type_field"(%36) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.reified_type
        %42 = "mid.checkflag"(%40) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> si1
        %43 = "mid.unwrap"(%42) : (si1) -> i1
        "mid.if"(%43) ({
          %44 = "hi.cast"(%40) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Channel">
          %45 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
          %46 = "hi.cast"(%45) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
          "mid.set_field"(%36, %46) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> ()
          %47 = "hi.cast"(%44) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.type_param<"T", !hi.any, "Channel">
          "mid.return"(%47) : (!hi.type_param<"T", !hi.any, "Channel">) -> ()
        }) : (i1) -> ()
        %48 = "hi.cast"(%40) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> !hi.nil
        %49 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "single_region_vkvxjqjfjv"} : () -> !hi.fatptr<"Blocking">
        %50 = "mid.unwrap"(%49) : (!hi.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %51 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%51, %50) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %52 = "hi.cast"(%49) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>, "from_typ_name" = "Blocking", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Blocking">) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %53 = "mid.unwrap"(%52) : (!hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %54 = "mid.coro_yield"(%53) {"cold" = false} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %55 = "mid.wrap"(%54) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
      }) : () -> ()
    }) {"func_name" = "Channel_get_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.fatptr<"Blocking">} : () -> ()
    "mid.func"() ({
    ^bb9(%56 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %57 : !llvm.ptr):
      %58 = "mid.invariant"(%57) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %59 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb10:
      %60 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%60, %59) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb11] : () -> ()
    ^bb11:
      %61 = "llvm.extractvalue"(%56) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %62 = "llvm.load"(%59) : (!llvm.ptr) -> i32
      %63 = "llvm.getelementptr"(%61, %62) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %64 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %65 = "llvm.getelementptr"(%63, %64) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%65) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_get_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb12(%66 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.ptr, %69 : !llvm.struct<(!llvm.ptr, i160)>):
      %70 = "mid.wrap"(%66) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %71 = "hi.cast"(%70) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %72 = "mid.wrap"(%69) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Channel">
      %73 = "hi.cast"(%72) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.type_param<"T", !hi.any, "Channel">
      %74 = "mid.get_field"(%71) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
      %75 = "mid.refer"(%74) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
      "mid.while"() ({
        %76 = "mid.get_type_field"(%71) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.reified_type
        %77 = "mid.checkflag"(%75) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> si1
        %78 = "mid.unwrap"(%77) : (si1) -> i1
      }, {
        %79 = "hi.cast"(%75) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Channel">
        %80 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "single_region_qzknhunodu"} : () -> !hi.fatptr<"Blocking">
        %81 = "mid.unwrap"(%80) : (!hi.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %82 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%82, %81) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %83 = "hi.cast"(%80) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>, "from_typ_name" = "Blocking", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Blocking">) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %84 = "mid.unwrap"(%83) : (!hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %85 = "mid.coro_yield"(%84) {"cold" = false} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %86 = "mid.wrap"(%85) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %87 = "mid.get_field"(%71) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
        %88 = "mid.refer"(%87) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
        %89 = "hi.cast"(%88) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
        "mid.assign"(%75, %89) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> ()
      }) : () -> ()
      %90 = "hi.cast"(%73) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>
      "mid.set_field"(%71, %90) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.type_param<"T", !hi.any, "Channel">, !hi.nil]>) -> ()
    }) {"func_name" = "Channel_put_new_valueT", "result_type" = !llvm.void, "yield_type" = !hi.fatptr<"Blocking">} : () -> ()
    "mid.func"() ({
    ^bb13(%91 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %92 : !llvm.ptr):
      %93 = "mid.invariant"(%92) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %94 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb14] : () -> ()
    ^bb15:
      %95 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%95, %94) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb16] : () -> ()
    ^bb14:
      %96 = "llvm.getelementptr"(%92) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %97 = "mid.checkflag"(%96) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %98 = "llvm.load"(%97) : (!hi.bool) -> i1
      "cf.cond_br"(%98) [^bb15, ^bb15] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %99 = "llvm.extractvalue"(%91) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %100 = "llvm.load"(%94) : (!llvm.ptr) -> i32
      %101 = "llvm.getelementptr"(%99, %100) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %102 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %103 = "llvm.getelementptr"(%101, %102) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%103) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_put_new_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "array"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.typedef"() {"class_name" = "Array", "methods" = [@Array_field_Array_0, @Array_field_buffer, @Array_field_length, @Array_field_capacity, @Array_field_Array_2, @Array_B_capacity_, @Array_B_init_, @Array_B_init_capacityi32, @Array_B_init_bufferBufferT_lengthi32_capacityi32, @Array_B_reserve_new_capacityi32, @Array_B_bounds_check_indexi32, @Array_B_unchecked_index_indexi32, @Array_B_unchecked_insert_indexi32_valueT, @Array_B__Self_empty_, @Array_B__Self_from_iterable_iterableIterableT, @Array_B_append_xT, @Array_B_length_, @Array_B_first_, @Array_B_last_, @Array_B_extend_otherCollectionT_extend_otherIterableT, @Array_B_get_indexi32, @Array_B_index_of_targetT_eqFunctionT._T_to_Bool, @Array_B_indices_, @Array_B_values_, @Array_B__index_indexi32, @Array_B__set_index_indexi32_valueT, @Array_B_size_, @Array_B_is_empty_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_B_repr_, @Array_capacity_, @Array_init_, @Array_init_capacityi32, @Array_init_bufferBufferT_lengthi32_capacityi32, @Array_reserve_new_capacityi32, @Array_bounds_check_indexi32, @Array_unchecked_index_indexi32, @Array_unchecked_insert_indexi32_valueT, @Array__Self_empty_, @Array__Self_from_iterable_iterableIterableT, @Array_append_xT, @List_length_, @List_first_, @List_last_, @Array_extend_otherCollectionT, @List_extend_otherIterableT, @List_get_indexi32, @List_index_of_targetT_eqFunctionT._T_to_Bool, @Array_indices_, @Array_values_, @Array__index_indexi32, @Array__set_index_indexi32_valueT, @Array_size_, @Collection_is_empty_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Array_repr_, @Array_field_Array_0, @Array_B__Self_empty_, @Array_B__Self_from_iterable_iterableIterableT, @Array_B_append_xT, @Array_B_length_, @Array_B_first_, @Array_B_last_, @Array_B_extend_otherCollectionT_extend_otherIterableT, @Array_B_get_indexi32, @Array_B_index_of_targetT_eqFunctionT._T_to_Bool, @Array_B_size_, @Array_B_is_empty_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array__Self_empty_, @Array__Self_from_iterable_iterableIterableT, @Array_append_xT, @List_length_, @List_first_, @List_last_, @List_extend_otherIterableT, @List_get_indexi32, @List_index_of_targetT_eqFunctionT._T_to_Bool, @Array_size_, @Collection_is_empty_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_size_, @Array_B_is_empty_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_size_, @Collection_is_empty_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_size_, @Array_B_is_empty_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_size_, @Collection_is_empty_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_field_Array_2, @Array_field_Array_0, @Array_field_Array_0, @Array_B_indices_, @Array_B_values_, @Array_B__index_indexi32, @Array_B__set_index_indexi32_valueT, @Array_B_size_, @Array_B_is_empty_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_indices_, @Array_values_, @Array__index_indexi32, @Array__set_index_indexi32_valueT, @Array_size_, @Collection_is_empty_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Array_field_Array_2, @Array_field_Array_0, @Array_B__index_indexi32, @Array_B__set_index_indexi32_valueT, @Array__index_indexi32, @Array__set_index_indexi32_valueT, @Array_field_Array_0, @Array_B_size_, @Array_B_is_empty_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_size_, @Collection_is_empty_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_field_Array_2, @Array_field_Array_0, @Array_B__index_indexi32, @Array_B__set_index_indexi32_valueT, @Array__index_indexi32, @Array__set_index_indexi32_valueT, @Array_field_Array_0, @Array_B_size_, @Array_B_is_empty_, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_size_, @Collection_is_empty_, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Iterable_interleave_otherIterableT, @Collection_interleave_otherCollectionT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT_chain_otherCollectionT, @Array_B_interleave_otherIterableT_interleave_otherCollectionT, @Array_B_zip_otherIterableU_zip_otherCollectionU, @Array_B_product_otherCollectionU_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_B_repr_, @Array_repr_], "hash_tbl" = [18446744073709551615 : i64, @Representable, @List, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Array, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @IndexableCollection, 18446744073709551615 : i64, @Collection, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Indexable, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [0 : i32, 537 : i32, 93 : i32, 0 : i32, 0 : i32, 0 : i32, 10 : i32, 0 : i32, 0 : i32, 288 : i32, 313 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 313 : i32, 0 : i32, 229 : i32, 10 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 447 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427389773 : i64, "hash_id" = 13185201323315417072 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_Array", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ArrayIterator", "methods" = [@ArrayIterator_field_ArrayIterator_0, @ArrayIterator_field_array, @ArrayIterator_field_index, @ArrayIterator_B_init_arrayArrayT, @ArrayIterator_B_next_, @ArrayIterator_init_arrayArrayT, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @ArrayIterator, @Iterator, @ConstantTimeIterator, 18446744073709551615 : i64], "offset_tbl" = [26 : i32, 10 : i32, 0 : i32, 0 : i32, 10 : i32, 23 : i32, 17 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 3447345754186651411 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_ArrayIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Array_field_Array_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferArray.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferArray.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_buffer", "getter_name" = "Array_getter_buffer", "setter_name" = "Array_setter_buffer"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_length", "getter_name" = "Array_getter_length", "setter_name" = "Array_setter_length"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_capacity", "getter_name" = "Array_getter_capacity", "setter_name" = "Array_setter_capacity"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 4 : i32, "meth_name" = "Array_field_Array_2", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr):
      %3 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %4 = "hi.cast"(%3) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %5 = "mid.get_field"(%4) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %6 = "hi.cast"(%5) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%6) : (si32) -> ()
    }) {"func_name" = "Array_capacity_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%7 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8 : !llvm.ptr):
      %9 = "mid.invariant"(%8) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %10 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %11 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%11, %10) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %12 = "llvm.extractvalue"(%7) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %13 = "llvm.load"(%10) : (!llvm.ptr) -> i32
      %14 = "llvm.getelementptr"(%12, %13) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %15 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %16 = "llvm.getelementptr"(%14, %15) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%16) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb4(%17 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %18 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %19 : !llvm.ptr):
      %20 = "mid.wrap"(%17) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %21 = "hi.cast"(%20) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %22 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %23 = "mid.get_type_field"(%21) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %24 = "hi.cast"(%22) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %25 = "mid.create_buffer"(%24, %23) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = "self.buffer"} : (si64, !hi.reified_type) -> !llvm.ptr
      %26 = "hi.cast"(%25) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%21, %26) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %27 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %28 = "hi.cast"(%27) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%21, %28) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
      %29 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %30 = "hi.cast"(%29) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%21, %30) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
    }) {"func_name" = "Array_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%31 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %32 : !llvm.ptr):
      %33 = "mid.invariant"(%32) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %34 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %35 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%35, %34) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %36 = "llvm.extractvalue"(%31) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %37 = "llvm.load"(%34) : (!llvm.ptr) -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %40 = "llvm.getelementptr"(%38, %39) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%40) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb8(%41 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %42 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %43 : !llvm.ptr, %44 : i32):
      %45 = "mid.wrap"(%41) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %46 = "hi.cast"(%45) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %47 = "mid.wrap"(%44) : (i32) -> si32
      %48 = "hi.cast"(%47) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %49 = "hi.cast"(%48) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%46, %49) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
      %50 = "mid.get_field"(%46) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %51 = "mid.get_type_field"(%46) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %52 = "hi.cast"(%50) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %53 = "mid.create_buffer"(%52, %51) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = "self.buffer"} : (si64, !hi.reified_type) -> !llvm.ptr
      %54 = "hi.cast"(%53) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%46, %54) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %55 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %56 = "hi.cast"(%55) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%46, %56) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
    }) {"func_name" = "Array_init_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb9(%57 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %58 : !llvm.ptr):
      %59 = "mid.invariant"(%58) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %60 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %61 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%61, %60) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb10:
      %62 = "llvm.getelementptr"(%58) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %63 = "mid.checkflag"(%62) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %64 = "llvm.load"(%63) : (!hi.bool) -> i1
      "cf.cond_br"(%64) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb12:
      %65 = "llvm.extractvalue"(%57) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %66 = "llvm.load"(%60) : (!llvm.ptr) -> i32
      %67 = "llvm.getelementptr"(%65, %66) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %68 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %69 = "llvm.getelementptr"(%67, %68) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%69) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb13(%70 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %71 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %72 : !llvm.ptr, %73 : !llvm.struct<(!llvm.ptr)>, %74 : i32, %75 : i32):
      %76 = "mid.wrap"(%70) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %77 = "hi.cast"(%76) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %78 = "mid.wrap"(%73) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %79 = "hi.cast"(%78) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %80 = "hi.cast"(%79) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%77, %80) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %81 = "mid.wrap"(%74) : (i32) -> si32
      %82 = "hi.cast"(%81) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %83 = "hi.cast"(%82) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%77, %83) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
      %84 = "mid.wrap"(%75) : (i32) -> si32
      %85 = "hi.cast"(%84) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %86 = "hi.cast"(%85) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%77, %86) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
    }) {"func_name" = "Array_init_bufferBufferT_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb14(%87 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %88 : !llvm.ptr):
      %89 = "mid.invariant"(%88) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %90 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb15] : () -> ()
    ^bb16:
      %91 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%91, %90) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb17] : () -> ()
    ^bb18:
      %92 = "llvm.getelementptr"(%88) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %93 = "mid.checkflag"(%92) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %94 = "llvm.load"(%93) : (!hi.bool) -> i1
      "cf.cond_br"(%94) [^bb16, ^bb16] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb19:
      %95 = "llvm.getelementptr"(%88) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %96 = "mid.checkflag"(%95) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %97 = "llvm.load"(%96) : (!hi.bool) -> i1
      "cf.cond_br"(%97) [^bb18, ^bb18] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb15:
      %98 = "llvm.getelementptr"(%88) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %99 = "mid.checkflag"(%98) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %100 = "llvm.load"(%99) : (!hi.bool) -> i1
      "cf.cond_br"(%100) [^bb19, ^bb19] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb17:
      %101 = "llvm.extractvalue"(%87) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %102 = "llvm.load"(%90) : (!llvm.ptr) -> i32
      %103 = "llvm.getelementptr"(%101, %102) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %104 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %105 = "llvm.getelementptr"(%103, %104) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%105) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_bufferBufferT_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb20(%106 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %108 : !llvm.ptr, %109 : i32):
      %110 = "mid.wrap"(%106) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %111 = "hi.cast"(%110) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %112 = "mid.wrap"(%109) : (i32) -> si32
      %113 = "hi.cast"(%112) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %114 = "mid.get_field"(%111) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %115 = "hi.comparison"(%113, %114) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %116 = "mid.unwrap"(%115) : (si1) -> i1
      "mid.if"(%116) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %117 = "hi.cast"(%113) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%111, %117) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
      %118 = "mid.get_field"(%111) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %119 = "mid.refer"(%118) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %120 = "mid.get_field"(%111) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %121 = "mid.get_type_field"(%111) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %122 = "hi.cast"(%120) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %123 = "mid.create_buffer"(%122, %121) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = "single_region_mndxnpxwtu"} : (si64, !hi.reified_type) -> !llvm.ptr
      %124 = "hi.cast"(%123) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%111, %124) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %125 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %126 = "mid.get_field"(%111) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
        %127 = "hi.comparison"(%125, %126) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %128 = "mid.unwrap"(%127) : (si1) -> i1
      }, {
        %129 = "mid.get_type_field"(%111) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
        %130 = "hi.cast"(%125) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %131 = "mid.buffer_get"(%119, %130, %129) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, si64, !hi.reified_type) -> !hi.type_param<"T", !hi.any, "Array">
        %132 = "mid.get_field"(%111) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
        %133 = "mid.get_type_field"(%111) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
        %134 = "hi.cast"(%131) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %135 = "hi.cast"(%125) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        "mid.buffer_set"(%132, %135, %134, %133) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, si64, !hi.type_param<"T", !hi.any, "Array">, !hi.reified_type) -> ()
        %136 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %137 = "hi.arithmetic"(%125, %136) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %138 = "hi.cast"(%137) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%125, %138) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
    }) {"func_name" = "Array_reserve_new_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb21(%139 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %140 : !llvm.ptr):
      %141 = "mid.invariant"(%140) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %142 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %143 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%143, %142) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb24] : () -> ()
    ^bb22:
      %144 = "llvm.getelementptr"(%140) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %145 = "mid.checkflag"(%144) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %146 = "llvm.load"(%145) : (!hi.bool) -> i1
      "cf.cond_br"(%146) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %147 = "llvm.extractvalue"(%139) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %148 = "llvm.load"(%142) : (!llvm.ptr) -> i32
      %149 = "llvm.getelementptr"(%147, %148) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %150 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %151 = "llvm.getelementptr"(%149, %150) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%151) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_reserve_new_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb25(%152 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %154 : !llvm.ptr, %155 : i32):
      %156 = "mid.wrap"(%152) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %157 = "hi.cast"(%156) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %158 = "mid.wrap"(%155) : (i32) -> si32
      %159 = "hi.cast"(%158) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %160 = "mid.get_field"(%157) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %161 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %162 = "hi.arithmetic"(%160, %161) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %163 = "hi.comparison"(%159, %162) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %164 = "mid.get_field"(%157) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %165 = "hi.arithmetic"(%164, %159) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %166 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %167 = "hi.comparison"(%165, %166) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %168 = "hi.logical"(%163) ({
        func.return %167 : si1
      }) {"op" = "or"} : (si1) -> si1
      %169 = "mid.unwrap"(%168) : (si1) -> i1
      "mid.if"(%169) ({
        %170 = "mid.get_field"(%157) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
        %171 = "mid.unwrap"(%170) : (si32) -> i32
        %172 = "mid.unwrap"(%159) : (si32) -> i32
        %173 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 5 : i32, "region_id" = "single_region_tzxdonopnb"} : () -> !hi.fatptr<"OutOfBounds">
        %174 = "mid.get_field"(%157) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
        %175 = "hi.cast"(%174) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %176 = "mid.unwrap"(%175) : (si32) -> i32
        %177 = "hi.cast"(%159) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %178 = "mid.unwrap"(%177) : (si32) -> i32
        %179 = "mid.unwrap"(%173) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %180 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %181 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %182 = "mid.parameterizations_array"(%180, %181) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%182, %179, %176, %178) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 31 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
        %183 = "mid.literal"() {"value" = 99 : i32, "typ" = i32} : () -> si32
        %184 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %185 = "hi.cast"(%184) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %186 = "mid.create_buffer"(%185) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %187 = "mid.refer"(%186) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %188 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/array.mini"} : () -> !llvm.ptr
        %189 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%187, %189, %188) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %190 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %191 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %192 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %193 = "mid.unwrap"(%187) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %194 = "mid.unwrap"(%190) : (si32) -> i32
        %195 = "mid.unwrap"(%191) : (si32) -> i32
        %196 = "mid.unwrap"(%192) : (si32) -> i32
        %197 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %198 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %199 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %200 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %201 = "hi.cast"(%187) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %202 = "mid.unwrap"(%201) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %203 = "hi.cast"(%198) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %204 = "mid.unwrap"(%203) : (si32) -> i32
        %205 = "hi.cast"(%199) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %206 = "mid.unwrap"(%205) : (si32) -> i32
        %207 = "hi.cast"(%200) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %208 = "mid.unwrap"(%207) : (si32) -> i32
        %209 = "mid.unwrap"(%197) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %210 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %211 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %212 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %213 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %214 = "mid.parameterizations_array"(%210, %211, %212, %213) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%214, %209, %202, %204, %206, %208) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %215 = "hi.cast"(%183) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %216 = "mid.unwrap"(%215) : (si32) -> i32
        %217 = "hi.cast"(%197) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %218 = "mid.unwrap"(%217) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %219 = "mid.unwrap"(%173) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %220 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %221 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %222 = "mid.parameterizations_array"(%220, %221) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%222, %219, %216, %218) {"offset" = 8 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 31 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %223 = "hi.cast"(%173) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBounds">) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
        %224 = "mid.unwrap"(%223) : (!hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %225 = "mid.coro_yield"(%224) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %226 = "mid.wrap"(%225) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
      }) : (i1) -> ()
    }) {"func_name" = "Array_bounds_check_indexi32", "result_type" = !llvm.void, "yield_type" = !hi.fatptr<"OutOfBounds">} : () -> ()
    "mid.func"() ({
    ^bb26(%227 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %228 : !llvm.ptr):
      %229 = "mid.invariant"(%228) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %230 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb27] : () -> ()
    ^bb28:
      %231 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%231, %230) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb29] : () -> ()
    ^bb27:
      %232 = "llvm.getelementptr"(%228) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %233 = "mid.checkflag"(%232) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %234 = "llvm.load"(%233) : (!hi.bool) -> i1
      "cf.cond_br"(%234) [^bb28, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb29:
      %235 = "llvm.extractvalue"(%227) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %236 = "llvm.load"(%230) : (!llvm.ptr) -> i32
      %237 = "llvm.getelementptr"(%235, %236) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %238 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %239 = "llvm.getelementptr"(%237, %238) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%239) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_bounds_check_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb30(%240 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %241 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %242 : !llvm.ptr, %243 : i32):
      %244 = "mid.wrap"(%240) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %245 = "hi.cast"(%244) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %246 = "mid.wrap"(%243) : (i32) -> si32
      %247 = "hi.cast"(%246) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %248 = "mid.get_field"(%245) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %249 = "mid.get_type_field"(%245) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %250 = "hi.cast"(%247) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %251 = "mid.buffer_get"(%248, %250, %249) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, si64, !hi.reified_type) -> !hi.type_param<"T", !hi.any, "Array">
      %252 = "hi.cast"(%251) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      "mid.return"(%252) : (!hi.type_param<"T", !hi.any, "Array">) -> ()
    }) {"func_name" = "Array_unchecked_index_indexi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb31(%253 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %254 : !llvm.ptr):
      %255 = "mid.invariant"(%254) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %256 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb32] : () -> ()
    ^bb33:
      %257 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%257, %256) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb34] : () -> ()
    ^bb32:
      %258 = "llvm.getelementptr"(%254) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %259 = "mid.checkflag"(%258) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %260 = "llvm.load"(%259) : (!hi.bool) -> i1
      "cf.cond_br"(%260) [^bb33, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb34:
      %261 = "llvm.extractvalue"(%253) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %262 = "llvm.load"(%256) : (!llvm.ptr) -> i32
      %263 = "llvm.getelementptr"(%261, %262) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %264 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %265 = "llvm.getelementptr"(%263, %264) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%265) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_unchecked_index_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb35(%266 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %267 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %268 : !llvm.ptr, %269 : i32, %270 : !llvm.struct<(!llvm.ptr, i160)>):
      %271 = "mid.wrap"(%266) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %272 = "hi.cast"(%271) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %273 = "mid.wrap"(%269) : (i32) -> si32
      %274 = "hi.cast"(%273) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %275 = "mid.wrap"(%270) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %276 = "hi.cast"(%275) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %277 = "mid.get_field"(%272) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %278 = "mid.get_type_field"(%272) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %279 = "hi.cast"(%276) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %280 = "hi.cast"(%274) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%277, %280, %279, %278) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, si64, !hi.type_param<"T", !hi.any, "Array">, !hi.reified_type) -> ()
    }) {"func_name" = "Array_unchecked_insert_indexi32_valueT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb36(%281 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %282 : !llvm.ptr):
      %283 = "mid.invariant"(%282) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %284 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb37] : () -> ()
    ^bb38:
      %285 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%285, %284) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb40:
      %286 = "llvm.getelementptr"(%282) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %287 = "mid.checkflag"(%286) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %288 = "llvm.load"(%287) : (!hi.bool) -> i1
      "cf.cond_br"(%288) [^bb38, ^bb38] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %289 = "llvm.getelementptr"(%282) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %290 = "mid.checkflag"(%289) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %291 = "llvm.load"(%290) : (!hi.bool) -> i1
      "cf.cond_br"(%291) [^bb40, ^bb40] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb39:
      %292 = "llvm.extractvalue"(%281) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %293 = "llvm.load"(%284) : (!llvm.ptr) -> i32
      %294 = "llvm.getelementptr"(%292, %293) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %295 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %296 = "llvm.getelementptr"(%294, %295) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%296) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_unchecked_insert_indexi32_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb41(%297 : !llvm.ptr):
      %298 = "llvm.getelementptr"(%297) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %299 = "llvm.load"(%298) : (!llvm.ptr) -> !llvm.ptr
      %300 = "mid.parameterization_indexation"(%299) {"indices" = []} : (!llvm.ptr) -> !llvm.ptr
      %301 = "mid.new"(%300) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %302 = "mid.unwrap"(%301) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %303 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%303, %302) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %304 = "hi.cast"(%301) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "List"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%304) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array__Self_empty_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb42(%305 : !llvm.ptr):
      %306 = "mid.invariant"(%305) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %307 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      %308 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%308, %307) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb44] : () -> ()
    ^bb44:
      %309 = "mid.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
      %310 = "llvm.load"(%307) : (!llvm.ptr) -> i32
      %311 = "llvm.getelementptr"(%309, %310) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %312 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %313 = "llvm.getelementptr"(%311, %312) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%313) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__Self_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb45(%314 : !llvm.ptr, %315 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %316 = "mid.wrap"(%315) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>
      %317 = "hi.cast"(%316) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>
      %318 = "hi.cast"(%317) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>
      %319 = "mid.unwrap"(%318) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %320 = "mid.wrap"(%315) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %321 = "mid.get_type_field"(%320) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!llvm.ptr) -> !hi.reified_type
      %322 = "mid.parameterizations_array"(%321) : (!hi.reified_type) -> !llvm.ptr
      %323 = "mid.class_method_call"(%322) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "class_name" = "Array"} : (!llvm.ptr) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>
      %324 = "hi.cast"(%323) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "List", "to_typ_name" = "Array"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %325 = "mid.unwrap"(%324) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %326 = "mid.wrap"(%315) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %327 = "mid.get_type_field"(%326) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!llvm.ptr) -> !hi.reified_type
      %328 = "mid.parameterization"(%327) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableArray.T_subtype_Any", ["Array.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %329 = "mid.parameterizations_array"(%328) : (!llvm.ptr) -> !llvm.ptr
      %330 = "mid.method_call"(%329, %325, %319) {"offset" = 19 : i32, "vptrs" = [#none], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>
      %331 = "hi.cast"(%330) {"from_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "List", "to_typ_name" = "Array"} : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %332 = "hi.cast"(%331) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "List"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%332) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array__Self_from_iterable_iterableIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb46(%333 : !llvm.ptr):
      %334 = "mid.invariant"(%333) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %335 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb47] : () -> ()
    ^bb48:
      %336 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%336, %335) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb49] : () -> ()
    ^bb47:
      %337 = "llvm.getelementptr"(%333) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %338 = "mid.checkflag"(%337) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %339 = "llvm.load"(%338) : (!hi.bool) -> i1
      "cf.cond_br"(%339) [^bb48, ^bb48] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb49:
      %340 = "mid.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
      %341 = "llvm.load"(%335) : (!llvm.ptr) -> i32
      %342 = "llvm.getelementptr"(%340, %341) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %343 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %344 = "llvm.getelementptr"(%342, %343) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%344) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__Self_from_iterable_iterableIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb50(%345 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %346 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %347 : !llvm.ptr, %348 : !llvm.struct<(!llvm.ptr, i160)>):
      %349 = "mid.wrap"(%345) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %350 = "hi.cast"(%349) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %351 = "mid.wrap"(%348) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %352 = "hi.cast"(%351) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %353 = "mid.get_field"(%350) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %354 = "mid.get_field"(%350) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %355 = "hi.comparison"(%353, %354) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %356 = "mid.unwrap"(%355) : (si1) -> i1
      "mid.if"(%356) ({
        %357 = "mid.get_field"(%350) {"offset" = 3 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
        %358 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
        %359 = "hi.arithmetic"(%357, %358) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %360 = "hi.cast"(%359) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %361 = "mid.unwrap"(%360) : (si32) -> i32
        %362 = "mid.unwrap"(%350) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %363 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %364 = "mid.parameterizations_array"(%363) : (!llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%364, %362, %361) {"offset" = 9 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      }) : (i1) -> ()
      %365 = "mid.get_field"(%350) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %366 = "mid.get_field"(%350) {"offset" = 1 : i64, "vtable_bytes" = 4232 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %367 = "mid.get_type_field"(%350) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %368 = "hi.cast"(%352) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %369 = "hi.cast"(%365) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      "mid.buffer_set"(%366, %369, %368, %367) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, si64, !hi.type_param<"T", !hi.any, "Array">, !hi.reified_type) -> ()
      %370 = "mid.get_field"(%350) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %371 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %372 = "hi.arithmetic"(%370, %371) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %373 = "hi.cast"(%372) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%350, %373) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
      %374 = "hi.cast"(%350) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "List"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%374) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_append_xT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb51(%375 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %376 : !llvm.ptr):
      %377 = "mid.invariant"(%376) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %378 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb52] : () -> ()
    ^bb53:
      %379 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%379, %378) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb54] : () -> ()
    ^bb52:
      %380 = "llvm.getelementptr"(%376) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %381 = "mid.checkflag"(%380) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %382 = "llvm.load"(%381) : (!hi.bool) -> i1
      "cf.cond_br"(%382) [^bb53, ^bb53] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb54:
      %383 = "llvm.extractvalue"(%375) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %384 = "llvm.load"(%378) : (!llvm.ptr) -> i32
      %385 = "llvm.getelementptr"(%383, %384) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %386 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %387 = "llvm.getelementptr"(%385, %386) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%387) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_append_xT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_length_", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb55(%388 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %389 : !llvm.ptr):
      %390 = "mid.invariant"(%389) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %391 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb56] : () -> ()
    ^bb56:
      %392 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%392, %391) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb57] : () -> ()
    ^bb57:
      %393 = "llvm.extractvalue"(%388) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %394 = "llvm.load"(%391) : (!llvm.ptr) -> i32
      %395 = "llvm.getelementptr"(%393, %394) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %396 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %397 = "llvm.getelementptr"(%395, %396) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%397) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_length_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_first_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb58(%398 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %399 : !llvm.ptr):
      %400 = "mid.invariant"(%399) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %401 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb59] : () -> ()
    ^bb59:
      %402 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%402, %401) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb60] : () -> ()
    ^bb60:
      %403 = "llvm.extractvalue"(%398) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %404 = "llvm.load"(%401) : (!llvm.ptr) -> i32
      %405 = "llvm.getelementptr"(%403, %404) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %406 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %407 = "llvm.getelementptr"(%405, %406) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%407) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_first_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_last_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb61(%408 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %409 : !llvm.ptr):
      %410 = "mid.invariant"(%409) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %411 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb62] : () -> ()
    ^bb62:
      %412 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
      "llvm.store"(%412, %411) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb63] : () -> ()
    ^bb63:
      %413 = "llvm.extractvalue"(%408) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %414 = "llvm.load"(%411) : (!llvm.ptr) -> i32
      %415 = "llvm.getelementptr"(%413, %414) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %416 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %417 = "llvm.getelementptr"(%415, %416) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%417) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_last_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb64(%418 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %419 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %420 : !llvm.ptr, %421 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %422 = "mid.wrap"(%418) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %423 = "hi.cast"(%422) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %424 = "mid.wrap"(%421) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>
      %425 = "hi.cast"(%424) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Array">]>
      %426 = "mid.get_field"(%423) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %427 = "mid.refer"(%426) {"typ" = i32} : (si32) -> si32
      %428 = "mid.unwrap"(%425) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %429 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %430 = "mid.method_call"(%429, %428) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %431 = "hi.cast"(%430) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %432 = "hi.arithmetic"(%427, %431) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %433 = "hi.cast"(%432) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %434 = "mid.unwrap"(%433) : (si32) -> i32
      %435 = "mid.unwrap"(%423) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %436 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %437 = "mid.parameterizations_array"(%436) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%437, %435, %434) {"offset" = 9 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %438 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %439 = "mid.unwrap"(%425) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %440 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %441 = "mid.method_call"(%440, %439) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 59 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %442 = "hi.cast"(%441) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      %443 = "mid.refer"(%442) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.while"() ({
        %444 = "mid.unwrap"(%443) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %445 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %446 = "mid.method_call"(%445, %444) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %447 = "hi.cast"(%446) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>
        %448 = "mid.get_type_field"(%423) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
        %449 = "mid.checkflag"(%447) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>) -> si1
        %450 = "mid.unwrap"(%449) : (si1) -> i1
      }, {
        %451 = "hi.cast"(%447) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>) -> !hi.type_param<"T", !hi.any, "Array">
        %452 = "hi.arithmetic"(%438, %427) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %453 = "hi.cast"(%452) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %454 = "mid.unwrap"(%453) : (si32) -> i32
        %455 = "hi.cast"(%451) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %456 = "mid.unwrap"(%455) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
        %457 = "mid.unwrap"(%423) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %458 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %459 = "mid.get_type_field"(%423) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
        %460 = "mid.parameterizations_array"(%458, %459) : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
        "mid.method_call"(%460, %457, %454, %456) {"offset" = 12 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %461 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %462 = "hi.arithmetic"(%438, %461) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %463 = "hi.cast"(%462) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%438, %463) {"typ" = i32} : (si32, si32) -> ()
        %464 = "hi.cast"(%451) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>
        "mid.assign"(%447, %464) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Array">]>) -> ()
      }) : () -> ()
      %465 = "hi.cast"(%432) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%423, %465) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, si32) -> ()
      %466 = "hi.cast"(%423) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "List"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%466) : (!hi.fatptr<"List", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_extend_otherCollectionT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "List_extend_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb65(%467 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %468 : !llvm.ptr):
      %469 = "mid.invariant"(%468) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %470 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb66] : () -> ()
    ^bb67:
      %471 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
      "llvm.store"(%471, %470) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb68] : () -> ()
    ^bb69:
      %472 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
      "llvm.store"(%472, %470) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb68] : () -> ()
    ^bb66:
      %473 = "llvm.getelementptr"(%468) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %474 = "mid.checkflag"(%473) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %475 = "llvm.load"(%474) : (!hi.bool) -> i1
      "cf.cond_br"(%475) [^bb67, ^bb70] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb70:
      %476 = "llvm.getelementptr"(%468) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %477 = "mid.checkflag"(%476) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %478 = "llvm.load"(%477) : (!hi.bool) -> i1
      "cf.cond_br"(%478) [^bb71, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb71:
      %479 = "llvm.getelementptr"(%468) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %480 = "mid.checkflag"(%479) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %481 = "llvm.load"(%480) : (!hi.bool) -> i1
      "cf.cond_br"(%481) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %482 = "llvm.extractvalue"(%467) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %483 = "llvm.load"(%470) : (!llvm.ptr) -> i32
      %484 = "llvm.getelementptr"(%482, %483) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %485 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %486 = "llvm.getelementptr"(%484, %485) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%486) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_extend_otherCollectionT_extend_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_get_indexi32", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb72(%487 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %488 : !llvm.ptr):
      %489 = "mid.invariant"(%488) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %490 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb73] : () -> ()
    ^bb74:
      %491 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
      "llvm.store"(%491, %490) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb75] : () -> ()
    ^bb73:
      %492 = "llvm.getelementptr"(%488) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %493 = "mid.checkflag"(%492) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %494 = "llvm.load"(%493) : (!hi.bool) -> i1
      "cf.cond_br"(%494) [^bb74, ^bb74] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb75:
      %495 = "llvm.extractvalue"(%487) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %496 = "llvm.load"(%490) : (!llvm.ptr) -> i32
      %497 = "llvm.getelementptr"(%495, %496) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %498 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %499 = "llvm.getelementptr"(%497, %498) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%499) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_get_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "List_index_of_targetT_eqFunctionT._T_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb76(%500 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %501 : !llvm.ptr):
      %502 = "mid.invariant"(%501) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %503 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %504 = "llvm.mlir.constant"() <{"value" = 58 : i32}> : () -> i32
      "llvm.store"(%504, %503) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb80:
      %505 = "llvm.getelementptr"(%501) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %506 = "mid.checkflag"(%505) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %507 = "llvm.load"(%506) : (!hi.bool) -> i1
      "cf.cond_br"(%507) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb77:
      %508 = "llvm.getelementptr"(%501) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %509 = "mid.checkflag"(%508) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %510 = "llvm.load"(%509) : (!hi.bool) -> i1
      "cf.cond_br"(%510) [^bb80, ^bb80] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %511 = "llvm.extractvalue"(%500) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %512 = "llvm.load"(%503) : (!llvm.ptr) -> i32
      %513 = "llvm.getelementptr"(%511, %512) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %514 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %515 = "llvm.getelementptr"(%513, %514) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%515) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_index_of_targetT_eqFunctionT._T_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb81(%516 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %517 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %518 : !llvm.ptr):
      %519 = "mid.wrap"(%516) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %520 = "hi.cast"(%519) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %521 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %522 = "mid.get_field"(%520) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %523 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %524 = "hi.arithmetic"(%522, %523) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %525 = "mid.unwrap"(%521) : (si32) -> i32
      %526 = "mid.unwrap"(%524) : (si32) -> i32
      %527 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "single_region_ribgzrzhog"} : () -> !hi.fatptr<"Range">
      %528 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %529 = "mid.get_field"(%520) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %530 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %531 = "hi.arithmetic"(%529, %530) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %532 = "hi.cast"(%528) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %533 = "mid.unwrap"(%532) : (si32) -> i32
      %534 = "hi.cast"(%531) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %535 = "mid.unwrap"(%534) : (si32) -> i32
      %536 = "mid.unwrap"(%527) : (!hi.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %537 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %538 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %539 = "mid.parameterizations_array"(%537, %538) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%539, %536, %533, %535) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 127 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %540 = "hi.cast"(%527) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"I", !hi.any, "IndexableCollection">]>, "from_typ_name" = "Range", "to_typ_name" = "Collection"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Collection", [!hi.type_param<"I", !hi.any, "IndexableCollection">]>
      "mid.return"(%540) : (!hi.fatptr<"Collection", [!hi.type_param<"I", !hi.any, "IndexableCollection">]>) -> ()
    }) {"func_name" = "Array_indices_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb82(%541 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %542 : !llvm.ptr):
      %543 = "mid.invariant"(%542) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %544 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb83] : () -> ()
    ^bb83:
      %545 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%545, %544) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb84] : () -> ()
    ^bb84:
      %546 = "llvm.extractvalue"(%541) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %547 = "llvm.load"(%544) : (!llvm.ptr) -> i32
      %548 = "llvm.getelementptr"(%546, %547) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %549 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %550 = "llvm.getelementptr"(%548, %549) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%550) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_indices_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb85(%551 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %552 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %553 : !llvm.ptr):
      %554 = "mid.wrap"(%551) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %555 = "hi.cast"(%554) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %556 = "hi.cast"(%555) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Collection"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%556) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_values_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb86(%557 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %558 : !llvm.ptr):
      %559 = "mid.invariant"(%558) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %560 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb87] : () -> ()
    ^bb87:
      %561 = "llvm.mlir.constant"() <{"value" = 60 : i32}> : () -> i32
      "llvm.store"(%561, %560) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb88] : () -> ()
    ^bb88:
      %562 = "llvm.extractvalue"(%557) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %563 = "llvm.load"(%560) : (!llvm.ptr) -> i32
      %564 = "llvm.getelementptr"(%562, %563) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %565 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %566 = "llvm.getelementptr"(%564, %565) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%566) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_values_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb89(%567 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %568 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %569 : !llvm.ptr, %570 : !llvm.struct<(!llvm.ptr, i160)>):
      %571 = "mid.wrap"(%567) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %572 = "hi.cast"(%571) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %573 = "mid.wrap"(%570) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"I", !hi.any, "Indexable">
      %574 = "hi.cast"(%573) {"from_typ" = !hi.type_param<"I", !hi.any, "Indexable">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"I", !hi.any, "Indexable">) -> si32
      %575 = "hi.cast"(%574) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %576 = "mid.unwrap"(%575) : (si32) -> i32
      %577 = "mid.unwrap"(%572) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %578 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %579 = "mid.parameterizations_array"(%578) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%579, %577, %576) {"offset" = 10 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %580 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %581 = "hi.comparison"(%574, %580) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %582 = "mid.unwrap"(%581) : (si1) -> i1
      "mid.if"(%582) ({
        %583 = "mid.get_field"(%572) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
        %584 = "hi.arithmetic"(%583, %574) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %585 = "hi.cast"(%584) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%574, %585) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %586 = "hi.cast"(%574) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %587 = "mid.unwrap"(%586) : (si32) -> i32
      %588 = "mid.unwrap"(%572) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %589 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %590 = "mid.parameterizations_array"(%589) : (!llvm.ptr) -> !llvm.ptr
      %591 = "mid.method_call"(%590, %588, %587) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
      %592 = "hi.cast"(%591) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %593 = "hi.cast"(%592) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      "mid.return"(%593) : (!hi.type_param<"T", !hi.any, "Array">) -> ()
    }) {"func_name" = "Array__index_indexi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.fatptr<"OutOfBounds">} : () -> ()
    "mid.func"() ({
    ^bb90(%594 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %595 : !llvm.ptr):
      %596 = "mid.invariant"(%595) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %597 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb91] : () -> ()
    ^bb92:
      %598 = "llvm.mlir.constant"() <{"value" = 61 : i32}> : () -> i32
      "llvm.store"(%598, %597) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb93] : () -> ()
    ^bb91:
      %599 = "llvm.getelementptr"(%595) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %600 = "mid.checkflag"(%599) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %601 = "llvm.load"(%600) : (!hi.bool) -> i1
      "cf.cond_br"(%601) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb93:
      %602 = "llvm.extractvalue"(%594) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %603 = "llvm.load"(%597) : (!llvm.ptr) -> i32
      %604 = "llvm.getelementptr"(%602, %603) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %605 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %606 = "llvm.getelementptr"(%604, %605) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%606) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__index_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb94(%607 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %608 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %609 : !llvm.ptr, %610 : !llvm.struct<(!llvm.ptr, i160)>, %611 : !llvm.struct<(!llvm.ptr, i160)>):
      %612 = "mid.wrap"(%607) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %613 = "hi.cast"(%612) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %614 = "mid.wrap"(%610) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"I", !hi.any, "Indexable">
      %615 = "hi.cast"(%614) {"from_typ" = !hi.type_param<"I", !hi.any, "Indexable">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"I", !hi.any, "Indexable">) -> si32
      %616 = "mid.wrap"(%611) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %617 = "hi.cast"(%616) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %618 = "hi.cast"(%615) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %619 = "mid.unwrap"(%618) : (si32) -> i32
      %620 = "mid.unwrap"(%613) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %621 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %622 = "mid.parameterizations_array"(%621) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%622, %620, %619) {"offset" = 10 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %623 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %624 = "hi.comparison"(%615, %623) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %625 = "mid.unwrap"(%624) : (si1) -> i1
      "mid.if"(%625) ({
        %626 = "mid.get_field"(%613) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
        %627 = "hi.arithmetic"(%626, %615) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %628 = "hi.cast"(%627) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%615, %628) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %629 = "hi.cast"(%615) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %630 = "mid.unwrap"(%629) : (si32) -> i32
      %631 = "hi.cast"(%617) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %632 = "mid.unwrap"(%631) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
      %633 = "mid.unwrap"(%613) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %634 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %635 = "mid.get_type_field"(%613) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %636 = "mid.parameterizations_array"(%634, %635) : (!llvm.ptr, !hi.reified_type) -> !llvm.ptr
      "mid.method_call"(%636, %633, %630, %632) {"offset" = 12 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "Array__set_index_indexi32_valueT", "result_type" = !llvm.void, "yield_type" = !hi.fatptr<"OutOfBounds">} : () -> ()
    "mid.func"() ({
    ^bb95(%637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %638 : !llvm.ptr):
      %639 = "mid.invariant"(%638) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %640 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb96] : () -> ()
    ^bb97:
      %641 = "llvm.mlir.constant"() <{"value" = 62 : i32}> : () -> i32
      "llvm.store"(%641, %640) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb98] : () -> ()
    ^bb99:
      %642 = "llvm.getelementptr"(%638) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %643 = "mid.checkflag"(%642) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %644 = "llvm.load"(%643) : (!hi.bool) -> i1
      "cf.cond_br"(%644) [^bb97, ^bb97] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb96:
      %645 = "llvm.getelementptr"(%638) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %646 = "mid.checkflag"(%645) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %647 = "llvm.load"(%646) : (!hi.bool) -> i1
      "cf.cond_br"(%647) [^bb99, ^bb99] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb98:
      %648 = "llvm.extractvalue"(%637) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %649 = "llvm.load"(%640) : (!llvm.ptr) -> i32
      %650 = "llvm.getelementptr"(%648, %649) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %651 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %652 = "llvm.getelementptr"(%650, %651) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%652) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__set_index_indexi32_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb100(%653 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %654 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %655 : !llvm.ptr):
      %656 = "mid.wrap"(%653) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %657 = "hi.cast"(%656) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %658 = "mid.get_field"(%657) {"offset" = 2 : i64, "vtable_bytes" = 4232 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> si32
      %659 = "hi.cast"(%658) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%659) : (si32) -> ()
    }) {"func_name" = "Array_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb101(%660 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %661 : !llvm.ptr):
      %662 = "mid.invariant"(%661) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %663 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb102] : () -> ()
    ^bb102:
      %664 = "llvm.mlir.constant"() <{"value" = 63 : i32}> : () -> i32
      "llvm.store"(%664, %663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb103] : () -> ()
    ^bb103:
      %665 = "llvm.extractvalue"(%660) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %666 = "llvm.load"(%663) : (!llvm.ptr) -> i32
      %667 = "llvm.getelementptr"(%665, %666) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %668 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %669 = "llvm.getelementptr"(%667, %668) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%669) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_is_empty_", "function_type" = !llvm.func<i1 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb104(%670 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %671 : !llvm.ptr):
      %672 = "mid.invariant"(%671) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %673 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb105] : () -> ()
    ^bb105:
      %674 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%674, %673) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb106] : () -> ()
    ^bb106:
      %675 = "llvm.extractvalue"(%670) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %676 = "llvm.load"(%673) : (!llvm.ptr) -> i32
      %677 = "llvm.getelementptr"(%675, %676) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %678 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %679 = "llvm.getelementptr"(%677, %678) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%679) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_is_empty_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb107(%680 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %681 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %682 : !llvm.ptr):
      %683 = "mid.wrap"(%680) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %684 = "hi.cast"(%683) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %685 = "mid.unwrap"(%684) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %686 = "mid.get_type_field"(%684) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %687 = "mid.new"(%686) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "ArrayIterator", "num_data_fields" = 2 : i32, "region_id" = "ret", "has_type_fields"} : (!hi.reified_type) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>
      %688 = "hi.cast"(%684) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %689 = "mid.unwrap"(%688) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %690 = "mid.unwrap"(%687) : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %691 = "mid.get_type_field"(%684) {"offset" = 0 : i64, "vtable_bytes" = 4232 : i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.reified_type
      %692 = "mid.parameterization"(%691) {"id_hierarchy" = ["Array", [0 : i32]], "name_hierarchy" = ["ArrayArray.T_subtype_Any", ["Array.T_subtype_Any"]]} : (!hi.reified_type) -> !llvm.ptr
      %693 = "mid.parameterizations_array"(%692) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%693, %690, %689) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 16 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %694 = "hi.cast"(%687) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%694) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb108(%695 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %696 : !llvm.ptr):
      %697 = "mid.invariant"(%696) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %698 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb109] : () -> ()
    ^bb109:
      %699 = "llvm.mlir.constant"() <{"value" = 65 : i32}> : () -> i32
      "llvm.store"(%699, %698) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb110] : () -> ()
    ^bb110:
      %700 = "llvm.extractvalue"(%695) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %701 = "llvm.load"(%698) : (!llvm.ptr) -> i32
      %702 = "llvm.getelementptr"(%700, %701) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %703 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %704 = "llvm.getelementptr"(%702, %703) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%704) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb111(%705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %706 : !llvm.ptr):
      %707 = "mid.invariant"(%706) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %708 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb112] : () -> ()
    ^bb113:
      %709 = "llvm.mlir.constant"() <{"value" = 66 : i32}> : () -> i32
      "llvm.store"(%709, %708) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb114] : () -> ()
    ^bb112:
      %710 = "llvm.getelementptr"(%706) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %711 = "mid.checkflag"(%710) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %712 = "llvm.load"(%711) : (!hi.bool) -> i1
      "cf.cond_br"(%712) [^bb113, ^bb113] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb114:
      %713 = "llvm.extractvalue"(%705) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %714 = "llvm.load"(%708) : (!llvm.ptr) -> i32
      %715 = "llvm.getelementptr"(%713, %714) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %716 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %717 = "llvm.getelementptr"(%715, %716) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%717) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb115(%718 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %719 : !llvm.ptr):
      %720 = "mid.invariant"(%719) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %721 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb116] : () -> ()
    ^bb117:
      %722 = "llvm.mlir.constant"() <{"value" = 67 : i32}> : () -> i32
      "llvm.store"(%722, %721) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb118] : () -> ()
    ^bb119:
      %723 = "llvm.getelementptr"(%719) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %724 = "mid.checkflag"(%723) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %725 = "llvm.load"(%724) : (!hi.bool) -> i1
      "cf.cond_br"(%725) [^bb117, ^bb117] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb116:
      %726 = "llvm.getelementptr"(%719) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %727 = "mid.checkflag"(%726) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %728 = "llvm.load"(%727) : (!hi.bool) -> i1
      "cf.cond_br"(%728) [^bb119, ^bb119] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb118:
      %729 = "llvm.extractvalue"(%718) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %730 = "llvm.load"(%721) : (!llvm.ptr) -> i32
      %731 = "llvm.getelementptr"(%729, %730) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %732 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %733 = "llvm.getelementptr"(%731, %732) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%733) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb120(%734 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %735 : !llvm.ptr):
      %736 = "mid.invariant"(%735) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %737 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb121] : () -> ()
    ^bb122:
      %738 = "llvm.mlir.constant"() <{"value" = 68 : i32}> : () -> i32
      "llvm.store"(%738, %737) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb121:
      %739 = "llvm.getelementptr"(%735) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %740 = "mid.checkflag"(%739) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %741 = "llvm.load"(%740) : (!hi.bool) -> i1
      "cf.cond_br"(%741) [^bb122, ^bb122] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %742 = "llvm.extractvalue"(%734) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %743 = "llvm.load"(%737) : (!llvm.ptr) -> i32
      %744 = "llvm.getelementptr"(%742, %743) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %745 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %746 = "llvm.getelementptr"(%744, %745) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%746) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb124(%747 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %748 : !llvm.ptr):
      %749 = "mid.invariant"(%748) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %750 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb125] : () -> ()
    ^bb126:
      %751 = "llvm.mlir.constant"() <{"value" = 69 : i32}> : () -> i32
      "llvm.store"(%751, %750) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb127] : () -> ()
    ^bb125:
      %752 = "llvm.getelementptr"(%748) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %753 = "mid.checkflag"(%752) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %754 = "llvm.load"(%753) : (!hi.bool) -> i1
      "cf.cond_br"(%754) [^bb126, ^bb126] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb127:
      %755 = "llvm.extractvalue"(%747) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %756 = "llvm.load"(%750) : (!llvm.ptr) -> i32
      %757 = "llvm.getelementptr"(%755, %756) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %758 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %759 = "llvm.getelementptr"(%757, %758) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%759) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb128(%760 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %761 : !llvm.ptr):
      %762 = "mid.invariant"(%761) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %763 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb129] : () -> ()
    ^bb129:
      %764 = "llvm.mlir.constant"() <{"value" = 70 : i32}> : () -> i32
      "llvm.store"(%764, %763) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb130:
      %765 = "llvm.extractvalue"(%760) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %766 = "llvm.load"(%763) : (!llvm.ptr) -> i32
      %767 = "llvm.getelementptr"(%765, %766) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %768 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %769 = "llvm.getelementptr"(%767, %768) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%769) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb131(%770 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %771 : !llvm.ptr):
      %772 = "mid.invariant"(%771) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %773 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb132] : () -> ()
    ^bb133:
      %774 = "llvm.mlir.constant"() <{"value" = 71 : i32}> : () -> i32
      "llvm.store"(%774, %773) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb134] : () -> ()
    ^bb135:
      %775 = "llvm.mlir.constant"() <{"value" = 72 : i32}> : () -> i32
      "llvm.store"(%775, %773) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb134] : () -> ()
    ^bb132:
      %776 = "llvm.getelementptr"(%771) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %777 = "mid.checkflag"(%776) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %778 = "llvm.load"(%777) : (!hi.bool) -> i1
      "cf.cond_br"(%778) [^bb133, ^bb136] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb136:
      %779 = "llvm.getelementptr"(%771) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %780 = "mid.checkflag"(%779) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %781 = "llvm.load"(%780) : (!hi.bool) -> i1
      "cf.cond_br"(%781) [^bb135, ^bb135] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb134:
      %782 = "llvm.extractvalue"(%770) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %783 = "llvm.load"(%773) : (!llvm.ptr) -> i32
      %784 = "llvm.getelementptr"(%782, %783) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %785 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %786 = "llvm.getelementptr"(%784, %785) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%786) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb137(%787 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %788 : !llvm.ptr):
      %789 = "mid.invariant"(%788) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %790 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb138] : () -> ()
    ^bb139:
      %791 = "llvm.mlir.constant"() <{"value" = 73 : i32}> : () -> i32
      "llvm.store"(%791, %790) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb140] : () -> ()
    ^bb138:
      %792 = "llvm.getelementptr"(%788) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %793 = "mid.checkflag"(%792) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %794 = "llvm.load"(%793) : (!hi.bool) -> i1
      "cf.cond_br"(%794) [^bb139, ^bb139] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb140:
      %795 = "llvm.extractvalue"(%787) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %796 = "llvm.load"(%790) : (!llvm.ptr) -> i32
      %797 = "llvm.getelementptr"(%795, %796) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %798 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %799 = "llvm.getelementptr"(%797, %798) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%799) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_chain_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb141(%800 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %801 : !llvm.ptr):
      %802 = "mid.invariant"(%801) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %803 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb142] : () -> ()
    ^bb143:
      %804 = "llvm.mlir.constant"() <{"value" = 75 : i32}> : () -> i32
      "llvm.store"(%804, %803) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb144] : () -> ()
    ^bb145:
      %805 = "llvm.mlir.constant"() <{"value" = 74 : i32}> : () -> i32
      "llvm.store"(%805, %803) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb144] : () -> ()
    ^bb142:
      %806 = "llvm.getelementptr"(%801) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %807 = "mid.checkflag"(%806) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %808 = "llvm.load"(%807) : (!hi.bool) -> i1
      "cf.cond_br"(%808) [^bb143, ^bb146] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb146:
      %809 = "llvm.getelementptr"(%801) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %810 = "mid.checkflag"(%809) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %811 = "llvm.load"(%810) : (!hi.bool) -> i1
      "cf.cond_br"(%811) [^bb147, ^bb145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb147:
      %812 = "llvm.getelementptr"(%801) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %813 = "mid.checkflag"(%812) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %814 = "llvm.load"(%813) : (!hi.bool) -> i1
      "cf.cond_br"(%814) [^bb145, ^bb145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb144:
      %815 = "llvm.extractvalue"(%800) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %816 = "llvm.load"(%803) : (!llvm.ptr) -> i32
      %817 = "llvm.getelementptr"(%815, %816) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %818 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %819 = "llvm.getelementptr"(%817, %818) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%819) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_interleave_otherCollectionT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb148(%820 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %821 : !llvm.ptr):
      %822 = "mid.invariant"(%821) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %823 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb149] : () -> ()
    ^bb150:
      %824 = "llvm.mlir.constant"() <{"value" = 77 : i32}> : () -> i32
      "llvm.store"(%824, %823) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb151] : () -> ()
    ^bb152:
      %825 = "llvm.mlir.constant"() <{"value" = 76 : i32}> : () -> i32
      "llvm.store"(%825, %823) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb151] : () -> ()
    ^bb149:
      %826 = "llvm.getelementptr"(%821) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %827 = "mid.checkflag"(%826) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %828 = "llvm.load"(%827) : (!hi.bool) -> i1
      "cf.cond_br"(%828) [^bb150, ^bb153] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb153:
      %829 = "llvm.getelementptr"(%821) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %830 = "mid.checkflag"(%829) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %831 = "llvm.load"(%830) : (!hi.bool) -> i1
      "cf.cond_br"(%831) [^bb154, ^bb152] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb154:
      %832 = "llvm.getelementptr"(%821) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %833 = "mid.checkflag"(%832) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %834 = "llvm.load"(%833) : (!hi.bool) -> i1
      "cf.cond_br"(%834) [^bb152, ^bb152] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb151:
      %835 = "llvm.extractvalue"(%820) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %836 = "llvm.load"(%823) : (!llvm.ptr) -> i32
      %837 = "llvm.getelementptr"(%835, %836) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %838 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %839 = "llvm.getelementptr"(%837, %838) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%839) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_interleave_otherIterableT_interleave_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_zip_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb155(%840 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %841 : !llvm.ptr):
      %842 = "mid.invariant"(%841) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %843 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb156] : () -> ()
    ^bb157:
      %844 = "llvm.mlir.constant"() <{"value" = 79 : i32}> : () -> i32
      "llvm.store"(%844, %843) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb158] : () -> ()
    ^bb159:
      %845 = "llvm.mlir.constant"() <{"value" = 78 : i32}> : () -> i32
      "llvm.store"(%845, %843) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb158] : () -> ()
    ^bb156:
      %846 = "llvm.getelementptr"(%841) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %847 = "mid.checkflag"(%846) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %848 = "llvm.load"(%847) : (!hi.bool) -> i1
      "cf.cond_br"(%848) [^bb157, ^bb160] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb160:
      %849 = "llvm.getelementptr"(%841) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %850 = "mid.checkflag"(%849) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %851 = "llvm.load"(%850) : (!hi.bool) -> i1
      "cf.cond_br"(%851) [^bb161, ^bb159] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb161:
      %852 = "llvm.getelementptr"(%841) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %853 = "mid.checkflag"(%852) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %854 = "llvm.load"(%853) : (!hi.bool) -> i1
      "cf.cond_br"(%854) [^bb159, ^bb159] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb158:
      %855 = "llvm.extractvalue"(%840) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %856 = "llvm.load"(%843) : (!llvm.ptr) -> i32
      %857 = "llvm.getelementptr"(%855, %856) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %858 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %859 = "llvm.getelementptr"(%857, %858) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%859) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Collection_product_otherCollectionU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb162(%860 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %861 : !llvm.ptr):
      %862 = "mid.invariant"(%861) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %863 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb163] : () -> ()
    ^bb164:
      %864 = "llvm.mlir.constant"() <{"value" = 80 : i32}> : () -> i32
      "llvm.store"(%864, %863) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb165] : () -> ()
    ^bb166:
      %865 = "llvm.mlir.constant"() <{"value" = 81 : i32}> : () -> i32
      "llvm.store"(%865, %863) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb165] : () -> ()
    ^bb163:
      %866 = "llvm.getelementptr"(%861) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %867 = "mid.checkflag"(%866) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %868 = "llvm.load"(%867) : (!hi.bool) -> i1
      "cf.cond_br"(%868) [^bb164, ^bb167] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb167:
      %869 = "llvm.getelementptr"(%861) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %870 = "mid.checkflag"(%869) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %871 = "llvm.load"(%870) : (!hi.bool) -> i1
      "cf.cond_br"(%871) [^bb168, ^bb166] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb168:
      %872 = "llvm.getelementptr"(%861) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %873 = "mid.checkflag"(%872) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %874 = "llvm.load"(%873) : (!hi.bool) -> i1
      "cf.cond_br"(%874) [^bb166, ^bb166] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb165:
      %875 = "llvm.extractvalue"(%860) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %876 = "llvm.load"(%863) : (!llvm.ptr) -> i32
      %877 = "llvm.getelementptr"(%875, %876) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %878 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %879 = "llvm.getelementptr"(%877, %878) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%879) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb169(%880 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %881 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %882 : !llvm.ptr):
      %883 = "mid.wrap"(%880) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %884 = "hi.cast"(%883) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %885 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %886 = "hi.cast"(%885) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %887 = "mid.create_buffer"(%886) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %888 = "mid.refer"(%887) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %889 = "mid.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "Array"} : () -> !llvm.ptr
      %890 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%888, %890, %889) {"typ" = !llvm.array<5 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %891 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
      %892 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
      %893 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %894 = "mid.unwrap"(%888) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %895 = "mid.unwrap"(%891) : (si32) -> i32
      %896 = "mid.unwrap"(%892) : (si32) -> i32
      %897 = "mid.unwrap"(%893) : (si32) -> i32
      %898 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "single_region_obcfiqttqv"} : () -> !hi.fatptr<"String">
      %899 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
      %900 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
      %901 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> si32
      %902 = "hi.cast"(%888) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %903 = "mid.unwrap"(%902) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %904 = "hi.cast"(%899) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %905 = "mid.unwrap"(%904) : (si32) -> i32
      %906 = "hi.cast"(%900) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %907 = "mid.unwrap"(%906) : (si32) -> i32
      %908 = "hi.cast"(%901) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %909 = "mid.unwrap"(%908) : (si32) -> i32
      %910 = "mid.unwrap"(%898) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %911 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %912 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %913 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %914 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %915 = "mid.parameterizations_array"(%911, %912, %913, %914) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%915, %910, %903, %905, %907, %909) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %916 = "hi.cast"(%898) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%916) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Array_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb170(%917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %918 : !llvm.ptr):
      %919 = "mid.invariant"(%918) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %920 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb171] : () -> ()
    ^bb171:
      %921 = "llvm.mlir.constant"() <{"value" = 82 : i32}> : () -> i32
      "llvm.store"(%921, %920) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb172] : () -> ()
    ^bb172:
      %922 = "llvm.extractvalue"(%917) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %923 = "llvm.load"(%920) : (!llvm.ptr) -> i32
      %924 = "llvm.getelementptr"(%922, %923) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<529 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %925 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %926 = "llvm.getelementptr"(%924, %925) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%926) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ArrayIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ArrayIterator_field_ArrayIterator_0"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ArrayIterator_getter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ArrayIterator_setter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ArrayIterator_field_array", "getter_name" = "ArrayIterator_getter_array", "setter_name" = "ArrayIterator_setter_array"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ArrayIterator_getter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ArrayIterator_setter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ArrayIterator_field_index", "getter_name" = "ArrayIterator_getter_index", "setter_name" = "ArrayIterator_setter_index"} : () -> ()
    "mid.func"() ({
    ^bb173(%927 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %928 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %929 : !llvm.ptr, %930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %931 = "mid.wrap"(%927) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %932 = "hi.cast"(%931) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %933 = "mid.wrap"(%930) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %934 = "hi.cast"(%933) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %935 = "hi.cast"(%934) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      "mid.set_field"(%932, %935) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> ()
      %936 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %937 = "hi.cast"(%936) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%932, %937) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, si32) -> ()
    }) {"func_name" = "ArrayIterator_init_arrayArrayT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb174(%938 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %939 : !llvm.ptr):
      %940 = "mid.invariant"(%939) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %941 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb175] : () -> ()
    ^bb176:
      %942 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%942, %941) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb177] : () -> ()
    ^bb175:
      %943 = "llvm.getelementptr"(%939) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %944 = "mid.checkflag"(%943) {"typ_name" = "Array"} : (!llvm.ptr) -> !hi.bool
      %945 = "llvm.load"(%944) : (!hi.bool) -> i1
      "cf.cond_br"(%945) [^bb176, ^bb176] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb177:
      %946 = "llvm.extractvalue"(%938) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %947 = "llvm.load"(%941) : (!llvm.ptr) -> i32
      %948 = "llvm.getelementptr"(%946, %947) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %949 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %950 = "llvm.getelementptr"(%948, %949) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%950) : (!llvm.ptr) -> ()
    }) {"func_name" = "ArrayIterator_B_init_arrayArrayT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb178(%951 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %953 : !llvm.ptr):
      %954 = "mid.wrap"(%951) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %955 = "hi.cast"(%954) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %956 = "mid.get_field"(%955) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> si32
      %957 = "mid.get_field"(%955) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %958 = "mid.unwrap"(%957) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %959 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %960 = "mid.method_call"(%959, %958) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 529 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %961 = "hi.cast"(%960) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %962 = "hi.comparison"(%956, %961) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %963 = "mid.unwrap"(%962) : (si1) -> i1
      "mid.if"(%963) ({
        %964 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %965 = "hi.cast"(%964) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>
        "mid.return"(%965) : (!hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %966 = "mid.get_field"(%955) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> si32
      %967 = "mid.refer"(%966) {"typ" = i32} : (si32) -> si32
      %968 = "mid.get_field"(%955) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> si32
      %969 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %970 = "hi.arithmetic"(%968, %969) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %971 = "hi.cast"(%970) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%955, %971) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, si32) -> ()
      %972 = "hi.cast"(%967) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %973 = "mid.unwrap"(%972) : (si32) -> i32
      %974 = "mid.get_field"(%955) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %975 = "mid.unwrap"(%974) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %976 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %977 = "mid.parameterizations_array"(%976) : (!llvm.ptr) -> !llvm.ptr
      %978 = "mid.method_call"(%977, %975, %973) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
      %979 = "hi.cast"(%978) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "ArrayIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "ArrayIterator">
      %980 = "hi.cast"(%979) {"from_typ" = !hi.type_param<"T", !hi.any, "ArrayIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ArrayIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>
      "mid.return"(%980) : (!hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb179(%981 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %982 : !llvm.ptr):
      %983 = "mid.invariant"(%982) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %984 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb180] : () -> ()
    ^bb180:
      %985 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%985, %984) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb181] : () -> ()
    ^bb181:
      %986 = "llvm.extractvalue"(%981) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %987 = "llvm.load"(%984) : (!llvm.ptr) -> i32
      %988 = "llvm.getelementptr"(%986, %987) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %989 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %990 = "llvm.getelementptr"(%988, %989) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%990) : (!llvm.ptr) -> ()
    }) {"func_name" = "ArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "files"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO"} : () -> ()
    "mid.typedef"() {"class_name" = "FileSystemError", "methods" = [@FileSystemError_field_line_number, @FileSystemError_field_file_name, @FileSystemError_field_message, @FileSystemError_field_stacktrace, @FileSystemError_B_init_messageString, @FileSystemError_B_init_, @FileSystemError_B_set_info_line_numberi32_file_nameString, @FileSystemError_B_report_, @FileSystemError_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_, @FileSystemError_field_line_number, @FileSystemError_field_file_name, @FileSystemError_field_message, @FileSystemError_field_stacktrace, @FileSystemError_B_init_messageString, @FileSystemError_B_init_, @FileSystemError_B_set_info_line_numberi32_file_nameString, @FileSystemError_B_report_, @FileSystemError_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@any_typ, @FileSystemError, @Object, @Exception], "offset_tbl" = [10 : i32, 10 : i32, 38 : i32, 24 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 13942035194652003542 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_FileSystemError", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "File", "methods" = [@File_field_name, @File_field_mode, @File_field_handle, @File_field_open, @File_B_init_nameString_modeString, @File_B__set_mode_modeString, @File_B_reopen_, @File_B_close_, @File_B_size_, @File_B_read_, @File_B_read_byte_, @File_B_write_textString, @File_init_nameString_modeString, @File__set_mode_modeString, @File_reopen_, @File_close_, @File_size_, @File_read_, @File_read_byte_, @File_write_textString], "hash_tbl" = [@File, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 30 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 16218955235528015952 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "data_size_fn" = "_data_size_File", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileProcessor", "methods" = [], "hash_tbl" = [@Object, @any_typ, @FileProcessor, 18446744073709551615 : i64], "offset_tbl" = [13 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4146660827496349788 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_FileProcessor", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileReader", "methods" = [@FileReader_field_FileReader_0, @FileReader_B_init_, @FileReader_B_process_fileFile, @FileReader_init_, @FileReader_process_fileFile, @FileReader_field_FileReader_0, @FileReader_B_process_fileFile, @FileReader_process_fileFile], "hash_tbl" = [@Object, @any_typ, @FileProcessor, @FileReader], "offset_tbl" = [18 : i32, 10 : i32, 15 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5641023583277533454 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileReader", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileWriter", "methods" = [@FileWriter_field_text, @FileWriter_field_FileWriter_0, @FileWriter_B_init_textString, @FileWriter_B_process_fileFile, @FileWriter_init_textString, @FileWriter_process_fileFile, @FileWriter_field_FileWriter_0, @FileWriter_B_process_fileFile, @FileWriter_process_fileFile], "hash_tbl" = [@Object, @any_typ, @FileProcessor, @FileWriter], "offset_tbl" = [19 : i32, 10 : i32, 16 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 2522433070607690589 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_FileWriter", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileSystem", "methods" = [@FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, @FileSystem_B__Self_read_file_file_nameString, @FileSystem_B__Self_write_file_file_nameString_textString, @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT, @FileSystem__Self_read_file_file_nameString, @FileSystem__Self_write_file_file_nameString_textString], "hash_tbl" = [@Object, @FileSystem, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [17 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 5344209596779946859 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileSystem", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileSystemError", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_line_number", "getter_name" = "FileSystemError_getter_line_number", "setter_name" = "FileSystemError_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_file_name", "getter_name" = "FileSystemError_getter_file_name", "setter_name" = "FileSystemError_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_message", "getter_name" = "FileSystemError_getter_message", "setter_name" = "FileSystemError_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Stacktrace", "parameterization" = "_parameterization_Stacktrace"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_stacktrace", "getter_name" = "FileSystemError_getter_stacktrace", "setter_name" = "FileSystemError_setter_stacktrace"} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_messageString", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb2:
      %4 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb1:
      %5 = "llvm.getelementptr"(%1) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %6 = "mid.checkflag"(%5) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %7 = "llvm.load"(%6) : (!hi.bool) -> i1
      "cf.cond_br"(%7) [^bb2, ^bb2] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb3:
      %8 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %9 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %10 = "llvm.getelementptr"(%8, %9) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %11 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%12) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb4(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      %17 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %18 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %19 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %20 = "llvm.getelementptr"(%18, %19) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %21 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %22 = "llvm.getelementptr"(%20, %21) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%22) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_set_info_line_numberi32_file_nameString", "function_type" = !llvm.func<void (i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb7(%23 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %24 : !llvm.ptr):
      %25 = "mid.invariant"(%24) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %26 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %27 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%27, %26) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %28 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %29 = "mid.checkflag"(%28) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %30 = "llvm.load"(%29) : (!hi.bool) -> i1
      "cf.cond_br"(%30) [^bb9, ^bb9] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb8:
      %31 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %32 = "mid.checkflag"(%31) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %33 = "llvm.load"(%32) : (!hi.bool) -> i1
      "cf.cond_br"(%33) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %34 = "llvm.extractvalue"(%23) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %35 = "llvm.load"(%26) : (!llvm.ptr) -> i32
      %36 = "llvm.getelementptr"(%34, %35) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %37 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%38) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_report_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb12(%39 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %40 : !llvm.ptr):
      %41 = "mid.invariant"(%40) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %42 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %43 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%43, %42) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      %44 = "llvm.extractvalue"(%39) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %45 = "llvm.load"(%42) : (!llvm.ptr) -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %47 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%48) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_print_message_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb15(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      %53 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      %54 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %55 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<28 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %57 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %58 = "llvm.getelementptr"(%56, %57) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%58) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_File", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1]} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_name", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_name", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_name", "getter_name" = "File_getter_name", "setter_name" = "File_setter_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_mode", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_mode", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_mode", "getter_name" = "File_getter_mode", "setter_name" = "File_setter_mode"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_handle", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_handle", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_handle", "getter_name" = "File_getter_handle", "setter_name" = "File_setter_handle"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_open", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_open", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_open", "getter_name" = "File_getter_open", "setter_name" = "File_setter_open"} : () -> ()
    "mid.func"() ({
    ^bb18(%59 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %60 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %61 : !llvm.ptr, %62 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %63 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %64 = "mid.wrap"(%59) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %65 = "hi.cast"(%64) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %66 = "mid.wrap"(%62) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %67 = "hi.cast"(%66) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %68 = "hi.cast"(%67) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%65, %68) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %69 = "mid.wrap"(%63) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %70 = "hi.cast"(%69) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %71 = "hi.cast"(%70) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%65, %71) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %72 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %73 = "hi.cast"(%72) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%65, %73) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
      %74 = "mid.get_field"(%65) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %75 = "mid.unwrap"(%74) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %76 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %77 = "mid.method_call"(%76, %75) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %78 = "hi.cast"(%77) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %79 = "mid.get_field"(%65) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %80 = "mid.unwrap"(%79) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %81 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %82 = "mid.method_call"(%81, %80) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %83 = "hi.cast"(%82) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %84 = "mid.unwrap"(%78) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %85 = "mid.unwrap"(%83) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %86 = "mid.call"(%84, %85) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si32>
      %87 = "hi.cast"(%86) {"from_typ" = !hi.buffer<si32>, "to_typ" = !hi.buffer<si32>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si32>) -> !hi.buffer<si32>
      "mid.set_field"(%65, %87) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">, !hi.buffer<si32>) -> ()
      %88 = "mid.get_field"(%65) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %89 = "mid.checkflag"(%88) {"typ_name" = "nil_typ"} : (!hi.buffer<si32>) -> si1
      %90 = "mid.unwrap"(%89) : (si1) -> i1
      "mid.if"(%90) ({
        %91 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_mjpymquvcm"} : () -> !hi.fatptr<"FileSystemError">
        %92 = "mid.unwrap"(%91) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %93 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%93, %92) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %94 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> si32
        %95 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %96 = "hi.cast"(%95) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %97 = "mid.create_buffer"(%96) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %98 = "mid.refer"(%97) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %99 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %100 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%98, %100, %99) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %101 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %102 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %103 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %104 = "mid.unwrap"(%98) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %105 = "mid.unwrap"(%101) : (si32) -> i32
        %106 = "mid.unwrap"(%102) : (si32) -> i32
        %107 = "mid.unwrap"(%103) : (si32) -> i32
        %108 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %109 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %110 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %111 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %112 = "hi.cast"(%98) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %113 = "mid.unwrap"(%112) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %114 = "hi.cast"(%109) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %115 = "mid.unwrap"(%114) : (si32) -> i32
        %116 = "hi.cast"(%110) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %117 = "mid.unwrap"(%116) : (si32) -> i32
        %118 = "hi.cast"(%111) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %119 = "mid.unwrap"(%118) : (si32) -> i32
        %120 = "mid.unwrap"(%108) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %121 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %122 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %123 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %124 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %125 = "mid.parameterizations_array"(%121, %122, %123, %124) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%125, %120, %113, %115, %117, %119) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %126 = "hi.cast"(%94) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %127 = "mid.unwrap"(%126) : (si32) -> i32
        %128 = "hi.cast"(%108) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %129 = "mid.unwrap"(%128) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %130 = "mid.unwrap"(%91) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %131 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %132 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %133 = "mid.parameterizations_array"(%131, %132) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%133, %130, %127, %129) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %134 = "hi.cast"(%91) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %135 = "mid.unwrap"(%134) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %136 = "mid.coro_yield"(%135) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %137 = "mid.wrap"(%136) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %138 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %139 = "hi.cast"(%138) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%65, %139) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
    }) {"func_name" = "File_init_nameString_modeString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb19(%140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %141 : !llvm.ptr):
      %142 = "mid.invariant"(%141) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %143 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb20] : () -> ()
    ^bb21:
      %144 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%144, %143) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %145 = "llvm.getelementptr"(%141) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %146 = "mid.checkflag"(%145) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %147 = "llvm.load"(%146) : (!hi.bool) -> i1
      "cf.cond_br"(%147) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb20:
      %148 = "llvm.getelementptr"(%141) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %149 = "mid.checkflag"(%148) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %150 = "llvm.load"(%149) : (!hi.bool) -> i1
      "cf.cond_br"(%150) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %151 = "llvm.extractvalue"(%140) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %152 = "llvm.load"(%143) : (!llvm.ptr) -> i32
      %153 = "llvm.getelementptr"(%151, %152) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %154 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %155 = "llvm.getelementptr"(%153, %154) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%155) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_init_nameString_modeString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb24(%156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %157 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %158 : !llvm.ptr, %159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %160 = "mid.wrap"(%156) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %161 = "hi.cast"(%160) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %162 = "mid.wrap"(%159) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %163 = "hi.cast"(%162) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %164 = "hi.cast"(%163) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%161, %164) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %165 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %166 = "mid.get_field"(%161) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %167 = "hi.comparison"(%165, %166) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, !hi.bool) -> si1
      %168 = "mid.unwrap"(%167) : (si1) -> i1
      "mid.if"(%168) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %169 = "mid.unwrap"(%161) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %170 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%170, %169) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    }) {"func_name" = "File__set_mode_modeString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb25(%171 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %172 : !llvm.ptr):
      %173 = "mid.invariant"(%172) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %174 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb26] : () -> ()
    ^bb27:
      %175 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%175, %174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb28] : () -> ()
    ^bb26:
      %176 = "llvm.getelementptr"(%172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %177 = "mid.checkflag"(%176) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %178 = "llvm.load"(%177) : (!hi.bool) -> i1
      "cf.cond_br"(%178) [^bb27, ^bb27] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb28:
      %179 = "llvm.extractvalue"(%171) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %180 = "llvm.load"(%174) : (!llvm.ptr) -> i32
      %181 = "llvm.getelementptr"(%179, %180) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %182 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %183 = "llvm.getelementptr"(%181, %182) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%183) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B__set_mode_modeString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb29(%184 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %185 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %186 : !llvm.ptr):
      %187 = "mid.wrap"(%184) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %188 = "hi.cast"(%187) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %189 = "mid.unwrap"(%188) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %190 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%190, %189) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %191 = "mid.get_field"(%188) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %192 = "mid.unwrap"(%191) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %193 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %194 = "mid.method_call"(%193, %192) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %195 = "hi.cast"(%194) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %196 = "mid.get_field"(%188) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %197 = "mid.unwrap"(%196) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %198 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %199 = "mid.method_call"(%198, %197) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %200 = "hi.cast"(%199) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %201 = "mid.unwrap"(%195) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %202 = "mid.unwrap"(%200) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %203 = "mid.call"(%201, %202) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !hi.buffer<si32>
      %204 = "hi.cast"(%203) {"from_typ" = !hi.buffer<si32>, "to_typ" = !hi.buffer<si32>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si32>) -> !hi.buffer<si32>
      "mid.set_field"(%188, %204) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">, !hi.buffer<si32>) -> ()
      %205 = "mid.get_field"(%188) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %206 = "mid.checkflag"(%205) {"typ_name" = "nil_typ"} : (!hi.buffer<si32>) -> si1
      %207 = "mid.unwrap"(%206) : (si1) -> i1
      "mid.if"(%207) ({
        %208 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_vcyqojaxgo"} : () -> !hi.fatptr<"FileSystemError">
        %209 = "mid.unwrap"(%208) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %210 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%210, %209) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %211 = "mid.literal"() {"value" = 39 : i32, "typ" = i32} : () -> si32
        %212 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %213 = "hi.cast"(%212) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %214 = "mid.create_buffer"(%213) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %215 = "mid.refer"(%214) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %216 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %217 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%215, %217, %216) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %218 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %219 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %220 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %221 = "mid.unwrap"(%215) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %222 = "mid.unwrap"(%218) : (si32) -> i32
        %223 = "mid.unwrap"(%219) : (si32) -> i32
        %224 = "mid.unwrap"(%220) : (si32) -> i32
        %225 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %226 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %227 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %228 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %229 = "hi.cast"(%215) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %230 = "mid.unwrap"(%229) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %231 = "hi.cast"(%226) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %232 = "mid.unwrap"(%231) : (si32) -> i32
        %233 = "hi.cast"(%227) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %234 = "mid.unwrap"(%233) : (si32) -> i32
        %235 = "hi.cast"(%228) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %236 = "mid.unwrap"(%235) : (si32) -> i32
        %237 = "mid.unwrap"(%225) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %238 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %239 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %240 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %241 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %242 = "mid.parameterizations_array"(%238, %239, %240, %241) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%242, %237, %230, %232, %234, %236) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %243 = "hi.cast"(%211) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %244 = "mid.unwrap"(%243) : (si32) -> i32
        %245 = "hi.cast"(%225) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %246 = "mid.unwrap"(%245) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %247 = "mid.unwrap"(%208) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %248 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %249 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %250 = "mid.parameterizations_array"(%248, %249) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%250, %247, %244, %246) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %251 = "hi.cast"(%208) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %252 = "mid.unwrap"(%251) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %253 = "mid.coro_yield"(%252) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %254 = "mid.wrap"(%253) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %255 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %256 = "hi.cast"(%255) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%188, %256) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
    }) {"func_name" = "File_reopen_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb30(%257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %258 : !llvm.ptr):
      %259 = "mid.invariant"(%258) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %260 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb31] : () -> ()
    ^bb31:
      %261 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%261, %260) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb32] : () -> ()
    ^bb32:
      %262 = "llvm.extractvalue"(%257) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %263 = "llvm.load"(%260) : (!llvm.ptr) -> i32
      %264 = "llvm.getelementptr"(%262, %263) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %265 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %266 = "llvm.getelementptr"(%264, %265) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%266) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_reopen_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb33(%267 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %268 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %269 : !llvm.ptr):
      %270 = "mid.wrap"(%267) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %271 = "hi.cast"(%270) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %272 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %273 = "mid.get_field"(%271) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %274 = "hi.comparison"(%272, %273) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, !hi.bool) -> si1
      %275 = "mid.unwrap"(%274) : (si1) -> i1
      "mid.if"(%275) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %276 = "mid.get_field"(%271) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %277 = "mid.unwrap"(%276) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %278 = "mid.call"(%277) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> si32
      %279 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %280 = "hi.cast"(%279) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%271, %280) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
      %281 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
      %282 = "hi.comparison"(%278, %281) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %283 = "mid.unwrap"(%282) : (si1) -> i1
      "mid.if"(%283) ({
        %284 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_pciqvjsakn"} : () -> !hi.fatptr<"FileSystemError">
        %285 = "mid.unwrap"(%284) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %286 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%286, %285) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %287 = "mid.literal"() {"value" = 46 : i32, "typ" = i32} : () -> si32
        %288 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %289 = "hi.cast"(%288) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %290 = "mid.create_buffer"(%289) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %291 = "mid.refer"(%290) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %292 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %293 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%291, %293, %292) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %294 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %295 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %296 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %297 = "mid.unwrap"(%291) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %298 = "mid.unwrap"(%294) : (si32) -> i32
        %299 = "mid.unwrap"(%295) : (si32) -> i32
        %300 = "mid.unwrap"(%296) : (si32) -> i32
        %301 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %302 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %303 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %304 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %305 = "hi.cast"(%291) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %306 = "mid.unwrap"(%305) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %307 = "hi.cast"(%302) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %308 = "mid.unwrap"(%307) : (si32) -> i32
        %309 = "hi.cast"(%303) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %310 = "mid.unwrap"(%309) : (si32) -> i32
        %311 = "hi.cast"(%304) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %312 = "mid.unwrap"(%311) : (si32) -> i32
        %313 = "mid.unwrap"(%301) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %314 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %315 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %316 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %317 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %318 = "mid.parameterizations_array"(%314, %315, %316, %317) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%318, %313, %306, %308, %310, %312) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %319 = "hi.cast"(%287) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %320 = "mid.unwrap"(%319) : (si32) -> i32
        %321 = "hi.cast"(%301) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %322 = "mid.unwrap"(%321) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %323 = "mid.unwrap"(%284) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %324 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %325 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %326 = "mid.parameterizations_array"(%324, %325) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%326, %323, %320, %322) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %327 = "hi.cast"(%284) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %328 = "mid.unwrap"(%327) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %329 = "mid.coro_yield"(%328) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %330 = "mid.wrap"(%329) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
    }) {"func_name" = "File_close_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb34(%331 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %332 : !llvm.ptr):
      %333 = "mid.invariant"(%332) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %334 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb35] : () -> ()
    ^bb35:
      %335 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%335, %334) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb36] : () -> ()
    ^bb36:
      %336 = "llvm.extractvalue"(%331) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %337 = "llvm.load"(%334) : (!llvm.ptr) -> i32
      %338 = "llvm.getelementptr"(%336, %337) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %339 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %340 = "llvm.getelementptr"(%338, %339) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%340) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_close_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb37(%341 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %342 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %343 : !llvm.ptr):
      %344 = "mid.wrap"(%341) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %345 = "hi.cast"(%344) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %346 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %347 = "mid.get_field"(%345) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %348 = "hi.comparison"(%346, %347) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, !hi.bool) -> si1
      %349 = "mid.unwrap"(%348) : (si1) -> i1
      "mid.if"(%349) ({
        %350 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_vpakkqrmyq"} : () -> !hi.fatptr<"FileSystemError">
        %351 = "mid.unwrap"(%350) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %352 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%352, %351) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %353 = "mid.literal"() {"value" = 49 : i32, "typ" = i32} : () -> si32
        %354 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %355 = "hi.cast"(%354) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %356 = "mid.create_buffer"(%355) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %357 = "mid.refer"(%356) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %358 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %359 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%357, %359, %358) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %360 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %361 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %362 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %363 = "mid.unwrap"(%357) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %364 = "mid.unwrap"(%360) : (si32) -> i32
        %365 = "mid.unwrap"(%361) : (si32) -> i32
        %366 = "mid.unwrap"(%362) : (si32) -> i32
        %367 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %368 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %369 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %370 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %371 = "hi.cast"(%357) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %372 = "mid.unwrap"(%371) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %373 = "hi.cast"(%368) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %374 = "mid.unwrap"(%373) : (si32) -> i32
        %375 = "hi.cast"(%369) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %376 = "mid.unwrap"(%375) : (si32) -> i32
        %377 = "hi.cast"(%370) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %378 = "mid.unwrap"(%377) : (si32) -> i32
        %379 = "mid.unwrap"(%367) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %380 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %381 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %382 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %383 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %384 = "mid.parameterizations_array"(%380, %381, %382, %383) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%384, %379, %372, %374, %376, %378) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %385 = "hi.cast"(%353) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %386 = "mid.unwrap"(%385) : (si32) -> i32
        %387 = "hi.cast"(%367) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %388 = "mid.unwrap"(%387) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %389 = "mid.unwrap"(%350) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %390 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %391 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %392 = "mid.parameterizations_array"(%390, %391) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%392, %389, %386, %388) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %393 = "hi.cast"(%350) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %394 = "mid.unwrap"(%393) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %395 = "mid.coro_yield"(%394) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %396 = "mid.wrap"(%395) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %397 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %398 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %399 = "mid.get_field"(%345) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %400 = "mid.unwrap"(%399) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %401 = "mid.call"(%400) {"func_name" = "ftell", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>) -> si64
      %402 = "mid.get_field"(%345) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %403 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> si64
      %404 = "mid.unwrap"(%402) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %405 = "mid.unwrap"(%403) : (si64) -> i64
      %406 = "mid.unwrap"(%397) : (si32) -> i32
      %407 = "mid.call"(%404, %405, %406) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> si32
      %408 = "mid.get_field"(%345) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %409 = "mid.unwrap"(%408) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %410 = "mid.call"(%409) {"func_name" = "ftell", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>) -> si64
      %411 = "mid.get_field"(%345) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %412 = "mid.unwrap"(%411) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %413 = "mid.unwrap"(%401) : (si64) -> i64
      %414 = "mid.unwrap"(%398) : (si32) -> i32
      %415 = "mid.call"(%412, %413, %414) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> si32
      %416 = "hi.cast"(%410) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
      "mid.return"(%416) : (si64) -> ()
    }) {"func_name" = "File_size_", "result_type" = i64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb38(%417 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %418 : !llvm.ptr):
      %419 = "mid.invariant"(%418) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %420 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb39] : () -> ()
    ^bb39:
      %421 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%421, %420) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb40] : () -> ()
    ^bb40:
      %422 = "llvm.extractvalue"(%417) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %423 = "llvm.load"(%420) : (!llvm.ptr) -> i32
      %424 = "llvm.getelementptr"(%422, %423) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %425 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %426 = "llvm.getelementptr"(%424, %425) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%426) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb41(%427 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %428 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %429 : !llvm.ptr):
      %430 = "mid.wrap"(%427) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %431 = "hi.cast"(%430) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %432 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %433 = "mid.get_field"(%431) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %434 = "hi.comparison"(%432, %433) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, !hi.bool) -> si1
      %435 = "mid.unwrap"(%434) : (si1) -> i1
      "mid.if"(%435) ({
        %436 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_delqudimsc"} : () -> !hi.fatptr<"FileSystemError">
        %437 = "mid.unwrap"(%436) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %438 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%438, %437) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %439 = "mid.literal"() {"value" = 59 : i32, "typ" = i32} : () -> si32
        %440 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %441 = "hi.cast"(%440) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %442 = "mid.create_buffer"(%441) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %443 = "mid.refer"(%442) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %444 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %445 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%443, %445, %444) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %446 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %447 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %448 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %449 = "mid.unwrap"(%443) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %450 = "mid.unwrap"(%446) : (si32) -> i32
        %451 = "mid.unwrap"(%447) : (si32) -> i32
        %452 = "mid.unwrap"(%448) : (si32) -> i32
        %453 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %454 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %455 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %456 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %457 = "hi.cast"(%443) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %458 = "mid.unwrap"(%457) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %459 = "hi.cast"(%454) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %460 = "mid.unwrap"(%459) : (si32) -> i32
        %461 = "hi.cast"(%455) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %462 = "mid.unwrap"(%461) : (si32) -> i32
        %463 = "hi.cast"(%456) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %464 = "mid.unwrap"(%463) : (si32) -> i32
        %465 = "mid.unwrap"(%453) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %466 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %467 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %468 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %469 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %470 = "mid.parameterizations_array"(%466, %467, %468, %469) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%470, %465, %458, %460, %462, %464) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %471 = "hi.cast"(%439) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %472 = "mid.unwrap"(%471) : (si32) -> i32
        %473 = "hi.cast"(%453) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %474 = "mid.unwrap"(%473) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %475 = "mid.unwrap"(%436) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %476 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %477 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %478 = "mid.parameterizations_array"(%476, %477) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%478, %475, %472, %474) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %479 = "hi.cast"(%436) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %480 = "mid.unwrap"(%479) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %481 = "mid.coro_yield"(%480) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %482 = "mid.wrap"(%481) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %483 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %484 = "mid.get_field"(%431) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %485 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> si64
      %486 = "mid.unwrap"(%484) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %487 = "mid.unwrap"(%485) : (si64) -> i64
      %488 = "mid.unwrap"(%483) : (si32) -> i32
      %489 = "mid.call"(%486, %487, %488) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> si32
      %490 = "mid.unwrap"(%431) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %491 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %492 = "mid.method_call"(%491, %490) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = i64, "ret_type_unq" = i64} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si64
      %493 = "hi.cast"(%492) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
      %494 = "hi.cast"(%493) {"from_typ" = si64, "to_typ" = si32, "from_typ_name" = "i64_typ", "to_typ_name" = "i32_typ"} : (si64) -> si32
      %495 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %496 = "hi.arithmetic"(%494, %495) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %497 = "hi.cast"(%496) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %498 = "mid.create_buffer"(%497) {"typ" = i8, "region_id" = "single_region_delqudimsc"} : (si64) -> !llvm.ptr
      %499 = "mid.refer"(%498) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %500 = "mid.literal"() {"value" = 1 : i64, "typ" = i64} : () -> si64
      %501 = "mid.get_field"(%431) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %502 = "mid.unwrap"(%499) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %503 = "mid.unwrap"(%500) : (si64) -> i64
      %504 = "mid.unwrap"(%493) : (si64) -> i64
      %505 = "mid.unwrap"(%501) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %506 = "mid.call"(%502, %503, %504, %505) {"func_name" = "fread", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>) -> si64
      %507 = "hi.comparison"(%506, %493) {"op" = "LT", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si1
      %508 = "mid.unwrap"(%507) : (si1) -> i1
      "mid.if"(%508) ({
        %509 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_delqudimsc"} : () -> !hi.fatptr<"FileSystemError">
        %510 = "mid.unwrap"(%509) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %511 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%511, %510) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %512 = "mid.literal"() {"value" = 67 : i32, "typ" = i32} : () -> si32
        %513 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %514 = "hi.cast"(%513) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %515 = "mid.create_buffer"(%514) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %516 = "mid.refer"(%515) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %517 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %518 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%516, %518, %517) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %519 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %520 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %521 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %522 = "mid.unwrap"(%516) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %523 = "mid.unwrap"(%519) : (si32) -> i32
        %524 = "mid.unwrap"(%520) : (si32) -> i32
        %525 = "mid.unwrap"(%521) : (si32) -> i32
        %526 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %527 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %528 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %529 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %530 = "hi.cast"(%516) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %531 = "mid.unwrap"(%530) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %532 = "hi.cast"(%527) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %533 = "mid.unwrap"(%532) : (si32) -> i32
        %534 = "hi.cast"(%528) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %535 = "mid.unwrap"(%534) : (si32) -> i32
        %536 = "hi.cast"(%529) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %537 = "mid.unwrap"(%536) : (si32) -> i32
        %538 = "mid.unwrap"(%526) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %539 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %540 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %541 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %542 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %543 = "mid.parameterizations_array"(%539, %540, %541, %542) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%543, %538, %531, %533, %535, %537) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %544 = "hi.cast"(%512) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %545 = "mid.unwrap"(%544) : (si32) -> i32
        %546 = "hi.cast"(%526) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %547 = "mid.unwrap"(%546) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %548 = "mid.unwrap"(%509) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %549 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %550 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %551 = "mid.parameterizations_array"(%549, %550) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%551, %548, %545, %547) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %552 = "hi.cast"(%509) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %553 = "mid.unwrap"(%552) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %554 = "mid.coro_yield"(%553) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %555 = "mid.wrap"(%554) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %556 = "hi.cast"(%493) {"from_typ" = si64, "to_typ" = si32, "from_typ_name" = "i64_typ", "to_typ_name" = "i32_typ"} : (si64) -> si32
      %557 = "hi.cast"(%499) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %558 = "mid.unwrap"(%557) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %559 = "hi.cast"(%556) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %560 = "mid.unwrap"(%559) : (si32) -> i32
      %561 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %562 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %563 = "mid.parameterizations_array"(%561, %562) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %564 = "mid.class_method_call"(%563, %558, %560) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "class_name" = "String"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32) -> !hi.fatptr<"String">
      %565 = "hi.cast"(%564) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %566 = "hi.cast"(%565) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%566) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "File_read_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb42(%567 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %568 : !llvm.ptr):
      %569 = "mid.invariant"(%568) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %570 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      %571 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%571, %570) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb44] : () -> ()
    ^bb44:
      %572 = "llvm.extractvalue"(%567) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %573 = "llvm.load"(%570) : (!llvm.ptr) -> i32
      %574 = "llvm.getelementptr"(%572, %573) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %575 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %576 = "llvm.getelementptr"(%574, %575) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%576) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_read_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb45(%577 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %579 : !llvm.ptr):
      %580 = "mid.wrap"(%577) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %581 = "hi.cast"(%580) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %582 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %583 = "mid.get_field"(%581) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %584 = "hi.comparison"(%582, %583) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, !hi.bool) -> si1
      %585 = "mid.unwrap"(%584) : (si1) -> i1
      "mid.if"(%585) ({
        %586 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_kcqihtykly"} : () -> !hi.fatptr<"FileSystemError">
        %587 = "mid.unwrap"(%586) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %588 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%588, %587) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %589 = "mid.literal"() {"value" = 71 : i32, "typ" = i32} : () -> si32
        %590 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %591 = "hi.cast"(%590) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %592 = "mid.create_buffer"(%591) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %593 = "mid.refer"(%592) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %594 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %595 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%593, %595, %594) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %596 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %597 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %598 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %599 = "mid.unwrap"(%593) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %600 = "mid.unwrap"(%596) : (si32) -> i32
        %601 = "mid.unwrap"(%597) : (si32) -> i32
        %602 = "mid.unwrap"(%598) : (si32) -> i32
        %603 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %604 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %605 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %606 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %607 = "hi.cast"(%593) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %608 = "mid.unwrap"(%607) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %609 = "hi.cast"(%604) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %610 = "mid.unwrap"(%609) : (si32) -> i32
        %611 = "hi.cast"(%605) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %612 = "mid.unwrap"(%611) : (si32) -> i32
        %613 = "hi.cast"(%606) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %614 = "mid.unwrap"(%613) : (si32) -> i32
        %615 = "mid.unwrap"(%603) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %616 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %617 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %618 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %619 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %620 = "mid.parameterizations_array"(%616, %617, %618, %619) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%620, %615, %608, %610, %612, %614) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %621 = "hi.cast"(%589) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %622 = "mid.unwrap"(%621) : (si32) -> i32
        %623 = "hi.cast"(%603) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %624 = "mid.unwrap"(%623) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %625 = "mid.unwrap"(%586) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %626 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %627 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %628 = "mid.parameterizations_array"(%626, %627) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%628, %625, %622, %624) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %629 = "hi.cast"(%586) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %630 = "mid.unwrap"(%629) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %631 = "mid.coro_yield"(%630) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %632 = "mid.wrap"(%631) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %633 = "mid.get_field"(%581) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %634 = "mid.unwrap"(%633) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %635 = "mid.call"(%634) {"func_name" = "fgetc", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> si32
      %636 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
      %637 = "hi.comparison"(%635, %636) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %638 = "mid.unwrap"(%637) : (si1) -> i1
      "mid.if"(%638) ({
        %639 = "mid.get_field"(%581) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
        %640 = "mid.unwrap"(%639) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
        %641 = "mid.call"(%640) {"func_name" = "ferror", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> si32
        %642 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %643 = "hi.comparison"(%641, %642) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %644 = "mid.unwrap"(%643) : (si1) -> i1
        "mid.if"(%644) ({
          %645 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_kcqihtykly"} : () -> !hi.fatptr<"FileSystemError">
          %646 = "mid.unwrap"(%645) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %647 = "mid.parameterizations_array"() : () -> !llvm.ptr
          "mid.method_call"(%647, %646) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
          %648 = "mid.literal"() {"value" = 74 : i32, "typ" = i32} : () -> si32
          %649 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
          %650 = "hi.cast"(%649) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
          %651 = "mid.create_buffer"(%650) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
          %652 = "mid.refer"(%651) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
          %653 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
          %654 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
          "mid.buffer_set"(%652, %654, %653) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
          %655 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
          %656 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
          %657 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
          %658 = "mid.unwrap"(%652) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
          %659 = "mid.unwrap"(%655) : (si32) -> i32
          %660 = "mid.unwrap"(%656) : (si32) -> i32
          %661 = "mid.unwrap"(%657) : (si32) -> i32
          %662 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
          %663 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
          %664 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
          %665 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
          %666 = "hi.cast"(%652) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
          %667 = "mid.unwrap"(%666) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
          %668 = "hi.cast"(%663) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %669 = "mid.unwrap"(%668) : (si32) -> i32
          %670 = "hi.cast"(%664) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %671 = "mid.unwrap"(%670) : (si32) -> i32
          %672 = "hi.cast"(%665) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %673 = "mid.unwrap"(%672) : (si32) -> i32
          %674 = "mid.unwrap"(%662) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %675 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %676 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %677 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %678 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %679 = "mid.parameterizations_array"(%675, %676, %677, %678) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%679, %674, %667, %669, %671, %673) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
          %680 = "hi.cast"(%648) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %681 = "mid.unwrap"(%680) : (si32) -> i32
          %682 = "hi.cast"(%662) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
          %683 = "mid.unwrap"(%682) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %684 = "mid.unwrap"(%645) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %685 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %686 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
          %687 = "mid.parameterizations_array"(%685, %686) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%687, %684, %681, %683) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
          %688 = "hi.cast"(%645) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
          %689 = "mid.unwrap"(%688) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %690 = "mid.coro_yield"(%689) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
          %691 = "mid.wrap"(%690) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
        }) : (i1) -> ()
        %692 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %693 = "hi.cast"(%692) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[si8, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[si8, !hi.nil]>
        "mid.return"(%693) : (!hi.union<[si8, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %694 = "hi.cast"(%635) {"from_typ" = si32, "to_typ" = si8, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (si32) -> si8
      %695 = "hi.cast"(%694) {"from_typ" = si8, "to_typ" = !hi.union<[si8, !hi.nil]>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (si8) -> !hi.union<[si8, !hi.nil]>
      "mid.return"(%695) : (!hi.union<[si8, !hi.nil]>) -> ()
    }) {"func_name" = "File_read_byte_", "result_type" = !llvm.struct<(!llvm.ptr, i8)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb46(%696 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %697 : !llvm.ptr):
      %698 = "mid.invariant"(%697) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %699 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb47] : () -> ()
    ^bb47:
      %700 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%700, %699) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb48] : () -> ()
    ^bb48:
      %701 = "llvm.extractvalue"(%696) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %702 = "llvm.load"(%699) : (!llvm.ptr) -> i32
      %703 = "llvm.getelementptr"(%701, %702) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %704 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %705 = "llvm.getelementptr"(%703, %704) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%705) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_read_byte_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb49(%706 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %707 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %708 : !llvm.ptr, %709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %710 = "mid.wrap"(%706) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %711 = "hi.cast"(%710) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %712 = "mid.wrap"(%709) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %713 = "hi.cast"(%712) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %714 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %715 = "mid.get_field"(%711) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %716 = "hi.comparison"(%714, %715) {"op" = "EQ", "lhs_type" = !hi.bool, "rhs_type" = !hi.bool} : (!hi.bool, !hi.bool) -> si1
      %717 = "mid.unwrap"(%716) : (si1) -> i1
      "mid.if"(%717) ({
        %718 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_aflxqvduzi"} : () -> !hi.fatptr<"FileSystemError">
        %719 = "mid.unwrap"(%718) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %720 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%720, %719) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %721 = "mid.literal"() {"value" = 80 : i32, "typ" = i32} : () -> si32
        %722 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %723 = "hi.cast"(%722) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %724 = "mid.create_buffer"(%723) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %725 = "mid.refer"(%724) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %726 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %727 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%725, %727, %726) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %728 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %729 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %730 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %731 = "mid.unwrap"(%725) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %732 = "mid.unwrap"(%728) : (si32) -> i32
        %733 = "mid.unwrap"(%729) : (si32) -> i32
        %734 = "mid.unwrap"(%730) : (si32) -> i32
        %735 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %736 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %737 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %738 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %739 = "hi.cast"(%725) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %740 = "mid.unwrap"(%739) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %741 = "hi.cast"(%736) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %742 = "mid.unwrap"(%741) : (si32) -> i32
        %743 = "hi.cast"(%737) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %744 = "mid.unwrap"(%743) : (si32) -> i32
        %745 = "hi.cast"(%738) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %746 = "mid.unwrap"(%745) : (si32) -> i32
        %747 = "mid.unwrap"(%735) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %748 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %749 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %750 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %751 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %752 = "mid.parameterizations_array"(%748, %749, %750, %751) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%752, %747, %740, %742, %744, %746) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %753 = "hi.cast"(%721) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %754 = "mid.unwrap"(%753) : (si32) -> i32
        %755 = "hi.cast"(%735) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %756 = "mid.unwrap"(%755) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %757 = "mid.unwrap"(%718) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %758 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %759 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %760 = "mid.parameterizations_array"(%758, %759) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%760, %757, %754, %756) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %761 = "hi.cast"(%718) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %762 = "mid.unwrap"(%761) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %763 = "mid.coro_yield"(%762) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %764 = "mid.wrap"(%763) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %765 = "mid.unwrap"(%713) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %766 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %767 = "mid.method_call"(%766, %765) {"offset" = 24 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %768 = "hi.cast"(%767) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %769 = "hi.cast"(%768) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %770 = "mid.literal"() {"value" = 1 : i64, "typ" = i64} : () -> si64
      %771 = "mid.unwrap"(%713) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %772 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %773 = "mid.method_call"(%772, %771) {"offset" = 13 : i32, "vptrs" = [], "vtable_size" = 314 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<si8>
      %774 = "hi.cast"(%773) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %775 = "mid.get_field"(%711) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<si32>
      %776 = "mid.unwrap"(%774) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %777 = "mid.unwrap"(%770) : (si64) -> i64
      %778 = "mid.unwrap"(%769) : (si64) -> i64
      %779 = "mid.unwrap"(%775) : (!hi.buffer<si32>) -> !llvm.struct<(!llvm.ptr)>
      %780 = "mid.call"(%776, %777, %778, %779) {"func_name" = "fwrite", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>) -> si64
      %781 = "hi.comparison"(%780, %769) {"op" = "LT", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si1
      %782 = "mid.unwrap"(%781) : (si1) -> i1
      "mid.if"(%782) ({
        %783 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 4 : i32, "region_id" = "single_region_aflxqvduzi"} : () -> !hi.fatptr<"FileSystemError">
        %784 = "mid.unwrap"(%783) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %785 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%785, %784) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %786 = "mid.literal"() {"value" = 84 : i32, "typ" = i32} : () -> si32
        %787 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %788 = "hi.cast"(%787) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %789 = "mid.create_buffer"(%788) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %790 = "mid.refer"(%789) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %791 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:/Users/PaulK/OneDrive/Documents/PL/PyPL/lib/files.mini"} : () -> !llvm.ptr
        %792 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%790, %792, %791) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %793 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %794 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %795 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %796 = "mid.unwrap"(%790) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %797 = "mid.unwrap"(%793) : (si32) -> i32
        %798 = "mid.unwrap"(%794) : (si32) -> i32
        %799 = "mid.unwrap"(%795) : (si32) -> i32
        %800 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %801 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %802 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
        %803 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> si32
        %804 = "hi.cast"(%790) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %805 = "mid.unwrap"(%804) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %806 = "hi.cast"(%801) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %807 = "mid.unwrap"(%806) : (si32) -> i32
        %808 = "hi.cast"(%802) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %809 = "mid.unwrap"(%808) : (si32) -> i32
        %810 = "hi.cast"(%803) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %811 = "mid.unwrap"(%810) : (si32) -> i32
        %812 = "mid.unwrap"(%800) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %813 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %814 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %815 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %816 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %817 = "mid.parameterizations_array"(%813, %814, %815, %816) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%817, %812, %805, %807, %809, %811) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %818 = "hi.cast"(%786) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %819 = "mid.unwrap"(%818) : (si32) -> i32
        %820 = "hi.cast"(%800) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %821 = "mid.unwrap"(%820) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %822 = "mid.unwrap"(%783) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %823 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %824 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %825 = "mid.parameterizations_array"(%823, %824) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%825, %822, %819, %821) {"offset" = 6 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 28 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %826 = "hi.cast"(%783) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %827 = "mid.unwrap"(%826) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %828 = "mid.coro_yield"(%827) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %829 = "mid.wrap"(%828) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %830 = "hi.cast"(%780) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
      "mid.return"(%830) : (si64) -> ()
    }) {"func_name" = "File_write_textString", "result_type" = i64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb50(%831 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %832 : !llvm.ptr):
      %833 = "mid.invariant"(%832) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %834 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb51] : () -> ()
    ^bb52:
      %835 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%835, %834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb53] : () -> ()
    ^bb51:
      %836 = "llvm.getelementptr"(%832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %837 = "mid.checkflag"(%836) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %838 = "llvm.load"(%837) : (!hi.bool) -> i1
      "cf.cond_br"(%838) [^bb52, ^bb52] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %839 = "llvm.extractvalue"(%831) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %840 = "llvm.load"(%834) : (!llvm.ptr) -> i32
      %841 = "llvm.getelementptr"(%839, %840) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %842 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %843 = "llvm.getelementptr"(%841, %842) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%843) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_write_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileProcessor", "types" = [!llvm.ptr]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FileProcessor_field_FileProcessor_0"} : () -> ()
    "mid.func"() ({
    ^bb54(%844 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %845 : !llvm.ptr):
      %846 = "mid.invariant"(%845) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %847 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb55] : () -> ()
    ^bb56:
      %848 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%848, %847) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb57] : () -> ()
    ^bb55:
      %849 = "llvm.getelementptr"(%845) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %850 = "mid.checkflag"(%849) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %851 = "llvm.load"(%850) : (!hi.bool) -> i1
      "cf.cond_br"(%851) [^bb56, ^bb56] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb57:
      %852 = "llvm.extractvalue"(%844) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %853 = "llvm.load"(%847) : (!llvm.ptr) -> i32
      %854 = "llvm.getelementptr"(%852, %853) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %855 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %856 = "llvm.getelementptr"(%854, %855) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%856) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileProcessor_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileReader", "types" = []} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FileReader_field_FileReader_0", "id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> ()
    "mid.func"() ({
    ^bb58(%857 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %859 : !llvm.ptr):
      %860 = "mid.wrap"(%857) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileReader">
      %861 = "hi.cast"(%860) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.fatptr<"FileReader">, "from_typ_name" = "FileReader", "to_typ_name" = "FileReader"} : (!hi.fatptr<"FileReader">) -> !hi.fatptr<"FileReader">
    }) {"func_name" = "FileReader_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb59(%862 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %863 : !llvm.ptr):
      %864 = "mid.invariant"(%863) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %865 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb60] : () -> ()
    ^bb60:
      %866 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%866, %865) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb61] : () -> ()
    ^bb61:
      %867 = "llvm.extractvalue"(%862) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %868 = "llvm.load"(%865) : (!llvm.ptr) -> i32
      %869 = "llvm.getelementptr"(%867, %868) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %870 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %871 = "llvm.getelementptr"(%869, %870) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%871) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileReader_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb62(%872 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %873 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %874 : !llvm.ptr, %875 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %876 = "mid.wrap"(%872) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileReader">
      %877 = "hi.cast"(%876) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.fatptr<"FileReader">, "from_typ_name" = "FileReader", "to_typ_name" = "FileReader"} : (!hi.fatptr<"FileReader">) -> !hi.fatptr<"FileReader">
      %878 = "mid.wrap"(%875) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %879 = "hi.cast"(%878) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %880 = "mid.unwrap"(%879) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %881 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %882 = "mid.method_call"(%881, %880) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %883 = "hi.cast"(%882) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %884 = "hi.cast"(%883) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.type_param<"T", !hi.any, "FileProcessor">, "from_typ_name" = "String", "to_typ_name" = "any_typ"} : (!hi.fatptr<"String">) -> !hi.type_param<"T", !hi.any, "FileProcessor">
      "mid.return"(%884) : (!hi.type_param<"T", !hi.any, "FileProcessor">) -> ()
    }) {"func_name" = "FileReader_process_fileFile", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb63(%885 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %886 : !llvm.ptr):
      %887 = "mid.invariant"(%886) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %888 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb64] : () -> ()
    ^bb65:
      %889 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%889, %888) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb66] : () -> ()
    ^bb64:
      %890 = "llvm.getelementptr"(%886) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %891 = "mid.checkflag"(%890) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %892 = "llvm.load"(%891) : (!hi.bool) -> i1
      "cf.cond_br"(%892) [^bb65, ^bb65] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb66:
      %893 = "llvm.extractvalue"(%885) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %894 = "llvm.load"(%888) : (!llvm.ptr) -> i32
      %895 = "llvm.getelementptr"(%893, %894) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %896 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %897 = "llvm.getelementptr"(%895, %896) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%897) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileReader_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileWriter", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileWriter_getter_text", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileWriter_setter_text", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileWriter_field_text", "getter_name" = "FileWriter_getter_text", "setter_name" = "FileWriter_setter_text"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "FileWriter_field_FileWriter_0", "id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["i64"]} : () -> ()
    "mid.func"() ({
    ^bb67(%898 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %899 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %900 : !llvm.ptr, %901 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %902 = "mid.wrap"(%898) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileWriter">
      %903 = "hi.cast"(%902) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.fatptr<"FileWriter">, "from_typ_name" = "FileWriter", "to_typ_name" = "FileWriter"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"FileWriter">
      %904 = "mid.wrap"(%901) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %905 = "hi.cast"(%904) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %906 = "hi.cast"(%905) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%903, %906) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"FileWriter">, !hi.fatptr<"String">) -> ()
    }) {"func_name" = "FileWriter_init_textString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb68(%907 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %908 : !llvm.ptr):
      %909 = "mid.invariant"(%908) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %910 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb69] : () -> ()
    ^bb70:
      %911 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%911, %910) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb71] : () -> ()
    ^bb69:
      %912 = "llvm.getelementptr"(%908) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %913 = "mid.checkflag"(%912) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %914 = "llvm.load"(%913) : (!hi.bool) -> i1
      "cf.cond_br"(%914) [^bb70, ^bb70] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb71:
      %915 = "llvm.extractvalue"(%907) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %916 = "llvm.load"(%910) : (!llvm.ptr) -> i32
      %917 = "llvm.getelementptr"(%915, %916) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %918 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %919 = "llvm.getelementptr"(%917, %918) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%919) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileWriter_B_init_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb72(%920 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %921 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %922 : !llvm.ptr, %923 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %924 = "mid.wrap"(%920) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileWriter">
      %925 = "hi.cast"(%924) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.fatptr<"FileWriter">, "from_typ_name" = "FileWriter", "to_typ_name" = "FileWriter"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"FileWriter">
      %926 = "mid.wrap"(%923) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %927 = "hi.cast"(%926) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %928 = "mid.get_field"(%925) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"String">
      %929 = "hi.cast"(%928) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %930 = "mid.unwrap"(%929) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %931 = "mid.unwrap"(%927) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %932 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %933 = "mid.parameterizations_array"(%932) : (!llvm.ptr) -> !llvm.ptr
      %934 = "mid.method_call"(%933, %931, %930) {"offset" = 11 : i32, "vptrs" = [#none], "vtable_size" = 20 : i64, "ret_type" = i64, "ret_type_unq" = i64} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si64
      %935 = "hi.cast"(%934) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
      %936 = "hi.cast"(%935) {"from_typ" = si64, "to_typ" = !hi.type_param<"T", !hi.any, "FileProcessor">, "from_typ_name" = "i64_typ", "to_typ_name" = "any_typ"} : (si64) -> !hi.type_param<"T", !hi.any, "FileProcessor">
      "mid.return"(%936) : (!hi.type_param<"T", !hi.any, "FileProcessor">) -> ()
    }) {"func_name" = "FileWriter_process_fileFile", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb73(%937 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %938 : !llvm.ptr):
      %939 = "mid.invariant"(%938) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %940 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb74] : () -> ()
    ^bb75:
      %941 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%941, %940) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb76] : () -> ()
    ^bb74:
      %942 = "llvm.getelementptr"(%938) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %943 = "mid.checkflag"(%942) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %944 = "llvm.load"(%943) : (!hi.bool) -> i1
      "cf.cond_br"(%944) [^bb75, ^bb75] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb76:
      %945 = "llvm.extractvalue"(%937) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %946 = "llvm.load"(%940) : (!llvm.ptr) -> i32
      %947 = "llvm.getelementptr"(%945, %946) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %948 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %949 = "llvm.getelementptr"(%947, %948) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%949) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileWriter_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileSystem", "types" = []} : () -> ()
    "mid.arg_passer"() {"func_name" = "coroutine_nwrkzaxihf_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : () -> ()
    "mid.buffer_filler"() {"func_name" = "coroutine_nwrkzaxihf_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : () -> ()
    "mid.func"() ({
    ^bb77(%950 : !llvm.ptr, %951 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %953 : !llvm.struct<(!llvm.ptr, i160)>):
      %954 = "mid.wrap"(%951) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %955 = "hi.cast"(%954) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %956 = "mid.wrap"(%952) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %957 = "hi.cast"(%956) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %958 = "mid.wrap"(%953) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>
      %959 = "hi.cast"(%958) {"from_typ" = !hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>, "to_typ" = !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, "from_typ_name" = "union_typ", "to_typ_name" = "function_typ"} : (!hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>) -> !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>
      %960 = "mid.unwrap"(%955) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %961 = "mid.unwrap"(%957) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %962 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "class_name" = "File", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"File">
      %963 = "hi.cast"(%955) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %964 = "mid.unwrap"(%963) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %965 = "hi.cast"(%957) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %966 = "mid.unwrap"(%965) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %967 = "mid.unwrap"(%962) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %968 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %969 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %970 = "mid.parameterizations_array"(%968, %969) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%970, %967, %964, %966) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %971 = "mid.refer"(%962) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %972 = "mid.unwrap"(%971) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %973 = "mid.coro_create"(%959, %972) {"arg_passer" = @coroutine_nwrkzaxihf_passer, "buffer_filler" = @coroutine_nwrkzaxihf_buffer_filler} : (!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>
      %974 = "mid.refer"(%973) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>) -> !hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>
      %975 = "mid.coro_call"(%974) : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %976 = "mid.wrap"(%975) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.any
      %977 = "mid.unwrap"(%971) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %978 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%978, %977) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %979 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %980 = "mid.unwrap"(%979) : (!hi.bool) -> i1
      "mid.if"(%980) ({
        %981 = "hi.cast"(%976) {"from_typ" = !hi.any, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "any_typ", "to_typ_name" = "Exception"} : (!hi.any) -> !hi.fatptr<"Exception">
        %982 = "hi.cast"(%981) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %983 = "mid.unwrap"(%982) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %984 = "mid.coro_yield"(%983) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %985 = "mid.wrap"(%984) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %986 = "hi.cast"(%981) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.any, "from_typ_name" = "Exception", "to_typ_name" = "any_typ"} : (!hi.fatptr<"Exception">) -> !hi.any
        "mid.assign"(%976, %986) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.any, !hi.any) -> ()
      }) : (i1) -> ()
      %987 = "llvm.load"(%974) : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>) -> !llvm.ptr
      %988 = "mid.coro_get_result"(%987) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %989 = "mid.wrap"(%988) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>
      %990 = "llvm.getelementptr"(%950) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %991 = "llvm.load"(%990) : (!llvm.ptr) -> !llvm.ptr
      %992 = "mid.parameterization_indexation"(%991) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
      %993 = "mid.checkflag"(%989) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>) -> si1
      %994 = "mid.unwrap"(%993) : (si1) -> i1
      "mid.if"(%994) ({
        %995 = "hi.cast"(%989) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>) -> !hi.type_param<"T", !hi.any, "FileSystem">
        %996 = "hi.cast"(%995) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
        "mid.return"(%996) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
      }) : (i1) -> ()
      %997 = "hi.cast"(%989) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>) -> !hi.nil
    }) {"func_name" = "FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb78(%998 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %999 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1000 = "mid.wrap"(%998) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>
      %1001 = "mid.wrap"(%999) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %1002 = "hi.cast"(%1001) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %1003 = "mid.unwrap"(%1002) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1004 = "mid.unwrap"(%1000) : (!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1005 = "mid.parameterization"() {"id_hierarchy" = ["File"], "name_hierarchy" = ["File"]} : () -> !llvm.ptr
      %1006 = "mid.parameterizations_array"(%1005) : (!llvm.ptr) -> !llvm.ptr
      %1007 = "mid.method_call"(%1006, %1004, %1003) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"T", !hi.any, "FileProcessor">
      %1008 = "hi.cast"(%1007) {"from_typ" = !hi.type_param<"T", !hi.any, "FileProcessor">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileProcessor">) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1009 = "hi.cast"(%1008) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
      "mid.return"(%1009) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
    }) {"func_name" = "_functionliteral_mamudijlle", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.arg_passer"() {"func_name" = "coroutine_ttiuhispmw_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
    "mid.buffer_filler"() {"func_name" = "coroutine_ttiuhispmw_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
    "mid.func"() ({
    ^bb79(%1010 : !llvm.ptr, %1011 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1012 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1013 : !llvm.struct<(!llvm.ptr, i160)>):
      %1014 = "mid.wrap"(%1011) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1015 = "hi.cast"(%1014) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1016 = "mid.wrap"(%1012) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1017 = "hi.cast"(%1016) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1018 = "mid.wrap"(%1013) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>
      %1019 = "hi.cast"(%1018) {"from_typ" = !hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>, "to_typ" = !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, "from_typ_name" = "union_typ", "to_typ_name" = "FileProcessor"} : (!hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>) -> !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>
      %1020 = "mid.unwrap"(%1015) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1021 = "mid.unwrap"(%1017) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1022 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "class_name" = "File", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"File">
      %1023 = "hi.cast"(%1015) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1024 = "mid.unwrap"(%1023) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1025 = "hi.cast"(%1017) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1026 = "mid.unwrap"(%1025) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1027 = "mid.unwrap"(%1022) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1028 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1029 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1030 = "mid.parameterizations_array"(%1028, %1029) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1030, %1027, %1024, %1026) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1031 = "mid.refer"(%1022) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %1032 = "mid.addr_of"() {"global_name" = @_functionliteral_mamudijlle} : () -> !llvm.ptr
      %1033 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "llvm.store"(%1032, %1033) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
      %1034 = "mid.unwrap"(%1019) : (!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1035 = "mid.unwrap"(%1031) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1036 = "mid.coro_create"(%1033, %1034, %1035) {"arg_passer" = @coroutine_ttiuhispmw_passer, "buffer_filler" = @coroutine_ttiuhispmw_buffer_filler} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>
      %1037 = "mid.refer"(%1036) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>) -> !hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>
      %1038 = "mid.coro_call"(%1037) : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1039 = "mid.wrap"(%1038) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      %1040 = "mid.unwrap"(%1031) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1041 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1041, %1040) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1042 = "mid.checkflag"(%1039) {"typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> si1
      %1043 = "mid.unwrap"(%1042) : (si1) -> i1
      %1044 = "hi.cast"(%1033) {"from_typ" = !hi.function<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.fatptr<"File">], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.type_param<"T", !hi.any, "FileSystem">>, "to_typ" = !hi.function<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.fatptr<"File">], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.type_param<"T", !hi.any, "FileSystem">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.fatptr<"File">], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.type_param<"T", !hi.any, "FileSystem">>
      "mid.if"(%1043) ({
        %1045 = "hi.cast"(%1039) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "union_typ", "to_typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.fatptr<"Exception">
        %1046 = "hi.cast"(%1045) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %1047 = "mid.unwrap"(%1046) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1048 = "mid.coro_yield"(%1047) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1049 = "mid.wrap"(%1048) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %1050 = "hi.cast"(%1045) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        "mid.assign"(%1039, %1050) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1051 = "llvm.load"(%1037) : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>>) -> !llvm.ptr
      %1052 = "mid.coro_get_result"(%1051) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %1053 = "mid.wrap"(%1052) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>
      %1054 = "mid.wrap"(%1013) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.ptr
      %1055 = "mid.get_type_field"(%1054) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32} : (!llvm.ptr) -> !hi.reified_type
      %1056 = "mid.checkflag"(%1053) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>) -> si1
      %1057 = "mid.unwrap"(%1056) : (si1) -> i1
      "mid.if"(%1057) ({
        %1058 = "hi.cast"(%1053) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>) -> !hi.type_param<"T", !hi.any, "FileSystem">
        %1059 = "hi.cast"(%1058) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
        "mid.return"(%1059) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
      }) : (i1) -> ()
      %1060 = "hi.cast"(%1053) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "FileSystem">]>) -> !hi.nil
    }) {"func_name" = "FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb80(%1061 : !llvm.ptr):
      %1062 = "mid.invariant"(%1061) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1063 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb81] : () -> ()
    ^bb82:
      %1064 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%1064, %1063) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb83] : () -> ()
    ^bb84:
      %1065 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%1065, %1063) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb83] : () -> ()
    ^bb85:
      %1066 = "llvm.getelementptr"(%1061) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1067 = "mid.checkflag"(%1066) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1068 = "llvm.load"(%1067) : (!hi.bool) -> i1
      "cf.cond_br"(%1068) [^bb82, ^bb86] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb86:
      %1069 = "llvm.getelementptr"(%1061) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1070 = "mid.checkflag"(%1069) {"typ_name" = "FileProcessor"} : (!llvm.ptr) -> !hi.bool
      %1071 = "llvm.load"(%1070) : (!hi.bool) -> i1
      "cf.cond_br"(%1071) [^bb84, ^bb84] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %1072 = "llvm.getelementptr"(%1061) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1073 = "mid.checkflag"(%1072) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1074 = "llvm.load"(%1073) : (!hi.bool) -> i1
      "cf.cond_br"(%1074) [^bb85, ^bb85] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb81:
      %1075 = "llvm.getelementptr"(%1061) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1076 = "mid.checkflag"(%1075) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1077 = "llvm.load"(%1076) : (!hi.bool) -> i1
      "cf.cond_br"(%1077) [^bb87, ^bb87] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %1078 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1079 = "llvm.load"(%1063) : (!llvm.ptr) -> i32
      %1080 = "llvm.getelementptr"(%1078, %1079) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1081 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1082 = "llvm.getelementptr"(%1080, %1081) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1082) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb88(%1083 : !llvm.ptr, %1084 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1085 = "mid.wrap"(%1084) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1086 = "hi.cast"(%1085) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1087 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %1088 = "hi.cast"(%1087) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1089 = "mid.create_buffer"(%1088) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %1090 = "mid.refer"(%1089) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1091 = "mid.literal"() {"typ" = !llvm.array<2 x i8>, "value" = "rb"} : () -> !llvm.ptr
      %1092 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1090, %1092, %1091) {"typ" = !llvm.array<2 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %1093 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %1094 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %1095 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %1096 = "mid.unwrap"(%1090) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1097 = "mid.unwrap"(%1093) : (si32) -> i32
      %1098 = "mid.unwrap"(%1094) : (si32) -> i32
      %1099 = "mid.unwrap"(%1095) : (si32) -> i32
      %1100 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1101 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %1102 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %1103 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %1104 = "hi.cast"(%1090) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1105 = "mid.unwrap"(%1104) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1106 = "hi.cast"(%1101) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1107 = "mid.unwrap"(%1106) : (si32) -> i32
      %1108 = "hi.cast"(%1102) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1109 = "mid.unwrap"(%1108) : (si32) -> i32
      %1110 = "hi.cast"(%1103) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1111 = "mid.unwrap"(%1110) : (si32) -> i32
      %1112 = "mid.unwrap"(%1100) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1113 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1114 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1115 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1116 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1117 = "mid.parameterizations_array"(%1113, %1114, %1115, %1116) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1117, %1112, %1105, %1107, %1109, %1111) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1118 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "FileReader", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileReader">
      %1119 = "mid.unwrap"(%1118) : (!hi.fatptr<"FileReader">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1120 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1120, %1119) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1121 = "hi.cast"(%1086) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1122 = "mid.unwrap"(%1121) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1123 = "hi.cast"(%1100) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1124 = "mid.unwrap"(%1123) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1125 = "hi.cast"(%1118) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>, "from_typ_name" = "FileReader", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileReader">) -> !hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>
      %1126 = "mid.unwrap"(%1125) : (!hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1127 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1128 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1129 = "mid.parameterization"() {"id_hierarchy" = ["FileReader"], "name_hierarchy" = ["FileReader"]} : () -> !llvm.ptr
      %1130 = "mid.parameterizations_array"(%1127, %1128, %1129) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1131 = "mid.class_method_call"(%1130, %1122, %1124, %1126) {"offset" = 0 : i32, "vptrs" = [#none, #none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1132 = "hi.cast"(%1131) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "any_typ", "to_typ_name" = "String"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.fatptr<"String">
      %1133 = "hi.cast"(%1132) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%1133) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "FileSystem__Self_read_file_file_nameString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb89(%1134 : !llvm.ptr):
      %1135 = "mid.invariant"(%1134) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1136 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb90] : () -> ()
    ^bb91:
      %1137 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1137, %1136) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb92] : () -> ()
    ^bb90:
      %1138 = "llvm.getelementptr"(%1134) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1139 = "mid.checkflag"(%1138) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1140 = "llvm.load"(%1139) : (!hi.bool) -> i1
      "cf.cond_br"(%1140) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb92:
      %1141 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1142 = "llvm.load"(%1136) : (!llvm.ptr) -> i32
      %1143 = "llvm.getelementptr"(%1141, %1142) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1144 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1145 = "llvm.getelementptr"(%1143, %1144) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1145) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_read_file_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb93(%1146 : !llvm.ptr, %1147 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1148 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1149 = "mid.wrap"(%1147) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1150 = "hi.cast"(%1149) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1151 = "mid.wrap"(%1148) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1152 = "hi.cast"(%1151) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1153 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %1154 = "hi.cast"(%1153) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1155 = "mid.create_buffer"(%1154) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %1156 = "mid.refer"(%1155) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1157 = "mid.literal"() {"typ" = !llvm.array<2 x i8>, "value" = "wb"} : () -> !llvm.ptr
      %1158 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1156, %1158, %1157) {"typ" = !llvm.array<2 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %1159 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %1160 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %1161 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %1162 = "mid.unwrap"(%1156) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1163 = "mid.unwrap"(%1159) : (si32) -> i32
      %1164 = "mid.unwrap"(%1160) : (si32) -> i32
      %1165 = "mid.unwrap"(%1161) : (si32) -> i32
      %1166 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1167 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %1168 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %1169 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %1170 = "hi.cast"(%1156) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1171 = "mid.unwrap"(%1170) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1172 = "hi.cast"(%1167) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1173 = "mid.unwrap"(%1172) : (si32) -> i32
      %1174 = "hi.cast"(%1168) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1175 = "mid.unwrap"(%1174) : (si32) -> i32
      %1176 = "hi.cast"(%1169) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1177 = "mid.unwrap"(%1176) : (si32) -> i32
      %1178 = "mid.unwrap"(%1166) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1179 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1180 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1181 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1182 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1183 = "mid.parameterizations_array"(%1179, %1180, %1181, %1182) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1183, %1178, %1171, %1173, %1175, %1177) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1184 = "mid.unwrap"(%1152) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1185 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileWriter", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileWriter">
      %1186 = "hi.cast"(%1152) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1187 = "mid.unwrap"(%1186) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1188 = "mid.unwrap"(%1185) : (!hi.fatptr<"FileWriter">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1189 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1190 = "mid.parameterizations_array"(%1189) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1190, %1188, %1187) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1191 = "hi.cast"(%1150) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1192 = "mid.unwrap"(%1191) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1193 = "hi.cast"(%1166) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1194 = "mid.unwrap"(%1193) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1195 = "hi.cast"(%1185) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>, "from_typ_name" = "FileWriter", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileWriter">) -> !hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>
      %1196 = "mid.unwrap"(%1195) : (!hi.union<[!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1197 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1198 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1199 = "mid.parameterization"() {"id_hierarchy" = ["FileWriter"], "name_hierarchy" = ["FileWriter"]} : () -> !llvm.ptr
      %1200 = "mid.parameterizations_array"(%1197, %1198, %1199) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1201 = "mid.class_method_call"(%1200, %1192, %1194, %1196) {"offset" = 0 : i32, "vptrs" = [#none, #none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1202 = "hi.cast"(%1201) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = si64, "from_typ_name" = "any_typ", "to_typ_name" = "i64_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> si64
    }) {"func_name" = "FileSystem__Self_write_file_file_nameString_textString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb94(%1203 : !llvm.ptr):
      %1204 = "mid.invariant"(%1203) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1205 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb95] : () -> ()
    ^bb96:
      %1206 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1206, %1205) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb97] : () -> ()
    ^bb98:
      %1207 = "llvm.getelementptr"(%1203) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1208 = "mid.checkflag"(%1207) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1209 = "llvm.load"(%1208) : (!hi.bool) -> i1
      "cf.cond_br"(%1209) [^bb96, ^bb96] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb95:
      %1210 = "llvm.getelementptr"(%1203) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1211 = "mid.checkflag"(%1210) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1212 = "llvm.load"(%1211) : (!hi.bool) -> i1
      "cf.cond_br"(%1212) [^bb98, ^bb98] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb97:
      %1213 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1214 = "llvm.load"(%1205) : (!llvm.ptr) -> i32
      %1215 = "llvm.getelementptr"(%1213, %1214) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1216 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1217 = "llvm.getelementptr"(%1215, %1216) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1217) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_write_file_file_nameString_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "std"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Math"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Blocking"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Channel"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Array"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ArrayIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystemError"} : () -> ()
    "mid.external_typedef"() {"class_name" = "File"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileProcessor"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileReader"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileWriter"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystem"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
  }
  builtin.module attributes  {"sym_name" = "hash_benchmark"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ConstantTimeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "CoroIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerated"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Mapper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filtered"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Filterer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chained"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Chainer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaved"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Interleaver"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipped"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Zipper"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Products"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Productizer"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "List"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Indexable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IndexableCollection"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range"} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Unicode"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "String"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character"} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Stacktrace"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception"} : () -> ()
    "mid.external_typedef"() {"class_name" = "InvalidUTF8Error"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds"} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails"} : () -> ()
    "mid.external_typedef"() {"class_name" = "KeyNotFound"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Map"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapKeys"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapValues"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapKeyIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapValueIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "HashMap"} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Entry"} : () -> ()
    "mid.external_typedef"() {"class_name" = "SwissTable"} : () -> ()
    "mid.external_typedef"() {"class_name" = "SwissTableIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Math"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Blocking"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Channel"} : () -> ()
    "mid.external_typedef"() {"class_name" = "Array"} : () -> ()
    "mid.external_typedef"() {"class_name" = "ArrayIterator"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystemError"} : () -> ()
    "mid.external_typedef"() {"class_name" = "File"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileProcessor"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileReader"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileWriter"} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystem"} : () -> ()
    "mid.typedef"() {"class_name" = "PRNG", "methods" = [@PRNG_field_seed, @PRNG_B_init_initial_seedi32, @PRNG_B_next_, @PRNG_init_initial_seedi32, @PRNG_next_], "hash_tbl" = [@Object, @any_typ, @PRNG, 18446744073709551615 : i64], "offset_tbl" = [15 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14044805710827322405 : i64, "base_typ" = !llvm.struct<(i32)>, "data_size_fn" = "_data_size_PRNG", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "i32_hasher", "function_type" = !llvm.func<i32 (i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "i32_eq", "function_type" = !llvm.func<i1 (i32, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "string_hasher", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "string_eq", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "empty_slot", "function_type" = !llvm.func<i8 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "tombstone_slot", "function_type" = !llvm.func<i8 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "active_slot", "function_type" = !llvm.func<i8 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "clock", "function_type" = !llvm.func<i64 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_PRNG", "types" = [i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "PRNG_getter_seed", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "PRNG_setter_seed", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "PRNG_field_seed", "getter_name" = "PRNG_getter_seed", "setter_name" = "PRNG_setter_seed"} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : i32):
      %4 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"PRNG">
      %5 = "hi.cast"(%4) {"from_typ" = !hi.fatptr<"PRNG">, "to_typ" = !hi.fatptr<"PRNG">, "from_typ_name" = "PRNG", "to_typ_name" = "PRNG"} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %6 = "mid.wrap"(%3) : (i32) -> si32
      %7 = "hi.cast"(%6) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %8 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %9 = "hi.comparison"(%7, %8) {"op" = "LE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %10 = "mid.unwrap"(%9) : (si1) -> i1
      "mid.if"(%10) ({
        %11 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %12 = "hi.cast"(%11) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.set_field"(%5, %12) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">, si32) -> ()
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %13 = "mid.literal"() {"value" = 2147483647 : i32, "typ" = i32} : () -> si32
      %14 = "hi.arithmetic"(%7, %13) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %15 = "hi.cast"(%14) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%5, %15) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">, si32) -> ()
    }) {"func_name" = "PRNG_init_initial_seedi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%16 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %17 : !llvm.ptr):
      %18 = "mid.invariant"(%17) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %19 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %20 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%20, %19) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %21 = "llvm.getelementptr"(%17) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %22 = "mid.checkflag"(%21) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %23 = "llvm.load"(%22) : (!hi.bool) -> i1
      "cf.cond_br"(%23) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %24 = "llvm.extractvalue"(%16) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %25 = "llvm.load"(%19) : (!llvm.ptr) -> i32
      %26 = "llvm.getelementptr"(%24, %25) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %27 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %28 = "llvm.getelementptr"(%26, %27) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%28) : (!llvm.ptr) -> ()
    }) {"func_name" = "PRNG_B_init_initial_seedi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%29 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %30 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %31 : !llvm.ptr):
      %32 = "mid.wrap"(%29) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"PRNG">
      %33 = "hi.cast"(%32) {"from_typ" = !hi.fatptr<"PRNG">, "to_typ" = !hi.fatptr<"PRNG">, "from_typ_name" = "PRNG", "to_typ_name" = "PRNG"} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %34 = "mid.literal"() {"value" = 1103515245 : i32, "typ" = i32} : () -> si32
      %35 = "mid.literal"() {"value" = 12345 : i32, "typ" = i32} : () -> si32
      %36 = "mid.get_field"(%33) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">) -> si32
      %37 = "hi.arithmetic"(%36, %34) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %38 = "hi.arithmetic"(%37, %35) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %39 = "mid.literal"() {"value" = 2147483647 : i32, "typ" = i32} : () -> si32
      %40 = "hi.arithmetic"(%38, %39) {"op" = "bit_and", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      %41 = "hi.cast"(%40) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.set_field"(%33, %41) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">, si32) -> ()
      %42 = "mid.get_field"(%33) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i32} : (!hi.fatptr<"PRNG">) -> si32
      %43 = "hi.cast"(%42) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.return"(%43) : (si32) -> ()
    }) {"func_name" = "PRNG_next_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%44 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %45 : !llvm.ptr):
      %46 = "mid.invariant"(%45) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %47 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %48 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%48, %47) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb8] : () -> ()
    ^bb8:
      %49 = "llvm.extractvalue"(%44) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %50 = "llvm.load"(%47) : (!llvm.ptr) -> i32
      %51 = "llvm.getelementptr"(%49, %50) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %52 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %53 = "llvm.getelementptr"(%51, %52) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%53) : (!llvm.ptr) -> ()
    }) {"func_name" = "PRNG_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb9(%54 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %55 : i32, %56 : i64):
      %57 = "mid.wrap"(%54) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %58 = "hi.cast"(%57) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %59 = "mid.wrap"(%55) : (i32) -> si32
      %60 = "hi.cast"(%59) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %61 = "mid.wrap"(%56) : (i64) -> si64
      %62 = "hi.cast"(%61) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
      %63 = "hi.cast"(%58) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %64 = "mid.unwrap"(%63) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %65 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %66 = "mid.parameterizations_array"(%65) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%66, %64) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %67 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %68 = "hi.cast"(%67) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %69 = "mid.create_buffer"(%68) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %70 = "mid.refer"(%69) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %71 = "mid.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "  Operations: "} : () -> !llvm.ptr
      %72 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%70, %72, %71) {"typ" = !llvm.array<14 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %73 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %74 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %75 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %76 = "mid.unwrap"(%70) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %77 = "mid.unwrap"(%73) : (si32) -> i32
      %78 = "mid.unwrap"(%74) : (si32) -> i32
      %79 = "mid.unwrap"(%75) : (si32) -> i32
      %80 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %81 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %82 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %83 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %84 = "hi.cast"(%70) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %85 = "mid.unwrap"(%84) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %86 = "hi.cast"(%81) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %87 = "mid.unwrap"(%86) : (si32) -> i32
      %88 = "hi.cast"(%82) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %89 = "mid.unwrap"(%88) : (si32) -> i32
      %90 = "hi.cast"(%83) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %91 = "mid.unwrap"(%90) : (si32) -> i32
      %92 = "mid.unwrap"(%80) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %93 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %94 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %95 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %96 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %97 = "mid.parameterizations_array"(%93, %94, %95, %96) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%97, %92, %85, %87, %89, %91) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %98 = "hi.cast"(%80) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %99 = "mid.unwrap"(%98) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %100 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %101 = "mid.parameterizations_array"(%100) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%101, %99) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %102 = "hi.cast"(%60) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %103 = "mid.unwrap"(%102) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %104 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %105 = "mid.parameterizations_array"(%104) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%105, %103) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %106 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %107 = "hi.cast"(%106) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %108 = "mid.create_buffer"(%107) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %109 = "mid.refer"(%108) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %110 = "mid.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "  Total Time: "} : () -> !llvm.ptr
      %111 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%109, %111, %110) {"typ" = !llvm.array<14 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %112 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %113 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %114 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %115 = "mid.unwrap"(%109) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %116 = "mid.unwrap"(%112) : (si32) -> i32
      %117 = "mid.unwrap"(%113) : (si32) -> i32
      %118 = "mid.unwrap"(%114) : (si32) -> i32
      %119 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %120 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %121 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %122 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %123 = "hi.cast"(%109) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %124 = "mid.unwrap"(%123) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %125 = "hi.cast"(%120) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %126 = "mid.unwrap"(%125) : (si32) -> i32
      %127 = "hi.cast"(%121) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %128 = "mid.unwrap"(%127) : (si32) -> i32
      %129 = "hi.cast"(%122) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %130 = "mid.unwrap"(%129) : (si32) -> i32
      %131 = "mid.unwrap"(%119) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %132 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %133 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %134 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %135 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %136 = "mid.parameterizations_array"(%132, %133, %134, %135) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%136, %131, %124, %126, %128, %130) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %137 = "hi.cast"(%119) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %138 = "mid.unwrap"(%137) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %139 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %140 = "mid.parameterizations_array"(%139) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%140, %138) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %141 = "hi.cast"(%62) {"from_typ" = si64, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i64_typ", "to_typ_name" = "union_typ"} : (si64) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %142 = "mid.unwrap"(%141) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %143 = "mid.parameterization"() {"id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["i64"]} : () -> !llvm.ptr
      %144 = "mid.parameterizations_array"(%143) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%144, %142) {"offset" = 0 : i32, "vptrs" = ["i64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %145 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %146 = "hi.cast"(%145) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %147 = "mid.create_buffer"(%146) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %148 = "mid.refer"(%147) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %149 = "mid.literal"() {"typ" = !llvm.array<3 x i8>, "value" = " ms"} : () -> !llvm.ptr
      %150 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%148, %150, %149) {"typ" = !llvm.array<3 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %151 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %152 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %153 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %154 = "mid.unwrap"(%148) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %155 = "mid.unwrap"(%151) : (si32) -> i32
      %156 = "mid.unwrap"(%152) : (si32) -> i32
      %157 = "mid.unwrap"(%153) : (si32) -> i32
      %158 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %159 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %160 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
      %161 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
      %162 = "hi.cast"(%148) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %163 = "mid.unwrap"(%162) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %164 = "hi.cast"(%159) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %165 = "mid.unwrap"(%164) : (si32) -> i32
      %166 = "hi.cast"(%160) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %167 = "mid.unwrap"(%166) : (si32) -> i32
      %168 = "hi.cast"(%161) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %169 = "mid.unwrap"(%168) : (si32) -> i32
      %170 = "mid.unwrap"(%158) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %171 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %172 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %173 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %174 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %175 = "mid.parameterizations_array"(%171, %172, %173, %174) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%175, %170, %163, %165, %167, %169) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %176 = "hi.cast"(%158) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %177 = "mid.unwrap"(%176) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %178 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %179 = "mid.parameterizations_array"(%178) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%179, %177) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %180 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %181 = "hi.comparison"(%60, %180) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %182 = "mid.unwrap"(%181) : (si1) -> i1
      "mid.if"(%182) ({
        %183 = "mid.literal"() {"value" = 1000000 : i64, "typ" = i64} : () -> si64
        %184 = "hi.arithmetic"(%62, %183) {"op" = "MUL", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
        %185 = "hi.cast"(%60) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %186 = "hi.arithmetic"(%184, %185) {"op" = "DIV", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
        %187 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> si32
        %188 = "hi.cast"(%187) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %189 = "mid.create_buffer"(%188) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %190 = "mid.refer"(%189) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %191 = "mid.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "  Time/Op:    ~"} : () -> !llvm.ptr
        %192 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%190, %192, %191) {"typ" = !llvm.array<15 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %193 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
        %194 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
        %195 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> si32
        %196 = "mid.unwrap"(%190) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %197 = "mid.unwrap"(%193) : (si32) -> i32
        %198 = "mid.unwrap"(%194) : (si32) -> i32
        %199 = "mid.unwrap"(%195) : (si32) -> i32
        %200 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %201 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
        %202 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
        %203 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> si32
        %204 = "hi.cast"(%190) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %205 = "mid.unwrap"(%204) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %206 = "hi.cast"(%201) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %207 = "mid.unwrap"(%206) : (si32) -> i32
        %208 = "hi.cast"(%202) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %209 = "mid.unwrap"(%208) : (si32) -> i32
        %210 = "hi.cast"(%203) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %211 = "mid.unwrap"(%210) : (si32) -> i32
        %212 = "mid.unwrap"(%200) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %213 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %214 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %215 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %216 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %217 = "mid.parameterizations_array"(%213, %214, %215, %216) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%217, %212, %205, %207, %209, %211) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %218 = "hi.cast"(%200) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %219 = "mid.unwrap"(%218) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %220 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %221 = "mid.parameterizations_array"(%220) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%221, %219) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %222 = "hi.cast"(%186) {"from_typ" = si64, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i64_typ", "to_typ_name" = "union_typ"} : (si64) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %223 = "mid.unwrap"(%222) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %224 = "mid.parameterization"() {"id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["i64"]} : () -> !llvm.ptr
        %225 = "mid.parameterizations_array"(%224) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%225, %223) {"offset" = 0 : i32, "vptrs" = ["i64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %226 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %227 = "hi.cast"(%226) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %228 = "mid.create_buffer"(%227) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %229 = "mid.refer"(%228) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %230 = "mid.literal"() {"typ" = !llvm.array<3 x i8>, "value" = " ns"} : () -> !llvm.ptr
        %231 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%229, %231, %230) {"typ" = !llvm.array<3 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %232 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %233 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %234 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %235 = "mid.unwrap"(%229) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %236 = "mid.unwrap"(%232) : (si32) -> i32
        %237 = "mid.unwrap"(%233) : (si32) -> i32
        %238 = "mid.unwrap"(%234) : (si32) -> i32
        %239 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %240 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %241 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> si32
        %242 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %243 = "hi.cast"(%229) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %244 = "mid.unwrap"(%243) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %245 = "hi.cast"(%240) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %246 = "mid.unwrap"(%245) : (si32) -> i32
        %247 = "hi.cast"(%241) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %248 = "mid.unwrap"(%247) : (si32) -> i32
        %249 = "hi.cast"(%242) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %250 = "mid.unwrap"(%249) : (si32) -> i32
        %251 = "mid.unwrap"(%239) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %252 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %253 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %254 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %255 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %256 = "mid.parameterizations_array"(%252, %253, %254, %255) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%256, %251, %244, %246, %248, %250) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %257 = "hi.cast"(%239) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %258 = "mid.unwrap"(%257) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %259 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %260 = "mid.parameterizations_array"(%259) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%260, %258) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "print_benchmark_result", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb10(%261 : i32):
      %262 = "mid.wrap"(%261) : (i32) -> si32
      %263 = "hi.cast"(%262) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %264 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %265 = "mid.wrap"(%264) : (!llvm.ptr) -> !llvm.ptr
      %266 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %267 = "mid.wrap"(%266) : (!llvm.ptr) -> !llvm.ptr
      %268 = "mid.unwrap"(%265) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %269 = "mid.unwrap"(%267) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %270 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %271 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %272 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %273 = "mid.new"(%270, %271, %272) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %274 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %275 = "mid.wrap"(%274) : (!llvm.ptr) -> !llvm.ptr
      %276 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %277 = "mid.wrap"(%276) : (!llvm.ptr) -> !llvm.ptr
      %278 = "hi.cast"(%275) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %279 = "mid.unwrap"(%278) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %280 = "hi.cast"(%277) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %281 = "mid.unwrap"(%280) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %282 = "mid.unwrap"(%273) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %283 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %284 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %285 = "mid.parameterizations_array"(%283, %284) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%285, %282, %279, %281) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %286 = "mid.refer"(%273) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %287 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %288 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %289 = "hi.comparison"(%288, %263) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %290 = "mid.unwrap"(%289) : (si1) -> i1
      }, {
        %291 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %292 = "hi.arithmetic"(%288, %291) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %293 = "hi.cast"(%288) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %294 = "mid.unwrap"(%293) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %295 = "hi.cast"(%292) {"from_typ" = si32, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"V", !hi.any, "SwissTable">
        %296 = "mid.unwrap"(%295) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %297 = "mid.unwrap"(%286) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %298 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %299 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %300 = "mid.parameterizations_array"(%298, %299) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%300, %297, %294, %296) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %301 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %302 = "hi.arithmetic"(%288, %301) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %303 = "hi.cast"(%302) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%288, %303) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %304 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %305 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %306 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %307 = "hi.comparison"(%263, %306) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %308 = "mid.unwrap"(%307) : (si1) -> i1
      "mid.if"(%308) ({
        %309 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %310 = "hi.arithmetic"(%263, %309) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %311 = "hi.cast"(%310) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %312 = "mid.unwrap"(%311) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %313 = "mid.unwrap"(%286) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %314 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %315 = "mid.parameterizations_array"(%314) : (!llvm.ptr) -> !llvm.ptr
        %316 = "mid.method_call"(%315, %313, %312) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %317 = "hi.cast"(%316) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %318 = "mid.checkflag"(%317) {"typ_name" = "nil_typ"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %319 = "mid.unwrap"(%318) : (si1) -> i1
        "mid.if"(%319) ({
          %320 = "hi.cast"(%317) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[si32, !hi.nil]>) -> !hi.nil
          %321 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %322 = "hi.cast"(%321) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%305, %322) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %323 = "hi.cast"(%320) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%317, %323) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %324 = "mid.checkflag"(%317) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %325 = "mid.unwrap"(%324) : (si1) -> i1
        "mid.if"(%325) ({
          %326 = "hi.cast"(%317) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
          %327 = "hi.comparison"(%326, %263) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          %328 = "mid.unwrap"(%327) : (si1) -> i1
          "mid.if"(%328) ({
            %329 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %330 = "hi.cast"(%329) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%305, %330) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          }) : (i1) -> ()
          %331 = "hi.cast"(%326) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%317, %331) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %332 = "mid.unwrap"(%286) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %333 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %334 = "mid.method_call"(%333, %332) {"offset" = 23 : i32, "vptrs" = [], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %335 = "hi.cast"(%334) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %336 = "hi.comparison"(%335, %263) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %337 = "mid.unwrap"(%336) : (si1) -> i1
        "mid.if"(%337) ({
          %338 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %339 = "hi.cast"(%338) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%305, %339) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }, {
        %340 = "mid.unwrap"(%286) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %341 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %342 = "mid.method_call"(%341, %340) {"offset" = 23 : i32, "vptrs" = [], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %343 = "hi.cast"(%342) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %344 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %345 = "hi.comparison"(%343, %344) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %346 = "mid.unwrap"(%345) : (si1) -> i1
        "mid.if"(%346) ({
          %347 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %348 = "hi.cast"(%347) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%305, %348) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }) : (i1) -> ()
      %349 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %350 = "hi.cast"(%349) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %351 = "mid.create_buffer"(%350) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %352 = "mid.refer"(%351) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %353 = "mid.literal"() {"typ" = !llvm.array<17 x i8>, "value" = "Insert Sequential"} : () -> !llvm.ptr
      %354 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%352, %354, %353) {"typ" = !llvm.array<17 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %355 = "mid.literal"() {"value" = 17 : i32, "typ" = i32} : () -> si32
      %356 = "mid.literal"() {"value" = 17 : i32, "typ" = i32} : () -> si32
      %357 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %358 = "mid.unwrap"(%352) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %359 = "mid.unwrap"(%355) : (si32) -> i32
      %360 = "mid.unwrap"(%356) : (si32) -> i32
      %361 = "mid.unwrap"(%357) : (si32) -> i32
      %362 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %363 = "mid.literal"() {"value" = 17 : i32, "typ" = i32} : () -> si32
      %364 = "mid.literal"() {"value" = 17 : i32, "typ" = i32} : () -> si32
      %365 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %366 = "hi.cast"(%352) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %367 = "mid.unwrap"(%366) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %368 = "hi.cast"(%363) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %369 = "mid.unwrap"(%368) : (si32) -> i32
      %370 = "hi.cast"(%364) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %371 = "mid.unwrap"(%370) : (si32) -> i32
      %372 = "hi.cast"(%365) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %373 = "mid.unwrap"(%372) : (si32) -> i32
      %374 = "mid.unwrap"(%362) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %375 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %376 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %377 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %378 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %379 = "mid.parameterizations_array"(%375, %376, %377, %378) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%379, %374, %367, %369, %371, %373) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %380 = "hi.arithmetic"(%304, %287) {"op" = "SUB", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
      %381 = "mid.unwrap"(%362) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %382 = "mid.unwrap"(%263) : (si32) -> i32
      %383 = "mid.unwrap"(%380) : (si64) -> i64
      "mid.call"(%381, %382, %383) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %384 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %385 = "hi.cast"(%384) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %386 = "mid.create_buffer"(%385) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %387 = "mid.refer"(%386) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %388 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %389 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%387, %389, %388) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %390 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %391 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %392 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %393 = "mid.unwrap"(%387) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %394 = "mid.unwrap"(%390) : (si32) -> i32
      %395 = "mid.unwrap"(%391) : (si32) -> i32
      %396 = "mid.unwrap"(%392) : (si32) -> i32
      %397 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %398 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %399 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %400 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %401 = "hi.cast"(%387) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %402 = "mid.unwrap"(%401) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %403 = "hi.cast"(%398) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %404 = "mid.unwrap"(%403) : (si32) -> i32
      %405 = "hi.cast"(%399) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %406 = "mid.unwrap"(%405) : (si32) -> i32
      %407 = "hi.cast"(%400) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %408 = "mid.unwrap"(%407) : (si32) -> i32
      %409 = "mid.unwrap"(%397) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %410 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %411 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %412 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %413 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %414 = "mid.parameterizations_array"(%410, %411, %412, %413) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%414, %409, %402, %404, %406, %408) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %415 = "hi.cast"(%397) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %416 = "mid.unwrap"(%415) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %417 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %418 = "mid.parameterizations_array"(%417) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%418, %416) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %419 = "mid.unwrap"(%305) : (!hi.bool) -> i1
      "mid.if"(%419) ({
        %420 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %421 = "hi.cast"(%420) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %422 = "mid.create_buffer"(%421) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %423 = "mid.refer"(%422) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %424 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %425 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%423, %425, %424) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %426 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %427 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %428 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %429 = "mid.unwrap"(%423) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %430 = "mid.unwrap"(%426) : (si32) -> i32
        %431 = "mid.unwrap"(%427) : (si32) -> i32
        %432 = "mid.unwrap"(%428) : (si32) -> i32
        %433 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %434 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %435 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %436 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %437 = "hi.cast"(%423) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %438 = "mid.unwrap"(%437) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %439 = "hi.cast"(%434) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %440 = "mid.unwrap"(%439) : (si32) -> i32
        %441 = "hi.cast"(%435) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %442 = "mid.unwrap"(%441) : (si32) -> i32
        %443 = "hi.cast"(%436) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %444 = "mid.unwrap"(%443) : (si32) -> i32
        %445 = "mid.unwrap"(%433) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %446 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %447 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %448 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %449 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %450 = "mid.parameterizations_array"(%446, %447, %448, %449) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%450, %445, %438, %440, %442, %444) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %451 = "hi.cast"(%433) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %452 = "mid.unwrap"(%451) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %453 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %454 = "mid.parameterizations_array"(%453) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%454, %452) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %455 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %456 = "hi.cast"(%455) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %457 = "mid.create_buffer"(%456) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %458 = "mid.refer"(%457) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %459 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %460 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%458, %460, %459) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %461 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %462 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %463 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %464 = "mid.unwrap"(%458) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %465 = "mid.unwrap"(%461) : (si32) -> i32
        %466 = "mid.unwrap"(%462) : (si32) -> i32
        %467 = "mid.unwrap"(%463) : (si32) -> i32
        %468 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %469 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %470 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %471 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %472 = "hi.cast"(%458) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %473 = "mid.unwrap"(%472) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %474 = "hi.cast"(%469) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %475 = "mid.unwrap"(%474) : (si32) -> i32
        %476 = "hi.cast"(%470) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %477 = "mid.unwrap"(%476) : (si32) -> i32
        %478 = "hi.cast"(%471) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %479 = "mid.unwrap"(%478) : (si32) -> i32
        %480 = "mid.unwrap"(%468) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %481 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %482 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %483 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %484 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %485 = "mid.parameterizations_array"(%481, %482, %483, %484) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%485, %480, %473, %475, %477, %479) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %486 = "hi.cast"(%468) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %487 = "mid.unwrap"(%486) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %488 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %489 = "mid.parameterizations_array"(%488) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%489, %487) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "benchmark_insert_sequential", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb11(%490 : i32):
      %491 = "mid.wrap"(%490) : (i32) -> si32
      %492 = "hi.cast"(%491) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %493 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %494 = "mid.wrap"(%493) : (!llvm.ptr) -> !llvm.ptr
      %495 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %496 = "mid.wrap"(%495) : (!llvm.ptr) -> !llvm.ptr
      %497 = "mid.unwrap"(%494) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %498 = "mid.unwrap"(%496) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %499 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %500 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %501 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %502 = "mid.new"(%499, %500, %501) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %503 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %504 = "mid.wrap"(%503) : (!llvm.ptr) -> !llvm.ptr
      %505 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %506 = "mid.wrap"(%505) : (!llvm.ptr) -> !llvm.ptr
      %507 = "hi.cast"(%504) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %508 = "mid.unwrap"(%507) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %509 = "hi.cast"(%506) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %510 = "mid.unwrap"(%509) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %511 = "mid.unwrap"(%502) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %512 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %513 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %514 = "mid.parameterizations_array"(%512, %513) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%514, %511, %508, %510) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %515 = "mid.refer"(%502) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %516 = "mid.literal"() {"value" = 123 : i32, "typ" = i32} : () -> si32
      %517 = "mid.unwrap"(%516) : (si32) -> i32
      %518 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %519 = "mid.literal"() {"value" = 123 : i32, "typ" = i32} : () -> si32
      %520 = "hi.cast"(%519) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %521 = "mid.unwrap"(%520) : (si32) -> i32
      %522 = "mid.unwrap"(%518) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %523 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %524 = "mid.parameterizations_array"(%523) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%524, %522, %521) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %525 = "mid.refer"(%518) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %526 = "mid.unwrap"(%492) : (si32) -> i32
      %527 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %528 = "mid.new"(%527) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [si32]>
      %529 = "hi.cast"(%492) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %530 = "mid.unwrap"(%529) : (si32) -> i32
      %531 = "mid.unwrap"(%528) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %532 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %533 = "mid.parameterizations_array"(%532) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%533, %531, %530) {"offset" = 7 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %534 = "mid.refer"(%528) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [si32]>) -> !hi.fatptr<"Array", [si32]>
      %535 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %536 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %537 = "mid.wrap"(%536) : (!llvm.ptr) -> !llvm.ptr
      %538 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %539 = "mid.wrap"(%538) : (!llvm.ptr) -> !llvm.ptr
      %540 = "mid.unwrap"(%537) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %541 = "mid.unwrap"(%539) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %542 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %543 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
      %544 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["bool_typ"]], "name_hierarchy" = ["Pairi32._Bool", ["i32"], ["Bool"]]} : () -> !llvm.ptr
      %545 = "mid.new"(%542, %543, %544) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, !hi.bool]>
      %546 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %547 = "mid.wrap"(%546) : (!llvm.ptr) -> !llvm.ptr
      %548 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %549 = "mid.wrap"(%548) : (!llvm.ptr) -> !llvm.ptr
      %550 = "hi.cast"(%547) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %551 = "mid.unwrap"(%550) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %552 = "hi.cast"(%549) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %553 = "mid.unwrap"(%552) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %554 = "mid.unwrap"(%545) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %555 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %556 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %557 = "mid.parameterizations_array"(%555, %556) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%557, %554, %551, %553) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %558 = "mid.refer"(%545) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !hi.fatptr<"SwissTable", [si32, !hi.bool]>
      %559 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %560 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %561 = "hi.comparison"(%559, %492) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %562 = "mid.unwrap"(%561) : (si1) -> i1
      }, {
        %563 = "mid.unwrap"(%525) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %564 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %565 = "mid.method_call"(%564, %563) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %566 = "hi.cast"(%565) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %567 = "hi.cast"(%559) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %568 = "mid.unwrap"(%567) : (si32) -> i32
        %569 = "hi.cast"(%566) {"from_typ" = si32, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"T", !hi.any, "Array">
        %570 = "mid.unwrap"(%569) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
        %571 = "mid.unwrap"(%534) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %572 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %573 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %574 = "mid.parameterizations_array"(%572, %573) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%574, %571, %568, %570) {"offset" = 12 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %575 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %576 = "hi.arithmetic"(%492, %575) {"op" = "SUB", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %577 = "hi.comparison"(%559, %576) {"op" = "EQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %578 = "mid.unwrap"(%577) : (si1) -> i1
        "mid.if"(%578) ({
          %579 = "hi.cast"(%566) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%560, %579) {"typ" = i32} : (si32, si32) -> ()
        }) : (i1) -> ()
        %580 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %581 = "hi.cast"(%566) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %582 = "mid.unwrap"(%581) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %583 = "hi.cast"(%580) {"from_typ" = !hi.bool, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "bool_typ", "to_typ_name" = "any_typ"} : (!hi.bool) -> !hi.type_param<"V", !hi.any, "SwissTable">
        %584 = "mid.unwrap"(%583) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %585 = "mid.unwrap"(%558) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %586 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %587 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
        %588 = "mid.parameterizations_array"(%586, %587) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%588, %585, %582, %584) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "bool_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %589 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %590 = "hi.arithmetic"(%559, %589) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %591 = "hi.cast"(%590) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%559, %591) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %592 = "mid.unwrap"(%558) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %593 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %594 = "mid.method_call"(%593, %592) {"offset" = 23 : i32, "vptrs" = [], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %595 = "hi.cast"(%594) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %596 = "hi.cast"(%595) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%535, %596) {"typ" = i32} : (si32, si32) -> ()
      %597 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %598 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %599 = "hi.cast"(%598) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%559, %599) {"typ" = i32} : (si32, si32) -> ()
      "mid.while"() ({
        %600 = "hi.comparison"(%559, %492) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %601 = "mid.unwrap"(%600) : (si1) -> i1
      }, {
        %602 = "hi.cast"(%559) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %603 = "mid.unwrap"(%602) : (si32) -> i32
        %604 = "mid.unwrap"(%534) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %605 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %606 = "mid.parameterizations_array"(%605) : (!llvm.ptr) -> !llvm.ptr
        %607 = "mid.method_call"(%606, %604, %603) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %608 = "hi.cast"(%607) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> si32
        %609 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %610 = "hi.arithmetic"(%608, %609) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %611 = "hi.cast"(%608) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %612 = "mid.unwrap"(%611) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %613 = "hi.cast"(%610) {"from_typ" = si32, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"V", !hi.any, "SwissTable">
        %614 = "mid.unwrap"(%613) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %615 = "mid.unwrap"(%515) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %616 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %617 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %618 = "mid.parameterizations_array"(%616, %617) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%618, %615, %612, %614) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %619 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %620 = "hi.arithmetic"(%559, %619) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %621 = "hi.cast"(%620) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%559, %621) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %622 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %623 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %624 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %625 = "hi.comparison"(%492, %624) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %626 = "mid.unwrap"(%625) : (si1) -> i1
      "mid.if"(%626) ({
        %627 = "hi.cast"(%560) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %628 = "mid.unwrap"(%627) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %629 = "mid.unwrap"(%515) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %630 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %631 = "mid.parameterizations_array"(%630) : (!llvm.ptr) -> !llvm.ptr
        %632 = "mid.method_call"(%631, %629, %628) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %633 = "hi.cast"(%632) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %634 = "mid.checkflag"(%633) {"typ_name" = "nil_typ"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %635 = "mid.unwrap"(%634) : (si1) -> i1
        "mid.if"(%635) ({
          %636 = "hi.cast"(%633) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[si32, !hi.nil]>) -> !hi.nil
          %637 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %638 = "hi.cast"(%637) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%623, %638) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %639 = "hi.cast"(%636) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%633, %639) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %640 = "mid.checkflag"(%633) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %641 = "mid.unwrap"(%640) : (si1) -> i1
        "mid.if"(%641) ({
          %642 = "hi.cast"(%633) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
          %643 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %644 = "hi.arithmetic"(%560, %643) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %645 = "hi.comparison"(%642, %644) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          %646 = "mid.unwrap"(%645) : (si1) -> i1
          "mid.if"(%646) ({
            %647 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %648 = "hi.cast"(%647) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%623, %648) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          }) : (i1) -> ()
          %649 = "hi.cast"(%642) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%633, %649) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %650 = "mid.unwrap"(%515) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %651 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %652 = "mid.method_call"(%651, %650) {"offset" = 23 : i32, "vptrs" = [], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %653 = "hi.cast"(%652) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %654 = "hi.comparison"(%653, %535) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %655 = "mid.unwrap"(%654) : (si1) -> i1
        "mid.if"(%655) ({
          %656 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %657 = "hi.cast"(%656) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%623, %657) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }, {
        %658 = "mid.unwrap"(%515) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %659 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %660 = "mid.method_call"(%659, %658) {"offset" = 23 : i32, "vptrs" = [], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %661 = "hi.cast"(%660) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %662 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %663 = "hi.comparison"(%661, %662) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %664 = "mid.unwrap"(%663) : (si1) -> i1
        "mid.if"(%664) ({
          %665 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %666 = "hi.cast"(%665) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%623, %666) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }) : (i1) -> ()
      %667 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %668 = "hi.cast"(%667) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %669 = "mid.create_buffer"(%668) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %670 = "mid.refer"(%669) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %671 = "mid.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "Insert Random"} : () -> !llvm.ptr
      %672 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%670, %672, %671) {"typ" = !llvm.array<13 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %673 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %674 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %675 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %676 = "mid.unwrap"(%670) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %677 = "mid.unwrap"(%673) : (si32) -> i32
      %678 = "mid.unwrap"(%674) : (si32) -> i32
      %679 = "mid.unwrap"(%675) : (si32) -> i32
      %680 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %681 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %682 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %683 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %684 = "hi.cast"(%670) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %685 = "mid.unwrap"(%684) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %686 = "hi.cast"(%681) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %687 = "mid.unwrap"(%686) : (si32) -> i32
      %688 = "hi.cast"(%682) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %689 = "mid.unwrap"(%688) : (si32) -> i32
      %690 = "hi.cast"(%683) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %691 = "mid.unwrap"(%690) : (si32) -> i32
      %692 = "mid.unwrap"(%680) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %693 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %694 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %695 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %696 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %697 = "mid.parameterizations_array"(%693, %694, %695, %696) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%697, %692, %685, %687, %689, %691) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %698 = "hi.arithmetic"(%622, %597) {"op" = "SUB", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
      %699 = "mid.unwrap"(%680) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %700 = "mid.unwrap"(%492) : (si32) -> i32
      %701 = "mid.unwrap"(%698) : (si64) -> i64
      "mid.call"(%699, %700, %701) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %702 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %703 = "hi.cast"(%702) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %704 = "mid.create_buffer"(%703) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %705 = "mid.refer"(%704) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %706 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %707 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%705, %707, %706) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %708 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %709 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %710 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %711 = "mid.unwrap"(%705) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %712 = "mid.unwrap"(%708) : (si32) -> i32
      %713 = "mid.unwrap"(%709) : (si32) -> i32
      %714 = "mid.unwrap"(%710) : (si32) -> i32
      %715 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %716 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %717 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %718 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %719 = "hi.cast"(%705) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %720 = "mid.unwrap"(%719) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %721 = "hi.cast"(%716) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %722 = "mid.unwrap"(%721) : (si32) -> i32
      %723 = "hi.cast"(%717) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %724 = "mid.unwrap"(%723) : (si32) -> i32
      %725 = "hi.cast"(%718) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %726 = "mid.unwrap"(%725) : (si32) -> i32
      %727 = "mid.unwrap"(%715) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %728 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %729 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %730 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %731 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %732 = "mid.parameterizations_array"(%728, %729, %730, %731) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%732, %727, %720, %722, %724, %726) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %733 = "hi.cast"(%715) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %734 = "mid.unwrap"(%733) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %735 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %736 = "mid.parameterizations_array"(%735) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%736, %734) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %737 = "mid.unwrap"(%623) : (!hi.bool) -> i1
      "mid.if"(%737) ({
        %738 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %739 = "hi.cast"(%738) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %740 = "mid.create_buffer"(%739) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %741 = "mid.refer"(%740) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %742 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %743 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%741, %743, %742) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %744 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %745 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %746 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %747 = "mid.unwrap"(%741) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %748 = "mid.unwrap"(%744) : (si32) -> i32
        %749 = "mid.unwrap"(%745) : (si32) -> i32
        %750 = "mid.unwrap"(%746) : (si32) -> i32
        %751 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %752 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %753 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %754 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %755 = "hi.cast"(%741) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %756 = "mid.unwrap"(%755) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %757 = "hi.cast"(%752) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %758 = "mid.unwrap"(%757) : (si32) -> i32
        %759 = "hi.cast"(%753) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %760 = "mid.unwrap"(%759) : (si32) -> i32
        %761 = "hi.cast"(%754) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %762 = "mid.unwrap"(%761) : (si32) -> i32
        %763 = "mid.unwrap"(%751) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %764 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %765 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %766 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %767 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %768 = "mid.parameterizations_array"(%764, %765, %766, %767) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%768, %763, %756, %758, %760, %762) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %769 = "hi.cast"(%751) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %770 = "mid.unwrap"(%769) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %771 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %772 = "mid.parameterizations_array"(%771) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%772, %770) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %773 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %774 = "hi.cast"(%773) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %775 = "mid.create_buffer"(%774) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %776 = "mid.refer"(%775) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %777 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %778 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%776, %778, %777) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %779 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %780 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %781 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %782 = "mid.unwrap"(%776) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %783 = "mid.unwrap"(%779) : (si32) -> i32
        %784 = "mid.unwrap"(%780) : (si32) -> i32
        %785 = "mid.unwrap"(%781) : (si32) -> i32
        %786 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %787 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %788 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %789 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %790 = "hi.cast"(%776) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %791 = "mid.unwrap"(%790) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %792 = "hi.cast"(%787) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %793 = "mid.unwrap"(%792) : (si32) -> i32
        %794 = "hi.cast"(%788) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %795 = "mid.unwrap"(%794) : (si32) -> i32
        %796 = "hi.cast"(%789) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %797 = "mid.unwrap"(%796) : (si32) -> i32
        %798 = "mid.unwrap"(%786) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %799 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %800 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %801 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %802 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %803 = "mid.parameterizations_array"(%799, %800, %801, %802) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%803, %798, %791, %793, %795, %797) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %804 = "hi.cast"(%786) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %805 = "mid.unwrap"(%804) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %806 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %807 = "mid.parameterizations_array"(%806) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%807, %805) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
      %808 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> si32
      %809 = "hi.cast"(%808) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %810 = "mid.create_buffer"(%809) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %811 = "mid.refer"(%810) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %812 = "mid.literal"() {"typ" = !llvm.array<27 x i8>, "value" = "    (Expected unique size: "} : () -> !llvm.ptr
      %813 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%811, %813, %812) {"typ" = !llvm.array<27 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %814 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %815 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %816 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> si32
      %817 = "mid.unwrap"(%811) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %818 = "mid.unwrap"(%814) : (si32) -> i32
      %819 = "mid.unwrap"(%815) : (si32) -> i32
      %820 = "mid.unwrap"(%816) : (si32) -> i32
      %821 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %822 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %823 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %824 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> si32
      %825 = "hi.cast"(%811) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %826 = "mid.unwrap"(%825) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %827 = "hi.cast"(%822) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %828 = "mid.unwrap"(%827) : (si32) -> i32
      %829 = "hi.cast"(%823) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %830 = "mid.unwrap"(%829) : (si32) -> i32
      %831 = "hi.cast"(%824) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %832 = "mid.unwrap"(%831) : (si32) -> i32
      %833 = "mid.unwrap"(%821) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %834 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %835 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %836 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %837 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %838 = "mid.parameterizations_array"(%834, %835, %836, %837) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%838, %833, %826, %828, %830, %832) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %839 = "hi.cast"(%821) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %840 = "mid.unwrap"(%839) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %841 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %842 = "mid.parameterizations_array"(%841) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%842, %840) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %843 = "hi.cast"(%535) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %844 = "mid.unwrap"(%843) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %845 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %846 = "mid.parameterizations_array"(%845) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%846, %844) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %847 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %848 = "hi.cast"(%847) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %849 = "mid.create_buffer"(%848) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %850 = "mid.refer"(%849) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %851 = "mid.literal"() {"typ" = !llvm.array<1 x i8>, "value" = ")"} : () -> !llvm.ptr
      %852 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%850, %852, %851) {"typ" = !llvm.array<1 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %853 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %854 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %855 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %856 = "mid.unwrap"(%850) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %857 = "mid.unwrap"(%853) : (si32) -> i32
      %858 = "mid.unwrap"(%854) : (si32) -> i32
      %859 = "mid.unwrap"(%855) : (si32) -> i32
      %860 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %861 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %862 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %863 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %864 = "hi.cast"(%850) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %865 = "mid.unwrap"(%864) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %866 = "hi.cast"(%861) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %867 = "mid.unwrap"(%866) : (si32) -> i32
      %868 = "hi.cast"(%862) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %869 = "mid.unwrap"(%868) : (si32) -> i32
      %870 = "hi.cast"(%863) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %871 = "mid.unwrap"(%870) : (si32) -> i32
      %872 = "mid.unwrap"(%860) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %873 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %874 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %875 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %876 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %877 = "mid.parameterizations_array"(%873, %874, %875, %876) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%877, %872, %865, %867, %869, %871) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %878 = "hi.cast"(%860) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %879 = "mid.unwrap"(%878) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %880 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %881 = "mid.parameterizations_array"(%880) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%881, %879) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "benchmark_insert_random", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb12(%882 : i32):
      %883 = "mid.wrap"(%882) : (i32) -> si32
      %884 = "hi.cast"(%883) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %885 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %886 = "mid.wrap"(%885) : (!llvm.ptr) -> !llvm.ptr
      %887 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %888 = "mid.wrap"(%887) : (!llvm.ptr) -> !llvm.ptr
      %889 = "mid.unwrap"(%886) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %890 = "mid.unwrap"(%888) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %891 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %892 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %893 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %894 = "mid.new"(%891, %892, %893) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %895 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %896 = "mid.wrap"(%895) : (!llvm.ptr) -> !llvm.ptr
      %897 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %898 = "mid.wrap"(%897) : (!llvm.ptr) -> !llvm.ptr
      %899 = "hi.cast"(%896) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %900 = "mid.unwrap"(%899) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %901 = "hi.cast"(%898) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %902 = "mid.unwrap"(%901) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %903 = "mid.unwrap"(%894) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %904 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %905 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %906 = "mid.parameterizations_array"(%904, %905) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%906, %903, %900, %902) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %907 = "mid.refer"(%894) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %908 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> si64
      %909 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %910 = "hi.comparison"(%909, %884) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %911 = "mid.unwrap"(%910) : (si1) -> i1
      }, {
        %912 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %913 = "hi.arithmetic"(%909, %912) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %914 = "hi.cast"(%909) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %915 = "mid.unwrap"(%914) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %916 = "hi.cast"(%913) {"from_typ" = si32, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"V", !hi.any, "SwissTable">
        %917 = "mid.unwrap"(%916) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %918 = "mid.unwrap"(%907) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %919 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %920 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %921 = "mid.parameterizations_array"(%919, %920) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%921, %918, %915, %917) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %922 = "hi.cast"(%913) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %923 = "hi.arithmetic"(%908, %922) {"op" = "ADD", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
        %924 = "hi.cast"(%923) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
        "mid.assign"(%908, %924) {"typ" = i64} : (si64, si64) -> ()
        %925 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %926 = "hi.arithmetic"(%909, %925) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %927 = "hi.cast"(%926) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%909, %927) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %928 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %929 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> si64
      %930 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %931 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %932 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %933 = "hi.cast"(%932) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%909, %933) {"typ" = i32} : (si32, si32) -> ()
      "mid.while"() ({
        %934 = "hi.comparison"(%909, %884) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %935 = "mid.unwrap"(%934) : (si1) -> i1
      }, {
        %936 = "hi.cast"(%909) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %937 = "mid.unwrap"(%936) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %938 = "mid.unwrap"(%907) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %939 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %940 = "mid.parameterizations_array"(%939) : (!llvm.ptr) -> !llvm.ptr
        %941 = "mid.method_call"(%940, %938, %937) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %942 = "hi.cast"(%941) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %943 = "mid.checkflag"(%942) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %944 = "mid.unwrap"(%943) : (si1) -> i1
        "mid.if"(%944) ({
          %945 = "hi.cast"(%942) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
          %946 = "hi.cast"(%945) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
          %947 = "hi.arithmetic"(%929, %946) {"op" = "ADD", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
          %948 = "hi.cast"(%947) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
          "mid.assign"(%929, %948) {"typ" = i64} : (si64, si64) -> ()
          %949 = "hi.cast"(%945) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%942, %949) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }, {
          %950 = "hi.cast"(%942) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[si32, !hi.nil]>) -> !hi.nil
          %951 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %952 = "hi.cast"(%951) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%930, %952) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %953 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
          %954 = "hi.comparison"(%931, %953) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          %955 = "mid.unwrap"(%954) : (si1) -> i1
          "mid.if"(%955) ({
            %956 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
            %957 = "hi.cast"(%956) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
            %958 = "mid.create_buffer"(%957) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
            %959 = "mid.refer"(%958) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
            %960 = "mid.literal"() {"typ" = !llvm.array<55 x i8>, "value" = "Error: Nil returned during sequential hit test for key "} : () -> !llvm.ptr
            %961 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
            "mid.buffer_set"(%959, %961, %960) {"typ" = !llvm.array<55 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
            %962 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
            %963 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
            %964 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
            %965 = "mid.unwrap"(%959) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
            %966 = "mid.unwrap"(%962) : (si32) -> i32
            %967 = "mid.unwrap"(%963) : (si32) -> i32
            %968 = "mid.unwrap"(%964) : (si32) -> i32
            %969 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
            %970 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
            %971 = "mid.literal"() {"value" = 55 : i32, "typ" = i32} : () -> si32
            %972 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> si32
            %973 = "hi.cast"(%959) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
            %974 = "mid.unwrap"(%973) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
            %975 = "hi.cast"(%970) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %976 = "mid.unwrap"(%975) : (si32) -> i32
            %977 = "hi.cast"(%971) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %978 = "mid.unwrap"(%977) : (si32) -> i32
            %979 = "hi.cast"(%972) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %980 = "mid.unwrap"(%979) : (si32) -> i32
            %981 = "mid.unwrap"(%969) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
            %982 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
            %983 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %984 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %985 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %986 = "mid.parameterizations_array"(%982, %983, %984, %985) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
            "mid.method_call"(%986, %981, %974, %976, %978, %980) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
            %987 = "hi.cast"(%969) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
            %988 = "mid.unwrap"(%987) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
            %989 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
            %990 = "mid.parameterizations_array"(%989) : (!llvm.ptr) -> !llvm.ptr
            "mid.class_method_call"(%990, %988) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
            %991 = "hi.cast"(%909) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
            %992 = "mid.unwrap"(%991) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
            %993 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %994 = "mid.parameterizations_array"(%993) : (!llvm.ptr) -> !llvm.ptr
            "mid.class_method_call"(%994, %992) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
            %995 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
            %996 = "hi.arithmetic"(%931, %995) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
            %997 = "hi.cast"(%996) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            "mid.assign"(%931, %997) {"typ" = i32} : (si32, si32) -> ()
          }) : (i1) -> ()
          %998 = "hi.cast"(%950) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%942, %998) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %999 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %1000 = "hi.arithmetic"(%909, %999) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1001 = "hi.cast"(%1000) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%909, %1001) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %1002 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %1003 = "hi.comparison"(%929, %908) {"op" = "NEQ", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si1
      %1004 = "mid.unwrap"(%1003) : (si1) -> i1
      "mid.if"(%1004) ({
        %1005 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1006 = "hi.cast"(%1005) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.assign"(%930, %1006) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      }) : (i1) -> ()
      %1007 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1008 = "hi.cast"(%1007) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1009 = "mid.create_buffer"(%1008) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %1010 = "mid.refer"(%1009) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1011 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "Get Sequential Hit"} : () -> !llvm.ptr
      %1012 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1010, %1012, %1011) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %1013 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1014 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1015 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1016 = "mid.unwrap"(%1010) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1017 = "mid.unwrap"(%1013) : (si32) -> i32
      %1018 = "mid.unwrap"(%1014) : (si32) -> i32
      %1019 = "mid.unwrap"(%1015) : (si32) -> i32
      %1020 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1021 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1022 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1023 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1024 = "hi.cast"(%1010) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1025 = "mid.unwrap"(%1024) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1026 = "hi.cast"(%1021) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1027 = "mid.unwrap"(%1026) : (si32) -> i32
      %1028 = "hi.cast"(%1022) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1029 = "mid.unwrap"(%1028) : (si32) -> i32
      %1030 = "hi.cast"(%1023) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1031 = "mid.unwrap"(%1030) : (si32) -> i32
      %1032 = "mid.unwrap"(%1020) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1033 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1034 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1035 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1036 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1037 = "mid.parameterizations_array"(%1033, %1034, %1035, %1036) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1037, %1032, %1025, %1027, %1029, %1031) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1038 = "hi.arithmetic"(%1002, %928) {"op" = "SUB", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
      %1039 = "mid.unwrap"(%1020) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1040 = "mid.unwrap"(%884) : (si32) -> i32
      %1041 = "mid.unwrap"(%1038) : (si64) -> i64
      "mid.call"(%1039, %1040, %1041) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %1042 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1043 = "hi.cast"(%1042) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1044 = "mid.create_buffer"(%1043) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %1045 = "mid.refer"(%1044) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1046 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %1047 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1045, %1047, %1046) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %1048 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1049 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1050 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1051 = "mid.unwrap"(%1045) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1052 = "mid.unwrap"(%1048) : (si32) -> i32
      %1053 = "mid.unwrap"(%1049) : (si32) -> i32
      %1054 = "mid.unwrap"(%1050) : (si32) -> i32
      %1055 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1056 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1057 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1058 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1059 = "hi.cast"(%1045) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1060 = "mid.unwrap"(%1059) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1061 = "hi.cast"(%1056) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1062 = "mid.unwrap"(%1061) : (si32) -> i32
      %1063 = "hi.cast"(%1057) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1064 = "mid.unwrap"(%1063) : (si32) -> i32
      %1065 = "hi.cast"(%1058) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1066 = "mid.unwrap"(%1065) : (si32) -> i32
      %1067 = "mid.unwrap"(%1055) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1068 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1069 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1070 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1071 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1072 = "mid.parameterizations_array"(%1068, %1069, %1070, %1071) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1072, %1067, %1060, %1062, %1064, %1066) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1073 = "hi.cast"(%1055) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %1074 = "mid.unwrap"(%1073) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1075 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1076 = "mid.parameterizations_array"(%1075) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%1076, %1074) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %1077 = "mid.unwrap"(%930) : (!hi.bool) -> i1
      "mid.if"(%1077) ({
        %1078 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1079 = "hi.cast"(%1078) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1080 = "mid.create_buffer"(%1079) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1081 = "mid.refer"(%1080) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1082 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %1083 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1081, %1083, %1082) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1084 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1085 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1086 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1087 = "mid.unwrap"(%1081) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1088 = "mid.unwrap"(%1084) : (si32) -> i32
        %1089 = "mid.unwrap"(%1085) : (si32) -> i32
        %1090 = "mid.unwrap"(%1086) : (si32) -> i32
        %1091 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1092 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1093 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1094 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1095 = "hi.cast"(%1081) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1096 = "mid.unwrap"(%1095) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1097 = "hi.cast"(%1092) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1098 = "mid.unwrap"(%1097) : (si32) -> i32
        %1099 = "hi.cast"(%1093) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1100 = "mid.unwrap"(%1099) : (si32) -> i32
        %1101 = "hi.cast"(%1094) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1102 = "mid.unwrap"(%1101) : (si32) -> i32
        %1103 = "mid.unwrap"(%1091) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1104 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1105 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1106 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1107 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1108 = "mid.parameterizations_array"(%1104, %1105, %1106, %1107) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1108, %1103, %1096, %1098, %1100, %1102) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1109 = "hi.cast"(%1091) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1110 = "mid.unwrap"(%1109) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1111 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1112 = "mid.parameterizations_array"(%1111) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1112, %1110) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %1113 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1114 = "hi.cast"(%1113) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1115 = "mid.create_buffer"(%1114) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1116 = "mid.refer"(%1115) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1117 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %1118 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1116, %1118, %1117) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1119 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1120 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1121 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1122 = "mid.unwrap"(%1116) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1123 = "mid.unwrap"(%1119) : (si32) -> i32
        %1124 = "mid.unwrap"(%1120) : (si32) -> i32
        %1125 = "mid.unwrap"(%1121) : (si32) -> i32
        %1126 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1127 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1128 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1129 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1130 = "hi.cast"(%1116) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1131 = "mid.unwrap"(%1130) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1132 = "hi.cast"(%1127) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1133 = "mid.unwrap"(%1132) : (si32) -> i32
        %1134 = "hi.cast"(%1128) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1135 = "mid.unwrap"(%1134) : (si32) -> i32
        %1136 = "hi.cast"(%1129) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1137 = "mid.unwrap"(%1136) : (si32) -> i32
        %1138 = "mid.unwrap"(%1126) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1139 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1140 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1141 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1142 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1143 = "mid.parameterizations_array"(%1139, %1140, %1141, %1142) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1143, %1138, %1131, %1133, %1135, %1137) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1144 = "hi.cast"(%1126) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1145 = "mid.unwrap"(%1144) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1146 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1147 = "mid.parameterizations_array"(%1146) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1147, %1145) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "benchmark_get_sequential_hit", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb13(%1148 : i32):
      %1149 = "mid.wrap"(%1148) : (i32) -> si32
      %1150 = "hi.cast"(%1149) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1151 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1152 = "mid.wrap"(%1151) : (!llvm.ptr) -> !llvm.ptr
      %1153 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1154 = "mid.wrap"(%1153) : (!llvm.ptr) -> !llvm.ptr
      %1155 = "mid.unwrap"(%1152) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1156 = "mid.unwrap"(%1154) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1157 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1158 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1159 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1160 = "mid.new"(%1157, %1158, %1159) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %1161 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1162 = "mid.wrap"(%1161) : (!llvm.ptr) -> !llvm.ptr
      %1163 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1164 = "mid.wrap"(%1163) : (!llvm.ptr) -> !llvm.ptr
      %1165 = "hi.cast"(%1162) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %1166 = "mid.unwrap"(%1165) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %1167 = "hi.cast"(%1164) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %1168 = "mid.unwrap"(%1167) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1169 = "mid.unwrap"(%1160) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1170 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1171 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1172 = "mid.parameterizations_array"(%1170, %1171) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1172, %1169, %1166, %1168) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1173 = "mid.refer"(%1160) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %1174 = "mid.literal"() {"value" = 456 : i32, "typ" = i32} : () -> si32
      %1175 = "mid.unwrap"(%1174) : (si32) -> i32
      %1176 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %1177 = "mid.literal"() {"value" = 456 : i32, "typ" = i32} : () -> si32
      %1178 = "hi.cast"(%1177) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1179 = "mid.unwrap"(%1178) : (si32) -> i32
      %1180 = "mid.unwrap"(%1176) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1181 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1182 = "mid.parameterizations_array"(%1181) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1182, %1180, %1179) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1183 = "mid.refer"(%1176) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %1184 = "mid.unwrap"(%1150) : (si32) -> i32
      %1185 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1186 = "mid.new"(%1185) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [si32]>
      %1187 = "hi.cast"(%1150) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1188 = "mid.unwrap"(%1187) : (si32) -> i32
      %1189 = "mid.unwrap"(%1186) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1190 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1191 = "mid.parameterizations_array"(%1190) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1191, %1189, %1188) {"offset" = 7 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1192 = "mid.refer"(%1186) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [si32]>) -> !hi.fatptr<"Array", [si32]>
      %1193 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> si64
      %1194 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1195 = "mid.wrap"(%1194) : (!llvm.ptr) -> !llvm.ptr
      %1196 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1197 = "mid.wrap"(%1196) : (!llvm.ptr) -> !llvm.ptr
      %1198 = "mid.unwrap"(%1195) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1199 = "mid.unwrap"(%1197) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1200 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1201 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
      %1202 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["bool_typ"]], "name_hierarchy" = ["Pairi32._Bool", ["i32"], ["Bool"]]} : () -> !llvm.ptr
      %1203 = "mid.new"(%1200, %1201, %1202) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, !hi.bool]>
      %1204 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1205 = "mid.wrap"(%1204) : (!llvm.ptr) -> !llvm.ptr
      %1206 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1207 = "mid.wrap"(%1206) : (!llvm.ptr) -> !llvm.ptr
      %1208 = "hi.cast"(%1205) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %1209 = "mid.unwrap"(%1208) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %1210 = "hi.cast"(%1207) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %1211 = "mid.unwrap"(%1210) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1212 = "mid.unwrap"(%1203) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1213 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1214 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1215 = "mid.parameterizations_array"(%1213, %1214) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1215, %1212, %1209, %1211) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1216 = "mid.refer"(%1203) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !hi.fatptr<"SwissTable", [si32, !hi.bool]>
      %1217 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1218 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1219 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %1220 = "hi.arithmetic"(%1150, %1219) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      "mid.while"() ({
        %1221 = "hi.comparison"(%1217, %1150) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %1222 = "hi.logical"(%1221) ({
          %1223 = "hi.comparison"(%1218, %1220) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          func.return %1223 : si1
        }) {"op" = "and"} : (si1) -> si1
        %1224 = "mid.unwrap"(%1222) : (si1) -> i1
      }, {
        %1225 = "mid.unwrap"(%1183) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1226 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1227 = "mid.method_call"(%1226, %1225) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %1228 = "hi.cast"(%1227) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1229 = "hi.cast"(%1228) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %1230 = "mid.unwrap"(%1229) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1231 = "mid.unwrap"(%1216) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1232 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1233 = "mid.parameterizations_array"(%1232) : (!llvm.ptr) -> !llvm.ptr
        %1234 = "mid.method_call"(%1233, %1231, %1230) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %1235 = "hi.cast"(%1234) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.bool]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.bool]>
        %1236 = "mid.checkflag"(%1235) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.bool]>) -> si1
        %1237 = "mid.unwrap"(%1236) : (si1) -> i1
        "mid.if"(%1237) ({
          %1238 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %1239 = "hi.arithmetic"(%1228, %1238) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %1240 = "hi.cast"(%1228) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %1241 = "mid.unwrap"(%1240) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1242 = "hi.cast"(%1239) {"from_typ" = si32, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"V", !hi.any, "SwissTable">
          %1243 = "mid.unwrap"(%1242) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1244 = "mid.unwrap"(%1173) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1245 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1246 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1247 = "mid.parameterizations_array"(%1245, %1246) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1247, %1244, %1241, %1243) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1248 = "hi.cast"(%1217) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %1249 = "mid.unwrap"(%1248) : (si32) -> i32
          %1250 = "hi.cast"(%1228) {"from_typ" = si32, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"T", !hi.any, "Array">
          %1251 = "mid.unwrap"(%1250) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1252 = "mid.unwrap"(%1192) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1253 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1254 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1255 = "mid.parameterizations_array"(%1253, %1254) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1255, %1252, %1249, %1251) {"offset" = 12 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1256 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %1257 = "hi.cast"(%1228) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %1258 = "mid.unwrap"(%1257) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1259 = "hi.cast"(%1256) {"from_typ" = !hi.bool, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "bool_typ", "to_typ_name" = "any_typ"} : (!hi.bool) -> !hi.type_param<"V", !hi.any, "SwissTable">
          %1260 = "mid.unwrap"(%1259) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1261 = "mid.unwrap"(%1216) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1262 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1263 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
          %1264 = "mid.parameterizations_array"(%1262, %1263) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1264, %1261, %1258, %1260) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "bool_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1265 = "hi.cast"(%1239) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
          %1266 = "hi.arithmetic"(%1193, %1265) {"op" = "ADD", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
          %1267 = "hi.cast"(%1266) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
          "mid.assign"(%1193, %1267) {"typ" = i64} : (si64, si64) -> ()
          %1268 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %1269 = "hi.arithmetic"(%1217, %1268) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %1270 = "hi.cast"(%1269) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%1217, %1270) {"typ" = i32} : (si32, si32) -> ()
        }) : (i1) -> ()
        %1271 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %1272 = "hi.arithmetic"(%1218, %1271) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1273 = "hi.cast"(%1272) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1218, %1273) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %1274 = "hi.comparison"(%1217, %1150) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1275 = "mid.unwrap"(%1274) : (si1) -> i1
      "mid.if"(%1275) ({
        %1276 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %1277 = "hi.cast"(%1276) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1278 = "mid.create_buffer"(%1277) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1279 = "mid.refer"(%1278) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1280 = "mid.literal"() {"typ" = !llvm.array<29 x i8>, "value" = "Warning: Could only generate "} : () -> !llvm.ptr
        %1281 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1279, %1281, %1280) {"typ" = !llvm.array<29 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1282 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %1283 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %1284 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %1285 = "mid.unwrap"(%1279) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1286 = "mid.unwrap"(%1282) : (si32) -> i32
        %1287 = "mid.unwrap"(%1283) : (si32) -> i32
        %1288 = "mid.unwrap"(%1284) : (si32) -> i32
        %1289 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1290 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %1291 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %1292 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %1293 = "hi.cast"(%1279) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1294 = "mid.unwrap"(%1293) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1295 = "hi.cast"(%1290) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1296 = "mid.unwrap"(%1295) : (si32) -> i32
        %1297 = "hi.cast"(%1291) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1298 = "mid.unwrap"(%1297) : (si32) -> i32
        %1299 = "hi.cast"(%1292) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1300 = "mid.unwrap"(%1299) : (si32) -> i32
        %1301 = "mid.unwrap"(%1289) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1302 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1303 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1304 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1305 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1306 = "mid.parameterizations_array"(%1302, %1303, %1304, %1305) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1306, %1301, %1294, %1296, %1298, %1300) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1307 = "hi.cast"(%1289) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1308 = "mid.unwrap"(%1307) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1309 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1310 = "mid.parameterizations_array"(%1309) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1310, %1308) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1311 = "hi.cast"(%1217) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1312 = "mid.unwrap"(%1311) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1313 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1314 = "mid.parameterizations_array"(%1313) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1314, %1312) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1315 = "mid.literal"() {"value" = 34 : i32, "typ" = i32} : () -> si32
        %1316 = "hi.cast"(%1315) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1317 = "mid.create_buffer"(%1316) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1318 = "mid.refer"(%1317) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1319 = "mid.literal"() {"typ" = !llvm.array<33 x i8>, "value" = " unique keys for random hit test."} : () -> !llvm.ptr
        %1320 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1318, %1320, %1319) {"typ" = !llvm.array<33 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1321 = "mid.literal"() {"value" = 33 : i32, "typ" = i32} : () -> si32
        %1322 = "mid.literal"() {"value" = 33 : i32, "typ" = i32} : () -> si32
        %1323 = "mid.literal"() {"value" = 34 : i32, "typ" = i32} : () -> si32
        %1324 = "mid.unwrap"(%1318) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1325 = "mid.unwrap"(%1321) : (si32) -> i32
        %1326 = "mid.unwrap"(%1322) : (si32) -> i32
        %1327 = "mid.unwrap"(%1323) : (si32) -> i32
        %1328 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1329 = "mid.literal"() {"value" = 33 : i32, "typ" = i32} : () -> si32
        %1330 = "mid.literal"() {"value" = 33 : i32, "typ" = i32} : () -> si32
        %1331 = "mid.literal"() {"value" = 34 : i32, "typ" = i32} : () -> si32
        %1332 = "hi.cast"(%1318) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1333 = "mid.unwrap"(%1332) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1334 = "hi.cast"(%1329) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1335 = "mid.unwrap"(%1334) : (si32) -> i32
        %1336 = "hi.cast"(%1330) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1337 = "mid.unwrap"(%1336) : (si32) -> i32
        %1338 = "hi.cast"(%1331) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1339 = "mid.unwrap"(%1338) : (si32) -> i32
        %1340 = "mid.unwrap"(%1328) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1341 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1342 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1343 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1344 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1345 = "mid.parameterizations_array"(%1341, %1342, %1343, %1344) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1345, %1340, %1333, %1335, %1337, %1339) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1346 = "hi.cast"(%1328) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1347 = "mid.unwrap"(%1346) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1348 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1349 = "mid.parameterizations_array"(%1348) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1349, %1347) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1350 = "hi.cast"(%1217) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1150, %1350) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %1351 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %1352 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> si64
      %1353 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1354 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1355 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %1356 = "hi.comparison"(%1355, %1150) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %1357 = "mid.unwrap"(%1356) : (si1) -> i1
      }, {
        %1358 = "hi.cast"(%1355) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1359 = "mid.unwrap"(%1358) : (si32) -> i32
        %1360 = "mid.unwrap"(%1192) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1361 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1362 = "mid.parameterizations_array"(%1361) : (!llvm.ptr) -> !llvm.ptr
        %1363 = "mid.method_call"(%1362, %1360, %1359) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %1364 = "hi.cast"(%1363) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> si32
        %1365 = "hi.cast"(%1364) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %1366 = "mid.unwrap"(%1365) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1367 = "mid.unwrap"(%1173) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1368 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1369 = "mid.parameterizations_array"(%1368) : (!llvm.ptr) -> !llvm.ptr
        %1370 = "mid.method_call"(%1369, %1367, %1366) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %1371 = "hi.cast"(%1370) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %1372 = "mid.checkflag"(%1371) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %1373 = "mid.unwrap"(%1372) : (si1) -> i1
        "mid.if"(%1373) ({
          %1374 = "hi.cast"(%1371) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
          %1375 = "hi.cast"(%1374) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
          %1376 = "hi.arithmetic"(%1352, %1375) {"op" = "ADD", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
          %1377 = "hi.cast"(%1376) {"from_typ" = si64, "to_typ" = si64, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (si64) -> si64
          "mid.assign"(%1352, %1377) {"typ" = i64} : (si64, si64) -> ()
          %1378 = "hi.cast"(%1374) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%1371, %1378) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }, {
          %1379 = "hi.cast"(%1371) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[si32, !hi.nil]>) -> !hi.nil
          %1380 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %1381 = "hi.cast"(%1380) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%1353, %1381) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %1382 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
          %1383 = "hi.comparison"(%1354, %1382) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          %1384 = "mid.unwrap"(%1383) : (si1) -> i1
          "mid.if"(%1384) ({
            %1385 = "mid.literal"() {"value" = 52 : i32, "typ" = i32} : () -> si32
            %1386 = "hi.cast"(%1385) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
            %1387 = "mid.create_buffer"(%1386) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
            %1388 = "mid.refer"(%1387) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
            %1389 = "mid.literal"() {"typ" = !llvm.array<51 x i8>, "value" = "Error: Nil returned during random hit test for key "} : () -> !llvm.ptr
            %1390 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
            "mid.buffer_set"(%1388, %1390, %1389) {"typ" = !llvm.array<51 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
            %1391 = "mid.literal"() {"value" = 51 : i32, "typ" = i32} : () -> si32
            %1392 = "mid.literal"() {"value" = 51 : i32, "typ" = i32} : () -> si32
            %1393 = "mid.literal"() {"value" = 52 : i32, "typ" = i32} : () -> si32
            %1394 = "mid.unwrap"(%1388) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
            %1395 = "mid.unwrap"(%1391) : (si32) -> i32
            %1396 = "mid.unwrap"(%1392) : (si32) -> i32
            %1397 = "mid.unwrap"(%1393) : (si32) -> i32
            %1398 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
            %1399 = "mid.literal"() {"value" = 51 : i32, "typ" = i32} : () -> si32
            %1400 = "mid.literal"() {"value" = 51 : i32, "typ" = i32} : () -> si32
            %1401 = "mid.literal"() {"value" = 52 : i32, "typ" = i32} : () -> si32
            %1402 = "hi.cast"(%1388) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
            %1403 = "mid.unwrap"(%1402) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
            %1404 = "hi.cast"(%1399) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %1405 = "mid.unwrap"(%1404) : (si32) -> i32
            %1406 = "hi.cast"(%1400) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %1407 = "mid.unwrap"(%1406) : (si32) -> i32
            %1408 = "hi.cast"(%1401) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %1409 = "mid.unwrap"(%1408) : (si32) -> i32
            %1410 = "mid.unwrap"(%1398) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
            %1411 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
            %1412 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %1413 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %1414 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %1415 = "mid.parameterizations_array"(%1411, %1412, %1413, %1414) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
            "mid.method_call"(%1415, %1410, %1403, %1405, %1407, %1409) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
            %1416 = "hi.cast"(%1398) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
            %1417 = "mid.unwrap"(%1416) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
            %1418 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
            %1419 = "mid.parameterizations_array"(%1418) : (!llvm.ptr) -> !llvm.ptr
            "mid.class_method_call"(%1419, %1417) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
            %1420 = "hi.cast"(%1364) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
            %1421 = "mid.unwrap"(%1420) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
            %1422 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %1423 = "mid.parameterizations_array"(%1422) : (!llvm.ptr) -> !llvm.ptr
            "mid.class_method_call"(%1423, %1421) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
            %1424 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
            %1425 = "hi.arithmetic"(%1354, %1424) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
            %1426 = "hi.cast"(%1425) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            "mid.assign"(%1354, %1426) {"typ" = i32} : (si32, si32) -> ()
          }) : (i1) -> ()
          %1427 = "hi.cast"(%1379) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%1371, %1427) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1428 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %1429 = "hi.arithmetic"(%1355, %1428) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1430 = "hi.cast"(%1429) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1355, %1430) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %1431 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %1432 = "hi.comparison"(%1352, %1193) {"op" = "NEQ", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si1
      %1433 = "mid.unwrap"(%1432) : (si1) -> i1
      "mid.if"(%1433) ({
        %1434 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1435 = "hi.cast"(%1434) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.assign"(%1353, %1435) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      }) : (i1) -> ()
      %1436 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %1437 = "hi.cast"(%1436) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1438 = "mid.create_buffer"(%1437) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %1439 = "mid.refer"(%1438) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1440 = "mid.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "Get Random Hit"} : () -> !llvm.ptr
      %1441 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1439, %1441, %1440) {"typ" = !llvm.array<14 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %1442 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %1443 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %1444 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %1445 = "mid.unwrap"(%1439) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1446 = "mid.unwrap"(%1442) : (si32) -> i32
      %1447 = "mid.unwrap"(%1443) : (si32) -> i32
      %1448 = "mid.unwrap"(%1444) : (si32) -> i32
      %1449 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1450 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %1451 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %1452 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %1453 = "hi.cast"(%1439) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1454 = "mid.unwrap"(%1453) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1455 = "hi.cast"(%1450) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1456 = "mid.unwrap"(%1455) : (si32) -> i32
      %1457 = "hi.cast"(%1451) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1458 = "mid.unwrap"(%1457) : (si32) -> i32
      %1459 = "hi.cast"(%1452) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1460 = "mid.unwrap"(%1459) : (si32) -> i32
      %1461 = "mid.unwrap"(%1449) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1462 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1463 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1464 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1465 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1466 = "mid.parameterizations_array"(%1462, %1463, %1464, %1465) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1466, %1461, %1454, %1456, %1458, %1460) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1467 = "hi.arithmetic"(%1431, %1351) {"op" = "SUB", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
      %1468 = "mid.unwrap"(%1449) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1469 = "mid.unwrap"(%1150) : (si32) -> i32
      %1470 = "mid.unwrap"(%1467) : (si64) -> i64
      "mid.call"(%1468, %1469, %1470) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %1471 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1472 = "hi.cast"(%1471) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1473 = "mid.create_buffer"(%1472) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %1474 = "mid.refer"(%1473) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1475 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %1476 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1474, %1476, %1475) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %1477 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1478 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1479 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1480 = "mid.unwrap"(%1474) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1481 = "mid.unwrap"(%1477) : (si32) -> i32
      %1482 = "mid.unwrap"(%1478) : (si32) -> i32
      %1483 = "mid.unwrap"(%1479) : (si32) -> i32
      %1484 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1485 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1486 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1487 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1488 = "hi.cast"(%1474) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1489 = "mid.unwrap"(%1488) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1490 = "hi.cast"(%1485) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1491 = "mid.unwrap"(%1490) : (si32) -> i32
      %1492 = "hi.cast"(%1486) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1493 = "mid.unwrap"(%1492) : (si32) -> i32
      %1494 = "hi.cast"(%1487) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1495 = "mid.unwrap"(%1494) : (si32) -> i32
      %1496 = "mid.unwrap"(%1484) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1497 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1498 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1499 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1500 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1501 = "mid.parameterizations_array"(%1497, %1498, %1499, %1500) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1501, %1496, %1489, %1491, %1493, %1495) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1502 = "hi.cast"(%1484) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %1503 = "mid.unwrap"(%1502) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1504 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1505 = "mid.parameterizations_array"(%1504) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%1505, %1503) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %1506 = "mid.unwrap"(%1353) : (!hi.bool) -> i1
      "mid.if"(%1506) ({
        %1507 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1508 = "hi.cast"(%1507) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1509 = "mid.create_buffer"(%1508) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1510 = "mid.refer"(%1509) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1511 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %1512 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1510, %1512, %1511) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1513 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1514 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1515 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1516 = "mid.unwrap"(%1510) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1517 = "mid.unwrap"(%1513) : (si32) -> i32
        %1518 = "mid.unwrap"(%1514) : (si32) -> i32
        %1519 = "mid.unwrap"(%1515) : (si32) -> i32
        %1520 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1521 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1522 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1523 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1524 = "hi.cast"(%1510) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1525 = "mid.unwrap"(%1524) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1526 = "hi.cast"(%1521) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1527 = "mid.unwrap"(%1526) : (si32) -> i32
        %1528 = "hi.cast"(%1522) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1529 = "mid.unwrap"(%1528) : (si32) -> i32
        %1530 = "hi.cast"(%1523) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1531 = "mid.unwrap"(%1530) : (si32) -> i32
        %1532 = "mid.unwrap"(%1520) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1533 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1534 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1535 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1536 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1537 = "mid.parameterizations_array"(%1533, %1534, %1535, %1536) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1537, %1532, %1525, %1527, %1529, %1531) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1538 = "hi.cast"(%1520) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1539 = "mid.unwrap"(%1538) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1540 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1541 = "mid.parameterizations_array"(%1540) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1541, %1539) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %1542 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1543 = "hi.cast"(%1542) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1544 = "mid.create_buffer"(%1543) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1545 = "mid.refer"(%1544) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1546 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %1547 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1545, %1547, %1546) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1548 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1549 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1550 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1551 = "mid.unwrap"(%1545) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1552 = "mid.unwrap"(%1548) : (si32) -> i32
        %1553 = "mid.unwrap"(%1549) : (si32) -> i32
        %1554 = "mid.unwrap"(%1550) : (si32) -> i32
        %1555 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1556 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1557 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1558 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1559 = "hi.cast"(%1545) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1560 = "mid.unwrap"(%1559) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1561 = "hi.cast"(%1556) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1562 = "mid.unwrap"(%1561) : (si32) -> i32
        %1563 = "hi.cast"(%1557) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1564 = "mid.unwrap"(%1563) : (si32) -> i32
        %1565 = "hi.cast"(%1558) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1566 = "mid.unwrap"(%1565) : (si32) -> i32
        %1567 = "mid.unwrap"(%1555) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1568 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1569 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1570 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1571 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1572 = "mid.parameterizations_array"(%1568, %1569, %1570, %1571) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1572, %1567, %1560, %1562, %1564, %1566) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1573 = "hi.cast"(%1555) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1574 = "mid.unwrap"(%1573) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1575 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1576 = "mid.parameterizations_array"(%1575) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1576, %1574) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "benchmark_get_random_hit", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb14(%1577 : i32):
      %1578 = "mid.wrap"(%1577) : (i32) -> si32
      %1579 = "hi.cast"(%1578) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1580 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1581 = "mid.wrap"(%1580) : (!llvm.ptr) -> !llvm.ptr
      %1582 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1583 = "mid.wrap"(%1582) : (!llvm.ptr) -> !llvm.ptr
      %1584 = "mid.unwrap"(%1581) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1585 = "mid.unwrap"(%1583) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1586 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1587 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1588 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1589 = "mid.new"(%1586, %1587, %1588) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %1590 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1591 = "mid.wrap"(%1590) : (!llvm.ptr) -> !llvm.ptr
      %1592 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1593 = "mid.wrap"(%1592) : (!llvm.ptr) -> !llvm.ptr
      %1594 = "hi.cast"(%1591) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %1595 = "mid.unwrap"(%1594) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %1596 = "hi.cast"(%1593) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %1597 = "mid.unwrap"(%1596) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1598 = "mid.unwrap"(%1589) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1599 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1600 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1601 = "mid.parameterizations_array"(%1599, %1600) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1601, %1598, %1595, %1597) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1602 = "mid.refer"(%1589) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %1603 = "mid.literal"() {"value" = 789 : i32, "typ" = i32} : () -> si32
      %1604 = "mid.unwrap"(%1603) : (si32) -> i32
      %1605 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %1606 = "mid.literal"() {"value" = 789 : i32, "typ" = i32} : () -> si32
      %1607 = "hi.cast"(%1606) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1608 = "mid.unwrap"(%1607) : (si32) -> i32
      %1609 = "mid.unwrap"(%1605) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1610 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1611 = "mid.parameterizations_array"(%1610) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1611, %1609, %1608) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1612 = "mid.refer"(%1605) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %1613 = "mid.literal"() {"value" = 987 : i32, "typ" = i32} : () -> si32
      %1614 = "mid.unwrap"(%1613) : (si32) -> i32
      %1615 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %1616 = "mid.literal"() {"value" = 987 : i32, "typ" = i32} : () -> si32
      %1617 = "hi.cast"(%1616) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1618 = "mid.unwrap"(%1617) : (si32) -> i32
      %1619 = "mid.unwrap"(%1615) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1620 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1621 = "mid.parameterizations_array"(%1620) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1621, %1619, %1618) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1622 = "mid.refer"(%1615) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %1623 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1624 = "mid.wrap"(%1623) : (!llvm.ptr) -> !llvm.ptr
      %1625 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1626 = "mid.wrap"(%1625) : (!llvm.ptr) -> !llvm.ptr
      %1627 = "mid.unwrap"(%1624) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1628 = "mid.unwrap"(%1626) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %1629 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1630 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
      %1631 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["bool_typ"]], "name_hierarchy" = ["Pairi32._Bool", ["i32"], ["Bool"]]} : () -> !llvm.ptr
      %1632 = "mid.new"(%1629, %1630, %1631) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, !hi.bool]>
      %1633 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %1634 = "mid.wrap"(%1633) : (!llvm.ptr) -> !llvm.ptr
      %1635 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %1636 = "mid.wrap"(%1635) : (!llvm.ptr) -> !llvm.ptr
      %1637 = "hi.cast"(%1634) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %1638 = "mid.unwrap"(%1637) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %1639 = "hi.cast"(%1636) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %1640 = "mid.unwrap"(%1639) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1641 = "mid.unwrap"(%1632) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1642 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1643 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %1644 = "mid.parameterizations_array"(%1642, %1643) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1644, %1641, %1638, %1640) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1645 = "mid.refer"(%1632) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !hi.fatptr<"SwissTable", [si32, !hi.bool]>
      %1646 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1647 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1648 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %1649 = "hi.arithmetic"(%1579, %1648) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      "mid.while"() ({
        %1650 = "hi.comparison"(%1646, %1579) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %1651 = "hi.logical"(%1650) ({
          %1652 = "hi.comparison"(%1647, %1649) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          func.return %1652 : si1
        }) {"op" = "and"} : (si1) -> si1
        %1653 = "mid.unwrap"(%1651) : (si1) -> i1
      }, {
        %1654 = "mid.unwrap"(%1612) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1655 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1656 = "mid.method_call"(%1655, %1654) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %1657 = "hi.cast"(%1656) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1658 = "hi.cast"(%1657) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %1659 = "mid.unwrap"(%1658) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1660 = "mid.unwrap"(%1645) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1661 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1662 = "mid.parameterizations_array"(%1661) : (!llvm.ptr) -> !llvm.ptr
        %1663 = "mid.method_call"(%1662, %1660, %1659) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %1664 = "hi.cast"(%1663) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.bool]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.bool]>
        %1665 = "mid.checkflag"(%1664) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.bool]>) -> si1
        %1666 = "mid.unwrap"(%1665) : (si1) -> i1
        "mid.if"(%1666) ({
          %1667 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %1668 = "hi.arithmetic"(%1657, %1667) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %1669 = "hi.cast"(%1657) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %1670 = "mid.unwrap"(%1669) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1671 = "hi.cast"(%1668) {"from_typ" = si32, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"V", !hi.any, "SwissTable">
          %1672 = "mid.unwrap"(%1671) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1673 = "mid.unwrap"(%1602) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1674 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1675 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1676 = "mid.parameterizations_array"(%1674, %1675) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1676, %1673, %1670, %1672) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1677 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %1678 = "hi.cast"(%1657) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %1679 = "mid.unwrap"(%1678) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1680 = "hi.cast"(%1677) {"from_typ" = !hi.bool, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "bool_typ", "to_typ_name" = "any_typ"} : (!hi.bool) -> !hi.type_param<"V", !hi.any, "SwissTable">
          %1681 = "mid.unwrap"(%1680) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1682 = "mid.unwrap"(%1645) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1683 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1684 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
          %1685 = "mid.parameterizations_array"(%1683, %1684) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1685, %1682, %1679, %1681) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "bool_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1686 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %1687 = "hi.arithmetic"(%1646, %1686) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %1688 = "hi.cast"(%1687) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%1646, %1688) {"typ" = i32} : (si32, si32) -> ()
        }) : (i1) -> ()
        %1689 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %1690 = "hi.arithmetic"(%1647, %1689) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1691 = "hi.cast"(%1690) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1647, %1691) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %1692 = "mid.unwrap"(%1579) : (si32) -> i32
      %1693 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1694 = "mid.new"(%1693) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [si32]>
      %1695 = "hi.cast"(%1579) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1696 = "mid.unwrap"(%1695) : (si32) -> i32
      %1697 = "mid.unwrap"(%1694) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1698 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1699 = "mid.parameterizations_array"(%1698) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1699, %1697, %1696) {"offset" = 7 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %1700 = "mid.refer"(%1694) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [si32]>) -> !hi.fatptr<"Array", [si32]>
      %1701 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1702 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1703 = "hi.cast"(%1702) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      "mid.assign"(%1647, %1703) {"typ" = i32} : (si32, si32) -> ()
      %1704 = "mid.literal"() {"value" = 20 : i32, "typ" = i32} : () -> si32
      %1705 = "hi.arithmetic"(%1579, %1704) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      "mid.while"() ({
        %1706 = "hi.comparison"(%1701, %1579) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %1707 = "hi.logical"(%1706) ({
          %1708 = "hi.comparison"(%1647, %1705) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          func.return %1708 : si1
        }) {"op" = "and"} : (si1) -> si1
        %1709 = "mid.unwrap"(%1707) : (si1) -> i1
      }, {
        %1710 = "mid.unwrap"(%1622) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1711 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1712 = "mid.method_call"(%1711, %1710) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %1713 = "hi.cast"(%1712) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1714 = "hi.cast"(%1713) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %1715 = "mid.unwrap"(%1714) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1716 = "mid.unwrap"(%1645) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1717 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1718 = "mid.parameterizations_array"(%1717) : (!llvm.ptr) -> !llvm.ptr
        %1719 = "mid.method_call"(%1718, %1716, %1715) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %1720 = "hi.cast"(%1719) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.bool]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.bool]>
        %1721 = "mid.checkflag"(%1720) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.bool]>) -> si1
        %1722 = "mid.unwrap"(%1721) : (si1) -> i1
        "mid.if"(%1722) ({
          %1723 = "hi.cast"(%1701) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %1724 = "mid.unwrap"(%1723) : (si32) -> i32
          %1725 = "hi.cast"(%1713) {"from_typ" = si32, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"T", !hi.any, "Array">
          %1726 = "mid.unwrap"(%1725) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
          %1727 = "mid.unwrap"(%1700) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %1728 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1729 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %1730 = "mid.parameterizations_array"(%1728, %1729) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%1730, %1727, %1724, %1726) {"offset" = 12 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %1731 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %1732 = "hi.arithmetic"(%1701, %1731) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %1733 = "hi.cast"(%1732) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%1701, %1733) {"typ" = i32} : (si32, si32) -> ()
        }) : (i1) -> ()
        %1734 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %1735 = "hi.arithmetic"(%1647, %1734) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1736 = "hi.cast"(%1735) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1647, %1736) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %1737 = "hi.comparison"(%1701, %1579) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1738 = "mid.unwrap"(%1737) : (si1) -> i1
      "mid.if"(%1738) ({
        %1739 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %1740 = "hi.cast"(%1739) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1741 = "mid.create_buffer"(%1740) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1742 = "mid.refer"(%1741) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1743 = "mid.literal"() {"typ" = !llvm.array<29 x i8>, "value" = "Warning: Could only generate "} : () -> !llvm.ptr
        %1744 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1742, %1744, %1743) {"typ" = !llvm.array<29 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1745 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %1746 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %1747 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %1748 = "mid.unwrap"(%1742) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1749 = "mid.unwrap"(%1745) : (si32) -> i32
        %1750 = "mid.unwrap"(%1746) : (si32) -> i32
        %1751 = "mid.unwrap"(%1747) : (si32) -> i32
        %1752 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1753 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %1754 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %1755 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %1756 = "hi.cast"(%1742) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1757 = "mid.unwrap"(%1756) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1758 = "hi.cast"(%1753) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1759 = "mid.unwrap"(%1758) : (si32) -> i32
        %1760 = "hi.cast"(%1754) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1761 = "mid.unwrap"(%1760) : (si32) -> i32
        %1762 = "hi.cast"(%1755) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1763 = "mid.unwrap"(%1762) : (si32) -> i32
        %1764 = "mid.unwrap"(%1752) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1765 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1766 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1767 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1768 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1769 = "mid.parameterizations_array"(%1765, %1766, %1767, %1768) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1769, %1764, %1757, %1759, %1761, %1763) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1770 = "hi.cast"(%1752) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1771 = "mid.unwrap"(%1770) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1772 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1773 = "mid.parameterizations_array"(%1772) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1773, %1771) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1774 = "hi.cast"(%1701) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1775 = "mid.unwrap"(%1774) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1776 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1777 = "mid.parameterizations_array"(%1776) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1777, %1775) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1778 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> si32
        %1779 = "hi.cast"(%1778) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1780 = "mid.create_buffer"(%1779) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1781 = "mid.refer"(%1780) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1782 = "mid.literal"() {"typ" = !llvm.array<22 x i8>, "value" = " guaranteed miss keys."} : () -> !llvm.ptr
        %1783 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1781, %1783, %1782) {"typ" = !llvm.array<22 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1784 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> si32
        %1785 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> si32
        %1786 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> si32
        %1787 = "mid.unwrap"(%1781) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1788 = "mid.unwrap"(%1784) : (si32) -> i32
        %1789 = "mid.unwrap"(%1785) : (si32) -> i32
        %1790 = "mid.unwrap"(%1786) : (si32) -> i32
        %1791 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1792 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> si32
        %1793 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> si32
        %1794 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> si32
        %1795 = "hi.cast"(%1781) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1796 = "mid.unwrap"(%1795) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1797 = "hi.cast"(%1792) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1798 = "mid.unwrap"(%1797) : (si32) -> i32
        %1799 = "hi.cast"(%1793) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1800 = "mid.unwrap"(%1799) : (si32) -> i32
        %1801 = "hi.cast"(%1794) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1802 = "mid.unwrap"(%1801) : (si32) -> i32
        %1803 = "mid.unwrap"(%1791) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1804 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1805 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1806 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1807 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1808 = "mid.parameterizations_array"(%1804, %1805, %1806, %1807) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1808, %1803, %1796, %1798, %1800, %1802) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1809 = "hi.cast"(%1791) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1810 = "mid.unwrap"(%1809) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1811 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1812 = "mid.parameterizations_array"(%1811) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1812, %1810) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1813 = "hi.cast"(%1701) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1579, %1813) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %1814 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %1815 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1816 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1817 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %1818 = "hi.comparison"(%1817, %1579) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %1819 = "mid.unwrap"(%1818) : (si1) -> i1
      }, {
        %1820 = "hi.cast"(%1817) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1821 = "mid.unwrap"(%1820) : (si32) -> i32
        %1822 = "mid.unwrap"(%1700) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1823 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1824 = "mid.parameterizations_array"(%1823) : (!llvm.ptr) -> !llvm.ptr
        %1825 = "mid.method_call"(%1824, %1822, %1821) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %1826 = "hi.cast"(%1825) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> si32
        %1827 = "hi.cast"(%1826) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %1828 = "mid.unwrap"(%1827) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1829 = "mid.unwrap"(%1602) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1830 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1831 = "mid.parameterizations_array"(%1830) : (!llvm.ptr) -> !llvm.ptr
        %1832 = "mid.method_call"(%1831, %1829, %1828) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %1833 = "hi.cast"(%1832) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %1834 = "mid.checkflag"(%1833) {"typ_name" = "nil_typ"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %1835 = "mid.unwrap"(%1834) : (si1) -> i1
        "mid.if"(%1835) ({
          %1836 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %1837 = "hi.arithmetic"(%1815, %1836) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %1838 = "hi.cast"(%1837) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%1815, %1838) {"typ" = i32} : (si32, si32) -> ()
        }, {
          %1839 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %1840 = "hi.arithmetic"(%1816, %1839) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %1841 = "hi.cast"(%1840) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%1816, %1841) {"typ" = i32} : (si32, si32) -> ()
        }) : (i1) -> ()
        %1842 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %1843 = "hi.arithmetic"(%1817, %1842) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1844 = "hi.cast"(%1843) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%1817, %1844) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %1845 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %1846 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1847 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %1848 = "hi.comparison"(%1579, %1847) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %1849 = "mid.unwrap"(%1848) : (si1) -> i1
      "mid.if"(%1849) ({
        %1850 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> si32
        %1851 = "hi.arithmetic"(%1816, %1850) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1852 = "hi.arithmetic"(%1851, %1579) {"op" = "DIV", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %1853 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1854 = "hi.comparison"(%1852, %1853) {"op" = "GE", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %1855 = "mid.unwrap"(%1854) : (si1) -> i1
        "mid.if"(%1855) ({
          %1856 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %1857 = "hi.cast"(%1856) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%1846, %1857) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }, {
        %1858 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %1859 = "hi.comparison"(%1816, %1858) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %1860 = "mid.unwrap"(%1859) : (si1) -> i1
        "mid.if"(%1860) ({
          %1861 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %1862 = "hi.cast"(%1861) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%1846, %1862) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
        }) : (i1) -> ()
      }) : (i1) -> ()
      %1863 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> si32
      %1864 = "hi.cast"(%1863) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1865 = "mid.create_buffer"(%1864) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %1866 = "mid.refer"(%1865) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1867 = "mid.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "Get Random Miss"} : () -> !llvm.ptr
      %1868 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1866, %1868, %1867) {"typ" = !llvm.array<15 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %1869 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %1870 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %1871 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> si32
      %1872 = "mid.unwrap"(%1866) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1873 = "mid.unwrap"(%1869) : (si32) -> i32
      %1874 = "mid.unwrap"(%1870) : (si32) -> i32
      %1875 = "mid.unwrap"(%1871) : (si32) -> i32
      %1876 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1877 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %1878 = "mid.literal"() {"value" = 15 : i32, "typ" = i32} : () -> si32
      %1879 = "mid.literal"() {"value" = 16 : i32, "typ" = i32} : () -> si32
      %1880 = "hi.cast"(%1866) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1881 = "mid.unwrap"(%1880) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1882 = "hi.cast"(%1877) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1883 = "mid.unwrap"(%1882) : (si32) -> i32
      %1884 = "hi.cast"(%1878) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1885 = "mid.unwrap"(%1884) : (si32) -> i32
      %1886 = "hi.cast"(%1879) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1887 = "mid.unwrap"(%1886) : (si32) -> i32
      %1888 = "mid.unwrap"(%1876) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1889 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1890 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1891 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1892 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1893 = "mid.parameterizations_array"(%1889, %1890, %1891, %1892) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1893, %1888, %1881, %1883, %1885, %1887) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1894 = "hi.arithmetic"(%1845, %1814) {"op" = "SUB", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
      %1895 = "mid.unwrap"(%1876) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1896 = "mid.unwrap"(%1579) : (si32) -> i32
      %1897 = "mid.unwrap"(%1894) : (si64) -> i64
      "mid.call"(%1895, %1896, %1897) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %1898 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1899 = "hi.cast"(%1898) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %1900 = "mid.create_buffer"(%1899) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %1901 = "mid.refer"(%1900) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %1902 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %1903 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1901, %1903, %1902) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %1904 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1905 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1906 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1907 = "mid.unwrap"(%1901) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1908 = "mid.unwrap"(%1904) : (si32) -> i32
      %1909 = "mid.unwrap"(%1905) : (si32) -> i32
      %1910 = "mid.unwrap"(%1906) : (si32) -> i32
      %1911 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1912 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1913 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %1914 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %1915 = "hi.cast"(%1901) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %1916 = "mid.unwrap"(%1915) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %1917 = "hi.cast"(%1912) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1918 = "mid.unwrap"(%1917) : (si32) -> i32
      %1919 = "hi.cast"(%1913) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1920 = "mid.unwrap"(%1919) : (si32) -> i32
      %1921 = "hi.cast"(%1914) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %1922 = "mid.unwrap"(%1921) : (si32) -> i32
      %1923 = "mid.unwrap"(%1911) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1924 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1925 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1926 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1927 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1928 = "mid.parameterizations_array"(%1924, %1925, %1926, %1927) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1928, %1923, %1916, %1918, %1920, %1922) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %1929 = "hi.cast"(%1911) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %1930 = "mid.unwrap"(%1929) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1931 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1932 = "mid.parameterizations_array"(%1931) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%1932, %1930) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %1933 = "mid.unwrap"(%1846) : (!hi.bool) -> i1
      "mid.if"(%1933) ({
        %1934 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1935 = "hi.cast"(%1934) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1936 = "mid.create_buffer"(%1935) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1937 = "mid.refer"(%1936) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1938 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %1939 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1937, %1939, %1938) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1940 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1941 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1942 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1943 = "mid.unwrap"(%1937) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1944 = "mid.unwrap"(%1940) : (si32) -> i32
        %1945 = "mid.unwrap"(%1941) : (si32) -> i32
        %1946 = "mid.unwrap"(%1942) : (si32) -> i32
        %1947 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1948 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1949 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1950 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1951 = "hi.cast"(%1937) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1952 = "mid.unwrap"(%1951) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1953 = "hi.cast"(%1948) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1954 = "mid.unwrap"(%1953) : (si32) -> i32
        %1955 = "hi.cast"(%1949) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1956 = "mid.unwrap"(%1955) : (si32) -> i32
        %1957 = "hi.cast"(%1950) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1958 = "mid.unwrap"(%1957) : (si32) -> i32
        %1959 = "mid.unwrap"(%1947) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1960 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1961 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1962 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1963 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1964 = "mid.parameterizations_array"(%1960, %1961, %1962, %1963) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1964, %1959, %1952, %1954, %1956, %1958) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %1965 = "hi.cast"(%1947) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %1966 = "mid.unwrap"(%1965) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1967 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %1968 = "mid.parameterizations_array"(%1967) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%1968, %1966) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %1969 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1970 = "hi.cast"(%1969) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %1971 = "mid.create_buffer"(%1970) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %1972 = "mid.refer"(%1971) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %1973 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %1974 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%1972, %1974, %1973) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %1975 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1976 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1977 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1978 = "mid.unwrap"(%1972) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1979 = "mid.unwrap"(%1975) : (si32) -> i32
        %1980 = "mid.unwrap"(%1976) : (si32) -> i32
        %1981 = "mid.unwrap"(%1977) : (si32) -> i32
        %1982 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %1983 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1984 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %1985 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %1986 = "hi.cast"(%1972) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %1987 = "mid.unwrap"(%1986) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %1988 = "hi.cast"(%1983) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1989 = "mid.unwrap"(%1988) : (si32) -> i32
        %1990 = "hi.cast"(%1984) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1991 = "mid.unwrap"(%1990) : (si32) -> i32
        %1992 = "hi.cast"(%1985) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %1993 = "mid.unwrap"(%1992) : (si32) -> i32
        %1994 = "mid.unwrap"(%1982) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1995 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %1996 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1997 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1998 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %1999 = "mid.parameterizations_array"(%1995, %1996, %1997, %1998) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%1999, %1994, %1987, %1989, %1991, %1993) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %2000 = "hi.cast"(%1982) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %2001 = "mid.unwrap"(%2000) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2002 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2003 = "mid.parameterizations_array"(%2002) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2003, %2001) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
      %2004 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %2005 = "hi.cast"(%2004) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2006 = "mid.create_buffer"(%2005) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2007 = "mid.refer"(%2006) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2008 = "mid.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "    (Misses: "} : () -> !llvm.ptr
      %2009 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2007, %2009, %2008) {"typ" = !llvm.array<13 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2010 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2011 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2012 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %2013 = "mid.unwrap"(%2007) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2014 = "mid.unwrap"(%2010) : (si32) -> i32
      %2015 = "mid.unwrap"(%2011) : (si32) -> i32
      %2016 = "mid.unwrap"(%2012) : (si32) -> i32
      %2017 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2018 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2019 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2020 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %2021 = "hi.cast"(%2007) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2022 = "mid.unwrap"(%2021) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2023 = "hi.cast"(%2018) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2024 = "mid.unwrap"(%2023) : (si32) -> i32
      %2025 = "hi.cast"(%2019) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2026 = "mid.unwrap"(%2025) : (si32) -> i32
      %2027 = "hi.cast"(%2020) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2028 = "mid.unwrap"(%2027) : (si32) -> i32
      %2029 = "mid.unwrap"(%2017) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2030 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2031 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2032 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2033 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2034 = "mid.parameterizations_array"(%2030, %2031, %2032, %2033) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2034, %2029, %2022, %2024, %2026, %2028) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2035 = "hi.cast"(%2017) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2036 = "mid.unwrap"(%2035) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2037 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2038 = "mid.parameterizations_array"(%2037) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2038, %2036) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2039 = "hi.cast"(%1815) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2040 = "mid.unwrap"(%2039) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2041 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2042 = "mid.parameterizations_array"(%2041) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2042, %2040) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2043 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2044 = "hi.cast"(%2043) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2045 = "mid.create_buffer"(%2044) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2046 = "mid.refer"(%2045) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2047 = "mid.literal"() {"typ" = !llvm.array<8 x i8>, "value" = ", Hits: "} : () -> !llvm.ptr
      %2048 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2046, %2048, %2047) {"typ" = !llvm.array<8 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2049 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %2050 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %2051 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2052 = "mid.unwrap"(%2046) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2053 = "mid.unwrap"(%2049) : (si32) -> i32
      %2054 = "mid.unwrap"(%2050) : (si32) -> i32
      %2055 = "mid.unwrap"(%2051) : (si32) -> i32
      %2056 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2057 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %2058 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> si32
      %2059 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> si32
      %2060 = "hi.cast"(%2046) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2061 = "mid.unwrap"(%2060) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2062 = "hi.cast"(%2057) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2063 = "mid.unwrap"(%2062) : (si32) -> i32
      %2064 = "hi.cast"(%2058) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2065 = "mid.unwrap"(%2064) : (si32) -> i32
      %2066 = "hi.cast"(%2059) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2067 = "mid.unwrap"(%2066) : (si32) -> i32
      %2068 = "mid.unwrap"(%2056) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2069 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2070 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2071 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2072 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2073 = "mid.parameterizations_array"(%2069, %2070, %2071, %2072) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2073, %2068, %2061, %2063, %2065, %2067) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2074 = "hi.cast"(%2056) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2075 = "mid.unwrap"(%2074) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2076 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2077 = "mid.parameterizations_array"(%2076) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2077, %2075) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2078 = "hi.cast"(%1816) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2079 = "mid.unwrap"(%2078) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2080 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2081 = "mid.parameterizations_array"(%2080) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2081, %2079) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2082 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %2083 = "hi.cast"(%2082) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2084 = "mid.create_buffer"(%2083) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2085 = "mid.refer"(%2084) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2086 = "mid.literal"() {"typ" = !llvm.array<1 x i8>, "value" = ")"} : () -> !llvm.ptr
      %2087 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2085, %2087, %2086) {"typ" = !llvm.array<1 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2088 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2089 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2090 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %2091 = "mid.unwrap"(%2085) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2092 = "mid.unwrap"(%2088) : (si32) -> i32
      %2093 = "mid.unwrap"(%2089) : (si32) -> i32
      %2094 = "mid.unwrap"(%2090) : (si32) -> i32
      %2095 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2096 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2097 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2098 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %2099 = "hi.cast"(%2085) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2100 = "mid.unwrap"(%2099) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2101 = "hi.cast"(%2096) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2102 = "mid.unwrap"(%2101) : (si32) -> i32
      %2103 = "hi.cast"(%2097) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2104 = "mid.unwrap"(%2103) : (si32) -> i32
      %2105 = "hi.cast"(%2098) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2106 = "mid.unwrap"(%2105) : (si32) -> i32
      %2107 = "mid.unwrap"(%2095) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2108 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2109 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2110 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2111 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2112 = "mid.parameterizations_array"(%2108, %2109, %2110, %2111) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2112, %2107, %2100, %2102, %2104, %2106) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2113 = "hi.cast"(%2095) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2114 = "mid.unwrap"(%2113) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2115 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2116 = "mid.parameterizations_array"(%2115) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2116, %2114) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "benchmark_get_random_miss", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%2117 : i32):
      %2118 = "mid.wrap"(%2117) : (i32) -> si32
      %2119 = "hi.cast"(%2118) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2120 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %2121 = "mid.wrap"(%2120) : (!llvm.ptr) -> !llvm.ptr
      %2122 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %2123 = "mid.wrap"(%2122) : (!llvm.ptr) -> !llvm.ptr
      %2124 = "mid.unwrap"(%2121) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %2125 = "mid.unwrap"(%2123) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %2126 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2127 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2128 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Pairi32._i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2129 = "mid.new"(%2126, %2127, %2128) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %2130 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %2131 = "mid.wrap"(%2130) : (!llvm.ptr) -> !llvm.ptr
      %2132 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %2133 = "mid.wrap"(%2132) : (!llvm.ptr) -> !llvm.ptr
      %2134 = "hi.cast"(%2131) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %2135 = "mid.unwrap"(%2134) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %2136 = "hi.cast"(%2133) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %2137 = "mid.unwrap"(%2136) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %2138 = "mid.unwrap"(%2129) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2139 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2140 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2141 = "mid.parameterizations_array"(%2139, %2140) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2141, %2138, %2135, %2137) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %2142 = "mid.refer"(%2129) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !hi.fatptr<"SwissTable", [si32, si32]>
      %2143 = "mid.literal"() {"value" = 101112 : i32, "typ" = i32} : () -> si32
      %2144 = "mid.unwrap"(%2143) : (si32) -> i32
      %2145 = "mid.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "PRNG", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"PRNG">
      %2146 = "mid.literal"() {"value" = 101112 : i32, "typ" = i32} : () -> si32
      %2147 = "hi.cast"(%2146) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2148 = "mid.unwrap"(%2147) : (si32) -> i32
      %2149 = "mid.unwrap"(%2145) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2150 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2151 = "mid.parameterizations_array"(%2150) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2151, %2149, %2148) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %2152 = "mid.refer"(%2145) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"PRNG">) -> !hi.fatptr<"PRNG">
      %2153 = "mid.unwrap"(%2119) : (si32) -> i32
      %2154 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2155 = "mid.new"(%2154) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !hi.fatptr<"Array", [si32]>
      %2156 = "hi.cast"(%2119) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2157 = "mid.unwrap"(%2156) : (si32) -> i32
      %2158 = "mid.unwrap"(%2155) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2159 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2160 = "mid.parameterizations_array"(%2159) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2160, %2158, %2157) {"offset" = 7 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %2161 = "mid.refer"(%2155) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [si32]>) -> !hi.fatptr<"Array", [si32]>
      %2162 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %2163 = "mid.wrap"(%2162) : (!llvm.ptr) -> !llvm.ptr
      %2164 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %2165 = "mid.wrap"(%2164) : (!llvm.ptr) -> !llvm.ptr
      %2166 = "mid.unwrap"(%2163) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %2167 = "mid.unwrap"(%2165) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %2168 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2169 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
      %2170 = "mid.parameterization"() {"id_hierarchy" = ["Pair", ["i32_typ"], ["bool_typ"]], "name_hierarchy" = ["Pairi32._Bool", ["i32"], ["Bool"]]} : () -> !llvm.ptr
      %2171 = "mid.new"(%2168, %2169, %2170) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "SwissTable", "num_data_fields" = 6 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !hi.fatptr<"SwissTable", [si32, !hi.bool]>
      %2172 = "mid.addr_of"() {"global_name" = @i32_hasher} : () -> !llvm.ptr
      %2173 = "mid.wrap"(%2172) : (!llvm.ptr) -> !llvm.ptr
      %2174 = "mid.addr_of"() {"global_name" = @i32_eq} : () -> !llvm.ptr
      %2175 = "mid.wrap"(%2174) : (!llvm.ptr) -> !llvm.ptr
      %2176 = "hi.cast"(%2173) {"from_typ" = !hi.function<[si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, si32>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>
      %2177 = "mid.unwrap"(%2176) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, si32>) -> !llvm.struct<(!llvm.ptr)>
      %2178 = "hi.cast"(%2175) {"from_typ" = !hi.function<[si32, si32], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>
      %2179 = "mid.unwrap"(%2178) : (!hi.function<[!hi.type_param<"K", !hi.any, "SwissTable">, !hi.type_param<"K", !hi.any, "SwissTable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %2180 = "mid.unwrap"(%2171) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2181 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2182 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_Bool", ["Bool"], ["i32"], ["i32"]]} : () -> !llvm.ptr
      %2183 = "mid.parameterizations_array"(%2181, %2182) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2183, %2180, %2177, %2179) {"offset" = 13 : i32, "vptrs" = ["function_typ", "function_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %2184 = "mid.refer"(%2171) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !hi.fatptr<"SwissTable", [si32, !hi.bool]>
      %2185 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2186 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2187 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
      %2188 = "hi.arithmetic"(%2119, %2187) {"op" = "MUL", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
      "mid.while"() ({
        %2189 = "hi.comparison"(%2185, %2119) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %2190 = "hi.logical"(%2189) ({
          %2191 = "hi.comparison"(%2186, %2188) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          func.return %2191 : si1
        }) {"op" = "and"} : (si1) -> si1
        %2192 = "mid.unwrap"(%2190) : (si1) -> i1
      }, {
        %2193 = "mid.unwrap"(%2152) : (!hi.fatptr<"PRNG">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2194 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2195 = "mid.method_call"(%2194, %2193) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
        %2196 = "hi.cast"(%2195) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2197 = "hi.cast"(%2196) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %2198 = "mid.unwrap"(%2197) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2199 = "mid.unwrap"(%2184) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2200 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2201 = "mid.parameterizations_array"(%2200) : (!llvm.ptr) -> !llvm.ptr
        %2202 = "mid.method_call"(%2201, %2199, %2198) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %2203 = "hi.cast"(%2202) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.bool]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.bool]>
        %2204 = "mid.checkflag"(%2203) {"typ_name" = "nil_typ"} : (!hi.union<[!hi.nil, !hi.bool]>) -> si1
        %2205 = "mid.unwrap"(%2204) : (si1) -> i1
        "mid.if"(%2205) ({
          %2206 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %2207 = "hi.arithmetic"(%2196, %2206) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %2208 = "hi.cast"(%2196) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %2209 = "mid.unwrap"(%2208) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2210 = "hi.cast"(%2207) {"from_typ" = si32, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"V", !hi.any, "SwissTable">
          %2211 = "mid.unwrap"(%2210) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2212 = "mid.unwrap"(%2142) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2213 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2214 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2215 = "mid.parameterizations_array"(%2213, %2214) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2215, %2212, %2209, %2211) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2216 = "hi.cast"(%2185) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          %2217 = "mid.unwrap"(%2216) : (si32) -> i32
          %2218 = "hi.cast"(%2196) {"from_typ" = si32, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"T", !hi.any, "Array">
          %2219 = "mid.unwrap"(%2218) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2220 = "mid.unwrap"(%2161) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2221 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2222 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2223 = "mid.parameterizations_array"(%2221, %2222) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2223, %2220, %2217, %2219) {"offset" = 12 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2224 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %2225 = "hi.cast"(%2196) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
          %2226 = "mid.unwrap"(%2225) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2227 = "hi.cast"(%2224) {"from_typ" = !hi.bool, "to_typ" = !hi.type_param<"V", !hi.any, "SwissTable">, "from_typ_name" = "bool_typ", "to_typ_name" = "any_typ"} : (!hi.bool) -> !hi.type_param<"V", !hi.any, "SwissTable">
          %2228 = "mid.unwrap"(%2227) : (!hi.type_param<"V", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2229 = "mid.unwrap"(%2184) : (!hi.fatptr<"SwissTable", [si32, !hi.bool]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2230 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %2231 = "mid.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Bool"]} : () -> !llvm.ptr
          %2232 = "mid.parameterizations_array"(%2230, %2231) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2232, %2229, %2226, %2228) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "bool_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2233 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %2234 = "hi.arithmetic"(%2185, %2233) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %2235 = "hi.cast"(%2234) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%2185, %2235) {"typ" = i32} : (si32, si32) -> ()
        }) : (i1) -> ()
        %2236 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %2237 = "hi.arithmetic"(%2186, %2236) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %2238 = "hi.cast"(%2237) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%2186, %2238) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %2239 = "hi.comparison"(%2185, %2119) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %2240 = "mid.unwrap"(%2239) : (si1) -> i1
      "mid.if"(%2240) ({
        %2241 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %2242 = "hi.cast"(%2241) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %2243 = "mid.create_buffer"(%2242) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %2244 = "mid.refer"(%2243) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %2245 = "mid.literal"() {"typ" = !llvm.array<29 x i8>, "value" = "Warning: Could only generate "} : () -> !llvm.ptr
        %2246 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2244, %2246, %2245) {"typ" = !llvm.array<29 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %2247 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %2248 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %2249 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %2250 = "mid.unwrap"(%2244) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %2251 = "mid.unwrap"(%2247) : (si32) -> i32
        %2252 = "mid.unwrap"(%2248) : (si32) -> i32
        %2253 = "mid.unwrap"(%2249) : (si32) -> i32
        %2254 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2255 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %2256 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %2257 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %2258 = "hi.cast"(%2244) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %2259 = "mid.unwrap"(%2258) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %2260 = "hi.cast"(%2255) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2261 = "mid.unwrap"(%2260) : (si32) -> i32
        %2262 = "hi.cast"(%2256) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2263 = "mid.unwrap"(%2262) : (si32) -> i32
        %2264 = "hi.cast"(%2257) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2265 = "mid.unwrap"(%2264) : (si32) -> i32
        %2266 = "mid.unwrap"(%2254) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2267 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2268 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2269 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2270 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2271 = "mid.parameterizations_array"(%2267, %2268, %2269, %2270) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2271, %2266, %2259, %2261, %2263, %2265) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %2272 = "hi.cast"(%2254) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %2273 = "mid.unwrap"(%2272) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2274 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2275 = "mid.parameterizations_array"(%2274) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2275, %2273) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %2276 = "hi.cast"(%2185) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %2277 = "mid.unwrap"(%2276) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2278 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2279 = "mid.parameterizations_array"(%2278) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2279, %2277) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %2280 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %2281 = "hi.cast"(%2280) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %2282 = "mid.create_buffer"(%2281) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %2283 = "mid.refer"(%2282) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %2284 = "mid.literal"() {"typ" = !llvm.array<29 x i8>, "value" = " unique keys for remove test."} : () -> !llvm.ptr
        %2285 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2283, %2285, %2284) {"typ" = !llvm.array<29 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %2286 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %2287 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %2288 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %2289 = "mid.unwrap"(%2283) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %2290 = "mid.unwrap"(%2286) : (si32) -> i32
        %2291 = "mid.unwrap"(%2287) : (si32) -> i32
        %2292 = "mid.unwrap"(%2288) : (si32) -> i32
        %2293 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2294 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %2295 = "mid.literal"() {"value" = 29 : i32, "typ" = i32} : () -> si32
        %2296 = "mid.literal"() {"value" = 30 : i32, "typ" = i32} : () -> si32
        %2297 = "hi.cast"(%2283) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %2298 = "mid.unwrap"(%2297) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %2299 = "hi.cast"(%2294) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2300 = "mid.unwrap"(%2299) : (si32) -> i32
        %2301 = "hi.cast"(%2295) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2302 = "mid.unwrap"(%2301) : (si32) -> i32
        %2303 = "hi.cast"(%2296) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2304 = "mid.unwrap"(%2303) : (si32) -> i32
        %2305 = "mid.unwrap"(%2293) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2306 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2307 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2308 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2309 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2310 = "mid.parameterizations_array"(%2306, %2307, %2308, %2309) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2310, %2305, %2298, %2300, %2302, %2304) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %2311 = "hi.cast"(%2293) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %2312 = "mid.unwrap"(%2311) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2313 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2314 = "mid.parameterizations_array"(%2313) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2314, %2312) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %2315 = "hi.cast"(%2185) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%2119, %2315) {"typ" = i32} : (si32, si32) -> ()
      }) : (i1) -> ()
      %2316 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %2317 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2318 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %2319 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2320 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      "mid.while"() ({
        %2321 = "hi.comparison"(%2320, %2119) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
        %2322 = "mid.unwrap"(%2321) : (si1) -> i1
      }, {
        %2323 = "hi.cast"(%2320) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2324 = "mid.unwrap"(%2323) : (si32) -> i32
        %2325 = "mid.unwrap"(%2161) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2326 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2327 = "mid.parameterizations_array"(%2326) : (!llvm.ptr) -> !llvm.ptr
        %2328 = "mid.method_call"(%2327, %2325, %2324) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %2329 = "hi.cast"(%2328) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> si32
        %2330 = "hi.cast"(%2329) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %2331 = "mid.unwrap"(%2330) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2332 = "mid.unwrap"(%2142) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2333 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2334 = "mid.parameterizations_array"(%2333) : (!llvm.ptr) -> !llvm.ptr
        %2335 = "mid.method_call"(%2334, %2332, %2331) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %2336 = "hi.cast"(%2335) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %2337 = "mid.checkflag"(%2336) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %2338 = "mid.unwrap"(%2337) : (si1) -> i1
        "mid.if"(%2338) ({
          %2339 = "hi.cast"(%2336) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
          %2340 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %2341 = "hi.arithmetic"(%2329, %2340) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %2342 = "hi.comparison"(%2339, %2341) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          %2343 = "mid.unwrap"(%2342) : (si1) -> i1
          "mid.if"(%2343) ({
            %2344 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
            %2345 = "hi.cast"(%2344) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
            "mid.assign"(%2318, %2345) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
            %2346 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
            %2347 = "hi.comparison"(%2319, %2346) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
            %2348 = "mid.unwrap"(%2347) : (si1) -> i1
            "mid.if"(%2348) ({
              %2349 = "mid.literal"() {"value" = 46 : i32, "typ" = i32} : () -> si32
              %2350 = "hi.cast"(%2349) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
              %2351 = "mid.create_buffer"(%2350) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
              %2352 = "mid.refer"(%2351) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
              %2353 = "mid.literal"() {"typ" = !llvm.array<45 x i8>, "value" = "Warning: Remove returned wrong value for key "} : () -> !llvm.ptr
              %2354 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
              "mid.buffer_set"(%2352, %2354, %2353) {"typ" = !llvm.array<45 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
              %2355 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> si32
              %2356 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> si32
              %2357 = "mid.literal"() {"value" = 46 : i32, "typ" = i32} : () -> si32
              %2358 = "mid.unwrap"(%2352) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
              %2359 = "mid.unwrap"(%2355) : (si32) -> i32
              %2360 = "mid.unwrap"(%2356) : (si32) -> i32
              %2361 = "mid.unwrap"(%2357) : (si32) -> i32
              %2362 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
              %2363 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> si32
              %2364 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> si32
              %2365 = "mid.literal"() {"value" = 46 : i32, "typ" = i32} : () -> si32
              %2366 = "hi.cast"(%2352) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
              %2367 = "mid.unwrap"(%2366) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
              %2368 = "hi.cast"(%2363) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
              %2369 = "mid.unwrap"(%2368) : (si32) -> i32
              %2370 = "hi.cast"(%2364) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
              %2371 = "mid.unwrap"(%2370) : (si32) -> i32
              %2372 = "hi.cast"(%2365) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
              %2373 = "mid.unwrap"(%2372) : (si32) -> i32
              %2374 = "mid.unwrap"(%2362) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
              %2375 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
              %2376 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
              %2377 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
              %2378 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
              %2379 = "mid.parameterizations_array"(%2375, %2376, %2377, %2378) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
              "mid.method_call"(%2379, %2374, %2367, %2369, %2371, %2373) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
              %2380 = "hi.cast"(%2362) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
              %2381 = "mid.unwrap"(%2380) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
              %2382 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
              %2383 = "mid.parameterizations_array"(%2382) : (!llvm.ptr) -> !llvm.ptr
              "mid.class_method_call"(%2383, %2381) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
              %2384 = "hi.cast"(%2329) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
              %2385 = "mid.unwrap"(%2384) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
              %2386 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
              %2387 = "mid.parameterizations_array"(%2386) : (!llvm.ptr) -> !llvm.ptr
              "mid.class_method_call"(%2387, %2385) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
              %2388 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
              %2389 = "hi.arithmetic"(%2319, %2388) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
              %2390 = "hi.cast"(%2389) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
              "mid.assign"(%2319, %2390) {"typ" = i32} : (si32, si32) -> ()
            }) : (i1) -> ()
          }) : (i1) -> ()
          %2391 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
          %2392 = "hi.arithmetic"(%2317, %2391) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
          %2393 = "hi.cast"(%2392) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
          "mid.assign"(%2317, %2393) {"typ" = i32} : (si32, si32) -> ()
          %2394 = "hi.cast"(%2339) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%2336, %2394) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }, {
          %2395 = "hi.cast"(%2336) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[si32, !hi.nil]>) -> !hi.nil
          %2396 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %2397 = "hi.cast"(%2396) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%2318, %2397) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %2398 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> si32
          %2399 = "hi.comparison"(%2319, %2398) {"op" = "LT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
          %2400 = "mid.unwrap"(%2399) : (si1) -> i1
          "mid.if"(%2400) ({
            %2401 = "mid.literal"() {"value" = 38 : i32, "typ" = i32} : () -> si32
            %2402 = "hi.cast"(%2401) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
            %2403 = "mid.create_buffer"(%2402) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
            %2404 = "mid.refer"(%2403) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
            %2405 = "mid.literal"() {"typ" = !llvm.array<37 x i8>, "value" = "Warning: Remove returned Nil for key "} : () -> !llvm.ptr
            %2406 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
            "mid.buffer_set"(%2404, %2406, %2405) {"typ" = !llvm.array<37 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
            %2407 = "mid.literal"() {"value" = 37 : i32, "typ" = i32} : () -> si32
            %2408 = "mid.literal"() {"value" = 37 : i32, "typ" = i32} : () -> si32
            %2409 = "mid.literal"() {"value" = 38 : i32, "typ" = i32} : () -> si32
            %2410 = "mid.unwrap"(%2404) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
            %2411 = "mid.unwrap"(%2407) : (si32) -> i32
            %2412 = "mid.unwrap"(%2408) : (si32) -> i32
            %2413 = "mid.unwrap"(%2409) : (si32) -> i32
            %2414 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
            %2415 = "mid.literal"() {"value" = 37 : i32, "typ" = i32} : () -> si32
            %2416 = "mid.literal"() {"value" = 37 : i32, "typ" = i32} : () -> si32
            %2417 = "mid.literal"() {"value" = 38 : i32, "typ" = i32} : () -> si32
            %2418 = "hi.cast"(%2404) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
            %2419 = "mid.unwrap"(%2418) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
            %2420 = "hi.cast"(%2415) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %2421 = "mid.unwrap"(%2420) : (si32) -> i32
            %2422 = "hi.cast"(%2416) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %2423 = "mid.unwrap"(%2422) : (si32) -> i32
            %2424 = "hi.cast"(%2417) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            %2425 = "mid.unwrap"(%2424) : (si32) -> i32
            %2426 = "mid.unwrap"(%2414) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
            %2427 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
            %2428 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %2429 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %2430 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %2431 = "mid.parameterizations_array"(%2427, %2428, %2429, %2430) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
            "mid.method_call"(%2431, %2426, %2419, %2421, %2423, %2425) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
            %2432 = "hi.cast"(%2414) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
            %2433 = "mid.unwrap"(%2432) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
            %2434 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
            %2435 = "mid.parameterizations_array"(%2434) : (!llvm.ptr) -> !llvm.ptr
            "mid.class_method_call"(%2435, %2433) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
            %2436 = "hi.cast"(%2329) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
            %2437 = "mid.unwrap"(%2436) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
            %2438 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
            %2439 = "mid.parameterizations_array"(%2438) : (!llvm.ptr) -> !llvm.ptr
            "mid.class_method_call"(%2439, %2437) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
            %2440 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
            %2441 = "hi.arithmetic"(%2319, %2440) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
            %2442 = "hi.cast"(%2441) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
            "mid.assign"(%2319, %2442) {"typ" = i32} : (si32, si32) -> ()
          }) : (i1) -> ()
          %2443 = "hi.cast"(%2395) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!hi.nil) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%2336, %2443) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %2444 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
        %2445 = "hi.arithmetic"(%2320, %2444) {"op" = "ADD", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si32
        %2446 = "hi.cast"(%2445) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        "mid.assign"(%2320, %2446) {"typ" = i32} : (si32, si32) -> ()
      }) : () -> ()
      %2447 = "mid.call"() {"func_name" = "clock", "ret_type" = i64} : () -> si64
      %2448 = "hi.comparison"(%2317, %2119) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %2449 = "mid.unwrap"(%2448) : (si1) -> i1
      "mid.if"(%2449) ({
        %2450 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %2451 = "hi.cast"(%2450) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.assign"(%2318, %2451) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      }) : (i1) -> ()
      %2452 = "mid.unwrap"(%2142) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2453 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2454 = "mid.method_call"(%2453, %2452) {"offset" = 23 : i32, "vptrs" = [], "vtable_size" = 1130 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> si32
      %2455 = "hi.cast"(%2454) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2456 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2457 = "hi.comparison"(%2455, %2456) {"op" = "NEQ", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %2458 = "mid.unwrap"(%2457) : (si1) -> i1
      "mid.if"(%2458) ({
        %2459 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %2460 = "hi.cast"(%2459) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.assign"(%2318, %2460) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
      }) : (i1) -> ()
      %2461 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
      %2462 = "hi.comparison"(%2119, %2461) {"op" = "GT", "lhs_type" = si32, "rhs_type" = si32} : (si32, si32) -> si1
      %2463 = "mid.unwrap"(%2462) : (si1) -> i1
      "mid.if"(%2463) ({
        %2464 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> si32
        %2465 = "hi.cast"(%2464) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2466 = "mid.unwrap"(%2465) : (si32) -> i32
        %2467 = "mid.unwrap"(%2161) : (!hi.fatptr<"Array", [si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2468 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2469 = "mid.parameterizations_array"(%2468) : (!llvm.ptr) -> !llvm.ptr
        %2470 = "mid.method_call"(%2469, %2467, %2466) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 529 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %2471 = "hi.cast"(%2470) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = si32, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> si32
        %2472 = "hi.cast"(%2471) {"from_typ" = si32, "to_typ" = !hi.type_param<"K", !hi.any, "SwissTable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (si32) -> !hi.type_param<"K", !hi.any, "SwissTable">
        %2473 = "mid.unwrap"(%2472) : (!hi.type_param<"K", !hi.any, "SwissTable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2474 = "mid.unwrap"(%2142) : (!hi.fatptr<"SwissTable", [si32, si32]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2475 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2476 = "mid.parameterizations_array"(%2475) : (!llvm.ptr) -> !llvm.ptr
        %2477 = "mid.method_call"(%2476, %2474, %2473) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 1130 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>
        %2478 = "hi.cast"(%2477) {"from_typ" = !hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"V", !hi.any, "SwissTable">, !hi.nil]>) -> !hi.union<[si32, !hi.nil]>
        %2479 = "mid.checkflag"(%2478) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[si32, !hi.nil]>) -> si1
        %2480 = "mid.unwrap"(%2479) : (si1) -> i1
        "mid.if"(%2480) ({
          %2481 = "hi.cast"(%2478) {"from_typ" = !hi.union<[si32, !hi.nil]>, "to_typ" = si32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[si32, !hi.nil]>) -> si32
          %2482 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %2483 = "hi.cast"(%2482) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.assign"(%2318, %2483) {"typ" = i1} : (!hi.bool, !hi.bool) -> ()
          %2484 = "hi.cast"(%2481) {"from_typ" = si32, "to_typ" = !hi.union<[si32, !hi.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[si32, !hi.nil]>
          "mid.assign"(%2478, %2484) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!hi.union<[si32, !hi.nil]>, !hi.union<[si32, !hi.nil]>) -> ()
        }) : (i1) -> ()
      }) : (i1) -> ()
      %2485 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %2486 = "hi.cast"(%2485) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2487 = "mid.create_buffer"(%2486) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2488 = "mid.refer"(%2487) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2489 = "mid.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "Remove Random"} : () -> !llvm.ptr
      %2490 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2488, %2490, %2489) {"typ" = !llvm.array<13 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2491 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2492 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2493 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %2494 = "mid.unwrap"(%2488) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2495 = "mid.unwrap"(%2491) : (si32) -> i32
      %2496 = "mid.unwrap"(%2492) : (si32) -> i32
      %2497 = "mid.unwrap"(%2493) : (si32) -> i32
      %2498 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2499 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2500 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> si32
      %2501 = "mid.literal"() {"value" = 14 : i32, "typ" = i32} : () -> si32
      %2502 = "hi.cast"(%2488) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2503 = "mid.unwrap"(%2502) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2504 = "hi.cast"(%2499) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2505 = "mid.unwrap"(%2504) : (si32) -> i32
      %2506 = "hi.cast"(%2500) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2507 = "mid.unwrap"(%2506) : (si32) -> i32
      %2508 = "hi.cast"(%2501) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2509 = "mid.unwrap"(%2508) : (si32) -> i32
      %2510 = "mid.unwrap"(%2498) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2511 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2512 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2513 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2514 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2515 = "mid.parameterizations_array"(%2511, %2512, %2513, %2514) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2515, %2510, %2503, %2505, %2507, %2509) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2516 = "hi.arithmetic"(%2447, %2316) {"op" = "SUB", "lhs_type" = si64, "rhs_type" = si64} : (si64, si64) -> si64
      %2517 = "mid.unwrap"(%2498) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2518 = "mid.unwrap"(%2119) : (si32) -> i32
      %2519 = "mid.unwrap"(%2516) : (si64) -> i64
      "mid.call"(%2517, %2518, %2519) {"func_name" = "print_benchmark_result", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i64) -> ()
      %2520 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %2521 = "hi.cast"(%2520) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2522 = "mid.create_buffer"(%2521) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2523 = "mid.refer"(%2522) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2524 = "mid.literal"() {"typ" = !llvm.array<18 x i8>, "value" = "    Verification: "} : () -> !llvm.ptr
      %2525 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2523, %2525, %2524) {"typ" = !llvm.array<18 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2526 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %2527 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %2528 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %2529 = "mid.unwrap"(%2523) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2530 = "mid.unwrap"(%2526) : (si32) -> i32
      %2531 = "mid.unwrap"(%2527) : (si32) -> i32
      %2532 = "mid.unwrap"(%2528) : (si32) -> i32
      %2533 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2534 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %2535 = "mid.literal"() {"value" = 18 : i32, "typ" = i32} : () -> si32
      %2536 = "mid.literal"() {"value" = 19 : i32, "typ" = i32} : () -> si32
      %2537 = "hi.cast"(%2523) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2538 = "mid.unwrap"(%2537) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2539 = "hi.cast"(%2534) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2540 = "mid.unwrap"(%2539) : (si32) -> i32
      %2541 = "hi.cast"(%2535) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2542 = "mid.unwrap"(%2541) : (si32) -> i32
      %2543 = "hi.cast"(%2536) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2544 = "mid.unwrap"(%2543) : (si32) -> i32
      %2545 = "mid.unwrap"(%2533) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2546 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2547 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2548 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2549 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2550 = "mid.parameterizations_array"(%2546, %2547, %2548, %2549) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2550, %2545, %2538, %2540, %2542, %2544) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2551 = "hi.cast"(%2533) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2552 = "mid.unwrap"(%2551) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2553 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2554 = "mid.parameterizations_array"(%2553) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2554, %2552) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2555 = "mid.unwrap"(%2318) : (!hi.bool) -> i1
      "mid.if"(%2555) ({
        %2556 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %2557 = "hi.cast"(%2556) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %2558 = "mid.create_buffer"(%2557) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %2559 = "mid.refer"(%2558) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %2560 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "PASS"} : () -> !llvm.ptr
        %2561 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2559, %2561, %2560) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %2562 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2563 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2564 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %2565 = "mid.unwrap"(%2559) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %2566 = "mid.unwrap"(%2562) : (si32) -> i32
        %2567 = "mid.unwrap"(%2563) : (si32) -> i32
        %2568 = "mid.unwrap"(%2564) : (si32) -> i32
        %2569 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2570 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2571 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2572 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %2573 = "hi.cast"(%2559) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %2574 = "mid.unwrap"(%2573) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %2575 = "hi.cast"(%2570) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2576 = "mid.unwrap"(%2575) : (si32) -> i32
        %2577 = "hi.cast"(%2571) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2578 = "mid.unwrap"(%2577) : (si32) -> i32
        %2579 = "hi.cast"(%2572) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2580 = "mid.unwrap"(%2579) : (si32) -> i32
        %2581 = "mid.unwrap"(%2569) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2582 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2583 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2584 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2585 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2586 = "mid.parameterizations_array"(%2582, %2583, %2584, %2585) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2586, %2581, %2574, %2576, %2578, %2580) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %2587 = "hi.cast"(%2569) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %2588 = "mid.unwrap"(%2587) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2589 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2590 = "mid.parameterizations_array"(%2589) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2590, %2588) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }, {
        %2591 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %2592 = "hi.cast"(%2591) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
        %2593 = "mid.create_buffer"(%2592) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
        %2594 = "mid.refer"(%2593) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
        %2595 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "FAIL"} : () -> !llvm.ptr
        %2596 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%2594, %2596, %2595) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
        %2597 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2598 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2599 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %2600 = "mid.unwrap"(%2594) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %2601 = "mid.unwrap"(%2597) : (si32) -> i32
        %2602 = "mid.unwrap"(%2598) : (si32) -> i32
        %2603 = "mid.unwrap"(%2599) : (si32) -> i32
        %2604 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %2605 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2606 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> si32
        %2607 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> si32
        %2608 = "hi.cast"(%2594) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
        %2609 = "mid.unwrap"(%2608) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
        %2610 = "hi.cast"(%2605) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2611 = "mid.unwrap"(%2610) : (si32) -> i32
        %2612 = "hi.cast"(%2606) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2613 = "mid.unwrap"(%2612) : (si32) -> i32
        %2614 = "hi.cast"(%2607) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
        %2615 = "mid.unwrap"(%2614) : (si32) -> i32
        %2616 = "mid.unwrap"(%2604) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2617 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %2618 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2619 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2620 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %2621 = "mid.parameterizations_array"(%2617, %2618, %2619, %2620) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%2621, %2616, %2609, %2611, %2613, %2615) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
        %2622 = "hi.cast"(%2604) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
        %2623 = "mid.unwrap"(%2622) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %2624 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %2625 = "mid.parameterizations_array"(%2624) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%2625, %2623) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      }) : (i1) -> ()
      %2626 = "mid.literal"() {"value" = 21 : i32, "typ" = i32} : () -> si32
      %2627 = "hi.cast"(%2626) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2628 = "mid.create_buffer"(%2627) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2629 = "mid.refer"(%2628) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2630 = "mid.literal"() {"typ" = !llvm.array<20 x i8>, "value" = "    (Items removed: "} : () -> !llvm.ptr
      %2631 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2629, %2631, %2630) {"typ" = !llvm.array<20 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2632 = "mid.literal"() {"value" = 20 : i32, "typ" = i32} : () -> si32
      %2633 = "mid.literal"() {"value" = 20 : i32, "typ" = i32} : () -> si32
      %2634 = "mid.literal"() {"value" = 21 : i32, "typ" = i32} : () -> si32
      %2635 = "mid.unwrap"(%2629) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2636 = "mid.unwrap"(%2632) : (si32) -> i32
      %2637 = "mid.unwrap"(%2633) : (si32) -> i32
      %2638 = "mid.unwrap"(%2634) : (si32) -> i32
      %2639 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2640 = "mid.literal"() {"value" = 20 : i32, "typ" = i32} : () -> si32
      %2641 = "mid.literal"() {"value" = 20 : i32, "typ" = i32} : () -> si32
      %2642 = "mid.literal"() {"value" = 21 : i32, "typ" = i32} : () -> si32
      %2643 = "hi.cast"(%2629) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2644 = "mid.unwrap"(%2643) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2645 = "hi.cast"(%2640) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2646 = "mid.unwrap"(%2645) : (si32) -> i32
      %2647 = "hi.cast"(%2641) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2648 = "mid.unwrap"(%2647) : (si32) -> i32
      %2649 = "hi.cast"(%2642) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2650 = "mid.unwrap"(%2649) : (si32) -> i32
      %2651 = "mid.unwrap"(%2639) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2652 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2653 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2654 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2655 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2656 = "mid.parameterizations_array"(%2652, %2653, %2654, %2655) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2656, %2651, %2644, %2646, %2648, %2650) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2657 = "hi.cast"(%2639) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2658 = "mid.unwrap"(%2657) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2659 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2660 = "mid.parameterizations_array"(%2659) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2660, %2658) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2661 = "hi.cast"(%2317) {"from_typ" = si32, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (si32) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2662 = "mid.unwrap"(%2661) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2663 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2664 = "mid.parameterizations_array"(%2663) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2664, %2662) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2665 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %2666 = "hi.cast"(%2665) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2667 = "mid.create_buffer"(%2666) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2668 = "mid.refer"(%2667) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2669 = "mid.literal"() {"typ" = !llvm.array<1 x i8>, "value" = ")"} : () -> !llvm.ptr
      %2670 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2668, %2670, %2669) {"typ" = !llvm.array<1 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2671 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2672 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2673 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %2674 = "mid.unwrap"(%2668) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2675 = "mid.unwrap"(%2671) : (si32) -> i32
      %2676 = "mid.unwrap"(%2672) : (si32) -> i32
      %2677 = "mid.unwrap"(%2673) : (si32) -> i32
      %2678 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2679 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2680 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> si32
      %2681 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> si32
      %2682 = "hi.cast"(%2668) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2683 = "mid.unwrap"(%2682) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2684 = "hi.cast"(%2679) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2685 = "mid.unwrap"(%2684) : (si32) -> i32
      %2686 = "hi.cast"(%2680) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2687 = "mid.unwrap"(%2686) : (si32) -> i32
      %2688 = "hi.cast"(%2681) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2689 = "mid.unwrap"(%2688) : (si32) -> i32
      %2690 = "mid.unwrap"(%2678) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2691 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2692 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2693 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2694 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2695 = "mid.parameterizations_array"(%2691, %2692, %2693, %2694) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2695, %2690, %2683, %2685, %2687, %2689) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2696 = "hi.cast"(%2678) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2697 = "mid.unwrap"(%2696) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2698 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2699 = "mid.parameterizations_array"(%2698) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2699, %2697) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "benchmark_remove_random", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.main"() ({
      %2700 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> si32
      %2701 = "hi.cast"(%2700) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2702 = "mid.create_buffer"(%2701) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2703 = "mid.refer"(%2702) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2704 = "mid.literal"() {"typ" = !llvm.array<22 x i8>, "value" = "--- Map Benchmarks ---"} : () -> !llvm.ptr
      %2705 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2703, %2705, %2704) {"typ" = !llvm.array<22 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2706 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> si32
      %2707 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> si32
      %2708 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> si32
      %2709 = "mid.unwrap"(%2703) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2710 = "mid.unwrap"(%2706) : (si32) -> i32
      %2711 = "mid.unwrap"(%2707) : (si32) -> i32
      %2712 = "mid.unwrap"(%2708) : (si32) -> i32
      %2713 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2714 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> si32
      %2715 = "mid.literal"() {"value" = 22 : i32, "typ" = i32} : () -> si32
      %2716 = "mid.literal"() {"value" = 23 : i32, "typ" = i32} : () -> si32
      %2717 = "hi.cast"(%2703) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2718 = "mid.unwrap"(%2717) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2719 = "hi.cast"(%2714) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2720 = "mid.unwrap"(%2719) : (si32) -> i32
      %2721 = "hi.cast"(%2715) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2722 = "mid.unwrap"(%2721) : (si32) -> i32
      %2723 = "hi.cast"(%2716) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2724 = "mid.unwrap"(%2723) : (si32) -> i32
      %2725 = "mid.unwrap"(%2713) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2726 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2727 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2728 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2729 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2730 = "mid.parameterizations_array"(%2726, %2727, %2728, %2729) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2730, %2725, %2718, %2720, %2722, %2724) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2731 = "hi.cast"(%2713) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2732 = "mid.unwrap"(%2731) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2733 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2734 = "mid.parameterizations_array"(%2733) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2734, %2732) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %2735 = "mid.literal"() {"value" = 1000000 : i32, "typ" = i32} : () -> si32
      %2736 = "mid.unwrap"(%2735) : (si32) -> i32
      "mid.call"(%2736) {"func_name" = "benchmark_insert_sequential", "ret_type" = !llvm.void} : (i32) -> ()
      %2737 = "mid.unwrap"(%2735) : (si32) -> i32
      "mid.call"(%2737) {"func_name" = "benchmark_insert_random", "ret_type" = !llvm.void} : (i32) -> ()
      %2738 = "mid.unwrap"(%2735) : (si32) -> i32
      "mid.call"(%2738) {"func_name" = "benchmark_get_sequential_hit", "ret_type" = !llvm.void} : (i32) -> ()
      %2739 = "mid.unwrap"(%2735) : (si32) -> i32
      "mid.call"(%2739) {"func_name" = "benchmark_get_random_hit", "ret_type" = !llvm.void} : (i32) -> ()
      %2740 = "mid.unwrap"(%2735) : (si32) -> i32
      "mid.call"(%2740) {"func_name" = "benchmark_get_random_miss", "ret_type" = !llvm.void} : (i32) -> ()
      %2741 = "mid.unwrap"(%2735) : (si32) -> i32
      "mid.call"(%2741) {"func_name" = "benchmark_remove_random", "ret_type" = !llvm.void} : (i32) -> ()
      %2742 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> si32
      %2743 = "hi.cast"(%2742) {"from_typ" = si32, "to_typ" = si64, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (si32) -> si64
      %2744 = "mid.create_buffer"(%2743) {"typ" = i8, "region_id" = ""} : (si64) -> !llvm.ptr
      %2745 = "mid.refer"(%2744) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<si8>
      %2746 = "mid.literal"() {"typ" = !llvm.array<27 x i8>, "value" = "--- Benchmarks Complete ---"} : () -> !llvm.ptr
      %2747 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%2745, %2747, %2746) {"typ" = !llvm.array<27 x i8>} : (!hi.buffer<si8>, !llvm.ptr, !llvm.ptr) -> ()
      %2748 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %2749 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %2750 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> si32
      %2751 = "mid.unwrap"(%2745) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2752 = "mid.unwrap"(%2748) : (si32) -> i32
      %2753 = "mid.unwrap"(%2749) : (si32) -> i32
      %2754 = "mid.unwrap"(%2750) : (si32) -> i32
      %2755 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, i32)>, "class_name" = "String", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %2756 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %2757 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> si32
      %2758 = "mid.literal"() {"value" = 28 : i32, "typ" = i32} : () -> si32
      %2759 = "hi.cast"(%2745) {"from_typ" = !hi.buffer<si8>, "to_typ" = !hi.buffer<si8>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<si8>) -> !hi.buffer<si8>
      %2760 = "mid.unwrap"(%2759) : (!hi.buffer<si8>) -> !llvm.struct<(!llvm.ptr)>
      %2761 = "hi.cast"(%2756) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2762 = "mid.unwrap"(%2761) : (si32) -> i32
      %2763 = "hi.cast"(%2757) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2764 = "mid.unwrap"(%2763) : (si32) -> i32
      %2765 = "hi.cast"(%2758) {"from_typ" = si32, "to_typ" = si32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (si32) -> si32
      %2766 = "mid.unwrap"(%2765) : (si32) -> i32
      %2767 = "mid.unwrap"(%2755) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2768 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %2769 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2770 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2771 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %2772 = "mid.parameterizations_array"(%2768, %2769, %2770, %2771) : (!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2772, %2767, %2760, %2762, %2764, %2766) {"offset" = 12 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 314 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32, i32) -> ()
      %2773 = "hi.cast"(%2755) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!hi.fatptr<"String">) -> !hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>
      %2774 = "mid.unwrap"(%2773) : (!hi.union<[!hi.fatptr<"Representable">, !hi.nil, !hi.float, !hi.bool, !hi.fatptr<"Character">, si64]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %2775 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %2776 = "mid.parameterizations_array"(%2775) : (!llvm.ptr) -> !llvm.ptr
      "mid.class_method_call"(%2776, %2774) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"main_name" = "_main_hash_benchmark"} : () -> ()
  }
}
