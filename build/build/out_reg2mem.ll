; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128-Fn32"
target triple = "aarch64-unknown-linux-gnu"

@string_string = internal constant [4 x i8] c"%s\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null
@vnkpo_Warning_Remove_returned_Nil_for_key_ = internal unnamed_addr constant [37 x i8] c"Warning: Remove returned Nil for key "
@falyz_Warning_Remove_returned_wrong_value_for_key_ = internal unnamed_addr constant [45 x i8] c"Warning: Remove returned wrong value for key "
@pornl_Error_Nil_returned_during_random_hit_test_for_key_ = internal unnamed_addr constant [51 x i8] c"Error: Nil returned during random hit test for key "
@ockpk__unique_keys_for_random_hit_test = internal unnamed_addr constant [33 x i8] c" unique keys for random hit test."
@rontd_Error_Nil_returned_during_sequential_hit_test_for_key_ = internal unnamed_addr constant [55 x i8] c"Error: Nil returned during sequential hit test for key "
@_parameterization_Pairi32._i1 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_i32, ptr @_parameterization_i1, ptr null]
@_parameterization_Functioni32._i32_to_i1 = linkonce_odr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_i1, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@_parameterization_Functioni32_to_i32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@_parameterization_Pairi32._i32 = linkonce_odr constant [4 x ptr] [ptr @Pair, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@PRNG_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @PRNG, ptr null]
@PRNG_offset_tbl = constant [4 x i32] [i32 15, i32 10, i32 10, i32 0]
@PRNG = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 -4401938362882229211, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @PRNG_hashtbl, ptr @PRNG_offset_tbl, ptr @_data_size_PRNG, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @PRNG_field_seed, ptr @PRNG_B_init_initial_seedi32, ptr @PRNG_B_next_, ptr @PRNG_init_initial_seedi32, ptr @PRNG_next_] }
@PRNG_field_seed = internal constant { ptr, ptr } { ptr @PRNG_getter_seed, ptr @PRNG_setter_seed }
@bool_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i8_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i32_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i64_typ_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@f64_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@nil_typ_hashtbl = constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@any_typ_hashtbl = constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = constant [1 x i32] [i32 10]
@function_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@buffer_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@union_typ_hashtbl = constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 10]
@Object_hashtbl = constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@_parameterization_i1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@Pair_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = constant [4 x i32] [i32 20, i32 10, i32 10, i32 0]
@Container_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@Iterator_hashtbl = constant [4 x ptr] [ptr @Iterator, ptr @any_typ, ptr @Container, ptr @Object]
@Iterator_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 13, i32 13]
@Iterable_hashtbl = constant [4 x ptr] [ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 33, i32 33]
@MapIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@MapIterable_offset_tbl = constant [8 x i32] [i32 0, i32 61, i32 10, i32 38, i32 61, i32 0, i32 0, i32 10]
@MapIterable = constant { [3 x i64], [7 x ptr], [51 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr @_data_size_MapIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [51 x ptr] [ptr @MapIterable_field_MapIterable_0, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_i1, ptr @MapIterable_B_any_fFunctionT_to_i1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_i1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_i1, ptr @MapIterable_B_any_fFunctionT_to_i1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_i1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@MapIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @Container, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 10, i32 21, i32 0, i32 18, i32 0, i32 0]
@MapIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr @_data_size_MapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @MapIterator_field_MapIterator_0, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_next_, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @FilterIterable, ptr null, ptr @Container, ptr @Iterable, ptr null]
@FilterIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 10, i32 0, i32 60, i32 37, i32 0]
@FilterIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388319, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr @_data_size_FilterIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_i1, ptr @FilterIterable_B_any_fFunctionT_to_i1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_i1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_init_iterableIterableT_fFunctionT_to_i1, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_i1, ptr @FilterIterable_B_any_fFunctionT_to_i1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_i1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@FilterIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@FilterIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr @_data_size_FilterIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1, ptr @FilterIterator_next_, ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr @ChainIterable, ptr @Container, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = constant [8 x i32] [i32 10, i32 37, i32 0, i32 10, i32 60, i32 0, i32 0, i32 60]
@ChainIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr @_data_size_ChainIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIterableT_secondIterableT, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_i1, ptr @ChainIterable_B_any_fFunctionT_to_i1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_i1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_init_firstIterableT_secondIterableT, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_i1, ptr @ChainIterable_B_any_fFunctionT_to_i1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_i1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ChainIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ChainIterator]
@ChainIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 21, i32 18, i32 21, i32 0, i32 10, i32 10]
@ChainIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr @_data_size_ChainIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_next_, ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @InterleaveIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@InterleaveIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 37, i32 60, i32 0, i32 0, i32 10]
@InterleaveIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr @_data_size_InterleaveIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_i1, ptr @InterleaveIterable_B_any_fFunctionT_to_i1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_i1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_i1, ptr @InterleaveIterable_B_any_fFunctionT_to_i1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_i1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@InterleaveIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @InterleaveIterator, ptr @Iterator, ptr null, ptr null]
@InterleaveIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 0, i32 21, i32 10, i32 18, i32 0, i32 0]
@InterleaveIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr @_data_size_InterleaveIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@ZipIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr null, ptr @Container, ptr null, ptr @ZipIterable, ptr @Object]
@ZipIterable_offset_tbl = constant [8 x i32] [i32 10, i32 39, i32 0, i32 0, i32 62, i32 0, i32 10, i32 62]
@ZipIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr @_data_size_ZipIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ZipIterable_field_ZipIterable_0, ptr @ZipIterable_field_ZipIterable_1, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIterableT_secondIterableU, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_i1, ptr @ZipIterable_B_any_fFunctionT_to_i1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_i1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_init_firstIterableT_secondIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_i1, ptr @ZipIterable_B_any_fFunctionT_to_i1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_i1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ZipIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 22, i32 19, i32 22, i32 0, i32 10, i32 10]
@ZipIterator = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr @_data_size_ZipIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ZipIterator_field_ZipIterator_0, ptr @ZipIterator_field_ZipIterator_1, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_next_, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ProductIterable, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr null]
@ProductIterable_offset_tbl = constant [8 x i32] [i32 62, i32 10, i32 10, i32 62, i32 0, i32 39, i32 0, i32 0]
@ProductIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr @_data_size_ProductIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ProductIterable_field_ProductIterable_0, ptr @ProductIterable_field_ProductIterable_1, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIterableT_secondIterableU, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_i1, ptr @ProductIterable_B_any_fFunctionT_to_i1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_i1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_init_firstIterableT_secondIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_i1, ptr @ProductIterable_B_any_fFunctionT_to_i1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_i1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ProductIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr null, ptr @Container, ptr @Object, ptr null, ptr @ProductIterator]
@ProductIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 21, i32 0, i32 24, i32 24, i32 0, i32 10]
@ProductIterator = constant { [3 x i64], [7 x ptr], [14 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr @_data_size_ProductIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [14 x ptr] [ptr @ProductIterator_field_ProductIterator_0, ptr @ProductIterator_field_ProductIterator_1, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_next_, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_B_next_, ptr @ProductIterator_next_] }
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@_parameterization_Character = linkonce_odr constant [2 x ptr] [ptr @Character, ptr null]
@_parameterization_i8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@Representable_hashtbl = constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 12]
@String_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @Representable, ptr @Container, ptr @Object, ptr null, ptr null, ptr @String]
@String_offset_tbl = constant [8 x i32] [i32 10, i32 64, i32 87, i32 87, i32 87, i32 0, i32 0, i32 10]
@Character_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = constant [4 x i32] [i32 15, i32 0, i32 10, i32 10]
@StringIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @StringIterator, ptr null]
@StringIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@Exception_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@bool_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_data_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ, ptr @_data_size_bool_typ], [0 x ptr] undef }
@IO_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 20]
@IO = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_data_size_IO, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @IO_B__Self_print_xi32__Self_print_xf64__Self_print_xString__Self_print_xRepresentable__Self_print_xCharacter__Self_print_xi64__Self_print_xi1__Self_print_xNil__Self_print_xi8, ptr @IO__Self_print_xi32, ptr @IO__Self_print_xf64, ptr @IO__Self_print_xString, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xi64, ptr @IO__Self_print_xi1, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xi8] }
@_parameterization_i64 = linkonce_odr constant [2 x ptr] [ptr @i64_typ, ptr null]
@i8_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_data_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ, ptr @_data_size_i8_typ], [0 x ptr] undef }
@i64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_data_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ, ptr @_data_size_i64_typ], [0 x ptr] undef }
@function_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_data_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ, ptr @_data_size_function_typ], [0 x ptr] undef }
@kaabw_CUsersPaulKOneDriveDocumentsPLPyPLlibarraymini = internal unnamed_addr constant [56 x i8] c"C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\array.mini"
@Representable = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_data_size_Representable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@Array_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Array, ptr @Representable, ptr @Object]
@Array_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 68, i32 10, i32 91, i32 10, i32 91, i32 91]
@Array = constant { [3 x i64], [7 x ptr], [83 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_data_size_Array, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [83 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterableT, ptr @Array_B_init_, ptr @Array_B_init_capacityi32, ptr @Array_B_init_lengthi32_capacityi32, ptr @Array_B_init_bufferBufferT_lengthi32_capacityi32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_extend_otherArrayT, ptr @Array_B_reserve_new_capacityi32, ptr @Array_B__index_xi32, ptr @Array_B__set_index_xi32_valueT, ptr @Array_B_throw_oob_xi32, ptr @Array_B_unchecked_index_xi32, ptr @Array_B_unchecked_insert_xi32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_i1, ptr @Array_B_any_fFunctionT_to_i1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_i1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_B_repr_, ptr @Array__Self_from_iterable_iterableIterableT, ptr @Array_init_, ptr @Array_init_capacityi32, ptr @Array_init_lengthi32_capacityi32, ptr @Array_init_bufferBufferT_lengthi32_capacityi32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_extend_otherArrayT, ptr @Array_reserve_new_capacityi32, ptr @Array__index_xi32, ptr @Array__set_index_xi32_valueT, ptr @Array_throw_oob_xi32, ptr @Array_unchecked_index_xi32, ptr @Array_unchecked_insert_xi32_valueT, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_repr_, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_i1, ptr @Array_B_any_fFunctionT_to_i1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_i1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_B_repr_, ptr @Array_repr_] }
@ArrayIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr @Iterator, ptr null, ptr null]
@ArrayIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 10, i32 17, i32 0, i32 0]
@ArrayIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_data_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@f64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_data_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ, ptr @_data_size_f64_typ], [0 x ptr] undef }
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@_parameterization_Bufferi8 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@zvupd_CUsersPaulKOneDriveDocumentsPLPyPLlibmapmini = internal unnamed_addr constant [54 x i8] c"C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\map.mini"
@String = constant { [3 x i64], [7 x ptr], [79 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388601, i64 7], [7 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_data_size_String, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [79 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_field_String_0, ptr @String_B__Self_from_c_string_c_stringBufferi8, ptr @String_B_init_, ptr @String_B_init_bytesBufferi8_lengthi32_capacityi32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_c_string_, ptr @String_B_append_xi8, ptr @String_B_extend_strString, ptr @String_B__index_xi32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_i1, ptr @String_B_any_fFunctionT_to_i1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_i1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_B_repr_, ptr @String__Self_from_c_string_c_stringBufferi8, ptr @String_init_, ptr @String_init_bytesBufferi8_lengthi32_capacityi32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_c_string_, ptr @String_append_xi8, ptr @String_extend_strString, ptr @String__index_xi32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_repr_, ptr @String_field_String_0, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_i1, ptr @String_B_any_fFunctionT_to_i1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_i1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_B_repr_, ptr @String_repr_] }
@Character = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_data_size_Character, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytei8, ptr @Character_byte_, ptr @Character_init_bytei8] }
@StringIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_data_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_next_, ptr @StringIterator_next_] }
@Exception = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_data_size_Exception, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberi32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@KeyNotFound_hashtbl = constant [4 x ptr] [ptr @Object, ptr @KeyNotFound, ptr @any_typ, ptr @Exception]
@KeyNotFound_offset_tbl = constant [4 x i32] [i32 36, i32 10, i32 10, i32 23]
@KeyNotFound = constant { [3 x i64], [7 x ptr], [26 x ptr] } { [3 x i64] [i64 2946564862774055400, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @KeyNotFound_hashtbl, ptr @KeyNotFound_offset_tbl, ptr @_data_size_KeyNotFound, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [26 x ptr] [ptr @KeyNotFound_field_line_number, ptr @KeyNotFound_field_file_name, ptr @KeyNotFound_field_message, ptr @KeyNotFound_B_init_messageString, ptr @KeyNotFound_B_init_, ptr @KeyNotFound_B_set_info_line_numberi32_file_nameString, ptr @KeyNotFound_B_report_, ptr @KeyNotFound_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_, ptr @KeyNotFound_field_line_number, ptr @KeyNotFound_field_file_name, ptr @KeyNotFound_field_message, ptr @KeyNotFound_B_init_messageString, ptr @KeyNotFound_B_init_, ptr @KeyNotFound_B_set_info_line_numberi32_file_nameString, ptr @KeyNotFound_B_report_, ptr @KeyNotFound_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@Map_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr null, ptr @Object]
@Map_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 47, i32 10, i32 70, i32 10, i32 0, i32 70]
@HashMap_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr @HashMap, ptr @Object]
@HashMap_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 107, i32 10, i32 130, i32 47, i32 10, i32 130]
@KeyNotFound_field_line_number = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_line_number, ptr @KeyNotFound_setter_line_number }
@KeyNotFound_field_file_name = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_file_name, ptr @KeyNotFound_setter_file_name }
@KeyNotFound_field_message = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_message, ptr @KeyNotFound_setter_message }
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@_parameterization_i32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@i32_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_data_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ, ptr @_data_size_i32_typ], [0 x ptr] undef }
@nil_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_data_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ, ptr @_data_size_nil_typ], [0 x ptr] undef }
@any_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [7 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_data_size_any_typ, ptr @_box_Default, ptr @_unbox_Default, ptr @_data_size_any_typ], [0 x ptr] undef }
@buffer_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_data_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ, ptr @_data_size_buffer_typ], [0 x ptr] undef }
@union_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_data_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ, ptr @_data_size_union_typ], [0 x ptr] undef }
@Object = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_data_size_Object, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Pair = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_data_size_Pair, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_data_size_Container, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterator = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388349, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_data_size_Iterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterable = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388477, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_data_size_Iterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Map = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5249855671126779970, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Map_hashtbl, ptr @Map_offset_tbl, ptr @_data_size_Map, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@HashMap = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2849643283898152329, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @HashMap_hashtbl, ptr @HashMap_offset_tbl, ptr @_data_size_HashMap, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Entry_hashtbl = constant [4 x ptr] [ptr @Entry, ptr @Object, ptr @any_typ, ptr null]
@Entry_offset_tbl = constant [4 x i32] [i32 10, i32 25, i32 10, i32 0]
@Entry = constant { [3 x i64], [7 x ptr], [15 x ptr] } { [3 x i64] [i64 4015701072841558310, i64 4611686018427388181, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Entry_hashtbl, ptr @Entry_offset_tbl, ptr @_data_size_Entry, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [15 x ptr] [ptr @Entry_field_Entry_0, ptr @Entry_field_Entry_1, ptr @Entry_field_primary_hash, ptr @Entry_field_key, ptr @Entry_field_value, ptr @Entry_B_init_keyK_valueV_primary_hashi32, ptr @Entry_B_key_, ptr @Entry_B_value_, ptr @Entry_B_primary_hash_, ptr @Entry_B_to_pair_, ptr @Entry_init_keyK_valueV_primary_hashi32, ptr @Entry_key_, ptr @Entry_value_, ptr @Entry_primary_hash_, ptr @Entry_to_pair_] }
@CuckooMap_hashtbl = constant [8 x ptr] [ptr null, ptr @CuckooMap, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr @HashMap, ptr @Object]
@CuckooMap_offset_tbl = constant [8 x i32] [i32 0, i32 10, i32 259, i32 10, i32 282, i32 199, i32 79, i32 282]
@CuckooMap = constant { [3 x i64], [7 x ptr], [272 x ptr] } { [3 x i64] [i64 3547150501766965522, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @CuckooMap_hashtbl, ptr @CuckooMap_offset_tbl, ptr @_data_size_CuckooMap, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [272 x ptr] [ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_field_table1, ptr @CuckooMap_field_table2, ptr @CuckooMap_field_table_len, ptr @CuckooMap_field_size, ptr @CuckooMap_field_hasher, ptr @CuckooMap_field_eq, ptr @CuckooMap_B__Self_max_displacements_, ptr @CuckooMap_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_i1, ptr @CuckooMap_B_hash1_keyK, ptr @CuckooMap_B_hash2_from_primary_primary_hashi32, ptr @CuckooMap_B_index1_primary_hashi32, ptr @CuckooMap_B_index2_primary_hashi32, ptr @CuckooMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @CuckooMap_B_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32, ptr @CuckooMap_B_resize_, ptr @CuckooMap_B_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_insert_keyK_valueV, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap__Self_max_displacements_, ptr @CuckooMap_init_hasherFunctionK_to_i32_eqFunctionK._K_to_i1, ptr @CuckooMap_hash1_keyK, ptr @CuckooMap_hash2_from_primary_primary_hashi32, ptr @CuckooMap_index1_primary_hashi32, ptr @CuckooMap_index2_primary_hashi32, ptr @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @CuckooMap_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32, ptr @CuckooMap_resize_, ptr @CuckooMap_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_insert_keyK_valueV, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@CuckooMapIterator_hashtbl = constant [8 x ptr] [ptr @CuckooMapIterator, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr null]
@CuckooMapIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 27, i32 24, i32 27, i32 0, i32 10, i32 0]
@CuckooMapIterator = constant { [3 x i64], [7 x ptr], [17 x ptr] } { [3 x i64] [i64 -1975748647346050920, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @CuckooMapIterator_hashtbl, ptr @CuckooMapIterator_offset_tbl, ptr @_data_size_CuckooMapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [17 x ptr] [ptr @CuckooMapIterator_field_CuckooMapIterator_0, ptr @CuckooMapIterator_field_CuckooMapIterator_1, ptr @CuckooMapIterator_field_CuckooMapIterator_2, ptr @CuckooMapIterator_field_map_table1, ptr @CuckooMapIterator_field_map_table2, ptr @CuckooMapIterator_field_table_len, ptr @CuckooMapIterator_field_index, ptr @CuckooMapIterator_field_on_second, ptr @CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32, ptr @CuckooMapIterator_B_next_from_table_tableBufferEntryK._V_or_Nil, ptr @CuckooMapIterator_B_next_, ptr @CuckooMapIterator_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32, ptr @CuckooMapIterator_next_from_table_tableBufferEntryK._V_or_Nil, ptr @CuckooMapIterator_next_, ptr @CuckooMapIterator_field_CuckooMapIterator_2, ptr @CuckooMapIterator_B_next_, ptr @CuckooMapIterator_next_] }
@Entry_field_primary_hash = internal constant { ptr, ptr } { ptr @Entry_getter_primary_hash, ptr @Entry_setter_primary_hash }
@Entry_field_key = internal constant { ptr, ptr } { ptr @Entry_getter_key, ptr @Entry_setter_key }
@Entry_field_value = internal constant { ptr, ptr } { ptr @Entry_getter_value, ptr @Entry_setter_value }
@CuckooMap_field_table1 = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table1, ptr @CuckooMap_setter_table1 }
@CuckooMap_field_table2 = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table2, ptr @CuckooMap_setter_table2 }
@CuckooMap_field_table_len = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table_len, ptr @CuckooMap_setter_table_len }
@CuckooMap_field_size = internal constant { ptr, ptr } { ptr @CuckooMap_getter_size, ptr @CuckooMap_setter_size }
@CuckooMap_field_hasher = internal constant { ptr, ptr } { ptr @CuckooMap_getter_hasher, ptr @CuckooMap_setter_hasher }
@CuckooMap_field_eq = internal constant { ptr, ptr } { ptr @CuckooMap_getter_eq, ptr @CuckooMap_setter_eq }
@CuckooMapIterator_field_map_table1 = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_map_table1, ptr @CuckooMapIterator_setter_map_table1 }
@CuckooMapIterator_field_map_table2 = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_map_table2, ptr @CuckooMapIterator_setter_map_table2 }
@CuckooMapIterator_field_table_len = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_table_len, ptr @CuckooMapIterator_setter_table_len }
@CuckooMapIterator_field_index = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_index, ptr @CuckooMapIterator_setter_index }
@CuckooMapIterator_field_on_second = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_on_second, ptr @CuckooMapIterator_setter_on_second }

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #0 {
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_PRNG(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 4, i64 4 }
}

define { ptr, i160 } @_box_Default(ptr %fat_ptr, ptr %parameterization) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr %parameterization, ptr %destination) {
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

define { i64, i64 } @_size_Default(ptr %parameterization) {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @PRNG_B_init_initial_seedi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @PRNG_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @PRNG_init_initial_seedi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(120) @PRNG)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %. = call i32 @llvm.smax.i32(i32 %3, i32 1)
  call void %17(ptr %9, i32 %.) #25
  ret void
}

define i32 @PRNG_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(120) @PRNG)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #26
  %17 = mul i32 %16, 1103515245
  %18 = add i32 %17, 12345
  %19 = and i32 %18, 2147483647
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %9)
  %21 = getelementptr i8, ptr %14, i64 8
  %22 = load ptr, ptr %21, align 8
  call void %22(ptr %8, i32 %19) #25
  %23 = load ptr, ptr %5, align 8
  %24 = load ptr, ptr %4, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %24)
  %26 = load i32, ptr %7, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %23) #26
  ret i32 %31
}

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #4

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @PRNG_getter_seed(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %0) #6 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @PRNG_setter_seed(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %0, i32 %1) #7 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define ptr @typegetter_wrapper(ptr %f, ptr nocapture nofree noundef nonnull readonly %0) #0 {
  %result = call ptr %f(ptr nocapture nofree noundef nonnull readonly %0) #27
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { i64, i64 } @size_wrapper(ptr %f, ptr nocapture nofree readonly %0) #0 {
  %result = call { i64, i64 } %f(ptr nocapture nofree readonly %0) #27
  ret { i64, i64 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { ptr, i160 } @box_wrapper(ptr %f, ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #0 {
  %result = call { ptr, i160 } %f(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #27
  ret { ptr, i160 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @unbox_wrapper(ptr %f, { ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #8 {
  call void %f({ ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #28
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @behavior_wrapper(ptr %f, { ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #9 {
  %result = call ptr %f({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #29
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @class_behavior_wrapper(ptr %f, ptr nocapture nofree noundef nonnull %0) #9 {
  %result = call ptr %f(ptr nocapture nofree noundef nonnull %0) #29
  ret ptr %result
}

define ptr @adjust_trampoline(ptr %tramp) {
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #30
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #10

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #11 {
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #11
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #12 {
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

define { i64, i64 } @_data_size_tuple_typ(ptr %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %1
  %.in = phi i64 [ %22, %.lr.ph ], [ %3, %1 ]
  %5 = phi i64 [ %20, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011 = phi i64 [ %19, %.lr.ph ], [ 0, %1 ]
  %.reg2mem20.010 = phi i64 [ %13, %.lr.ph ], [ 1, %1 ]
  %6 = inttoptr i64 %.in to ptr
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { i64, i64 } %9(ptr nonnull %6)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = extractvalue { i64, i64 } %10, 1
  %13 = tail call i64 @llvm.umax.i64(i64 %12, i64 %.reg2mem20.010)
  %14 = urem i64 %.reg2mem22.011, %12
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %12, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %11, %.reg2mem22.011
  %19 = add i64 %18, %17
  %20 = add i64 %5, 1
  %21 = getelementptr ptr, ptr %0, i64 %20
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %1
  %.reg2mem20.0.lcssa = phi i64 [ 1, %1 ], [ %13, %.lr.ph ]
  %.reg2mem22.0.lcssa = phi i64 [ 0, %1 ], [ %19, %.lr.ph ]
  %24 = urem i64 %.reg2mem22.0.lcssa, %.reg2mem20.0.lcssa
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %.reg2mem20.0.lcssa, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = add i64 %27, %.reg2mem22.0.lcssa
  %29 = insertvalue { i64, i64 } undef, i64 %28, 0
  %30 = insertvalue { i64, i64 } %29, i64 %.reg2mem20.0.lcssa, 1
  ret { i64, i64 } %30
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #5

define { i64, i64 } @_data_size_union_typ(ptr %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %1
  %.in = phi i64 [ %22, %.lr.ph ], [ %3, %1 ]
  %5 = phi i64 [ %20, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011 = phi i64 [ %19, %.lr.ph ], [ 0, %1 ]
  %.reg2mem20.010 = phi i64 [ %13, %.lr.ph ], [ 1, %1 ]
  %6 = inttoptr i64 %.in to ptr
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { i64, i64 } %9(ptr nonnull %6)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = extractvalue { i64, i64 } %10, 1
  %13 = tail call i64 @llvm.umax.i64(i64 noundef %12, i64 noundef %.reg2mem20.010)
  %14 = urem i64 %.reg2mem22.011, %12
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %12, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = tail call i64 @llvm.umax.i64(i64 noundef %11, i64 noundef %.reg2mem22.011)
  %19 = tail call i64 @llvm.umax.i64(i64 noundef %18, i64 noundef %17)
  %20 = add i64 %5, 1
  %21 = getelementptr ptr, ptr %0, i64 %20
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %1
  %.reg2mem20.0.lcssa = phi i64 [ 1, %1 ], [ %13, %.lr.ph ]
  %.reg2mem22.0.lcssa = phi i64 [ 0, %1 ], [ %19, %.lr.ph ]
  %right_size = icmp eq i64 %.reg2mem22.0.lcssa, 32
  %flag_size = select i1 %right_size, i64 0, i64 8
  %final_size = add i64 %.reg2mem22.0.lcssa, %flag_size
  %24 = urem i64 %final_size, %.reg2mem20.0.lcssa
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %.reg2mem20.0.lcssa, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = add i64 %27, %final_size
  %29 = insertvalue { i64, i64 } undef, i64 %28, 0
  %30 = insertvalue { i64, i64 } %29, i64 %.reg2mem20.0.lcssa, 1
  ret { i64, i64 } %30
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr %1, ptr %dest) {
  %3 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %0, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } @_data_size_union_typ(ptr %1)
  %size = extractvalue { i64, i64 } %6, 0
  %7 = icmp sle i64 %size, 16
  %8 = icmp eq i64 %size, 32
  %9 = select i1 %7, ptr %4, ptr %5
  %source = select i1 %8, ptr %3, ptr %9
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %dest, ptr %source, i64 %size, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #13

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %stack = call noalias ptr @virtual_reserve(i64 8388608) #11
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @virtual_reserve(i64 %size) #11 {
  %result = call noalias ptr @VirtualAlloc(ptr null, i64 %size, i32 12288, i32 4) #16
  ret ptr %result
}

define void @coroutine_trampoline(ptr %into_callee_second_word) {
  store ptr blockaddress(@coroutine_trampoline, %trampoline), ptr %into_callee_second_word, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %trampoline

trampoline:                                       ; preds = %0
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  %arg_passer_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 2
  %arg_passer = load ptr, ptr %arg_passer_ptr, align 8
  call void %arg_passer(ptr %current_coroutine)
  %current_coroutine2 = load ptr, ptr @current_coroutine, align 8
  %is_finished_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine2, i32 0, i32 3
  store i1 true, ptr %is_finished_ptr, align 1
  call void @llvm.eh.sjlj.longjmp(ptr @into_caller_buf) #15
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: noinline
define i1 @returns_one() #14 {
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #15

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #16

define void @setup_landing_pad() {
  %region = call noalias ptr @virtual_reserve(i64 5368709120) #11
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #31
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #17

define void @arg_passer(ptr %current_coroutine) {
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

declare i32 @printf(ptr, ...)

declare void @exit()

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #32
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #18

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #0 {
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #27
  ret i1 %result
}

define void @arg_buffer_filler(ptr %coroutine) {
  ret void
}

define ptr @get_current_coroutine() {
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #19 {
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #31
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #15
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

define void @coroutine_yield(ptr %current_coroutine) {
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #33
  ret void
}

define void @coroutine_call(ptr %coroutine) {
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #33
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define void @anoint_trampoline(ptr %tramp) #20 {
  %oldProtect = alloca i32, align 4
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect)
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #20

define i1 @lnmnibzgqe(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @qzrvrlergk(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @nvefgjzayb(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @awufjifrzq(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @vxbxfpzafx(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @uklcoamgfk(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @zoafnhguki(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @ltdiypmxmd(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @gfnbapjmaz(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @fodfimipdb(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @hzrglopvso(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @pvvozowbic(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @lgghrnjoik(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @smrnvaptdf(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @xsvwarzrnq(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @goifyztsio(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @xzsyjxqgsw(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @xrtvaconfw(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define i1 @umkflwmohw(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #3 {
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %.sroa.15.8.extract.trunc = trunc i160 %.fca.1.extract3 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = call i1 %0(i32 %.sroa.15.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  ret i1 %4
}

define i32 @tstwgdfxst(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #3 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 %0(i32 %.sroa.1.8.extract.trunc)
  ret i32 %3
}

define void @print_benchmark_result({ ptr, ptr, ptr, i32 } %0, i32 %1, i64 %2) local_unnamed_addr #3 {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr %.fca.1.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %16, i64 16
  store ptr %.fca.2.extract, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %16, i64 24
  store i32 %.fca.3.extract, ptr %19, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %16, ptr noundef nonnull align 8 dereferenceable(688) @String)
  %20 = load ptr, ptr %16, align 8
  %21 = insertvalue { ptr, i160 } undef, ptr %20, 0
  %22 = load i160, ptr %17, align 8
  %23 = insertvalue { ptr, i160 } %21, i160 %22, 1
  %24 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %24)
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %27 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %28 = alloca { ptr }, align 8
  store ptr %20, ptr %28, align 8
  %29 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %28)
  call void %29(ptr nonnull %24, { ptr, i160 } %23) #34
  %30 = call ptr @bump_malloc(i64 noundef 15)
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %30, align 16
  %31 = alloca [1 x ptr], align 8
  store ptr @String, ptr %31, align 8
  %32 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %33 = call { i64, i64 } @size_wrapper(ptr %32, ptr noundef nonnull align 8 dereferenceable(8) %31)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = call ptr @bump_malloc(i64 %34)
  %36 = insertvalue { ptr } undef, ptr %30, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %35, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr undef, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 10, 3
  %40 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr @_parameterization_i32, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %40)
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %45 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %46 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %46, align 8
  %47 = getelementptr inbounds i8, ptr %46, i64 8
  store ptr @i32_typ, ptr %47, align 8
  %48 = getelementptr inbounds i8, ptr %46, i64 16
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr noundef nonnull align 8 dereferenceable(24) %46)
  call void %49({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %40, { ptr } %36, i32 14, i32 15) #34
  %50 = ptrtoint ptr %35 to i64
  %.sroa.336.8.insert.ext = zext i64 %50 to i160
  %.sroa.336.8.insert.insert = or disjoint i160 %.sroa.336.8.insert.ext, 3402823669209384634633746074317682114560
  %51 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.336.8.insert.insert, 1
  %52 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %52)
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %55 = alloca { ptr }, align 8
  store ptr @String, ptr %55, align 8
  %56 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %55)
  call void %56(ptr nonnull %52, { ptr, i160 } %51) #34
  %.sroa.026.0.insert.ext = zext i32 %1 to i160
  %57 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.026.0.insert.ext, 1
  %58 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %61 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %61, align 8
  %62 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %61)
  call void %62(ptr nonnull %58, { ptr, i160 } %57) #34
  %63 = call ptr @bump_malloc(i64 noundef 15)
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %63, align 16
  %64 = alloca [1 x ptr], align 8
  store ptr @String, ptr %64, align 8
  %65 = call { i64, i64 } @size_wrapper(ptr %32, ptr noundef nonnull align 8 dereferenceable(8) %64)
  %66 = extractvalue { i64, i64 } %65, 0
  %67 = call ptr @bump_malloc(i64 %66)
  %68 = insertvalue { ptr } undef, ptr %63, 0
  %69 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %67, 1
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr undef, 2
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, i32 10, 3
  %72 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %72, i64 8
  store ptr @_parameterization_i32, ptr %73, align 8
  %74 = getelementptr inbounds i8, ptr %72, i64 16
  store ptr @_parameterization_i32, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %72)
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %77 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %77, align 8
  %78 = getelementptr inbounds i8, ptr %77, i64 8
  store ptr @i32_typ, ptr %78, align 8
  %79 = getelementptr inbounds i8, ptr %77, i64 16
  store ptr @i32_typ, ptr %79, align 8
  %80 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %71, ptr noundef nonnull align 8 dereferenceable(24) %77)
  call void %80({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr nonnull %72, { ptr } %68, i32 14, i32 15) #34
  %81 = ptrtoint ptr %67 to i64
  %.sroa.316.8.insert.ext = zext i64 %81 to i160
  %.sroa.316.8.insert.insert = or disjoint i160 %.sroa.316.8.insert.ext, 3402823669209384634633746074317682114560
  %82 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.316.8.insert.insert, 1
  %83 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %83)
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %86 = alloca { ptr }, align 8
  store ptr @String, ptr %86, align 8
  %87 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %86)
  call void %87(ptr nonnull %83, { ptr, i160 } %82) #34
  %.sroa.011.0.insert.ext = zext i64 %2 to i160
  %88 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %.sroa.011.0.insert.ext, 1
  %89 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i64, ptr %89, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %89)
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %92 = alloca { ptr }, align 8
  store ptr @i64_typ, ptr %92, align 8
  %93 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %92)
  call void %93(ptr nonnull %89, { ptr, i160 } %88) #34
  %94 = call ptr @bump_malloc(i64 noundef 4)
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %94, align 4
  %95 = alloca [1 x ptr], align 8
  store ptr @String, ptr %95, align 8
  %96 = call { i64, i64 } @size_wrapper(ptr %32, ptr noundef nonnull align 8 dereferenceable(8) %95)
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = call ptr @bump_malloc(i64 %97)
  %99 = insertvalue { ptr } undef, ptr %94, 0
  %100 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %98, 1
  %101 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr undef, 2
  %102 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 10, 3
  %103 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %103, align 8
  %104 = getelementptr inbounds i8, ptr %103, i64 8
  store ptr @_parameterization_i32, ptr %104, align 8
  %105 = getelementptr inbounds i8, ptr %103, i64 16
  store ptr @_parameterization_i32, ptr %105, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %103)
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %108 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %108, align 8
  %109 = getelementptr inbounds i8, ptr %108, i64 8
  store ptr @i32_typ, ptr %109, align 8
  %110 = getelementptr inbounds i8, ptr %108, i64 16
  store ptr @i32_typ, ptr %110, align 8
  %111 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %102, ptr noundef nonnull align 8 dereferenceable(24) %108)
  call void %111({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr nonnull %103, { ptr } %99, i32 3, i32 4) #34
  %112 = ptrtoint ptr %98 to i64
  %.sroa.3.8.insert.ext = zext i64 %112 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %113 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %114 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %114)
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %117 = alloca { ptr }, align 8
  store ptr @String, ptr %117, align 8
  %118 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %117)
  call void %118(ptr nonnull %114, { ptr, i160 } %113) #34
  %119 = icmp sgt i32 %1, 0
  br i1 %119, label %._crit_edge1, label %._crit_edge

._crit_edge1:                                     ; preds = %3
  %120 = icmp sgt i64 %2, 0
  br i1 %120, label %121, label %._crit_edge2

121:                                              ; preds = %._crit_edge1
  %122 = mul i64 %2, 1000000
  %123 = zext nneg i32 %1 to i64
  %124 = sdiv i64 %122, %123
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %121, %._crit_edge1
  %.0 = phi i64 [ %124, %121 ], [ 0, %._crit_edge1 ]
  %125 = call ptr @bump_malloc(i64 noundef 16)
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %125, align 16
  store ptr @String, ptr %4, align 8
  %126 = call { i64, i64 } @size_wrapper(ptr %32, ptr noundef nonnull align 8 dereferenceable(8) %4)
  %127 = extractvalue { i64, i64 } %126, 0
  %128 = call ptr @bump_malloc(i64 %127)
  %129 = insertvalue { ptr } undef, ptr %125, 0
  %130 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %128, 1
  %131 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr undef, 2
  %132 = insertvalue { ptr, ptr, ptr, i32 } %131, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %5, align 8
  %133 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @_parameterization_i32, ptr %133, align 8
  %134 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @_parameterization_i32, ptr %134, align 8
  %135 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %5)
  %136 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %6, align 8
  %137 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @i32_typ, ptr %137, align 8
  %138 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr @i32_typ, ptr %138, align 8
  %139 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %132, ptr noundef nonnull align 8 dereferenceable(24) %6)
  call void %139({ ptr, ptr, ptr, i32 } %132, { ptr, ptr, ptr, i32 } %132, ptr nonnull %5, { ptr } %129, i32 15, i32 16) #34
  %140 = ptrtoint ptr %128 to i64
  %.sroa.374.8.insert.ext = zext i64 %140 to i160
  %.sroa.374.8.insert.insert = or disjoint i160 %.sroa.374.8.insert.ext, 3402823669209384634633746074317682114560
  %141 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.374.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %7, align 8
  %142 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  %143 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %8, align 8
  %144 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %8)
  call void %144(ptr nonnull %7, { ptr, i160 } %141) #34
  %.sroa.068.0.insert.ext = zext i64 %.0 to i160
  %145 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %.sroa.068.0.insert.ext, 1
  store ptr @_parameterization_i64, ptr %9, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %9)
  %147 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i64_typ, ptr %10, align 8
  %148 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %10)
  call void %148(ptr nonnull %9, { ptr, i160 } %145) #34
  %149 = call ptr @bump_malloc(i64 noundef 4)
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %149, align 4
  store ptr @String, ptr %11, align 8
  %150 = call { i64, i64 } @size_wrapper(ptr %32, ptr noundef nonnull align 8 dereferenceable(8) %11)
  %151 = extractvalue { i64, i64 } %150, 0
  %152 = call ptr @bump_malloc(i64 %151)
  %153 = insertvalue { ptr } undef, ptr %149, 0
  %154 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %152, 1
  %155 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr undef, 2
  %156 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %12, align 8
  %157 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr @_parameterization_i32, ptr %157, align 8
  %158 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr @_parameterization_i32, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %12)
  %160 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %13, align 8
  %161 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr @i32_typ, ptr %161, align 8
  %162 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr @i32_typ, ptr %162, align 8
  %163 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %156, ptr noundef nonnull align 8 dereferenceable(24) %13)
  call void %163({ ptr, ptr, ptr, i32 } %156, { ptr, ptr, ptr, i32 } %156, ptr nonnull %12, { ptr } %153, i32 3, i32 4) #34
  %164 = ptrtoint ptr %152 to i64
  %.sroa.358.8.insert.ext = zext i64 %164 to i160
  %.sroa.358.8.insert.insert = or disjoint i160 %.sroa.358.8.insert.ext, 3402823669209384634633746074317682114560
  %165 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.358.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %14, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %14)
  %167 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %15, align 8
  %168 = call ptr @class_behavior_wrapper(ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %15)
  call void %168(ptr nonnull %14, { ptr, i160 } %165) #34
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge2, %3
  ret void
}

define void @benchmark_insert_sequential(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [2 x ptr], align 8
  %4 = alloca { ptr, ptr }, align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca [3 x ptr], align 8
  %12 = alloca { ptr, ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca [3 x ptr], align 8
  %17 = alloca { ptr, ptr, ptr }, align 8
  %18 = alloca [1 x ptr], align 8
  %19 = alloca { ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca [3 x ptr], align 8
  %22 = alloca { ptr, ptr, ptr }, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = alloca { ptr }, align 8
  %25 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %25, i64 8
  store ptr @_parameterization_i32, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %25, i64 16
  store ptr @_parameterization_i32, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %25, i64 24
  store ptr @_parameterization_Pairi32._i32, ptr %28, align 8
  %29 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 48), align 8
  %30 = call { i64, i64 } @size_wrapper(ptr %29, ptr noundef nonnull align 8 dereferenceable(32) %25)
  %31 = extractvalue { i64, i64 } %30, 0
  %32 = call ptr @bump_malloc(i64 %31)
  store ptr @_parameterization_i32, ptr %32, align 8
  %33 = getelementptr i8, ptr %32, i64 8
  store ptr @_parameterization_i32, ptr %33, align 8
  %34 = getelementptr i8, ptr %32, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %32)
  %36 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %36)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %36, ptr noalias nofree noundef nonnull readnone @tstwgdfxst, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %37 = call ptr @adjust_trampoline(ptr %36)
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %36)
  %39 = insertvalue { ptr } undef, ptr %37, 0
  %40 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %40)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %40, ptr noalias nofree noundef nonnull readnone @umkflwmohw, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %41 = call ptr @adjust_trampoline(ptr %40)
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %40)
  %43 = insertvalue { ptr } undef, ptr %41, 0
  %44 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %32, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr undef, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 10, 3
  %47 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %47, align 8
  %48 = getelementptr inbounds i8, ptr %47, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %47)
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %51 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 160), align 8
  %52 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %52, align 8
  %53 = getelementptr inbounds i8, ptr %52, i64 8
  store ptr @function_typ, ptr %53, align 8
  %54 = call ptr @behavior_wrapper(ptr %51, { ptr, ptr, ptr, i32 } %46, ptr noundef nonnull align 8 dereferenceable(16) %52)
  call void %54({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %47, { ptr } %39, { ptr } %43) #34
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %55, align 8
  %56 = getelementptr inbounds i8, ptr %55, i64 8
  store ptr %32, ptr %56, align 8
  %57 = getelementptr inbounds i8, ptr %55, i64 16
  %58 = getelementptr inbounds i8, ptr %55, i64 24
  store i32 10, ptr %58, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %55, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %59 = load ptr, ptr %55, align 8
  %60 = load ptr, ptr %56, align 8
  %61 = load ptr, ptr %57, align 8
  %62 = load i32, ptr %58, align 8
  %63 = call i64 @clock()
  %64 = icmp sgt i32 %0, 0
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %60, 1
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %61, 2
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %62, 3
  br i1 %64, label %._crit_edge.lr.ph, label %._crit_edge1._crit_edge.thread

._crit_edge1._crit_edge.thread:                   ; preds = %1
  %69 = call i64 @clock()
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %59)
  %72 = sext i32 %62 to i64
  %73 = getelementptr ptr, ptr %59, i64 %72
  %74 = getelementptr i8, ptr %73, i64 176
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %68, ptr noundef nonnull align 8 %2)
  %77 = call i32 %76({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr nonnull %2) #34
  %.not = icmp eq i32 %77, 0
  br label %113

._crit_edge.lr.ph:                                ; preds = %1
  %invariant.gep = getelementptr i8, ptr %59, i64 168
  %78 = getelementptr inbounds i8, ptr %3, i64 8
  %79 = sext i32 %62 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %79
  %80 = getelementptr inbounds i8, ptr %4, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge, %._crit_edge.lr.ph
  %.0151 = phi i32 [ 0, %._crit_edge.lr.ph ], [ %81, %._crit_edge ]
  %81 = add nuw nsw i32 %.0151, 1
  %.sroa.0131.0.insert.ext = zext nneg i32 %.0151 to i160
  %82 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0131.0.insert.ext, 1
  %.sroa.0128.0.insert.ext = zext nneg i32 %81 to i160
  %83 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0128.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %3, align 8
  store ptr @_parameterization_i32, ptr %78, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %3)
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %59)
  %86 = load ptr, ptr %gep, align 8
  store ptr @i32_typ, ptr %4, align 8
  store ptr @i32_typ, ptr %80, align 8
  %87 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %68, ptr noundef nonnull align 8 dereferenceable(16) %4)
  call void %87({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr nonnull %3, { ptr, i160 } %82, { ptr, i160 } %83) #34
  %88 = icmp slt i32 %81, %0
  br i1 %88, label %._crit_edge, label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge
  %89 = call i64 @clock()
  %90 = add nsw i32 %0, -1
  %.sroa.0117.0.insert.ext = zext nneg i32 %90 to i160
  %91 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0117.0.insert.ext, 1
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %59, 0
  %93 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %60, 1
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %61, 2
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %62, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %96 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5)
  %97 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %59)
  %98 = sext i32 %62 to i64
  %99 = getelementptr ptr, ptr %59, i64 %98
  %100 = getelementptr i8, ptr %99, i64 184
  %101 = load ptr, ptr %100, align 8
  store ptr @i32_typ, ptr %6, align 8
  %102 = call ptr @behavior_wrapper(ptr %101, { ptr, ptr, ptr, i32 } %95, ptr noundef nonnull align 8 dereferenceable(8) %6)
  %103 = call { ptr, i160 } %102({ ptr, ptr, ptr, i32 } %95, { ptr, ptr, ptr, i32 } %95, ptr nonnull %5, { ptr, i160 } %91) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %103, 0
  %104 = icmp ne ptr %.fca.0.extract, @nil_typ
  %105 = icmp ne ptr %.fca.0.extract, null
  %.not143 = and i1 %104, %105
  br i1 %.not143, label %._crit_edge3, label %._crit_edge4

._crit_edge3:                                     ; preds = %._crit_edge1._crit_edge
  %.fca.1.extract = extractvalue { ptr, i160 } %103, 1
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %.not147 = icmp eq i32 %0, %.sroa.2.8.extract.trunc
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %._crit_edge3, %._crit_edge1._crit_edge
  %.3 = phi i1 [ %.not147, %._crit_edge3 ], [ false, %._crit_edge1._crit_edge ]
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %59)
  %108 = getelementptr i8, ptr %99, i64 176
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @behavior_wrapper(ptr %109, { ptr, ptr, ptr, i32 } %95, ptr noundef nonnull align 8 %2)
  %111 = call i32 %110({ ptr, ptr, ptr, i32 } %95, { ptr, ptr, ptr, i32 } %95, ptr nonnull %2) #34
  %.not148 = icmp eq i32 %111, %0
  %112 = select i1 %.not148, i1 %.3, i1 false
  br label %113

113:                                              ; preds = %._crit_edge4, %._crit_edge1._crit_edge.thread
  %114 = phi i64 [ %89, %._crit_edge4 ], [ %69, %._crit_edge1._crit_edge.thread ]
  %.reg2mem15.0.in = phi i1 [ %112, %._crit_edge4 ], [ %.not, %._crit_edge1._crit_edge.thread ]
  %115 = call ptr @bump_malloc(i64 noundef 18)
  store <17 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108>, ptr %115, align 32
  store ptr @String, ptr %7, align 8
  %116 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %117 = call { i64, i64 } @size_wrapper(ptr %116, ptr noundef nonnull align 8 dereferenceable(8) %7)
  %118 = extractvalue { i64, i64 } %117, 0
  %119 = call ptr @bump_malloc(i64 %118)
  %120 = insertvalue { ptr } undef, ptr %115, 0
  %121 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %119, 1
  %122 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr undef, 2
  %123 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %8, align 8
  %124 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %124, align 8
  %125 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_i32, ptr %125, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %8)
  %127 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %128 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %9, align 8
  %129 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %129, align 8
  %130 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %130, align 8
  %131 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %123, ptr noundef nonnull align 8 dereferenceable(24) %9)
  call void %131({ ptr, ptr, ptr, i32 } %123, { ptr, ptr, ptr, i32 } %123, ptr nonnull %8, { ptr } %120, i32 17, i32 18) #34
  %132 = sub i64 %114, %63
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %123, i32 %0, i64 %132)
  %133 = call ptr @bump_malloc(i64 noundef 19)
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %133, align 32
  store ptr @String, ptr %10, align 8
  %134 = call { i64, i64 } @size_wrapper(ptr %116, ptr noundef nonnull align 8 dereferenceable(8) %10)
  %135 = extractvalue { i64, i64 } %134, 0
  %136 = call ptr @bump_malloc(i64 %135)
  %137 = insertvalue { ptr } undef, ptr %133, 0
  %138 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %136, 1
  %139 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr undef, 2
  %140 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %11, align 8
  %141 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @_parameterization_i32, ptr %141, align 8
  %142 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr @_parameterization_i32, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %11)
  %144 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %12, align 8
  %145 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr @i32_typ, ptr %145, align 8
  %146 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr @i32_typ, ptr %146, align 8
  %147 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %140, ptr noundef nonnull align 8 dereferenceable(24) %12)
  call void %147({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr nonnull %11, { ptr } %137, i32 18, i32 19) #34
  %148 = ptrtoint ptr %136 to i64
  %.sroa.364.8.insert.ext = zext i64 %148 to i160
  %.sroa.364.8.insert.insert = or disjoint i160 %.sroa.364.8.insert.ext, 3402823669209384634633746074317682114560
  %149 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.364.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %13, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %13)
  %151 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %152 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @String, ptr %14, align 8
  %153 = call ptr @class_behavior_wrapper(ptr %152, ptr noundef nonnull align 8 dereferenceable(8) %14)
  call void %153(ptr nonnull %13, { ptr, i160 } %149) #34
  %154 = call ptr @bump_malloc(i64 noundef 5)
  %155 = insertvalue { ptr } undef, ptr %154, 0
  %. = select i1 %.reg2mem15.0.in, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.185 = select i1 %.reg2mem15.0.in, ptr %15, ptr %20
  %.186 = select i1 %.reg2mem15.0.in, ptr %16, ptr %21
  %.187 = select i1 %.reg2mem15.0.in, ptr %17, ptr %22
  %.188 = select i1 %.reg2mem15.0.in, ptr %18, ptr %23
  %.189 = select i1 %.reg2mem15.0.in, ptr %19, ptr %24
  store <4 x i8> %., ptr %154, align 4
  store ptr @String, ptr %.185, align 8
  %156 = call { i64, i64 } @size_wrapper(ptr %116, ptr noundef nonnull align 8 dereferenceable(8) %.185)
  %157 = extractvalue { i64, i64 } %156, 0
  %158 = call ptr @bump_malloc(i64 %157)
  %159 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %158, 1
  %160 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr undef, 2
  %161 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %.186, align 8
  %.186.sroa.sel.v = select i1 %.reg2mem15.0.in, ptr %16, ptr %21
  %.186.sroa.sel = getelementptr inbounds i8, ptr %.186.sroa.sel.v, i64 8
  store ptr @_parameterization_i32, ptr %.186.sroa.sel, align 8
  %.186.sroa.sel198.v = select i1 %.reg2mem15.0.in, ptr %16, ptr %21
  %.186.sroa.sel198 = getelementptr inbounds i8, ptr %.186.sroa.sel198.v, i64 16
  store ptr @_parameterization_i32, ptr %.186.sroa.sel198, align 8
  %162 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %.186)
  %163 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %.187, align 8
  %.187.sroa.sel.v = select i1 %.reg2mem15.0.in, ptr %17, ptr %22
  %.187.sroa.sel = getelementptr inbounds i8, ptr %.187.sroa.sel.v, i64 8
  store ptr @i32_typ, ptr %.187.sroa.sel, align 8
  %.187.sroa.sel193.v = select i1 %.reg2mem15.0.in, ptr %17, ptr %22
  %.187.sroa.sel193 = getelementptr inbounds i8, ptr %.187.sroa.sel193.v, i64 16
  store ptr @i32_typ, ptr %.187.sroa.sel193, align 8
  %164 = call ptr @behavior_wrapper(ptr %128, { ptr, ptr, ptr, i32 } %161, ptr noundef nonnull align 8 dereferenceable(24) %.187)
  call void %164({ ptr, ptr, ptr, i32 } %161, { ptr, ptr, ptr, i32 } %161, ptr nonnull %.186, { ptr } %155, i32 4, i32 5) #34
  %165 = ptrtoint ptr %158 to i64
  %.sroa.3.8.insert.ext = zext i64 %165 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %166 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %.188, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %.188)
  %168 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %.189, align 8
  %169 = call ptr @class_behavior_wrapper(ptr %152, ptr noundef nonnull align 8 dereferenceable(8) %.189)
  call void %169(ptr nonnull %.188, { ptr, i160 } %166) #34
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #4

declare i64 @clock() local_unnamed_addr #3

define void @benchmark_insert_random(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [2 x ptr], align 8
  %4 = alloca { ptr, ptr }, align 8
  %.sroa.0231.sroa.0 = alloca i8, align 8
  %5 = alloca [2 x ptr], align 8
  %6 = alloca { ptr, ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca [3 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr }, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca [3 x ptr], align 8
  %18 = alloca { ptr, ptr, ptr }, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr }, align 8
  %21 = alloca [1 x ptr], align 8
  %22 = alloca [3 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr }, align 8
  %24 = alloca [1 x ptr], align 8
  %25 = alloca { ptr }, align 8
  %26 = alloca [1 x ptr], align 8
  %27 = alloca [3 x ptr], align 8
  %28 = alloca { ptr, ptr, ptr }, align 8
  %29 = alloca [1 x ptr], align 8
  %30 = alloca { ptr }, align 8
  %31 = alloca [1 x ptr], align 8
  %32 = alloca [3 x ptr], align 8
  %33 = alloca { ptr, ptr, ptr }, align 8
  %34 = alloca [1 x ptr], align 8
  %35 = alloca { ptr }, align 8
  %36 = alloca [1 x ptr], align 8
  %37 = alloca { ptr }, align 8
  %38 = alloca [1 x ptr], align 8
  %39 = alloca [3 x ptr], align 8
  %40 = alloca { ptr, ptr, ptr }, align 8
  %41 = alloca [1 x ptr], align 8
  %42 = alloca { ptr }, align 8
  %43 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %43, i64 8
  store ptr @_parameterization_i32, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 16
  store ptr @_parameterization_i32, ptr %45, align 8
  %46 = getelementptr inbounds i8, ptr %43, i64 24
  store ptr @_parameterization_Pairi32._i32, ptr %46, align 8
  %47 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 48), align 8
  %48 = call { i64, i64 } @size_wrapper(ptr %47, ptr noundef nonnull align 8 dereferenceable(32) %43)
  %49 = extractvalue { i64, i64 } %48, 0
  %50 = call ptr @bump_malloc(i64 %49)
  store ptr @_parameterization_i32, ptr %50, align 8
  %51 = getelementptr i8, ptr %50, i64 8
  store ptr @_parameterization_i32, ptr %51, align 8
  %52 = getelementptr i8, ptr %50, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %50)
  %54 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %54)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %54, ptr noalias nofree noundef nonnull readnone @xrtvaconfw, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %55 = call ptr @adjust_trampoline(ptr %54)
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %54)
  %57 = insertvalue { ptr } undef, ptr %55, 0
  %58 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %58)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %58, ptr noalias nofree noundef nonnull readnone @xzsyjxqgsw, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %59 = call ptr @adjust_trampoline(ptr %58)
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %58)
  %61 = insertvalue { ptr } undef, ptr %59, 0
  %62 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %50, 1
  %63 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr undef, 2
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 10, 3
  %65 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %65, align 8
  %66 = getelementptr inbounds i8, ptr %65, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %65)
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %69 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 160), align 8
  %70 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %70, align 8
  %71 = getelementptr inbounds i8, ptr %70, i64 8
  store ptr @function_typ, ptr %71, align 8
  %72 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %64, ptr noundef nonnull align 8 dereferenceable(16) %70)
  call void %72({ ptr, ptr, ptr, i32 } %64, { ptr, ptr, ptr, i32 } %64, ptr nonnull %65, { ptr } %57, { ptr } %61) #34
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %73, align 8
  %74 = getelementptr inbounds i8, ptr %73, i64 8
  store ptr %50, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %73, i64 16
  %76 = getelementptr inbounds i8, ptr %73, i64 24
  store i32 10, ptr %76, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %73, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %77 = load ptr, ptr %73, align 8
  %78 = load ptr, ptr %74, align 8
  %79 = load ptr, ptr %75, align 8
  %80 = load i32, ptr %76, align 8
  %81 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %81, align 8
  %82 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_PRNG, ptr noundef nonnull align 8 dereferenceable(8) %81)
  %83 = extractvalue { i64, i64 } %82, 0
  %84 = call ptr @bump_malloc(i64 %83)
  %85 = insertvalue { ptr, ptr, ptr, i32 } { ptr @PRNG, ptr undef, ptr undef, i32 undef }, ptr %84, 1
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr undef, 2
  %87 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 10, 3
  %88 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %88)
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG)
  %91 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr noundef nonnull @PRNG_B_init_initial_seedi32, { ptr, ptr, ptr, i32 } %87, ptr noundef nonnull align 8 dereferenceable(8) %91)
  call void %92({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr nonnull %88, i32 123) #34
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @PRNG, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %93, i64 8
  store ptr %84, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %93, i64 16
  %96 = getelementptr inbounds i8, ptr %93, i64 24
  store i32 10, ptr %96, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %93, ptr noundef nonnull align 16 dereferenceable(120) @PRNG)
  %97 = load ptr, ptr %93, align 8
  %98 = load ptr, ptr %94, align 8
  %99 = load ptr, ptr %95, align 8
  %100 = load i32, ptr %96, align 8
  %101 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %101, align 8
  %102 = getelementptr inbounds i8, ptr %101, i64 8
  store ptr @_parameterization_i32, ptr %102, align 8
  %103 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 48), align 8
  %104 = call { i64, i64 } @size_wrapper(ptr %103, ptr noundef nonnull align 8 dereferenceable(16) %101)
  %105 = extractvalue { i64, i64 } %104, 0
  %106 = call ptr @bump_malloc(i64 %105)
  store ptr @_parameterization_i32, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %106)
  %108 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %106, 1
  %109 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr undef, 2
  %110 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 10, 3
  %111 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %111, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %111)
  %113 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 dereferenceable(720) @Array)
  %114 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 128), align 8
  %115 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %115, align 8
  %116 = call ptr @behavior_wrapper(ptr %114, { ptr, ptr, ptr, i32 } %110, ptr noundef nonnull align 8 dereferenceable(8) %115)
  call void %116({ ptr, ptr, ptr, i32 } %110, { ptr, ptr, ptr, i32 } %110, ptr nonnull %111, i32 %0) #34
  %117 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Array, ptr %117, align 8
  %118 = getelementptr inbounds i8, ptr %117, i64 8
  store ptr %106, ptr %118, align 8
  %119 = getelementptr inbounds i8, ptr %117, i64 16
  %120 = getelementptr inbounds i8, ptr %117, i64 24
  store i32 10, ptr %120, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %117, ptr noundef nonnull align 8 dereferenceable(720) @Array)
  %121 = load ptr, ptr %117, align 8
  %122 = load ptr, ptr %118, align 8
  %123 = load ptr, ptr %119, align 8
  %124 = load i32, ptr %120, align 8
  %125 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %125, align 8
  %126 = getelementptr inbounds i8, ptr %125, i64 8
  store ptr @_parameterization_i32, ptr %126, align 8
  %127 = getelementptr inbounds i8, ptr %125, i64 16
  store ptr @_parameterization_i1, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %125, i64 24
  store ptr @_parameterization_Pairi32._i1, ptr %128, align 8
  %129 = call { i64, i64 } @size_wrapper(ptr %47, ptr noundef nonnull align 8 dereferenceable(32) %125)
  %130 = extractvalue { i64, i64 } %129, 0
  %131 = call ptr @bump_malloc(i64 %130)
  store ptr @_parameterization_i32, ptr %131, align 8
  %132 = getelementptr i8, ptr %131, i64 8
  store ptr @_parameterization_i1, ptr %132, align 8
  %133 = getelementptr i8, ptr %131, i64 16
  store ptr @_parameterization_Pairi32._i1, ptr %133, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %131)
  %135 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %135)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %135, ptr noalias nofree noundef nonnull readnone @goifyztsio, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %136 = call ptr @adjust_trampoline(ptr %135)
  %137 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %135)
  %138 = insertvalue { ptr } undef, ptr %136, 0
  %139 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %139)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %139, ptr noalias nofree noundef nonnull readnone @xsvwarzrnq, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %140 = call ptr @adjust_trampoline(ptr %139)
  %141 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %139)
  %142 = insertvalue { ptr } undef, ptr %140, 0
  %143 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %131, 1
  %144 = insertvalue { ptr, ptr, ptr, i32 } %143, ptr undef, 2
  %145 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 10, 3
  %146 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %146, align 8
  %147 = getelementptr inbounds i8, ptr %146, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %147, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %146)
  %149 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %150 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %150, align 8
  %151 = getelementptr inbounds i8, ptr %150, i64 8
  store ptr @function_typ, ptr %151, align 8
  %152 = call ptr @behavior_wrapper(ptr %69, { ptr, ptr, ptr, i32 } %145, ptr noundef nonnull align 8 dereferenceable(16) %150)
  call void %152({ ptr, ptr, ptr, i32 } %145, { ptr, ptr, ptr, i32 } %145, ptr nonnull %146, { ptr } %138, { ptr } %142) #34
  %153 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %153, align 8
  %154 = getelementptr inbounds i8, ptr %153, i64 8
  store ptr %131, ptr %154, align 8
  %155 = getelementptr inbounds i8, ptr %153, i64 16
  %156 = getelementptr inbounds i8, ptr %153, i64 24
  store i32 10, ptr %156, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %153, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %157 = load ptr, ptr %153, align 8
  %158 = load ptr, ptr %154, align 8
  %159 = load ptr, ptr %155, align 8
  %160 = load i32, ptr %156, align 8
  %161 = icmp sgt i32 %0, 0
  br i1 %161, label %._crit_edge.lr.ph, label %.._crit_edge2._crit_edge_crit_edge

.._crit_edge2._crit_edge_crit_edge:               ; preds = %1
  %.pre = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %157, 0
  %.pre283 = insertvalue { ptr, ptr, ptr, i32 } %.pre, ptr %158, 1
  %.pre285 = insertvalue { ptr, ptr, ptr, i32 } %.pre283, ptr %159, 2
  %.pre287 = insertvalue { ptr, ptr, ptr, i32 } %.pre285, i32 %160, 3
  %.pre289 = sext i32 %160 to i64
  br label %._crit_edge2._crit_edge

._crit_edge.lr.ph:                                ; preds = %1
  %invariant.gep274 = getelementptr i8, ptr %157, i64 168
  %invariant.gep272 = getelementptr i8, ptr %121, i64 144
  %invariant.gep = getelementptr i8, ptr %97, i64 16
  %162 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %163 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %98, 1
  %164 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %99, 2
  %165 = insertvalue { ptr, ptr, ptr, i32 } %164, i32 %100, 3
  %166 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %167 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %97)
  %168 = sext i32 %100 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %168
  %169 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %170 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %122, 1
  %171 = insertvalue { ptr, ptr, ptr, i32 } %170, ptr %123, 2
  %172 = insertvalue { ptr, ptr, ptr, i32 } %171, i32 %124, 3
  %173 = getelementptr inbounds i8, ptr %3, i64 8
  %174 = sext i32 %124 to i64
  %gep273 = getelementptr ptr, ptr %invariant.gep272, i64 %174
  %175 = getelementptr inbounds i8, ptr %4, i64 8
  %176 = add nsw i32 %0, -1
  %177 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %157, 0
  %178 = insertvalue { ptr, ptr, ptr, i32 } %177, ptr %158, 1
  %179 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %159, 2
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, i32 %160, 3
  %181 = getelementptr inbounds i8, ptr %5, i64 8
  %182 = sext i32 %160 to i64
  %gep275 = getelementptr ptr, ptr %invariant.gep274, i64 %182
  %183 = getelementptr inbounds i8, ptr %6, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge, %._crit_edge.lr.ph
  %.0277 = phi i32 [ -1, %._crit_edge.lr.ph ], [ %spec.select, %._crit_edge ]
  %.0247276 = phi i32 [ 0, %._crit_edge.lr.ph ], [ %198, %._crit_edge ]
  %184 = load ptr, ptr %gep, align 8
  %185 = call ptr @behavior_wrapper(ptr %184, { ptr, ptr, ptr, i32 } %165, ptr noundef nonnull align 8 %2)
  %186 = call i32 %185({ ptr, ptr, ptr, i32 } %165, { ptr, ptr, ptr, i32 } %165, ptr nonnull %2) #34
  %.sroa.0241.0.insert.ext = zext i32 %186 to i160
  %187 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0241.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %3, align 8
  store ptr @_parameterization_i32, ptr %173, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %3)
  %189 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %121)
  %190 = load ptr, ptr %gep273, align 8
  store ptr @i32_typ, ptr %4, align 8
  store ptr @i32_typ, ptr %175, align 8
  %191 = call ptr @behavior_wrapper(ptr %190, { ptr, ptr, ptr, i32 } %172, ptr noundef nonnull align 8 dereferenceable(16) %4)
  call void %191({ ptr, ptr, ptr, i32 } %172, { ptr, ptr, ptr, i32 } %172, ptr nonnull %3, i32 %.0247276, { ptr, i160 } %187) #34
  %192 = icmp eq i32 %.0247276, %176
  %spec.select = select i1 %192, i32 %186, i32 %.0277
  store i1 true, ptr %.sroa.0231.sroa.0, align 8
  %.sroa.0231.sroa.0.0..sroa.0231.sroa.0.0..sroa.0231.sroa.0.0..sroa.0231.sroa.0.0..sroa.0231.sroa.0.0..sroa.0231.0. = load i8, ptr %.sroa.0231.sroa.0, align 8
  %.sroa.0231.0.insert.ext = zext i8 %.sroa.0231.sroa.0.0..sroa.0231.sroa.0.0..sroa.0231.sroa.0.0..sroa.0231.sroa.0.0..sroa.0231.sroa.0.0..sroa.0231.0. to i160
  %193 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.0231.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %5, align 8
  store ptr @_parameterization_i1, ptr %181, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %5)
  %195 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %157)
  %196 = load ptr, ptr %gep275, align 8
  store ptr @i32_typ, ptr %6, align 8
  store ptr @bool_typ, ptr %183, align 8
  %197 = call ptr @behavior_wrapper(ptr %196, { ptr, ptr, ptr, i32 } %180, ptr noundef nonnull align 8 dereferenceable(16) %6)
  call void %197({ ptr, ptr, ptr, i32 } %180, { ptr, ptr, ptr, i32 } %180, ptr nonnull %5, { ptr, i160 } %187, { ptr, i160 } %193) #34
  %198 = add nuw nsw i32 %.0247276, 1
  %199 = icmp slt i32 %198, %0
  br i1 %199, label %._crit_edge, label %._crit_edge2._crit_edge

._crit_edge2._crit_edge:                          ; preds = %._crit_edge, %.._crit_edge2._crit_edge_crit_edge
  %.pre-phi290 = phi i64 [ %.pre289, %.._crit_edge2._crit_edge_crit_edge ], [ %182, %._crit_edge ]
  %.pre-phi288 = phi { ptr, ptr, ptr, i32 } [ %.pre287, %.._crit_edge2._crit_edge_crit_edge ], [ %180, %._crit_edge ]
  %.0.lcssa = phi i32 [ -1, %.._crit_edge2._crit_edge_crit_edge ], [ %spec.select, %._crit_edge ]
  %200 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %201 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %157)
  %202 = getelementptr ptr, ptr %157, i64 %.pre-phi290
  %203 = getelementptr i8, ptr %202, i64 176
  %204 = load ptr, ptr %203, align 8
  %205 = call ptr @behavior_wrapper(ptr %204, { ptr, ptr, ptr, i32 } %.pre-phi288, ptr noundef nonnull align 8 %2)
  %206 = call i32 %205({ ptr, ptr, ptr, i32 } %.pre-phi288, { ptr, ptr, ptr, i32 } %.pre-phi288, ptr nonnull align 8 %2) #34
  %207 = call i64 @clock()
  br i1 %161, label %._crit_edge3.lr.ph, label %._crit_edge4._crit_edge.thread

._crit_edge4._crit_edge.thread:                   ; preds = %._crit_edge2._crit_edge
  %208 = call i64 @clock()
  %209 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %210 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %78, 1
  %211 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %79, 2
  %212 = insertvalue { ptr, ptr, ptr, i32 } %211, i32 %80, 3
  %213 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %214 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %77)
  %215 = sext i32 %80 to i64
  %216 = getelementptr ptr, ptr %77, i64 %215
  %217 = getelementptr i8, ptr %216, i64 176
  %218 = load ptr, ptr %217, align 8
  %219 = call ptr @behavior_wrapper(ptr %218, { ptr, ptr, ptr, i32 } %212, ptr noundef nonnull align 8 %2)
  %220 = call i32 %219({ ptr, ptr, ptr, i32 } %212, { ptr, ptr, ptr, i32 } %212, ptr nonnull %2) #34
  %.not = icmp eq i32 %220, 0
  br label %271

._crit_edge3.lr.ph:                               ; preds = %._crit_edge2._crit_edge
  %invariant.gep280 = getelementptr i8, ptr %77, i64 168
  %invariant.gep278 = getelementptr i8, ptr %121, i64 136
  %221 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %222 = insertvalue { ptr, ptr, ptr, i32 } %221, ptr %122, 1
  %223 = insertvalue { ptr, ptr, ptr, i32 } %222, ptr %123, 2
  %224 = insertvalue { ptr, ptr, ptr, i32 } %223, i32 %124, 3
  %225 = sext i32 %124 to i64
  %gep279 = getelementptr ptr, ptr %invariant.gep278, i64 %225
  %226 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %227 = insertvalue { ptr, ptr, ptr, i32 } %226, ptr %78, 1
  %228 = insertvalue { ptr, ptr, ptr, i32 } %227, ptr %79, 2
  %229 = insertvalue { ptr, ptr, ptr, i32 } %228, i32 %80, 3
  %230 = getelementptr inbounds i8, ptr %9, i64 8
  %231 = sext i32 %80 to i64
  %gep281 = getelementptr ptr, ptr %invariant.gep280, i64 %231
  %232 = getelementptr inbounds i8, ptr %10, i64 8
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %._crit_edge3, %._crit_edge3.lr.ph
  %.2249282 = phi i32 [ 0, %._crit_edge3.lr.ph ], [ %245, %._crit_edge3 ]
  store ptr @_parameterization_i32, ptr %7, align 8
  %233 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  %234 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %121)
  %235 = load ptr, ptr %gep279, align 8
  store ptr @i32_typ, ptr %8, align 8
  %236 = call ptr @behavior_wrapper(ptr %235, { ptr, ptr, ptr, i32 } %224, ptr noundef nonnull align 8 dereferenceable(8) %8)
  %237 = call { ptr, i160 } %236({ ptr, ptr, ptr, i32 } %224, { ptr, ptr, ptr, i32 } %224, ptr nonnull %7, i32 %.2249282) #34
  %.fca.1.extract221 = extractvalue { ptr, i160 } %237, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract221 to i32
  %238 = add i32 %.sroa.1.8.extract.trunc, 1
  %.sroa.0214.0.insert.ext = and i160 %.fca.1.extract221, 4294967295
  %239 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0214.0.insert.ext, 1
  %.sroa.0211.0.insert.ext = zext i32 %238 to i160
  %240 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0211.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %9, align 8
  store ptr @_parameterization_i32, ptr %230, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %9)
  %242 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %77)
  %243 = load ptr, ptr %gep281, align 8
  store ptr @i32_typ, ptr %10, align 8
  store ptr @i32_typ, ptr %232, align 8
  %244 = call ptr @behavior_wrapper(ptr %243, { ptr, ptr, ptr, i32 } %229, ptr noundef nonnull align 8 dereferenceable(16) %10)
  call void %244({ ptr, ptr, ptr, i32 } %229, { ptr, ptr, ptr, i32 } %229, ptr nonnull %9, { ptr, i160 } %239, { ptr, i160 } %240) #34
  %245 = add nuw nsw i32 %.2249282, 1
  %246 = icmp slt i32 %245, %0
  br i1 %246, label %._crit_edge3, label %._crit_edge4._crit_edge

._crit_edge4._crit_edge:                          ; preds = %._crit_edge3
  %247 = call i64 @clock()
  %.sroa.0202.0.insert.ext = zext i32 %.0.lcssa to i160
  %248 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0202.0.insert.ext, 1
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %77, 0
  %250 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %78, 1
  %251 = insertvalue { ptr, ptr, ptr, i32 } %250, ptr %79, 2
  %252 = insertvalue { ptr, ptr, ptr, i32 } %251, i32 %80, 3
  store ptr @_parameterization_i32, ptr %11, align 8
  %253 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %11)
  %254 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %77)
  %255 = sext i32 %80 to i64
  %256 = getelementptr ptr, ptr %77, i64 %255
  %257 = getelementptr i8, ptr %256, i64 184
  %258 = load ptr, ptr %257, align 8
  store ptr @i32_typ, ptr %12, align 8
  %259 = call ptr @behavior_wrapper(ptr %258, { ptr, ptr, ptr, i32 } %252, ptr noundef nonnull align 8 dereferenceable(8) %12)
  %260 = call { ptr, i160 } %259({ ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %252, ptr nonnull %11, { ptr, i160 } %248) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %260, 0
  %261 = icmp ne ptr %.fca.0.extract, @nil_typ
  %262 = icmp ne ptr %.fca.0.extract, null
  %.not260 = and i1 %261, %262
  br i1 %.not260, label %._crit_edge6, label %._crit_edge7

._crit_edge6:                                     ; preds = %._crit_edge4._crit_edge
  %.fca.1.extract = extractvalue { ptr, i160 } %260, 1
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %263 = add i32 %.0.lcssa, 1
  %.not264 = icmp eq i32 %263, %.sroa.2.8.extract.trunc
  br label %._crit_edge7

._crit_edge7:                                     ; preds = %._crit_edge6, %._crit_edge4._crit_edge
  %.3253 = phi i1 [ %.not264, %._crit_edge6 ], [ false, %._crit_edge4._crit_edge ]
  %264 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %265 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %77)
  %266 = getelementptr i8, ptr %256, i64 176
  %267 = load ptr, ptr %266, align 8
  %268 = call ptr @behavior_wrapper(ptr %267, { ptr, ptr, ptr, i32 } %252, ptr noundef nonnull align 8 %2)
  %269 = call i32 %268({ ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %252, ptr nonnull %2) #34
  %.not265 = icmp eq i32 %269, %206
  %270 = select i1 %.not265, i1 %.3253, i1 false
  br label %271

271:                                              ; preds = %._crit_edge7, %._crit_edge4._crit_edge.thread
  %272 = phi i64 [ %247, %._crit_edge7 ], [ %208, %._crit_edge4._crit_edge.thread ]
  %.reg2mem21.0.in = phi i1 [ %270, %._crit_edge7 ], [ %.not, %._crit_edge4._crit_edge.thread ]
  %273 = call ptr @bump_malloc(i64 noundef 14)
  store <13 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109>, ptr %273, align 16
  store ptr @String, ptr %13, align 8
  %274 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %275 = call { i64, i64 } @size_wrapper(ptr %274, ptr noundef nonnull align 8 dereferenceable(8) %13)
  %276 = extractvalue { i64, i64 } %275, 0
  %277 = call ptr @bump_malloc(i64 %276)
  %278 = insertvalue { ptr } undef, ptr %273, 0
  %279 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %277, 1
  %280 = insertvalue { ptr, ptr, ptr, i32 } %279, ptr undef, 2
  %281 = insertvalue { ptr, ptr, ptr, i32 } %280, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %14, align 8
  %282 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr @_parameterization_i32, ptr %282, align 8
  %283 = getelementptr inbounds i8, ptr %14, i64 16
  store ptr @_parameterization_i32, ptr %283, align 8
  %284 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %14)
  %285 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %286 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %15, align 8
  %287 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @i32_typ, ptr %287, align 8
  %288 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr @i32_typ, ptr %288, align 8
  %289 = call ptr @behavior_wrapper(ptr %286, { ptr, ptr, ptr, i32 } %281, ptr noundef nonnull align 8 dereferenceable(24) %15)
  call void %289({ ptr, ptr, ptr, i32 } %281, { ptr, ptr, ptr, i32 } %281, ptr nonnull %14, { ptr } %278, i32 13, i32 14) #34
  %290 = sub i64 %272, %207
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %281, i32 %0, i64 %290)
  %291 = call ptr @bump_malloc(i64 noundef 19)
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %291, align 32
  store ptr @String, ptr %16, align 8
  %292 = call { i64, i64 } @size_wrapper(ptr %274, ptr noundef nonnull align 8 dereferenceable(8) %16)
  %293 = extractvalue { i64, i64 } %292, 0
  %294 = call ptr @bump_malloc(i64 %293)
  %295 = insertvalue { ptr } undef, ptr %291, 0
  %296 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %294, 1
  %297 = insertvalue { ptr, ptr, ptr, i32 } %296, ptr undef, 2
  %298 = insertvalue { ptr, ptr, ptr, i32 } %297, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %299 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %299, align 8
  %300 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %300, align 8
  %301 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %17)
  %302 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %18, align 8
  %303 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @i32_typ, ptr %303, align 8
  %304 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @i32_typ, ptr %304, align 8
  %305 = call ptr @behavior_wrapper(ptr %286, { ptr, ptr, ptr, i32 } %298, ptr noundef nonnull align 8 dereferenceable(24) %18)
  call void %305({ ptr, ptr, ptr, i32 } %298, { ptr, ptr, ptr, i32 } %298, ptr nonnull %17, { ptr } %295, i32 18, i32 19) #34
  %306 = ptrtoint ptr %294 to i64
  %.sroa.3147.8.insert.ext = zext i64 %306 to i160
  %.sroa.3147.8.insert.insert = or disjoint i160 %.sroa.3147.8.insert.ext, 3402823669209384634633746074317682114560
  %307 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3147.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %19, align 8
  %308 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %19)
  %309 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %310 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @String, ptr %20, align 8
  %311 = call ptr @class_behavior_wrapper(ptr %310, ptr noundef nonnull align 8 dereferenceable(8) %20)
  call void %311(ptr nonnull %19, { ptr, i160 } %307) #34
  %312 = call ptr @bump_malloc(i64 noundef 5)
  %313 = insertvalue { ptr } undef, ptr %312, 0
  %. = select i1 %.reg2mem21.0.in, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.324 = select i1 %.reg2mem21.0.in, ptr %21, ptr %26
  %.325 = select i1 %.reg2mem21.0.in, ptr %22, ptr %27
  %.326 = select i1 %.reg2mem21.0.in, ptr %23, ptr %28
  %.327 = select i1 %.reg2mem21.0.in, ptr %24, ptr %29
  %.328 = select i1 %.reg2mem21.0.in, ptr %25, ptr %30
  store <4 x i8> %., ptr %312, align 4
  store ptr @String, ptr %.324, align 8
  %314 = call { i64, i64 } @size_wrapper(ptr %274, ptr noundef nonnull align 8 dereferenceable(8) %.324)
  %315 = extractvalue { i64, i64 } %314, 0
  %316 = call ptr @bump_malloc(i64 %315)
  %317 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %316, 1
  %318 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr undef, 2
  %319 = insertvalue { ptr, ptr, ptr, i32 } %318, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %.325, align 8
  %.325.sroa.sel.v = select i1 %.reg2mem21.0.in, ptr %22, ptr %27
  %.325.sroa.sel = getelementptr inbounds i8, ptr %.325.sroa.sel.v, i64 8
  store ptr @_parameterization_i32, ptr %.325.sroa.sel, align 8
  %.325.sroa.sel337.v = select i1 %.reg2mem21.0.in, ptr %22, ptr %27
  %.325.sroa.sel337 = getelementptr inbounds i8, ptr %.325.sroa.sel337.v, i64 16
  store ptr @_parameterization_i32, ptr %.325.sroa.sel337, align 8
  %320 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %.325)
  %321 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %.326, align 8
  %.326.sroa.sel.v = select i1 %.reg2mem21.0.in, ptr %23, ptr %28
  %.326.sroa.sel = getelementptr inbounds i8, ptr %.326.sroa.sel.v, i64 8
  store ptr @i32_typ, ptr %.326.sroa.sel, align 8
  %.326.sroa.sel332.v = select i1 %.reg2mem21.0.in, ptr %23, ptr %28
  %.326.sroa.sel332 = getelementptr inbounds i8, ptr %.326.sroa.sel332.v, i64 16
  store ptr @i32_typ, ptr %.326.sroa.sel332, align 8
  %322 = call ptr @behavior_wrapper(ptr %286, { ptr, ptr, ptr, i32 } %319, ptr noundef nonnull align 8 dereferenceable(24) %.326)
  call void %322({ ptr, ptr, ptr, i32 } %319, { ptr, ptr, ptr, i32 } %319, ptr nonnull %.325, { ptr } %313, i32 4, i32 5) #34
  %323 = ptrtoint ptr %316 to i64
  %.sroa.3121.8.insert.ext = zext i64 %323 to i160
  %.sroa.3121.8.insert.insert = or disjoint i160 %.sroa.3121.8.insert.ext, 3402823669209384634633746074317682114560
  %324 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3121.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %.327, align 8
  %325 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %.327)
  %326 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %.328, align 8
  %327 = call ptr @class_behavior_wrapper(ptr %310, ptr noundef nonnull align 8 dereferenceable(8) %.328)
  call void %327(ptr nonnull %.327, { ptr, i160 } %324) #34
  %328 = call ptr @bump_malloc(i64 noundef 28)
  store <27 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 69, i8 120, i8 112, i8 101, i8 99, i8 116, i8 101, i8 100, i8 32, i8 117, i8 110, i8 105, i8 113, i8 117, i8 101, i8 32, i8 115, i8 105, i8 122, i8 101, i8 58, i8 32>, ptr %328, align 32
  store ptr @String, ptr %31, align 8
  %329 = call { i64, i64 } @size_wrapper(ptr %274, ptr noundef nonnull align 8 dereferenceable(8) %31)
  %330 = extractvalue { i64, i64 } %329, 0
  %331 = call ptr @bump_malloc(i64 %330)
  %332 = insertvalue { ptr } undef, ptr %328, 0
  %333 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %331, 1
  %334 = insertvalue { ptr, ptr, ptr, i32 } %333, ptr undef, 2
  %335 = insertvalue { ptr, ptr, ptr, i32 } %334, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %32, align 8
  %336 = getelementptr inbounds i8, ptr %32, i64 8
  store ptr @_parameterization_i32, ptr %336, align 8
  %337 = getelementptr inbounds i8, ptr %32, i64 16
  store ptr @_parameterization_i32, ptr %337, align 8
  %338 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %32)
  %339 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %33, align 8
  %340 = getelementptr inbounds i8, ptr %33, i64 8
  store ptr @i32_typ, ptr %340, align 8
  %341 = getelementptr inbounds i8, ptr %33, i64 16
  store ptr @i32_typ, ptr %341, align 8
  %342 = call ptr @behavior_wrapper(ptr %286, { ptr, ptr, ptr, i32 } %335, ptr noundef nonnull align 8 dereferenceable(24) %33)
  call void %342({ ptr, ptr, ptr, i32 } %335, { ptr, ptr, ptr, i32 } %335, ptr nonnull %32, { ptr } %332, i32 27, i32 28) #34
  %343 = ptrtoint ptr %331 to i64
  %.sroa.3108.8.insert.ext = zext i64 %343 to i160
  %.sroa.3108.8.insert.insert = or disjoint i160 %.sroa.3108.8.insert.ext, 3402823669209384634633746074317682114560
  %344 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3108.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %34, align 8
  %345 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %34)
  %346 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %35, align 8
  %347 = call ptr @class_behavior_wrapper(ptr %310, ptr noundef nonnull align 8 dereferenceable(8) %35)
  call void %347(ptr nonnull %34, { ptr, i160 } %344) #34
  %.sroa.0103.0.insert.ext = zext i32 %206 to i160
  %348 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0103.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %36, align 8
  %349 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %36)
  %350 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %37, align 8
  %351 = call ptr @class_behavior_wrapper(ptr %310, ptr noundef nonnull align 8 dereferenceable(8) %37)
  call void %351(ptr nonnull %36, { ptr, i160 } %348) #34
  %352 = call ptr @bump_malloc(i64 noundef 2)
  store <1 x i8> <i8 41>, ptr %352, align 1
  store ptr @String, ptr %38, align 8
  %353 = call { i64, i64 } @size_wrapper(ptr %274, ptr noundef nonnull align 8 dereferenceable(8) %38)
  %354 = extractvalue { i64, i64 } %353, 0
  %355 = call ptr @bump_malloc(i64 %354)
  %356 = insertvalue { ptr } undef, ptr %352, 0
  %357 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %355, 1
  %358 = insertvalue { ptr, ptr, ptr, i32 } %357, ptr undef, 2
  %359 = insertvalue { ptr, ptr, ptr, i32 } %358, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %39, align 8
  %360 = getelementptr inbounds i8, ptr %39, i64 8
  store ptr @_parameterization_i32, ptr %360, align 8
  %361 = getelementptr inbounds i8, ptr %39, i64 16
  store ptr @_parameterization_i32, ptr %361, align 8
  %362 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %39)
  %363 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %40, align 8
  %364 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr @i32_typ, ptr %364, align 8
  %365 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr @i32_typ, ptr %365, align 8
  %366 = call ptr @behavior_wrapper(ptr %286, { ptr, ptr, ptr, i32 } %359, ptr noundef nonnull align 8 dereferenceable(24) %40)
  call void %366({ ptr, ptr, ptr, i32 } %359, { ptr, ptr, ptr, i32 } %359, ptr nonnull %39, { ptr } %356, i32 1, i32 2) #34
  %367 = ptrtoint ptr %355 to i64
  %.sroa.3.8.insert.ext = zext i64 %367 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %368 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %41, align 8
  %369 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %41)
  %370 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %42, align 8
  %371 = call ptr @class_behavior_wrapper(ptr %310, ptr noundef nonnull align 8 dereferenceable(8) %42)
  call void %371(ptr nonnull %41, { ptr, i160 } %368) #34
  ret void
}

define void @benchmark_get_sequential_hit(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [2 x ptr], align 8
  %3 = alloca { ptr, ptr }, align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca [3 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr }, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca [3 x ptr], align 8
  %18 = alloca { ptr, ptr, ptr }, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr }, align 8
  %21 = alloca [1 x ptr], align 8
  %22 = alloca [3 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr }, align 8
  %24 = alloca [1 x ptr], align 8
  %25 = alloca { ptr }, align 8
  %26 = alloca [1 x ptr], align 8
  %27 = alloca [3 x ptr], align 8
  %28 = alloca { ptr, ptr, ptr }, align 8
  %29 = alloca [1 x ptr], align 8
  %30 = alloca { ptr }, align 8
  %31 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr @_parameterization_i32, ptr %32, align 8
  %33 = getelementptr inbounds i8, ptr %31, i64 16
  store ptr @_parameterization_i32, ptr %33, align 8
  %34 = getelementptr inbounds i8, ptr %31, i64 24
  store ptr @_parameterization_Pairi32._i32, ptr %34, align 8
  %35 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 48), align 8
  %36 = call { i64, i64 } @size_wrapper(ptr %35, ptr noundef nonnull align 8 dereferenceable(32) %31)
  %37 = extractvalue { i64, i64 } %36, 0
  %38 = call ptr @bump_malloc(i64 %37)
  store ptr @_parameterization_i32, ptr %38, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  store ptr @_parameterization_i32, ptr %39, align 8
  %40 = getelementptr i8, ptr %38, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %38)
  %42 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %42)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %42, ptr noalias nofree noundef nonnull readnone @smrnvaptdf, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %43 = call ptr @adjust_trampoline(ptr %42)
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %42)
  %45 = insertvalue { ptr } undef, ptr %43, 0
  %46 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %46)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %46, ptr noalias nofree noundef nonnull readnone @lgghrnjoik, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %47 = call ptr @adjust_trampoline(ptr %46)
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %46)
  %49 = insertvalue { ptr } undef, ptr %47, 0
  %50 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %38, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr undef, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 10, 3
  %53 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %54, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %53)
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %57 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 160), align 8
  %58 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr @function_typ, ptr %59, align 8
  %60 = call ptr @behavior_wrapper(ptr %57, { ptr, ptr, ptr, i32 } %52, ptr noundef nonnull align 8 dereferenceable(16) %58)
  call void %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull %53, { ptr } %45, { ptr } %49) #34
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %61, align 8
  %62 = getelementptr inbounds i8, ptr %61, i64 8
  store ptr %38, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %61, i64 16
  %64 = getelementptr inbounds i8, ptr %61, i64 24
  store i32 10, ptr %64, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %61, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %65 = load ptr, ptr %61, align 8
  %66 = load ptr, ptr %62, align 8
  %67 = load ptr, ptr %63, align 8
  %68 = load i32, ptr %64, align 8
  %69 = icmp sgt i32 %0, 0
  br i1 %69, label %._crit_edge.lr.ph, label %._crit_edge1._crit_edge

._crit_edge.lr.ph:                                ; preds = %1
  %invariant.gep = getelementptr i8, ptr %65, i64 168
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %66, 1
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %67, 2
  %73 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %68, 3
  %74 = getelementptr inbounds i8, ptr %2, i64 8
  %75 = sext i32 %68 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %75
  %76 = getelementptr inbounds i8, ptr %3, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge, %._crit_edge.lr.ph
  %.0160 = phi i32 [ 0, %._crit_edge.lr.ph ], [ %77, %._crit_edge ]
  %.0139159 = phi i64 [ 0, %._crit_edge.lr.ph ], [ %85, %._crit_edge ]
  %77 = add nuw nsw i32 %.0160, 1
  %.sroa.0133.0.insert.ext = zext nneg i32 %.0160 to i160
  %78 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0133.0.insert.ext, 1
  %.sroa.0130.0.insert.ext = zext nneg i32 %77 to i160
  %79 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0130.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %2, align 8
  store ptr @_parameterization_i32, ptr %74, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %2)
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %65)
  %82 = load ptr, ptr %gep, align 8
  store ptr @i32_typ, ptr %3, align 8
  store ptr @i32_typ, ptr %76, align 8
  %83 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %73, ptr noundef nonnull align 8 dereferenceable(16) %3)
  call void %83({ ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %73, ptr nonnull %2, { ptr, i160 } %78, { ptr, i160 } %79) #34
  %84 = zext nneg i32 %77 to i64
  %85 = add i64 %.0139159, %84
  %86 = icmp slt i32 %77, %0
  br i1 %86, label %._crit_edge, label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge, %1
  %.0139.lcssa = phi i64 [ 0, %1 ], [ %85, %._crit_edge ]
  %87 = call i64 @clock()
  %.pre = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %.pre169 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %.pre170 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  br i1 %69, label %.lr.ph, label %._crit_edge4

.lr.ph:                                           ; preds = %._crit_edge1._crit_edge
  %invariant.gep161 = getelementptr i8, ptr %65, i64 184
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %89 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %66, 1
  %90 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %67, 2
  %91 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %68, 3
  %92 = sext i32 %68 to i64
  %gep162 = getelementptr ptr, ptr %invariant.gep161, i64 %92
  %93 = getelementptr inbounds i8, ptr %7, i64 8
  %94 = getelementptr inbounds i8, ptr %7, i64 16
  %95 = getelementptr inbounds i8, ptr %8, i64 8
  %96 = getelementptr inbounds i8, ptr %8, i64 16
  br label %97

97:                                               ; preds = %._crit_edge2, %.lr.ph
  %.2165 = phi i32 [ 0, %.lr.ph ], [ %130, %._crit_edge2 ]
  %.0141164 = phi i64 [ 0, %.lr.ph ], [ %.1142, %._crit_edge2 ]
  %.0144163 = phi i1 [ true, %.lr.ph ], [ %.1145, %._crit_edge2 ]
  %.sroa.0117.0.insert.ext = zext nneg i32 %.2165 to i160
  %98 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0117.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %4, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %4)
  %100 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %65)
  %101 = load ptr, ptr %gep162, align 8
  store ptr @i32_typ, ptr %5, align 8
  %102 = call ptr @behavior_wrapper(ptr %101, { ptr, ptr, ptr, i32 } %91, ptr noundef nonnull align 8 dereferenceable(8) %5)
  %103 = call { ptr, i160 } %102({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr nonnull %4, { ptr, i160 } %98) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %103, 0
  %104 = icmp ne ptr %.fca.0.extract, @nil_typ
  %105 = icmp ne ptr %.fca.0.extract, null
  %.not150 = and i1 %104, %105
  br i1 %.not150, label %106, label %109

106:                                              ; preds = %97
  %.fca.1.extract = extractvalue { ptr, i160 } %103, 1
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %107 = sext i32 %.sroa.2.8.extract.trunc to i64
  %108 = add i64 %.0141164, %107
  br label %._crit_edge2

109:                                              ; preds = %97
  %110 = call ptr @bump_malloc(i64 noundef 56)
  %111 = load <55 x i8>, ptr @rontd_Error_Nil_returned_during_sequential_hit_test_for_key_, align 64
  store <55 x i8> %111, ptr %110, align 64
  store ptr @String, ptr %6, align 8
  %112 = call { i64, i64 } @size_wrapper(ptr %.pre, ptr noundef nonnull align 8 dereferenceable(8) %6)
  %113 = extractvalue { i64, i64 } %112, 0
  %114 = call ptr @bump_malloc(i64 %113)
  %115 = insertvalue { ptr } undef, ptr %110, 0
  %116 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %114, 1
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr undef, 2
  %118 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %7, align 8
  store ptr @_parameterization_i32, ptr %93, align 8
  store ptr @_parameterization_i32, ptr %94, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %7)
  %120 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %8, align 8
  store ptr @i32_typ, ptr %95, align 8
  store ptr @i32_typ, ptr %96, align 8
  %121 = call ptr @behavior_wrapper(ptr %.pre169, { ptr, ptr, ptr, i32 } %118, ptr noundef nonnull align 8 dereferenceable(24) %8)
  call void %121({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr nonnull %7, { ptr } %115, i32 55, i32 56) #34
  %122 = ptrtoint ptr %114 to i64
  %.sroa.394.8.insert.ext = zext i64 %122 to i160
  %.sroa.394.8.insert.insert = or disjoint i160 %.sroa.394.8.insert.ext, 3402823669209384634633746074317682114560
  %123 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.394.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %9, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %9)
  %125 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %10, align 8
  %126 = call ptr @class_behavior_wrapper(ptr %.pre170, ptr noundef nonnull align 8 dereferenceable(8) %10)
  call void %126(ptr nonnull %9, { ptr, i160 } %123) #34
  store ptr @_parameterization_i32, ptr %11, align 8
  %127 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %11)
  %128 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %12, align 8
  %129 = call ptr @class_behavior_wrapper(ptr %.pre170, ptr noundef nonnull align 8 dereferenceable(8) %12)
  call void %129(ptr nonnull %11, { ptr, i160 } %98) #34
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %109, %106
  %.1145 = phi i1 [ %.0144163, %106 ], [ false, %109 ]
  %.1142 = phi i64 [ %108, %106 ], [ %.0141164, %109 ]
  %130 = add nuw nsw i32 %.2165, 1
  %131 = icmp slt i32 %130, %0
  br i1 %131, label %97, label %._crit_edge4

._crit_edge4:                                     ; preds = %._crit_edge2, %._crit_edge1._crit_edge
  %.0144.lcssa = phi i1 [ true, %._crit_edge1._crit_edge ], [ %.1145, %._crit_edge2 ]
  %.0141.lcssa = phi i64 [ 0, %._crit_edge1._crit_edge ], [ %.1142, %._crit_edge2 ]
  %132 = call i64 @clock()
  %.not = icmp eq i64 %.0141.lcssa, %.0139.lcssa
  %spec.select = select i1 %.not, i1 %.0144.lcssa, i1 false
  %133 = call ptr @bump_malloc(i64 noundef 19)
  store <18 x i8> <i8 71, i8 101, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108, i8 32, i8 72, i8 105, i8 116>, ptr %133, align 32
  store ptr @String, ptr %13, align 8
  %134 = call { i64, i64 } @size_wrapper(ptr %.pre, ptr noundef nonnull align 8 dereferenceable(8) %13)
  %135 = extractvalue { i64, i64 } %134, 0
  %136 = call ptr @bump_malloc(i64 %135)
  %137 = insertvalue { ptr } undef, ptr %133, 0
  %138 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %136, 1
  %139 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr undef, 2
  %140 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %14, align 8
  %141 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr @_parameterization_i32, ptr %141, align 8
  %142 = getelementptr inbounds i8, ptr %14, i64 16
  store ptr @_parameterization_i32, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %14)
  %144 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %15, align 8
  %145 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @i32_typ, ptr %145, align 8
  %146 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr @i32_typ, ptr %146, align 8
  %147 = call ptr @behavior_wrapper(ptr %.pre169, { ptr, ptr, ptr, i32 } %140, ptr noundef nonnull align 8 dereferenceable(24) %15)
  call void %147({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr nonnull %14, { ptr } %137, i32 18, i32 19) #34
  %148 = sub i64 %132, %87
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %140, i32 %0, i64 %148)
  %149 = call ptr @bump_malloc(i64 noundef 19)
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %149, align 32
  store ptr @String, ptr %16, align 8
  %150 = call { i64, i64 } @size_wrapper(ptr %.pre, ptr noundef nonnull align 8 dereferenceable(8) %16)
  %151 = extractvalue { i64, i64 } %150, 0
  %152 = call ptr @bump_malloc(i64 %151)
  %153 = insertvalue { ptr } undef, ptr %149, 0
  %154 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %152, 1
  %155 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr undef, 2
  %156 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %157 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %157, align 8
  %158 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %158, align 8
  %159 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %17)
  %160 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %18, align 8
  %161 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @i32_typ, ptr %161, align 8
  %162 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @i32_typ, ptr %162, align 8
  %163 = call ptr @behavior_wrapper(ptr %.pre169, { ptr, ptr, ptr, i32 } %156, ptr noundef nonnull align 8 dereferenceable(24) %18)
  call void %163({ ptr, ptr, ptr, i32 } %156, { ptr, ptr, ptr, i32 } %156, ptr nonnull %17, { ptr } %153, i32 18, i32 19) #34
  %164 = ptrtoint ptr %152 to i64
  %.sroa.358.8.insert.ext = zext i64 %164 to i160
  %.sroa.358.8.insert.insert = or disjoint i160 %.sroa.358.8.insert.ext, 3402823669209384634633746074317682114560
  %165 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.358.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %19, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %19)
  %167 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %20, align 8
  %168 = call ptr @class_behavior_wrapper(ptr %.pre170, ptr noundef nonnull align 8 dereferenceable(8) %20)
  call void %168(ptr nonnull %19, { ptr, i160 } %165) #34
  %169 = call ptr @bump_malloc(i64 noundef 5)
  %170 = insertvalue { ptr } undef, ptr %169, 0
  %. = select i1 %spec.select, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.204 = select i1 %spec.select, ptr %21, ptr %26
  %.205 = select i1 %spec.select, ptr %22, ptr %27
  %.206 = select i1 %spec.select, ptr %23, ptr %28
  %.207 = select i1 %spec.select, ptr %24, ptr %29
  %.208 = select i1 %spec.select, ptr %25, ptr %30
  store <4 x i8> %., ptr %169, align 4
  store ptr @String, ptr %.204, align 8
  %171 = call { i64, i64 } @size_wrapper(ptr %.pre, ptr noundef nonnull align 8 dereferenceable(8) %.204)
  %172 = extractvalue { i64, i64 } %171, 0
  %173 = call ptr @bump_malloc(i64 %172)
  %174 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %173, 1
  %175 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr undef, 2
  %176 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %.205, align 8
  %.205.sroa.sel.v = select i1 %spec.select, ptr %22, ptr %27
  %.205.sroa.sel = getelementptr inbounds i8, ptr %.205.sroa.sel.v, i64 8
  store ptr @_parameterization_i32, ptr %.205.sroa.sel, align 8
  %.205.sroa.sel217.v = select i1 %spec.select, ptr %22, ptr %27
  %.205.sroa.sel217 = getelementptr inbounds i8, ptr %.205.sroa.sel217.v, i64 16
  store ptr @_parameterization_i32, ptr %.205.sroa.sel217, align 8
  %177 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %.205)
  %178 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %.206, align 8
  %.206.sroa.sel.v = select i1 %spec.select, ptr %23, ptr %28
  %.206.sroa.sel = getelementptr inbounds i8, ptr %.206.sroa.sel.v, i64 8
  store ptr @i32_typ, ptr %.206.sroa.sel, align 8
  %.206.sroa.sel212.v = select i1 %spec.select, ptr %23, ptr %28
  %.206.sroa.sel212 = getelementptr inbounds i8, ptr %.206.sroa.sel212.v, i64 16
  store ptr @i32_typ, ptr %.206.sroa.sel212, align 8
  %179 = call ptr @behavior_wrapper(ptr %.pre169, { ptr, ptr, ptr, i32 } %176, ptr noundef nonnull align 8 dereferenceable(24) %.206)
  call void %179({ ptr, ptr, ptr, i32 } %176, { ptr, ptr, ptr, i32 } %176, ptr nonnull %.205, { ptr } %170, i32 4, i32 5) #34
  %180 = ptrtoint ptr %173 to i64
  %.sroa.3.8.insert.ext = zext i64 %180 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %181 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %.207, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %.207)
  %183 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %.208, align 8
  %184 = call ptr @class_behavior_wrapper(ptr %.pre170, ptr noundef nonnull align 8 dereferenceable(8) %.208)
  call void %184(ptr nonnull %.207, { ptr, i160 } %181) #34
  ret void
}

define void @benchmark_get_random_hit(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [2 x ptr], align 8
  %6 = alloca { ptr, ptr }, align 8
  %7 = alloca [2 x ptr], align 8
  %8 = alloca { ptr, ptr }, align 8
  %.sroa.0224.sroa.0 = alloca i8, align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca { ptr }, align 8
  %18 = alloca [1 x ptr], align 8
  %19 = alloca [3 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  %21 = alloca [1 x ptr], align 8
  %22 = alloca { ptr }, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = alloca { ptr }, align 8
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca [3 x ptr], align 8
  %29 = alloca { ptr, ptr, ptr }, align 8
  %30 = alloca [1 x ptr], align 8
  %31 = alloca { ptr }, align 8
  %32 = alloca [1 x ptr], align 8
  %33 = alloca { ptr }, align 8
  %34 = alloca [1 x ptr], align 8
  %35 = alloca [3 x ptr], align 8
  %36 = alloca { ptr, ptr, ptr }, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca [3 x ptr], align 8
  %39 = alloca { ptr, ptr, ptr }, align 8
  %40 = alloca [1 x ptr], align 8
  %41 = alloca { ptr }, align 8
  %42 = alloca [1 x ptr], align 8
  %43 = alloca [3 x ptr], align 8
  %44 = alloca { ptr, ptr, ptr }, align 8
  %45 = alloca [1 x ptr], align 8
  %46 = alloca { ptr }, align 8
  %47 = alloca [1 x ptr], align 8
  %48 = alloca [3 x ptr], align 8
  %49 = alloca { ptr, ptr, ptr }, align 8
  %50 = alloca [1 x ptr], align 8
  %51 = alloca { ptr }, align 8
  %52 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %52, align 8
  %53 = getelementptr inbounds i8, ptr %52, i64 8
  store ptr @_parameterization_i32, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %52, i64 16
  store ptr @_parameterization_i32, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %52, i64 24
  store ptr @_parameterization_Pairi32._i32, ptr %55, align 8
  %56 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 48), align 8
  %57 = call { i64, i64 } @size_wrapper(ptr %56, ptr noundef nonnull align 8 dereferenceable(32) %52)
  %58 = extractvalue { i64, i64 } %57, 0
  %59 = call ptr @bump_malloc(i64 %58)
  store ptr @_parameterization_i32, ptr %59, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  store ptr @_parameterization_i32, ptr %60, align 8
  %61 = getelementptr i8, ptr %59, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %61, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %59)
  %63 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %63)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %63, ptr noalias nofree noundef nonnull readnone @pvvozowbic, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %64 = call ptr @adjust_trampoline(ptr %63)
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %63)
  %66 = insertvalue { ptr } undef, ptr %64, 0
  %67 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %67)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %67, ptr noalias nofree noundef nonnull readnone @hzrglopvso, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %68 = call ptr @adjust_trampoline(ptr %67)
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %67)
  %70 = insertvalue { ptr } undef, ptr %68, 0
  %71 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %59, 1
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr undef, 2
  %73 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 10, 3
  %74 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %74, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %74)
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %78 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 160), align 8
  %79 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr @function_typ, ptr %80, align 8
  %81 = call ptr @behavior_wrapper(ptr %78, { ptr, ptr, ptr, i32 } %73, ptr noundef nonnull align 8 dereferenceable(16) %79)
  call void %81({ ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %73, ptr nonnull %74, { ptr } %66, { ptr } %70) #34
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %82, i64 8
  store ptr %59, ptr %83, align 8
  %84 = getelementptr inbounds i8, ptr %82, i64 16
  %85 = getelementptr inbounds i8, ptr %82, i64 24
  store i32 10, ptr %85, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %82, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %86 = load ptr, ptr %82, align 8
  %87 = load ptr, ptr %83, align 8
  %88 = load ptr, ptr %84, align 8
  %89 = load i32, ptr %85, align 8
  %90 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %90, align 8
  %91 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_PRNG, ptr noundef nonnull align 8 dereferenceable(8) %90)
  %92 = extractvalue { i64, i64 } %91, 0
  %93 = call ptr @bump_malloc(i64 %92)
  %94 = insertvalue { ptr, ptr, ptr, i32 } { ptr @PRNG, ptr undef, ptr undef, i32 undef }, ptr %93, 1
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr undef, 2
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 10, 3
  %97 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %97)
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG)
  %100 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %100, align 8
  %101 = call ptr @behavior_wrapper(ptr noundef nonnull @PRNG_B_init_initial_seedi32, { ptr, ptr, ptr, i32 } %96, ptr noundef nonnull align 8 dereferenceable(8) %100)
  call void %101({ ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %96, ptr nonnull %97, i32 456) #34
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @PRNG, ptr %102, align 8
  %103 = getelementptr inbounds i8, ptr %102, i64 8
  store ptr %93, ptr %103, align 8
  %104 = getelementptr inbounds i8, ptr %102, i64 16
  %105 = getelementptr inbounds i8, ptr %102, i64 24
  store i32 10, ptr %105, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %102, ptr noundef nonnull align 16 dereferenceable(120) @PRNG)
  %106 = load ptr, ptr %102, align 8
  %107 = load ptr, ptr %103, align 8
  %108 = load ptr, ptr %104, align 8
  %109 = load i32, ptr %105, align 8
  %110 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr @_parameterization_i32, ptr %111, align 8
  %112 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 48), align 8
  %113 = call { i64, i64 } @size_wrapper(ptr %112, ptr noundef nonnull align 8 dereferenceable(16) %110)
  %114 = extractvalue { i64, i64 } %113, 0
  %115 = call ptr @bump_malloc(i64 %114)
  store ptr @_parameterization_i32, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %115)
  %117 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %115, 1
  %118 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr undef, 2
  %119 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 10, 3
  %120 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %120)
  %122 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 dereferenceable(720) @Array)
  %123 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 128), align 8
  %124 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %124, align 8
  %125 = call ptr @behavior_wrapper(ptr %123, { ptr, ptr, ptr, i32 } %119, ptr noundef nonnull align 8 dereferenceable(8) %124)
  call void %125({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr nonnull %120, i32 %0) #34
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Array, ptr %126, align 8
  %127 = getelementptr inbounds i8, ptr %126, i64 8
  store ptr %115, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %126, i64 16
  %129 = getelementptr inbounds i8, ptr %126, i64 24
  store i32 10, ptr %129, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %126, ptr noundef nonnull align 8 dereferenceable(720) @Array)
  %130 = load ptr, ptr %126, align 8
  %131 = load ptr, ptr %127, align 8
  %132 = load ptr, ptr %128, align 8
  %133 = load i32, ptr %129, align 8
  %134 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %134, align 8
  %135 = getelementptr inbounds i8, ptr %134, i64 8
  store ptr @_parameterization_i32, ptr %135, align 8
  %136 = getelementptr inbounds i8, ptr %134, i64 16
  store ptr @_parameterization_i1, ptr %136, align 8
  %137 = getelementptr inbounds i8, ptr %134, i64 24
  store ptr @_parameterization_Pairi32._i1, ptr %137, align 8
  %138 = call { i64, i64 } @size_wrapper(ptr %56, ptr noundef nonnull align 8 dereferenceable(32) %134)
  %139 = extractvalue { i64, i64 } %138, 0
  %140 = call ptr @bump_malloc(i64 %139)
  store ptr @_parameterization_i32, ptr %140, align 8
  %141 = getelementptr i8, ptr %140, i64 8
  store ptr @_parameterization_i1, ptr %141, align 8
  %142 = getelementptr i8, ptr %140, i64 16
  store ptr @_parameterization_Pairi32._i1, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %140)
  %144 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %144)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %144, ptr noalias nofree noundef nonnull readnone @fodfimipdb, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %145 = call ptr @adjust_trampoline(ptr %144)
  %146 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %144)
  %147 = insertvalue { ptr } undef, ptr %145, 0
  %148 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %148)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %148, ptr noalias nofree noundef nonnull readnone @gfnbapjmaz, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %149 = call ptr @adjust_trampoline(ptr %148)
  %150 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %148)
  %151 = insertvalue { ptr } undef, ptr %149, 0
  %152 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %140, 1
  %153 = insertvalue { ptr, ptr, ptr, i32 } %152, ptr undef, 2
  %154 = insertvalue { ptr, ptr, ptr, i32 } %153, i32 10, 3
  %155 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %155, align 8
  %156 = getelementptr inbounds i8, ptr %155, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %156, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %155)
  %158 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %159 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %159, align 8
  %160 = getelementptr inbounds i8, ptr %159, i64 8
  store ptr @function_typ, ptr %160, align 8
  %161 = call ptr @behavior_wrapper(ptr %78, { ptr, ptr, ptr, i32 } %154, ptr noundef nonnull align 8 dereferenceable(16) %159)
  call void %161({ ptr, ptr, ptr, i32 } %154, { ptr, ptr, ptr, i32 } %154, ptr nonnull %155, { ptr } %147, { ptr } %151) #34
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %162, align 8
  %163 = getelementptr inbounds i8, ptr %162, i64 8
  store ptr %140, ptr %163, align 8
  %164 = getelementptr inbounds i8, ptr %162, i64 24
  store i32 10, ptr %164, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %162, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %165 = load ptr, ptr %162, align 8
  %166 = mul i32 %0, 10
  %167 = icmp sgt i32 %0, 0
  %168 = icmp sgt i32 %166, 0
  %spec.select297 = and i1 %167, %168
  br i1 %spec.select297, label %.lr.ph, label %._crit_edge3._crit_edge

.lr.ph:                                           ; preds = %1
  %invariant.gep295 = getelementptr i8, ptr %130, i64 144
  %invariant.gep293 = getelementptr i8, ptr %86, i64 168
  %invariant.gep = getelementptr i8, ptr %106, i64 16
  %169 = load i32, ptr %164, align 8
  %170 = getelementptr inbounds i8, ptr %162, i64 16
  %171 = load ptr, ptr %170, align 8
  %172 = load ptr, ptr %163, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %106, 0
  %174 = insertvalue { ptr, ptr, ptr, i32 } %173, ptr %107, 1
  %175 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %108, 2
  %176 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 %109, 3
  %177 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %178 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %106)
  %179 = sext i32 %109 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %179
  %180 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %165, 0
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, ptr %172, 1
  %182 = insertvalue { ptr, ptr, ptr, i32 } %181, ptr %171, 2
  %183 = insertvalue { ptr, ptr, ptr, i32 } %182, i32 %169, 3
  %184 = sext i32 %169 to i64
  %185 = getelementptr ptr, ptr %165, i64 %184
  %186 = getelementptr i8, ptr %185, i64 184
  %187 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %188 = insertvalue { ptr, ptr, ptr, i32 } %187, ptr %87, 1
  %189 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %88, 2
  %190 = insertvalue { ptr, ptr, ptr, i32 } %189, i32 %89, 3
  %191 = getelementptr inbounds i8, ptr %5, i64 8
  %192 = sext i32 %89 to i64
  %gep294 = getelementptr ptr, ptr %invariant.gep293, i64 %192
  %193 = getelementptr inbounds i8, ptr %6, i64 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %195 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %131, 1
  %196 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %132, 2
  %197 = insertvalue { ptr, ptr, ptr, i32 } %196, i32 %133, 3
  %198 = getelementptr inbounds i8, ptr %7, i64 8
  %199 = sext i32 %133 to i64
  %gep296 = getelementptr ptr, ptr %invariant.gep295, i64 %199
  %200 = getelementptr inbounds i8, ptr %8, i64 8
  %201 = getelementptr inbounds i8, ptr %9, i64 8
  %202 = getelementptr i8, ptr %185, i64 168
  %203 = getelementptr inbounds i8, ptr %10, i64 8
  br label %204

204:                                              ; preds = %._crit_edge1, %.lr.ph
  %.0264300 = phi i32 [ 0, %.lr.ph ], [ %236, %._crit_edge1 ]
  %.0266299 = phi i32 [ 0, %.lr.ph ], [ %.1267, %._crit_edge1 ]
  %.0275298 = phi i64 [ 0, %.lr.ph ], [ %.1276, %._crit_edge1 ]
  %205 = load ptr, ptr %gep, align 8
  %206 = call ptr @behavior_wrapper(ptr %205, { ptr, ptr, ptr, i32 } %176, ptr noundef nonnull align 8 %2)
  %207 = call i32 %206({ ptr, ptr, ptr, i32 } %176, { ptr, ptr, ptr, i32 } %176, ptr nonnull %2) #34
  %.sroa.0252.0.insert.ext = zext i32 %207 to i160
  %208 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0252.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %3, align 8
  %209 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %3)
  %210 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %165)
  %211 = load ptr, ptr %186, align 8
  store ptr @i32_typ, ptr %4, align 8
  %212 = call ptr @behavior_wrapper(ptr %211, { ptr, ptr, ptr, i32 } %183, ptr noundef nonnull align 8 dereferenceable(8) %4)
  %213 = call { ptr, i160 } %212({ ptr, ptr, ptr, i32 } %183, { ptr, ptr, ptr, i32 } %183, ptr nonnull %3, { ptr, i160 } %208) #34
  %.fca.0.extract244 = extractvalue { ptr, i160 } %213, 0
  %214 = icmp eq ptr %.fca.0.extract244, @nil_typ
  %215 = icmp eq ptr %.fca.0.extract244, null
  %216 = or i1 %214, %215
  br i1 %216, label %217, label %._crit_edge1

217:                                              ; preds = %204
  %218 = add i32 %207, 1
  %.sroa.0234.0.insert.ext = zext i32 %218 to i160
  %219 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0234.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %5, align 8
  store ptr @_parameterization_i32, ptr %191, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %5)
  %221 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %86)
  %222 = load ptr, ptr %gep294, align 8
  store ptr @i32_typ, ptr %6, align 8
  store ptr @i32_typ, ptr %193, align 8
  %223 = call ptr @behavior_wrapper(ptr %222, { ptr, ptr, ptr, i32 } %190, ptr noundef nonnull align 8 dereferenceable(16) %6)
  call void %223({ ptr, ptr, ptr, i32 } %190, { ptr, ptr, ptr, i32 } %190, ptr nonnull %5, { ptr, i160 } %208, { ptr, i160 } %219) #34
  store ptr @_parameterization_i32, ptr %7, align 8
  store ptr @_parameterization_i32, ptr %198, align 8
  %224 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %7)
  %225 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %130)
  %226 = load ptr, ptr %gep296, align 8
  store ptr @i32_typ, ptr %8, align 8
  store ptr @i32_typ, ptr %200, align 8
  %227 = call ptr @behavior_wrapper(ptr %226, { ptr, ptr, ptr, i32 } %197, ptr noundef nonnull align 8 dereferenceable(16) %8)
  call void %227({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr nonnull %7, i32 %.0266299, { ptr, i160 } %208) #34
  store i1 true, ptr %.sroa.0224.sroa.0, align 8
  %.sroa.0224.sroa.0.0..sroa.0224.sroa.0.0..sroa.0224.sroa.0.0..sroa.0224.sroa.0.0..sroa.0224.sroa.0.0..sroa.0224.0. = load i8, ptr %.sroa.0224.sroa.0, align 8
  %.sroa.0224.0.insert.ext = zext i8 %.sroa.0224.sroa.0.0..sroa.0224.sroa.0.0..sroa.0224.sroa.0.0..sroa.0224.sroa.0.0..sroa.0224.sroa.0.0..sroa.0224.0. to i160
  %228 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.0224.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %9, align 8
  store ptr @_parameterization_i1, ptr %201, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %9)
  %230 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %165)
  %231 = load ptr, ptr %202, align 8
  store ptr @i32_typ, ptr %10, align 8
  store ptr @bool_typ, ptr %203, align 8
  %232 = call ptr @behavior_wrapper(ptr %231, { ptr, ptr, ptr, i32 } %183, ptr noundef nonnull align 8 dereferenceable(16) %10)
  call void %232({ ptr, ptr, ptr, i32 } %183, { ptr, ptr, ptr, i32 } %183, ptr nonnull %9, { ptr, i160 } %208, { ptr, i160 } %228) #34
  %233 = sext i32 %218 to i64
  %234 = add i64 %.0275298, %233
  %235 = add nsw i32 %.0266299, 1
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %217, %204
  %.1276 = phi i64 [ %234, %217 ], [ %.0275298, %204 ]
  %.1267 = phi i32 [ %235, %217 ], [ %.0266299, %204 ]
  %236 = add nuw nsw i32 %.0264300, 1
  %237 = icmp slt i32 %.1267, %0
  %238 = icmp slt i32 %236, %166
  %spec.select = select i1 %237, i1 %238, i1 false
  br i1 %spec.select, label %204, label %._crit_edge3._crit_edge

._crit_edge3._crit_edge:                          ; preds = %._crit_edge1, %1
  %.0275.lcssa = phi i64 [ 0, %1 ], [ %.1276, %._crit_edge1 ]
  %.0266.lcssa = phi i32 [ 0, %1 ], [ %.1267, %._crit_edge1 ]
  %239 = icmp slt i32 %.0266.lcssa, %0
  br i1 %239, label %240, label %._crit_edge3._crit_edge.._crit_edge4_crit_edge

._crit_edge3._crit_edge.._crit_edge4_crit_edge:   ; preds = %._crit_edge3._crit_edge
  %.pre.pre = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %.pre312.pre = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %.pre313.pre = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  br label %._crit_edge4

240:                                              ; preds = %._crit_edge3._crit_edge
  %241 = call ptr @bump_malloc(i64 noundef 30)
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %241, align 32
  store ptr @String, ptr %11, align 8
  %242 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %243 = call { i64, i64 } @size_wrapper(ptr %242, ptr noundef nonnull align 8 dereferenceable(8) %11)
  %244 = extractvalue { i64, i64 } %243, 0
  %245 = call ptr @bump_malloc(i64 %244)
  %246 = insertvalue { ptr } undef, ptr %241, 0
  %247 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %245, 1
  %248 = insertvalue { ptr, ptr, ptr, i32 } %247, ptr undef, 2
  %249 = insertvalue { ptr, ptr, ptr, i32 } %248, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %12, align 8
  %250 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr @_parameterization_i32, ptr %250, align 8
  %251 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr @_parameterization_i32, ptr %251, align 8
  %252 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %12)
  %253 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %254 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %13, align 8
  %255 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr @i32_typ, ptr %255, align 8
  %256 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr @i32_typ, ptr %256, align 8
  %257 = call ptr @behavior_wrapper(ptr %254, { ptr, ptr, ptr, i32 } %249, ptr noundef nonnull align 8 dereferenceable(24) %13)
  call void %257({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr nonnull %12, { ptr } %246, i32 29, i32 30) #34
  %258 = ptrtoint ptr %245 to i64
  %.sroa.3207.8.insert.ext = zext i64 %258 to i160
  %.sroa.3207.8.insert.insert = or disjoint i160 %.sroa.3207.8.insert.ext, 3402823669209384634633746074317682114560
  %259 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3207.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %14, align 8
  %260 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %14)
  %261 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %262 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @String, ptr %15, align 8
  %263 = call ptr @class_behavior_wrapper(ptr %262, ptr noundef nonnull align 8 dereferenceable(8) %15)
  call void %263(ptr nonnull %14, { ptr, i160 } %259) #34
  %.sroa.0201.0.insert.ext = zext i32 %.0266.lcssa to i160
  %264 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0201.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %16, align 8
  %265 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %16)
  %266 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %17, align 8
  %267 = call ptr @class_behavior_wrapper(ptr %262, ptr noundef nonnull align 8 dereferenceable(8) %17)
  call void %267(ptr nonnull %16, { ptr, i160 } %264) #34
  %268 = call ptr @bump_malloc(i64 noundef 34)
  %269 = load <33 x i8>, ptr @ockpk__unique_keys_for_random_hit_test, align 64
  store <33 x i8> %269, ptr %268, align 64
  store ptr @String, ptr %18, align 8
  %270 = call { i64, i64 } @size_wrapper(ptr %242, ptr noundef nonnull align 8 dereferenceable(8) %18)
  %271 = extractvalue { i64, i64 } %270, 0
  %272 = call ptr @bump_malloc(i64 %271)
  %273 = insertvalue { ptr } undef, ptr %268, 0
  %274 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %272, 1
  %275 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr undef, 2
  %276 = insertvalue { ptr, ptr, ptr, i32 } %275, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %19, align 8
  %277 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr @_parameterization_i32, ptr %277, align 8
  %278 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr @_parameterization_i32, ptr %278, align 8
  %279 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %19)
  %280 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %20, align 8
  %281 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr @i32_typ, ptr %281, align 8
  %282 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr @i32_typ, ptr %282, align 8
  %283 = call ptr @behavior_wrapper(ptr %254, { ptr, ptr, ptr, i32 } %276, ptr noundef nonnull align 8 dereferenceable(24) %20)
  call void %283({ ptr, ptr, ptr, i32 } %276, { ptr, ptr, ptr, i32 } %276, ptr nonnull %19, { ptr } %273, i32 33, i32 34) #34
  %284 = ptrtoint ptr %272 to i64
  %.sroa.3191.8.insert.ext = zext i64 %284 to i160
  %.sroa.3191.8.insert.insert = or disjoint i160 %.sroa.3191.8.insert.ext, 3402823669209384634633746074317682114560
  %285 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3191.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %21, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %21)
  %287 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %22, align 8
  %288 = call ptr @class_behavior_wrapper(ptr %262, ptr noundef nonnull align 8 dereferenceable(8) %22)
  call void %288(ptr nonnull %21, { ptr, i160 } %285) #34
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %240, %._crit_edge3._crit_edge.._crit_edge4_crit_edge
  %.pre313 = phi ptr [ %262, %240 ], [ %.pre313.pre, %._crit_edge3._crit_edge.._crit_edge4_crit_edge ]
  %.pre312 = phi ptr [ %254, %240 ], [ %.pre312.pre, %._crit_edge3._crit_edge.._crit_edge4_crit_edge ]
  %.pre = phi ptr [ %242, %240 ], [ %.pre.pre, %._crit_edge3._crit_edge.._crit_edge4_crit_edge ]
  %.0274 = phi i32 [ %.0266.lcssa, %240 ], [ %0, %._crit_edge3._crit_edge.._crit_edge4_crit_edge ]
  %289 = call i64 @clock()
  %290 = icmp sgt i32 %.0274, 0
  br i1 %290, label %.lr.ph309, label %._crit_edge7

.lr.ph309:                                        ; preds = %._crit_edge4
  %invariant.gep304 = getelementptr i8, ptr %86, i64 184
  %invariant.gep302 = getelementptr i8, ptr %130, i64 136
  %291 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %292 = insertvalue { ptr, ptr, ptr, i32 } %291, ptr %131, 1
  %293 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %132, 2
  %294 = insertvalue { ptr, ptr, ptr, i32 } %293, i32 %133, 3
  %295 = sext i32 %133 to i64
  %gep303 = getelementptr ptr, ptr %invariant.gep302, i64 %295
  %296 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %297 = insertvalue { ptr, ptr, ptr, i32 } %296, ptr %87, 1
  %298 = insertvalue { ptr, ptr, ptr, i32 } %297, ptr %88, 2
  %299 = insertvalue { ptr, ptr, ptr, i32 } %298, i32 %89, 3
  %300 = sext i32 %89 to i64
  %gep305 = getelementptr ptr, ptr %invariant.gep304, i64 %300
  %301 = getelementptr inbounds i8, ptr %28, i64 8
  %302 = getelementptr inbounds i8, ptr %28, i64 16
  %303 = getelementptr inbounds i8, ptr %29, i64 8
  %304 = getelementptr inbounds i8, ptr %29, i64 16
  br label %305

305:                                              ; preds = %._crit_edge5, %.lr.ph309
  %.0263308 = phi i64 [ 0, %.lr.ph309 ], [ %.1, %._crit_edge5 ]
  %.0269307 = phi i1 [ true, %.lr.ph309 ], [ %.1270, %._crit_edge5 ]
  %.0272306 = phi i32 [ 0, %.lr.ph309 ], [ %343, %._crit_edge5 ]
  store ptr @_parameterization_i32, ptr %23, align 8
  %306 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %23)
  %307 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %130)
  %308 = load ptr, ptr %gep303, align 8
  store ptr @i32_typ, ptr %24, align 8
  %309 = call ptr @behavior_wrapper(ptr %308, { ptr, ptr, ptr, i32 } %294, ptr noundef nonnull align 8 dereferenceable(8) %24)
  %310 = call { ptr, i160 } %309({ ptr, ptr, ptr, i32 } %294, { ptr, ptr, ptr, i32 } %294, ptr nonnull %23, i32 %.0272306) #34
  %.fca.1.extract176 = extractvalue { ptr, i160 } %310, 1
  %.sroa.0171.0.insert.ext = and i160 %.fca.1.extract176, 4294967295
  %311 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0171.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %25, align 8
  %312 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %25)
  %313 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %86)
  %314 = load ptr, ptr %gep305, align 8
  store ptr @i32_typ, ptr %26, align 8
  %315 = call ptr @behavior_wrapper(ptr %314, { ptr, ptr, ptr, i32 } %299, ptr noundef nonnull align 8 dereferenceable(8) %26)
  %316 = call { ptr, i160 } %315({ ptr, ptr, ptr, i32 } %299, { ptr, ptr, ptr, i32 } %299, ptr nonnull %25, { ptr, i160 } %311) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %316, 0
  %317 = icmp ne ptr %.fca.0.extract, @nil_typ
  %318 = icmp ne ptr %.fca.0.extract, null
  %.not281 = and i1 %317, %318
  br i1 %.not281, label %319, label %322

319:                                              ; preds = %305
  %.fca.1.extract = extractvalue { ptr, i160 } %316, 1
  %.sroa.2.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %320 = sext i32 %.sroa.2.8.extract.trunc to i64
  %321 = add i64 %.0263308, %320
  br label %._crit_edge5

322:                                              ; preds = %305
  %323 = call ptr @bump_malloc(i64 noundef 52)
  %324 = load <51 x i8>, ptr @pornl_Error_Nil_returned_during_random_hit_test_for_key_, align 64
  store <51 x i8> %324, ptr %323, align 64
  store ptr @String, ptr %27, align 8
  %325 = call { i64, i64 } @size_wrapper(ptr %.pre, ptr noundef nonnull align 8 dereferenceable(8) %27)
  %326 = extractvalue { i64, i64 } %325, 0
  %327 = call ptr @bump_malloc(i64 %326)
  %328 = insertvalue { ptr } undef, ptr %323, 0
  %329 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %327, 1
  %330 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr undef, 2
  %331 = insertvalue { ptr, ptr, ptr, i32 } %330, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %28, align 8
  store ptr @_parameterization_i32, ptr %301, align 8
  store ptr @_parameterization_i32, ptr %302, align 8
  %332 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %28)
  %333 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %29, align 8
  store ptr @i32_typ, ptr %303, align 8
  store ptr @i32_typ, ptr %304, align 8
  %334 = call ptr @behavior_wrapper(ptr %.pre312, { ptr, ptr, ptr, i32 } %331, ptr noundef nonnull align 8 dereferenceable(24) %29)
  call void %334({ ptr, ptr, ptr, i32 } %331, { ptr, ptr, ptr, i32 } %331, ptr nonnull %28, { ptr } %328, i32 51, i32 52) #34
  %335 = ptrtoint ptr %327 to i64
  %.sroa.3148.8.insert.ext = zext i64 %335 to i160
  %.sroa.3148.8.insert.insert = or disjoint i160 %.sroa.3148.8.insert.ext, 3402823669209384634633746074317682114560
  %336 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3148.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %30, align 8
  %337 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %30)
  %338 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %31, align 8
  %339 = call ptr @class_behavior_wrapper(ptr %.pre313, ptr noundef nonnull align 8 dereferenceable(8) %31)
  call void %339(ptr nonnull %30, { ptr, i160 } %336) #34
  store ptr @_parameterization_i32, ptr %32, align 8
  %340 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %32)
  %341 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %33, align 8
  %342 = call ptr @class_behavior_wrapper(ptr %.pre313, ptr noundef nonnull align 8 dereferenceable(8) %33)
  call void %342(ptr nonnull %32, { ptr, i160 } %311) #34
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %322, %319
  %.1270 = phi i1 [ %.0269307, %319 ], [ false, %322 ]
  %.1 = phi i64 [ %321, %319 ], [ %.0263308, %322 ]
  %343 = add nuw nsw i32 %.0272306, 1
  %344 = icmp slt i32 %343, %.0274
  br i1 %344, label %305, label %._crit_edge7

._crit_edge7:                                     ; preds = %._crit_edge5, %._crit_edge4
  %.0269.lcssa = phi i1 [ true, %._crit_edge4 ], [ %.1270, %._crit_edge5 ]
  %.0263.lcssa = phi i64 [ 0, %._crit_edge4 ], [ %.1, %._crit_edge5 ]
  %345 = call i64 @clock()
  %.not = icmp eq i64 %.0263.lcssa, %.0275.lcssa
  %spec.select282 = select i1 %.not, i1 %.0269.lcssa, i1 false
  %346 = call ptr @bump_malloc(i64 noundef 15)
  store <14 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 72, i8 105, i8 116>, ptr %346, align 16
  store ptr @String, ptr %34, align 8
  %347 = call { i64, i64 } @size_wrapper(ptr %.pre, ptr noundef nonnull align 8 dereferenceable(8) %34)
  %348 = extractvalue { i64, i64 } %347, 0
  %349 = call ptr @bump_malloc(i64 %348)
  %350 = insertvalue { ptr } undef, ptr %346, 0
  %351 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %349, 1
  %352 = insertvalue { ptr, ptr, ptr, i32 } %351, ptr undef, 2
  %353 = insertvalue { ptr, ptr, ptr, i32 } %352, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %35, align 8
  %354 = getelementptr inbounds i8, ptr %35, i64 8
  store ptr @_parameterization_i32, ptr %354, align 8
  %355 = getelementptr inbounds i8, ptr %35, i64 16
  store ptr @_parameterization_i32, ptr %355, align 8
  %356 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %35)
  %357 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %36, align 8
  %358 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr @i32_typ, ptr %358, align 8
  %359 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr @i32_typ, ptr %359, align 8
  %360 = call ptr @behavior_wrapper(ptr %.pre312, { ptr, ptr, ptr, i32 } %353, ptr noundef nonnull align 8 dereferenceable(24) %36)
  call void %360({ ptr, ptr, ptr, i32 } %353, { ptr, ptr, ptr, i32 } %353, ptr nonnull %35, { ptr } %350, i32 14, i32 15) #34
  %361 = sub i64 %345, %289
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %353, i32 %.0274, i64 %361)
  %362 = call ptr @bump_malloc(i64 noundef 19)
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %362, align 32
  store ptr @String, ptr %37, align 8
  %363 = call { i64, i64 } @size_wrapper(ptr %.pre, ptr noundef nonnull align 8 dereferenceable(8) %37)
  %364 = extractvalue { i64, i64 } %363, 0
  %365 = call ptr @bump_malloc(i64 %364)
  %366 = insertvalue { ptr } undef, ptr %362, 0
  %367 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %365, 1
  %368 = insertvalue { ptr, ptr, ptr, i32 } %367, ptr undef, 2
  %369 = insertvalue { ptr, ptr, ptr, i32 } %368, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %38, align 8
  %370 = getelementptr inbounds i8, ptr %38, i64 8
  store ptr @_parameterization_i32, ptr %370, align 8
  %371 = getelementptr inbounds i8, ptr %38, i64 16
  store ptr @_parameterization_i32, ptr %371, align 8
  %372 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %38)
  %373 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %39, align 8
  %374 = getelementptr inbounds i8, ptr %39, i64 8
  store ptr @i32_typ, ptr %374, align 8
  %375 = getelementptr inbounds i8, ptr %39, i64 16
  store ptr @i32_typ, ptr %375, align 8
  %376 = call ptr @behavior_wrapper(ptr %.pre312, { ptr, ptr, ptr, i32 } %369, ptr noundef nonnull align 8 dereferenceable(24) %39)
  call void %376({ ptr, ptr, ptr, i32 } %369, { ptr, ptr, ptr, i32 } %369, ptr nonnull %38, { ptr } %366, i32 18, i32 19) #34
  %377 = ptrtoint ptr %365 to i64
  %.sroa.3112.8.insert.ext = zext i64 %377 to i160
  %.sroa.3112.8.insert.insert = or disjoint i160 %.sroa.3112.8.insert.ext, 3402823669209384634633746074317682114560
  %378 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3112.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %40, align 8
  %379 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %40)
  %380 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %41, align 8
  %381 = call ptr @class_behavior_wrapper(ptr %.pre313, ptr noundef nonnull align 8 dereferenceable(8) %41)
  call void %381(ptr nonnull %40, { ptr, i160 } %378) #34
  %382 = call ptr @bump_malloc(i64 noundef 5)
  %383 = insertvalue { ptr } undef, ptr %382, 0
  %. = select i1 %spec.select282, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.350 = select i1 %spec.select282, ptr %42, ptr %47
  %.351 = select i1 %spec.select282, ptr %43, ptr %48
  %.352 = select i1 %spec.select282, ptr %44, ptr %49
  %.353 = select i1 %spec.select282, ptr %45, ptr %50
  %.354 = select i1 %spec.select282, ptr %46, ptr %51
  store <4 x i8> %., ptr %382, align 4
  store ptr @String, ptr %.350, align 8
  %384 = call { i64, i64 } @size_wrapper(ptr %.pre, ptr noundef nonnull align 8 dereferenceable(8) %.350)
  %385 = extractvalue { i64, i64 } %384, 0
  %386 = call ptr @bump_malloc(i64 %385)
  %387 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %386, 1
  %388 = insertvalue { ptr, ptr, ptr, i32 } %387, ptr undef, 2
  %389 = insertvalue { ptr, ptr, ptr, i32 } %388, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %.351, align 8
  %.351.sroa.sel.v = select i1 %spec.select282, ptr %43, ptr %48
  %.351.sroa.sel = getelementptr inbounds i8, ptr %.351.sroa.sel.v, i64 8
  store ptr @_parameterization_i32, ptr %.351.sroa.sel, align 8
  %.351.sroa.sel363.v = select i1 %spec.select282, ptr %43, ptr %48
  %.351.sroa.sel363 = getelementptr inbounds i8, ptr %.351.sroa.sel363.v, i64 16
  store ptr @_parameterization_i32, ptr %.351.sroa.sel363, align 8
  %390 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %.351)
  %391 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %.352, align 8
  %.352.sroa.sel.v = select i1 %spec.select282, ptr %44, ptr %49
  %.352.sroa.sel = getelementptr inbounds i8, ptr %.352.sroa.sel.v, i64 8
  store ptr @i32_typ, ptr %.352.sroa.sel, align 8
  %.352.sroa.sel358.v = select i1 %spec.select282, ptr %44, ptr %49
  %.352.sroa.sel358 = getelementptr inbounds i8, ptr %.352.sroa.sel358.v, i64 16
  store ptr @i32_typ, ptr %.352.sroa.sel358, align 8
  %392 = call ptr @behavior_wrapper(ptr %.pre312, { ptr, ptr, ptr, i32 } %389, ptr noundef nonnull align 8 dereferenceable(24) %.352)
  call void %392({ ptr, ptr, ptr, i32 } %389, { ptr, ptr, ptr, i32 } %389, ptr nonnull %.351, { ptr } %383, i32 4, i32 5) #34
  %393 = ptrtoint ptr %386 to i64
  %.sroa.3.8.insert.ext = zext i64 %393 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %394 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %.353, align 8
  %395 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %.353)
  %396 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %.354, align 8
  %397 = call ptr @class_behavior_wrapper(ptr %.pre313, ptr noundef nonnull align 8 dereferenceable(8) %.354)
  call void %397(ptr nonnull %.353, { ptr, i160 } %394) #34
  ret void
}

define void @benchmark_get_random_miss(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [2 x ptr], align 8
  %6 = alloca { ptr, ptr }, align 8
  %.sroa.0323.sroa.0 = alloca i8, align 8
  %7 = alloca [2 x ptr], align 8
  %8 = alloca { ptr, ptr }, align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %15 = alloca [2 x ptr], align 8
  %16 = alloca { ptr, ptr }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca [3 x ptr], align 8
  %19 = alloca { ptr, ptr, ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %22 = alloca [1 x ptr], align 8
  %23 = alloca { ptr }, align 8
  %24 = alloca [1 x ptr], align 8
  %25 = alloca [3 x ptr], align 8
  %26 = alloca { ptr, ptr, ptr }, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca { ptr }, align 8
  %29 = alloca [1 x ptr], align 8
  %30 = alloca { ptr }, align 8
  %31 = alloca [1 x ptr], align 8
  %32 = alloca { ptr }, align 8
  %33 = alloca [1 x ptr], align 8
  %34 = alloca [3 x ptr], align 8
  %35 = alloca { ptr, ptr, ptr }, align 8
  %36 = alloca [1 x ptr], align 8
  %37 = alloca [3 x ptr], align 8
  %38 = alloca { ptr, ptr, ptr }, align 8
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr }, align 8
  %41 = alloca [1 x ptr], align 8
  %42 = alloca [3 x ptr], align 8
  %43 = alloca { ptr, ptr, ptr }, align 8
  %44 = alloca [1 x ptr], align 8
  %45 = alloca { ptr }, align 8
  %46 = alloca [1 x ptr], align 8
  %47 = alloca [3 x ptr], align 8
  %48 = alloca { ptr, ptr, ptr }, align 8
  %49 = alloca [1 x ptr], align 8
  %50 = alloca { ptr }, align 8
  %51 = alloca [1 x ptr], align 8
  %52 = alloca [3 x ptr], align 8
  %53 = alloca { ptr, ptr, ptr }, align 8
  %54 = alloca [1 x ptr], align 8
  %55 = alloca { ptr }, align 8
  %56 = alloca [1 x ptr], align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca [1 x ptr], align 8
  %59 = alloca [3 x ptr], align 8
  %60 = alloca { ptr, ptr, ptr }, align 8
  %61 = alloca [1 x ptr], align 8
  %62 = alloca { ptr }, align 8
  %63 = alloca [1 x ptr], align 8
  %64 = alloca { ptr }, align 8
  %65 = alloca [1 x ptr], align 8
  %66 = alloca [3 x ptr], align 8
  %67 = alloca { ptr, ptr, ptr }, align 8
  %68 = alloca [1 x ptr], align 8
  %69 = alloca { ptr }, align 8
  %70 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %70, align 8
  %71 = getelementptr inbounds i8, ptr %70, i64 8
  store ptr @_parameterization_i32, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %70, i64 16
  store ptr @_parameterization_i32, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %70, i64 24
  store ptr @_parameterization_Pairi32._i32, ptr %73, align 8
  %74 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 48), align 8
  %75 = call { i64, i64 } @size_wrapper(ptr %74, ptr noundef nonnull align 8 dereferenceable(32) %70)
  %76 = extractvalue { i64, i64 } %75, 0
  %77 = call ptr @bump_malloc(i64 %76)
  store ptr @_parameterization_i32, ptr %77, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  store ptr @_parameterization_i32, ptr %78, align 8
  %79 = getelementptr i8, ptr %77, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %79, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %77)
  %81 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %81)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %81, ptr noalias nofree noundef nonnull readnone @ltdiypmxmd, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %82 = call ptr @adjust_trampoline(ptr %81)
  %83 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %81)
  %84 = insertvalue { ptr } undef, ptr %82, 0
  %85 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %85)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %85, ptr noalias nofree noundef nonnull readnone @zoafnhguki, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %86 = call ptr @adjust_trampoline(ptr %85)
  %87 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %85)
  %88 = insertvalue { ptr } undef, ptr %86, 0
  %89 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %77, 1
  %90 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr undef, 2
  %91 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 10, 3
  %92 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %92, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %93, align 8
  %94 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %92)
  %95 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %96 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 160), align 8
  %97 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %97, i64 8
  store ptr @function_typ, ptr %98, align 8
  %99 = call ptr @behavior_wrapper(ptr %96, { ptr, ptr, ptr, i32 } %91, ptr noundef nonnull align 8 dereferenceable(16) %97)
  call void %99({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr nonnull %92, { ptr } %84, { ptr } %88) #34
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %100, i64 8
  store ptr %77, ptr %101, align 8
  %102 = getelementptr inbounds i8, ptr %100, i64 16
  %103 = getelementptr inbounds i8, ptr %100, i64 24
  store i32 10, ptr %103, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %100, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %104 = load ptr, ptr %100, align 8
  %105 = load ptr, ptr %101, align 8
  %106 = load ptr, ptr %102, align 8
  %107 = load i32, ptr %103, align 8
  %108 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %108, align 8
  %109 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_PRNG, ptr noundef nonnull align 8 dereferenceable(8) %108)
  %110 = extractvalue { i64, i64 } %109, 0
  %111 = call ptr @bump_malloc(i64 %110)
  %112 = insertvalue { ptr, ptr, ptr, i32 } { ptr @PRNG, ptr undef, ptr undef, i32 undef }, ptr %111, 1
  %113 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr undef, 2
  %114 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 10, 3
  %115 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %115, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %115)
  %117 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG)
  %118 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %118, align 8
  %119 = call ptr @behavior_wrapper(ptr noundef nonnull @PRNG_B_init_initial_seedi32, { ptr, ptr, ptr, i32 } %114, ptr noundef nonnull align 8 dereferenceable(8) %118)
  call void %119({ ptr, ptr, ptr, i32 } %114, { ptr, ptr, ptr, i32 } %114, ptr nonnull %115, i32 789) #34
  %120 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @PRNG, ptr %120, align 8
  %121 = getelementptr inbounds i8, ptr %120, i64 8
  store ptr %111, ptr %121, align 8
  %122 = getelementptr inbounds i8, ptr %120, i64 16
  %123 = getelementptr inbounds i8, ptr %120, i64 24
  store i32 10, ptr %123, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %120, ptr noundef nonnull align 16 dereferenceable(120) @PRNG)
  %124 = load ptr, ptr %120, align 8
  %125 = load ptr, ptr %121, align 8
  %126 = load ptr, ptr %122, align 8
  %127 = load i32, ptr %123, align 8
  %128 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %128, align 8
  %129 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_PRNG, ptr noundef nonnull align 8 dereferenceable(8) %128)
  %130 = extractvalue { i64, i64 } %129, 0
  %131 = call ptr @bump_malloc(i64 %130)
  %132 = insertvalue { ptr, ptr, ptr, i32 } { ptr @PRNG, ptr undef, ptr undef, i32 undef }, ptr %131, 1
  %133 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr undef, 2
  %134 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 10, 3
  %135 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %135, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %135)
  %137 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG)
  %138 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %138, align 8
  %139 = call ptr @behavior_wrapper(ptr noundef nonnull @PRNG_B_init_initial_seedi32, { ptr, ptr, ptr, i32 } %134, ptr noundef nonnull align 8 dereferenceable(8) %138)
  call void %139({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %135, i32 987) #34
  %140 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @PRNG, ptr %140, align 8
  %141 = getelementptr inbounds i8, ptr %140, i64 8
  store ptr %131, ptr %141, align 8
  %142 = getelementptr inbounds i8, ptr %140, i64 16
  %143 = getelementptr inbounds i8, ptr %140, i64 24
  store i32 10, ptr %143, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %140, ptr noundef nonnull align 16 dereferenceable(120) @PRNG)
  %144 = load ptr, ptr %140, align 8
  %145 = load ptr, ptr %141, align 8
  %146 = load ptr, ptr %142, align 8
  %147 = load i32, ptr %143, align 8
  %148 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %148, i64 8
  store ptr @_parameterization_i32, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %148, i64 16
  store ptr @_parameterization_i1, ptr %150, align 8
  %151 = getelementptr inbounds i8, ptr %148, i64 24
  store ptr @_parameterization_Pairi32._i1, ptr %151, align 8
  %152 = call { i64, i64 } @size_wrapper(ptr %74, ptr noundef nonnull align 8 dereferenceable(32) %148)
  %153 = extractvalue { i64, i64 } %152, 0
  %154 = call ptr @bump_malloc(i64 %153)
  store ptr @_parameterization_i32, ptr %154, align 8
  %155 = getelementptr i8, ptr %154, i64 8
  store ptr @_parameterization_i1, ptr %155, align 8
  %156 = getelementptr i8, ptr %154, i64 16
  store ptr @_parameterization_Pairi32._i1, ptr %156, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %154)
  %158 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %158)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %158, ptr noalias nofree noundef nonnull readnone @uklcoamgfk, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %159 = call ptr @adjust_trampoline(ptr %158)
  %160 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %158)
  %161 = insertvalue { ptr } undef, ptr %159, 0
  %162 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %162)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %162, ptr noalias nofree noundef nonnull readnone @vxbxfpzafx, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %163 = call ptr @adjust_trampoline(ptr %162)
  %164 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %162)
  %165 = insertvalue { ptr } undef, ptr %163, 0
  %166 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %154, 1
  %167 = insertvalue { ptr, ptr, ptr, i32 } %166, ptr undef, 2
  %168 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 10, 3
  %169 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %169, align 8
  %170 = getelementptr inbounds i8, ptr %169, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %170, align 8
  %171 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %169)
  %172 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %173 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %173, align 8
  %174 = getelementptr inbounds i8, ptr %173, i64 8
  store ptr @function_typ, ptr %174, align 8
  %175 = call ptr @behavior_wrapper(ptr %96, { ptr, ptr, ptr, i32 } %168, ptr noundef nonnull align 8 dereferenceable(16) %173)
  call void %175({ ptr, ptr, ptr, i32 } %168, { ptr, ptr, ptr, i32 } %168, ptr nonnull %169, { ptr } %161, { ptr } %165) #34
  %176 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %176, align 8
  %177 = getelementptr inbounds i8, ptr %176, i64 8
  store ptr %154, ptr %177, align 8
  %178 = getelementptr inbounds i8, ptr %176, i64 16
  %179 = getelementptr inbounds i8, ptr %176, i64 24
  store i32 10, ptr %179, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %176, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %180 = load ptr, ptr %176, align 8
  %181 = load ptr, ptr %177, align 8
  %182 = load ptr, ptr %178, align 8
  %183 = load i32, ptr %179, align 8
  %184 = mul i32 %0, 10
  %185 = icmp sgt i32 %0, 0
  %186 = icmp sgt i32 %184, 0
  %spec.select397 = and i1 %185, %186
  br i1 %spec.select397, label %.lr.ph, label %._crit_edge3._crit_edge

.lr.ph:                                           ; preds = %1
  %invariant.gep395 = getelementptr i8, ptr %104, i64 168
  %invariant.gep = getelementptr i8, ptr %124, i64 16
  %187 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %188 = insertvalue { ptr, ptr, ptr, i32 } %187, ptr %125, 1
  %189 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %126, 2
  %190 = insertvalue { ptr, ptr, ptr, i32 } %189, i32 %127, 3
  %191 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %192 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %124)
  %193 = sext i32 %127 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %193
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %195 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %181, 1
  %196 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %182, 2
  %197 = insertvalue { ptr, ptr, ptr, i32 } %196, i32 %183, 3
  %198 = sext i32 %183 to i64
  %199 = getelementptr ptr, ptr %180, i64 %198
  %200 = getelementptr i8, ptr %199, i64 184
  %201 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %104, 0
  %202 = insertvalue { ptr, ptr, ptr, i32 } %201, ptr %105, 1
  %203 = insertvalue { ptr, ptr, ptr, i32 } %202, ptr %106, 2
  %204 = insertvalue { ptr, ptr, ptr, i32 } %203, i32 %107, 3
  %205 = getelementptr inbounds i8, ptr %5, i64 8
  %206 = sext i32 %107 to i64
  %gep396 = getelementptr ptr, ptr %invariant.gep395, i64 %206
  %207 = getelementptr inbounds i8, ptr %6, i64 8
  %208 = getelementptr inbounds i8, ptr %7, i64 8
  %209 = getelementptr i8, ptr %199, i64 168
  %210 = getelementptr inbounds i8, ptr %8, i64 8
  br label %211

211:                                              ; preds = %._crit_edge1, %.lr.ph
  %.0358399 = phi i32 [ 0, %.lr.ph ], [ %237, %._crit_edge1 ]
  %.0361398 = phi i32 [ 0, %.lr.ph ], [ %.1362, %._crit_edge1 ]
  %212 = load ptr, ptr %gep, align 8
  %213 = call ptr @behavior_wrapper(ptr %212, { ptr, ptr, ptr, i32 } %190, ptr noundef nonnull align 8 %2)
  %214 = call i32 %213({ ptr, ptr, ptr, i32 } %190, { ptr, ptr, ptr, i32 } %190, ptr nonnull %2) #34
  %.sroa.0347.0.insert.ext = zext i32 %214 to i160
  %215 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0347.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %3, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %3)
  %217 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %180)
  %218 = load ptr, ptr %200, align 8
  store ptr @i32_typ, ptr %4, align 8
  %219 = call ptr @behavior_wrapper(ptr %218, { ptr, ptr, ptr, i32 } %197, ptr noundef nonnull align 8 dereferenceable(8) %4)
  %220 = call { ptr, i160 } %219({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr nonnull %3, { ptr, i160 } %215) #34
  %.fca.0.extract339 = extractvalue { ptr, i160 } %220, 0
  %221 = icmp eq ptr %.fca.0.extract339, @nil_typ
  %222 = icmp eq ptr %.fca.0.extract339, null
  %223 = or i1 %221, %222
  br i1 %223, label %224, label %._crit_edge1

224:                                              ; preds = %211
  %225 = add i32 %214, 1
  %.sroa.0330.0.insert.ext = zext i32 %225 to i160
  %226 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0330.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %5, align 8
  store ptr @_parameterization_i32, ptr %205, align 8
  %227 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %5)
  %228 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %104)
  %229 = load ptr, ptr %gep396, align 8
  store ptr @i32_typ, ptr %6, align 8
  store ptr @i32_typ, ptr %207, align 8
  %230 = call ptr @behavior_wrapper(ptr %229, { ptr, ptr, ptr, i32 } %204, ptr noundef nonnull align 8 dereferenceable(16) %6)
  call void %230({ ptr, ptr, ptr, i32 } %204, { ptr, ptr, ptr, i32 } %204, ptr nonnull %5, { ptr, i160 } %215, { ptr, i160 } %226) #34
  store i1 true, ptr %.sroa.0323.sroa.0, align 8
  %.sroa.0323.sroa.0.0..sroa.0323.sroa.0.0..sroa.0323.sroa.0.0..sroa.0323.sroa.0.0..sroa.0323.sroa.0.0..sroa.0323.0. = load i8, ptr %.sroa.0323.sroa.0, align 8
  %.sroa.0323.0.insert.ext = zext i8 %.sroa.0323.sroa.0.0..sroa.0323.sroa.0.0..sroa.0323.sroa.0.0..sroa.0323.sroa.0.0..sroa.0323.sroa.0.0..sroa.0323.0. to i160
  %231 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.0323.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %7, align 8
  store ptr @_parameterization_i1, ptr %208, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %7)
  %233 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %180)
  %234 = load ptr, ptr %209, align 8
  store ptr @i32_typ, ptr %8, align 8
  store ptr @bool_typ, ptr %210, align 8
  %235 = call ptr @behavior_wrapper(ptr %234, { ptr, ptr, ptr, i32 } %197, ptr noundef nonnull align 8 dereferenceable(16) %8)
  call void %235({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr nonnull %7, { ptr, i160 } %215, { ptr, i160 } %231) #34
  %236 = add nsw i32 %.0361398, 1
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %224, %211
  %.1362 = phi i32 [ %236, %224 ], [ %.0361398, %211 ]
  %237 = add nuw nsw i32 %.0358399, 1
  %238 = icmp slt i32 %.1362, %0
  %239 = icmp slt i32 %237, %184
  %spec.select = select i1 %238, i1 %239, i1 false
  br i1 %spec.select, label %211, label %._crit_edge3._crit_edge

._crit_edge3._crit_edge:                          ; preds = %._crit_edge1, %1
  store ptr @Array, ptr %9, align 8
  %240 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @_parameterization_i32, ptr %240, align 8
  %241 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 48), align 8
  %242 = call { i64, i64 } @size_wrapper(ptr %241, ptr noundef nonnull align 8 dereferenceable(16) %9)
  %243 = extractvalue { i64, i64 } %242, 0
  %244 = call ptr @bump_malloc(i64 %243)
  store ptr @_parameterization_i32, ptr %244, align 8
  %245 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %244)
  %246 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %244, 1
  %247 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr undef, 2
  %248 = insertvalue { ptr, ptr, ptr, i32 } %247, i32 10, 3
  store ptr @_parameterization_i32, ptr %10, align 8
  %249 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %10)
  %250 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 dereferenceable(720) @Array)
  %251 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 128), align 8
  store ptr @i32_typ, ptr %11, align 8
  %252 = call ptr @behavior_wrapper(ptr %251, { ptr, ptr, ptr, i32 } %248, ptr noundef nonnull align 8 dereferenceable(8) %11)
  call void %252({ ptr, ptr, ptr, i32 } %248, { ptr, ptr, ptr, i32 } %248, ptr nonnull %10, i32 %0) #34
  store ptr @Array, ptr %12, align 8
  %253 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %244, ptr %253, align 8
  %254 = getelementptr inbounds i8, ptr %12, i64 16
  %255 = getelementptr inbounds i8, ptr %12, i64 24
  store i32 10, ptr %255, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %12, ptr noundef nonnull align 8 dereferenceable(720) @Array)
  %256 = load ptr, ptr %12, align 8
  %257 = load ptr, ptr %253, align 8
  %258 = load ptr, ptr %254, align 8
  %259 = load i32, ptr %255, align 8
  %260 = mul i32 %0, 20
  %261 = icmp sgt i32 %260, 0
  %spec.select384406 = and i1 %185, %261
  br i1 %spec.select384406, label %.lr.ph409, label %._crit_edge7._crit_edge

.lr.ph409:                                        ; preds = %._crit_edge3._crit_edge
  %invariant.gep404 = getelementptr i8, ptr %256, i64 144
  %invariant.gep402 = getelementptr i8, ptr %180, i64 184
  %invariant.gep400 = getelementptr i8, ptr %144, i64 16
  %262 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %144, 0
  %263 = insertvalue { ptr, ptr, ptr, i32 } %262, ptr %145, 1
  %264 = insertvalue { ptr, ptr, ptr, i32 } %263, ptr %146, 2
  %265 = insertvalue { ptr, ptr, ptr, i32 } %264, i32 %147, 3
  %266 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %267 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %144)
  %268 = sext i32 %147 to i64
  %gep401 = getelementptr ptr, ptr %invariant.gep400, i64 %268
  %269 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %180, 0
  %270 = insertvalue { ptr, ptr, ptr, i32 } %269, ptr %181, 1
  %271 = insertvalue { ptr, ptr, ptr, i32 } %270, ptr %182, 2
  %272 = insertvalue { ptr, ptr, ptr, i32 } %271, i32 %183, 3
  %273 = sext i32 %183 to i64
  %gep403 = getelementptr ptr, ptr %invariant.gep402, i64 %273
  %274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %275 = insertvalue { ptr, ptr, ptr, i32 } %274, ptr %257, 1
  %276 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr %258, 2
  %277 = insertvalue { ptr, ptr, ptr, i32 } %276, i32 %259, 3
  %278 = getelementptr inbounds i8, ptr %15, i64 8
  %279 = sext i32 %259 to i64
  %gep405 = getelementptr ptr, ptr %invariant.gep404, i64 %279
  %280 = getelementptr inbounds i8, ptr %16, i64 8
  br label %281

281:                                              ; preds = %._crit_edge5, %.lr.ph409
  %.0357408 = phi i32 [ 0, %.lr.ph409 ], [ %.1, %._crit_edge5 ]
  %.2360407 = phi i32 [ 0, %.lr.ph409 ], [ %300, %._crit_edge5 ]
  %282 = load ptr, ptr %gep401, align 8
  %283 = call ptr @behavior_wrapper(ptr %282, { ptr, ptr, ptr, i32 } %265, ptr noundef nonnull align 8 %2)
  %284 = call i32 %283({ ptr, ptr, ptr, i32 } %265, { ptr, ptr, ptr, i32 } %265, ptr nonnull %2) #34
  %.sroa.0285.0.insert.ext = zext i32 %284 to i160
  %285 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0285.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %13, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %13)
  %287 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %180)
  %288 = load ptr, ptr %gep403, align 8
  store ptr @i32_typ, ptr %14, align 8
  %289 = call ptr @behavior_wrapper(ptr %288, { ptr, ptr, ptr, i32 } %272, ptr noundef nonnull align 8 dereferenceable(8) %14)
  %290 = call { ptr, i160 } %289({ ptr, ptr, ptr, i32 } %272, { ptr, ptr, ptr, i32 } %272, ptr nonnull %13, { ptr, i160 } %285) #34
  %.fca.0.extract277 = extractvalue { ptr, i160 } %290, 0
  %291 = icmp eq ptr %.fca.0.extract277, @nil_typ
  %292 = icmp eq ptr %.fca.0.extract277, null
  %293 = or i1 %291, %292
  br i1 %293, label %294, label %._crit_edge5

294:                                              ; preds = %281
  store ptr @_parameterization_i32, ptr %15, align 8
  store ptr @_parameterization_i32, ptr %278, align 8
  %295 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %15)
  %296 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %256)
  %297 = load ptr, ptr %gep405, align 8
  store ptr @i32_typ, ptr %16, align 8
  store ptr @i32_typ, ptr %280, align 8
  %298 = call ptr @behavior_wrapper(ptr %297, { ptr, ptr, ptr, i32 } %277, ptr noundef nonnull align 8 dereferenceable(16) %16)
  call void %298({ ptr, ptr, ptr, i32 } %277, { ptr, ptr, ptr, i32 } %277, ptr nonnull %15, i32 %.0357408, { ptr, i160 } %285) #34
  %299 = add nsw i32 %.0357408, 1
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %294, %281
  %.1 = phi i32 [ %299, %294 ], [ %.0357408, %281 ]
  %300 = add nuw nsw i32 %.2360407, 1
  %301 = icmp slt i32 %.1, %0
  %302 = icmp slt i32 %300, %260
  %spec.select384 = select i1 %301, i1 %302, i1 false
  br i1 %spec.select384, label %281, label %._crit_edge7._crit_edge

._crit_edge7._crit_edge:                          ; preds = %._crit_edge5, %._crit_edge3._crit_edge
  %.0357.lcssa = phi i32 [ 0, %._crit_edge3._crit_edge ], [ %.1, %._crit_edge5 ]
  %303 = icmp slt i32 %.0357.lcssa, %0
  br i1 %303, label %304, label %._crit_edge8

304:                                              ; preds = %._crit_edge7._crit_edge
  %305 = call ptr @bump_malloc(i64 noundef 30)
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %305, align 32
  store ptr @String, ptr %17, align 8
  %306 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %307 = call { i64, i64 } @size_wrapper(ptr %306, ptr noundef nonnull align 8 dereferenceable(8) %17)
  %308 = extractvalue { i64, i64 } %307, 0
  %309 = call ptr @bump_malloc(i64 %308)
  %310 = insertvalue { ptr } undef, ptr %305, 0
  %311 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %309, 1
  %312 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr undef, 2
  %313 = insertvalue { ptr, ptr, ptr, i32 } %312, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %314 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %314, align 8
  %315 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %315, align 8
  %316 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %18)
  %317 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %318 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %19, align 8
  %319 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr @i32_typ, ptr %319, align 8
  %320 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr @i32_typ, ptr %320, align 8
  %321 = call ptr @behavior_wrapper(ptr %318, { ptr, ptr, ptr, i32 } %313, ptr noundef nonnull align 8 dereferenceable(24) %19)
  call void %321({ ptr, ptr, ptr, i32 } %313, { ptr, ptr, ptr, i32 } %313, ptr nonnull %18, { ptr } %310, i32 29, i32 30) #34
  %322 = ptrtoint ptr %309 to i64
  %.sroa.3258.8.insert.ext = zext i64 %322 to i160
  %.sroa.3258.8.insert.insert = or disjoint i160 %.sroa.3258.8.insert.ext, 3402823669209384634633746074317682114560
  %323 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3258.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %20, align 8
  %324 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %20)
  %325 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %326 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @String, ptr %21, align 8
  %327 = call ptr @class_behavior_wrapper(ptr %326, ptr noundef nonnull align 8 dereferenceable(8) %21)
  call void %327(ptr nonnull %20, { ptr, i160 } %323) #34
  %.sroa.0252.0.insert.ext = zext i32 %.0357.lcssa to i160
  %328 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0252.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %22, align 8
  %329 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %22)
  %330 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %23, align 8
  %331 = call ptr @class_behavior_wrapper(ptr %326, ptr noundef nonnull align 8 dereferenceable(8) %23)
  call void %331(ptr nonnull %22, { ptr, i160 } %328) #34
  %332 = call ptr @bump_malloc(i64 noundef 23)
  store <22 x i8> <i8 32, i8 103, i8 117, i8 97, i8 114, i8 97, i8 110, i8 116, i8 101, i8 101, i8 100, i8 32, i8 109, i8 105, i8 115, i8 115, i8 32, i8 107, i8 101, i8 121, i8 115, i8 46>, ptr %332, align 32
  store ptr @String, ptr %24, align 8
  %333 = call { i64, i64 } @size_wrapper(ptr %306, ptr noundef nonnull align 8 dereferenceable(8) %24)
  %334 = extractvalue { i64, i64 } %333, 0
  %335 = call ptr @bump_malloc(i64 %334)
  %336 = insertvalue { ptr } undef, ptr %332, 0
  %337 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %335, 1
  %338 = insertvalue { ptr, ptr, ptr, i32 } %337, ptr undef, 2
  %339 = insertvalue { ptr, ptr, ptr, i32 } %338, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %25, align 8
  %340 = getelementptr inbounds i8, ptr %25, i64 8
  store ptr @_parameterization_i32, ptr %340, align 8
  %341 = getelementptr inbounds i8, ptr %25, i64 16
  store ptr @_parameterization_i32, ptr %341, align 8
  %342 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %25)
  %343 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %26, align 8
  %344 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr @i32_typ, ptr %344, align 8
  %345 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr @i32_typ, ptr %345, align 8
  %346 = call ptr @behavior_wrapper(ptr %318, { ptr, ptr, ptr, i32 } %339, ptr noundef nonnull align 8 dereferenceable(24) %26)
  call void %346({ ptr, ptr, ptr, i32 } %339, { ptr, ptr, ptr, i32 } %339, ptr nonnull %25, { ptr } %336, i32 22, i32 23) #34
  %347 = ptrtoint ptr %335 to i64
  %.sroa.3242.8.insert.ext = zext i64 %347 to i160
  %.sroa.3242.8.insert.insert = or disjoint i160 %.sroa.3242.8.insert.ext, 3402823669209384634633746074317682114560
  %348 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3242.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %27, align 8
  %349 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %27)
  %350 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %28, align 8
  %351 = call ptr @class_behavior_wrapper(ptr %326, ptr noundef nonnull align 8 dereferenceable(8) %28)
  call void %351(ptr nonnull %27, { ptr, i160 } %348) #34
  br label %._crit_edge8

._crit_edge8:                                     ; preds = %304, %._crit_edge7._crit_edge
  %.0380 = phi i32 [ %.0357.lcssa, %304 ], [ %0, %._crit_edge7._crit_edge ]
  %352 = call i64 @clock()
  %353 = icmp sgt i32 %.0380, 0
  br i1 %353, label %._crit_edge9.lr.ph, label %._crit_edge10._crit_edge.thread

._crit_edge10._crit_edge.thread:                  ; preds = %._crit_edge8
  %354 = call i64 @clock()
  br label %.cont

._crit_edge9.lr.ph:                               ; preds = %._crit_edge8
  %invariant.gep412 = getelementptr i8, ptr %104, i64 184
  %invariant.gep410 = getelementptr i8, ptr %256, i64 136
  %355 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %356 = insertvalue { ptr, ptr, ptr, i32 } %355, ptr %257, 1
  %357 = insertvalue { ptr, ptr, ptr, i32 } %356, ptr %258, 2
  %358 = insertvalue { ptr, ptr, ptr, i32 } %357, i32 %259, 3
  %359 = sext i32 %259 to i64
  %gep411 = getelementptr ptr, ptr %invariant.gep410, i64 %359
  %360 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %104, 0
  %361 = insertvalue { ptr, ptr, ptr, i32 } %360, ptr %105, 1
  %362 = insertvalue { ptr, ptr, ptr, i32 } %361, ptr %106, 2
  %363 = insertvalue { ptr, ptr, ptr, i32 } %362, i32 %107, 3
  %364 = sext i32 %107 to i64
  %gep413 = getelementptr ptr, ptr %invariant.gep412, i64 %364
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %._crit_edge9, %._crit_edge9.lr.ph
  %.0365416 = phi i32 [ 0, %._crit_edge9.lr.ph ], [ %.2367, %._crit_edge9 ]
  %.0368415 = phi i32 [ 0, %._crit_edge9.lr.ph ], [ %.2370, %._crit_edge9 ]
  %.0371414 = phi i32 [ 0, %._crit_edge9.lr.ph ], [ %380, %._crit_edge9 ]
  store ptr @_parameterization_i32, ptr %29, align 8
  %365 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %29)
  %366 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %256)
  %367 = load ptr, ptr %gep411, align 8
  store ptr @i32_typ, ptr %30, align 8
  %368 = call ptr @behavior_wrapper(ptr %367, { ptr, ptr, ptr, i32 } %358, ptr noundef nonnull align 8 dereferenceable(8) %30)
  %369 = call { ptr, i160 } %368({ ptr, ptr, ptr, i32 } %358, { ptr, ptr, ptr, i32 } %358, ptr nonnull %29, i32 %.0371414) #34
  %.fca.1.extract220 = extractvalue { ptr, i160 } %369, 1
  %.sroa.0216.0.insert.ext = and i160 %.fca.1.extract220, 4294967295
  %370 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0216.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %31, align 8
  %371 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %31)
  %372 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %104)
  %373 = load ptr, ptr %gep413, align 8
  store ptr @i32_typ, ptr %32, align 8
  %374 = call ptr @behavior_wrapper(ptr %373, { ptr, ptr, ptr, i32 } %363, ptr noundef nonnull align 8 dereferenceable(8) %32)
  %375 = call { ptr, i160 } %374({ ptr, ptr, ptr, i32 } %363, { ptr, ptr, ptr, i32 } %363, ptr nonnull %31, { ptr, i160 } %370) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %375, 0
  %376 = icmp eq ptr %.fca.0.extract, @nil_typ
  %377 = icmp eq ptr %.fca.0.extract, null
  %378 = or i1 %376, %377
  %.0365..0368 = select i1 %378, i32 %.0365416, i32 %.0368415
  %379 = add i32 %.0365..0368, 1
  %.2370 = select i1 %378, i32 %.0368415, i32 %379
  %.2367 = select i1 %378, i32 %379, i32 %.0365416
  %380 = add nuw nsw i32 %.0371414, 1
  %381 = icmp slt i32 %380, %.0380
  br i1 %381, label %._crit_edge9, label %._crit_edge10._crit_edge

._crit_edge10._crit_edge:                         ; preds = %._crit_edge9
  %382 = call i64 @clock()
  %383 = mul i32 %.2370, 100
  %384 = sdiv i32 %383, %.0380
  %385 = icmp slt i32 %384, 5
  br label %.cont

.cont:                                            ; preds = %._crit_edge10._crit_edge, %._crit_edge10._crit_edge.thread
  %386 = phi i64 [ %382, %._crit_edge10._crit_edge ], [ %354, %._crit_edge10._crit_edge.thread ]
  %.0365.lcssa423 = phi i32 [ %.2367, %._crit_edge10._crit_edge ], [ 0, %._crit_edge10._crit_edge.thread ]
  %.0368.lcssa421 = phi i32 [ %.2370, %._crit_edge10._crit_edge ], [ 0, %._crit_edge10._crit_edge.thread ]
  %.reg2mem27.0.in = phi i1 [ %385, %._crit_edge10._crit_edge ], [ true, %._crit_edge10._crit_edge.thread ]
  %387 = call ptr @bump_malloc(i64 noundef 16)
  store <15 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 77, i8 105, i8 115, i8 115>, ptr %387, align 16
  store ptr @String, ptr %33, align 8
  %388 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %389 = call { i64, i64 } @size_wrapper(ptr %388, ptr noundef nonnull align 8 dereferenceable(8) %33)
  %390 = extractvalue { i64, i64 } %389, 0
  %391 = call ptr @bump_malloc(i64 %390)
  %392 = insertvalue { ptr } undef, ptr %387, 0
  %393 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %391, 1
  %394 = insertvalue { ptr, ptr, ptr, i32 } %393, ptr undef, 2
  %395 = insertvalue { ptr, ptr, ptr, i32 } %394, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %34, align 8
  %396 = getelementptr inbounds i8, ptr %34, i64 8
  store ptr @_parameterization_i32, ptr %396, align 8
  %397 = getelementptr inbounds i8, ptr %34, i64 16
  store ptr @_parameterization_i32, ptr %397, align 8
  %398 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %34)
  %399 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %400 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %35, align 8
  %401 = getelementptr inbounds i8, ptr %35, i64 8
  store ptr @i32_typ, ptr %401, align 8
  %402 = getelementptr inbounds i8, ptr %35, i64 16
  store ptr @i32_typ, ptr %402, align 8
  %403 = call ptr @behavior_wrapper(ptr %400, { ptr, ptr, ptr, i32 } %395, ptr noundef nonnull align 8 dereferenceable(24) %35)
  call void %403({ ptr, ptr, ptr, i32 } %395, { ptr, ptr, ptr, i32 } %395, ptr nonnull %34, { ptr } %392, i32 15, i32 16) #34
  %404 = sub i64 %386, %352
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %395, i32 %.0380, i64 %404)
  %405 = call ptr @bump_malloc(i64 noundef 19)
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %405, align 32
  store ptr @String, ptr %36, align 8
  %406 = call { i64, i64 } @size_wrapper(ptr %388, ptr noundef nonnull align 8 dereferenceable(8) %36)
  %407 = extractvalue { i64, i64 } %406, 0
  %408 = call ptr @bump_malloc(i64 %407)
  %409 = insertvalue { ptr } undef, ptr %405, 0
  %410 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %408, 1
  %411 = insertvalue { ptr, ptr, ptr, i32 } %410, ptr undef, 2
  %412 = insertvalue { ptr, ptr, ptr, i32 } %411, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %37, align 8
  %413 = getelementptr inbounds i8, ptr %37, i64 8
  store ptr @_parameterization_i32, ptr %413, align 8
  %414 = getelementptr inbounds i8, ptr %37, i64 16
  store ptr @_parameterization_i32, ptr %414, align 8
  %415 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %37)
  %416 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %38, align 8
  %417 = getelementptr inbounds i8, ptr %38, i64 8
  store ptr @i32_typ, ptr %417, align 8
  %418 = getelementptr inbounds i8, ptr %38, i64 16
  store ptr @i32_typ, ptr %418, align 8
  %419 = call ptr @behavior_wrapper(ptr %400, { ptr, ptr, ptr, i32 } %412, ptr noundef nonnull align 8 dereferenceable(24) %38)
  call void %419({ ptr, ptr, ptr, i32 } %412, { ptr, ptr, ptr, i32 } %412, ptr nonnull %37, { ptr } %409, i32 18, i32 19) #34
  %420 = ptrtoint ptr %408 to i64
  %.sroa.3161.8.insert.ext = zext i64 %420 to i160
  %.sroa.3161.8.insert.insert = or disjoint i160 %.sroa.3161.8.insert.ext, 3402823669209384634633746074317682114560
  %421 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3161.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %39, align 8
  %422 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %39)
  %423 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %424 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @String, ptr %40, align 8
  %425 = call ptr @class_behavior_wrapper(ptr %424, ptr noundef nonnull align 8 dereferenceable(8) %40)
  call void %425(ptr nonnull %39, { ptr, i160 } %421) #34
  %426 = call ptr @bump_malloc(i64 noundef 5)
  %427 = insertvalue { ptr } undef, ptr %426, 0
  %. = select i1 %.reg2mem27.0.in, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.458 = select i1 %.reg2mem27.0.in, ptr %41, ptr %46
  %.459 = select i1 %.reg2mem27.0.in, ptr %42, ptr %47
  %.460 = select i1 %.reg2mem27.0.in, ptr %43, ptr %48
  %.461 = select i1 %.reg2mem27.0.in, ptr %44, ptr %49
  %.462 = select i1 %.reg2mem27.0.in, ptr %45, ptr %50
  store <4 x i8> %., ptr %426, align 4
  store ptr @String, ptr %.458, align 8
  %428 = call { i64, i64 } @size_wrapper(ptr %388, ptr noundef nonnull align 8 dereferenceable(8) %.458)
  %429 = extractvalue { i64, i64 } %428, 0
  %430 = call ptr @bump_malloc(i64 %429)
  %431 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %430, 1
  %432 = insertvalue { ptr, ptr, ptr, i32 } %431, ptr undef, 2
  %433 = insertvalue { ptr, ptr, ptr, i32 } %432, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %.459, align 8
  %.459.sroa.sel.v = select i1 %.reg2mem27.0.in, ptr %42, ptr %47
  %.459.sroa.sel = getelementptr inbounds i8, ptr %.459.sroa.sel.v, i64 8
  store ptr @_parameterization_i32, ptr %.459.sroa.sel, align 8
  %.459.sroa.sel471.v = select i1 %.reg2mem27.0.in, ptr %42, ptr %47
  %.459.sroa.sel471 = getelementptr inbounds i8, ptr %.459.sroa.sel471.v, i64 16
  store ptr @_parameterization_i32, ptr %.459.sroa.sel471, align 8
  %434 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %.459)
  %435 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %.460, align 8
  %.460.sroa.sel.v = select i1 %.reg2mem27.0.in, ptr %43, ptr %48
  %.460.sroa.sel = getelementptr inbounds i8, ptr %.460.sroa.sel.v, i64 8
  store ptr @i32_typ, ptr %.460.sroa.sel, align 8
  %.460.sroa.sel466.v = select i1 %.reg2mem27.0.in, ptr %43, ptr %48
  %.460.sroa.sel466 = getelementptr inbounds i8, ptr %.460.sroa.sel466.v, i64 16
  store ptr @i32_typ, ptr %.460.sroa.sel466, align 8
  %436 = call ptr @behavior_wrapper(ptr %400, { ptr, ptr, ptr, i32 } %433, ptr noundef nonnull align 8 dereferenceable(24) %.460)
  call void %436({ ptr, ptr, ptr, i32 } %433, { ptr, ptr, ptr, i32 } %433, ptr nonnull %.459, { ptr } %427, i32 4, i32 5) #34
  %437 = ptrtoint ptr %430 to i64
  %.sroa.3135.8.insert.ext = zext i64 %437 to i160
  %.sroa.3135.8.insert.insert = or disjoint i160 %.sroa.3135.8.insert.ext, 3402823669209384634633746074317682114560
  %438 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3135.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %.461, align 8
  %439 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %.461)
  %440 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %.462, align 8
  %441 = call ptr @class_behavior_wrapper(ptr %424, ptr noundef nonnull align 8 dereferenceable(8) %.462)
  call void %441(ptr nonnull %.461, { ptr, i160 } %438) #34
  %442 = call ptr @bump_malloc(i64 noundef 14)
  store <13 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 77, i8 105, i8 115, i8 115, i8 101, i8 115, i8 58, i8 32>, ptr %442, align 16
  store ptr @String, ptr %51, align 8
  %443 = call { i64, i64 } @size_wrapper(ptr %388, ptr noundef nonnull align 8 dereferenceable(8) %51)
  %444 = extractvalue { i64, i64 } %443, 0
  %445 = call ptr @bump_malloc(i64 %444)
  %446 = insertvalue { ptr } undef, ptr %442, 0
  %447 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %445, 1
  %448 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr undef, 2
  %449 = insertvalue { ptr, ptr, ptr, i32 } %448, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %52, align 8
  %450 = getelementptr inbounds i8, ptr %52, i64 8
  store ptr @_parameterization_i32, ptr %450, align 8
  %451 = getelementptr inbounds i8, ptr %52, i64 16
  store ptr @_parameterization_i32, ptr %451, align 8
  %452 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %52)
  %453 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %53, align 8
  %454 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr @i32_typ, ptr %454, align 8
  %455 = getelementptr inbounds i8, ptr %53, i64 16
  store ptr @i32_typ, ptr %455, align 8
  %456 = call ptr @behavior_wrapper(ptr %400, { ptr, ptr, ptr, i32 } %449, ptr noundef nonnull align 8 dereferenceable(24) %53)
  call void %456({ ptr, ptr, ptr, i32 } %449, { ptr, ptr, ptr, i32 } %449, ptr nonnull %52, { ptr } %446, i32 13, i32 14) #34
  %457 = ptrtoint ptr %445 to i64
  %.sroa.3122.8.insert.ext = zext i64 %457 to i160
  %.sroa.3122.8.insert.insert = or disjoint i160 %.sroa.3122.8.insert.ext, 3402823669209384634633746074317682114560
  %458 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3122.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %54, align 8
  %459 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %54)
  %460 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %55, align 8
  %461 = call ptr @class_behavior_wrapper(ptr %424, ptr noundef nonnull align 8 dereferenceable(8) %55)
  call void %461(ptr nonnull %54, { ptr, i160 } %458) #34
  %.sroa.0112.0.insert.ext = zext i32 %.0365.lcssa423 to i160
  %462 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0112.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %56, align 8
  %463 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %56)
  %464 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %57, align 8
  %465 = call ptr @class_behavior_wrapper(ptr %424, ptr noundef nonnull align 8 dereferenceable(8) %57)
  call void %465(ptr nonnull %56, { ptr, i160 } %462) #34
  %466 = call ptr @bump_malloc(i64 noundef 9)
  store <8 x i8> <i8 44, i8 32, i8 72, i8 105, i8 116, i8 115, i8 58, i8 32>, ptr %466, align 8
  store ptr @String, ptr %58, align 8
  %467 = call { i64, i64 } @size_wrapper(ptr %388, ptr noundef nonnull align 8 dereferenceable(8) %58)
  %468 = extractvalue { i64, i64 } %467, 0
  %469 = call ptr @bump_malloc(i64 %468)
  %470 = insertvalue { ptr } undef, ptr %466, 0
  %471 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %469, 1
  %472 = insertvalue { ptr, ptr, ptr, i32 } %471, ptr undef, 2
  %473 = insertvalue { ptr, ptr, ptr, i32 } %472, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %59, align 8
  %474 = getelementptr inbounds i8, ptr %59, i64 8
  store ptr @_parameterization_i32, ptr %474, align 8
  %475 = getelementptr inbounds i8, ptr %59, i64 16
  store ptr @_parameterization_i32, ptr %475, align 8
  %476 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %59)
  %477 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %60, align 8
  %478 = getelementptr inbounds i8, ptr %60, i64 8
  store ptr @i32_typ, ptr %478, align 8
  %479 = getelementptr inbounds i8, ptr %60, i64 16
  store ptr @i32_typ, ptr %479, align 8
  %480 = call ptr @behavior_wrapper(ptr %400, { ptr, ptr, ptr, i32 } %473, ptr noundef nonnull align 8 dereferenceable(24) %60)
  call void %480({ ptr, ptr, ptr, i32 } %473, { ptr, ptr, ptr, i32 } %473, ptr nonnull %59, { ptr } %470, i32 8, i32 9) #34
  %481 = ptrtoint ptr %469 to i64
  %.sroa.3102.8.insert.ext = zext i64 %481 to i160
  %.sroa.3102.8.insert.insert = or disjoint i160 %.sroa.3102.8.insert.ext, 3402823669209384634633746074317682114560
  %482 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3102.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %61, align 8
  %483 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %61)
  %484 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %62, align 8
  %485 = call ptr @class_behavior_wrapper(ptr %424, ptr noundef nonnull align 8 dereferenceable(8) %62)
  call void %485(ptr nonnull %61, { ptr, i160 } %482) #34
  %.sroa.097.0.insert.ext = zext i32 %.0368.lcssa421 to i160
  %486 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.097.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %63, align 8
  %487 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %63)
  %488 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %64, align 8
  %489 = call ptr @class_behavior_wrapper(ptr %424, ptr noundef nonnull align 8 dereferenceable(8) %64)
  call void %489(ptr nonnull %63, { ptr, i160 } %486) #34
  %490 = call ptr @bump_malloc(i64 noundef 2)
  store <1 x i8> <i8 41>, ptr %490, align 1
  store ptr @String, ptr %65, align 8
  %491 = call { i64, i64 } @size_wrapper(ptr %388, ptr noundef nonnull align 8 dereferenceable(8) %65)
  %492 = extractvalue { i64, i64 } %491, 0
  %493 = call ptr @bump_malloc(i64 %492)
  %494 = insertvalue { ptr } undef, ptr %490, 0
  %495 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %493, 1
  %496 = insertvalue { ptr, ptr, ptr, i32 } %495, ptr undef, 2
  %497 = insertvalue { ptr, ptr, ptr, i32 } %496, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %66, align 8
  %498 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr @_parameterization_i32, ptr %498, align 8
  %499 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr @_parameterization_i32, ptr %499, align 8
  %500 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %66)
  %501 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %67, align 8
  %502 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr @i32_typ, ptr %502, align 8
  %503 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr @i32_typ, ptr %503, align 8
  %504 = call ptr @behavior_wrapper(ptr %400, { ptr, ptr, ptr, i32 } %497, ptr noundef nonnull align 8 dereferenceable(24) %67)
  call void %504({ ptr, ptr, ptr, i32 } %497, { ptr, ptr, ptr, i32 } %497, ptr nonnull %66, { ptr } %494, i32 1, i32 2) #34
  %505 = ptrtoint ptr %493 to i64
  %.sroa.3.8.insert.ext = zext i64 %505 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %506 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %68, align 8
  %507 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %68)
  %508 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %69, align 8
  %509 = call ptr @class_behavior_wrapper(ptr %424, ptr noundef nonnull align 8 dereferenceable(8) %69)
  call void %509(ptr nonnull %68, { ptr, i160 } %506) #34
  ret void
}

define void @benchmark_remove_random(i32 %0) local_unnamed_addr #3 {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %5 = alloca [2 x ptr], align 8
  %6 = alloca { ptr, ptr }, align 8
  %7 = alloca [2 x ptr], align 8
  %8 = alloca { ptr, ptr }, align 8
  %.sroa.0316.sroa.0 = alloca i8, align 8
  %9 = alloca [2 x ptr], align 8
  %10 = alloca { ptr, ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca { ptr }, align 8
  %18 = alloca [1 x ptr], align 8
  %19 = alloca [3 x ptr], align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  %21 = alloca [1 x ptr], align 8
  %22 = alloca { ptr }, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = alloca { ptr }, align 8
  %25 = alloca [1 x ptr], align 8
  %26 = alloca { ptr }, align 8
  %27 = alloca [1 x ptr], align 8
  %28 = alloca [3 x ptr], align 8
  %29 = alloca { ptr, ptr, ptr }, align 8
  %30 = alloca [1 x ptr], align 8
  %31 = alloca { ptr }, align 8
  %32 = alloca [1 x ptr], align 8
  %33 = alloca { ptr }, align 8
  %34 = alloca [1 x ptr], align 8
  %35 = alloca [3 x ptr], align 8
  %36 = alloca { ptr, ptr, ptr }, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca { ptr }, align 8
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr }, align 8
  %41 = alloca [1 x ptr], align 8
  %42 = alloca { ptr }, align 8
  %43 = alloca [1 x ptr], align 8
  %44 = alloca { ptr }, align 8
  %45 = alloca [1 x ptr], align 8
  %46 = alloca [3 x ptr], align 8
  %47 = alloca { ptr, ptr, ptr }, align 8
  %48 = alloca [1 x ptr], align 8
  %49 = alloca [3 x ptr], align 8
  %50 = alloca { ptr, ptr, ptr }, align 8
  %51 = alloca [1 x ptr], align 8
  %52 = alloca { ptr }, align 8
  %53 = alloca [1 x ptr], align 8
  %54 = alloca [3 x ptr], align 8
  %55 = alloca { ptr, ptr, ptr }, align 8
  %56 = alloca [1 x ptr], align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca [1 x ptr], align 8
  %59 = alloca [3 x ptr], align 8
  %60 = alloca { ptr, ptr, ptr }, align 8
  %61 = alloca [1 x ptr], align 8
  %62 = alloca { ptr }, align 8
  %63 = alloca [1 x ptr], align 8
  %64 = alloca [3 x ptr], align 8
  %65 = alloca { ptr, ptr, ptr }, align 8
  %66 = alloca [1 x ptr], align 8
  %67 = alloca { ptr }, align 8
  %68 = alloca [1 x ptr], align 8
  %69 = alloca { ptr }, align 8
  %70 = alloca [1 x ptr], align 8
  %71 = alloca [3 x ptr], align 8
  %72 = alloca { ptr, ptr, ptr }, align 8
  %73 = alloca [1 x ptr], align 8
  %74 = alloca { ptr }, align 8
  %75 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  store ptr @_parameterization_i32, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %75, i64 16
  store ptr @_parameterization_i32, ptr %77, align 8
  %78 = getelementptr inbounds i8, ptr %75, i64 24
  store ptr @_parameterization_Pairi32._i32, ptr %78, align 8
  %79 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 48), align 8
  %80 = call { i64, i64 } @size_wrapper(ptr %79, ptr noundef nonnull align 8 dereferenceable(32) %75)
  %81 = extractvalue { i64, i64 } %80, 0
  %82 = call ptr @bump_malloc(i64 %81)
  store ptr @_parameterization_i32, ptr %82, align 8
  %83 = getelementptr i8, ptr %82, i64 8
  store ptr @_parameterization_i32, ptr %83, align 8
  %84 = getelementptr i8, ptr %82, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %82)
  %86 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %86)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %86, ptr noalias nofree noundef nonnull readnone @awufjifrzq, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %87 = call ptr @adjust_trampoline(ptr %86)
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %86)
  %89 = insertvalue { ptr } undef, ptr %87, 0
  %90 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %90)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %90, ptr noalias nofree noundef nonnull readnone @nvefgjzayb, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %91 = call ptr @adjust_trampoline(ptr %90)
  %92 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %90)
  %93 = insertvalue { ptr } undef, ptr %91, 0
  %94 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %82, 1
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr undef, 2
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 10, 3
  %97 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %97, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %97)
  %100 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %101 = load ptr, ptr getelementptr inbounds (i8, ptr @CuckooMap, i64 160), align 8
  %102 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %102, align 8
  %103 = getelementptr inbounds i8, ptr %102, i64 8
  store ptr @function_typ, ptr %103, align 8
  %104 = call ptr @behavior_wrapper(ptr %101, { ptr, ptr, ptr, i32 } %96, ptr noundef nonnull align 8 dereferenceable(16) %102)
  call void %104({ ptr, ptr, ptr, i32 } %96, { ptr, ptr, ptr, i32 } %96, ptr nonnull %97, { ptr } %89, { ptr } %93) #34
  %105 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %105, align 8
  %106 = getelementptr inbounds i8, ptr %105, i64 8
  store ptr %82, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %105, i64 16
  %108 = getelementptr inbounds i8, ptr %105, i64 24
  store i32 10, ptr %108, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %105, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %109 = load ptr, ptr %105, align 8
  %110 = load ptr, ptr %106, align 8
  %111 = load ptr, ptr %107, align 8
  %112 = load i32, ptr %108, align 8
  %113 = alloca [1 x ptr], align 8
  store ptr @PRNG, ptr %113, align 8
  %114 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_PRNG, ptr noundef nonnull align 8 dereferenceable(8) %113)
  %115 = extractvalue { i64, i64 } %114, 0
  %116 = call ptr @bump_malloc(i64 %115)
  %117 = insertvalue { ptr, ptr, ptr, i32 } { ptr @PRNG, ptr undef, ptr undef, i32 undef }, ptr %116, 1
  %118 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr undef, 2
  %119 = insertvalue { ptr, ptr, ptr, i32 } %118, i32 10, 3
  %120 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %120)
  %122 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG)
  %123 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %123, align 8
  %124 = call ptr @behavior_wrapper(ptr noundef nonnull @PRNG_B_init_initial_seedi32, { ptr, ptr, ptr, i32 } %119, ptr noundef nonnull align 8 dereferenceable(8) %123)
  call void %124({ ptr, ptr, ptr, i32 } %119, { ptr, ptr, ptr, i32 } %119, ptr nonnull %120, i32 101112) #34
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @PRNG, ptr %125, align 8
  %126 = getelementptr inbounds i8, ptr %125, i64 8
  store ptr %116, ptr %126, align 8
  %127 = getelementptr inbounds i8, ptr %125, i64 16
  %128 = getelementptr inbounds i8, ptr %125, i64 24
  store i32 10, ptr %128, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %125, ptr noundef nonnull align 16 dereferenceable(120) @PRNG)
  %129 = load ptr, ptr %125, align 8
  %130 = load ptr, ptr %126, align 8
  %131 = load ptr, ptr %127, align 8
  %132 = load i32, ptr %128, align 8
  %133 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %133, align 8
  %134 = getelementptr inbounds i8, ptr %133, i64 8
  store ptr @_parameterization_i32, ptr %134, align 8
  %135 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 48), align 8
  %136 = call { i64, i64 } @size_wrapper(ptr %135, ptr noundef nonnull align 8 dereferenceable(16) %133)
  %137 = extractvalue { i64, i64 } %136, 0
  %138 = call ptr @bump_malloc(i64 %137)
  store ptr @_parameterization_i32, ptr %138, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %138)
  %140 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %138, 1
  %141 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr undef, 2
  %142 = insertvalue { ptr, ptr, ptr, i32 } %141, i32 10, 3
  %143 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %143, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %143)
  %145 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 dereferenceable(720) @Array)
  %146 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 128), align 8
  %147 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %147, align 8
  %148 = call ptr @behavior_wrapper(ptr %146, { ptr, ptr, ptr, i32 } %142, ptr noundef nonnull align 8 dereferenceable(8) %147)
  call void %148({ ptr, ptr, ptr, i32 } %142, { ptr, ptr, ptr, i32 } %142, ptr nonnull %143, i32 %0) #34
  %149 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Array, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %149, i64 8
  store ptr %138, ptr %150, align 8
  %151 = getelementptr inbounds i8, ptr %149, i64 16
  %152 = getelementptr inbounds i8, ptr %149, i64 24
  store i32 10, ptr %152, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %149, ptr noundef nonnull align 8 dereferenceable(720) @Array)
  %153 = load ptr, ptr %149, align 8
  %154 = load ptr, ptr %150, align 8
  %155 = load ptr, ptr %151, align 8
  %156 = load i32, ptr %152, align 8
  %157 = alloca [4 x ptr], align 8
  store ptr @CuckooMap, ptr %157, align 8
  %158 = getelementptr inbounds i8, ptr %157, i64 8
  store ptr @_parameterization_i32, ptr %158, align 8
  %159 = getelementptr inbounds i8, ptr %157, i64 16
  store ptr @_parameterization_i1, ptr %159, align 8
  %160 = getelementptr inbounds i8, ptr %157, i64 24
  store ptr @_parameterization_Pairi32._i1, ptr %160, align 8
  %161 = call { i64, i64 } @size_wrapper(ptr %79, ptr noundef nonnull align 8 dereferenceable(32) %157)
  %162 = extractvalue { i64, i64 } %161, 0
  %163 = call ptr @bump_malloc(i64 %162)
  store ptr @_parameterization_i32, ptr %163, align 8
  %164 = getelementptr i8, ptr %163, i64 8
  store ptr @_parameterization_i1, ptr %164, align 8
  %165 = getelementptr i8, ptr %163, i64 16
  store ptr @_parameterization_Pairi32._i1, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %163)
  %167 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %167)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %167, ptr noalias nofree noundef nonnull readnone @qzrvrlergk, ptr noalias nofree noundef nonnull readnone @i32_hasher)
  %168 = call ptr @adjust_trampoline(ptr %167)
  %169 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %167)
  %170 = insertvalue { ptr } undef, ptr %168, 0
  %171 = call ptr @bump_malloc(i64 noundef 24)
  call void @anoint_trampoline(ptr %171)
  call void @llvm.init.trampoline(ptr nocapture nofree writeonly %171, ptr noalias nofree noundef nonnull readnone @lnmnibzgqe, ptr noalias nofree noundef nonnull readnone @i32_eq)
  %172 = call ptr @adjust_trampoline(ptr %171)
  %173 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree %171)
  %174 = insertvalue { ptr } undef, ptr %172, 0
  %175 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %163, 1
  %176 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr undef, 2
  %177 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 10, 3
  %178 = alloca [2 x ptr], align 8
  store ptr @_parameterization_Functioni32_to_i32, ptr %178, align 8
  %179 = getelementptr inbounds i8, ptr %178, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i1, ptr %179, align 8
  %180 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %178)
  %181 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %182 = alloca { ptr, ptr }, align 8
  store ptr @function_typ, ptr %182, align 8
  %183 = getelementptr inbounds i8, ptr %182, i64 8
  store ptr @function_typ, ptr %183, align 8
  %184 = call ptr @behavior_wrapper(ptr %101, { ptr, ptr, ptr, i32 } %177, ptr noundef nonnull align 8 dereferenceable(16) %182)
  call void %184({ ptr, ptr, ptr, i32 } %177, { ptr, ptr, ptr, i32 } %177, ptr nonnull %178, { ptr } %170, { ptr } %174) #34
  %185 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMap, ptr %185, align 8
  %186 = getelementptr inbounds i8, ptr %185, i64 8
  store ptr %163, ptr %186, align 8
  %187 = getelementptr inbounds i8, ptr %185, i64 24
  store i32 10, ptr %187, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %185, ptr noundef nonnull align 8 dereferenceable(2232) @CuckooMap)
  %188 = load ptr, ptr %185, align 8
  %189 = mul i32 %0, 10
  %190 = icmp sgt i32 %0, 0
  %191 = icmp sgt i32 %189, 0
  %spec.select392 = and i1 %190, %191
  br i1 %spec.select392, label %.lr.ph, label %._crit_edge3._crit_edge

.lr.ph:                                           ; preds = %1
  %invariant.gep390 = getelementptr i8, ptr %153, i64 144
  %invariant.gep388 = getelementptr i8, ptr %109, i64 168
  %invariant.gep = getelementptr i8, ptr %129, i64 16
  %192 = load i32, ptr %187, align 8
  %193 = getelementptr inbounds i8, ptr %185, i64 16
  %194 = load ptr, ptr %193, align 8
  %195 = load ptr, ptr %186, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %129, 0
  %197 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %130, 1
  %198 = insertvalue { ptr, ptr, ptr, i32 } %197, ptr %131, 2
  %199 = insertvalue { ptr, ptr, ptr, i32 } %198, i32 %132, 3
  %200 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %201 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %129)
  %202 = sext i32 %132 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %202
  %203 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %188, 0
  %204 = insertvalue { ptr, ptr, ptr, i32 } %203, ptr %195, 1
  %205 = insertvalue { ptr, ptr, ptr, i32 } %204, ptr %194, 2
  %206 = insertvalue { ptr, ptr, ptr, i32 } %205, i32 %192, 3
  %207 = sext i32 %192 to i64
  %208 = getelementptr ptr, ptr %188, i64 %207
  %209 = getelementptr i8, ptr %208, i64 184
  %210 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %109, 0
  %211 = insertvalue { ptr, ptr, ptr, i32 } %210, ptr %110, 1
  %212 = insertvalue { ptr, ptr, ptr, i32 } %211, ptr %111, 2
  %213 = insertvalue { ptr, ptr, ptr, i32 } %212, i32 %112, 3
  %214 = getelementptr inbounds i8, ptr %5, i64 8
  %215 = sext i32 %112 to i64
  %gep389 = getelementptr ptr, ptr %invariant.gep388, i64 %215
  %216 = getelementptr inbounds i8, ptr %6, i64 8
  %217 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %218 = insertvalue { ptr, ptr, ptr, i32 } %217, ptr %154, 1
  %219 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %155, 2
  %220 = insertvalue { ptr, ptr, ptr, i32 } %219, i32 %156, 3
  %221 = getelementptr inbounds i8, ptr %7, i64 8
  %222 = sext i32 %156 to i64
  %gep391 = getelementptr ptr, ptr %invariant.gep390, i64 %222
  %223 = getelementptr inbounds i8, ptr %8, i64 8
  %224 = getelementptr inbounds i8, ptr %9, i64 8
  %225 = getelementptr i8, ptr %208, i64 168
  %226 = getelementptr inbounds i8, ptr %10, i64 8
  br label %227

227:                                              ; preds = %._crit_edge1, %.lr.ph
  %.0355394 = phi i32 [ 0, %.lr.ph ], [ %257, %._crit_edge1 ]
  %.0357393 = phi i32 [ 0, %.lr.ph ], [ %.1358, %._crit_edge1 ]
  %228 = load ptr, ptr %gep, align 8
  %229 = call ptr @behavior_wrapper(ptr %228, { ptr, ptr, ptr, i32 } %199, ptr noundef nonnull align 8 %2)
  %230 = call i32 %229({ ptr, ptr, ptr, i32 } %199, { ptr, ptr, ptr, i32 } %199, ptr nonnull %2) #34
  %.sroa.0343.0.insert.ext = zext i32 %230 to i160
  %231 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0343.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %3, align 8
  %232 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %3)
  %233 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %188)
  %234 = load ptr, ptr %209, align 8
  store ptr @i32_typ, ptr %4, align 8
  %235 = call ptr @behavior_wrapper(ptr %234, { ptr, ptr, ptr, i32 } %206, ptr noundef nonnull align 8 dereferenceable(8) %4)
  %236 = call { ptr, i160 } %235({ ptr, ptr, ptr, i32 } %206, { ptr, ptr, ptr, i32 } %206, ptr nonnull %3, { ptr, i160 } %231) #34
  %.fca.0.extract335 = extractvalue { ptr, i160 } %236, 0
  %237 = icmp eq ptr %.fca.0.extract335, @nil_typ
  %238 = icmp eq ptr %.fca.0.extract335, null
  %239 = or i1 %237, %238
  br i1 %239, label %240, label %._crit_edge1

240:                                              ; preds = %227
  %241 = add i32 %230, 1
  %.sroa.0326.0.insert.ext = zext i32 %241 to i160
  %242 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0326.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %5, align 8
  store ptr @_parameterization_i32, ptr %214, align 8
  %243 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %5)
  %244 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %109)
  %245 = load ptr, ptr %gep389, align 8
  store ptr @i32_typ, ptr %6, align 8
  store ptr @i32_typ, ptr %216, align 8
  %246 = call ptr @behavior_wrapper(ptr %245, { ptr, ptr, ptr, i32 } %213, ptr noundef nonnull align 8 dereferenceable(16) %6)
  call void %246({ ptr, ptr, ptr, i32 } %213, { ptr, ptr, ptr, i32 } %213, ptr nonnull %5, { ptr, i160 } %231, { ptr, i160 } %242) #34
  store ptr @_parameterization_i32, ptr %7, align 8
  store ptr @_parameterization_i32, ptr %221, align 8
  %247 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %7)
  %248 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %153)
  %249 = load ptr, ptr %gep391, align 8
  store ptr @i32_typ, ptr %8, align 8
  store ptr @i32_typ, ptr %223, align 8
  %250 = call ptr @behavior_wrapper(ptr %249, { ptr, ptr, ptr, i32 } %220, ptr noundef nonnull align 8 dereferenceable(16) %8)
  call void %250({ ptr, ptr, ptr, i32 } %220, { ptr, ptr, ptr, i32 } %220, ptr nonnull %7, i32 %.0357393, { ptr, i160 } %231) #34
  store i1 true, ptr %.sroa.0316.sroa.0, align 8
  %.sroa.0316.sroa.0.0..sroa.0316.sroa.0.0..sroa.0316.sroa.0.0..sroa.0316.sroa.0.0..sroa.0316.sroa.0.0..sroa.0316.0. = load i8, ptr %.sroa.0316.sroa.0, align 8
  %.sroa.0316.0.insert.ext = zext i8 %.sroa.0316.sroa.0.0..sroa.0316.sroa.0.0..sroa.0316.sroa.0.0..sroa.0316.sroa.0.0..sroa.0316.sroa.0.0..sroa.0316.0. to i160
  %251 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.0316.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %9, align 8
  store ptr @_parameterization_i1, ptr %224, align 8
  %252 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %9)
  %253 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %188)
  %254 = load ptr, ptr %225, align 8
  store ptr @i32_typ, ptr %10, align 8
  store ptr @bool_typ, ptr %226, align 8
  %255 = call ptr @behavior_wrapper(ptr %254, { ptr, ptr, ptr, i32 } %206, ptr noundef nonnull align 8 dereferenceable(16) %10)
  call void %255({ ptr, ptr, ptr, i32 } %206, { ptr, ptr, ptr, i32 } %206, ptr nonnull %9, { ptr, i160 } %231, { ptr, i160 } %251) #34
  %256 = add nsw i32 %.0357393, 1
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %240, %227
  %.1358 = phi i32 [ %256, %240 ], [ %.0357393, %227 ]
  %257 = add nuw nsw i32 %.0355394, 1
  %258 = icmp slt i32 %.1358, %0
  %259 = icmp slt i32 %257, %189
  %spec.select = select i1 %258, i1 %259, i1 false
  br i1 %spec.select, label %227, label %._crit_edge3._crit_edge

._crit_edge3._crit_edge:                          ; preds = %._crit_edge1, %1
  %.0357.lcssa = phi i32 [ 0, %1 ], [ %.1358, %._crit_edge1 ]
  %260 = icmp slt i32 %.0357.lcssa, %0
  br i1 %260, label %261, label %._crit_edge4

261:                                              ; preds = %._crit_edge3._crit_edge
  %262 = call ptr @bump_malloc(i64 noundef 30)
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %262, align 32
  store ptr @String, ptr %11, align 8
  %263 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %264 = call { i64, i64 } @size_wrapper(ptr %263, ptr noundef nonnull align 8 dereferenceable(8) %11)
  %265 = extractvalue { i64, i64 } %264, 0
  %266 = call ptr @bump_malloc(i64 %265)
  %267 = insertvalue { ptr } undef, ptr %262, 0
  %268 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %266, 1
  %269 = insertvalue { ptr, ptr, ptr, i32 } %268, ptr undef, 2
  %270 = insertvalue { ptr, ptr, ptr, i32 } %269, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %12, align 8
  %271 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr @_parameterization_i32, ptr %271, align 8
  %272 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr @_parameterization_i32, ptr %272, align 8
  %273 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %12)
  %274 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %275 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %13, align 8
  %276 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr @i32_typ, ptr %276, align 8
  %277 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr @i32_typ, ptr %277, align 8
  %278 = call ptr @behavior_wrapper(ptr %275, { ptr, ptr, ptr, i32 } %270, ptr noundef nonnull align 8 dereferenceable(24) %13)
  call void %278({ ptr, ptr, ptr, i32 } %270, { ptr, ptr, ptr, i32 } %270, ptr nonnull %12, { ptr } %267, i32 29, i32 30) #34
  %279 = ptrtoint ptr %266 to i64
  %.sroa.3301.8.insert.ext = zext i64 %279 to i160
  %.sroa.3301.8.insert.insert = or disjoint i160 %.sroa.3301.8.insert.ext, 3402823669209384634633746074317682114560
  %280 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3301.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %14, align 8
  %281 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %14)
  %282 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %283 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @String, ptr %15, align 8
  %284 = call ptr @class_behavior_wrapper(ptr %283, ptr noundef nonnull align 8 dereferenceable(8) %15)
  call void %284(ptr nonnull %14, { ptr, i160 } %280) #34
  %.sroa.0295.0.insert.ext = zext i32 %.0357.lcssa to i160
  %285 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0295.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %16, align 8
  %286 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %16)
  %287 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %17, align 8
  %288 = call ptr @class_behavior_wrapper(ptr %283, ptr noundef nonnull align 8 dereferenceable(8) %17)
  call void %288(ptr nonnull %16, { ptr, i160 } %285) #34
  %289 = call ptr @bump_malloc(i64 noundef 30)
  store <29 x i8> <i8 32, i8 117, i8 110, i8 105, i8 113, i8 117, i8 101, i8 32, i8 107, i8 101, i8 121, i8 115, i8 32, i8 102, i8 111, i8 114, i8 32, i8 114, i8 101, i8 109, i8 111, i8 118, i8 101, i8 32, i8 116, i8 101, i8 115, i8 116, i8 46>, ptr %289, align 32
  store ptr @String, ptr %18, align 8
  %290 = call { i64, i64 } @size_wrapper(ptr %263, ptr noundef nonnull align 8 dereferenceable(8) %18)
  %291 = extractvalue { i64, i64 } %290, 0
  %292 = call ptr @bump_malloc(i64 %291)
  %293 = insertvalue { ptr } undef, ptr %289, 0
  %294 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %292, 1
  %295 = insertvalue { ptr, ptr, ptr, i32 } %294, ptr undef, 2
  %296 = insertvalue { ptr, ptr, ptr, i32 } %295, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %19, align 8
  %297 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr @_parameterization_i32, ptr %297, align 8
  %298 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr @_parameterization_i32, ptr %298, align 8
  %299 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %19)
  %300 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %20, align 8
  %301 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr @i32_typ, ptr %301, align 8
  %302 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr @i32_typ, ptr %302, align 8
  %303 = call ptr @behavior_wrapper(ptr %275, { ptr, ptr, ptr, i32 } %296, ptr noundef nonnull align 8 dereferenceable(24) %20)
  call void %303({ ptr, ptr, ptr, i32 } %296, { ptr, ptr, ptr, i32 } %296, ptr nonnull %19, { ptr } %293, i32 29, i32 30) #34
  %304 = ptrtoint ptr %292 to i64
  %.sroa.3285.8.insert.ext = zext i64 %304 to i160
  %.sroa.3285.8.insert.insert = or disjoint i160 %.sroa.3285.8.insert.ext, 3402823669209384634633746074317682114560
  %305 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3285.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %21, align 8
  %306 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %21)
  %307 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %22, align 8
  %308 = call ptr @class_behavior_wrapper(ptr %283, ptr noundef nonnull align 8 dereferenceable(8) %22)
  call void %308(ptr nonnull %21, { ptr, i160 } %305) #34
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %261, %._crit_edge3._crit_edge
  %.0365 = phi i32 [ %.0357.lcssa, %261 ], [ %0, %._crit_edge3._crit_edge ]
  %309 = call i64 @clock()
  %310 = icmp sgt i32 %.0365, 0
  br i1 %310, label %.lr.ph402, label %._crit_edge4.._crit_edge8_crit_edge

._crit_edge4.._crit_edge8_crit_edge:              ; preds = %._crit_edge4
  %.pre = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %109, 0
  %.pre405 = insertvalue { ptr, ptr, ptr, i32 } %.pre, ptr %110, 1
  %.pre407 = insertvalue { ptr, ptr, ptr, i32 } %.pre405, ptr %111, 2
  %.pre409 = insertvalue { ptr, ptr, ptr, i32 } %.pre407, i32 %112, 3
  %.pre411 = sext i32 %112 to i64
  br label %._crit_edge8

.lr.ph402:                                        ; preds = %._crit_edge4
  %invariant.gep397 = getelementptr i8, ptr %109, i64 200
  %invariant.gep395 = getelementptr i8, ptr %153, i64 136
  %311 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %312 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %154, 1
  %313 = insertvalue { ptr, ptr, ptr, i32 } %312, ptr %155, 2
  %314 = insertvalue { ptr, ptr, ptr, i32 } %313, i32 %156, 3
  %315 = sext i32 %156 to i64
  %gep396 = getelementptr ptr, ptr %invariant.gep395, i64 %315
  %316 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %109, 0
  %317 = insertvalue { ptr, ptr, ptr, i32 } %316, ptr %110, 1
  %318 = insertvalue { ptr, ptr, ptr, i32 } %317, ptr %111, 2
  %319 = insertvalue { ptr, ptr, ptr, i32 } %318, i32 %112, 3
  %320 = sext i32 %112 to i64
  %gep398 = getelementptr ptr, ptr %invariant.gep397, i64 %320
  %321 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %322 = getelementptr inbounds i8, ptr %35, i64 8
  %323 = getelementptr inbounds i8, ptr %35, i64 16
  %324 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %325 = getelementptr inbounds i8, ptr %36, i64 8
  %326 = getelementptr inbounds i8, ptr %36, i64 16
  %327 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %328 = getelementptr inbounds i8, ptr %28, i64 8
  %329 = getelementptr inbounds i8, ptr %28, i64 16
  %330 = getelementptr inbounds i8, ptr %29, i64 8
  %331 = getelementptr inbounds i8, ptr %29, i64 16
  br label %332

332:                                              ; preds = %._crit_edge5, %.lr.ph402
  %.0354401 = phi i32 [ 0, %.lr.ph402 ], [ %.1, %._crit_edge5 ]
  %.0360400 = phi i1 [ true, %.lr.ph402 ], [ %.2362, %._crit_edge5 ]
  %.0363399 = phi i32 [ 0, %.lr.ph402 ], [ %391, %._crit_edge5 ]
  store ptr @_parameterization_i32, ptr %23, align 8
  %333 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %23)
  %334 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %153)
  %335 = load ptr, ptr %gep396, align 8
  store ptr @i32_typ, ptr %24, align 8
  %336 = call ptr @behavior_wrapper(ptr %335, { ptr, ptr, ptr, i32 } %314, ptr noundef nonnull align 8 dereferenceable(8) %24)
  %337 = call { ptr, i160 } %336({ ptr, ptr, ptr, i32 } %314, { ptr, ptr, ptr, i32 } %314, ptr nonnull %23, i32 %.0363399) #34
  %.fca.1.extract268 = extractvalue { ptr, i160 } %337, 1
  %.sroa.0261.0.insert.ext = and i160 %.fca.1.extract268, 4294967295
  %338 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0261.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %25, align 8
  %339 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %25)
  %340 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %109)
  %341 = load ptr, ptr %gep398, align 8
  store ptr @i32_typ, ptr %26, align 8
  %342 = call ptr @behavior_wrapper(ptr %341, { ptr, ptr, ptr, i32 } %319, ptr noundef nonnull align 8 dereferenceable(8) %26)
  %343 = call { ptr, i160 } %342({ ptr, ptr, ptr, i32 } %319, { ptr, ptr, ptr, i32 } %319, ptr nonnull %25, { ptr, i160 } %338) #34
  %.fca.0.extract253 = extractvalue { ptr, i160 } %343, 0
  %344 = icmp ne ptr %.fca.0.extract253, @nil_typ
  %345 = icmp ne ptr %.fca.0.extract253, null
  %.not369 = and i1 %344, %345
  br i1 %.not369, label %346, label %370

346:                                              ; preds = %332
  %.fca.1.extract254 = extractvalue { ptr, i160 } %343, 1
  %.sroa.2256.8.extract.trunc = trunc i160 %.fca.1.extract254 to i32
  %.sroa.1270.8.extract.trunc = trunc i160 %.fca.1.extract268 to i32
  %347 = add i32 %.sroa.1270.8.extract.trunc, 1
  %.not = icmp eq i32 %347, %.sroa.2256.8.extract.trunc
  br i1 %.not, label %._crit_edge6, label %348

348:                                              ; preds = %346
  %349 = call ptr @bump_malloc(i64 noundef 46)
  %350 = load <45 x i8>, ptr @falyz_Warning_Remove_returned_wrong_value_for_key_, align 64
  store <45 x i8> %350, ptr %349, align 64
  store ptr @String, ptr %27, align 8
  %351 = call { i64, i64 } @size_wrapper(ptr %321, ptr noundef nonnull align 8 dereferenceable(8) %27)
  %352 = extractvalue { i64, i64 } %351, 0
  %353 = call ptr @bump_malloc(i64 %352)
  %354 = insertvalue { ptr } undef, ptr %349, 0
  %355 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %353, 1
  %356 = insertvalue { ptr, ptr, ptr, i32 } %355, ptr undef, 2
  %357 = insertvalue { ptr, ptr, ptr, i32 } %356, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %28, align 8
  store ptr @_parameterization_i32, ptr %328, align 8
  store ptr @_parameterization_i32, ptr %329, align 8
  %358 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %28)
  %359 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %29, align 8
  store ptr @i32_typ, ptr %330, align 8
  store ptr @i32_typ, ptr %331, align 8
  %360 = call ptr @behavior_wrapper(ptr %324, { ptr, ptr, ptr, i32 } %357, ptr noundef nonnull align 8 dereferenceable(24) %29)
  call void %360({ ptr, ptr, ptr, i32 } %357, { ptr, ptr, ptr, i32 } %357, ptr nonnull %28, { ptr } %354, i32 45, i32 46) #34
  %361 = ptrtoint ptr %353 to i64
  %.sroa.3233.8.insert.ext = zext i64 %361 to i160
  %.sroa.3233.8.insert.insert = or disjoint i160 %.sroa.3233.8.insert.ext, 3402823669209384634633746074317682114560
  %362 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3233.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %30, align 8
  %363 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %30)
  %364 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %31, align 8
  %365 = call ptr @class_behavior_wrapper(ptr %327, ptr noundef nonnull align 8 dereferenceable(8) %31)
  call void %365(ptr nonnull %30, { ptr, i160 } %362) #34
  store ptr @_parameterization_i32, ptr %32, align 8
  %366 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %32)
  %367 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %33, align 8
  %368 = call ptr @class_behavior_wrapper(ptr %327, ptr noundef nonnull align 8 dereferenceable(8) %33)
  call void %368(ptr nonnull %32, { ptr, i160 } %338) #34
  br label %._crit_edge6

._crit_edge6:                                     ; preds = %348, %346
  %.1361 = phi i1 [ false, %348 ], [ %.0360400, %346 ]
  %369 = add i32 %.0354401, 1
  br label %._crit_edge5

370:                                              ; preds = %332
  %371 = call ptr @bump_malloc(i64 noundef 38)
  %372 = load <37 x i8>, ptr @vnkpo_Warning_Remove_returned_Nil_for_key_, align 64
  store <37 x i8> %372, ptr %371, align 64
  store ptr @String, ptr %34, align 8
  %373 = call { i64, i64 } @size_wrapper(ptr %321, ptr noundef nonnull align 8 dereferenceable(8) %34)
  %374 = extractvalue { i64, i64 } %373, 0
  %375 = call ptr @bump_malloc(i64 %374)
  %376 = insertvalue { ptr } undef, ptr %371, 0
  %377 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %375, 1
  %378 = insertvalue { ptr, ptr, ptr, i32 } %377, ptr undef, 2
  %379 = insertvalue { ptr, ptr, ptr, i32 } %378, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %35, align 8
  store ptr @_parameterization_i32, ptr %322, align 8
  store ptr @_parameterization_i32, ptr %323, align 8
  %380 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %35)
  %381 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %36, align 8
  store ptr @i32_typ, ptr %325, align 8
  store ptr @i32_typ, ptr %326, align 8
  %382 = call ptr @behavior_wrapper(ptr %324, { ptr, ptr, ptr, i32 } %379, ptr noundef nonnull align 8 dereferenceable(24) %36)
  call void %382({ ptr, ptr, ptr, i32 } %379, { ptr, ptr, ptr, i32 } %379, ptr nonnull %35, { ptr } %376, i32 37, i32 38) #34
  %383 = ptrtoint ptr %375 to i64
  %.sroa.3212.8.insert.ext = zext i64 %383 to i160
  %.sroa.3212.8.insert.insert = or disjoint i160 %.sroa.3212.8.insert.ext, 3402823669209384634633746074317682114560
  %384 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3212.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %37, align 8
  %385 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %37)
  %386 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %38, align 8
  %387 = call ptr @class_behavior_wrapper(ptr %327, ptr noundef nonnull align 8 dereferenceable(8) %38)
  call void %387(ptr nonnull %37, { ptr, i160 } %384) #34
  store ptr @_parameterization_i32, ptr %39, align 8
  %388 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %39)
  %389 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %40, align 8
  %390 = call ptr @class_behavior_wrapper(ptr %327, ptr noundef nonnull align 8 dereferenceable(8) %40)
  call void %390(ptr nonnull %39, { ptr, i160 } %338) #34
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %370, %._crit_edge6
  %.2362 = phi i1 [ %.1361, %._crit_edge6 ], [ false, %370 ]
  %.1 = phi i32 [ %369, %._crit_edge6 ], [ %.0354401, %370 ]
  %391 = add nuw nsw i32 %.0363399, 1
  %392 = icmp slt i32 %391, %.0365
  br i1 %392, label %332, label %._crit_edge8

._crit_edge8:                                     ; preds = %._crit_edge5, %._crit_edge4.._crit_edge8_crit_edge
  %.pre-phi412 = phi i64 [ %.pre411, %._crit_edge4.._crit_edge8_crit_edge ], [ %320, %._crit_edge5 ]
  %.pre-phi410 = phi { ptr, ptr, ptr, i32 } [ %.pre409, %._crit_edge4.._crit_edge8_crit_edge ], [ %319, %._crit_edge5 ]
  %.0360.lcssa = phi i1 [ true, %._crit_edge4.._crit_edge8_crit_edge ], [ %.2362, %._crit_edge5 ]
  %.0354.lcssa = phi i32 [ 0, %._crit_edge4.._crit_edge8_crit_edge ], [ %.1, %._crit_edge5 ]
  %393 = call i64 @clock()
  %.not370 = icmp eq i32 %.0354.lcssa, %.0365
  %394 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %395 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %109)
  %396 = getelementptr ptr, ptr %109, i64 %.pre-phi412
  %397 = getelementptr i8, ptr %396, i64 176
  %398 = load ptr, ptr %397, align 8
  %399 = call ptr @behavior_wrapper(ptr %398, { ptr, ptr, ptr, i32 } %.pre-phi410, ptr noundef nonnull align 8 %2)
  %400 = call i32 %399({ ptr, ptr, ptr, i32 } %.pre-phi410, { ptr, ptr, ptr, i32 } %.pre-phi410, ptr nonnull %2) #34
  %.not371 = icmp eq i32 %400, 0
  %401 = select i1 %.not371, i1 %.not370, i1 false
  %spec.select377 = select i1 %401, i1 %.0360.lcssa, i1 false
  br i1 %310, label %402, label %._crit_edge10

402:                                              ; preds = %._crit_edge8
  %403 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %404 = insertvalue { ptr, ptr, ptr, i32 } %403, ptr %154, 1
  %405 = insertvalue { ptr, ptr, ptr, i32 } %404, ptr %155, 2
  %406 = insertvalue { ptr, ptr, ptr, i32 } %405, i32 %156, 3
  store ptr @_parameterization_i32, ptr %41, align 8
  %407 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %41)
  %408 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %153)
  %409 = sext i32 %156 to i64
  %410 = getelementptr ptr, ptr %153, i64 %409
  %411 = getelementptr i8, ptr %410, i64 136
  %412 = load ptr, ptr %411, align 8
  store ptr @i32_typ, ptr %42, align 8
  %413 = call ptr @behavior_wrapper(ptr %412, { ptr, ptr, ptr, i32 } %406, ptr noundef nonnull align 8 dereferenceable(8) %42)
  %414 = call { ptr, i160 } %413({ ptr, ptr, ptr, i32 } %406, { ptr, ptr, ptr, i32 } %406, ptr nonnull %41, i32 0) #34
  %.fca.1.extract190 = extractvalue { ptr, i160 } %414, 1
  %.sroa.0186.0.insert.ext = and i160 %.fca.1.extract190, 4294967295
  %415 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0186.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %43, align 8
  %416 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %43)
  %417 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %109)
  %418 = getelementptr i8, ptr %396, i64 184
  %419 = load ptr, ptr %418, align 8
  store ptr @i32_typ, ptr %44, align 8
  %420 = call ptr @behavior_wrapper(ptr %419, { ptr, ptr, ptr, i32 } %.pre-phi410, ptr noundef nonnull align 8 dereferenceable(8) %44)
  %421 = call { ptr, i160 } %420({ ptr, ptr, ptr, i32 } %.pre-phi410, { ptr, ptr, ptr, i32 } %.pre-phi410, ptr nonnull %43, { ptr, i160 } %415) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %421, 0
  %422 = icmp eq ptr %.fca.0.extract, @nil_typ
  %423 = icmp eq ptr %.fca.0.extract, null
  %.not374.not = or i1 %422, %423
  %spec.select376 = select i1 %.not374.not, i1 %spec.select377, i1 false
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %402, %._crit_edge8
  %.6 = phi i1 [ %spec.select377, %._crit_edge8 ], [ %spec.select376, %402 ]
  %424 = call ptr @bump_malloc(i64 noundef 14)
  store <13 x i8> <i8 82, i8 101, i8 109, i8 111, i8 118, i8 101, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109>, ptr %424, align 16
  store ptr @String, ptr %45, align 8
  %425 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %426 = call { i64, i64 } @size_wrapper(ptr %425, ptr noundef nonnull align 8 dereferenceable(8) %45)
  %427 = extractvalue { i64, i64 } %426, 0
  %428 = call ptr @bump_malloc(i64 %427)
  %429 = insertvalue { ptr } undef, ptr %424, 0
  %430 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %428, 1
  %431 = insertvalue { ptr, ptr, ptr, i32 } %430, ptr undef, 2
  %432 = insertvalue { ptr, ptr, ptr, i32 } %431, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %46, align 8
  %433 = getelementptr inbounds i8, ptr %46, i64 8
  store ptr @_parameterization_i32, ptr %433, align 8
  %434 = getelementptr inbounds i8, ptr %46, i64 16
  store ptr @_parameterization_i32, ptr %434, align 8
  %435 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %46)
  %436 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %437 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %47, align 8
  %438 = getelementptr inbounds i8, ptr %47, i64 8
  store ptr @i32_typ, ptr %438, align 8
  %439 = getelementptr inbounds i8, ptr %47, i64 16
  store ptr @i32_typ, ptr %439, align 8
  %440 = call ptr @behavior_wrapper(ptr %437, { ptr, ptr, ptr, i32 } %432, ptr noundef nonnull align 8 dereferenceable(24) %47)
  call void %440({ ptr, ptr, ptr, i32 } %432, { ptr, ptr, ptr, i32 } %432, ptr nonnull %46, { ptr } %429, i32 13, i32 14) #34
  %441 = sub i64 %393, %309
  call void @print_benchmark_result({ ptr, ptr, ptr, i32 } %432, i32 %.0365, i64 %441)
  %442 = call ptr @bump_malloc(i64 noundef 19)
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %442, align 32
  store ptr @String, ptr %48, align 8
  %443 = call { i64, i64 } @size_wrapper(ptr %425, ptr noundef nonnull align 8 dereferenceable(8) %48)
  %444 = extractvalue { i64, i64 } %443, 0
  %445 = call ptr @bump_malloc(i64 %444)
  %446 = insertvalue { ptr } undef, ptr %442, 0
  %447 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %445, 1
  %448 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr undef, 2
  %449 = insertvalue { ptr, ptr, ptr, i32 } %448, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %49, align 8
  %450 = getelementptr inbounds i8, ptr %49, i64 8
  store ptr @_parameterization_i32, ptr %450, align 8
  %451 = getelementptr inbounds i8, ptr %49, i64 16
  store ptr @_parameterization_i32, ptr %451, align 8
  %452 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %49)
  %453 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %50, align 8
  %454 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr @i32_typ, ptr %454, align 8
  %455 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr @i32_typ, ptr %455, align 8
  %456 = call ptr @behavior_wrapper(ptr %437, { ptr, ptr, ptr, i32 } %449, ptr noundef nonnull align 8 dereferenceable(24) %50)
  call void %456({ ptr, ptr, ptr, i32 } %449, { ptr, ptr, ptr, i32 } %449, ptr nonnull %49, { ptr } %446, i32 18, i32 19) #34
  %457 = ptrtoint ptr %445 to i64
  %.sroa.3152.8.insert.ext = zext i64 %457 to i160
  %.sroa.3152.8.insert.insert = or disjoint i160 %.sroa.3152.8.insert.ext, 3402823669209384634633746074317682114560
  %458 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3152.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %51, align 8
  %459 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %51)
  %460 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %461 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @String, ptr %52, align 8
  %462 = call ptr @class_behavior_wrapper(ptr %461, ptr noundef nonnull align 8 dereferenceable(8) %52)
  call void %462(ptr nonnull %51, { ptr, i160 } %458) #34
  %463 = call ptr @bump_malloc(i64 noundef 5)
  %464 = insertvalue { ptr } undef, ptr %463, 0
  %. = select i1 %.6, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %.446 = select i1 %.6, ptr %53, ptr %58
  %.447 = select i1 %.6, ptr %54, ptr %59
  %.448 = select i1 %.6, ptr %55, ptr %60
  %.449 = select i1 %.6, ptr %56, ptr %61
  %.450 = select i1 %.6, ptr %57, ptr %62
  store <4 x i8> %., ptr %463, align 4
  store ptr @String, ptr %.446, align 8
  %465 = call { i64, i64 } @size_wrapper(ptr %425, ptr noundef nonnull align 8 dereferenceable(8) %.446)
  %466 = extractvalue { i64, i64 } %465, 0
  %467 = call ptr @bump_malloc(i64 %466)
  %468 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %467, 1
  %469 = insertvalue { ptr, ptr, ptr, i32 } %468, ptr undef, 2
  %470 = insertvalue { ptr, ptr, ptr, i32 } %469, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %.447, align 8
  %.447.sroa.sel.v = select i1 %.6, ptr %54, ptr %59
  %.447.sroa.sel = getelementptr inbounds i8, ptr %.447.sroa.sel.v, i64 8
  store ptr @_parameterization_i32, ptr %.447.sroa.sel, align 8
  %.447.sroa.sel459.v = select i1 %.6, ptr %54, ptr %59
  %.447.sroa.sel459 = getelementptr inbounds i8, ptr %.447.sroa.sel459.v, i64 16
  store ptr @_parameterization_i32, ptr %.447.sroa.sel459, align 8
  %471 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %.447)
  %472 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %.448, align 8
  %.448.sroa.sel.v = select i1 %.6, ptr %55, ptr %60
  %.448.sroa.sel = getelementptr inbounds i8, ptr %.448.sroa.sel.v, i64 8
  store ptr @i32_typ, ptr %.448.sroa.sel, align 8
  %.448.sroa.sel454.v = select i1 %.6, ptr %55, ptr %60
  %.448.sroa.sel454 = getelementptr inbounds i8, ptr %.448.sroa.sel454.v, i64 16
  store ptr @i32_typ, ptr %.448.sroa.sel454, align 8
  %473 = call ptr @behavior_wrapper(ptr %437, { ptr, ptr, ptr, i32 } %470, ptr noundef nonnull align 8 dereferenceable(24) %.448)
  call void %473({ ptr, ptr, ptr, i32 } %470, { ptr, ptr, ptr, i32 } %470, ptr nonnull %.447, { ptr } %464, i32 4, i32 5) #34
  %474 = ptrtoint ptr %467 to i64
  %.sroa.3126.8.insert.ext = zext i64 %474 to i160
  %.sroa.3126.8.insert.insert = or disjoint i160 %.sroa.3126.8.insert.ext, 3402823669209384634633746074317682114560
  %475 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3126.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %.449, align 8
  %476 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %.449)
  %477 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %.450, align 8
  %478 = call ptr @class_behavior_wrapper(ptr %461, ptr noundef nonnull align 8 dereferenceable(8) %.450)
  call void %478(ptr nonnull %.449, { ptr, i160 } %475) #34
  %479 = call ptr @bump_malloc(i64 noundef 21)
  store <20 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 73, i8 116, i8 101, i8 109, i8 115, i8 32, i8 114, i8 101, i8 109, i8 111, i8 118, i8 101, i8 100, i8 58, i8 32>, ptr %479, align 32
  store ptr @String, ptr %63, align 8
  %480 = call { i64, i64 } @size_wrapper(ptr %425, ptr noundef nonnull align 8 dereferenceable(8) %63)
  %481 = extractvalue { i64, i64 } %480, 0
  %482 = call ptr @bump_malloc(i64 %481)
  %483 = insertvalue { ptr } undef, ptr %479, 0
  %484 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %482, 1
  %485 = insertvalue { ptr, ptr, ptr, i32 } %484, ptr undef, 2
  %486 = insertvalue { ptr, ptr, ptr, i32 } %485, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %64, align 8
  %487 = getelementptr inbounds i8, ptr %64, i64 8
  store ptr @_parameterization_i32, ptr %487, align 8
  %488 = getelementptr inbounds i8, ptr %64, i64 16
  store ptr @_parameterization_i32, ptr %488, align 8
  %489 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %64)
  %490 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %65, align 8
  %491 = getelementptr inbounds i8, ptr %65, i64 8
  store ptr @i32_typ, ptr %491, align 8
  %492 = getelementptr inbounds i8, ptr %65, i64 16
  store ptr @i32_typ, ptr %492, align 8
  %493 = call ptr @behavior_wrapper(ptr %437, { ptr, ptr, ptr, i32 } %486, ptr noundef nonnull align 8 dereferenceable(24) %65)
  call void %493({ ptr, ptr, ptr, i32 } %486, { ptr, ptr, ptr, i32 } %486, ptr nonnull %64, { ptr } %483, i32 20, i32 21) #34
  %494 = ptrtoint ptr %482 to i64
  %.sroa.3113.8.insert.ext = zext i64 %494 to i160
  %.sroa.3113.8.insert.insert = or disjoint i160 %.sroa.3113.8.insert.ext, 3402823669209384634633746074317682114560
  %495 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3113.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %66, align 8
  %496 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %66)
  %497 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %67, align 8
  %498 = call ptr @class_behavior_wrapper(ptr %461, ptr noundef nonnull align 8 dereferenceable(8) %67)
  call void %498(ptr nonnull %66, { ptr, i160 } %495) #34
  %.sroa.0108.0.insert.ext = zext i32 %.0354.lcssa to i160
  %499 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0108.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %68, align 8
  %500 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %68)
  %501 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @i32_typ, ptr %69, align 8
  %502 = call ptr @class_behavior_wrapper(ptr %461, ptr noundef nonnull align 8 dereferenceable(8) %69)
  call void %502(ptr nonnull %68, { ptr, i160 } %499) #34
  %503 = call ptr @bump_malloc(i64 noundef 2)
  store <1 x i8> <i8 41>, ptr %503, align 1
  store ptr @String, ptr %70, align 8
  %504 = call { i64, i64 } @size_wrapper(ptr %425, ptr noundef nonnull align 8 dereferenceable(8) %70)
  %505 = extractvalue { i64, i64 } %504, 0
  %506 = call ptr @bump_malloc(i64 %505)
  %507 = insertvalue { ptr } undef, ptr %503, 0
  %508 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %506, 1
  %509 = insertvalue { ptr, ptr, ptr, i32 } %508, ptr undef, 2
  %510 = insertvalue { ptr, ptr, ptr, i32 } %509, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %71, align 8
  %511 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr @_parameterization_i32, ptr %511, align 8
  %512 = getelementptr inbounds i8, ptr %71, i64 16
  store ptr @_parameterization_i32, ptr %512, align 8
  %513 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %71)
  %514 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %72, align 8
  %515 = getelementptr inbounds i8, ptr %72, i64 8
  store ptr @i32_typ, ptr %515, align 8
  %516 = getelementptr inbounds i8, ptr %72, i64 16
  store ptr @i32_typ, ptr %516, align 8
  %517 = call ptr @behavior_wrapper(ptr %437, { ptr, ptr, ptr, i32 } %510, ptr noundef nonnull align 8 dereferenceable(24) %72)
  call void %517({ ptr, ptr, ptr, i32 } %510, { ptr, ptr, ptr, i32 } %510, ptr nonnull %71, { ptr } %507, i32 1, i32 2) #34
  %518 = ptrtoint ptr %506 to i64
  %.sroa.3.8.insert.ext = zext i64 %518 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %519 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %73, align 8
  %520 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %73)
  %521 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %74, align 8
  %522 = call ptr @class_behavior_wrapper(ptr %461, ptr noundef nonnull align 8 dereferenceable(8) %74)
  call void %522(ptr nonnull %73, { ptr, i160 } %519) #34
  ret void
}

define noundef i32 @main() local_unnamed_addr #3 {
  %1 = alloca [1 x ptr], align 8
  %2 = alloca [3 x ptr], align 8
  %3 = alloca { ptr, ptr, ptr }, align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca [1 x ptr], align 8
  %10 = alloca { ptr }, align 8
  call void @setup_landing_pad()
  %11 = call ptr @bump_malloc(i64 noundef 23)
  store <22 x i8> <i8 45, i8 45, i8 45, i8 32, i8 77, i8 97, i8 112, i8 32, i8 66, i8 101, i8 110, i8 99, i8 104, i8 109, i8 97, i8 114, i8 107, i8 115, i8 32, i8 45, i8 45, i8 45>, ptr %11, align 32
  store ptr @String, ptr %1, align 8
  %12 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr noundef nonnull align 8 dereferenceable(8) %1)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = call ptr @bump_malloc(i64 %14)
  %16 = insertvalue { ptr } undef, ptr %11, 0
  %17 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %15, 1
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr undef, 2
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %2, align 8
  %20 = getelementptr inbounds i8, ptr %2, i64 8
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %2, i64 16
  store ptr @_parameterization_i32, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %2)
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %24 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %3, align 8
  %25 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr @i32_typ, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %3, i64 16
  store ptr @i32_typ, ptr %26, align 8
  %27 = call ptr @behavior_wrapper(ptr %24, { ptr, ptr, ptr, i32 } %19, ptr noundef nonnull align 8 dereferenceable(24) %3)
  call void %27({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %2, { ptr } %16, i32 22, i32 23) #34
  %28 = ptrtoint ptr %15 to i64
  %.sroa.318.8.insert.ext = zext i64 %28 to i160
  %.sroa.318.8.insert.insert = or disjoint i160 %.sroa.318.8.insert.ext, 3402823669209384634633746074317682114560
  %29 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.318.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %4, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  %32 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @String, ptr %5, align 8
  %33 = call ptr @class_behavior_wrapper(ptr %32, ptr noundef nonnull align 8 dereferenceable(8) %5)
  call void %33(ptr nonnull %4, { ptr, i160 } %29) #34
  call void @benchmark_insert_sequential(i32 noundef 1000000)
  call void @benchmark_insert_random(i32 noundef 1000000)
  call void @benchmark_get_sequential_hit(i32 noundef 1000000)
  call void @benchmark_get_random_hit(i32 noundef 1000000)
  call void @benchmark_get_random_miss(i32 noundef 1000000)
  call void @benchmark_remove_random(i32 noundef 1000000)
  %34 = call ptr @bump_malloc(i64 noundef 28)
  store <27 x i8> <i8 45, i8 45, i8 45, i8 32, i8 66, i8 101, i8 110, i8 99, i8 104, i8 109, i8 97, i8 114, i8 107, i8 115, i8 32, i8 67, i8 111, i8 109, i8 112, i8 108, i8 101, i8 116, i8 101, i8 32, i8 45, i8 45, i8 45>, ptr %34, align 32
  store ptr @String, ptr %6, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %12, ptr noundef nonnull align 8 dereferenceable(8) %6)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = insertvalue { ptr } undef, ptr %34, 0
  %39 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %37, 1
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr undef, 2
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %7, align 8
  %42 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %7)
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  store ptr @buffer_typ, ptr %8, align 8
  %46 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %46, align 8
  %47 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %47, align 8
  %48 = call ptr @behavior_wrapper(ptr %24, { ptr, ptr, ptr, i32 } %41, ptr noundef nonnull align 8 dereferenceable(24) %8)
  call void %48({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %7, { ptr } %38, i32 27, i32 28) #34
  %49 = ptrtoint ptr %37 to i64
  %.sroa.3.8.insert.ext = zext i64 %49 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %50 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %9, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %9)
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @IO)
  store ptr @String, ptr %10, align 8
  %53 = call ptr @class_behavior_wrapper(ptr %32, ptr noundef nonnull align 8 dereferenceable(8) %10)
  call void %53(ptr nonnull %9, { ptr, i160 } %50) #34
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_bool_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_bool_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_bool_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %7, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.2, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr nocapture nofree writeonly %2) #3 {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = trunc i160 %.fca.1.extract to i64
  %6 = inttoptr i64 %5 to ptr
  %7 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_bool_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp slt i64 %8, 17
  %10 = select i1 %9, ptr %.fca.1.gep, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %10, i64 %8, i1 noundef false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_any_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Object(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_IO(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @IO_B__Self_print_xi32__Self_print_xf64__Self_print_xString__Self_print_xRepresentable__Self_print_xCharacter__Self_print_xi64__Self_print_xi1__Self_print_xNil__Self_print_xi8(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #3 {
  %2 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #24
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @i8_typ
  br i1 %4, label %58, label %5

5:                                                ; preds = %1
  %6 = getelementptr i8, ptr %3, i64 8
  %7 = getelementptr i8, ptr %3, i64 16
  %8 = getelementptr i8, ptr %3, i64 24
  %9 = getelementptr i8, ptr %3, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @Character, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 noundef ptrtoint (ptr @Character to i64), ptr %13)
  %.pre = load i64, ptr @String, align 8
  br i1 %15, label %16, label %.critedge

16:                                               ; preds = %5
  %17 = load i64, ptr %6, align 4
  %18 = load i64, ptr %7, align 4
  %19 = load ptr, ptr %8, align 8
  %20 = load ptr, ptr %9, align 8
  %21 = call i1 @subtype_test_wrapper(ptr %19, i64 %18, i64 %17, i64 %.pre, i64 noundef ptrtoint (ptr @String to i64), ptr %20)
  br i1 %21, label %.critedge, label %58

.critedge:                                        ; preds = %5, %16
  %22 = load i64, ptr %6, align 4
  %23 = load i64, ptr %7, align 4
  %24 = load ptr, ptr %8, align 8
  %25 = load ptr, ptr %9, align 8
  %26 = call i1 @subtype_test_wrapper(ptr %24, i64 %23, i64 %22, i64 %.pre, i64 noundef ptrtoint (ptr @String to i64), ptr %25)
  br i1 %26, label %27, label %.critedge15

27:                                               ; preds = %.critedge
  %28 = load i64, ptr %6, align 4
  %29 = load i64, ptr %7, align 4
  %30 = load ptr, ptr %8, align 8
  %31 = load ptr, ptr %9, align 8
  %32 = call i1 @subtype_test_wrapper(ptr %30, i64 %29, i64 %28, i64 %14, i64 noundef ptrtoint (ptr @Character to i64), ptr %31)
  br i1 %32, label %.critedge15, label %58

.critedge15:                                      ; preds = %.critedge, %27
  %33 = icmp eq ptr %3, @f64_typ
  br i1 %33, label %58, label %34

34:                                               ; preds = %.critedge15
  %35 = load i64, ptr %6, align 4
  %36 = load i64, ptr %7, align 4
  %37 = load ptr, ptr %8, align 8
  %38 = load ptr, ptr %9, align 8
  %39 = load i64, ptr @Representable, align 8
  %40 = call i1 @subtype_test_wrapper(ptr %37, i64 %36, i64 %35, i64 %39, i64 noundef ptrtoint (ptr @Representable to i64), ptr %38)
  br i1 %40, label %41, label %.critedge17

41:                                               ; preds = %34
  %42 = load i64, ptr %6, align 4
  %43 = load i64, ptr %7, align 4
  %44 = load ptr, ptr %8, align 8
  %45 = load ptr, ptr %9, align 8
  %46 = call i1 @subtype_test_wrapper(ptr %44, i64 %43, i64 %42, i64 %.pre, i64 noundef ptrtoint (ptr @String to i64), ptr %45)
  br i1 %46, label %.critedge17, label %47

47:                                               ; preds = %41
  %48 = load i64, ptr %6, align 4
  %49 = load i64, ptr %7, align 4
  %50 = load ptr, ptr %8, align 8
  %51 = load ptr, ptr %9, align 8
  %52 = call i1 @subtype_test_wrapper(ptr %50, i64 %49, i64 %48, i64 %14, i64 noundef ptrtoint (ptr @Character to i64), ptr %51)
  br i1 %52, label %.critedge17, label %58

.critedge17:                                      ; preds = %41, %34, %47
  %53 = icmp eq ptr %3, @bool_typ
  br i1 %53, label %58, label %54

54:                                               ; preds = %.critedge17
  %55 = icmp eq ptr %3, @i32_typ
  %56 = icmp eq ptr %3, @i64_typ
  %57 = select i1 %56, i32 6, i32 8
  %.reg2mem41.0 = select i1 %55, i32 1, i32 %57
  br label %58

58:                                               ; preds = %27, %.critedge15, %47, %54, %.critedge17, %16, %1
  %.reg2mem29.0 = phi i32 [ 9, %1 ], [ 2, %.critedge15 ], [ %.reg2mem41.0, %54 ], [ 7, %.critedge17 ], [ 4, %47 ], [ 3, %27 ], [ 5, %16 ]
  %59 = zext nneg i32 %.reg2mem29.0 to i64
  %60 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %59
  %61 = getelementptr i8, ptr %60, i64 80
  %62 = load ptr, ptr %61, align 8
  ret ptr %62
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi32(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #21 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %.sroa.1.8.extract.trunc) #22
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xf64(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #21 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = bitcast i64 %.sroa.1.8.extract.trunc to double
  %4 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @float_string, double %3) #22
  ret void
}

define void @IO__Self_print_xString(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #3 {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %5, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 8 dereferenceable(688) @String)
  %6 = load ptr, ptr %4, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %8 = load ptr, ptr %5, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %8, 1
  %10 = getelementptr inbounds i8, ptr %4, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr inbounds i8, ptr %4, i64 24
  %14 = load i32, ptr %13, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %17 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %6)
  %18 = sext i32 %14 to i64
  %19 = getelementptr ptr, ptr %6, i64 %18
  %20 = getelementptr i8, ptr %19, i64 80
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr @behavior_wrapper(ptr %21, { ptr, ptr, ptr, i32 } %15, ptr noundef nonnull align 8 %3)
  %23 = call { ptr } %22({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3) #34
  %.fca.0.extract = extractvalue { ptr } %23, 0
  %puts = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract) #34
  ret void
}

define void @IO__Self_print_xRepresentable(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #3 {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract3, ptr %5, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 8 dereferenceable(72) @Representable)
  %6 = load ptr, ptr %4, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %8 = load ptr, ptr %5, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %8, 1
  %10 = getelementptr inbounds i8, ptr %4, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr inbounds i8, ptr %4, i64 24
  %14 = load i32, ptr %13, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %17 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef %6)
  %18 = sext i32 %14 to i64
  %19 = getelementptr ptr, ptr %6, i64 %18
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr @behavior_wrapper(ptr %20, { ptr, ptr, ptr, i32 } %15, ptr noundef nonnull align 8 %3)
  %22 = call { ptr, ptr, ptr, i32 } %21({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull align 8 %3) #34
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr %.fca.1.extract, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr %.fca.2.extract, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %23, i64 24
  store i32 %.fca.3.extract, ptr %26, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %23, ptr noundef nonnull align 8 dereferenceable(688) @String)
  %27 = load ptr, ptr %23, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %24, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %25, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %26, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %27)
  %37 = sext i32 %33 to i64
  %38 = getelementptr ptr, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %38, i64 80
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %34, ptr noundef nonnull align 8 %3)
  %42 = call { ptr } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %3) #34
  %.fca.0.extract = extractvalue { ptr } %42, 0
  %puts = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract) #34
  ret void
}

define void @IO__Self_print_xCharacter(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #3 {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %5, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 8 dereferenceable(96) @Character)
  %6 = call ptr @bump_malloc(i64 noundef 2)
  %7 = load ptr, ptr %4, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %9 = load ptr, ptr %5, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %9, 1
  %11 = getelementptr inbounds i8, ptr %4, i64 16
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 2
  %14 = getelementptr inbounds i8, ptr %4, i64 24
  %15 = load i32, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %15, 3
  %17 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %7)
  %19 = sext i32 %15 to i64
  %20 = getelementptr ptr, ptr %7, i64 %19
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = call ptr @behavior_wrapper(ptr %22, { ptr, ptr, ptr, i32 } %16, ptr noundef nonnull align 8 %3)
  %24 = call i8 %23({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %3) #34
  store i8 %24, ptr %6, align 1
  %25 = getelementptr i8, ptr %6, i64 1
  store i8 0, ptr %25, align 1
  %puts = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(2) %6) #34
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi64(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #21 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %.sroa.1.8.extract.trunc) #22
  ret void
}

define void @IO__Self_print_xi1(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #3 {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %10 = trunc i160 %.fca.1.extract to i1
  br i1 %10, label %11, label %34

11:                                               ; preds = %2
  %12 = call ptr @bump_malloc(i64 noundef 5)
  store <4 x i8> <i8 116, i8 114, i8 117, i8 101>, ptr %12, align 4
  store ptr @String, ptr %4, align 8
  %13 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %14 = call { i64, i64 } @size_wrapper(ptr %13, ptr noundef nonnull align 8 dereferenceable(8) %4)
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = call ptr @bump_malloc(i64 %15)
  %17 = insertvalue { ptr } undef, ptr %12, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %16, 1
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr undef, 2
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %5, align 8
  %21 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @_parameterization_i32, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @_parameterization_i32, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %5)
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %25 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %6, align 8
  %26 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @i32_typ, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr @i32_typ, ptr %27, align 8
  %28 = call ptr @behavior_wrapper(ptr %25, { ptr, ptr, ptr, i32 } %20, ptr noundef nonnull align 8 dereferenceable(24) %6)
  call void %28({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %5, { ptr } %17, i32 4, i32 5) #34
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %31 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 160), align 8
  %32 = call ptr @behavior_wrapper(ptr %31, { ptr, ptr, ptr, i32 } %20, ptr noundef nonnull align 8 %3)
  %33 = call { ptr } %32({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %3) #34
  br label %57

34:                                               ; preds = %2
  %35 = call ptr @bump_malloc(i64 noundef 6)
  store <5 x i8> <i8 102, i8 97, i8 108, i8 115, i8 101>, ptr %35, align 8
  store ptr @String, ptr %7, align 8
  %36 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %37 = call { i64, i64 } @size_wrapper(ptr %36, ptr noundef nonnull align 8 dereferenceable(8) %7)
  %38 = extractvalue { i64, i64 } %37, 0
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = insertvalue { ptr } undef, ptr %35, 0
  %41 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %39, 1
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr undef, 2
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %8, align 8
  %44 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_i32, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %8)
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %48 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %9, align 8
  %49 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %49, align 8
  %50 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %50, align 8
  %51 = call ptr @behavior_wrapper(ptr %48, { ptr, ptr, ptr, i32 } %43, ptr noundef nonnull align 8 dereferenceable(24) %9)
  call void %51({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull %8, { ptr } %40, i32 5, i32 6) #34
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %54 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 160), align 8
  %55 = call ptr @behavior_wrapper(ptr %54, { ptr, ptr, ptr, i32 } %43, ptr noundef nonnull align 8 %3)
  %56 = call { ptr } %55({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull %3) #34
  br label %57

57:                                               ; preds = %34, %11
  %.sink = phi { ptr } [ %56, %34 ], [ %33, %11 ]
  %.fca.0.extract1 = extractvalue { ptr } %.sink, 0
  %puts = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract1) #34
  ret void
}

define void @IO__Self_print_xNil(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #3 {
  %3 = alloca [0 x ptr], align 8
  %4 = call ptr @bump_malloc(i64 noundef 4)
  store <3 x i8> <i8 110, i8 105, i8 108>, ptr %4, align 4
  %5 = alloca [1 x ptr], align 8
  store ptr @String, ptr %5, align 8
  %6 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %7 = call { i64, i64 } @size_wrapper(ptr %6, ptr noundef nonnull align 8 dereferenceable(8) %5)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = call ptr @bump_malloc(i64 %8)
  %10 = insertvalue { ptr } undef, ptr %4, 0
  %11 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %9, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr undef, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 10, 3
  %14 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr @_parameterization_i32, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 16
  store ptr @_parameterization_i32, ptr %16, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %14)
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %19 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr @i32_typ, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr @i32_typ, ptr %22, align 8
  %23 = call ptr @behavior_wrapper(ptr %19, { ptr, ptr, ptr, i32 } %13, ptr noundef nonnull align 8 dereferenceable(24) %20)
  call void %23({ ptr, ptr, ptr, i32 } %13, { ptr, ptr, ptr, i32 } %13, ptr nonnull %14, { ptr } %10, i32 3, i32 4) #34
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %26 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 160), align 8
  %27 = call ptr @behavior_wrapper(ptr %26, { ptr, ptr, ptr, i32 } %13, ptr noundef nonnull align 8 %3)
  %28 = call { ptr } %27({ ptr, ptr, ptr, i32 } %13, { ptr, ptr, ptr, i32 } %13, ptr nonnull %3) #34
  %.fca.0.extract = extractvalue { ptr } %28, 0
  %puts = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract) #34
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi8(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #21 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  %3 = sext i8 %.sroa.1.8.extract.trunc to i32
  %4 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3) #22
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #22

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i32_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 4, i64 4 }
}

define { ptr, i160 } @_box_i32_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_i32_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %7, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.2, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr nocapture nofree writeonly %2) #3 {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = trunc i160 %.fca.1.extract to i64
  %6 = inttoptr i64 %5 to ptr
  %7 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_i32_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp slt i64 %8, 17
  %10 = select i1 %9, ptr %.fca.1.gep, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %10, i64 %8, i1 noundef false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_buffer_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_buffer_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_buffer_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %7, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.2, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @buffer_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_buffer_typ({ ptr, i160 } %0, ptr %1, ptr nocapture nofree writeonly %2) #3 {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = trunc i160 %.fca.1.extract to i64
  %6 = inttoptr i64 %5 to ptr
  %7 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_buffer_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp slt i64 %8, 17
  %10 = select i1 %9, ptr %.fca.1.gep, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %10, i64 %8, i1 noundef false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_String(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 16, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull align 8 dereferenceable(16) ptr @String_field_String_0(ptr nocapture nofree readnone %0) #1 {
  ret ptr @_parameterization_Character
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @String_B__Self_from_c_string_c_stringBufferi8(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #23 {
  %2 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #24
  ret ptr @String__Self_from_c_string_c_stringBufferi8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 320
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_bytesBufferi8_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 328
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_append_xi8({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 6499063144389013426, i64 noundef ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 376
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B__index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 6499063144389013426, i64 noundef ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 392
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 6681222582356018452, i64 noundef ptrtoint (ptr @Character to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 432
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 464
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 472
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @String_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 480
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @String_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 488
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @String_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 496
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 504
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @String__Self_from_c_string_c_stringBufferi8(ptr nocapture nofree readnone %0, { ptr } %1) #3 {
  %3 = alloca [1 x ptr], align 8
  %4 = alloca [3 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr } %1, 0
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge, %2
  %.0 = phi i32 [ 0, %2 ], [ %10, %._crit_edge ]
  %7 = sext i32 %.0 to i64
  %8 = getelementptr i8, ptr %.fca.0.extract, i64 %7
  %9 = load i8, ptr %8, align 1
  %.not = icmp eq i8 %9, 0
  %10 = add i32 %.0, 1
  br i1 %.not, label %11, label %._crit_edge

11:                                               ; preds = %._crit_edge
  store ptr @String, ptr %3, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %3)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = call ptr @bump_malloc(i64 %13)
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %14, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %4, align 8
  %18 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %4)
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  store ptr @buffer_typ, ptr %5, align 8
  %22 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @i32_typ, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @i32_typ, ptr %23, align 8
  %24 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 dereferenceable(24) %5)
  call void %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %4, { ptr } %1, i32 %.0, i32 %10) #34
  store ptr @String, ptr %6, align 8
  %25 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %14, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %6, i64 16
  %27 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 10, ptr %27, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %28 = load ptr, ptr %6, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = load ptr, ptr %25, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 1
  %32 = load ptr, ptr %26, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = load i32, ptr %27, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %34, 3
  ret { ptr, ptr, ptr, i32 } %35
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %8 = call ptr @bump_malloc(i64 noundef 1)
  %9 = load ptr, ptr %5, align 8
  %10 = load ptr, ptr %4, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %7, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = insertvalue { ptr } undef, ptr %8, 0
  call void %17(ptr %9, { ptr } %18) #25
  %19 = load ptr, ptr %5, align 8
  %20 = load ptr, ptr %4, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %20)
  %22 = load i32, ptr %7, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 16
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %19, i32 1) #25
  %29 = load ptr, ptr %5, align 8
  %30 = load ptr, ptr %4, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %30)
  %32 = load i32, ptr %7, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr ptr, ptr %30, i64 %33
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  call void %38(ptr %29, i32 0) #25
  ret void
}

define void @String_init_bytesBufferi8_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, i32 %4, i32 %5) #3 {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %11, { ptr } %3) #25
  %20 = load ptr, ptr %8, align 8
  %21 = load ptr, ptr %7, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %21)
  %23 = load i32, ptr %10, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, i32 %4) #25
  %30 = load ptr, ptr %8, align 8
  %31 = load ptr, ptr %7, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %31)
  %33 = load i32, ptr %10, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 16
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %30, i32 %5) #25
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #26
  ret i32 %17
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #26
  ret i32 %17
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call { ptr } %15(ptr %8) #26
  ret { ptr } %16
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #26
  %18 = add i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = call ptr @bump_malloc(i64 %19)
  %21 = load ptr, ptr %5, align 8
  %22 = load ptr, ptr %4, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %22)
  %24 = load i32, ptr %7, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21) #26
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %._crit_edge, label %._crit_edge1._crit_edge

._crit_edge:                                      ; preds = %3, %._crit_edge
  %32 = phi ptr [ %49, %._crit_edge ], [ %26, %3 ]
  %33 = phi ptr [ %45, %._crit_edge ], [ %22, %3 ]
  %34 = phi ptr [ %44, %._crit_edge ], [ %21, %3 ]
  %.020 = phi i32 [ %43, %._crit_edge ], [ 0, %3 ]
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %33)
  %36 = load ptr, ptr %32, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr } %37(ptr %34) #26
  %.fca.0.extract15 = extractvalue { ptr } %38, 0
  %39 = zext nneg i32 %.020 to i64
  %40 = getelementptr i8, ptr %.fca.0.extract15, i64 %39
  %41 = load i8, ptr %40, align 1
  %42 = getelementptr i8, ptr %20, i64 %39
  store i8 %41, ptr %42, align 1
  %43 = add nuw nsw i32 %.020, 1
  %44 = load ptr, ptr %5, align 8
  %45 = load ptr, ptr %4, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %45)
  %47 = load i32, ptr %7, align 8
  %48 = sext i32 %47 to i64
  %49 = getelementptr ptr, ptr %45, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call i32 %52(ptr %44) #26
  %54 = icmp slt i32 %43, %53
  br i1 %54, label %._crit_edge, label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge, %3
  %55 = phi ptr [ %29, %3 ], [ %52, %._crit_edge ]
  %56 = phi ptr [ %22, %3 ], [ %45, %._crit_edge ]
  %57 = phi ptr [ %21, %3 ], [ %44, %._crit_edge ]
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %56)
  %59 = call i32 %55(ptr %57) #26
  %60 = sext i32 %59 to i64
  %61 = getelementptr i8, ptr %20, i64 %60
  store i8 0, ptr %61, align 1
  %62 = insertvalue { ptr } undef, ptr %20, 0
  ret { ptr } %62
}

define { ptr, ptr, ptr, i32 } @String_append_xi8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i8 %3) #3 {
  %.sroa.029 = alloca ptr, align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0 = alloca ptr, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call i32 %19(ptr %11) #26
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %12)
  %22 = getelementptr i8, ptr %16, i64 16
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i32 %24(ptr %11) #26
  %26 = icmp slt i32 %20, %25
  %.sroa.gep = getelementptr inbounds i8, ptr %6, i64 8
  %.sroa.gep22 = getelementptr inbounds i8, ptr %5, i64 8
  %.sroa.gep24 = getelementptr inbounds i8, ptr %6, i64 16
  %.sroa.gep25 = getelementptr inbounds i8, ptr %5, i64 16
  %.sroa.gep27 = getelementptr inbounds i8, ptr %6, i64 24
  %.sroa.gep28 = getelementptr inbounds i8, ptr %5, i64 24
  br i1 %26, label %._crit_edge.thread, label %27

27:                                               ; preds = %4
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %12)
  %29 = call i32 %24(ptr %11) #26
  %30 = shl i32 %29, 1
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %12)
  %32 = getelementptr i8, ptr %23, i64 8
  %33 = load ptr, ptr %32, align 8
  call void %33(ptr %11, i32 %30) #25
  %34 = load ptr, ptr %8, align 8
  %35 = load ptr, ptr %7, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %35)
  %37 = load i32, ptr %10, align 8
  %38 = sext i32 %37 to i64
  %39 = getelementptr ptr, ptr %35, i64 %38
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %40, align 8
  %42 = call { ptr } %41(ptr %34) #26
  %.fca.0.extract17 = extractvalue { ptr } %42, 0
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %35)
  %44 = getelementptr i8, ptr %39, i64 16
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call i32 %46(ptr %34) #26
  %48 = sext i32 %47 to i64
  %49 = call ptr @bump_malloc(i64 %48)
  %50 = load ptr, ptr %8, align 8
  %51 = load ptr, ptr %7, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %51)
  %53 = load i32, ptr %10, align 8
  %54 = sext i32 %53 to i64
  %55 = getelementptr ptr, ptr %51, i64 %54
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr } undef, ptr %49, 0
  call void %58(ptr %50, { ptr } %59) #25
  %60 = load ptr, ptr %8, align 8
  %61 = load ptr, ptr %7, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %61)
  %63 = load i32, ptr %10, align 8
  %64 = sext i32 %63 to i64
  %65 = getelementptr ptr, ptr %61, i64 %64
  %66 = getelementptr i8, ptr %65, i64 8
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %60) #26
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %._crit_edge, label %._crit_edge.thread

._crit_edge:                                      ; preds = %27, %._crit_edge
  %71 = phi ptr [ %88, %._crit_edge ], [ %65, %27 ]
  %72 = phi ptr [ %84, %._crit_edge ], [ %61, %27 ]
  %73 = phi ptr [ %83, %._crit_edge ], [ %60, %27 ]
  %.031 = phi i32 [ %82, %._crit_edge ], [ 0, %27 ]
  %74 = zext nneg i32 %.031 to i64
  %75 = getelementptr i8, ptr %.fca.0.extract17, i64 %74
  %76 = load i8, ptr %75, align 1
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %72)
  %78 = load ptr, ptr %71, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = call { ptr } %79(ptr %73) #26
  %.fca.0.extract5 = extractvalue { ptr } %80, 0
  %81 = getelementptr i8, ptr %.fca.0.extract5, i64 %74
  store i8 %76, ptr %81, align 1
  %82 = add nuw nsw i32 %.031, 1
  %83 = load ptr, ptr %8, align 8
  %84 = load ptr, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %84)
  %86 = load i32, ptr %10, align 8
  %87 = sext i32 %86 to i64
  %88 = getelementptr ptr, ptr %84, i64 %87
  %89 = getelementptr i8, ptr %88, i64 8
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = call i32 %91(ptr %83) #26
  %93 = icmp slt i32 %82, %92
  br i1 %93, label %._crit_edge, label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %._crit_edge, %27, %4
  %94 = phi ptr [ %68, %27 ], [ %19, %4 ], [ %91, %._crit_edge ]
  %.pre-phi = phi i64 [ %64, %27 ], [ %15, %4 ], [ %87, %._crit_edge ]
  %95 = phi ptr [ %61, %27 ], [ %12, %4 ], [ %84, %._crit_edge ]
  %96 = phi ptr [ %60, %27 ], [ %11, %4 ], [ %83, %._crit_edge ]
  %.sroa.phi = phi ptr [ %.sroa.gep, %27 ], [ %.sroa.gep22, %4 ], [ %.sroa.gep, %._crit_edge ]
  %.sroa.phi23 = phi ptr [ %.sroa.gep24, %27 ], [ %.sroa.gep25, %4 ], [ %.sroa.gep24, %._crit_edge ]
  %.sroa.phi26 = phi ptr [ %.sroa.gep27, %27 ], [ %.sroa.gep28, %4 ], [ %.sroa.gep27, %._crit_edge ]
  %97 = phi ptr [ %6, %27 ], [ %5, %4 ], [ %6, %._crit_edge ]
  %98 = phi ptr [ %.sroa.0, %27 ], [ %.sroa.029, %4 ], [ %.sroa.0, %._crit_edge ]
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %95)
  %100 = getelementptr ptr, ptr %95, i64 %.pre-phi
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %96) #26
  %104 = extractvalue { ptr } %103, 0
  store ptr %104, ptr %98, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %95)
  %106 = call i32 %94(ptr %96) #26
  %107 = sext i32 %106 to i64
  %108 = getelementptr i8, ptr %104, i64 %107
  store i8 %3, ptr %108, align 1
  %109 = load ptr, ptr %8, align 8
  %110 = load ptr, ptr %7, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %110)
  %112 = load i32, ptr %10, align 8
  %113 = sext i32 %112 to i64
  %114 = getelementptr ptr, ptr %110, i64 %113
  %115 = getelementptr i8, ptr %114, i64 8
  %116 = load ptr, ptr %115, align 8
  %117 = load ptr, ptr %116, align 8
  %118 = call i32 %117(ptr %109) #26
  %119 = add i32 %118, 1
  %120 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %110)
  %121 = getelementptr i8, ptr %116, i64 8
  %122 = load ptr, ptr %121, align 8
  call void %122(ptr %109, i32 %119) #25
  %123 = load ptr, ptr %7, align 8
  store ptr %123, ptr %97, align 8
  %124 = load ptr, ptr %8, align 8
  store ptr %124, ptr %.sroa.phi, align 8
  %125 = load ptr, ptr %9, align 8
  store ptr %125, ptr %.sroa.phi23, align 8
  %126 = load i32, ptr %10, align 8
  store i32 %126, ptr %.sroa.phi26, align 4
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %97, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %127 = load ptr, ptr %97, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %.sroa.phi, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %.sroa.phi23, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %.sroa.phi26, align 4
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  ret { ptr, ptr, ptr, i32 } %134
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract13, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract14, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract15, ptr %11, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %.fca.1.extract, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr %.fca.2.extract, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %12, i64 24
  store i32 %.fca.3.extract, ptr %15, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %12, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %16 = load ptr, ptr %12, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %16, 0
  %18 = load ptr, ptr %13, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %18, 1
  %20 = load ptr, ptr %14, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 2
  %22 = load i32, ptr %15, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %22, 3
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %16)
  %26 = sext i32 %22 to i64
  %27 = getelementptr ptr, ptr %16, i64 %26
  %28 = getelementptr i8, ptr %27, i64 72
  %29 = load ptr, ptr %28, align 8
  %30 = call ptr @behavior_wrapper(ptr %29, { ptr, ptr, ptr, i32 } %23, ptr noundef nonnull align 8 %5)
  %31 = call { ptr } %30({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull align 8 %5) #34
  %.fca.0.extract = extractvalue { ptr } %31, 0
  %32 = load ptr, ptr %12, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %13, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %14, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %15, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %32)
  %42 = sext i32 %38 to i64
  %43 = getelementptr ptr, ptr %32, i64 %42
  %44 = getelementptr i8, ptr %43, i64 56
  %45 = load ptr, ptr %44, align 8
  %46 = call ptr @behavior_wrapper(ptr %45, { ptr, ptr, ptr, i32 } %39, ptr noundef nonnull align 8 %5)
  %47 = call i32 %46({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %5) #34
  %48 = load ptr, ptr %9, align 8
  %49 = load ptr, ptr %8, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %49)
  %51 = load i32, ptr %11, align 8
  %52 = sext i32 %51 to i64
  %53 = getelementptr ptr, ptr %49, i64 %52
  %54 = getelementptr i8, ptr %53, i64 8
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %55, align 8
  %57 = call i32 %56(ptr %48) #26
  %58 = add i32 %57, %47
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %49)
  %60 = getelementptr i8, ptr %53, i64 16
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %48) #26
  %64 = icmp slt i32 %58, %63
  %.sroa.gep = getelementptr inbounds i8, ptr %7, i64 8
  %.sroa.gep74 = getelementptr inbounds i8, ptr %6, i64 8
  %.sroa.gep76 = getelementptr inbounds i8, ptr %7, i64 16
  %.sroa.gep77 = getelementptr inbounds i8, ptr %6, i64 16
  %.sroa.gep79 = getelementptr inbounds i8, ptr %7, i64 24
  %.sroa.gep80 = getelementptr inbounds i8, ptr %6, i64 24
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %49)
  %66 = call i32 %56(ptr %48) #26
  br i1 %64, label %67, label %98

67:                                               ; preds = %4
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %49)
  %69 = call i32 %56(ptr %48) #26
  %70 = add i32 %69, %47
  %71 = icmp slt i32 %66, %70
  br i1 %71, label %._crit_edge, label %._crit_edge.thread

._crit_edge:                                      ; preds = %67, %._crit_edge
  %72 = phi ptr [ %91, %._crit_edge ], [ %53, %67 ]
  %73 = phi ptr [ %87, %._crit_edge ], [ %49, %67 ]
  %74 = phi ptr [ %86, %._crit_edge ], [ %48, %67 ]
  %.090 = phi i32 [ %84, %._crit_edge ], [ %66, %67 ]
  %.06889 = phi i32 [ %85, %._crit_edge ], [ 0, %67 ]
  %75 = sext i32 %.06889 to i64
  %76 = getelementptr i8, ptr %.fca.0.extract, i64 %75
  %77 = load i8, ptr %76, align 1
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %73)
  %79 = load ptr, ptr %72, align 8
  %80 = load ptr, ptr %79, align 8
  %81 = call { ptr } %80(ptr %74) #26
  %.fca.0.extract57 = extractvalue { ptr } %81, 0
  %82 = sext i32 %.090 to i64
  %83 = getelementptr i8, ptr %.fca.0.extract57, i64 %82
  store i8 %77, ptr %83, align 1
  %84 = add nsw i32 %.090, 1
  %85 = add i32 %.06889, 1
  %86 = load ptr, ptr %9, align 8
  %87 = load ptr, ptr %8, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %87)
  %89 = load i32, ptr %11, align 8
  %90 = sext i32 %89 to i64
  %91 = getelementptr ptr, ptr %87, i64 %90
  %92 = getelementptr i8, ptr %91, i64 8
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %86) #26
  %96 = add i32 %95, %47
  %97 = icmp slt i32 %84, %96
  br i1 %97, label %._crit_edge, label %._crit_edge.thread

98:                                               ; preds = %4
  %99 = add i32 %66, %47
  %100 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %49)
  %101 = getelementptr i8, ptr %61, i64 8
  %102 = load ptr, ptr %101, align 8
  call void %102(ptr %48, i32 %99) #25
  %103 = load ptr, ptr %9, align 8
  %104 = load ptr, ptr %8, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %104)
  %106 = load i32, ptr %11, align 8
  %107 = sext i32 %106 to i64
  %108 = getelementptr ptr, ptr %104, i64 %107
  %109 = load ptr, ptr %108, align 8
  %110 = load ptr, ptr %109, align 8
  %111 = call { ptr } %110(ptr %103) #26
  %.fca.0.extract49 = extractvalue { ptr } %111, 0
  %112 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %104)
  %113 = getelementptr i8, ptr %108, i64 16
  %114 = load ptr, ptr %113, align 8
  %115 = load ptr, ptr %114, align 8
  %116 = call i32 %115(ptr %103) #26
  %117 = sext i32 %116 to i64
  %118 = call ptr @bump_malloc(i64 %117)
  %119 = load ptr, ptr %9, align 8
  %120 = load ptr, ptr %8, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %120)
  %122 = load i32, ptr %11, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr ptr, ptr %120, i64 %123
  %125 = load ptr, ptr %124, align 8
  %126 = getelementptr i8, ptr %125, i64 8
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr } undef, ptr %118, 0
  call void %127(ptr %119, { ptr } %128) #25
  %129 = load ptr, ptr %9, align 8
  %130 = load ptr, ptr %8, align 8
  %131 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %130)
  %132 = load i32, ptr %11, align 8
  %133 = sext i32 %132 to i64
  %134 = getelementptr ptr, ptr %130, i64 %133
  %135 = getelementptr i8, ptr %134, i64 8
  %136 = load ptr, ptr %135, align 8
  %137 = load ptr, ptr %136, align 8
  %138 = call i32 %137(ptr %129) #26
  %139 = add i32 %138, %47
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %.lr.ph, label %._crit_edge.thread

.lr.ph:                                           ; preds = %98, %._crit_edge2
  %141 = phi ptr [ %176, %._crit_edge2 ], [ %137, %98 ]
  %142 = phi ptr [ %173, %._crit_edge2 ], [ %134, %98 ]
  %143 = phi ptr [ %169, %._crit_edge2 ], [ %130, %98 ]
  %144 = phi ptr [ %168, %._crit_edge2 ], [ %129, %98 ]
  %.07087 = phi i32 [ %.171, %._crit_edge2 ], [ 0, %98 ]
  %.07286 = phi i32 [ %.173, %._crit_edge2 ], [ 0, %98 ]
  %145 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %143)
  %146 = call i32 %141(ptr %144) #26
  %147 = icmp slt i32 %.07087, %146
  br i1 %147, label %148, label %157

148:                                              ; preds = %.lr.ph
  %149 = zext nneg i32 %.07087 to i64
  %150 = getelementptr i8, ptr %.fca.0.extract49, i64 %149
  %151 = load i8, ptr %150, align 1
  %152 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %143)
  %153 = load ptr, ptr %142, align 8
  %154 = load ptr, ptr %153, align 8
  %155 = call { ptr } %154(ptr %144) #26
  %.fca.0.extract29 = extractvalue { ptr } %155, 0
  %156 = getelementptr i8, ptr %.fca.0.extract29, i64 %149
  store i8 %151, ptr %156, align 1
  br label %._crit_edge2

157:                                              ; preds = %.lr.ph
  %158 = sext i32 %.07286 to i64
  %159 = getelementptr i8, ptr %.fca.0.extract, i64 %158
  %160 = load i8, ptr %159, align 1
  %161 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %143)
  %162 = load ptr, ptr %142, align 8
  %163 = load ptr, ptr %162, align 8
  %164 = call { ptr } %163(ptr %144) #26
  %.fca.0.extract24 = extractvalue { ptr } %164, 0
  %165 = zext nneg i32 %.07087 to i64
  %166 = getelementptr i8, ptr %.fca.0.extract24, i64 %165
  store i8 %160, ptr %166, align 1
  %167 = add i32 %.07286, 1
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %148, %157
  %.173 = phi i32 [ %.07286, %148 ], [ %167, %157 ]
  %.171 = add nuw nsw i32 %.07087, 1
  %168 = load ptr, ptr %9, align 8
  %169 = load ptr, ptr %8, align 8
  %170 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %169)
  %171 = load i32, ptr %11, align 8
  %172 = sext i32 %171 to i64
  %173 = getelementptr ptr, ptr %169, i64 %172
  %174 = getelementptr i8, ptr %173, i64 8
  %175 = load ptr, ptr %174, align 8
  %176 = load ptr, ptr %175, align 8
  %177 = call i32 %176(ptr %168) #26
  %178 = add i32 %177, %47
  %179 = icmp slt i32 %.171, %178
  br i1 %179, label %.lr.ph, label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %._crit_edge2, %._crit_edge, %98, %67
  %180 = phi ptr [ %56, %67 ], [ %137, %98 ], [ %94, %._crit_edge ], [ %176, %._crit_edge2 ]
  %181 = phi ptr [ %55, %67 ], [ %136, %98 ], [ %93, %._crit_edge ], [ %175, %._crit_edge2 ]
  %182 = phi ptr [ %49, %67 ], [ %130, %98 ], [ %87, %._crit_edge ], [ %169, %._crit_edge2 ]
  %183 = phi ptr [ %48, %67 ], [ %129, %98 ], [ %86, %._crit_edge ], [ %168, %._crit_edge2 ]
  %.sroa.phi = phi ptr [ %.sroa.gep74, %67 ], [ %.sroa.gep, %98 ], [ %.sroa.gep74, %._crit_edge ], [ %.sroa.gep, %._crit_edge2 ]
  %.sroa.phi75 = phi ptr [ %.sroa.gep77, %67 ], [ %.sroa.gep76, %98 ], [ %.sroa.gep77, %._crit_edge ], [ %.sroa.gep76, %._crit_edge2 ]
  %.sroa.phi78 = phi ptr [ %.sroa.gep80, %67 ], [ %.sroa.gep79, %98 ], [ %.sroa.gep80, %._crit_edge ], [ %.sroa.gep79, %._crit_edge2 ]
  %184 = phi ptr [ %6, %67 ], [ %7, %98 ], [ %6, %._crit_edge ], [ %7, %._crit_edge2 ]
  %185 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %182)
  %186 = call i32 %180(ptr %183) #26
  %187 = add i32 %186, %47
  %188 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %182)
  %189 = getelementptr i8, ptr %181, i64 8
  %190 = load ptr, ptr %189, align 8
  call void %190(ptr %183, i32 %187) #25
  %191 = load ptr, ptr %8, align 8
  store ptr %191, ptr %184, align 8
  %192 = load ptr, ptr %9, align 8
  store ptr %192, ptr %.sroa.phi, align 8
  %193 = load ptr, ptr %10, align 8
  store ptr %193, ptr %.sroa.phi75, align 8
  %194 = load i32, ptr %11, align 8
  store i32 %194, ptr %.sroa.phi78, align 4
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %184, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %195 = load ptr, ptr %184, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %195, 0
  %197 = load ptr, ptr %.sroa.phi, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %197, 1
  %199 = load ptr, ptr %.sroa.phi75, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %199, 2
  %201 = load i32, ptr %.sroa.phi78, align 4
  %202 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %201, 3
  ret { ptr, ptr, ptr, i32 } %202
}

define i8 @String__index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #26
  %19 = add i32 %18, -1
  %20 = icmp sgt i32 %3, %19
  br i1 %20, label %21, label %._crit_edge

21:                                               ; preds = %4
  %22 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %22)
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %21
  %23 = icmp sgt i32 %3, -1
  %24 = load ptr, ptr %6, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %25)
  %27 = load i32, ptr %8, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr ptr, ptr %25, i64 %28
  br i1 %23, label %30, label %36

30:                                               ; preds = %._crit_edge
  %31 = load ptr, ptr %29, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr } %32(ptr %24) #26
  %.fca.0.extract18 = extractvalue { ptr } %33, 0
  %34 = zext nneg i32 %3 to i64
  %35 = getelementptr i8, ptr %.fca.0.extract18, i64 %34
  br label %58

36:                                               ; preds = %._crit_edge
  %37 = getelementptr i8, ptr %29, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = call i32 %39(ptr %24) #26
  %41 = add i32 %40, %3
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %43, label %._crit_edge1

43:                                               ; preds = %36
  %44 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %44)
  %.pre = load ptr, ptr %6, align 8
  %.pre22 = load ptr, ptr %5, align 8
  %.pre23 = load i32, ptr %8, align 8
  %.phi.trans.insert = sext i32 %.pre23 to i64
  %.phi.trans.insert24 = getelementptr ptr, ptr %.pre22, i64 %.phi.trans.insert
  %.phi.trans.insert25 = getelementptr i8, ptr %.phi.trans.insert24, i64 8
  %.pre26 = load ptr, ptr %.phi.trans.insert25, align 8
  %.pre27 = load ptr, ptr %.pre26, align 8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %36, %43
  %.pre-phi = phi i64 [ %28, %36 ], [ %.phi.trans.insert, %43 ]
  %45 = phi ptr [ %39, %36 ], [ %.pre27, %43 ]
  %46 = phi ptr [ %25, %36 ], [ %.pre22, %43 ]
  %47 = phi ptr [ %24, %36 ], [ %.pre, %43 ]
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %46)
  %49 = getelementptr ptr, ptr %46, i64 %.pre-phi
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call { ptr } %51(ptr %47) #26
  %.fca.0.extract11 = extractvalue { ptr } %52, 0
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %46)
  %54 = call i32 %45(ptr %47) #26
  %55 = add i32 %54, %3
  %56 = sext i32 %55 to i64
  %57 = getelementptr i8, ptr %.fca.0.extract11, i64 %56
  br label %58

58:                                               ; preds = %._crit_edge1, %30
  %.reg2mem20.0.in = phi ptr [ %35, %30 ], [ %57, %._crit_edge1 ]
  %.reg2mem20.0 = load i8, ptr %.reg2mem20.0.in, align 1
  ret i8 %.reg2mem20.0
}

define noundef i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %14 = load ptr, ptr %7, align 8
  %15 = load ptr, ptr %6, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %15)
  %17 = load i32, ptr %9, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr ptr, ptr %15, i64 %18
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i32 %22(ptr %14) #26
  %24 = load ptr, ptr %10, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %24, 0
  %26 = load ptr, ptr %11, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %26, 1
  %28 = load ptr, ptr %12, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %28, 2
  %30 = load i32, ptr %13, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 %30, 3
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %24)
  %34 = sext i32 %30 to i64
  %35 = getelementptr ptr, ptr %24, i64 %34
  %36 = getelementptr i8, ptr %35, i64 56
  %37 = load ptr, ptr %36, align 8
  %38 = call ptr @behavior_wrapper(ptr %37, { ptr, ptr, ptr, i32 } %31, ptr noundef nonnull align 8 %5)
  %39 = call i32 %38({ ptr, ptr, ptr, i32 } %31, { ptr, ptr, ptr, i32 } %31, ptr nonnull align 8 %5) #34
  %.not = icmp eq i32 %23, %39
  br i1 %.not, label %.preheader, label %.thread

.preheader:                                       ; preds = %4, %50
  %.0 = phi i32 [ %76, %50 ], [ 0, %4 ]
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call i32 %48(ptr %40) #26
  %.not28.not.not = icmp sge i32 %.0, %49
  br i1 %.not28.not.not, label %.thread, label %50

50:                                               ; preds = %.preheader
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %41)
  %52 = load ptr, ptr %45, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr } %53(ptr %40) #26
  %.fca.0.extract17 = extractvalue { ptr } %54, 0
  %55 = zext nneg i32 %.0 to i64
  %56 = getelementptr i8, ptr %.fca.0.extract17, i64 %55
  %57 = load i8, ptr %56, align 1
  %58 = load ptr, ptr %10, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = load ptr, ptr %11, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 1
  %62 = load ptr, ptr %12, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 2
  %64 = load i32, ptr %13, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %64, 3
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %58)
  %68 = sext i32 %64 to i64
  %69 = getelementptr ptr, ptr %58, i64 %68
  %70 = getelementptr i8, ptr %69, i64 72
  %71 = load ptr, ptr %70, align 8
  %72 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %65, ptr noundef nonnull align 8 %5)
  %73 = call { ptr } %72({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr nonnull %5) #34
  %.fca.0.extract14 = extractvalue { ptr } %73, 0
  %74 = getelementptr i8, ptr %.fca.0.extract14, i64 %55
  %75 = load i8, ptr %74, align 1
  %.not25 = icmp eq i8 %57, %75
  %76 = add nuw nsw i32 %.0, 1
  br i1 %.not25, label %.preheader, label %.thread

.thread:                                          ; preds = %.preheader, %50, %4
  %.reg2mem42.0 = phi i1 [ false, %4 ], [ %.not28.not.not, %50 ], [ %.not28.not.not, %.preheader ]
  ret i1 %.reg2mem42.0
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract5, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #26
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %43, label %19

19:                                               ; preds = %3
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %9)
  %21 = call i32 %16(ptr %8) #26
  %22 = add i32 %21, -1
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %9)
  %24 = getelementptr i8, ptr %15, i64 8
  %25 = load ptr, ptr %24, align 8
  call void %25(ptr %8, i32 %22) #25
  %26 = load ptr, ptr %5, align 8
  %27 = load ptr, ptr %4, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %27)
  %29 = load i32, ptr %7, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call { ptr } %33(ptr %26) #26
  %.fca.0.extract10 = extractvalue { ptr } %34, 0
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %27)
  %36 = getelementptr i8, ptr %31, i64 8
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %26) #26
  %40 = sext i32 %39 to i64
  %41 = getelementptr i8, ptr %.fca.0.extract10, i64 %40
  %42 = load i8, ptr %41, align 1
  br label %43

43:                                               ; preds = %3, %19
  %.reg2mem19.sroa.0.0 = phi ptr [ @i8_typ, %19 ], [ @nil_typ, %3 ]
  %.reg2mem19.sroa.3.0 = phi i8 [ %42, %19 ], [ undef, %3 ]
  %.reload20.fca.0.insert = insertvalue { ptr, i8 } poison, ptr %.reg2mem19.sroa.0.0, 0
  %.reload20.fca.1.insert = insertvalue { ptr, i8 } %.reload20.fca.0.insert, i8 %.reg2mem19.sroa.3.0, 1
  ret { ptr, i8 } %.reload20.fca.1.insert
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %13 = load ptr, ptr %10, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %14)
  %16 = load i32, ptr %12, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call i32 %21(ptr %13) #26
  %23 = sext i32 %22 to i64
  %24 = call ptr @bump_malloc(i64 %23)
  %25 = load ptr, ptr %10, align 8
  %26 = load ptr, ptr %9, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %26)
  %28 = load i32, ptr %12, align 8
  %29 = sext i32 %28 to i64
  %30 = getelementptr ptr, ptr %26, i64 %29
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 %33(ptr %25) #26
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %._crit_edge, label %._crit_edge1._crit_edge

._crit_edge:                                      ; preds = %3, %._crit_edge
  %36 = phi ptr [ %53, %._crit_edge ], [ %30, %3 ]
  %37 = phi ptr [ %49, %._crit_edge ], [ %26, %3 ]
  %38 = phi ptr [ %48, %._crit_edge ], [ %25, %3 ]
  %.029 = phi i32 [ %47, %._crit_edge ], [ 0, %3 ]
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %37)
  %40 = load ptr, ptr %36, align 8
  %41 = load ptr, ptr %40, align 8
  %42 = call { ptr } %41(ptr %38) #26
  %.fca.0.extract24 = extractvalue { ptr } %42, 0
  %43 = zext nneg i32 %.029 to i64
  %44 = getelementptr i8, ptr %.fca.0.extract24, i64 %43
  %45 = load i8, ptr %44, align 1
  %46 = getelementptr i8, ptr %24, i64 %43
  store i8 %45, ptr %46, align 1
  %47 = add nuw nsw i32 %.029, 1
  %48 = load ptr, ptr %10, align 8
  %49 = load ptr, ptr %9, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %49)
  %51 = load i32, ptr %12, align 8
  %52 = sext i32 %51 to i64
  %53 = getelementptr ptr, ptr %49, i64 %52
  %54 = getelementptr i8, ptr %53, i64 8
  %55 = load ptr, ptr %54, align 8
  %56 = load ptr, ptr %55, align 8
  %57 = call i32 %56(ptr %48) #26
  %58 = icmp slt i32 %47, %57
  br i1 %58, label %._crit_edge, label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge, %3
  %59 = phi ptr [ %33, %3 ], [ %56, %._crit_edge ]
  %60 = phi ptr [ %26, %3 ], [ %49, %._crit_edge ]
  %61 = phi ptr [ %25, %3 ], [ %48, %._crit_edge ]
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %60)
  %63 = call i32 %59(ptr %61) #26
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull %60)
  %65 = call i32 %59(ptr %61) #26
  store ptr @String, ptr %4, align 8
  %66 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %4)
  %67 = extractvalue { i64, i64 } %66, 0
  %68 = call ptr @bump_malloc(i64 %67)
  %69 = load ptr, ptr %10, align 8
  %70 = load ptr, ptr %9, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %70)
  %72 = load i32, ptr %12, align 8
  %73 = sext i32 %72 to i64
  %74 = getelementptr ptr, ptr %70, i64 %73
  %75 = getelementptr i8, ptr %74, i64 8
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = call i32 %77(ptr %69) #26
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %70)
  %80 = call i32 %77(ptr %69) #26
  %81 = insertvalue { ptr } undef, ptr %24, 0
  %82 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %68, 1
  %83 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr undef, 2
  %84 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %5, align 8
  %85 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @_parameterization_i32, ptr %85, align 8
  %86 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @_parameterization_i32, ptr %86, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %5)
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  store ptr @buffer_typ, ptr %6, align 8
  %89 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @i32_typ, ptr %89, align 8
  %90 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr @i32_typ, ptr %90, align 8
  %91 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %84, ptr noundef nonnull align 8 dereferenceable(24) %6)
  call void %91({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr nonnull %5, { ptr } %81, i32 %78, i32 %80) #34
  store ptr @String, ptr %7, align 8
  %92 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %68, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %7, i64 16
  %94 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 10, ptr %94, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %95 = load ptr, ptr %7, align 8
  %96 = load ptr, ptr %92, align 8
  %97 = load ptr, ptr %93, align 8
  %98 = load i32, ptr %94, align 8
  store ptr %95, ptr %8, align 8
  %99 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %96, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %97, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %98, ptr %101, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %102 = load ptr, ptr %8, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %104 = load ptr, ptr %99, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 1
  %106 = load ptr, ptr %100, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %106, 2
  %108 = load i32, ptr %101, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %108, 3
  ret { ptr, ptr, ptr, i32 } %109
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %8 = alloca [1 x ptr], align 8
  store ptr @StringIterator, ptr %8, align 8
  %9 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_StringIterator, ptr noundef nonnull align 8 dereferenceable(8) %8)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = call ptr @bump_malloc(i64 %10)
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = load ptr, ptr %4, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 8
  %15 = load ptr, ptr %5, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %12, i64 16
  %17 = load ptr, ptr %6, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %12, i64 24
  %19 = load i32, ptr %7, align 8
  store i32 %19, ptr %18, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %12, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %20 = load ptr, ptr %12, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %14, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %16, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %18, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = insertvalue { ptr, ptr, ptr, i32 } { ptr @StringIterator, ptr undef, ptr undef, i32 undef }, ptr %11, 1
  %29 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr undef, 2
  %30 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 10, 3
  %31 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %31)
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @StringIterator)
  %34 = alloca { ptr }, align 8
  store ptr %20, ptr %34, align 8
  %35 = call ptr @behavior_wrapper(ptr noundef nonnull @StringIterator_B_init_strString, { ptr, ptr, ptr, i32 } %30, ptr noundef nonnull align 8 dereferenceable(8) %34)
  call void %35({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull %31, { ptr, ptr, ptr, i32 } %27) #34
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @StringIterator, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %11, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 10, ptr %39, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %36, ptr noundef nonnull align 8 dereferenceable(56) @Iterator)
  %40 = load ptr, ptr %36, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = load ptr, ptr %37, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 1
  %44 = load ptr, ptr %38, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 2
  %46 = load i32, ptr %39, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %46, 3
  ret { ptr, ptr, ptr, i32 } %47
}

define void @Iterable_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull align 8 %5) #34
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %26, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %30, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr @behavior_wrapper(ptr %51, { ptr, ptr, ptr, i32 } %45, ptr noundef nonnull align 8 %5)
  %53 = call { ptr, i160 } %52({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #34
  %.fca.0.extract22 = extractvalue { ptr, i160 } %53, 0
  %54 = load ptr, ptr %7, align 8
  %55 = load ptr, ptr %6, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %55)
  %57 = load i32, ptr %9, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr ptr, ptr %55, i64 %58
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %54)
  %62 = icmp ne ptr %.fca.0.extract22, @nil_typ
  %63 = icmp ne ptr %.fca.0.extract22, null
  %.not28 = and i1 %62, %63
  br i1 %.not28, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %._crit_edge1
  call void %.fca.0.extract3({ ptr, i160 } %53)
  br label %._crit_edge1

.critedge:                                        ; preds = %._crit_edge1
  ret void
}

define { ptr, i160 } @Iterable_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr } %4) #3 {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract13, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract14, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract15, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract16, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %4, 0
  %11 = load ptr, ptr %7, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %11, 0
  %13 = load ptr, ptr %8, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %13, 1
  %15 = load ptr, ptr %9, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %15, 2
  %17 = load i32, ptr %10, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %17, 3
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %11)
  %21 = sext i32 %17 to i64
  %22 = getelementptr ptr, ptr %11, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @behavior_wrapper(ptr %24, { ptr, ptr, ptr, i32 } %18, ptr noundef nonnull align 8 %6)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull align 8 %6) #34
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %27, i64 8
  store ptr %.fca.1.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  store ptr %.fca.2.extract, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %27, i64 24
  store i32 %.fca.3.extract, ptr %30, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %27, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = load ptr, ptr %27, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %31, i64 8
  %34 = load ptr, ptr %28, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr inbounds i8, ptr %31, i64 16
  %36 = load ptr, ptr %29, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr inbounds i8, ptr %31, i64 24
  %38 = load i32, ptr %30, align 8
  store i32 %38, ptr %37, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %31, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %39 = load ptr, ptr %31, align 8
  %40 = load ptr, ptr %33, align 8
  %41 = load ptr, ptr %35, align 8
  %42 = load i32, ptr %37, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %41, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %42, 3
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %39)
  %49 = sext i32 %42 to i64
  %50 = getelementptr ptr, ptr %39, i64 %49
  %51 = getelementptr i8, ptr %50, i64 8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %5
  %.pn = phi { ptr, i160 } [ %3, %5 ], [ %65, %._crit_edge ]
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %46, ptr noundef nonnull align 8 %6)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %6) #34
  %.fca.0.extract40 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %8, align 8
  %56 = load ptr, ptr %7, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %56)
  %58 = load i32, ptr %10, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp ne ptr %.fca.0.extract40, @nil_typ
  %64 = icmp ne ptr %.fca.0.extract40, null
  %.not48 = and i1 %63, %64
  br i1 %.not48, label %._crit_edge, label %66

._crit_edge:                                      ; preds = %._crit_edge1
  %65 = call { ptr, i160 } %.fca.0.extract3({ ptr, i160 } %.pn, { ptr, i160 } %54)
  br label %._crit_edge1

66:                                               ; preds = %._crit_edge1
  ret { ptr, i160 } %.pn
}

define noundef i1 @Iterable_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull align 8 %5) #34
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %26, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %30, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %51

51:                                               ; preds = %65, %4
  %52 = load ptr, ptr %50, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %45, ptr noundef nonnull align 8 %5)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #34
  %.fca.0.extract25 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %7, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %56)
  %58 = load i32, ptr %9, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp eq ptr %.fca.0.extract25, @nil_typ
  %64 = icmp eq ptr %.fca.0.extract25, null
  %.not28.not = or i1 %63, %64
  br i1 %.not28.not, label %.critedge, label %65

65:                                               ; preds = %51
  %66 = call i1 %.fca.0.extract3({ ptr, i160 } %54)
  br i1 %66, label %51, label %.critedge

.critedge:                                        ; preds = %65, %51
  ret i1 %.not28.not
}

define noundef i1 @Iterable_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull align 8 %5) #34
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %26, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %30, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %51

51:                                               ; preds = %65, %4
  %52 = load ptr, ptr %50, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %45, ptr noundef nonnull align 8 %5)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #34
  %.fca.0.extract23 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %7, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %56)
  %58 = load i32, ptr %9, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp ne ptr %.fca.0.extract23, @nil_typ
  %64 = icmp ne ptr %.fca.0.extract23, null
  %.not26 = and i1 %63, %64
  br i1 %.not26, label %65, label %.critedge

65:                                               ; preds = %51
  %66 = call i1 %.fca.0.extract3({ ptr, i160 } %54)
  br i1 %66, label %.critedge, label %51

.critedge:                                        ; preds = %51, %65
  ret i1 %.not26
}

define { ptr, ptr, ptr, i32 } @Iterable_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readonly %2, { ptr } %3) #3 {
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %9)
  %17 = load ptr, ptr %2, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = alloca [3 x ptr], align 8
  store ptr @MapIterable, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %16, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr %19, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_MapIterable, ptr noundef nonnull align 8 dereferenceable(24) %20)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %16, ptr %25, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  store ptr %19, ptr %26, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %25)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = load ptr, ptr %5, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 8
  %31 = load ptr, ptr %6, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %28, i64 16
  %33 = load ptr, ptr %7, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %28, i64 24
  %35 = load i32, ptr %8, align 8
  store i32 %35, ptr %34, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %28, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %36 = load ptr, ptr %28, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = load i32, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %42, 3
  %44 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr undef, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 10, 3
  %47 = load ptr, ptr %6, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %48)
  %50 = load i32, ptr %8, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = call ptr @bump_malloc(i64 noundef 24)
  %56 = getelementptr i8, ptr %55, i64 8
  store ptr %54, ptr %56, align 8
  %57 = getelementptr i8, ptr %55, i64 16
  store ptr null, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %55)
  store ptr @Iterable, ptr %55, align 8
  %59 = load ptr, ptr %2, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 noundef 32)
  %71 = getelementptr i8, ptr %70, i64 16
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 8
  store ptr %61, ptr %72, align 8
  %73 = getelementptr i8, ptr %70, i64 24
  store ptr null, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %70)
  store ptr @function_typ, ptr %70, align 8
  %75 = alloca [2 x ptr], align 8
  store ptr %55, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  store ptr %70, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %75)
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef nonnull align 16 dereferenceable(488) @MapIterable)
  %79 = alloca { ptr, ptr }, align 8
  store ptr %36, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr @function_typ, ptr %80, align 8
  %81 = call ptr @behavior_wrapper(ptr noundef nonnull @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, { ptr, ptr, ptr, i32 } %46, ptr noundef nonnull align 8 dereferenceable(16) %79)
  call void %81({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %75, { ptr, ptr, ptr, i32 } %43, { ptr } %3) #34
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @MapIterable, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %82, i64 8
  store ptr %25, ptr %83, align 8
  %84 = getelementptr inbounds i8, ptr %82, i64 16
  %85 = getelementptr inbounds i8, ptr %82, i64 24
  store i32 10, ptr %85, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %82, ptr noundef nonnull align 16 dereferenceable(488) @MapIterable)
  %86 = load ptr, ptr %82, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %88 = load ptr, ptr %83, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 1
  %90 = load ptr, ptr %84, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 2
  %92 = load i32, ptr %85, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  ret { ptr, ptr, ptr, i32 } %93
}

define { ptr, ptr, ptr, i32 } @Iterable_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #3 {
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %9)
  %17 = alloca [2 x ptr], align 8
  store ptr @FilterIterable, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %16, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_FilterIterable, ptr noundef nonnull align 8 dereferenceable(16) %17)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  store ptr %16, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %5, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %6, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %7, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %8, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %23, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  %39 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterable, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr undef, 2
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 10, 3
  %42 = load ptr, ptr %6, align 8
  %43 = load ptr, ptr %5, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %43)
  %45 = load i32, ptr %8, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = call ptr @bump_malloc(i64 noundef 24)
  %51 = getelementptr i8, ptr %50, i64 8
  store ptr %49, ptr %51, align 8
  %52 = getelementptr i8, ptr %50, i64 16
  store ptr null, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %50)
  store ptr @Iterable, ptr %50, align 8
  %54 = load ptr, ptr %6, align 8
  %55 = load ptr, ptr %5, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %55)
  %57 = load i32, ptr %8, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr ptr, ptr %55, i64 %58
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %54)
  %62 = call ptr @bump_malloc(i64 noundef 32)
  %63 = getelementptr i8, ptr %62, i64 16
  store ptr %61, ptr %63, align 8
  %64 = getelementptr i8, ptr %62, i64 8
  store ptr @_parameterization_i1, ptr %64, align 8
  %65 = getelementptr i8, ptr %62, i64 24
  store ptr null, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %62)
  store ptr @function_typ, ptr %62, align 8
  %67 = alloca [2 x ptr], align 8
  store ptr %50, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %62, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %67)
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef nonnull align 16 dereferenceable(480) @FilterIterable)
  %71 = alloca { ptr, ptr }, align 8
  store ptr %31, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr @function_typ, ptr %72, align 8
  %73 = call ptr @behavior_wrapper(ptr noundef nonnull @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1, { ptr, ptr, ptr, i32 } %41, ptr noundef nonnull align 8 dereferenceable(16) %71)
  call void %73({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %67, { ptr, ptr, ptr, i32 } %38, { ptr } %3) #34
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @FilterIterable, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %74, i64 8
  store ptr %21, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %74, i64 16
  %77 = getelementptr inbounds i8, ptr %74, i64 24
  store i32 10, ptr %77, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %74, ptr noundef nonnull align 16 dereferenceable(480) @FilterIterable)
  %78 = load ptr, ptr %74, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %75, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %76, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %77, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  ret { ptr, ptr, ptr, i32 } %85
}

define { ptr, ptr, ptr, i32 } @Iterable_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract7, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract8, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract9, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract10, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = alloca [2 x ptr], align 8
  store ptr @ChainIterable, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %20, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_ChainIterable, ptr noundef nonnull align 8 dereferenceable(16) %21)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %20, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = load ptr, ptr %5, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 8
  %30 = load ptr, ptr %6, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds i8, ptr %27, i64 16
  %32 = load ptr, ptr %7, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %27, i64 24
  %34 = load i32, ptr %8, align 8
  store i32 %34, ptr %33, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %27, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = load ptr, ptr %9, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 8
  %46 = load ptr, ptr %10, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %43, i64 16
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %43, i64 24
  %50 = load i32, ptr %12, align 8
  store i32 %50, ptr %49, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %43, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 noundef 24)
  %71 = getelementptr i8, ptr %70, i64 8
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 16
  store ptr null, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %70)
  store ptr @Iterable, ptr %70, align 8
  %74 = load ptr, ptr %6, align 8
  %75 = load ptr, ptr %5, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %75)
  %77 = load i32, ptr %8, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %74)
  %82 = call ptr @bump_malloc(i64 noundef 24)
  %83 = getelementptr i8, ptr %82, i64 8
  store ptr %81, ptr %83, align 8
  %84 = getelementptr i8, ptr %82, i64 16
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %82)
  store ptr @Iterable, ptr %82, align 8
  %86 = alloca [2 x ptr], align 8
  store ptr %70, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %82, ptr %87, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %86)
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef nonnull align 16 dereferenceable(480) @ChainIterable)
  %90 = alloca { ptr, ptr }, align 8
  store ptr %35, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %51, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr noundef nonnull @ChainIterable_B_init_firstIterableT_secondIterableT, { ptr, ptr, ptr, i32 } %61, ptr noundef nonnull align 8 dereferenceable(16) %90)
  call void %92({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %86, { ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %58) #34
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ChainIterable, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %93, i64 8
  store ptr %25, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %93, i64 16
  %96 = getelementptr inbounds i8, ptr %93, i64 24
  store i32 10, ptr %96, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %93, ptr noundef nonnull align 16 dereferenceable(480) @ChainIterable)
  %97 = load ptr, ptr %93, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %94, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %95, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %96, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @Iterable_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract7, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract8, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract9, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract10, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterable, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %20, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_InterleaveIterable, ptr noundef nonnull align 8 dereferenceable(16) %21)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %20, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = load ptr, ptr %5, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 8
  %30 = load ptr, ptr %6, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds i8, ptr %27, i64 16
  %32 = load ptr, ptr %7, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %27, i64 24
  %34 = load i32, ptr %8, align 8
  store i32 %34, ptr %33, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %27, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = load ptr, ptr %9, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 8
  %46 = load ptr, ptr %10, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %43, i64 16
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %43, i64 24
  %50 = load i32, ptr %12, align 8
  store i32 %50, ptr %49, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %43, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 noundef 24)
  %71 = getelementptr i8, ptr %70, i64 8
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 16
  store ptr null, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %70)
  store ptr @Iterable, ptr %70, align 8
  %74 = load ptr, ptr %6, align 8
  %75 = load ptr, ptr %5, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %75)
  %77 = load i32, ptr %8, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %74)
  %82 = call ptr @bump_malloc(i64 noundef 24)
  %83 = getelementptr i8, ptr %82, i64 8
  store ptr %81, ptr %83, align 8
  %84 = getelementptr i8, ptr %82, i64 16
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %82)
  store ptr @Iterable, ptr %82, align 8
  %86 = alloca [2 x ptr], align 8
  store ptr %70, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %82, ptr %87, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %86)
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef nonnull align 16 dereferenceable(480) @InterleaveIterable)
  %90 = alloca { ptr, ptr }, align 8
  store ptr %35, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %51, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr noundef nonnull @InterleaveIterable_B_init_firstIterableT_secondIterableT, { ptr, ptr, ptr, i32 } %61, ptr noundef nonnull align 8 dereferenceable(16) %90)
  call void %92({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %86, { ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %58) #34
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @InterleaveIterable, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %93, i64 8
  store ptr %25, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %93, i64 16
  %96 = getelementptr inbounds i8, ptr %93, i64 24
  store i32 10, ptr %96, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %93, ptr noundef nonnull align 16 dereferenceable(480) @InterleaveIterable)
  %97 = load ptr, ptr %93, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %94, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %95, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %96, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @Iterable_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract30, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract31, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract32, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract33, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract23, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract24, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract25, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract26, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %.fca.0.extract23)
  %22 = sext i32 %.fca.3.extract26 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract23, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %.fca.1.extract24)
  %26 = load ptr, ptr %6, align 8
  %27 = load ptr, ptr %5, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %27)
  %29 = load i32, ptr %8, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @typegetter_wrapper(ptr %32, ptr %26)
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %.fca.0.extract23)
  %35 = load ptr, ptr %23, align 8
  %36 = call ptr @typegetter_wrapper(ptr %35, ptr %.fca.1.extract24)
  %37 = call ptr @bump_malloc(i64 noundef 32)
  %38 = getelementptr i8, ptr %37, i64 16
  store ptr %36, ptr %38, align 8
  %39 = getelementptr i8, ptr %37, i64 8
  store ptr %33, ptr %39, align 8
  %40 = getelementptr i8, ptr %37, i64 24
  store ptr null, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %37)
  store ptr @Pair, ptr %37, align 8
  %42 = alloca [4 x ptr], align 8
  store ptr @ZipIterable, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %20, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %42, i64 16
  store ptr %25, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %42, i64 24
  store ptr %37, ptr %45, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ZipIterable, ptr noundef nonnull align 8 dereferenceable(32) %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %20, ptr %48, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  store ptr %25, ptr %49, align 8
  %50 = getelementptr i8, ptr %48, i64 16
  store ptr %37, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %48)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = load ptr, ptr %5, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr inbounds i8, ptr %52, i64 8
  %55 = load ptr, ptr %6, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr inbounds i8, ptr %52, i64 16
  %57 = load ptr, ptr %7, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr inbounds i8, ptr %52, i64 24
  %59 = load i32, ptr %8, align 8
  store i32 %59, ptr %58, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %52, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %60 = load ptr, ptr %52, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = load ptr, ptr %9, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr inbounds i8, ptr %68, i64 8
  %71 = load ptr, ptr %10, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr inbounds i8, ptr %68, i64 16
  %73 = load ptr, ptr %11, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr inbounds i8, ptr %68, i64 24
  %75 = load i32, ptr %12, align 8
  store i32 %75, ptr %74, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %68, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %76 = load ptr, ptr %68, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %70, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %72, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %74, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterable, ptr undef, ptr undef, i32 undef }, ptr %48, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr undef, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 10, 3
  %87 = load ptr, ptr %6, align 8
  %88 = load ptr, ptr %5, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %88)
  %90 = load i32, ptr %8, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %87)
  %95 = call ptr @bump_malloc(i64 noundef 24)
  %96 = getelementptr i8, ptr %95, i64 8
  store ptr %94, ptr %96, align 8
  %97 = getelementptr i8, ptr %95, i64 16
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %95)
  store ptr @Iterable, ptr %95, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %.fca.0.extract23)
  %100 = load ptr, ptr %23, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %.fca.1.extract24)
  %102 = call ptr @bump_malloc(i64 noundef 24)
  %103 = getelementptr i8, ptr %102, i64 8
  store ptr %101, ptr %103, align 8
  %104 = getelementptr i8, ptr %102, i64 16
  store ptr null, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %102)
  store ptr @Iterable, ptr %102, align 8
  %106 = alloca [2 x ptr], align 8
  store ptr %95, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr %102, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %106)
  %109 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef nonnull align 16 dereferenceable(496) @ZipIterable)
  %110 = alloca { ptr, ptr }, align 8
  store ptr %60, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %76, ptr %111, align 8
  %112 = call ptr @behavior_wrapper(ptr noundef nonnull @ZipIterable_B_init_firstIterableT_secondIterableU, { ptr, ptr, ptr, i32 } %86, ptr noundef nonnull align 8 dereferenceable(16) %110)
  call void %112({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %83) #34
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ZipIterable, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %113, i64 8
  store ptr %48, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %113, i64 16
  %116 = getelementptr inbounds i8, ptr %113, i64 24
  store i32 10, ptr %116, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %113, ptr noundef nonnull align 16 dereferenceable(496) @ZipIterable)
  %117 = load ptr, ptr %113, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %114, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = load ptr, ptr %115, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %123 = load i32, ptr %116, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  ret { ptr, ptr, ptr, i32 } %124
}

define { ptr, ptr, ptr, i32 } @Iterable_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract30, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract31, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract32, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract33, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract23, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract24, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract25, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract26, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %.fca.0.extract23)
  %22 = sext i32 %.fca.3.extract26 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract23, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %.fca.1.extract24)
  %26 = load ptr, ptr %6, align 8
  %27 = load ptr, ptr %5, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %27)
  %29 = load i32, ptr %8, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @typegetter_wrapper(ptr %32, ptr %26)
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %.fca.0.extract23)
  %35 = load ptr, ptr %23, align 8
  %36 = call ptr @typegetter_wrapper(ptr %35, ptr %.fca.1.extract24)
  %37 = call ptr @bump_malloc(i64 noundef 32)
  %38 = getelementptr i8, ptr %37, i64 16
  store ptr %36, ptr %38, align 8
  %39 = getelementptr i8, ptr %37, i64 8
  store ptr %33, ptr %39, align 8
  %40 = getelementptr i8, ptr %37, i64 24
  store ptr null, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %37)
  store ptr @Pair, ptr %37, align 8
  %42 = alloca [4 x ptr], align 8
  store ptr @ProductIterable, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %20, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %42, i64 16
  store ptr %25, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %42, i64 24
  store ptr %37, ptr %45, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ProductIterable, ptr noundef nonnull align 8 dereferenceable(32) %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %20, ptr %48, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  store ptr %25, ptr %49, align 8
  %50 = getelementptr i8, ptr %48, i64 16
  store ptr %37, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %48)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = load ptr, ptr %5, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr inbounds i8, ptr %52, i64 8
  %55 = load ptr, ptr %6, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr inbounds i8, ptr %52, i64 16
  %57 = load ptr, ptr %7, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr inbounds i8, ptr %52, i64 24
  %59 = load i32, ptr %8, align 8
  store i32 %59, ptr %58, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %52, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %60 = load ptr, ptr %52, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = load ptr, ptr %9, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr inbounds i8, ptr %68, i64 8
  %71 = load ptr, ptr %10, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr inbounds i8, ptr %68, i64 16
  %73 = load ptr, ptr %11, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr inbounds i8, ptr %68, i64 24
  %75 = load i32, ptr %12, align 8
  store i32 %75, ptr %74, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %68, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %76 = load ptr, ptr %68, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %70, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %72, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %74, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterable, ptr undef, ptr undef, i32 undef }, ptr %48, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr undef, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 10, 3
  %87 = load ptr, ptr %6, align 8
  %88 = load ptr, ptr %5, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %88)
  %90 = load i32, ptr %8, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %87)
  %95 = call ptr @bump_malloc(i64 noundef 24)
  %96 = getelementptr i8, ptr %95, i64 8
  store ptr %94, ptr %96, align 8
  %97 = getelementptr i8, ptr %95, i64 16
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %95)
  store ptr @Iterable, ptr %95, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %.fca.0.extract23)
  %100 = load ptr, ptr %23, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %.fca.1.extract24)
  %102 = call ptr @bump_malloc(i64 noundef 24)
  %103 = getelementptr i8, ptr %102, i64 8
  store ptr %101, ptr %103, align 8
  %104 = getelementptr i8, ptr %102, i64 16
  store ptr null, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %102)
  store ptr @Iterable, ptr %102, align 8
  %106 = alloca [2 x ptr], align 8
  store ptr %95, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr %102, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %106)
  %109 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef nonnull align 16 dereferenceable(496) @ProductIterable)
  %110 = alloca { ptr, ptr }, align 8
  store ptr %60, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %76, ptr %111, align 8
  %112 = call ptr @behavior_wrapper(ptr noundef nonnull @ProductIterable_B_init_firstIterableT_secondIterableU, { ptr, ptr, ptr, i32 } %86, ptr noundef nonnull align 8 dereferenceable(16) %110)
  call void %112({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %83) #34
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ProductIterable, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %113, i64 8
  store ptr %48, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %113, i64 16
  %116 = getelementptr inbounds i8, ptr %113, i64 24
  store i32 10, ptr %116, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %113, ptr noundef nonnull align 16 dereferenceable(496) @ProductIterable)
  %117 = load ptr, ptr %113, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %114, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = load ptr, ptr %115, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %123 = load i32, ptr %116, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  ret { ptr, ptr, ptr, i32 } %124
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = load ptr, ptr %4, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 8
  %11 = load ptr, ptr %5, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr inbounds i8, ptr %8, i64 16
  %13 = load ptr, ptr %6, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %8, i64 24
  %15 = load i32, ptr %7, align 8
  store i32 %15, ptr %14, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %16 = load ptr, ptr %8, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %16, 0
  %18 = load ptr, ptr %10, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %18, 1
  %20 = load ptr, ptr %12, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 2
  %22 = load i32, ptr %14, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %22, 3
  ret { ptr, ptr, ptr, i32 } %23
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ProductIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ProductIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr inbounds i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 216
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_2(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 9197944775169318296, i64 noundef ptrtoint (ptr @Pair to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 240
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ProductIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 304
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ProductIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(496) @ProductIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %40, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %44, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #25
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract53, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract55, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract57, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(496) @ProductIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #26
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract43, ptr %19, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep46, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep48, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep50, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr noundef nonnull align 8 %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull align 8 %4) #34
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract33, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract35, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract37, ptr %39, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %36, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 32
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #26
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract23, ptr %50, align 8
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep26 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract25, ptr %.fca.1.gep26, align 8
  %.fca.2.extract27 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep28 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract27, ptr %.fca.2.gep28, align 8
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep30 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract29, ptr %.fca.3.gep30, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %50, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %51 = load ptr, ptr %6, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %52)
  %54 = load i32, ptr %8, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = load ptr, ptr %56, align 8
  %58 = call ptr @typegetter_wrapper(ptr %57, ptr %51)
  %59 = load ptr, ptr %6, align 8
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %60)
  %62 = load i32, ptr %8, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = call ptr @typegetter_wrapper(ptr %66, ptr %59)
  %68 = load ptr, ptr %6, align 8
  %69 = load ptr, ptr %5, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %69)
  %71 = load i32, ptr %8, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr ptr, ptr %69, i64 %72
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @typegetter_wrapper(ptr %74, ptr %68)
  %76 = load ptr, ptr %6, align 8
  %77 = load ptr, ptr %5, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %77)
  %79 = load i32, ptr %8, align 8
  %80 = sext i32 %79 to i64
  %81 = getelementptr ptr, ptr %77, i64 %80
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @typegetter_wrapper(ptr %83, ptr %76)
  %85 = call ptr @bump_malloc(i64 noundef 32)
  %86 = getelementptr i8, ptr %85, i64 16
  store ptr %84, ptr %86, align 8
  %87 = getelementptr i8, ptr %85, i64 8
  store ptr %75, ptr %87, align 8
  %88 = getelementptr i8, ptr %85, i64 24
  store ptr null, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %85)
  store ptr @Pair, ptr %85, align 8
  %90 = alloca [4 x ptr], align 8
  store ptr @ProductIterator, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %58, ptr %91, align 8
  %92 = getelementptr inbounds i8, ptr %90, i64 16
  store ptr %67, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %90, i64 24
  store ptr %85, ptr %93, align 8
  %94 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ProductIterator, ptr noundef nonnull align 8 dereferenceable(32) %90)
  %95 = extractvalue { i64, i64 } %94, 0
  %96 = call ptr @bump_malloc(i64 %95)
  store ptr %58, ptr %96, align 8
  %97 = getelementptr i8, ptr %96, i64 8
  store ptr %67, ptr %97, align 8
  %98 = getelementptr i8, ptr %96, i64 16
  store ptr %85, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %96)
  %100 = load ptr, ptr %6, align 8
  %101 = load ptr, ptr %5, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %101)
  %103 = load i32, ptr %8, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr ptr, ptr %101, i64 %104
  %106 = getelementptr i8, ptr %105, i64 24
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %107, align 8
  %109 = call { ptr, ptr, ptr, i32 } %108(ptr %100) #26
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %109, 0
  store ptr %.fca.0.extract9, ptr %110, align 8
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %109, 1
  %.fca.1.gep12 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %.fca.1.extract11, ptr %.fca.1.gep12, align 8
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %109, 2
  %.fca.2.gep14 = getelementptr inbounds i8, ptr %110, i64 16
  store ptr %.fca.2.extract13, ptr %.fca.2.gep14, align 8
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %109, 3
  %.fca.3.gep16 = getelementptr inbounds i8, ptr %110, i64 24
  store i32 %.fca.3.extract15, ptr %.fca.3.gep16, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %110, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = load ptr, ptr %.fca.1.gep12, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %113, 1
  %115 = load ptr, ptr %.fca.2.gep14, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %115, 2
  %117 = load i32, ptr %.fca.3.gep16, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %117, 3
  %119 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %120 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %111)
  %121 = sext i32 %117 to i64
  %122 = getelementptr ptr, ptr %111, i64 %121
  %123 = getelementptr i8, ptr %122, i64 8
  %124 = load ptr, ptr %123, align 8
  %125 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %118, ptr noundef nonnull align 8 %4)
  %126 = call { ptr, ptr, ptr, i32 } %125({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr nonnull %4) #34
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %126, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %126, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %126, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %126, 3
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %127, i64 8
  store ptr %.fca.1.extract3, ptr %128, align 8
  %129 = getelementptr inbounds i8, ptr %127, i64 16
  store ptr %.fca.2.extract5, ptr %129, align 8
  %130 = getelementptr inbounds i8, ptr %127, i64 24
  store i32 %.fca.3.extract7, ptr %130, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %127, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %131 = load ptr, ptr %6, align 8
  %132 = load ptr, ptr %5, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %132)
  %134 = load i32, ptr %8, align 8
  %135 = sext i32 %134 to i64
  %136 = getelementptr ptr, ptr %132, i64 %135
  %137 = getelementptr i8, ptr %136, i64 32
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %138, align 8
  %140 = call { ptr, ptr, ptr, i32 } %139(ptr %131) #26
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 0
  store ptr %.fca.0.extract, ptr %141, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %141, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %141, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %141, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %141, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  %143 = load ptr, ptr %127, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr inbounds i8, ptr %142, i64 8
  %145 = load ptr, ptr %128, align 8
  store ptr %145, ptr %144, align 8
  %146 = getelementptr inbounds i8, ptr %142, i64 16
  %147 = load ptr, ptr %129, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr inbounds i8, ptr %142, i64 24
  %149 = load i32, ptr %130, align 8
  store i32 %149, ptr %148, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %142, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %150 = load ptr, ptr %142, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
  %152 = load ptr, ptr %144, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 1
  %154 = load ptr, ptr %146, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 2
  %156 = load i32, ptr %148, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %156, 3
  %158 = alloca { ptr, ptr, ptr, i32 }, align 8
  %159 = load ptr, ptr %141, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr inbounds i8, ptr %158, i64 8
  %161 = load ptr, ptr %.fca.1.gep, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr inbounds i8, ptr %158, i64 16
  %163 = load ptr, ptr %.fca.2.gep, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr inbounds i8, ptr %158, i64 24
  %165 = load i32, ptr %.fca.3.gep, align 8
  store i32 %165, ptr %164, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %158, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %166 = load ptr, ptr %158, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %166, 0
  %168 = load ptr, ptr %160, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 1
  %170 = load ptr, ptr %162, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %170, 2
  %172 = load i32, ptr %164, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %171, i32 %172, 3
  %174 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterator, ptr undef, ptr undef, i32 undef }, ptr %96, 1
  %175 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr undef, 2
  %176 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 10, 3
  %177 = load ptr, ptr %6, align 8
  %178 = load ptr, ptr %5, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %178)
  %180 = load i32, ptr %8, align 8
  %181 = sext i32 %180 to i64
  %182 = getelementptr ptr, ptr %178, i64 %181
  %183 = load ptr, ptr %182, align 8
  %184 = call ptr @typegetter_wrapper(ptr %183, ptr %177)
  %185 = call ptr @bump_malloc(i64 noundef 24)
  %186 = getelementptr i8, ptr %185, i64 8
  store ptr %184, ptr %186, align 8
  %187 = getelementptr i8, ptr %185, i64 16
  store ptr null, ptr %187, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %185)
  store ptr @Iterator, ptr %185, align 8
  %189 = load ptr, ptr %6, align 8
  %190 = load ptr, ptr %5, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %190)
  %192 = load i32, ptr %8, align 8
  %193 = sext i32 %192 to i64
  %194 = getelementptr ptr, ptr %190, i64 %193
  %195 = getelementptr i8, ptr %194, i64 8
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @typegetter_wrapper(ptr %196, ptr %189)
  %198 = call ptr @bump_malloc(i64 noundef 24)
  %199 = getelementptr i8, ptr %198, i64 8
  store ptr %197, ptr %199, align 8
  %200 = getelementptr i8, ptr %198, i64 16
  store ptr null, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %198)
  store ptr @Iterable, ptr %198, align 8
  %202 = alloca [2 x ptr], align 8
  store ptr %185, ptr %202, align 8
  %203 = getelementptr inbounds i8, ptr %202, i64 8
  store ptr %198, ptr %203, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %202)
  %205 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 16 dereferenceable(192) @ProductIterator)
  %206 = alloca { ptr, ptr }, align 8
  store ptr %150, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %166, ptr %207, align 8
  %208 = call ptr @behavior_wrapper(ptr noundef nonnull @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, { ptr, ptr, ptr, i32 } %176, ptr noundef nonnull align 8 dereferenceable(16) %206)
  call void %208({ ptr, ptr, ptr, i32 } %176, { ptr, ptr, ptr, i32 } %176, ptr nonnull %202, { ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %173) #34
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ProductIterator, ptr %209, align 8
  %210 = getelementptr inbounds i8, ptr %209, i64 8
  store ptr %96, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %209, i64 16
  %212 = getelementptr inbounds i8, ptr %209, i64 24
  store i32 10, ptr %212, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %209, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %213 = load ptr, ptr %209, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = load ptr, ptr %210, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %215, 1
  %217 = load ptr, ptr %211, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %217, 2
  %219 = load i32, ptr %212, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, i32 %219, 3
  ret { ptr, ptr, ptr, i32 } %220
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ProductIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 152, i64 8 }
}

define ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr inbounds i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 152
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_2(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract45 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract47 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract49 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract51 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract45, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract47, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract49, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract51, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(192) @ProductIterator)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract33, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %.fca.1.extract35, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %.fca.2.extract37, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %11, i64 24
  store i32 %.fca.3.extract39, ptr %14, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %11, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = load ptr, ptr %11, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 8
  %18 = load ptr, ptr %12, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %15, i64 16
  %20 = load ptr, ptr %13, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %15, i64 24
  %22 = load i32, ptr %14, align 8
  store i32 %22, ptr %21, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %15, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %23 = load ptr, ptr %8, align 8
  %24 = load ptr, ptr %7, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %24)
  %26 = load i32, ptr %10, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = getelementptr i8, ptr %28, i64 24
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 1
  %37 = load ptr, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 2
  %39 = load i32, ptr %21, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %39, 3
  call void %32(ptr %23, { ptr, ptr, ptr, i32 } %40) #25
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract23 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %41, i64 8
  store ptr %.fca.1.extract23, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %41, i64 16
  store ptr %.fca.2.extract25, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %41, i64 24
  store i32 %.fca.3.extract27, ptr %44, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %41, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = load ptr, ptr %41, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %45, i64 8
  %48 = load ptr, ptr %42, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %45, i64 16
  %50 = load ptr, ptr %43, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr inbounds i8, ptr %45, i64 24
  %52 = load i32, ptr %44, align 8
  store i32 %52, ptr %51, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %45, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %53 = load ptr, ptr %8, align 8
  %54 = load ptr, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %54)
  %56 = load i32, ptr %10, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 40
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr i8, ptr %60, i64 8
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %45, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %47, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = load ptr, ptr %49, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 2
  %69 = load i32, ptr %51, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %69, 3
  call void %62(ptr %53, { ptr, ptr, ptr, i32 } %70) #25
  %71 = load ptr, ptr %8, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %72)
  %74 = load i32, ptr %10, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = getelementptr i8, ptr %76, i64 40
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = call { ptr, ptr, ptr, i32 } %79(ptr %71) #26
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %80, 0
  store ptr %.fca.0.extract13, ptr %81, align 8
  %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %80, 1
  %.fca.1.gep16 = getelementptr inbounds i8, ptr %81, i64 8
  store ptr %.fca.1.extract15, ptr %.fca.1.gep16, align 8
  %.fca.2.extract17 = extractvalue { ptr, ptr, ptr, i32 } %80, 2
  %.fca.2.gep18 = getelementptr inbounds i8, ptr %81, i64 16
  store ptr %.fca.2.extract17, ptr %.fca.2.gep18, align 8
  %.fca.3.extract19 = extractvalue { ptr, ptr, ptr, i32 } %80, 3
  %.fca.3.gep20 = getelementptr inbounds i8, ptr %81, i64 24
  store i32 %.fca.3.extract19, ptr %.fca.3.gep20, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %81, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = load ptr, ptr %.fca.1.gep16, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 1
  %86 = load ptr, ptr %.fca.2.gep18, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 2
  %88 = load i32, ptr %.fca.3.gep20, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 %88, 3
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %82)
  %92 = sext i32 %88 to i64
  %93 = getelementptr ptr, ptr %82, i64 %92
  %94 = getelementptr i8, ptr %93, i64 8
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %89, ptr noundef nonnull align 8 %6)
  %97 = call { ptr, ptr, ptr, i32 } %96({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr nonnull align 8 %6) #34
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %97, 2
  %.fca.3.extract9 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %98, i64 8
  store ptr %.fca.1.extract5, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %98, i64 16
  store ptr %.fca.2.extract7, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %98, i64 24
  store i32 %.fca.3.extract9, ptr %101, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %98, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = load ptr, ptr %98, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr inbounds i8, ptr %102, i64 8
  %105 = load ptr, ptr %99, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr inbounds i8, ptr %102, i64 16
  %107 = load ptr, ptr %100, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr inbounds i8, ptr %102, i64 24
  %109 = load i32, ptr %101, align 8
  store i32 %109, ptr %108, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %102, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %110 = load ptr, ptr %8, align 8
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %111)
  %113 = load i32, ptr %10, align 8
  %114 = sext i32 %113 to i64
  %115 = getelementptr ptr, ptr %111, i64 %114
  %116 = getelementptr i8, ptr %115, i64 32
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr i8, ptr %117, i64 8
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %102, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = load ptr, ptr %104, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %122, 1
  %124 = load ptr, ptr %106, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 2
  %126 = load i32, ptr %108, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  call void %119(ptr %110, { ptr, ptr, ptr, i32 } %127) #25
  %128 = load ptr, ptr %8, align 8
  %129 = load ptr, ptr %7, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %129)
  %131 = load i32, ptr %10, align 8
  %132 = sext i32 %131 to i64
  %133 = getelementptr ptr, ptr %129, i64 %132
  %134 = getelementptr i8, ptr %133, i64 24
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %135, align 8
  %137 = call { ptr, ptr, ptr, i32 } %136(ptr %128) #26
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %137, 0
  store ptr %.fca.0.extract1, ptr %138, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %137, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %138, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %137, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %138, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %137, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %138, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %138, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %139, 0
  %141 = load ptr, ptr %.fca.1.gep, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %141, 1
  %143 = load ptr, ptr %.fca.2.gep, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %143, 2
  %145 = load i32, ptr %.fca.3.gep, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %145, 3
  %147 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %148 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %139)
  %149 = sext i32 %145 to i64
  %150 = getelementptr ptr, ptr %139, i64 %149
  %151 = getelementptr i8, ptr %150, i64 8
  %152 = load ptr, ptr %151, align 8
  %153 = call ptr @behavior_wrapper(ptr %152, { ptr, ptr, ptr, i32 } %146, ptr noundef nonnull align 8 %6)
  %154 = call { ptr, i160 } %153({ ptr, ptr, ptr, i32 } %146, { ptr, ptr, ptr, i32 } %146, ptr nonnull %6) #34
  %155 = load ptr, ptr %8, align 8
  %156 = load ptr, ptr %7, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %156)
  %158 = load i32, ptr %10, align 8
  %159 = sext i32 %158 to i64
  %160 = getelementptr ptr, ptr %156, i64 %159
  %161 = getelementptr i8, ptr %160, i64 48
  %162 = load ptr, ptr %161, align 8
  %163 = getelementptr i8, ptr %162, i64 8
  %164 = load ptr, ptr %163, align 8
  call void %164(ptr %155, { ptr, i160 } %154) #25
  ret void
}

define { ptr, i160 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [3 x ptr], align 8
  %7 = alloca [2 x ptr], align 8
  %8 = alloca { ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract12, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract, ptr %16, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %13, ptr noundef nonnull align 16 dereferenceable(192) @ProductIterator)
  %17 = load ptr, ptr %14, align 8
  %18 = load ptr, ptr %13, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %18)
  %20 = load i32, ptr %16, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr ptr, ptr %18, i64 %21
  %23 = getelementptr i8, ptr %22, i64 48
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, i160 } %25(ptr %17) #26
  %.sroa.0.0111 = extractvalue { ptr, i160 } %26, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %18)
  %28 = load ptr, ptr %22, align 8
  %29 = call ptr @typegetter_wrapper(ptr %28, ptr %17)
  %30 = icmp ne ptr %.sroa.0.0111, @nil_typ
  %31 = icmp ne ptr %.sroa.0.0111, null
  %.not82112 = and i1 %30, %31
  br i1 %.not82112, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %3
  %.fca.1.gep71 = getelementptr inbounds i8, ptr %5, i64 8
  %.fca.2.gep73 = getelementptr inbounds i8, ptr %5, i64 16
  %.fca.3.gep75 = getelementptr inbounds i8, ptr %5, i64 24
  %.fca.1.gep45 = getelementptr inbounds i8, ptr %9, i64 8
  %.fca.2.gep47 = getelementptr inbounds i8, ptr %9, i64 16
  %.fca.3.gep49 = getelementptr inbounds i8, ptr %9, i64 24
  %.fca.1.gep33 = getelementptr inbounds i8, ptr %10, i64 8
  %.fca.2.gep = getelementptr inbounds i8, ptr %10, i64 16
  %.fca.3.gep = getelementptr inbounds i8, ptr %10, i64 24
  %32 = getelementptr inbounds i8, ptr %11, i64 8
  %33 = getelementptr inbounds i8, ptr %11, i64 16
  %34 = getelementptr inbounds i8, ptr %11, i64 24
  %35 = getelementptr inbounds i8, ptr %12, i64 8
  %36 = getelementptr inbounds i8, ptr %12, i64 16
  %37 = getelementptr inbounds i8, ptr %12, i64 24
  br label %38

38:                                               ; preds = %.lr.ph, %82
  %.sroa.0.0114 = phi ptr [ %.sroa.0.0111, %.lr.ph ], [ %.sroa.0.0, %82 ]
  %.pn113 = phi { ptr, i160 } [ %26, %.lr.ph ], [ %170, %82 ]
  %39 = load ptr, ptr %14, align 8
  %40 = load ptr, ptr %13, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %40)
  %42 = load i32, ptr %16, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 32
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call { ptr, ptr, ptr, i32 } %47(ptr %39) #26
  %.fca.0.extract68 = extractvalue { ptr, ptr, ptr, i32 } %48, 0
  store ptr %.fca.0.extract68, ptr %5, align 8
  %.fca.1.extract70 = extractvalue { ptr, ptr, ptr, i32 } %48, 1
  store ptr %.fca.1.extract70, ptr %.fca.1.gep71, align 8
  %.fca.2.extract72 = extractvalue { ptr, ptr, ptr, i32 } %48, 2
  store ptr %.fca.2.extract72, ptr %.fca.2.gep73, align 8
  %.fca.3.extract74 = extractvalue { ptr, ptr, ptr, i32 } %48, 3
  store i32 %.fca.3.extract74, ptr %.fca.3.gep75, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %49 = load ptr, ptr %5, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = load ptr, ptr %.fca.1.gep71, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %53 = load ptr, ptr %.fca.2.gep73, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = load i32, ptr %.fca.3.gep75, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %49)
  %59 = sext i32 %55 to i64
  %60 = getelementptr ptr, ptr %49, i64 %59
  %61 = getelementptr i8, ptr %60, i64 8
  %62 = load ptr, ptr %61, align 8
  %63 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %56, ptr noundef nonnull align 8 %4)
  %64 = call { ptr, i160 } %63({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull align 8 %4) #34
  %.fca.0.extract61 = extractvalue { ptr, i160 } %64, 0
  %65 = load ptr, ptr %14, align 8
  %66 = load ptr, ptr %13, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %66)
  %68 = load i32, ptr %16, align 8
  %69 = sext i32 %68 to i64
  %70 = getelementptr ptr, ptr %66, i64 %69
  %71 = getelementptr i8, ptr %70, i64 8
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @typegetter_wrapper(ptr %72, ptr %65)
  %74 = icmp ne ptr %.fca.0.extract61, @nil_typ
  %75 = icmp ne ptr %.fca.0.extract61, null
  %.not84 = and i1 %74, %75
  %76 = load ptr, ptr %14, align 8
  %77 = load ptr, ptr %13, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %77)
  %79 = load i32, ptr %16, align 8
  %80 = sext i32 %79 to i64
  %81 = getelementptr ptr, ptr %77, i64 %80
  br i1 %.not84, label %176, label %82

82:                                               ; preds = %38
  %83 = getelementptr i8, ptr %81, i64 24
  %84 = load ptr, ptr %83, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = call { ptr, ptr, ptr, i32 } %85(ptr %76) #26
  %.fca.0.extract42 = extractvalue { ptr, ptr, ptr, i32 } %86, 0
  store ptr %.fca.0.extract42, ptr %9, align 8
  %.fca.1.extract44 = extractvalue { ptr, ptr, ptr, i32 } %86, 1
  store ptr %.fca.1.extract44, ptr %.fca.1.gep45, align 8
  %.fca.2.extract46 = extractvalue { ptr, ptr, ptr, i32 } %86, 2
  store ptr %.fca.2.extract46, ptr %.fca.2.gep47, align 8
  %.fca.3.extract48 = extractvalue { ptr, ptr, ptr, i32 } %86, 3
  store i32 %.fca.3.extract48, ptr %.fca.3.gep49, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %87 = load ptr, ptr %9, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %.fca.1.gep45, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %.fca.2.gep47, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %.fca.3.gep49, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  %95 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %96 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %87)
  %97 = sext i32 %93 to i64
  %98 = getelementptr ptr, ptr %87, i64 %97
  %99 = getelementptr i8, ptr %98, i64 8
  %100 = load ptr, ptr %99, align 8
  %101 = call ptr @behavior_wrapper(ptr %100, { ptr, ptr, ptr, i32 } %94, ptr noundef nonnull align 8 %4)
  %102 = call { ptr, i160 } %101({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr nonnull align 8 %4) #34
  %103 = load ptr, ptr %14, align 8
  %104 = load ptr, ptr %13, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %104)
  %106 = load i32, ptr %16, align 8
  %107 = sext i32 %106 to i64
  %108 = getelementptr ptr, ptr %104, i64 %107
  %109 = getelementptr i8, ptr %108, i64 48
  %110 = load ptr, ptr %109, align 8
  %111 = getelementptr i8, ptr %110, i64 8
  %112 = load ptr, ptr %111, align 8
  call void %112(ptr %103, { ptr, i160 } %102) #25
  %113 = load ptr, ptr %14, align 8
  %114 = load ptr, ptr %13, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %114)
  %116 = load i32, ptr %16, align 8
  %117 = sext i32 %116 to i64
  %118 = getelementptr ptr, ptr %114, i64 %117
  %119 = getelementptr i8, ptr %118, i64 40
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %120, align 8
  %122 = call { ptr, ptr, ptr, i32 } %121(ptr %113) #26
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %122, 0
  store ptr %.fca.0.extract30, ptr %10, align 8
  %.fca.1.extract32 = extractvalue { ptr, ptr, ptr, i32 } %122, 1
  store ptr %.fca.1.extract32, ptr %.fca.1.gep33, align 8
  %.fca.2.extract34 = extractvalue { ptr, ptr, ptr, i32 } %122, 2
  store ptr %.fca.2.extract34, ptr %.fca.2.gep, align 8
  %.fca.3.extract35 = extractvalue { ptr, ptr, ptr, i32 } %122, 3
  store i32 %.fca.3.extract35, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %123 = load ptr, ptr %10, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %123, 0
  %125 = load ptr, ptr %.fca.1.gep33, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 1
  %127 = load ptr, ptr %.fca.2.gep, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, ptr %127, 2
  %129 = load i32, ptr %.fca.3.gep, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 %129, 3
  %131 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %132 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %123)
  %133 = sext i32 %129 to i64
  %134 = getelementptr ptr, ptr %123, i64 %133
  %135 = getelementptr i8, ptr %134, i64 8
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @behavior_wrapper(ptr %136, { ptr, ptr, ptr, i32 } %130, ptr noundef nonnull align 8 %4)
  %138 = call { ptr, ptr, ptr, i32 } %137({ ptr, ptr, ptr, i32 } %130, { ptr, ptr, ptr, i32 } %130, ptr nonnull %4) #34
  %.fca.0.extract20 = extractvalue { ptr, ptr, ptr, i32 } %138, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %138, 1
  %.fca.2.extract24 = extractvalue { ptr, ptr, ptr, i32 } %138, 2
  %.fca.3.extract25 = extractvalue { ptr, ptr, ptr, i32 } %138, 3
  store ptr %.fca.0.extract20, ptr %11, align 8
  store ptr %.fca.1.extract22, ptr %32, align 8
  store ptr %.fca.2.extract24, ptr %33, align 8
  store i32 %.fca.3.extract25, ptr %34, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %11, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %139 = load ptr, ptr %11, align 8
  store ptr %139, ptr %12, align 8
  %140 = load ptr, ptr %32, align 8
  store ptr %140, ptr %35, align 8
  %141 = load ptr, ptr %33, align 8
  store ptr %141, ptr %36, align 8
  %142 = load i32, ptr %34, align 8
  store i32 %142, ptr %37, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %12, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %143 = load ptr, ptr %14, align 8
  %144 = load ptr, ptr %13, align 8
  %145 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %144)
  %146 = load i32, ptr %16, align 8
  %147 = sext i32 %146 to i64
  %148 = getelementptr ptr, ptr %144, i64 %147
  %149 = getelementptr i8, ptr %148, i64 32
  %150 = load ptr, ptr %149, align 8
  %151 = getelementptr i8, ptr %150, i64 8
  %152 = load ptr, ptr %151, align 8
  %153 = load ptr, ptr %12, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %153, 0
  %155 = load ptr, ptr %35, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr %155, 1
  %157 = load ptr, ptr %36, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 2
  %159 = load i32, ptr %37, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, i32 %159, 3
  call void %152(ptr %143, { ptr, ptr, ptr, i32 } %160) #25
  %161 = load ptr, ptr %14, align 8
  %162 = load ptr, ptr %13, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %162)
  %164 = load i32, ptr %16, align 8
  %165 = sext i32 %164 to i64
  %166 = getelementptr ptr, ptr %162, i64 %165
  %167 = getelementptr i8, ptr %166, i64 48
  %168 = load ptr, ptr %167, align 8
  %169 = load ptr, ptr %168, align 8
  %170 = call { ptr, i160 } %169(ptr %161) #26
  %.sroa.0.0 = extractvalue { ptr, i160 } %170, 0
  %171 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %162)
  %172 = load ptr, ptr %166, align 8
  %173 = call ptr @typegetter_wrapper(ptr %172, ptr %161)
  %174 = icmp ne ptr %.sroa.0.0, @nil_typ
  %175 = icmp ne ptr %.sroa.0.0, null
  %.not82 = and i1 %174, %175
  br i1 %.not82, label %38, label %.loopexit

176:                                              ; preds = %38
  %177 = load ptr, ptr %81, align 8
  %178 = call ptr @typegetter_wrapper(ptr %177, ptr %76)
  %179 = load ptr, ptr %14, align 8
  %180 = load ptr, ptr %13, align 8
  %181 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %180)
  %182 = load i32, ptr %16, align 8
  %183 = sext i32 %182 to i64
  %184 = getelementptr ptr, ptr %180, i64 %183
  %185 = getelementptr i8, ptr %184, i64 8
  %186 = load ptr, ptr %185, align 8
  %187 = call ptr @typegetter_wrapper(ptr %186, ptr %179)
  store ptr @Pair, ptr %6, align 8
  %188 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %178, ptr %188, align 8
  %189 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %187, ptr %189, align 8
  %190 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_Pair, ptr noundef nonnull align 8 dereferenceable(24) %6)
  %191 = extractvalue { i64, i64 } %190, 0
  %192 = call ptr @bump_malloc(i64 %191)
  store ptr %178, ptr %192, align 8
  %193 = getelementptr i8, ptr %192, i64 8
  store ptr %187, ptr %193, align 8
  %194 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %192)
  %195 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Pair, ptr undef, ptr undef, i32 undef }, ptr %192, 1
  %196 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr undef, 2
  %197 = insertvalue { ptr, ptr, ptr, i32 } %196, i32 10, 3
  %198 = load ptr, ptr %14, align 8
  %199 = load ptr, ptr %13, align 8
  %200 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %199)
  %201 = load i32, ptr %16, align 8
  %202 = sext i32 %201 to i64
  %203 = getelementptr ptr, ptr %199, i64 %202
  %204 = load ptr, ptr %203, align 8
  %205 = call ptr @typegetter_wrapper(ptr %204, ptr %198)
  %206 = load ptr, ptr %14, align 8
  %207 = load ptr, ptr %13, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef %207)
  %209 = load i32, ptr %16, align 8
  %210 = sext i32 %209 to i64
  %211 = getelementptr ptr, ptr %207, i64 %210
  %212 = getelementptr i8, ptr %211, i64 8
  %213 = load ptr, ptr %212, align 8
  %214 = call ptr @typegetter_wrapper(ptr %213, ptr %206)
  store ptr %205, ptr %7, align 8
  %215 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %214, ptr %215, align 8
  %216 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %7)
  %217 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @Pair)
  store ptr %.sroa.0.0114, ptr %8, align 8
  %218 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.0.extract61, ptr %218, align 8
  %219 = call ptr @behavior_wrapper(ptr noundef nonnull @Pair_B_init_firstT_secondU, { ptr, ptr, ptr, i32 } %197, ptr noundef nonnull align 8 dereferenceable(16) %8)
  call void %219({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr nonnull %7, { ptr, i160 } %.pn113, { ptr, i160 } %64) #34
  %220 = ptrtoint ptr %192 to i64
  %.sroa.3.8.insert.ext = zext i64 %220 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  br label %.loopexit

.loopexit:                                        ; preds = %82, %3, %176
  %.reg2mem48.sroa.3.0 = phi i160 [ %.sroa.3.8.insert.insert, %176 ], [ undef, %3 ], [ undef, %82 ]
  %.reg2mem48.sroa.0.0 = phi ptr [ @Pair, %176 ], [ @nil_typ, %3 ], [ @nil_typ, %82 ]
  %.reload49.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem48.sroa.0.0, 0
  %.reload49.fca.1.insert = insertvalue { ptr, i160 } %.reload49.fca.0.insert, i160 %.reg2mem48.sroa.3.0, 1
  ret { ptr, i160 } %.reload49.fca.1.insert
}

define { i64, i64 } @_data_size_Pair(ptr nocapture nofree readonly align 8 %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr %6, ptr noundef nonnull align 8 dereferenceable(8) %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = call { i64, i64 } @size_wrapper(ptr %20, ptr noundef nonnull align 8 dereferenceable(8) %17)
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = call i64 @llvm.umax.i64(i64 %9, i64 %23)
  %25 = call i64 @llvm.umax.i64(i64 %24, i64 noundef 8), !range !1
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = getelementptr inbounds i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr i8, ptr %26, i64 136
  %28 = load ptr, ptr %27, align 8
  ret ptr %28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_nil_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_nil_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_nil_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %7, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.2, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @nil_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr nocapture nofree writeonly %2) #3 {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = trunc i160 %.fca.1.extract to i64
  %6 = inttoptr i64 %5 to ptr
  %7 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_nil_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp slt i64 %8, 17
  %10 = select i1 %9, ptr %.fca.1.gep, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %10, i64 %8, i1 noundef false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @ProductIterator_getter_current_first(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 120
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 128
  %6 = load i160, ptr %5, align 8
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_current_first(ptr nocapture nofree writeonly align 8 %0, { ptr, i160 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 120
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 128
  store i160 %.fca.1.extract, ptr %4, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 88
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 96
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 104
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 112
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_second_iterable(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 88
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 96
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 104
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 112
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_second_iterator(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_first_iterator(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Container(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Iterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) #3 {
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract12, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(160) @Pair)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %10, { ptr, i160 } %3) #25
  %20 = load ptr, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %21)
  %23 = load i32, ptr %9, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 24
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, { ptr, i160 } %4) #25
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(160) @Pair)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #26
  ret { ptr, i160 } %17
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(160) @Pair)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #26
  ret { ptr, i160 } %17
}

define { ptr, i160 } @Pair_getter_second(ptr noundef nonnull align 8 dereferenceable(8) %0) #3 {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } @size_wrapper(ptr %5, ptr noundef nonnull align 8 dereferenceable(8) %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 16
  %14 = add i64 %13, %12
  %15 = getelementptr inbounds i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 72
  %19 = load ptr, ptr %18, align 8
  %20 = call { i64, i64 } @size_wrapper(ptr %19, ptr noundef nonnull align 8 dereferenceable(8) %16)
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = load ptr, ptr %15, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 56
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr, i160 } @box_wrapper(ptr %31, ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %28)
  ret { ptr, i160 } %32
}

define void @Pair_setter_second(ptr noundef nonnull align 8 dereferenceable(8) %0, { ptr, i160 } %1) #3 {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr %6, ptr noundef nonnull align 8 dereferenceable(8) %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr inbounds i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = call { i64, i64 } @size_wrapper(ptr %20, ptr noundef nonnull align 8 dereferenceable(8) %17)
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = load ptr, ptr %16, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 64
  %32 = load ptr, ptr %31, align 8
  call void @unbox_wrapper(ptr %32, { ptr, i160 } %1, ptr noundef nonnull align 8 dereferenceable(8) %29, ptr %28)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr noundef nonnull align 8 dereferenceable(8) %0) #3 {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } @size_wrapper(ptr %5, ptr noundef nonnull align 8 dereferenceable(8) %2)
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 16, %7
  %9 = icmp eq i64 %8, 0
  %reass.sub = sub i64 %7, %8
  %10 = add i64 %reass.sub, 16
  %11 = select i1 %9, i64 16, i64 %10
  %12 = getelementptr i8, ptr %0, i64 %11
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } @box_wrapper(ptr %16, ptr %12, ptr noundef nonnull align 8 dereferenceable(8) %13)
  ret { ptr, i160 } %17
}

define void @Pair_setter_first(ptr noundef nonnull align 8 dereferenceable(8) %0, { ptr, i160 } %1) #3 {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr %6, ptr noundef nonnull align 8 dereferenceable(8) %3)
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %reass.sub = sub i64 %8, %9
  %11 = add i64 %reass.sub, 16
  %12 = select i1 %10, i64 16, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 64
  %17 = load ptr, ptr %16, align 8
  call void @unbox_wrapper(ptr %17, { ptr, i160 } %1, ptr noundef nonnull align 8 dereferenceable(8) %14, ptr %13)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Iterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ZipIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ZipIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr inbounds i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 216
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_2(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 9197944775169318296, i64 noundef ptrtoint (ptr @Pair to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 240
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ZipIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 304
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ZipIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(496) @ZipIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %40, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %44, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #25
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(496) @ZipIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #26
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr noundef nonnull align 8 %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull align 8 %4) #34
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %36, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 32
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #26
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %50, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr noundef nonnull align 8 %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull align 8 %4) #34
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %67, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = load ptr, ptr %6, align 8
  %80 = load ptr, ptr %5, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %80)
  %82 = load i32, ptr %8, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr ptr, ptr %80, i64 %83
  %85 = getelementptr i8, ptr %84, i64 8
  %86 = load ptr, ptr %85, align 8
  %87 = call ptr @typegetter_wrapper(ptr %86, ptr %79)
  %88 = load ptr, ptr %6, align 8
  %89 = load ptr, ptr %5, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %89)
  %91 = load i32, ptr %8, align 8
  %92 = sext i32 %91 to i64
  %93 = getelementptr ptr, ptr %89, i64 %92
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @typegetter_wrapper(ptr %94, ptr %88)
  %96 = load ptr, ptr %6, align 8
  %97 = load ptr, ptr %5, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %97)
  %99 = load i32, ptr %8, align 8
  %100 = sext i32 %99 to i64
  %101 = getelementptr ptr, ptr %97, i64 %100
  %102 = getelementptr i8, ptr %101, i64 8
  %103 = load ptr, ptr %102, align 8
  %104 = call ptr @typegetter_wrapper(ptr %103, ptr %96)
  %105 = call ptr @bump_malloc(i64 noundef 32)
  %106 = getelementptr i8, ptr %105, i64 16
  store ptr %104, ptr %106, align 8
  %107 = getelementptr i8, ptr %105, i64 8
  store ptr %95, ptr %107, align 8
  %108 = getelementptr i8, ptr %105, i64 24
  store ptr null, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %105)
  store ptr @Pair, ptr %105, align 8
  %110 = alloca [4 x ptr], align 8
  store ptr @ZipIterator, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %78, ptr %111, align 8
  %112 = getelementptr inbounds i8, ptr %110, i64 16
  store ptr %87, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %110, i64 24
  store ptr %105, ptr %113, align 8
  %114 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ZipIterator, ptr noundef nonnull align 8 dereferenceable(32) %110)
  %115 = extractvalue { i64, i64 } %114, 0
  %116 = call ptr @bump_malloc(i64 %115)
  store ptr %78, ptr %116, align 8
  %117 = getelementptr i8, ptr %116, i64 8
  store ptr %87, ptr %117, align 8
  %118 = getelementptr i8, ptr %116, i64 16
  store ptr %105, ptr %118, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %116)
  %120 = load ptr, ptr %6, align 8
  %121 = load ptr, ptr %5, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %121)
  %123 = load i32, ptr %8, align 8
  %124 = sext i32 %123 to i64
  %125 = getelementptr ptr, ptr %121, i64 %124
  %126 = getelementptr i8, ptr %125, i64 24
  %127 = load ptr, ptr %126, align 8
  %128 = load ptr, ptr %127, align 8
  %129 = call { ptr, ptr, ptr, i32 } %128(ptr %120) #26
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %129, 0
  store ptr %.fca.0.extract17, ptr %130, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %129, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %130, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %129, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %130, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %129, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %130, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %130, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = load ptr, ptr %.fca.1.gep20, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %133, 1
  %135 = load ptr, ptr %.fca.2.gep22, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %135, 2
  %137 = load i32, ptr %.fca.3.gep24, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %137, 3
  %139 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %140 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %131)
  %141 = sext i32 %137 to i64
  %142 = getelementptr ptr, ptr %131, i64 %141
  %143 = getelementptr i8, ptr %142, i64 8
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @behavior_wrapper(ptr %144, { ptr, ptr, ptr, i32 } %138, ptr noundef nonnull align 8 %4)
  %146 = call { ptr, ptr, ptr, i32 } %145({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr nonnull align 8 %4) #34
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %146, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %146, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %146, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %146, 3
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %147, align 8
  %148 = getelementptr inbounds i8, ptr %147, i64 8
  store ptr %.fca.1.extract7, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 16
  store ptr %.fca.2.extract9, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %147, i64 24
  store i32 %.fca.3.extract11, ptr %150, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %147, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %151 = load ptr, ptr %6, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %152)
  %154 = load i32, ptr %8, align 8
  %155 = sext i32 %154 to i64
  %156 = getelementptr ptr, ptr %152, i64 %155
  %157 = getelementptr i8, ptr %156, i64 32
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %158, align 8
  %160 = call { ptr, ptr, ptr, i32 } %159(ptr %151) #26
  %161 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %160, 0
  store ptr %.fca.0.extract1, ptr %161, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %160, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %161, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %160, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %161, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %160, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %161, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %161, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = load ptr, ptr %.fca.1.gep, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 1
  %166 = load ptr, ptr %.fca.2.gep, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 2
  %168 = load i32, ptr %.fca.3.gep, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %168, 3
  %170 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %171 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %162)
  %172 = sext i32 %168 to i64
  %173 = getelementptr ptr, ptr %162, i64 %172
  %174 = getelementptr i8, ptr %173, i64 8
  %175 = load ptr, ptr %174, align 8
  %176 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %169, ptr noundef nonnull align 8 %4)
  %177 = call { ptr, ptr, ptr, i32 } %176({ ptr, ptr, ptr, i32 } %169, { ptr, ptr, ptr, i32 } %169, ptr nonnull %4) #34
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 3
  %178 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %178, align 8
  %179 = getelementptr inbounds i8, ptr %178, i64 8
  store ptr %.fca.1.extract, ptr %179, align 8
  %180 = getelementptr inbounds i8, ptr %178, i64 16
  store ptr %.fca.2.extract, ptr %180, align 8
  %181 = getelementptr inbounds i8, ptr %178, i64 24
  store i32 %.fca.3.extract, ptr %181, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %178, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %182 = alloca { ptr, ptr, ptr, i32 }, align 8
  %183 = load ptr, ptr %147, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr inbounds i8, ptr %182, i64 8
  %185 = load ptr, ptr %148, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr inbounds i8, ptr %182, i64 16
  %187 = load ptr, ptr %149, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr inbounds i8, ptr %182, i64 24
  %189 = load i32, ptr %150, align 8
  store i32 %189, ptr %188, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %182, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %190 = load ptr, ptr %182, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %190, 0
  %192 = load ptr, ptr %184, align 8
  %193 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %192, 1
  %194 = load ptr, ptr %186, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %193, ptr %194, 2
  %196 = load i32, ptr %188, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %196, 3
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = load ptr, ptr %178, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr inbounds i8, ptr %198, i64 8
  %201 = load ptr, ptr %179, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr inbounds i8, ptr %198, i64 16
  %203 = load ptr, ptr %180, align 8
  store ptr %203, ptr %202, align 8
  %204 = getelementptr inbounds i8, ptr %198, i64 24
  %205 = load i32, ptr %181, align 8
  store i32 %205, ptr %204, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %198, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %206 = load ptr, ptr %198, align 8
  %207 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %206, 0
  %208 = load ptr, ptr %200, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %207, ptr %208, 1
  %210 = load ptr, ptr %202, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %210, 2
  %212 = load i32, ptr %204, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %211, i32 %212, 3
  %214 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterator, ptr undef, ptr undef, i32 undef }, ptr %116, 1
  %215 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr undef, 2
  %216 = insertvalue { ptr, ptr, ptr, i32 } %215, i32 10, 3
  %217 = load ptr, ptr %6, align 8
  %218 = load ptr, ptr %5, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %218)
  %220 = load i32, ptr %8, align 8
  %221 = sext i32 %220 to i64
  %222 = getelementptr ptr, ptr %218, i64 %221
  %223 = load ptr, ptr %222, align 8
  %224 = call ptr @typegetter_wrapper(ptr %223, ptr %217)
  %225 = call ptr @bump_malloc(i64 noundef 24)
  %226 = getelementptr i8, ptr %225, i64 8
  store ptr %224, ptr %226, align 8
  %227 = getelementptr i8, ptr %225, i64 16
  store ptr null, ptr %227, align 8
  %228 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %225)
  store ptr @Iterator, ptr %225, align 8
  %229 = load ptr, ptr %6, align 8
  %230 = load ptr, ptr %5, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef %230)
  %232 = load i32, ptr %8, align 8
  %233 = sext i32 %232 to i64
  %234 = getelementptr ptr, ptr %230, i64 %233
  %235 = getelementptr i8, ptr %234, i64 8
  %236 = load ptr, ptr %235, align 8
  %237 = call ptr @typegetter_wrapper(ptr %236, ptr %229)
  %238 = call ptr @bump_malloc(i64 noundef 24)
  %239 = getelementptr i8, ptr %238, i64 8
  store ptr %237, ptr %239, align 8
  %240 = getelementptr i8, ptr %238, i64 16
  store ptr null, ptr %240, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %238)
  store ptr @Iterator, ptr %238, align 8
  %242 = alloca [2 x ptr], align 8
  store ptr %225, ptr %242, align 8
  %243 = getelementptr inbounds i8, ptr %242, i64 8
  store ptr %238, ptr %243, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %242)
  %245 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef nonnull align 16 dereferenceable(176) @ZipIterator)
  %246 = alloca { ptr, ptr }, align 8
  store ptr %190, ptr %246, align 8
  %247 = getelementptr inbounds i8, ptr %246, i64 8
  store ptr %206, ptr %247, align 8
  %248 = call ptr @behavior_wrapper(ptr noundef nonnull @ZipIterator_B_init_firstIteratorT_secondIteratorU, { ptr, ptr, ptr, i32 } %216, ptr noundef nonnull align 8 dereferenceable(16) %246)
  call void %248({ ptr, ptr, ptr, i32 } %216, { ptr, ptr, ptr, i32 } %216, ptr nonnull %242, { ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %213) #34
  %249 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ZipIterator, ptr %249, align 8
  %250 = getelementptr inbounds i8, ptr %249, i64 8
  store ptr %116, ptr %250, align 8
  %251 = getelementptr inbounds i8, ptr %249, i64 16
  %252 = getelementptr inbounds i8, ptr %249, i64 24
  store i32 10, ptr %252, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %249, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %253 = load ptr, ptr %249, align 8
  %254 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %253, 0
  %255 = load ptr, ptr %250, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } %254, ptr %255, 1
  %257 = load ptr, ptr %251, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %256, ptr %257, 2
  %259 = load i32, ptr %252, align 8
  %260 = insertvalue { ptr, ptr, ptr, i32 } %258, i32 %259, 3
  ret { ptr, ptr, ptr, i32 } %260
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ZipIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr inbounds i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 136
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_2(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ZipIterator_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(176) @ZipIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %40, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %44, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #25
  ret void
}

define { ptr, i160 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract28, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract30, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract32, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract34, ptr %11, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 16 dereferenceable(176) @ZipIterator)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call { ptr, ptr, ptr, i32 } %20(ptr %12) #26
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  store ptr %.fca.0.extract8, ptr %22, align 8
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %.fca.1.gep11 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr %.fca.1.extract10, ptr %.fca.1.gep11, align 8
  %.fca.2.extract12 = extractvalue { ptr, ptr, ptr, i32 } %21, 2
  %.fca.2.gep13 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr %.fca.2.extract12, ptr %.fca.2.gep13, align 8
  %.fca.3.extract14 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %.fca.3.gep15 = getelementptr inbounds i8, ptr %22, i64 24
  store i32 %.fca.3.extract14, ptr %.fca.3.gep15, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %22, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = load ptr, ptr %.fca.1.gep11, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %25, 1
  %27 = load ptr, ptr %.fca.2.gep13, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %27, 2
  %29 = load i32, ptr %.fca.3.gep15, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %29, 3
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %23)
  %33 = sext i32 %29 to i64
  %34 = getelementptr ptr, ptr %23, i64 %33
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  %37 = call ptr @behavior_wrapper(ptr %36, { ptr, ptr, ptr, i32 } %30, ptr noundef nonnull align 8 %4)
  %38 = call { ptr, i160 } %37({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull align 8 %4) #34
  %.fca.0.extract4 = extractvalue { ptr, i160 } %38, 0
  %39 = load ptr, ptr %9, align 8
  %40 = load ptr, ptr %8, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %40)
  %42 = load i32, ptr %11, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 32
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call { ptr, ptr, ptr, i32 } %47(ptr %39) #26
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %48, 0
  store ptr %.fca.0.extract2, ptr %49, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %48, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %49, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %48, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %49, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %48, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %49, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %49, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %.fca.1.gep, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %.fca.2.gep, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %.fca.3.gep, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %50)
  %60 = sext i32 %56 to i64
  %61 = getelementptr ptr, ptr %50, i64 %60
  %62 = getelementptr i8, ptr %61, i64 8
  %63 = load ptr, ptr %62, align 8
  %64 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %57, ptr noundef nonnull align 8 %4)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr nonnull %4) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %65, 0
  %66 = load ptr, ptr %9, align 8
  %67 = load ptr, ptr %8, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %67)
  %69 = load i32, ptr %11, align 8
  %70 = sext i32 %69 to i64
  %71 = getelementptr ptr, ptr %67, i64 %70
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @typegetter_wrapper(ptr %72, ptr %66)
  %74 = icmp ne ptr %.fca.0.extract4, @nil_typ
  %75 = icmp ne ptr %.fca.0.extract4, null
  %.not55 = and i1 %74, %75
  br i1 %.not55, label %76, label %.thread

76:                                               ; preds = %3
  %77 = load ptr, ptr %9, align 8
  %78 = load ptr, ptr %8, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %78)
  %80 = load i32, ptr %11, align 8
  %81 = sext i32 %80 to i64
  %82 = getelementptr ptr, ptr %78, i64 %81
  %83 = getelementptr i8, ptr %82, i64 8
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @typegetter_wrapper(ptr %84, ptr %77)
  %86 = icmp ne ptr %.fca.0.extract, @nil_typ
  %87 = icmp ne ptr %.fca.0.extract, null
  %.not57.not.not = and i1 %86, %87
  br i1 %.not57.not.not, label %88, label %.thread

88:                                               ; preds = %76
  %89 = load ptr, ptr %9, align 8
  %90 = load ptr, ptr %8, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %90)
  %92 = load i32, ptr %11, align 8
  %93 = sext i32 %92 to i64
  %94 = getelementptr ptr, ptr %90, i64 %93
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @typegetter_wrapper(ptr %95, ptr %89)
  %97 = load ptr, ptr %9, align 8
  %98 = load ptr, ptr %8, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %98)
  %100 = load i32, ptr %11, align 8
  %101 = sext i32 %100 to i64
  %102 = getelementptr ptr, ptr %98, i64 %101
  %103 = getelementptr i8, ptr %102, i64 8
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @typegetter_wrapper(ptr %104, ptr %97)
  store ptr @Pair, ptr %5, align 8
  %106 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %96, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %105, ptr %107, align 8
  %108 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_Pair, ptr noundef nonnull align 8 dereferenceable(24) %5)
  %109 = extractvalue { i64, i64 } %108, 0
  %110 = call ptr @bump_malloc(i64 %109)
  store ptr %96, ptr %110, align 8
  %111 = getelementptr i8, ptr %110, i64 8
  store ptr %105, ptr %111, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %110)
  %113 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Pair, ptr undef, ptr undef, i32 undef }, ptr %110, 1
  %114 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr undef, 2
  %115 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 10, 3
  %116 = load ptr, ptr %9, align 8
  %117 = load ptr, ptr %8, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %117)
  %119 = load i32, ptr %11, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = load ptr, ptr %121, align 8
  %123 = call ptr @typegetter_wrapper(ptr %122, ptr %116)
  %124 = load ptr, ptr %9, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef %125)
  %127 = load i32, ptr %11, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr ptr, ptr %125, i64 %128
  %130 = getelementptr i8, ptr %129, i64 8
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %124)
  store ptr %123, ptr %6, align 8
  %133 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %132, ptr %133, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %6)
  %135 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @Pair)
  store ptr %.fca.0.extract4, ptr %7, align 8
  %136 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.0.extract, ptr %136, align 8
  %137 = call ptr @behavior_wrapper(ptr noundef nonnull @Pair_B_init_firstT_secondU, { ptr, ptr, ptr, i32 } %115, ptr noundef nonnull align 8 dereferenceable(16) %7)
  call void %137({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull %6, { ptr, i160 } %38, { ptr, i160 } %65) #34
  %138 = ptrtoint ptr %110 to i64
  %.sroa.344.8.insert.ext = zext i64 %138 to i160
  %.sroa.344.8.insert.insert = or disjoint i160 %.sroa.344.8.insert.ext, 3402823669209384634633746074317682114560
  br label %.thread

.thread:                                          ; preds = %76, %3, %88
  %.reg2mem41.sroa.3.062 = phi i160 [ %.sroa.344.8.insert.insert, %88 ], [ poison, %3 ], [ poison, %76 ]
  %139 = phi ptr [ @Pair, %88 ], [ @nil_typ, %3 ], [ @nil_typ, %76 ]
  %.reload38.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %139, 0
  %.reload38.fca.1.insert = insertvalue { ptr, i160 } %.reload38.fca.0.insert, i160 %.reg2mem41.sroa.3.062, 1
  ret { ptr, i160 } %.reload38.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_InterleaveIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr inbounds i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 200
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterable_field_InterleaveIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @InterleaveIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @InterleaveIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(480) @InterleaveIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %40, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %44, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #25
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(480) @InterleaveIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #26
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr noundef nonnull align 8 %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull align 8 %4) #34
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %36, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #26
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %50, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr noundef nonnull align 8 %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull align 8 %4) #34
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %67, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterator, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %78, ptr %80, align 8
  %81 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_InterleaveIterator, ptr noundef nonnull align 8 dereferenceable(16) %79)
  %82 = extractvalue { i64, i64 } %81, 0
  %83 = call ptr @bump_malloc(i64 %82)
  store ptr %78, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %83)
  %85 = load ptr, ptr %6, align 8
  %86 = load ptr, ptr %5, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %86)
  %88 = load i32, ptr %8, align 8
  %89 = sext i32 %88 to i64
  %90 = getelementptr ptr, ptr %86, i64 %89
  %91 = getelementptr i8, ptr %90, i64 8
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr, ptr, ptr, i32 } %93(ptr %85) #26
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  store ptr %.fca.0.extract17, ptr %95, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %95, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %94, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %95, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %95, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %95, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %.fca.1.gep20, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %.fca.2.gep22, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %.fca.3.gep24, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %96)
  %106 = sext i32 %102 to i64
  %107 = getelementptr ptr, ptr %96, i64 %106
  %108 = getelementptr i8, ptr %107, i64 8
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @behavior_wrapper(ptr %109, { ptr, ptr, ptr, i32 } %103, ptr noundef nonnull align 8 %4)
  %111 = call { ptr, ptr, ptr, i32 } %110({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr nonnull align 8 %4) #34
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %111, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %111, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %111, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %111, 3
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %112, i64 8
  store ptr %.fca.1.extract7, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %112, i64 16
  store ptr %.fca.2.extract9, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %112, i64 24
  store i32 %.fca.3.extract11, ptr %115, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %112, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %116 = load ptr, ptr %6, align 8
  %117 = load ptr, ptr %5, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %117)
  %119 = load i32, ptr %8, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = getelementptr i8, ptr %121, i64 16
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = call { ptr, ptr, ptr, i32 } %124(ptr %116) #26
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %125, 0
  store ptr %.fca.0.extract1, ptr %126, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %125, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %126, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %125, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %126, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %125, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %126, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %126, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %.fca.1.gep, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %.fca.2.gep, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %.fca.3.gep, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %136 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %127)
  %137 = sext i32 %133 to i64
  %138 = getelementptr ptr, ptr %127, i64 %137
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %134, ptr noundef nonnull align 8 %4)
  %142 = call { ptr, ptr, ptr, i32 } %141({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4) #34
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %143, align 8
  %144 = getelementptr inbounds i8, ptr %143, i64 8
  store ptr %.fca.1.extract, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %143, i64 16
  store ptr %.fca.2.extract, ptr %145, align 8
  %146 = getelementptr inbounds i8, ptr %143, i64 24
  store i32 %.fca.3.extract, ptr %146, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %143, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = load ptr, ptr %112, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 8
  %150 = load ptr, ptr %113, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr inbounds i8, ptr %147, i64 16
  %152 = load ptr, ptr %114, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr inbounds i8, ptr %147, i64 24
  %154 = load i32, ptr %115, align 8
  store i32 %154, ptr %153, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %147, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %155 = load ptr, ptr %147, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %149, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %151, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = load ptr, ptr %143, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 8
  %166 = load ptr, ptr %144, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr inbounds i8, ptr %163, i64 16
  %168 = load ptr, ptr %145, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr inbounds i8, ptr %163, i64 24
  %170 = load i32, ptr %146, align 8
  store i32 %170, ptr %169, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %163, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterator, ptr undef, ptr undef, i32 undef }, ptr %83, 1
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr undef, 2
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 10, 3
  %182 = load ptr, ptr %6, align 8
  %183 = load ptr, ptr %5, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %183)
  %185 = load i32, ptr %8, align 8
  %186 = sext i32 %185 to i64
  %187 = getelementptr ptr, ptr %183, i64 %186
  %188 = load ptr, ptr %187, align 8
  %189 = call ptr @typegetter_wrapper(ptr %188, ptr %182)
  %190 = call ptr @bump_malloc(i64 noundef 24)
  %191 = getelementptr i8, ptr %190, i64 8
  store ptr %189, ptr %191, align 8
  %192 = getelementptr i8, ptr %190, i64 16
  store ptr null, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %190)
  store ptr @Iterator, ptr %190, align 8
  %194 = load ptr, ptr %6, align 8
  %195 = load ptr, ptr %5, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %195)
  %197 = load i32, ptr %8, align 8
  %198 = sext i32 %197 to i64
  %199 = getelementptr ptr, ptr %195, i64 %198
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @typegetter_wrapper(ptr %200, ptr %194)
  %202 = call ptr @bump_malloc(i64 noundef 24)
  %203 = getelementptr i8, ptr %202, i64 8
  store ptr %201, ptr %203, align 8
  %204 = getelementptr i8, ptr %202, i64 16
  store ptr null, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %202)
  store ptr @Iterator, ptr %202, align 8
  %206 = alloca [2 x ptr], align 8
  store ptr %190, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %202, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %206)
  %209 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 16 dereferenceable(168) @InterleaveIterator)
  %210 = alloca { ptr, ptr }, align 8
  store ptr %155, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %210, i64 8
  store ptr %171, ptr %211, align 8
  %212 = call ptr @behavior_wrapper(ptr noundef nonnull @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, { ptr, ptr, ptr, i32 } %181, ptr noundef nonnull align 8 dereferenceable(16) %210)
  call void %212({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr nonnull %206, { ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %178) #34
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @InterleaveIterator, ptr %213, align 8
  %214 = getelementptr inbounds i8, ptr %213, i64 8
  store ptr %83, ptr %214, align 8
  %215 = getelementptr inbounds i8, ptr %213, i64 16
  %216 = getelementptr inbounds i8, ptr %213, i64 24
  store i32 10, ptr %216, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %213, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %217 = load ptr, ptr %213, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = load ptr, ptr %214, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 1
  %221 = load ptr, ptr %215, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 2
  %223 = load i32, ptr %216, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %223, 3
  ret { ptr, ptr, ptr, i32 } %224
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_InterleaveIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 80, i64 8 }
}

define ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr inbounds i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 128
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterator_field_InterleaveIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @InterleaveIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(168) @InterleaveIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %40, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %44, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #25
  %70 = load ptr, ptr %7, align 8
  %71 = load ptr, ptr %6, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %71)
  %73 = load i32, ptr %9, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 24
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  call void %79(ptr %70, i1 true) #25
  ret void
}

define { ptr, i160 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(168) @InterleaveIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call i1 %19(ptr %11) #26
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull %12)
  %22 = getelementptr i8, ptr %18, i64 8
  %23 = load ptr, ptr %22, align 8
  %not. = xor i1 %20, true
  %.68 = select i1 %20, i64 8, i64 16
  %.69 = select i1 %20, ptr %5, ptr %6
  call void %23(ptr %11, i1 %not.) #25
  %24 = load ptr, ptr %8, align 8
  %25 = load ptr, ptr %7, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %25)
  %27 = load i32, ptr %10, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr ptr, ptr %25, i64 %28
  %30 = getelementptr i8, ptr %29, i64 %.68
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr, ptr, ptr, i32 } %32(ptr %24) #26
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  store ptr %.fca.0.extract9, ptr %.69, align 8
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %.69.sroa.sel.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel = getelementptr inbounds i8, ptr %.69.sroa.sel.v, i64 8
  store ptr %.fca.1.extract10, ptr %.69.sroa.sel, align 8
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %33, 2
  %.69.sroa.sel73.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel73 = getelementptr inbounds i8, ptr %.69.sroa.sel73.v, i64 16
  store ptr %.fca.2.extract11, ptr %.69.sroa.sel73, align 8
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %33, 3
  %.69.sroa.sel76.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel76 = getelementptr inbounds i8, ptr %.69.sroa.sel76.v, i64 24
  store i32 %.fca.3.extract12, ptr %.69.sroa.sel76, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %.69, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %34 = load ptr, ptr %.69, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = load ptr, ptr %.69.sroa.sel, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 1
  %38 = load ptr, ptr %.69.sroa.sel73, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 2
  %40 = load i32, ptr %.69.sroa.sel76, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %40, 3
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %34)
  %44 = sext i32 %40 to i64
  %45 = getelementptr ptr, ptr %34, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %41, ptr noundef nonnull align 8 %4)
  %49 = call { ptr, i160 } %48({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4) #34
  ret { ptr, i160 } %49
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @InterleaveIterator_getter_on_first(ptr nocapture nofree readonly %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_on_first(ptr nocapture nofree writeonly %0, i1 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ChainIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @ChainIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr inbounds i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 200
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterable_field_ChainIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ChainIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ChainIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(480) @ChainIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %40, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %44, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #25
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(480) @ChainIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #26
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr noundef nonnull align 8 %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull align 8 %4) #34
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %36, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #26
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %50, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr noundef nonnull align 8 %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull align 8 %4) #34
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %67, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = alloca [2 x ptr], align 8
  store ptr @ChainIterator, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %78, ptr %80, align 8
  %81 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_ChainIterator, ptr noundef nonnull align 8 dereferenceable(16) %79)
  %82 = extractvalue { i64, i64 } %81, 0
  %83 = call ptr @bump_malloc(i64 %82)
  store ptr %78, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %83)
  %85 = load ptr, ptr %6, align 8
  %86 = load ptr, ptr %5, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %86)
  %88 = load i32, ptr %8, align 8
  %89 = sext i32 %88 to i64
  %90 = getelementptr ptr, ptr %86, i64 %89
  %91 = getelementptr i8, ptr %90, i64 8
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr, ptr, ptr, i32 } %93(ptr %85) #26
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  store ptr %.fca.0.extract17, ptr %95, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %95, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %94, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %95, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %95, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %95, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %.fca.1.gep20, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %.fca.2.gep22, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %.fca.3.gep24, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %96)
  %106 = sext i32 %102 to i64
  %107 = getelementptr ptr, ptr %96, i64 %106
  %108 = getelementptr i8, ptr %107, i64 8
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @behavior_wrapper(ptr %109, { ptr, ptr, ptr, i32 } %103, ptr noundef nonnull align 8 %4)
  %111 = call { ptr, ptr, ptr, i32 } %110({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr nonnull align 8 %4) #34
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %111, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %111, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %111, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %111, 3
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %112, i64 8
  store ptr %.fca.1.extract7, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %112, i64 16
  store ptr %.fca.2.extract9, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %112, i64 24
  store i32 %.fca.3.extract11, ptr %115, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %112, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %116 = load ptr, ptr %6, align 8
  %117 = load ptr, ptr %5, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %117)
  %119 = load i32, ptr %8, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = getelementptr i8, ptr %121, i64 16
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = call { ptr, ptr, ptr, i32 } %124(ptr %116) #26
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %125, 0
  store ptr %.fca.0.extract1, ptr %126, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %125, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %126, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %125, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %126, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %125, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %126, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %126, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %.fca.1.gep, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %.fca.2.gep, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %.fca.3.gep, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %136 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %127)
  %137 = sext i32 %133 to i64
  %138 = getelementptr ptr, ptr %127, i64 %137
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %134, ptr noundef nonnull align 8 %4)
  %142 = call { ptr, ptr, ptr, i32 } %141({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4) #34
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %143, align 8
  %144 = getelementptr inbounds i8, ptr %143, i64 8
  store ptr %.fca.1.extract, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %143, i64 16
  store ptr %.fca.2.extract, ptr %145, align 8
  %146 = getelementptr inbounds i8, ptr %143, i64 24
  store i32 %.fca.3.extract, ptr %146, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %143, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = load ptr, ptr %112, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 8
  %150 = load ptr, ptr %113, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr inbounds i8, ptr %147, i64 16
  %152 = load ptr, ptr %114, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr inbounds i8, ptr %147, i64 24
  %154 = load i32, ptr %115, align 8
  store i32 %154, ptr %153, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %147, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %155 = load ptr, ptr %147, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %149, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %151, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = load ptr, ptr %143, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 8
  %166 = load ptr, ptr %144, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr inbounds i8, ptr %163, i64 16
  %168 = load ptr, ptr %145, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr inbounds i8, ptr %163, i64 24
  %170 = load i32, ptr %146, align 8
  store i32 %170, ptr %169, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %163, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterator, ptr undef, ptr undef, i32 undef }, ptr %83, 1
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr undef, 2
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 10, 3
  %182 = load ptr, ptr %6, align 8
  %183 = load ptr, ptr %5, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %183)
  %185 = load i32, ptr %8, align 8
  %186 = sext i32 %185 to i64
  %187 = getelementptr ptr, ptr %183, i64 %186
  %188 = load ptr, ptr %187, align 8
  %189 = call ptr @typegetter_wrapper(ptr %188, ptr %182)
  %190 = call ptr @bump_malloc(i64 noundef 24)
  %191 = getelementptr i8, ptr %190, i64 8
  store ptr %189, ptr %191, align 8
  %192 = getelementptr i8, ptr %190, i64 16
  store ptr null, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %190)
  store ptr @Iterator, ptr %190, align 8
  %194 = load ptr, ptr %6, align 8
  %195 = load ptr, ptr %5, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %195)
  %197 = load i32, ptr %8, align 8
  %198 = sext i32 %197 to i64
  %199 = getelementptr ptr, ptr %195, i64 %198
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @typegetter_wrapper(ptr %200, ptr %194)
  %202 = call ptr @bump_malloc(i64 noundef 24)
  %203 = getelementptr i8, ptr %202, i64 8
  store ptr %201, ptr %203, align 8
  %204 = getelementptr i8, ptr %202, i64 16
  store ptr null, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %202)
  store ptr @Iterator, ptr %202, align 8
  %206 = alloca [2 x ptr], align 8
  store ptr %190, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %202, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %206)
  %209 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 16 dereferenceable(168) @ChainIterator)
  %210 = alloca { ptr, ptr }, align 8
  store ptr %155, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %210, i64 8
  store ptr %171, ptr %211, align 8
  %212 = call ptr @behavior_wrapper(ptr noundef nonnull @ChainIterator_B_init_firstIteratorT_secondIteratorT, { ptr, ptr, ptr, i32 } %181, ptr noundef nonnull align 8 dereferenceable(16) %210)
  call void %212({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr nonnull %206, { ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %178) #34
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ChainIterator, ptr %213, align 8
  %214 = getelementptr inbounds i8, ptr %213, i64 8
  store ptr %83, ptr %214, align 8
  %215 = getelementptr inbounds i8, ptr %213, i64 16
  %216 = getelementptr inbounds i8, ptr %213, i64 24
  store i32 10, ptr %216, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %213, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %217 = load ptr, ptr %213, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = load ptr, ptr %214, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 1
  %221 = load ptr, ptr %215, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 2
  %223 = load i32, ptr %216, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %223, 3
  ret { ptr, ptr, ptr, i32 } %224
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ChainIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 80, i64 8 }
}

define ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr inbounds i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 128
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterator_field_ChainIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ChainIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(168) @ChainIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %40, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %44, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #25
  %70 = load ptr, ptr %7, align 8
  %71 = load ptr, ptr %6, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %71)
  %73 = load i32, ptr %9, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 24
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  call void %79(ptr %70, i1 true) #25
  ret void
}

define { ptr, i160 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract6, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(168) @ChainIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call i1 %19(ptr %11) #26
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull %12)
  br i1 %20, label %43, label %22

22:                                               ; preds = %3
  %23 = getelementptr i8, ptr %16, i64 16
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %11) #26
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  store ptr %.fca.0.extract24, ptr %5, align 8
  %.fca.1.extract26 = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.1.gep27 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract26, ptr %.fca.1.gep27, align 8
  %.fca.2.extract28 = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.2.gep29 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract28, ptr %.fca.2.gep29, align 8
  %.fca.3.extract30 = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %.fca.3.gep31 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract30, ptr %.fca.3.gep31, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %27 = load ptr, ptr %5, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %.fca.1.gep27, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %.fca.2.gep29, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %.fca.3.gep31, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %27)
  %37 = sext i32 %33 to i64
  %38 = getelementptr ptr, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %34, ptr noundef nonnull align 8 %4)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %4) #34
  %.fca.0.extract18 = extractvalue { ptr, i160 } %42, 0
  br label %84

43:                                               ; preds = %3
  %44 = getelementptr i8, ptr %16, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call { ptr, ptr, ptr, i32 } %46(ptr %11) #26
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %47, 0
  store ptr %.fca.0.extract14, ptr %6, align 8
  %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %47, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract15, ptr %.fca.1.gep, align 8
  %.fca.2.extract16 = extractvalue { ptr, ptr, ptr, i32 } %47, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract16, ptr %.fca.2.gep, align 8
  %.fca.3.extract17 = extractvalue { ptr, ptr, ptr, i32 } %47, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract17, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %48 = load ptr, ptr %6, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = load ptr, ptr %.fca.1.gep, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 1
  %52 = load ptr, ptr %.fca.2.gep, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 2
  %54 = load i32, ptr %.fca.3.gep, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %54, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %48)
  %58 = sext i32 %54 to i64
  %59 = getelementptr ptr, ptr %48, i64 %58
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @behavior_wrapper(ptr %61, { ptr, ptr, ptr, i32 } %55, ptr noundef nonnull align 8 %4)
  %63 = call { ptr, i160 } %62({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %4) #34
  %.fca.0.extract10 = extractvalue { ptr, i160 } %63, 0
  %64 = load ptr, ptr %8, align 8
  %65 = load ptr, ptr %7, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %65)
  %67 = load i32, ptr %10, align 8
  %68 = sext i32 %67 to i64
  %69 = getelementptr ptr, ptr %65, i64 %68
  %70 = load ptr, ptr %69, align 8
  %71 = call ptr @typegetter_wrapper(ptr %70, ptr %64)
  %72 = icmp eq ptr %.fca.0.extract10, @nil_typ
  %73 = icmp eq ptr %.fca.0.extract10, null
  %.not33.not = or i1 %72, %73
  br i1 %.not33.not, label %._crit_edge, label %84

._crit_edge:                                      ; preds = %43, %._crit_edge
  %74 = load ptr, ptr %8, align 8
  %75 = load ptr, ptr %7, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %75)
  %77 = load i32, ptr %10, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = getelementptr i8, ptr %79, i64 24
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  call void %83(ptr %74, i1 false) #25
  br label %._crit_edge

84:                                               ; preds = %43, %22
  %.reg2mem29.sroa.0.0 = phi ptr [ %.fca.0.extract18, %22 ], [ %.fca.0.extract10, %43 ]
  %.pn = phi { ptr, i160 } [ %42, %22 ], [ %63, %43 ]
  %.reload30.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem29.sroa.0.0, 0
  %.reg2mem29.sroa.3.0 = extractvalue { ptr, i160 } %.pn, 1
  %.reload30.fca.1.insert = insertvalue { ptr, i160 } %.reload30.fca.0.insert, i160 %.reg2mem29.sroa.3.0, 1
  ret { ptr, i160 } %.reload30.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @ChainIterator_getter_on_first(ptr nocapture nofree readonly %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_on_first(ptr nocapture nofree writeonly %0, i1 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FilterIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 200
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_function_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_function_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_function_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %7, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.2, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @function_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr nocapture nofree writeonly %2) #3 {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = trunc i160 %.fca.1.extract to i64
  %6 = inttoptr i64 %5 to ptr
  %7 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_function_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp slt i64 %8, 17
  %10 = select i1 %9, ptr %.fca.1.gep, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %10, i64 %8, i1 noundef false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterable_field_FilterIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FilterIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @FilterIterable_init_iterableIterableT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) #3 {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(480) @FilterIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #25
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract35, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract37, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract39, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract41, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(480) @FilterIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #26
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract27, ptr %19, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep30, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep32, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep34, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr noundef nonnull align 8 %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull align 8 %4) #34
  %.fca.0.extract15 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract19 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract21 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract15, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract17, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract19, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract21, ptr %39, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %36, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr } %48(ptr %40) #26
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %41)
  %51 = load ptr, ptr %45, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %40)
  %53 = alloca [2 x ptr], align 8
  store ptr @FilterIterator, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr %52, ptr %54, align 8
  %55 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_FilterIterator, ptr noundef nonnull align 8 dereferenceable(16) %53)
  %56 = extractvalue { i64, i64 } %55, 0
  %57 = call ptr @bump_malloc(i64 %56)
  store ptr %52, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %57)
  %59 = load ptr, ptr %6, align 8
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %60)
  %62 = load i32, ptr %8, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr, ptr, ptr, i32 } %67(ptr %59) #26
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  store ptr %.fca.0.extract2, ptr %69, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %69, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %68, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %69, i64 16
  store ptr %.fca.2.extract4, ptr %.fca.2.gep, align 8
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %69, i64 24
  store i32 %.fca.3.extract5, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %69, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %.fca.1.gep, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %.fca.2.gep, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %.fca.3.gep, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %70)
  %80 = sext i32 %76 to i64
  %81 = getelementptr ptr, ptr %70, i64 %80
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %77, ptr noundef nonnull align 8 %4)
  %85 = call { ptr, ptr, ptr, i32 } %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4) #34
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %85, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 3
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %.fca.1.extract, ptr %87, align 8
  %88 = getelementptr inbounds i8, ptr %86, i64 16
  store ptr %.fca.2.extract, ptr %88, align 8
  %89 = getelementptr inbounds i8, ptr %86, i64 24
  store i32 %.fca.3.extract, ptr %89, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %86, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %90 = load ptr, ptr %6, align 8
  %91 = load ptr, ptr %5, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %91)
  %93 = load i32, ptr %8, align 8
  %94 = sext i32 %93 to i64
  %95 = getelementptr ptr, ptr %91, i64 %94
  %96 = getelementptr i8, ptr %95, i64 16
  %97 = load ptr, ptr %96, align 8
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr } %98(ptr %90) #26
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  %101 = load ptr, ptr %86, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr inbounds i8, ptr %100, i64 8
  %103 = load ptr, ptr %87, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr inbounds i8, ptr %100, i64 16
  %105 = load ptr, ptr %88, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr inbounds i8, ptr %100, i64 24
  %107 = load i32, ptr %89, align 8
  store i32 %107, ptr %106, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %100, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterator, ptr undef, ptr undef, i32 undef }, ptr %57, 1
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr undef, 2
  %118 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 10, 3
  %119 = load ptr, ptr %6, align 8
  %120 = load ptr, ptr %5, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %120)
  %122 = load i32, ptr %8, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr ptr, ptr %120, i64 %123
  %125 = load ptr, ptr %124, align 8
  %126 = call ptr @typegetter_wrapper(ptr %125, ptr %119)
  %127 = call ptr @bump_malloc(i64 noundef 24)
  %128 = getelementptr i8, ptr %127, i64 8
  store ptr %126, ptr %128, align 8
  %129 = getelementptr i8, ptr %127, i64 16
  store ptr null, ptr %129, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %127)
  store ptr @Iterator, ptr %127, align 8
  %131 = load ptr, ptr %6, align 8
  %132 = load ptr, ptr %5, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef %132)
  %134 = load i32, ptr %8, align 8
  %135 = sext i32 %134 to i64
  %136 = getelementptr ptr, ptr %132, i64 %135
  %137 = load ptr, ptr %136, align 8
  %138 = call ptr @typegetter_wrapper(ptr %137, ptr %131)
  %139 = call ptr @bump_malloc(i64 noundef 32)
  %140 = getelementptr i8, ptr %139, i64 16
  store ptr %138, ptr %140, align 8
  %141 = getelementptr i8, ptr %139, i64 8
  store ptr @_parameterization_i1, ptr %141, align 8
  %142 = getelementptr i8, ptr %139, i64 24
  store ptr null, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %139)
  store ptr @function_typ, ptr %139, align 8
  %144 = alloca [2 x ptr], align 8
  store ptr %127, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %144, i64 8
  store ptr %139, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %144)
  %147 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @FilterIterator)
  %148 = alloca { ptr, ptr }, align 8
  store ptr %108, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %148, i64 8
  store ptr @function_typ, ptr %149, align 8
  %150 = call ptr @behavior_wrapper(ptr noundef nonnull @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1, { ptr, ptr, ptr, i32 } %118, ptr noundef nonnull align 8 dereferenceable(16) %148)
  call void %150({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr nonnull %144, { ptr, ptr, ptr, i32 } %115, { ptr } %99) #34
  %151 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @FilterIterator, ptr %151, align 8
  %152 = getelementptr inbounds i8, ptr %151, i64 8
  store ptr %57, ptr %152, align 8
  %153 = getelementptr inbounds i8, ptr %151, i64 16
  %154 = getelementptr inbounds i8, ptr %151, i64 24
  store i32 10, ptr %154, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %151, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %155 = load ptr, ptr %151, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %152, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %153, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %154, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  ret { ptr, ptr, ptr, i32 } %162
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FilterIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterator_field_FilterIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) #3 {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(160) @FilterIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #25
  ret void
}

define { ptr, i160 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract20 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract16, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract18, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract20, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(160) @FilterIterator)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = call { ptr, ptr, ptr, i32 } %18(ptr %10) #26
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %19, 0
  store ptr %.fca.0.extract1, ptr %20, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %19, 1
  %.fca.1.gep4 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep4, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %20, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %20, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %20, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = load ptr, ptr %.fca.1.gep4, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %23, 1
  %25 = load ptr, ptr %.fca.2.gep, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %25, 2
  %27 = load i32, ptr %.fca.3.gep, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %27, 3
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %21)
  %31 = sext i32 %27 to i64
  %32 = getelementptr ptr, ptr %21, i64 %31
  %33 = getelementptr i8, ptr %32, i64 8
  %34 = load ptr, ptr %33, align 8
  %35 = call ptr @behavior_wrapper(ptr %34, { ptr, ptr, ptr, i32 } %28, ptr noundef nonnull align 8 %4)
  %36 = call { ptr, i160 } %35({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 %4) #34
  %.sroa.0.068 = extractvalue { ptr, i160 } %36, 0
  %37 = load ptr, ptr %7, align 8
  %38 = load ptr, ptr %6, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %38)
  %40 = load i32, ptr %9, align 8
  %41 = sext i32 %40 to i64
  %42 = getelementptr ptr, ptr %38, i64 %41
  %43 = load ptr, ptr %42, align 8
  %44 = call ptr @typegetter_wrapper(ptr %43, ptr %37)
  %45 = icmp ne ptr %.sroa.0.068, @nil_typ
  %46 = icmp ne ptr %.sroa.0.068, null
  %.not5070 = and i1 %45, %46
  br i1 %.not5070, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %3
  %.fca.1.gep31 = getelementptr inbounds i8, ptr %5, i64 8
  %.fca.2.gep33 = getelementptr inbounds i8, ptr %5, i64 16
  %.fca.3.gep35 = getelementptr inbounds i8, ptr %5, i64 24
  %47 = load ptr, ptr %7, align 8
  %48 = load ptr, ptr %6, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %48)
  %50 = load i32, ptr %9, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 16
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call { ptr } %55(ptr %47) #26
  %.fca.0.extract3778 = extractvalue { ptr } %56, 0
  %57 = call i1 %.fca.0.extract3778({ ptr, i160 } %36)
  br i1 %57, label %._crit_edge.loopexit, label %.lr.ph80

58:                                               ; preds = %.lr.ph80
  %59 = load ptr, ptr %7, align 8
  %60 = load ptr, ptr %6, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %60)
  %62 = load i32, ptr %9, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 16
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr } %67(ptr %59) #26
  %.fca.0.extract37 = extractvalue { ptr } %68, 0
  %69 = call i1 %.fca.0.extract37({ ptr, i160 } %95)
  br i1 %69, label %._crit_edge.loopexit, label %.lr.ph80

.lr.ph80:                                         ; preds = %.lr.ph, %58
  %.pn7179 = phi { ptr, i160 } [ %95, %58 ], [ %36, %.lr.ph ]
  %70 = load ptr, ptr %7, align 8
  %71 = load ptr, ptr %6, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %71)
  %73 = load i32, ptr %9, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 8
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %70) #26
  %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  store ptr %.fca.0.extract28, ptr %5, align 8
  %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  store ptr %.fca.1.extract30, ptr %.fca.1.gep31, align 8
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %79, 2
  store ptr %.fca.2.extract32, ptr %.fca.2.gep33, align 8
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  store i32 %.fca.3.extract34, ptr %.fca.3.gep35, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %80 = load ptr, ptr %5, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = load ptr, ptr %.fca.1.gep31, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %84 = load ptr, ptr %.fca.2.gep33, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %86 = load i32, ptr %.fca.3.gep35, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %80)
  %90 = sext i32 %86 to i64
  %91 = getelementptr ptr, ptr %80, i64 %90
  %92 = getelementptr i8, ptr %91, i64 8
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @behavior_wrapper(ptr %93, { ptr, ptr, ptr, i32 } %87, ptr noundef nonnull align 8 %4)
  %95 = call { ptr, i160 } %94({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr nonnull %4) #34
  %.sroa.0.0 = extractvalue { ptr, i160 } %95, 0
  %96 = load ptr, ptr %7, align 8
  %97 = load ptr, ptr %6, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %97)
  %99 = load i32, ptr %9, align 8
  %100 = sext i32 %99 to i64
  %101 = getelementptr ptr, ptr %97, i64 %100
  %102 = load ptr, ptr %101, align 8
  %103 = call ptr @typegetter_wrapper(ptr %102, ptr %96)
  %104 = icmp ne ptr %.sroa.0.0, @nil_typ
  %105 = icmp ne ptr %.sroa.0.0, null
  %.not50 = and i1 %104, %105
  br i1 %.not50, label %58, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.lr.ph80, %58, %.lr.ph
  %.pn71.lcssa = phi { ptr, i160 } [ %36, %.lr.ph ], [ %.pn7179, %.lr.ph80 ], [ %95, %58 ]
  %.ph = phi ptr [ %.sroa.0.068, %.lr.ph ], [ @nil_typ, %.lr.ph80 ], [ %.sroa.0.0, %58 ]
  %.sroa.3.073.le = extractvalue { ptr, i160 } %.pn71.lcssa, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %3
  %.1.ph65 = phi i160 [ undef, %3 ], [ %.sroa.3.073.le, %._crit_edge.loopexit ]
  %106 = phi ptr [ @nil_typ, %3 ], [ %.ph, %._crit_edge.loopexit ]
  %.reload31.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %106, 0
  %.reload31.fca.1.insert = insertvalue { ptr, i160 } %.reload31.fca.0.insert, i160 %.1.ph65, 1
  ret { ptr, i160 } %.reload31.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterator_getter_f(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator_setter_f(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator_setter_iterator(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterable_getter_f(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable_setter_f(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable_setter_iterable(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_MapIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 56, i64 8 }
}

define ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 208
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable_field_MapIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable_field_MapIterable_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 232
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @MapIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 3037712219555723519, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @MapIterable_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) #3 {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(488) @MapIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #25
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract35, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract37, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract39, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract41, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(488) @MapIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #26
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract27, ptr %19, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep30, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep32, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep34, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr noundef nonnull align 8 %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull align 8 %4) #34
  %.fca.0.extract15 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract19 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract21 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract15, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract17, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract19, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract21, ptr %39, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %36, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr } %48(ptr %40) #26
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %41)
  %51 = load ptr, ptr %45, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %40)
  %53 = load ptr, ptr %6, align 8
  %54 = load ptr, ptr %5, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %54)
  %56 = load i32, ptr %8, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %53)
  %62 = alloca [3 x ptr], align 8
  store ptr @MapIterator, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr %52, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  store ptr %61, ptr %64, align 8
  %65 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_MapIterator, ptr noundef nonnull align 8 dereferenceable(24) %62)
  %66 = extractvalue { i64, i64 } %65, 0
  %67 = call ptr @bump_malloc(i64 %66)
  store ptr %52, ptr %67, align 8
  %68 = getelementptr i8, ptr %67, i64 8
  store ptr %61, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %67)
  %70 = load ptr, ptr %6, align 8
  %71 = load ptr, ptr %5, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %71)
  %73 = load i32, ptr %8, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 16
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %70) #26
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  store ptr %.fca.0.extract2, ptr %80, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %80, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %79, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %80, i64 16
  store ptr %.fca.2.extract4, ptr %.fca.2.gep, align 8
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %80, i64 24
  store i32 %.fca.3.extract5, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %80, ptr noundef nonnull align 16 dereferenceable(80) @Iterable)
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = load ptr, ptr %.fca.1.gep, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %85 = load ptr, ptr %.fca.2.gep, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %87 = load i32, ptr %.fca.3.gep, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %81)
  %91 = sext i32 %87 to i64
  %92 = getelementptr ptr, ptr %81, i64 %91
  %93 = getelementptr i8, ptr %92, i64 8
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %88, ptr noundef nonnull align 8 %4)
  %96 = call { ptr, ptr, ptr, i32 } %95({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4) #34
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %96, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 3
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %97, i64 8
  store ptr %.fca.1.extract, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %97, i64 16
  store ptr %.fca.2.extract, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %97, i64 24
  store i32 %.fca.3.extract, ptr %100, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %97, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %101 = load ptr, ptr %6, align 8
  %102 = load ptr, ptr %5, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %102)
  %104 = load i32, ptr %8, align 8
  %105 = sext i32 %104 to i64
  %106 = getelementptr ptr, ptr %102, i64 %105
  %107 = getelementptr i8, ptr %106, i64 24
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %108, align 8
  %110 = call { ptr } %109(ptr %101) #26
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = load ptr, ptr %97, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr inbounds i8, ptr %111, i64 8
  %114 = load ptr, ptr %98, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr inbounds i8, ptr %111, i64 16
  %116 = load ptr, ptr %99, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr inbounds i8, ptr %111, i64 24
  %118 = load i32, ptr %100, align 8
  store i32 %118, ptr %117, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %111, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %119 = load ptr, ptr %111, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = load ptr, ptr %113, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %123 = load ptr, ptr %115, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 2
  %125 = load i32, ptr %117, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %125, 3
  %127 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterator, ptr undef, ptr undef, i32 undef }, ptr %67, 1
  %128 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr undef, 2
  %129 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 10, 3
  %130 = load ptr, ptr %6, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %131)
  %133 = load i32, ptr %8, align 8
  %134 = sext i32 %133 to i64
  %135 = getelementptr ptr, ptr %131, i64 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %130)
  %138 = call ptr @bump_malloc(i64 noundef 24)
  %139 = getelementptr i8, ptr %138, i64 8
  store ptr %137, ptr %139, align 8
  %140 = getelementptr i8, ptr %138, i64 16
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %138)
  store ptr @Iterator, ptr %138, align 8
  %142 = load ptr, ptr %6, align 8
  %143 = load ptr, ptr %5, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %143)
  %145 = load i32, ptr %8, align 8
  %146 = sext i32 %145 to i64
  %147 = getelementptr ptr, ptr %143, i64 %146
  %148 = getelementptr i8, ptr %147, i64 8
  %149 = load ptr, ptr %148, align 8
  %150 = call ptr @typegetter_wrapper(ptr %149, ptr %142)
  %151 = load ptr, ptr %6, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef %152)
  %154 = load i32, ptr %8, align 8
  %155 = sext i32 %154 to i64
  %156 = getelementptr ptr, ptr %152, i64 %155
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @typegetter_wrapper(ptr %157, ptr %151)
  %159 = call ptr @bump_malloc(i64 noundef 32)
  %160 = getelementptr i8, ptr %159, i64 16
  store ptr %158, ptr %160, align 8
  %161 = getelementptr i8, ptr %159, i64 8
  store ptr %150, ptr %161, align 8
  %162 = getelementptr i8, ptr %159, i64 24
  store ptr null, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %159)
  store ptr @function_typ, ptr %159, align 8
  %164 = alloca [2 x ptr], align 8
  store ptr %138, ptr %164, align 8
  %165 = getelementptr inbounds i8, ptr %164, i64 8
  store ptr %159, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %164)
  %167 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 16 dereferenceable(168) @MapIterator)
  %168 = alloca { ptr, ptr }, align 8
  store ptr %119, ptr %168, align 8
  %169 = getelementptr inbounds i8, ptr %168, i64 8
  store ptr @function_typ, ptr %169, align 8
  %170 = call ptr @behavior_wrapper(ptr noundef nonnull @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, { ptr, ptr, ptr, i32 } %129, ptr noundef nonnull align 8 dereferenceable(16) %168)
  call void %170({ ptr, ptr, ptr, i32 } %129, { ptr, ptr, ptr, i32 } %129, ptr nonnull %164, { ptr, ptr, ptr, i32 } %126, { ptr } %110) #34
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @MapIterator, ptr %171, align 8
  %172 = getelementptr inbounds i8, ptr %171, i64 8
  store ptr %67, ptr %172, align 8
  %173 = getelementptr inbounds i8, ptr %171, i64 16
  %174 = getelementptr inbounds i8, ptr %171, i64 24
  store i32 10, ptr %174, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %171, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %175 = load ptr, ptr %171, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = load ptr, ptr %172, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 1
  %179 = load ptr, ptr %173, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 2
  %181 = load i32, ptr %174, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %181, 3
  ret { ptr, ptr, ptr, i32 } %182
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_MapIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 56, i64 8 }
}

define ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 8673632051301757104, i64 noundef ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 128
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator_field_MapIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator_field_MapIterator_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @MapIterator_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) #3 {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(168) @MapIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #25
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #25
  ret void
}

define { ptr, i160 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract16, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract18, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(168) @MapIterator)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #26
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract2, ptr %19, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(80) @Iterator)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr noundef nonnull align 8 %4)
  %35 = call { ptr, i160 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %35, 0
  %36 = load ptr, ptr %6, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %37)
  %39 = load i32, ptr %8, align 8
  %40 = sext i32 %39 to i64
  %41 = getelementptr ptr, ptr %37, i64 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = icmp ne ptr %.fca.0.extract, @nil_typ
  %45 = icmp ne ptr %.fca.0.extract, null
  %.not36 = and i1 %44, %45
  br i1 %.not36, label %46, label %58

46:                                               ; preds = %3
  %47 = load ptr, ptr %6, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef %48)
  %50 = load i32, ptr %8, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 24
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call { ptr } %55(ptr %47) #26
  %.fca.0.extract28 = extractvalue { ptr } %56, 0
  %57 = call { ptr, i160 } %.fca.0.extract28({ ptr, i160 } %35)
  %.fca.0.extract22 = extractvalue { ptr, i160 } %57, 0
  %.fca.1.extract24 = extractvalue { ptr, i160 } %57, 1
  br label %58

58:                                               ; preds = %3, %46
  %.reg2mem15.sroa.0.0 = phi ptr [ %.fca.0.extract22, %46 ], [ @nil_typ, %3 ]
  %.reg2mem15.sroa.3.0 = phi i160 [ %.fca.1.extract24, %46 ], [ undef, %3 ]
  %.reload16.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem15.sroa.0.0, 0
  %.reload16.fca.1.insert = insertvalue { ptr, i160 } %.reload16.fca.0.insert, i160 %.reg2mem15.sroa.3.0, 1
  ret { ptr, i160 } %.reload16.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterator_getter_f(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator_setter_f(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator_setter_iterator(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterable_getter_f(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable_setter_f(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable_setter_iterable(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_StringIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 40, i64 8 }
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 6499063144389013426, i64 noundef ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull align 8 dereferenceable(16) ptr @StringIterator_field_StringIterator_0(ptr nocapture nofree readnone %0) #1 {
  ret ptr @_parameterization_Character
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(160) @StringIterator)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %13, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %13, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  call void %29(ptr %21, { ptr, ptr, ptr, i32 } %37) #25
  %38 = load ptr, ptr %6, align 8
  %39 = load ptr, ptr %5, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %39)
  %41 = load i32, ptr %8, align 8
  %42 = sext i32 %41 to i64
  %43 = getelementptr ptr, ptr %39, i64 %42
  %44 = getelementptr i8, ptr %43, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %38, i32 0) #25
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract12, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract14, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract16, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(160) @StringIterator)
  %14 = load ptr, ptr %11, align 8
  %15 = load ptr, ptr %10, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %15)
  %17 = load i32, ptr %13, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr ptr, ptr %15, i64 %18
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i32 %22(ptr %14) #26
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %15)
  %25 = load ptr, ptr %19, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %14) #26
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 0
  store ptr %.fca.0.extract, ptr %28, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %28, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %28, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %28, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = load ptr, ptr %.fca.1.gep, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 1
  %33 = load ptr, ptr %.fca.2.gep, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = load i32, ptr %.fca.3.gep, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %35, 3
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %29)
  %39 = sext i32 %35 to i64
  %40 = getelementptr ptr, ptr %29, i64 %39
  %41 = getelementptr i8, ptr %40, i64 56
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @behavior_wrapper(ptr %42, { ptr, ptr, ptr, i32 } %36, ptr noundef nonnull align 8 %4)
  %44 = call i32 %43({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr nonnull align 8 %4) #34
  %45 = icmp slt i32 %23, %44
  br i1 %45, label %46, label %145

46:                                               ; preds = %3
  %47 = load ptr, ptr %11, align 8
  %48 = load ptr, ptr %10, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %48)
  %50 = load i32, ptr %13, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 8
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 %55(ptr %47) #26
  %57 = add i32 %56, 1
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %48)
  %59 = getelementptr i8, ptr %54, i64 8
  %60 = load ptr, ptr %59, align 8
  call void %60(ptr %47, i32 %57) #25
  %61 = load ptr, ptr %11, align 8
  %62 = load ptr, ptr %10, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %62)
  %64 = load i32, ptr %13, align 8
  %65 = sext i32 %64 to i64
  %66 = getelementptr ptr, ptr %62, i64 %65
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call { ptr, ptr, ptr, i32 } %68(ptr %61) #26
  %.fca.0.extract45 = extractvalue { ptr, ptr, ptr, i32 } %69, 0
  store ptr %.fca.0.extract45, ptr %5, align 8
  %.fca.1.extract47 = extractvalue { ptr, ptr, ptr, i32 } %69, 1
  %.fca.1.gep48 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract47, ptr %.fca.1.gep48, align 8
  %.fca.2.extract49 = extractvalue { ptr, ptr, ptr, i32 } %69, 2
  %.fca.2.gep50 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract49, ptr %.fca.2.gep50, align 8
  %.fca.3.extract51 = extractvalue { ptr, ptr, ptr, i32 } %69, 3
  %.fca.3.gep52 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract51, ptr %.fca.3.gep52, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %70 = load ptr, ptr %5, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %.fca.1.gep48, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %.fca.2.gep50, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %.fca.3.gep52, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %70)
  %80 = sext i32 %76 to i64
  %81 = getelementptr ptr, ptr %70, i64 %80
  %82 = getelementptr i8, ptr %81, i64 72
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %77, ptr noundef nonnull align 8 %4)
  %85 = call { ptr } %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull align 8 %4) #34
  %86 = load ptr, ptr %11, align 8
  %87 = load ptr, ptr %10, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %87)
  %89 = load i32, ptr %13, align 8
  %90 = sext i32 %89 to i64
  %91 = getelementptr ptr, ptr %87, i64 %90
  %92 = getelementptr i8, ptr %91, i64 8
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %86) #26
  store ptr @Character, ptr %6, align 8
  %96 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_Character, ptr noundef nonnull align 8 dereferenceable(8) %6)
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = call ptr @bump_malloc(i64 %97)
  %99 = load ptr, ptr %11, align 8
  %100 = load ptr, ptr %10, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %100)
  %102 = load i32, ptr %13, align 8
  %103 = sext i32 %102 to i64
  %104 = getelementptr ptr, ptr %100, i64 %103
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr, ptr, ptr, i32 } %106(ptr %99) #26
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %107, 0
  store ptr %.fca.0.extract27, ptr %7, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %107, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %107, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %107, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %108 = load ptr, ptr %7, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %.fca.1.gep30, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %.fca.2.gep32, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %.fca.3.gep34, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %117 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %108)
  %118 = sext i32 %114 to i64
  %119 = getelementptr ptr, ptr %108, i64 %118
  %120 = getelementptr i8, ptr %119, i64 72
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr @behavior_wrapper(ptr %121, { ptr, ptr, ptr, i32 } %115, ptr noundef nonnull align 8 %4)
  %123 = call { ptr } %122({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull %4) #34
  %.fca.0.extract24 = extractvalue { ptr } %123, 0
  %124 = load ptr, ptr %11, align 8
  %125 = load ptr, ptr %10, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %125)
  %127 = load i32, ptr %13, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr ptr, ptr %125, i64 %128
  %130 = getelementptr i8, ptr %129, i64 8
  %131 = load ptr, ptr %130, align 8
  %132 = load ptr, ptr %131, align 8
  %133 = call i32 %132(ptr %124) #26
  %134 = add i32 %133, -1
  %135 = sext i32 %134 to i64
  %136 = getelementptr i8, ptr %.fca.0.extract24, i64 %135
  %137 = load i8, ptr %136, align 1
  %138 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Character, ptr undef, ptr undef, i32 undef }, ptr %98, 1
  %139 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr undef, 2
  %140 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 10, 3
  store ptr @_parameterization_i8, ptr %8, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %8)
  %142 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @Character)
  store ptr @i8_typ, ptr %9, align 8
  %143 = call ptr @behavior_wrapper(ptr noundef nonnull @Character_B_init_bytei8, { ptr, ptr, ptr, i32 } %140, ptr noundef nonnull align 8 dereferenceable(8) %9)
  call void %143({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr nonnull %8, i8 %137) #34
  %144 = ptrtoint ptr %98 to i64
  %.sroa.3.8.insert.ext = zext i64 %144 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  br label %145

145:                                              ; preds = %3, %46
  %.reg2mem25.sroa.0.0 = phi ptr [ @Character, %46 ], [ @nil_typ, %3 ]
  %.reg2mem25.sroa.3.0 = phi i160 [ %.sroa.3.8.insert.insert, %46 ], [ undef, %3 ]
  %.reload26.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem25.sroa.0.0, 0
  %.reload26.fca.1.insert = insertvalue { ptr, i160 } %.reload26.fca.0.insert, i160 %.reg2mem25.sroa.3.0, 1
  ret { ptr, i160 } %.reload26.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Character(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_init_bytei8({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i8_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_i8_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_i8_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %7, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.2, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i8_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr nocapture nofree writeonly %2) #3 {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = trunc i160 %.fca.1.extract to i64
  %6 = inttoptr i64 %5 to ptr
  %7 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_i8_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp slt i64 %8, 17
  %10 = select i1 %9, ptr %.fca.1.gep, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %10, i64 %8, i1 noundef false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(120) @Character)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i8 %15(ptr %8) #26
  ret i8 %16
}

define void @Character_init_bytei8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i8 %3) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(120) @Character)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %9, i8 %3) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i8 @Character_getter_byte(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %0) #6 {
  %2 = load i8, ptr %0, align 1
  ret i8 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Character_setter_byte(ptr nocapture nofree noundef nonnull writeonly dereferenceable(1) %0, i8 %1) #7 {
  store i8 %1, ptr %0, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @StringIterator_getter_index(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_index(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 32
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(28) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr inbounds i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr inbounds i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr inbounds i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_str(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(28) %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr inbounds i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr inbounds i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_capacity(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 12
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_capacity(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 12
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_length(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_length(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @String_getter_bytes(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr } undef, ptr %2, 0
  ret { ptr } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_bytes(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) %0, { ptr } %1) #7 {
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %0, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Representable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 88
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(96) @Representable)
  %8 = call ptr @bump_malloc(i64 noundef 7)
  store <6 x i8> <i8 79, i8 98, i8 106, i8 101, i8 99, i8 116>, ptr %8, align 8
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %9)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = call ptr @bump_malloc(i64 %11)
  %13 = insertvalue { ptr } undef, ptr %8, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr undef, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 10, 3
  %17 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %17)
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %22 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %16, ptr noundef nonnull align 8 dereferenceable(24) %22)
  call void %25({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %17, { ptr } %13, i32 6, i32 7) #34
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %12, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 10, ptr %29, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %26, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %30 = load ptr, ptr %26, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %27, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %28, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %29, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i64_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 4 }
}

define { ptr, i160 } @_box_i64_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_i64_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %7, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.2, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i64_typ({ ptr, i160 } %0, ptr %1, ptr nocapture nofree writeonly %2) #3 {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = trunc i160 %.fca.1.extract to i64
  %6 = inttoptr i64 %5 to ptr
  %7 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_i64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp slt i64 %8, 17
  %10 = select i1 %9, ptr %.fca.1.gep, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %10, i64 %8, i1 noundef false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_f64_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_f64_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_f64_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %7, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.2, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr nocapture nofree writeonly %2) #3 {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = trunc i160 %.fca.1.extract to i64
  %6 = inttoptr i64 %5 to ptr
  %7 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_f64_typ, ptr %1)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = icmp slt i64 %8, 17
  %10 = select i1 %9, ptr %.fca.1.gep, ptr %6
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %10, i64 %8, i1 noundef false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Array(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Array_field_Array_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define noundef nonnull ptr @Array_B__Self_from_iterable_iterableIterableT(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #3 {
  %2 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #24
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = load i64, ptr @Iterable, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 %12, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %11)
  ret ptr @Array__Self_from_iterable_iterableIterableT
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_bufferBufferT_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 384
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef -5261542750394134544, i64 noundef ptrtoint (ptr @Array to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 392
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_reserve_new_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B__index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B__set_index_xi32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #24
  %4 = getelementptr inbounds i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @any_typ, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %13)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr i8, ptr %16, i64 416
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_throw_oob_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_unchecked_index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_unchecked_insert_xi32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #24
  %4 = getelementptr inbounds i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @any_typ, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %13)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr i8, ptr %16, i64 440
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 464
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 488
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 496
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 504
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 512
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 520
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 528
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 536
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterableT(ptr nocapture nofree readnone %0, { ptr, ptr, ptr, i32 } %1) #3 {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract27 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract28 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract26, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract27, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract28, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract29, ptr %11, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 8 dereferenceable(56) @Iterable)
  %12 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %.fca.0.extract26)
  %13 = sext i32 %.fca.3.extract29 to i64
  %14 = getelementptr ptr, ptr %.fca.0.extract26, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %.fca.1.extract27)
  %17 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %16, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_Array, ptr noundef nonnull align 8 dereferenceable(16) %17)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  store ptr %16, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %21)
  %23 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr undef, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 10, 3
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array)
  %28 = call ptr @behavior_wrapper(ptr noundef nonnull @Array_B_init_, { ptr, ptr, ptr, i32 } %25, ptr noundef nonnull align 8 %3)
  call void %28({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull align 8 %3) #34
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Array, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %29, i64 8
  store ptr %21, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = getelementptr inbounds i8, ptr %29, i64 24
  store i32 10, ptr %32, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %29, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %33 = load ptr, ptr %29, align 8
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = load i32, ptr %32, align 8
  %37 = load ptr, ptr %8, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %37, 0
  %39 = load ptr, ptr %9, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 1
  %41 = load ptr, ptr %10, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 2
  %43 = load i32, ptr %11, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %43, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %37)
  %47 = sext i32 %43 to i64
  %48 = getelementptr ptr, ptr %37, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %44, ptr noundef nonnull align 8 %3)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull align 8 %3) #34
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 3
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr %.fca.1.extract, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %53, i64 16
  store ptr %.fca.2.extract, ptr %55, align 8
  %56 = getelementptr inbounds i8, ptr %53, i64 24
  store i32 %.fca.3.extract, ptr %56, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %53, ptr noundef nonnull align 8 dereferenceable(56) @Iterator)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = load ptr, ptr %53, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr inbounds i8, ptr %57, i64 8
  %60 = load ptr, ptr %54, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr inbounds i8, ptr %57, i64 16
  %62 = load ptr, ptr %55, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr inbounds i8, ptr %57, i64 24
  %64 = load i32, ptr %56, align 8
  store i32 %64, ptr %63, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %57, ptr noundef nonnull align 8 dereferenceable(56) @Iterator)
  %65 = load ptr, ptr %57, align 8
  %66 = load ptr, ptr %59, align 8
  %67 = load ptr, ptr %61, align 8
  %68 = load i32, ptr %63, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %66, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %67, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %68, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %65)
  %75 = sext i32 %68 to i64
  %76 = getelementptr ptr, ptr %65, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %invariant.gep = getelementptr i8, ptr %33, i64 88
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %34, 1
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %35, 2
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %36, 3
  %82 = sext i32 %36 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %82
  %83 = getelementptr inbounds i8, ptr %6, i64 8
  %84 = getelementptr inbounds i8, ptr %6, i64 16
  %85 = getelementptr inbounds i8, ptr %6, i64 24
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %2
  %86 = load ptr, ptr %77, align 8
  %87 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %72, ptr noundef nonnull align 8 %3)
  %88 = call { ptr, i160 } %87({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %3) #34
  %.fca.0.extract63 = extractvalue { ptr, i160 } %88, 0
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %.fca.0.extract26)
  %90 = load ptr, ptr %14, align 8
  %91 = call ptr @typegetter_wrapper(ptr %90, ptr %.fca.1.extract27)
  %92 = icmp ne ptr %.fca.0.extract63, @nil_typ
  %93 = icmp ne ptr %.fca.0.extract63, null
  %.not71 = and i1 %92, %93
  br i1 %.not71, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %._crit_edge1
  %94 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %.fca.0.extract26)
  %95 = load ptr, ptr %14, align 8
  %96 = call ptr @typegetter_wrapper(ptr %95, ptr %.fca.1.extract27)
  store ptr %96, ptr %4, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %4)
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %33)
  %99 = load ptr, ptr %gep, align 8
  store ptr %.fca.0.extract63, ptr %5, align 8
  %100 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %81, ptr noundef nonnull align 8 dereferenceable(8) %5)
  %101 = call { ptr, ptr, ptr, i32 } %100({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4, { ptr, i160 } %88) #34
  %.fca.0.extract36 = extractvalue { ptr, ptr, ptr, i32 } %101, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %101, 1
  %.fca.2.extract38 = extractvalue { ptr, ptr, ptr, i32 } %101, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %101, 3
  store ptr %.fca.0.extract36, ptr %6, align 8
  store ptr %.fca.1.extract37, ptr %83, align 8
  store ptr %.fca.2.extract38, ptr %84, align 8
  store i32 %.fca.3.extract39, ptr %85, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  br label %._crit_edge1

.critedge:                                        ; preds = %._crit_edge1
  store ptr %33, ptr %7, align 8
  %102 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %34, ptr %102, align 8
  %103 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %35, ptr %103, align 8
  %104 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %36, ptr %104, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %105 = load ptr, ptr %7, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = load ptr, ptr %102, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 1
  %109 = load ptr, ptr %103, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 2
  %111 = load i32, ptr %104, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %111, 3
  ret { ptr, ptr, ptr, i32 } %112
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr @typegetter_wrapper(ptr %14, ptr %8)
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 72
  %18 = load ptr, ptr %17, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr %18, ptr noundef nonnull align 8 dereferenceable(8) %15)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %5, align 8
  %23 = load ptr, ptr %4, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %23)
  %25 = load i32, ptr %7, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %21, 0
  call void %31(ptr %22, { ptr } %32) #25
  %33 = load ptr, ptr %5, align 8
  %34 = load ptr, ptr %4, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %34)
  %36 = load i32, ptr %7, align 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr ptr, ptr %34, i64 %37
  %39 = getelementptr i8, ptr %38, i64 16
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, i32 0) #25
  %43 = load ptr, ptr %5, align 8
  %44 = load ptr, ptr %4, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %44)
  %46 = load i32, ptr %7, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 24
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr i8, ptr %50, i64 8
  %52 = load ptr, ptr %51, align 8
  call void %52(ptr %43, i32 1) #25
  ret void
}

define void @Array_init_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %9, i32 %3) #25
  %19 = load ptr, ptr %6, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %20)
  %22 = load i32, ptr %8, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 24
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %19) #26
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %20)
  %30 = load ptr, ptr %24, align 8
  %31 = call ptr @typegetter_wrapper(ptr %30, ptr %19)
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr i8, ptr %32, i64 72
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr noundef nonnull align 8 dereferenceable(8) %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = sext i32 %28 to i64
  %38 = mul i64 %36, %37
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr } undef, ptr %39, 0
  call void %49(ptr %40, { ptr } %50) #25
  %51 = load ptr, ptr %6, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %52)
  %54 = load i32, ptr %8, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 16
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  call void %60(ptr %51, i32 0) #25
  ret void
}

define void @Array_init_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3, i32 %4) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %10, i32 %3) #25
  %20 = load ptr, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %21)
  %23 = load i32, ptr %9, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 24
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, i32 %4) #25
  %30 = load ptr, ptr %7, align 8
  %31 = load ptr, ptr %6, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %31)
  %33 = load i32, ptr %9, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 24
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %30) #26
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %31)
  %41 = load ptr, ptr %35, align 8
  %42 = call ptr @typegetter_wrapper(ptr %41, ptr %30)
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr i8, ptr %43, i64 72
  %45 = load ptr, ptr %44, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr %45, ptr noundef nonnull align 8 dereferenceable(8) %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = sext i32 %39 to i64
  %49 = mul i64 %47, %48
  %50 = call ptr @bump_malloc(i64 %49)
  %51 = load ptr, ptr %7, align 8
  %52 = load ptr, ptr %6, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %52)
  %54 = load i32, ptr %9, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr } undef, ptr %50, 0
  call void %60(ptr %51, { ptr } %61) #25
  ret void
}

define void @Array_init_bufferBufferT_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, i32 %4, i32 %5) #3 {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  call void %20(ptr %11, { ptr } %3) #25
  %21 = load ptr, ptr %8, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %22)
  %24 = load i32, ptr %10, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %4) #25
  %31 = load ptr, ptr %8, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %32)
  %34 = load i32, ptr %10, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 24
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  call void %40(ptr %31, i32 %5) #25
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #26
  ret i32 %17
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #26
  ret i32 %17
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #3 {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract5, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract, ptr %11, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %12) #26
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %13)
  %23 = getelementptr i8, ptr %17, i64 24
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %12) #26
  %.not = icmp slt i32 %21, %26
  br i1 %.not, label %._crit_edge, label %27

27:                                               ; preds = %4
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %13)
  %29 = call i32 %25(ptr %12) #26
  %30 = shl i32 %29, 1
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %13, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %12, 1
  %33 = load ptr, ptr %10, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %15, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5)
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %13)
  %38 = getelementptr i8, ptr %17, i64 104
  %39 = load ptr, ptr %38, align 8
  store ptr @i32_typ, ptr %6, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %35, ptr noundef nonnull align 8 dereferenceable(8) %6)
  call void %40({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %5, i32 %30) #34
  %.pre = load ptr, ptr %9, align 8
  %.pre19 = load ptr, ptr %8, align 8
  %.pre20 = load i32, ptr %11, align 8
  %.phi.trans.insert = sext i32 %.pre20 to i64
  %.phi.trans.insert21 = getelementptr ptr, ptr %.pre19, i64 %.phi.trans.insert
  %.phi.trans.insert22 = getelementptr i8, ptr %.phi.trans.insert21, i64 16
  %.pre23 = load ptr, ptr %.phi.trans.insert22, align 8
  %.pre24 = load ptr, ptr %.pre23, align 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %27
  %.pre-phi = phi i64 [ %16, %4 ], [ %.phi.trans.insert, %27 ]
  %41 = phi ptr [ %20, %4 ], [ %.pre24, %27 ]
  %42 = phi ptr [ %13, %4 ], [ %.pre19, %27 ]
  %43 = phi ptr [ %12, %4 ], [ %.pre, %27 ]
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %42)
  %45 = getelementptr ptr, ptr %42, i64 %.pre-phi
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr } %48(ptr %43) #26
  %.fca.0.extract14 = extractvalue { ptr } %49, 0
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %42)
  %51 = call i32 %41(ptr %43) #26
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %42)
  %53 = load ptr, ptr %45, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %43)
  %55 = load ptr, ptr %54, align 8
  %56 = getelementptr i8, ptr %55, i64 72
  %57 = load ptr, ptr %56, align 8
  %58 = call { i64, i64 } @size_wrapper(ptr %57, ptr noundef nonnull align 8 dereferenceable(8) %54)
  %59 = extractvalue { i64, i64 } %58, 0
  %60 = sext i32 %51 to i64
  %61 = mul i64 %59, %60
  %62 = getelementptr i8, ptr %.fca.0.extract14, i64 %61
  %63 = load ptr, ptr %54, align 8
  %64 = getelementptr i8, ptr %63, i64 64
  %65 = load ptr, ptr %64, align 8
  call void @unbox_wrapper(ptr %65, { ptr, i160 } %3, ptr noundef nonnull align 8 dereferenceable(8) %54, ptr %62)
  %66 = load ptr, ptr %9, align 8
  %67 = load ptr, ptr %8, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %67)
  %69 = load i32, ptr %11, align 8
  %70 = sext i32 %69 to i64
  %71 = getelementptr ptr, ptr %67, i64 %70
  %72 = getelementptr i8, ptr %71, i64 16
  %73 = load ptr, ptr %72, align 8
  %74 = load ptr, ptr %73, align 8
  %75 = call i32 %74(ptr %66) #26
  %76 = add i32 %75, 1
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %67)
  %78 = getelementptr i8, ptr %73, i64 8
  %79 = load ptr, ptr %78, align 8
  call void %79(ptr %66, i32 %76) #25
  %80 = load ptr, ptr %8, align 8
  store ptr %80, ptr %7, align 8
  %81 = getelementptr inbounds i8, ptr %7, i64 8
  %82 = load ptr, ptr %9, align 8
  store ptr %82, ptr %81, align 8
  %83 = getelementptr inbounds i8, ptr %7, i64 16
  %84 = load ptr, ptr %10, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr inbounds i8, ptr %7, i64 24
  %86 = load i32, ptr %11, align 8
  store i32 %86, ptr %85, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %87 = load ptr, ptr %7, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %87, 0
  %89 = load ptr, ptr %81, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 1
  %91 = load ptr, ptr %83, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 2
  %93 = load i32, ptr %85, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 %93, 3
  ret { ptr, ptr, ptr, i32 } %94
}

define { ptr, ptr, ptr, i32 } @Array_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %.fca.1.extract11, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %.fca.2.extract12, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %11, i64 24
  store i32 %.fca.3.extract13, ptr %14, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %11, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr %.fca.1.extract, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr %.fca.2.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %15, i64 24
  store i32 %.fca.3.extract, ptr %18, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %15, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %19 = load ptr, ptr %15, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %21 = load ptr, ptr %16, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %21, 1
  %23 = load ptr, ptr %17, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %23, 2
  %25 = load i32, ptr %18, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %25, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %19)
  %29 = sext i32 %25 to i64
  %30 = getelementptr ptr, ptr %19, i64 %29
  %31 = getelementptr i8, ptr %30, i64 72
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @behavior_wrapper(ptr %32, { ptr, ptr, ptr, i32 } %26, ptr noundef nonnull align 8 %5)
  %34 = call i32 %33({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull %5) #34
  %35 = load ptr, ptr %12, align 8
  %36 = load ptr, ptr %11, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %36)
  %38 = load i32, ptr %14, align 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr ptr, ptr %36, i64 %39
  %41 = getelementptr i8, ptr %40, i64 16
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %35) #26
  %45 = add i32 %44, %34
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %35, 1
  %48 = load ptr, ptr %13, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %38, 3
  %51 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %51)
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %36)
  %54 = getelementptr i8, ptr %40, i64 104
  %55 = load ptr, ptr %54, align 8
  %56 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %56, align 8
  %57 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %50, ptr noundef nonnull align 8 dereferenceable(8) %56)
  call void %57({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %51, i32 %45) #34
  %58 = icmp sgt i32 %34, 0
  br i1 %58, label %._crit_edge.lr.ph, label %._crit_edge1._crit_edge

._crit_edge.lr.ph:                                ; preds = %4
  %59 = getelementptr inbounds i8, ptr %8, i64 8
  %60 = getelementptr inbounds i8, ptr %9, i64 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.lr.ph, %._crit_edge
  %.030 = phi i32 [ 0, %._crit_edge.lr.ph ], [ %96, %._crit_edge ]
  %61 = add i32 %.030, %44
  %62 = load ptr, ptr %15, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %16, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %17, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %18, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6)
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %62)
  %72 = sext i32 %68 to i64
  %73 = getelementptr ptr, ptr %62, i64 %72
  %74 = getelementptr i8, ptr %73, i64 136
  %75 = load ptr, ptr %74, align 8
  store ptr @i32_typ, ptr %7, align 8
  %76 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %69, ptr noundef nonnull align 8 dereferenceable(8) %7)
  %77 = call { ptr, i160 } %76({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr nonnull %6, i32 %.030) #34
  %.fca.0.extract23 = extractvalue { ptr, i160 } %77, 0
  %78 = load ptr, ptr %11, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %12, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %13, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %14, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %78)
  %87 = sext i32 %84 to i64
  %88 = getelementptr ptr, ptr %78, i64 %87
  %89 = load ptr, ptr %88, align 8
  %90 = call ptr @typegetter_wrapper(ptr %89, ptr %80)
  store ptr @_parameterization_i32, ptr %8, align 8
  store ptr %90, ptr %59, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %8)
  %92 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %78)
  %93 = getelementptr i8, ptr %88, i64 144
  %94 = load ptr, ptr %93, align 8
  store ptr @i32_typ, ptr %9, align 8
  store ptr %.fca.0.extract23, ptr %60, align 8
  %95 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %85, ptr noundef nonnull align 8 dereferenceable(16) %9)
  call void %95({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr nonnull %8, i32 %61, { ptr, i160 } %77) #34
  %96 = add nuw nsw i32 %.030, 1
  %97 = icmp slt i32 %96, %34
  br i1 %97, label %._crit_edge, label %._crit_edge1._crit_edge

._crit_edge1._crit_edge:                          ; preds = %._crit_edge, %4
  %98 = load ptr, ptr %12, align 8
  %99 = load ptr, ptr %11, align 8
  %100 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %99)
  %101 = load i32, ptr %14, align 8
  %102 = sext i32 %101 to i64
  %103 = getelementptr ptr, ptr %99, i64 %102
  %104 = getelementptr i8, ptr %103, i64 16
  %105 = load ptr, ptr %104, align 8
  %106 = getelementptr i8, ptr %105, i64 8
  %107 = load ptr, ptr %106, align 8
  call void %107(ptr %98, i32 %45) #25
  %108 = load ptr, ptr %11, align 8
  store ptr %108, ptr %10, align 8
  %109 = getelementptr inbounds i8, ptr %10, i64 8
  %110 = load ptr, ptr %12, align 8
  store ptr %110, ptr %109, align 8
  %111 = getelementptr inbounds i8, ptr %10, i64 16
  %112 = load ptr, ptr %13, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr inbounds i8, ptr %10, i64 24
  %114 = load i32, ptr %14, align 8
  store i32 %114, ptr %113, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %115 = load ptr, ptr %10, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %115, 0
  %117 = load ptr, ptr %109, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr %117, 1
  %119 = load ptr, ptr %111, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 2
  %121 = load i32, ptr %113, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, i32 %121, 3
  ret { ptr, ptr, ptr, i32 } %122
}

define void @Array_reserve_new_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #26
  %.not = icmp sgt i32 %3, %18
  br i1 %.not, label %19, label %._crit_edge.thread

19:                                               ; preds = %4
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %10)
  %21 = getelementptr i8, ptr %16, i64 8
  %22 = load ptr, ptr %21, align 8
  call void %22(ptr %9, i32 %3) #25
  %23 = load ptr, ptr %6, align 8
  %24 = load ptr, ptr %5, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %24)
  %26 = load i32, ptr %8, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr } %31(ptr %23) #26
  %.fca.0.extract22 = extractvalue { ptr } %32, 0
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %24)
  %34 = getelementptr i8, ptr %28, i64 24
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %23) #26
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %24)
  %39 = load ptr, ptr %28, align 8
  %40 = call ptr @typegetter_wrapper(ptr %39, ptr %23)
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr i8, ptr %41, i64 72
  %43 = load ptr, ptr %42, align 8
  %44 = call { i64, i64 } @size_wrapper(ptr %43, ptr noundef nonnull align 8 dereferenceable(8) %40)
  %45 = extractvalue { i64, i64 } %44, 0
  %46 = sext i32 %37 to i64
  %47 = mul i64 %45, %46
  %48 = call ptr @bump_malloc(i64 %47)
  %49 = load ptr, ptr %6, align 8
  %50 = load ptr, ptr %5, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %50)
  %52 = load i32, ptr %8, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr ptr, ptr %50, i64 %53
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr } undef, ptr %48, 0
  call void %58(ptr %49, { ptr } %59) #25
  %60 = load ptr, ptr %6, align 8
  %61 = load ptr, ptr %5, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %61)
  %63 = load i32, ptr %8, align 8
  %64 = sext i32 %63 to i64
  %65 = getelementptr ptr, ptr %61, i64 %64
  %66 = getelementptr i8, ptr %65, i64 16
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %60) #26
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %._crit_edge, label %._crit_edge.thread

._crit_edge:                                      ; preds = %19, %._crit_edge
  %71 = phi ptr [ %118, %._crit_edge ], [ %65, %19 ]
  %72 = phi ptr [ %114, %._crit_edge ], [ %61, %19 ]
  %73 = phi ptr [ %113, %._crit_edge ], [ %60, %19 ]
  %.026 = phi i32 [ %112, %._crit_edge ], [ 0, %19 ]
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %72)
  %75 = load ptr, ptr %71, align 8
  %76 = call ptr @typegetter_wrapper(ptr %75, ptr %73)
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 72
  %79 = load ptr, ptr %78, align 8
  %80 = call { i64, i64 } @size_wrapper(ptr %79, ptr noundef nonnull align 8 dereferenceable(8) %76)
  %81 = extractvalue { i64, i64 } %80, 0
  %82 = zext nneg i32 %.026 to i64
  %83 = mul i64 %81, %82
  %84 = getelementptr i8, ptr %.fca.0.extract22, i64 %83
  %85 = load ptr, ptr %76, align 8
  %86 = getelementptr i8, ptr %85, i64 56
  %87 = load ptr, ptr %86, align 8
  %88 = call { ptr, i160 } @box_wrapper(ptr %87, ptr %84, ptr noundef nonnull align 8 dereferenceable(8) %76)
  %89 = load ptr, ptr %6, align 8
  %90 = load ptr, ptr %5, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %90)
  %92 = load i32, ptr %8, align 8
  %93 = sext i32 %92 to i64
  %94 = getelementptr ptr, ptr %90, i64 %93
  %95 = getelementptr i8, ptr %94, i64 8
  %96 = load ptr, ptr %95, align 8
  %97 = load ptr, ptr %96, align 8
  %98 = call { ptr } %97(ptr %89) #26
  %.fca.0.extract7 = extractvalue { ptr } %98, 0
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %90)
  %100 = load ptr, ptr %94, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %89)
  %102 = load ptr, ptr %101, align 8
  %103 = getelementptr i8, ptr %102, i64 72
  %104 = load ptr, ptr %103, align 8
  %105 = call { i64, i64 } @size_wrapper(ptr %104, ptr noundef nonnull align 8 dereferenceable(8) %101)
  %106 = extractvalue { i64, i64 } %105, 0
  %107 = mul i64 %106, %82
  %108 = getelementptr i8, ptr %.fca.0.extract7, i64 %107
  %109 = load ptr, ptr %101, align 8
  %110 = getelementptr i8, ptr %109, i64 64
  %111 = load ptr, ptr %110, align 8
  call void @unbox_wrapper(ptr %111, { ptr, i160 } %88, ptr noundef nonnull align 8 dereferenceable(8) %101, ptr %108)
  %112 = add nuw nsw i32 %.026, 1
  %113 = load ptr, ptr %6, align 8
  %114 = load ptr, ptr %5, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %114)
  %116 = load i32, ptr %8, align 8
  %117 = sext i32 %116 to i64
  %118 = getelementptr ptr, ptr %114, i64 %117
  %119 = getelementptr i8, ptr %118, i64 16
  %120 = load ptr, ptr %119, align 8
  %121 = load ptr, ptr %120, align 8
  %122 = call i32 %121(ptr %113) #26
  %123 = icmp slt i32 %112, %122
  br i1 %123, label %._crit_edge, label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %._crit_edge, %19, %4
  ret void
}

define { ptr, i160 } @Array__index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %13 = load ptr, ptr %10, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %14)
  %16 = load i32, ptr %12, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 16
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call i32 %21(ptr %13) #26
  %23 = add i32 %22, -1
  %24 = icmp sgt i32 %3, %23
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %14)
  %26 = call i32 %21(ptr %13) #26
  %27 = add i32 %26, %3
  %28 = icmp slt i32 %27, 0
  %.0 = select i1 %24, i1 true, i1 %28
  br i1 %.0, label %29, label %._crit_edge

29:                                               ; preds = %4
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %14, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %13, 1
  %32 = load ptr, ptr %11, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %16, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5)
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %14)
  %37 = getelementptr i8, ptr %18, i64 128
  %38 = load ptr, ptr %37, align 8
  store ptr @i32_typ, ptr %6, align 8
  %39 = call ptr @behavior_wrapper(ptr %38, { ptr, ptr, ptr, i32 } %34, ptr noundef nonnull align 8 dereferenceable(8) %6)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5, i32 %3) #34
  %.pre.pre = load ptr, ptr %9, align 8
  %.pre30.pre = load ptr, ptr %10, align 8
  %.pre31.pre = load i32, ptr %12, align 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %29
  %.pre31 = phi i32 [ %16, %4 ], [ %.pre31.pre, %29 ]
  %.pre30 = phi ptr [ %13, %4 ], [ %.pre30.pre, %29 ]
  %.pre = phi ptr [ %14, %4 ], [ %.pre.pre, %29 ]
  %40 = icmp slt i32 %3, 0
  br i1 %40, label %41, label %._crit_edge.._crit_edge1_crit_edge

._crit_edge.._crit_edge1_crit_edge:               ; preds = %._crit_edge
  %.pre35 = sext i32 %.pre31 to i64
  br label %._crit_edge1

41:                                               ; preds = %._crit_edge
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %.pre)
  %43 = sext i32 %.pre31 to i64
  %44 = getelementptr ptr, ptr %.pre, i64 %43
  %45 = getelementptr i8, ptr %44, i64 16
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %.pre30) #26
  %49 = add i32 %48, %3
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge.._crit_edge1_crit_edge, %41
  %.pre-phi = phi i64 [ %.pre35, %._crit_edge.._crit_edge1_crit_edge ], [ %43, %41 ]
  %.027 = phi i32 [ %3, %._crit_edge.._crit_edge1_crit_edge ], [ %49, %41 ]
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.pre, 0
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %.pre30, 1
  %52 = load ptr, ptr %11, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 2
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %.pre31, 3
  store ptr @_parameterization_i32, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %.pre)
  %57 = getelementptr ptr, ptr %.pre, i64 %.pre-phi
  %58 = getelementptr i8, ptr %57, i64 136
  %59 = load ptr, ptr %58, align 8
  store ptr @i32_typ, ptr %8, align 8
  %60 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %54, ptr noundef nonnull align 8 dereferenceable(8) %8)
  %61 = call { ptr, i160 } %60({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull %7, i32 %.027) #34
  ret { ptr, i160 } %61
}

define void @Array__set_index_xi32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3, { ptr, i160 } %4) #3 {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %.fca.0.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract16, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract17, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %14 = load ptr, ptr %11, align 8
  %15 = load ptr, ptr %10, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %15)
  %17 = load i32, ptr %13, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr ptr, ptr %15, i64 %18
  %20 = getelementptr i8, ptr %19, i64 16
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i32 %22(ptr %14) #26
  %24 = add i32 %23, -1
  %25 = icmp sgt i32 %3, %24
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %15)
  %27 = call i32 %22(ptr %14) #26
  %28 = add i32 %27, %3
  %29 = icmp slt i32 %28, 0
  %.0 = select i1 %25, i1 true, i1 %29
  br i1 %.0, label %30, label %._crit_edge

30:                                               ; preds = %5
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %14, 1
  %33 = load ptr, ptr %12, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %17, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6)
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull %15)
  %38 = getelementptr i8, ptr %19, i64 128
  %39 = load ptr, ptr %38, align 8
  store ptr @i32_typ, ptr %7, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %35, ptr noundef nonnull align 8 dereferenceable(8) %7)
  call void %40({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %6, i32 %3) #34
  %.pre.pre = load ptr, ptr %10, align 8
  %.pre30.pre = load ptr, ptr %11, align 8
  %.pre31.pre = load i32, ptr %13, align 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %5, %30
  %.pre31 = phi i32 [ %17, %5 ], [ %.pre31.pre, %30 ]
  %.pre30 = phi ptr [ %14, %5 ], [ %.pre30.pre, %30 ]
  %.pre = phi ptr [ %15, %5 ], [ %.pre.pre, %30 ]
  %41 = icmp slt i32 %3, 0
  br i1 %41, label %42, label %._crit_edge.._crit_edge1_crit_edge

._crit_edge.._crit_edge1_crit_edge:               ; preds = %._crit_edge
  %.pre35 = sext i32 %.pre31 to i64
  br label %._crit_edge1

42:                                               ; preds = %._crit_edge
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %.pre)
  %44 = sext i32 %.pre31 to i64
  %45 = getelementptr ptr, ptr %.pre, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call i32 %48(ptr %.pre30) #26
  %50 = add i32 %49, %3
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge.._crit_edge1_crit_edge, %42
  %.pre-phi = phi i64 [ %.pre35, %._crit_edge.._crit_edge1_crit_edge ], [ %44, %42 ]
  %.027 = phi i32 [ %3, %._crit_edge.._crit_edge1_crit_edge ], [ %50, %42 ]
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.pre, 0
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %.pre30, 1
  %53 = load ptr, ptr %12, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %.pre31, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %.pre)
  %57 = getelementptr ptr, ptr %.pre, i64 %.pre-phi
  %58 = load ptr, ptr %57, align 8
  %59 = call ptr @typegetter_wrapper(ptr %58, ptr %.pre30)
  store ptr @_parameterization_i32, ptr %8, align 8
  %60 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %59, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %8)
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %.pre)
  %63 = getelementptr i8, ptr %57, i64 144
  %64 = load ptr, ptr %63, align 8
  store ptr @i32_typ, ptr %9, align 8
  %65 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.0.extract, ptr %65, align 8
  %66 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %55, ptr noundef nonnull align 8 dereferenceable(16) %9)
  call void %66({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %8, i32 %.027, { ptr, i160 } %4) #34
  ret void
}

define void @Array_throw_oob_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract23 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract22, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract23, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %10 = alloca [1 x ptr], align 8
  store ptr @Exception, ptr %10, align 8
  %11 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 48), align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr noundef nonnull align 8 dereferenceable(8) %10)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = call ptr @bump_malloc(i64 %13)
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Exception, ptr undef, ptr undef, i32 undef }, ptr %14, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef nonnull align 8 dereferenceable(160) @Exception)
  %20 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 112), align 8
  %21 = call ptr @behavior_wrapper(ptr %20, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 %5)
  call void %21({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5) #34
  %22 = call ptr @bump_malloc(i64 noundef 57)
  %23 = load <56 x i8>, ptr @kaabw_CUsersPaulKOneDriveDocumentsPLPyPLlibarraymini, align 64
  store <56 x i8> %23, ptr %22, align 64
  %24 = alloca [1 x ptr], align 8
  store ptr @String, ptr %24, align 8
  %25 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr noundef nonnull align 8 dereferenceable(8) %24)
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = call ptr @bump_malloc(i64 %27)
  %29 = insertvalue { ptr } undef, ptr %22, 0
  %30 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %28, 1
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr undef, 2
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, i32 10, 3
  %33 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %33, align 8
  %34 = getelementptr inbounds i8, ptr %33, i64 8
  store ptr @_parameterization_i32, ptr %34, align 8
  %35 = getelementptr inbounds i8, ptr %33, i64 16
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %33)
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %38 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %39 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %39, align 8
  %40 = getelementptr inbounds i8, ptr %39, i64 8
  store ptr @i32_typ, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %39, i64 16
  store ptr @i32_typ, ptr %41, align 8
  %42 = call ptr @behavior_wrapper(ptr %38, { ptr, ptr, ptr, i32 } %32, ptr noundef nonnull align 8 dereferenceable(24) %39)
  call void %42({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr nonnull %33, { ptr } %29, i32 56, i32 57) #34
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %43, i64 8
  store ptr %28, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 16
  %46 = getelementptr inbounds i8, ptr %43, i64 24
  store i32 10, ptr %46, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %43, ptr noundef nonnull align 8 dereferenceable(688) @String)
  %47 = load ptr, ptr %43, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %49 = load ptr, ptr %44, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 1
  %51 = load ptr, ptr %45, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 2
  %53 = load i32, ptr %46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %53, 3
  %55 = alloca [2 x ptr], align 8
  store ptr @_parameterization_i32, ptr %55, align 8
  %56 = getelementptr inbounds i8, ptr %55, i64 8
  store ptr @_parameterization_String, ptr %56, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %55)
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef nonnull align 8 dereferenceable(160) @Exception)
  %59 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 120), align 8
  %60 = alloca { ptr, ptr }, align 8
  store ptr @i32_typ, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %60, i64 8
  store ptr %47, ptr %61, align 8
  %62 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 dereferenceable(16) %60)
  call void %62({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %55, i32 89, { ptr, ptr, ptr, i32 } %54) #34
  %63 = ptrtoint ptr %14 to i64
  %.sroa.4.8.insert.ext = zext i64 %63 to i160
  %.sroa.4.8.insert.insert = or disjoint i160 %.sroa.4.8.insert.ext, 3402823669209384634633746074317682114560
  %64 = insertvalue { ptr, i160 } { ptr @Exception, i160 undef }, i160 %.sroa.4.8.insert.insert, 1
  %65 = call ptr @get_current_coroutine()
  %66 = getelementptr i8, ptr %65, i64 48
  store { ptr, i160 } %64, ptr %66, align 8
  call void @coroutine_yield(ptr noundef align 8 %65)
  ret void
}

define { ptr, i160 } @Array_unchecked_index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr } %17(ptr %9) #26
  %.fca.0.extract1 = extractvalue { ptr } %18, 0
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %10)
  %20 = load ptr, ptr %14, align 8
  %21 = call ptr @typegetter_wrapper(ptr %20, ptr %9)
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i8, ptr %22, i64 72
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr noundef nonnull align 8 dereferenceable(8) %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = sext i32 %3 to i64
  %28 = mul i64 %26, %27
  %29 = getelementptr i8, ptr %.fca.0.extract1, i64 %28
  %30 = load ptr, ptr %21, align 8
  %31 = getelementptr i8, ptr %30, i64 56
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr, i160 } @box_wrapper(ptr %32, ptr %29, ptr noundef nonnull align 8 dereferenceable(8) %21)
  ret { ptr, i160 } %33
}

define void @Array_unchecked_insert_xi32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3, { ptr, i160 } %4) #3 {
  %.fca.0.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract6, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract7, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = call { ptr } %18(ptr %10) #26
  %.fca.0.extract = extractvalue { ptr } %19, 0
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %11)
  %21 = load ptr, ptr %15, align 8
  %22 = call ptr @typegetter_wrapper(ptr %21, ptr %10)
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr i8, ptr %23, i64 72
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr noundef nonnull align 8 dereferenceable(8) %22)
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = sext i32 %3 to i64
  %29 = mul i64 %27, %28
  %30 = getelementptr i8, ptr %.fca.0.extract, i64 %29
  %31 = load ptr, ptr %22, align 8
  %32 = getelementptr i8, ptr %31, i64 64
  %33 = load ptr, ptr %32, align 8
  call void @unbox_wrapper(ptr %33, { ptr, i160 } %4, ptr noundef nonnull align 8 dereferenceable(8) %22, ptr %30)
  ret void
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr @typegetter_wrapper(ptr %14, ptr %8)
  %16 = alloca [2 x ptr], align 8
  store ptr @ArrayIterator, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr %15, ptr %17, align 8
  %18 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_ArrayIterator, ptr noundef nonnull align 8 dereferenceable(16) %16)
  %19 = extractvalue { i64, i64 } %18, 0
  %20 = call ptr @bump_malloc(i64 %19)
  store ptr %15, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = load ptr, ptr %4, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 8
  %25 = load ptr, ptr %5, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr inbounds i8, ptr %22, i64 16
  %27 = load ptr, ptr %6, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr inbounds i8, ptr %22, i64 24
  %29 = load i32, ptr %7, align 8
  store i32 %29, ptr %28, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %22, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %30 = load ptr, ptr %22, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %24, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %26, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %28, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  %38 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ArrayIterator, ptr undef, ptr undef, i32 undef }, ptr %20, 1
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr undef, 2
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 10, 3
  %41 = load ptr, ptr %5, align 8
  %42 = load ptr, ptr %4, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %42)
  %44 = load i32, ptr %7, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr ptr, ptr %42, i64 %45
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr @typegetter_wrapper(ptr %47, ptr %41)
  %49 = call ptr @bump_malloc(i64 noundef 24)
  %50 = getelementptr i8, ptr %49, i64 8
  store ptr %48, ptr %50, align 8
  %51 = getelementptr i8, ptr %49, i64 16
  store ptr null, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %49)
  store ptr @Array, ptr %49, align 8
  %53 = alloca [1 x ptr], align 8
  store ptr %49, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @ArrayIterator)
  %56 = alloca { ptr }, align 8
  store ptr %30, ptr %56, align 8
  %57 = call ptr @behavior_wrapper(ptr noundef nonnull @ArrayIterator_B_init_arrayArrayT, { ptr, ptr, ptr, i32 } %40, ptr noundef nonnull align 8 dereferenceable(8) %56)
  call void %57({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr nonnull %53, { ptr, ptr, ptr, i32 } %37) #34
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ArrayIterator, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr %20, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %58, i64 16
  %61 = getelementptr inbounds i8, ptr %58, i64 24
  store i32 10, ptr %61, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %58, ptr noundef nonnull align 8 dereferenceable(56) @Iterator)
  %62 = load ptr, ptr %58, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %59, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %60, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %61, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  ret { ptr, ptr, ptr, i32 } %69
}

define { ptr, ptr, ptr, i32 } @Array_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %8 = call ptr @bump_malloc(i64 noundef 6)
  store <5 x i8> <i8 65, i8 114, i8 114, i8 97, i8 121>, ptr %8, align 8
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %11 = call { i64, i64 } @size_wrapper(ptr %10, ptr noundef nonnull align 8 dereferenceable(8) %9)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr } undef, ptr %8, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %18)
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %23 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %24 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr @i32_typ, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr @i32_typ, ptr %26, align 8
  %27 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 dereferenceable(24) %24)
  call void %27({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %18, { ptr } %14, i32 5, i32 6) #34
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %13, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 16
  %31 = getelementptr inbounds i8, ptr %28, i64 24
  store i32 10, ptr %31, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %28, ptr noundef nonnull align 8 dereferenceable(688) @String)
  %32 = load ptr, ptr %28, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %29, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %30, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %31, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  ret { ptr, ptr, ptr, i32 } %39
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ArrayIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef -5261542750394134544, i64 noundef ptrtoint (ptr @Array to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ArrayIterator_field_ArrayIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(160) @ArrayIterator)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %13, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %13, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  call void %30(ptr %21, { ptr, ptr, ptr, i32 } %38) #25
  %39 = load ptr, ptr %6, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %40)
  %42 = load i32, ptr %8, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 16
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  call void %48(ptr %39, i32 0) #25
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract12, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract14, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract16, ptr %11, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 16 dereferenceable(160) @ArrayIterator)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %12) #26
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %13)
  %23 = getelementptr i8, ptr %17, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %12) #26
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  store ptr %.fca.0.extract, ptr %27, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %27, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %27, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %27, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %27, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = load ptr, ptr %.fca.1.gep, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 1
  %32 = load ptr, ptr %.fca.2.gep, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = load i32, ptr %.fca.3.gep, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %34, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %28)
  %38 = sext i32 %34 to i64
  %39 = getelementptr ptr, ptr %28, i64 %38
  %40 = getelementptr i8, ptr %39, i64 72
  %41 = load ptr, ptr %40, align 8
  %42 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %35, ptr noundef nonnull align 8 %4)
  %43 = call i32 %42({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4) #34
  %.not = icmp slt i32 %21, %43
  br i1 %.not, label %44, label %91

44:                                               ; preds = %3
  %45 = load ptr, ptr %9, align 8
  %46 = load ptr, ptr %8, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %46)
  %48 = load i32, ptr %11, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = getelementptr i8, ptr %50, i64 16
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %45) #26
  %55 = add i32 %54, 1
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %46)
  %57 = getelementptr i8, ptr %52, i64 8
  %58 = load ptr, ptr %57, align 8
  call void %58(ptr %45, i32 %55) #25
  %59 = load ptr, ptr %9, align 8
  %60 = load ptr, ptr %8, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %60)
  %62 = load i32, ptr %11, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 16
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call i32 %67(ptr %59) #26
  %69 = add i32 %68, -1
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef %60)
  %71 = getelementptr i8, ptr %64, i64 8
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = call { ptr, ptr, ptr, i32 } %73(ptr %59) #26
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  store ptr %.fca.0.extract26, ptr %5, align 8
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %.fca.1.gep29 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract28, ptr %.fca.1.gep29, align 8
  %.fca.2.extract30 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %.fca.2.gep31 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract30, ptr %.fca.2.gep31, align 8
  %.fca.3.extract32 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %.fca.3.gep33 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract32, ptr %.fca.3.gep33, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(744) @Array)
  %75 = load ptr, ptr %5, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %.fca.1.gep29, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = load ptr, ptr %.fca.2.gep31, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 2
  %81 = load i32, ptr %.fca.3.gep33, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6)
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %75)
  %85 = sext i32 %81 to i64
  %86 = getelementptr ptr, ptr %75, i64 %85
  %87 = getelementptr i8, ptr %86, i64 136
  %88 = load ptr, ptr %87, align 8
  store ptr @i32_typ, ptr %7, align 8
  %89 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %82, ptr noundef nonnull align 8 dereferenceable(8) %7)
  %90 = call { ptr, i160 } %89({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr nonnull %6, i32 %69) #34
  %.fca.0.extract20 = extractvalue { ptr, i160 } %90, 0
  %.fca.1.extract22 = extractvalue { ptr, i160 } %90, 1
  br label %91

91:                                               ; preds = %3, %44
  %.reg2mem21.sroa.0.0 = phi ptr [ %.fca.0.extract20, %44 ], [ @nil_typ, %3 ]
  %.reg2mem21.sroa.3.0 = phi i160 [ %.fca.1.extract22, %44 ], [ undef, %3 ]
  %.reload22.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem21.sroa.0.0, 0
  %.reload22.fca.1.insert = insertvalue { ptr, i160 } %.reload22.fca.0.insert, i160 %.reg2mem21.sroa.3.0, 1
  ret { ptr, i160 } %.reload22.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @ArrayIterator_getter_index(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_index(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_array(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Exception(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 6499063144389013426, i64 noundef ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 144
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Exception_B_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #24
  %4 = getelementptr inbounds i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 noundef 6499063144389013426, i64 noundef ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 160
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract13, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract15, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract16, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(184) @Exception)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %13, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %13, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  call void %30(ptr %21, { ptr, ptr, ptr, i32 } %38) #25
  %39 = load ptr, ptr %6, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %40)
  %42 = load i32, ptr %8, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %39, i32 0) #25
  %48 = call ptr @bump_malloc(i64 noundef 1)
  %49 = alloca [1 x ptr], align 8
  store ptr @String, ptr %49, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %49)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = insertvalue { ptr } undef, ptr %48, 0
  %54 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %52, 1
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr undef, 2
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 10, 3
  %57 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %57, align 8
  %58 = getelementptr inbounds i8, ptr %57, i64 8
  store ptr @_parameterization_i32, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %57, i64 16
  store ptr @_parameterization_i32, ptr %59, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %57)
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %62 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr @i32_typ, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  store ptr @i32_typ, ptr %64, align 8
  %65 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %56, ptr noundef nonnull align 8 dereferenceable(24) %62)
  call void %65({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull %57, { ptr } %53, i32 0, i32 1) #34
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr %52, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  %69 = getelementptr inbounds i8, ptr %66, i64 24
  store i32 10, ptr %69, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %66, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %70 = load ptr, ptr %6, align 8
  %71 = load ptr, ptr %5, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %71)
  %73 = load i32, ptr %8, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 8
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %66, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = load ptr, ptr %67, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %84 = load ptr, ptr %68, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %86 = load i32, ptr %69, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  call void %79(ptr %70, { ptr, ptr, ptr, i32 } %87) #25
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(184) @Exception)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  call void %16(ptr %8, i32 0) #25
  %17 = call ptr @bump_malloc(i64 noundef 7)
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %17, align 8
  %18 = alloca [1 x ptr], align 8
  store ptr @String, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = insertvalue { ptr } undef, ptr %17, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr undef, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 10, 3
  %26 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr @_parameterization_i32, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr @_parameterization_i32, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %26)
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %31 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr @i32_typ, ptr %32, align 8
  %33 = getelementptr inbounds i8, ptr %31, i64 16
  store ptr @i32_typ, ptr %33, align 8
  %34 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %25, ptr noundef nonnull align 8 dereferenceable(24) %31)
  call void %34({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %26, { ptr } %22, i32 6, i32 7) #34
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %35, align 8
  %36 = getelementptr inbounds i8, ptr %35, i64 8
  store ptr %21, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %35, i64 16
  %38 = getelementptr inbounds i8, ptr %35, i64 24
  store i32 10, ptr %38, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %35, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %39 = load ptr, ptr %5, align 8
  %40 = load ptr, ptr %4, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %40)
  %42 = load i32, ptr %7, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 16
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %35, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = load ptr, ptr %36, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = load i32, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  call void %48(ptr %39, { ptr, ptr, ptr, i32 } %56) #25
  %57 = call ptr @bump_malloc(i64 noundef 1)
  %58 = alloca [1 x ptr], align 8
  store ptr @String, ptr %58, align 8
  %59 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %58)
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = call ptr @bump_malloc(i64 %60)
  %62 = insertvalue { ptr } undef, ptr %57, 0
  %63 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %61, 1
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr undef, 2
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 10, 3
  %66 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr @_parameterization_i32, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr @_parameterization_i32, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %66)
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %71 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %71, i64 16
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %65, ptr noundef nonnull align 8 dereferenceable(24) %71)
  call void %74({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr nonnull %66, { ptr } %62, i32 0, i32 1) #34
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  store ptr %61, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %75, i64 16
  %78 = getelementptr inbounds i8, ptr %75, i64 24
  store i32 10, ptr %78, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %75, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %79 = load ptr, ptr %5, align 8
  %80 = load ptr, ptr %4, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %80)
  %82 = load i32, ptr %7, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr ptr, ptr %80, i64 %83
  %85 = getelementptr i8, ptr %84, i64 8
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr i8, ptr %86, i64 8
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %75, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %91 = load ptr, ptr %76, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 1
  %93 = load ptr, ptr %77, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 2
  %95 = load i32, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %95, 3
  call void %88(ptr %79, { ptr, ptr, ptr, i32 } %96) #25
  ret void
}

define void @Exception_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3, { ptr, ptr, ptr, i32 } %4) #3 {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract3, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract4, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(184) @Exception)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %10, i32 %3) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %22, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %19, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %20, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %21, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %22, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %23, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %31 = load ptr, ptr %7, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %32)
  %34 = load i32, ptr %9, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %23, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %41, 0
  %43 = load ptr, ptr %25, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 1
  %45 = load ptr, ptr %27, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 2
  %47 = load i32, ptr %29, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %47, 3
  call void %40(ptr %31, { ptr, ptr, ptr, i32 } %48) #25
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract89 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract91 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract93 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract95 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract89, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract91, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract93, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract95, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(184) @Exception)
  %9 = call ptr @bump_malloc(i64 noundef 10)
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %9, align 16
  %10 = alloca [1 x ptr], align 8
  store ptr @String, ptr %10, align 8
  %11 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %10)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr } undef, ptr %9, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %18)
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %23 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr @i32_typ, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr @i32_typ, ptr %25, align 8
  %26 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 dereferenceable(24) %23)
  call void %26({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %18, { ptr } %14, i32 9, i32 10) #34
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %29 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 %4)
  %30 = call { ptr } %29({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull align 8 %4) #34
  %.fca.0.extract71 = extractvalue { ptr } %30, 0
  %puts = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract71) #34
  %31 = call ptr @bump_malloc(i64 noundef 27)
  store <26 x i8> <i8 69, i8 120, i8 99, i8 101, i8 112, i8 116, i8 105, i8 111, i8 110, i8 32, i8 116, i8 104, i8 114, i8 111, i8 119, i8 110, i8 32, i8 102, i8 114, i8 111, i8 109, i8 32, i8 102, i8 105, i8 108, i8 101>, ptr %31, align 32
  %32 = alloca [1 x ptr], align 8
  store ptr @String, ptr %32, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %32)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = call ptr @bump_malloc(i64 %34)
  %36 = insertvalue { ptr } undef, ptr %31, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %35, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr undef, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 10, 3
  %40 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr @_parameterization_i32, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %40)
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %45 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %45, align 8
  %46 = getelementptr inbounds i8, ptr %45, i64 8
  store ptr @i32_typ, ptr %46, align 8
  %47 = getelementptr inbounds i8, ptr %45, i64 16
  store ptr @i32_typ, ptr %47, align 8
  %48 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %39, ptr noundef nonnull align 8 dereferenceable(24) %45)
  call void %48({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %40, { ptr } %36, i32 26, i32 27) #34
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %51 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %39, ptr noundef nonnull align 8 %4)
  %52 = call { ptr } %51({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull align 8 %4) #34
  %.fca.0.extract53 = extractvalue { ptr } %52, 0
  %puts97 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract53) #34
  %53 = load ptr, ptr %6, align 8
  %54 = load ptr, ptr %5, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %54)
  %56 = load i32, ptr %8, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr, ptr, ptr, i32 } %61(ptr %53) #26
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract52 = extractvalue { ptr, ptr, ptr, i32 } %62, 0
  store ptr %.fca.0.extract52, ptr %63, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %63, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %63, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %63, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %63, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %.fca.1.gep, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %.fca.2.gep, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %.fca.3.gep, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %64)
  %74 = sext i32 %70 to i64
  %75 = getelementptr ptr, ptr %64, i64 %74
  %76 = getelementptr i8, ptr %75, i64 80
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %71, ptr noundef nonnull align 8 %4)
  %79 = call { ptr } %78({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr nonnull align 8 %4) #34
  %.fca.0.extract50 = extractvalue { ptr } %79, 0
  %puts98 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract50) #34
  %80 = call ptr @bump_malloc(i64 noundef 8)
  store <7 x i8> <i8 65, i8 116, i8 32, i8 108, i8 105, i8 110, i8 101>, ptr %80, align 8
  %81 = alloca [1 x ptr], align 8
  store ptr @String, ptr %81, align 8
  %82 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %81)
  %83 = extractvalue { i64, i64 } %82, 0
  %84 = call ptr @bump_malloc(i64 %83)
  %85 = insertvalue { ptr } undef, ptr %80, 0
  %86 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %84, 1
  %87 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr undef, 2
  %88 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 10, 3
  %89 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %89, align 8
  %90 = getelementptr inbounds i8, ptr %89, i64 8
  store ptr @_parameterization_i32, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %89, i64 16
  store ptr @_parameterization_i32, ptr %91, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %89)
  %93 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %94 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %94, i64 8
  store ptr @i32_typ, ptr %95, align 8
  %96 = getelementptr inbounds i8, ptr %94, i64 16
  store ptr @i32_typ, ptr %96, align 8
  %97 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %88, ptr noundef nonnull align 8 dereferenceable(24) %94)
  call void %97({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull %89, { ptr } %85, i32 7, i32 8) #34
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %100 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %88, ptr noundef nonnull align 8 %4)
  %101 = call { ptr } %100({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull align 8 %4) #34
  %.fca.0.extract33 = extractvalue { ptr } %101, 0
  %puts99 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract33) #34
  %102 = load ptr, ptr %6, align 8
  %103 = load ptr, ptr %5, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %103)
  %105 = load i32, ptr %8, align 8
  %106 = sext i32 %105 to i64
  %107 = getelementptr ptr, ptr %103, i64 %106
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %108, align 8
  %110 = call i32 %109(ptr %102) #26
  %111 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %110) #34
  %112 = call ptr @bump_malloc(i64 noundef 13)
  store <12 x i8> <i8 87, i8 105, i8 116, i8 104, i8 32, i8 109, i8 101, i8 115, i8 115, i8 97, i8 103, i8 101>, ptr %112, align 16
  %113 = alloca [1 x ptr], align 8
  store ptr @String, ptr %113, align 8
  %114 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %113)
  %115 = extractvalue { i64, i64 } %114, 0
  %116 = call ptr @bump_malloc(i64 %115)
  %117 = insertvalue { ptr } undef, ptr %112, 0
  %118 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %116, 1
  %119 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr undef, 2
  %120 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 10, 3
  %121 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %121, align 8
  %122 = getelementptr inbounds i8, ptr %121, i64 8
  store ptr @_parameterization_i32, ptr %122, align 8
  %123 = getelementptr inbounds i8, ptr %121, i64 16
  store ptr @_parameterization_i32, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %121)
  %125 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %126 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %126, align 8
  %127 = getelementptr inbounds i8, ptr %126, i64 8
  store ptr @i32_typ, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %126, i64 16
  store ptr @i32_typ, ptr %128, align 8
  %129 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %120, ptr noundef nonnull align 8 dereferenceable(24) %126)
  call void %129({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull %121, { ptr } %117, i32 12, i32 13) #34
  %130 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %131 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %132 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %120, ptr noundef nonnull align 8 %4)
  %133 = call { ptr } %132({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull align 8 %4) #34
  %.fca.0.extract15 = extractvalue { ptr } %133, 0
  %puts100 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract15) #34
  %134 = load ptr, ptr %5, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = load ptr, ptr %6, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %136, 1
  %138 = load ptr, ptr %7, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %138, 2
  %140 = load i32, ptr %8, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 %140, 3
  %142 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %143 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %134)
  %144 = sext i32 %140 to i64
  %145 = getelementptr ptr, ptr %134, i64 %144
  %146 = getelementptr i8, ptr %145, i64 56
  %147 = load ptr, ptr %146, align 8
  %148 = call ptr @behavior_wrapper(ptr %147, { ptr, ptr, ptr, i32 } %141, ptr noundef nonnull align 8 %4)
  call void %148({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr nonnull align 8 %4) #34
  %149 = call ptr @bump_malloc(i64 noundef 10)
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %149, align 16
  %150 = alloca [1 x ptr], align 8
  store ptr @String, ptr %150, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_String, ptr noundef nonnull align 8 dereferenceable(8) %150)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  %154 = insertvalue { ptr } undef, ptr %149, 0
  %155 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %153, 1
  %156 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr undef, 2
  %157 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 10, 3
  %158 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %158, align 8
  %159 = getelementptr inbounds i8, ptr %158, i64 8
  store ptr @_parameterization_i32, ptr %159, align 8
  %160 = getelementptr inbounds i8, ptr %158, i64 16
  store ptr @_parameterization_i32, ptr %160, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %158)
  %162 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %163 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %163, align 8
  %164 = getelementptr inbounds i8, ptr %163, i64 8
  store ptr @i32_typ, ptr %164, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 16
  store ptr @i32_typ, ptr %165, align 8
  %166 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %157, ptr noundef nonnull align 8 dereferenceable(24) %163)
  call void %166({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr nonnull %158, { ptr } %154, i32 9, i32 10) #34
  %167 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %168 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String)
  %169 = call ptr @behavior_wrapper(ptr noundef nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %157, ptr noundef nonnull align 8 %4)
  %170 = call { ptr } %169({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr nonnull %4) #34
  %.fca.0.extract = extractvalue { ptr } %170, 0
  %puts101 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract) #34
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract4, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract8, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(184) @Exception)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #26
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract1, ptr %19, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(712) @String)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 80
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr noundef nonnull align 8 %4)
  %35 = call { ptr } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #34
  %.fca.0.extract = extractvalue { ptr } %35, 0
  %puts = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %.fca.0.extract) #34
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_message(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_file_name(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Exception_getter_line_number(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %0) #6 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_line_number(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %0, i32 %1) #7 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_capacity(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 20
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_capacity(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 20
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_length(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_length(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @Array_getter_buffer(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_buffer(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_CuckooMap(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 64, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @CuckooMap_field_CuckooMap_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @CuckooMap_field_CuckooMap_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @CuckooMap_field_CuckooMap_6(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @CuckooMap_B__Self_max_displacements_(ptr nocapture nofree %0) #23 {
  %2 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %0) #24
  ret ptr @CuckooMap__Self_max_displacements_
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @CuckooMap_B_hash1_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 408
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_hash2_from_primary_primary_hashi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_index1_primary_hashi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_index2_primary_hashi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @CuckooMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 noundef 4015701072841558310, i64 noundef ptrtoint (ptr @Entry to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 440
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_resize_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @CuckooMap_B_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = getelementptr inbounds i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr i8, ptr %26, i64 464
  %28 = load ptr, ptr %27, align 8
  ret ptr %28
}

define ptr @CuckooMap_B_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 472
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @CuckooMap_B_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 480
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @CuckooMap_B_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = getelementptr inbounds i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr i8, ptr %26, i64 488
  %28 = load ptr, ptr %27, align 8
  ret ptr %28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_size_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 496
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @CuckooMap_B_get_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 504
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @CuckooMap_B__set_index_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = getelementptr inbounds i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr i8, ptr %26, i64 512
  %28 = load ptr, ptr %27, align 8
  ret ptr %28
}

define ptr @CuckooMap_B_remove_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 520
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_clear_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 528
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @CuckooMap_B__index_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 536
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 544
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 552
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Pair, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Pair to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 560
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 568
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 576
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 584
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMap_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 592
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @CuckooMap_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 600
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @CuckooMap_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 608
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @CuckooMap_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 616
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @CuckooMap_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 624
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef i32 @CuckooMap__Self_max_displacements_(ptr nocapture nofree readnone %0) #1 {
  ret i32 100
}

define void @CuckooMap_init_hasherFunctionK_to_i32_eqFunctionK._K_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, { ptr } %4) #3 {
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 56
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %10, { ptr } %3) #25
  %20 = load ptr, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %21)
  %23 = load i32, ptr %9, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 64
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, { ptr } %4) #25
  %30 = load ptr, ptr %7, align 8
  %31 = load ptr, ptr %6, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %31)
  %33 = load i32, ptr %9, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 40
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %30, i32 8) #25
  %40 = call ptr @bump_malloc(i64 noundef 256)
  %41 = load ptr, ptr %7, align 8
  %42 = load ptr, ptr %6, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %42)
  %44 = load i32, ptr %9, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr ptr, ptr %42, i64 %45
  %47 = getelementptr i8, ptr %46, i64 24
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr } undef, ptr %40, 0
  call void %50(ptr %41, { ptr } %51) #25
  %52 = call ptr @bump_malloc(i64 noundef 256)
  %53 = load ptr, ptr %7, align 8
  %54 = load ptr, ptr %6, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %54)
  %56 = load i32, ptr %9, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 32
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr i8, ptr %60, i64 8
  %62 = load ptr, ptr %61, align 8
  %63 = insertvalue { ptr } undef, ptr %52, 0
  call void %62(ptr %53, { ptr } %63) #25
  %64 = load ptr, ptr %7, align 8
  %65 = load ptr, ptr %6, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %65)
  %67 = load i32, ptr %9, align 8
  %68 = sext i32 %67 to i64
  %69 = getelementptr ptr, ptr %65, i64 %68
  %70 = getelementptr i8, ptr %69, i64 48
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr i8, ptr %71, i64 8
  %73 = load ptr, ptr %72, align 8
  call void %73(ptr %64, i32 0) #25
  ret void
}

define i32 @CuckooMap_hash1_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #3 {
  %.fca.0.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract6, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract7, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr } %17(ptr %9) #26
  %.fca.0.extract = extractvalue { ptr } %18, 0
  %19 = call i32 %.fca.0.extract({ ptr, i160 } %3)
  ret i32 %19
}

define i32 @CuckooMap_hash2_from_primary_primary_hashi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %9 = call i32 @i32_hasher(i32 %3)
  ret i32 %9
}

define i32 @CuckooMap_index1_primary_hashi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 40
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #26
  %19 = add i32 %18, -1
  %20 = and i32 %19, %3
  ret i32 %20
}

define i32 @CuckooMap_index2_primary_hashi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %9 = load ptr, ptr %5, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = load ptr, ptr %6, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %11, 1
  %13 = load ptr, ptr %7, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %13, 2
  %15 = load i32, ptr %8, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %15, 3
  %17 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %17)
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %9)
  %20 = sext i32 %15 to i64
  %21 = getelementptr ptr, ptr %9, i64 %20
  %22 = getelementptr i8, ptr %21, i64 96
  %23 = load ptr, ptr %22, align 8
  %24 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %16, ptr noundef nonnull align 8 dereferenceable(8) %24)
  %26 = call i32 %25({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %17, i32 %3) #34
  %27 = load ptr, ptr %6, align 8
  %28 = load ptr, ptr %5, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %28)
  %30 = load i32, ptr %8, align 8
  %31 = sext i32 %30 to i64
  %32 = getelementptr ptr, ptr %28, i64 %31
  %33 = getelementptr i8, ptr %32, i64 40
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call i32 %35(ptr %27) #26
  %37 = add i32 %36, -1
  %38 = and i32 %37, %26
  ret i32 %38
}

define { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #3 {
  %5 = alloca {}, align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr %.fca.1.extract9, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr %.fca.2.extract10, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %15, i64 24
  store i32 %.fca.3.extract11, ptr %18, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %15, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %22, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %19, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %19, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %20, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %21, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %22, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %23, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %31 = load ptr, ptr %25, align 8
  %32 = load ptr, ptr %27, align 8
  %33 = load i32, ptr %29, align 8
  %34 = getelementptr inbounds i8, ptr %6, i64 8
  br label %.outer

.outer:                                           ; preds = %.cont, %4
  %.sroa.17.0.ph = phi i32 [ %152, %.cont ], [ %33, %4 ]
  %.sroa.12.0.ph = phi ptr [ %151, %.cont ], [ %32, %4 ]
  %.sroa.6.0.ph = phi ptr [ %150, %.cont ], [ %31, %4 ]
  %.sroa.0.0.ph.in = phi ptr [ %145, %.cont ], [ %23, %4 ]
  %.070.ph = phi i1 [ %not..070, %.cont ], [ true, %4 ]
  %.0.ph = phi i32 [ %70, %.cont ], [ 0, %4 ]
  %.sroa.0.0.ph = load ptr, ptr %.sroa.0.0.ph.in, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.sroa.0.0.ph, 0
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %.sroa.6.0.ph, 1
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %.sroa.12.0.ph, 2
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %.sroa.17.0.ph, 3
  %39 = sext i32 %.sroa.17.0.ph to i64
  %40 = getelementptr ptr, ptr %.sroa.0.0.ph, i64 %39
  %41 = getelementptr i8, ptr %40, i64 64
  %42 = ptrtoint ptr %.sroa.6.0.ph to i64
  %43 = ptrtoint ptr %.sroa.12.0.ph to i64
  %44 = ptrtoint ptr %.sroa.6.0.ph to i64
  %45 = ptrtoint ptr %.sroa.12.0.ph to i64
  br label %46

46:                                               ; preds = %.outer, %.cont46
  %.0 = phi i32 [ %70, %.cont46 ], [ %.0.ph, %.outer ]
  %47 = load ptr, ptr %16, align 8
  %48 = load ptr, ptr %15, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %48)
  %50 = load i32, ptr %18, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = load ptr, ptr %16, align 8
  %56 = load ptr, ptr %15, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %56)
  %58 = load i32, ptr %18, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = getelementptr i8, ptr %60, i64 8
  %62 = load ptr, ptr %61, align 8
  %63 = call ptr @typegetter_wrapper(ptr %62, ptr %55)
  store ptr %54, ptr %6, align 8
  store ptr %63, ptr %34, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %6)
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %66 = call ptr @class_behavior_wrapper(ptr noundef nonnull @CuckooMap_B__Self_max_displacements_, ptr noundef nonnull align 8 %5)
  %67 = call i32 %66(ptr nonnull %6) #34
  %68 = icmp slt i32 %.0, %67
  br i1 %68, label %69, label %168

69:                                               ; preds = %46
  %70 = add nuw nsw i32 %.0, 1
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %.sroa.0.0.ph)
  %73 = load ptr, ptr %41, align 8
  %74 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %38, ptr noundef nonnull align 8 %5)
  %75 = call i32 %74({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr nonnull %5) #34
  %76 = load ptr, ptr %15, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %16, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %17, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %18, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = sext i32 %82 to i64
  %85 = getelementptr ptr, ptr %76, i64 %84
  br i1 %.070.ph, label %86, label %115

86:                                               ; preds = %69
  store ptr @_parameterization_i32, ptr %7, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %76)
  %89 = getelementptr i8, ptr %85, i64 104
  %90 = load ptr, ptr %89, align 8
  store ptr @i32_typ, ptr %8, align 8
  %91 = call ptr @behavior_wrapper(ptr %90, { ptr, ptr, ptr, i32 } %83, ptr noundef nonnull align 8 dereferenceable(8) %8)
  %92 = call i32 %91({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr nonnull %7, i32 %75) #34
  %93 = load ptr, ptr %16, align 8
  %94 = load ptr, ptr %15, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %94)
  %96 = load i32, ptr %18, align 8
  %97 = sext i32 %96 to i64
  %98 = getelementptr ptr, ptr %94, i64 %97
  %99 = getelementptr i8, ptr %98, i64 24
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %100, align 8
  %102 = call { ptr } %101(ptr %93) #26
  %.fca.0.extract60 = extractvalue { ptr } %102, 0
  %103 = sext i32 %92 to i64
  %104 = shl nsw i64 %103, 5
  %105 = getelementptr i8, ptr %.fca.0.extract60, i64 %104
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr i8, ptr %105, i64 8
  %108 = load i160, ptr %107, align 4
  %109 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %94)
  %110 = call { ptr } %101(ptr %93) #26
  %.fca.0.extract58 = extractvalue { ptr } %110, 0
  %111 = getelementptr i8, ptr %.fca.0.extract58, i64 %104
  store ptr %.sroa.0.0.ph, ptr %111, align 8
  %112 = getelementptr i8, ptr %111, i64 8
  store i64 %44, ptr %112, align 4
  %.sroa_idx96 = getelementptr i8, ptr %111, i64 16
  store i64 %45, ptr %.sroa_idx96, align 4
  %.sroa_idx97 = getelementptr i8, ptr %111, i64 24
  store i32 %.sroa.17.0.ph, ptr %.sroa_idx97, align 4
  %113 = icmp ne ptr %106, @nil_typ
  %114 = icmp ne ptr %106, null
  %.not92 = and i1 %113, %114
  br i1 %.not92, label %.cont46, label %153

115:                                              ; preds = %69
  store ptr @_parameterization_i32, ptr %11, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %11)
  %117 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %76)
  %118 = getelementptr i8, ptr %85, i64 112
  %119 = load ptr, ptr %118, align 8
  store ptr @i32_typ, ptr %12, align 8
  %120 = call ptr @behavior_wrapper(ptr %119, { ptr, ptr, ptr, i32 } %83, ptr noundef nonnull align 8 dereferenceable(8) %12)
  %121 = call i32 %120({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr nonnull %11, i32 %75) #34
  %122 = load ptr, ptr %16, align 8
  %123 = load ptr, ptr %15, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %123)
  %125 = load i32, ptr %18, align 8
  %126 = sext i32 %125 to i64
  %127 = getelementptr ptr, ptr %123, i64 %126
  %128 = getelementptr i8, ptr %127, i64 32
  %129 = load ptr, ptr %128, align 8
  %130 = load ptr, ptr %129, align 8
  %131 = call { ptr } %130(ptr %122) #26
  %.fca.0.extract53 = extractvalue { ptr } %131, 0
  %132 = sext i32 %121 to i64
  %133 = shl nsw i64 %132, 5
  %134 = getelementptr i8, ptr %.fca.0.extract53, i64 %133
  %135 = load ptr, ptr %134, align 8
  %136 = getelementptr i8, ptr %134, i64 8
  %137 = load i160, ptr %136, align 4
  %138 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %123)
  %139 = call { ptr } %130(ptr %122) #26
  %.fca.0.extract51 = extractvalue { ptr } %139, 0
  %140 = getelementptr i8, ptr %.fca.0.extract51, i64 %133
  store ptr %.sroa.0.0.ph, ptr %140, align 8
  %141 = getelementptr i8, ptr %140, i64 8
  store i64 %42, ptr %141, align 4
  %.sroa_idx100 = getelementptr i8, ptr %140, i64 16
  store i64 %43, ptr %.sroa_idx100, align 4
  %.sroa_idx101 = getelementptr i8, ptr %140, i64 24
  store i32 %.sroa.17.0.ph, ptr %.sroa_idx101, align 4
  %142 = icmp ne ptr %135, @nil_typ
  %143 = icmp ne ptr %135, null
  %.not90 = and i1 %142, %143
  br i1 %.not90, label %.cont46, label %153

.cont46:                                          ; preds = %86, %115
  %.sroa.speculated = phi i160 [ %108, %86 ], [ %137, %115 ]
  %.sroa.speculated134 = phi ptr [ %106, %86 ], [ %135, %115 ]
  %.not = icmp eq ptr %.sroa.speculated134, null
  br i1 %.not, label %46, label %.cont

.cont:                                            ; preds = %.cont46
  %144 = select i1 %.070.ph, ptr %9, ptr %13
  %145 = select i1 %.070.ph, ptr %10, ptr %14
  store ptr %.sroa.speculated134, ptr %144, align 8
  %.sroa.sel31.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.070.ph, ptr %9, ptr %13
  %.sroa.sel31.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel31.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  store i160 %.sroa.speculated, ptr %.sroa.sel31.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %144, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %146 = load ptr, ptr %144, align 8
  store ptr %146, ptr %145, align 8
  %.sroa.sel19.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.070.ph, ptr %10, ptr %14
  %.sroa.sel19.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel19.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 8
  %147 = load ptr, ptr %.sroa.sel31.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store ptr %147, ptr %.sroa.sel19.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %.sroa.sel40.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.070.ph, ptr %9, ptr %13
  %.sroa.sel40.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel40.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 16
  %.sroa.sel22.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.070.ph, ptr %10, ptr %14
  %.sroa.sel22.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel22.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 16
  %148 = load ptr, ptr %.sroa.sel40.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store ptr %148, ptr %.sroa.sel22.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %.sroa.sel43.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.070.ph, ptr %9, ptr %13
  %.sroa.sel43.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel43.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  %.sroa.sel25.v.sroa.sel.v.sroa.sel.v.sroa.sel.v = select i1 %.070.ph, ptr %10, ptr %14
  %.sroa.sel25.v.sroa.sel.v.sroa.sel.v.sroa.sel = getelementptr inbounds i8, ptr %.sroa.sel25.v.sroa.sel.v.sroa.sel.v.sroa.sel.v, i64 24
  %149 = load i32, ptr %.sroa.sel43.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  store i32 %149, ptr %.sroa.sel25.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %145, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %150 = load ptr, ptr %.sroa.sel19.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %151 = load ptr, ptr %.sroa.sel22.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %152 = load i32, ptr %.sroa.sel25.v.sroa.sel.v.sroa.sel.v.sroa.sel, align 8
  %not..070 = xor i1 %.070.ph, true
  br label %.outer

153:                                              ; preds = %86, %115
  %154 = load ptr, ptr %16, align 8
  %155 = load ptr, ptr %15, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %155)
  %157 = load i32, ptr %18, align 8
  %158 = sext i32 %157 to i64
  %159 = getelementptr ptr, ptr %155, i64 %158
  %160 = getelementptr i8, ptr %159, i64 48
  %161 = load ptr, ptr %160, align 8
  %162 = load ptr, ptr %161, align 8
  %163 = call i32 %162(ptr %154) #26
  %164 = add i32 %163, 1
  %165 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %155)
  %166 = getelementptr i8, ptr %161, i64 8
  %167 = load ptr, ptr %166, align 8
  call void %167(ptr %154, i32 %164) #25
  br label %171

168:                                              ; preds = %46
  %169 = ptrtoint ptr %.sroa.6.0.ph to i64
  %170 = ptrtoint ptr %.sroa.12.0.ph to i64
  %.sroa.17.8.insert.ext = zext i32 %.sroa.17.0.ph to i160
  %.sroa.17.8.insert.shift = shl nuw i160 %.sroa.17.8.insert.ext, 128
  %.sroa.12.8.insert.ext = zext i64 %170 to i160
  %.sroa.12.8.insert.shift = shl nuw nsw i160 %.sroa.12.8.insert.ext, 64
  %.sroa.12.8.insert.insert = or disjoint i160 %.sroa.12.8.insert.shift, %.sroa.17.8.insert.shift
  %.sroa.6.8.insert.ext = zext i64 %169 to i160
  %.sroa.6.8.insert.insert = or disjoint i160 %.sroa.12.8.insert.insert, %.sroa.6.8.insert.ext
  br label %171

171:                                              ; preds = %168, %153
  %.reg2mem141.sroa.3.0 = phi i160 [ undef, %153 ], [ %.sroa.6.8.insert.insert, %168 ]
  %.reg2mem141.sroa.0.0 = phi ptr [ @nil_typ, %153 ], [ %.sroa.0.0.ph, %168 ]
  %.reload142.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem141.sroa.0.0, 0
  %.reload142.fca.1.insert = insertvalue { ptr, i160 } %.reload142.fca.0.insert, i160 %.reg2mem141.sroa.3.0, 1
  ret { ptr, i160 } %.reload142.fca.1.insert
}

define void @CuckooMap_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, i32 %4) #3 {
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract = extractvalue { ptr } %3, 0
  %14 = icmp sgt i32 %4, 0
  br i1 %14, label %.lr.ph, label %._crit_edge2._crit_edge

.lr.ph:                                           ; preds = %5
  %15 = getelementptr inbounds i8, ptr %6, i64 8
  %16 = getelementptr inbounds i8, ptr %7, i64 8
  %17 = getelementptr inbounds i8, ptr %6, i64 16
  %18 = getelementptr inbounds i8, ptr %7, i64 16
  %19 = getelementptr inbounds i8, ptr %6, i64 24
  %20 = getelementptr inbounds i8, ptr %7, i64 24
  br label %21

21:                                               ; preds = %.lr.ph, %._crit_edge
  %.018 = phi i32 [ 0, %.lr.ph ], [ %76, %._crit_edge ]
  %22 = zext nneg i32 %.018 to i64
  %23 = shl nuw nsw i64 %22, 5
  %24 = getelementptr i8, ptr %.fca.0.extract, i64 %23
  %25 = load ptr, ptr %24, align 8
  %26 = icmp ne ptr %25, @nil_typ
  %27 = icmp ne ptr %25, null
  %.not16 = and i1 %26, %27
  br i1 %.not16, label %28, label %._crit_edge

28:                                               ; preds = %21
  %29 = getelementptr i8, ptr %24, i64 8
  %30 = load i160, ptr %29, align 4
  store ptr %25, ptr %6, align 8
  store i160 %30, ptr %15, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %31 = load ptr, ptr %6, align 8
  store ptr %31, ptr %7, align 8
  %32 = load ptr, ptr %15, align 8
  store ptr %32, ptr %16, align 8
  %33 = load ptr, ptr %17, align 8
  store ptr %33, ptr %18, align 8
  %34 = load i32, ptr %19, align 8
  store i32 %34, ptr %20, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %35 = load ptr, ptr %7, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %16, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %18, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %20, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = load ptr, ptr %10, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = load ptr, ptr %11, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 1
  %47 = load ptr, ptr %12, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 2
  %49 = load i32, ptr %13, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %49, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %43)
  %52 = sext i32 %49 to i64
  %53 = getelementptr ptr, ptr %43, i64 %52
  %54 = load ptr, ptr %53, align 8
  %55 = call ptr @typegetter_wrapper(ptr %54, ptr %45)
  %56 = load ptr, ptr %11, align 8
  %57 = load ptr, ptr %10, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %57)
  %59 = load i32, ptr %13, align 8
  %60 = sext i32 %59 to i64
  %61 = getelementptr ptr, ptr %57, i64 %60
  %62 = getelementptr i8, ptr %61, i64 8
  %63 = load ptr, ptr %62, align 8
  %64 = call ptr @typegetter_wrapper(ptr %63, ptr %56)
  %65 = call ptr @bump_malloc(i64 noundef 32)
  %66 = getelementptr i8, ptr %65, i64 16
  store ptr %64, ptr %66, align 8
  %67 = getelementptr i8, ptr %65, i64 8
  store ptr %55, ptr %67, align 8
  %68 = getelementptr i8, ptr %65, i64 24
  store ptr null, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %65)
  store ptr @Entry, ptr %65, align 8
  store ptr %65, ptr %8, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %8)
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %43)
  %72 = getelementptr i8, ptr %53, i64 120
  %73 = load ptr, ptr %72, align 8
  store ptr %35, ptr %9, align 8
  %74 = call ptr @behavior_wrapper(ptr %73, { ptr, ptr, ptr, i32 } %50, ptr noundef nonnull align 8 dereferenceable(8) %9)
  %75 = call { ptr, i160 } %74({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %8, { ptr, ptr, ptr, i32 } %42) #34
  br label %._crit_edge

._crit_edge:                                      ; preds = %28, %21
  %76 = add nuw nsw i32 %.018, 1
  %77 = icmp slt i32 %76, %4
  br i1 %77, label %21, label %._crit_edge2._crit_edge

._crit_edge2._crit_edge:                          ; preds = %._crit_edge, %5
  ret void
}

define void @CuckooMap_resize_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
._crit_edge:
  %3 = alloca [2 x ptr], align 8
  %4 = alloca { ptr, ptr }, align 8
  %5 = alloca [2 x ptr], align 8
  %6 = alloca { ptr, ptr }, align 8
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract14, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call { ptr } %19(ptr %11) #26
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %12)
  %22 = getelementptr i8, ptr %16, i64 32
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr } %24(ptr %11) #26
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %12)
  %27 = getelementptr i8, ptr %16, i64 40
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %11) #26
  %31 = shl i32 %30, 1
  %spec.select = call i32 @llvm.smax.i32(i32 %31, i32 16)
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %12)
  %33 = getelementptr i8, ptr %28, i64 8
  %34 = load ptr, ptr %33, align 8
  call void %34(ptr %11, i32 %spec.select) #25
  %35 = zext nneg i32 %spec.select to i64
  %36 = shl nuw nsw i64 %35, 5
  %37 = call ptr @bump_malloc(i64 %36)
  %38 = load ptr, ptr %8, align 8
  %39 = load ptr, ptr %7, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %39)
  %41 = load i32, ptr %10, align 8
  %42 = sext i32 %41 to i64
  %43 = getelementptr ptr, ptr %39, i64 %42
  %44 = getelementptr i8, ptr %43, i64 24
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = insertvalue { ptr } undef, ptr %37, 0
  call void %47(ptr %38, { ptr } %48) #25
  %49 = call ptr @bump_malloc(i64 %36)
  %50 = load ptr, ptr %8, align 8
  %51 = load ptr, ptr %7, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %51)
  %53 = load i32, ptr %10, align 8
  %54 = sext i32 %53 to i64
  %55 = getelementptr ptr, ptr %51, i64 %54
  %56 = getelementptr i8, ptr %55, i64 32
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = insertvalue { ptr } undef, ptr %49, 0
  call void %59(ptr %50, { ptr } %60) #25
  %61 = load ptr, ptr %8, align 8
  %62 = load ptr, ptr %7, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %62)
  %64 = load i32, ptr %10, align 8
  %65 = sext i32 %64 to i64
  %66 = getelementptr ptr, ptr %62, i64 %65
  %67 = getelementptr i8, ptr %66, i64 48
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr i8, ptr %68, i64 8
  %70 = load ptr, ptr %69, align 8
  call void %70(ptr %61, i32 0) #25
  %71 = load ptr, ptr %7, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = load ptr, ptr %8, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 1
  %75 = load ptr, ptr %9, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 2
  %77 = load i32, ptr %10, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %77, 3
  %79 = call ptr @bump_malloc(i64 noundef 16)
  %80 = getelementptr i8, ptr %79, i64 8
  store ptr null, ptr %80, align 8
  store ptr @buffer_typ, ptr %79, align 8
  store ptr %79, ptr %3, align 8
  %81 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr @_parameterization_i32, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %3)
  %83 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %71)
  %84 = sext i32 %77 to i64
  %85 = getelementptr ptr, ptr %71, i64 %84
  %86 = getelementptr i8, ptr %85, i64 128
  %87 = load ptr, ptr %86, align 8
  store ptr @buffer_typ, ptr %4, align 8
  %88 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr @i32_typ, ptr %88, align 8
  %89 = call ptr @behavior_wrapper(ptr %87, { ptr, ptr, ptr, i32 } %78, ptr noundef nonnull align 8 dereferenceable(16) %4)
  call void %89({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr nonnull %3, { ptr } %20, i32 %30) #34
  %90 = load ptr, ptr %7, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = load ptr, ptr %8, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 1
  %94 = load ptr, ptr %9, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 2
  %96 = load i32, ptr %10, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  %98 = call ptr @bump_malloc(i64 noundef 16)
  %99 = getelementptr i8, ptr %98, i64 8
  store ptr null, ptr %99, align 8
  store ptr @buffer_typ, ptr %98, align 8
  store ptr %98, ptr %5, align 8
  %100 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @_parameterization_i32, ptr %100, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %5)
  %102 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %90)
  %103 = sext i32 %96 to i64
  %104 = getelementptr ptr, ptr %90, i64 %103
  %105 = getelementptr i8, ptr %104, i64 128
  %106 = load ptr, ptr %105, align 8
  store ptr @buffer_typ, ptr %6, align 8
  %107 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @i32_typ, ptr %107, align 8
  %108 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %97, ptr noundef nonnull align 8 dereferenceable(16) %6)
  call void %108({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr nonnull %5, { ptr } %25, i32 %30) #34
  ret void
}

define noundef i1 @CuckooMap_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5, i32 %6, { ptr } %7) #3 {
  %9 = alloca [0 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [3 x ptr], align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract20 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract20, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr %.fca.1.extract21, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr %.fca.2.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %15, i64 24
  store i32 %.fca.3.extract, ptr %18, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %15, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract16 = extractvalue { ptr, i160 } %3, 0
  %.fca.0.extract11 = extractvalue { ptr, i160 } %4, 0
  %.fca.0.extract = extractvalue { ptr } %7, 0
  %19 = sext i32 %6 to i64
  %20 = shl nsw i64 %19, 5
  %21 = getelementptr i8, ptr %.fca.0.extract, i64 %20
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i8, ptr %21, i64 8
  %24 = icmp ne ptr %22, @nil_typ
  %25 = icmp ne ptr %22, null
  %.not64 = and i1 %24, %25
  br i1 %.not64, label %26, label %._crit_edge.thread

26:                                               ; preds = %8
  %27 = load i160, ptr %23, align 4
  store ptr %22, ptr %10, align 8
  %28 = getelementptr inbounds i8, ptr %10, i64 8
  store i160 %27, ptr %28, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %29 = load ptr, ptr %10, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = load ptr, ptr %28, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 1
  %33 = getelementptr inbounds i8, ptr %10, i64 16
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %34, 2
  %36 = getelementptr inbounds i8, ptr %10, i64 24
  %37 = load i32, ptr %36, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %37, 3
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %9)
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %29)
  %41 = sext i32 %37 to i64
  %42 = getelementptr ptr, ptr %29, i64 %41
  %43 = getelementptr i8, ptr %42, i64 64
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr @behavior_wrapper(ptr %44, { ptr, ptr, ptr, i32 } %38, ptr noundef nonnull align 8 %9)
  %46 = call i32 %45({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr nonnull align 8 %9) #34
  %47 = icmp eq i32 %46, %5
  br i1 %47, label %._crit_edge, label %._crit_edge.thread

._crit_edge:                                      ; preds = %26
  %48 = load ptr, ptr %10, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = load ptr, ptr %28, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 1
  %52 = load ptr, ptr %33, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 2
  %54 = load i32, ptr %36, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %54, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %9)
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %48)
  %58 = sext i32 %54 to i64
  %59 = getelementptr ptr, ptr %48, i64 %58
  %60 = getelementptr i8, ptr %59, i64 48
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @behavior_wrapper(ptr %61, { ptr, ptr, ptr, i32 } %55, ptr noundef nonnull align 8 %9)
  %63 = call { ptr, i160 } %62({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %9) #34
  %64 = load ptr, ptr %16, align 8
  %65 = load ptr, ptr %15, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %65)
  %67 = load i32, ptr %18, align 8
  %68 = sext i32 %67 to i64
  %69 = getelementptr ptr, ptr %65, i64 %68
  %70 = getelementptr i8, ptr %69, i64 64
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr } %72(ptr %64) #26
  %.fca.0.extract47 = extractvalue { ptr } %73, 0
  %74 = call i1 %.fca.0.extract47({ ptr, i160 } %63, { ptr, i160 } %3)
  br i1 %74, label %75, label %._crit_edge.thread

75:                                               ; preds = %._crit_edge
  %76 = load ptr, ptr %16, align 8
  %77 = load ptr, ptr %15, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %77)
  %79 = load i32, ptr %18, align 8
  %80 = sext i32 %79 to i64
  %81 = getelementptr ptr, ptr %77, i64 %80
  %82 = load ptr, ptr %81, align 8
  %83 = call ptr @typegetter_wrapper(ptr %82, ptr %76)
  %84 = load ptr, ptr %16, align 8
  %85 = load ptr, ptr %15, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %85)
  %87 = load i32, ptr %18, align 8
  %88 = sext i32 %87 to i64
  %89 = getelementptr ptr, ptr %85, i64 %88
  %90 = getelementptr i8, ptr %89, i64 8
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr @typegetter_wrapper(ptr %91, ptr %84)
  store ptr @Entry, ptr %11, align 8
  %93 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %83, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %92, ptr %94, align 8
  %95 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_Entry, ptr noundef nonnull align 8 dereferenceable(24) %11)
  %96 = extractvalue { i64, i64 } %95, 0
  %97 = call ptr @bump_malloc(i64 %96)
  store ptr %83, ptr %97, align 8
  %98 = getelementptr i8, ptr %97, i64 8
  store ptr %92, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %97)
  %100 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %97, 1
  %101 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr undef, 2
  %102 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 10, 3
  %103 = load ptr, ptr %16, align 8
  %104 = load ptr, ptr %15, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %104)
  %106 = load i32, ptr %18, align 8
  %107 = sext i32 %106 to i64
  %108 = getelementptr ptr, ptr %104, i64 %107
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @typegetter_wrapper(ptr %109, ptr %103)
  %111 = load ptr, ptr %16, align 8
  %112 = load ptr, ptr %15, align 8
  %113 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %112)
  %114 = load i32, ptr %18, align 8
  %115 = sext i32 %114 to i64
  %116 = getelementptr ptr, ptr %112, i64 %115
  %117 = getelementptr i8, ptr %116, i64 8
  %118 = load ptr, ptr %117, align 8
  %119 = call ptr @typegetter_wrapper(ptr %118, ptr %111)
  store ptr %110, ptr %12, align 8
  %120 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %119, ptr %120, align 8
  %121 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr @_parameterization_i32, ptr %121, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %12)
  %123 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry)
  store ptr %.fca.0.extract16, ptr %13, align 8
  %124 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.0.extract11, ptr %124, align 8
  %125 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr @i32_typ, ptr %125, align 8
  %126 = call ptr @behavior_wrapper(ptr noundef nonnull @Entry_B_init_keyK_valueV_primary_hashi32, { ptr, ptr, ptr, i32 } %102, ptr noundef nonnull align 8 dereferenceable(24) %13)
  call void %126({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr nonnull %12, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) #34
  store ptr @Entry, ptr %14, align 8
  %127 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr %97, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %14, i64 16
  %129 = getelementptr inbounds i8, ptr %14, i64 24
  store i32 10, ptr %129, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %130 = load ptr, ptr %14, align 8
  %131 = load ptr, ptr %127, align 8
  %132 = load ptr, ptr %128, align 8
  %133 = load i32, ptr %129, align 8
  store ptr %130, ptr %21, align 8
  %134 = ptrtoint ptr %131 to i64
  %135 = ptrtoint ptr %132 to i64
  store i64 %134, ptr %23, align 4
  %.sroa_idx27 = getelementptr i8, ptr %21, i64 16
  store i64 %135, ptr %.sroa_idx27, align 4
  %.sroa_idx28 = getelementptr i8, ptr %21, i64 24
  store i32 %133, ptr %.sroa_idx28, align 4
  br label %._crit_edge.thread

._crit_edge.thread:                               ; preds = %26, %8, %75, %._crit_edge
  %.reg2mem45.0 = phi i1 [ false, %._crit_edge ], [ true, %75 ], [ false, %8 ], [ false, %26 ]
  ret i1 %.reg2mem45.0
}

define { ptr, i160 } @CuckooMap_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, i32 %4, i32 %5, { ptr } %6) #3 {
  %8 = alloca [0 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract13, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract14, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract = extractvalue { ptr } %6, 0
  %14 = sext i32 %5 to i64
  %15 = shl nsw i64 %14, 5
  %16 = getelementptr i8, ptr %.fca.0.extract, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = icmp ne ptr %17, @nil_typ
  %19 = icmp ne ptr %17, null
  %.not44 = and i1 %18, %19
  br i1 %.not44, label %20, label %.thread

20:                                               ; preds = %7
  %21 = getelementptr i8, ptr %16, i64 8
  %22 = load i160, ptr %21, align 4
  store ptr %17, ptr %9, align 8
  %23 = getelementptr inbounds i8, ptr %9, i64 8
  store i160 %22, ptr %23, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %24 = load ptr, ptr %9, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %24, 0
  %26 = load ptr, ptr %23, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %26, 1
  %28 = getelementptr inbounds i8, ptr %9, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr inbounds i8, ptr %9, i64 24
  %32 = load i32, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %24)
  %36 = sext i32 %32 to i64
  %37 = getelementptr ptr, ptr %24, i64 %36
  %38 = getelementptr i8, ptr %37, i64 64
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %33, ptr noundef nonnull align 8 %8)
  %41 = call i32 %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %8) #34
  %42 = icmp eq i32 %41, %4
  br i1 %42, label %._crit_edge, label %.thread

._crit_edge:                                      ; preds = %20
  %43 = load ptr, ptr %9, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = load ptr, ptr %23, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 1
  %47 = load ptr, ptr %28, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 2
  %49 = load i32, ptr %31, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %49, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %43)
  %53 = sext i32 %49 to i64
  %54 = getelementptr ptr, ptr %43, i64 %53
  %55 = getelementptr i8, ptr %54, i64 48
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr @behavior_wrapper(ptr %56, { ptr, ptr, ptr, i32 } %50, ptr noundef nonnull align 8 %8)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %8) #34
  %59 = load ptr, ptr %11, align 8
  %60 = load ptr, ptr %10, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %60)
  %62 = load i32, ptr %13, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 64
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr } %67(ptr %59) #26
  %.fca.0.extract27 = extractvalue { ptr } %68, 0
  %69 = call i1 %.fca.0.extract27({ ptr, i160 } %58, { ptr, i160 } %3)
  br i1 %69, label %70, label %.thread

70:                                               ; preds = %._crit_edge
  %71 = load ptr, ptr %9, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = load ptr, ptr %23, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 1
  %75 = load ptr, ptr %28, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 2
  %77 = load i32, ptr %31, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %77, 3
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %71)
  %81 = sext i32 %77 to i64
  %82 = getelementptr ptr, ptr %71, i64 %81
  %83 = getelementptr i8, ptr %82, i64 56
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @behavior_wrapper(ptr %84, { ptr, ptr, ptr, i32 } %78, ptr noundef nonnull align 8 %8)
  %86 = call { ptr, i160 } %85({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr nonnull %8) #34
  %.fca.0.extract21 = extractvalue { ptr, i160 } %86, 0
  %.fca.1.extract22 = extractvalue { ptr, i160 } %86, 1
  br label %.thread

.thread:                                          ; preds = %20, %7, %._crit_edge, %70
  %.reg2mem43.sroa.3.049 = phi i160 [ %.fca.1.extract22, %70 ], [ poison, %._crit_edge ], [ poison, %7 ], [ poison, %20 ]
  %87 = phi ptr [ %.fca.0.extract21, %70 ], [ @nil_typ, %._crit_edge ], [ @nil_typ, %7 ], [ @nil_typ, %20 ]
  %.reload40.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %87, 0
  %.reload40.fca.1.insert = insertvalue { ptr, i160 } %.reload40.fca.0.insert, i160 %.reg2mem43.sroa.3.049, 1
  ret { ptr, i160 } %.reload40.fca.1.insert
}

define { ptr, i160 } @CuckooMap_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, i32 %4, i32 %5, { ptr } %6) #3 {
  %8 = alloca [0 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract15, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract16, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract = extractvalue { ptr } %6, 0
  %14 = sext i32 %5 to i64
  %15 = shl nsw i64 %14, 5
  %16 = getelementptr i8, ptr %.fca.0.extract, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = icmp ne ptr %17, @nil_typ
  %19 = icmp ne ptr %17, null
  %.not51 = and i1 %18, %19
  br i1 %.not51, label %20, label %.thread

20:                                               ; preds = %7
  %21 = getelementptr i8, ptr %16, i64 8
  %22 = load i160, ptr %21, align 4
  store ptr %17, ptr %9, align 8
  %23 = getelementptr inbounds i8, ptr %9, i64 8
  store i160 %22, ptr %23, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %24 = load ptr, ptr %9, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %24, 0
  %26 = load ptr, ptr %23, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %26, 1
  %28 = getelementptr inbounds i8, ptr %9, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %29, 2
  %31 = getelementptr inbounds i8, ptr %9, i64 24
  %32 = load i32, ptr %31, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 %32, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %24)
  %36 = sext i32 %32 to i64
  %37 = getelementptr ptr, ptr %24, i64 %36
  %38 = getelementptr i8, ptr %37, i64 64
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %33, ptr noundef nonnull align 8 %8)
  %41 = call i32 %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %8) #34
  %42 = icmp eq i32 %41, %4
  br i1 %42, label %._crit_edge, label %.thread

._crit_edge:                                      ; preds = %20
  %43 = load ptr, ptr %9, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = load ptr, ptr %23, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 1
  %47 = load ptr, ptr %28, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 2
  %49 = load i32, ptr %31, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %49, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %43)
  %53 = sext i32 %49 to i64
  %54 = getelementptr ptr, ptr %43, i64 %53
  %55 = getelementptr i8, ptr %54, i64 48
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr @behavior_wrapper(ptr %56, { ptr, ptr, ptr, i32 } %50, ptr noundef nonnull align 8 %8)
  %58 = call { ptr, i160 } %57({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %8) #34
  %59 = load ptr, ptr %11, align 8
  %60 = load ptr, ptr %10, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %60)
  %62 = load i32, ptr %13, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 64
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr } %67(ptr %59) #26
  %.fca.0.extract34 = extractvalue { ptr } %68, 0
  %69 = call i1 %.fca.0.extract34({ ptr, i160 } %58, { ptr, i160 } %3)
  br i1 %69, label %70, label %.thread

70:                                               ; preds = %._crit_edge
  %71 = load ptr, ptr %9, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = load ptr, ptr %23, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 1
  %75 = load ptr, ptr %28, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 2
  %77 = load i32, ptr %31, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 %77, 3
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %71)
  %81 = sext i32 %77 to i64
  %82 = getelementptr ptr, ptr %71, i64 %81
  %83 = getelementptr i8, ptr %82, i64 56
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @behavior_wrapper(ptr %84, { ptr, ptr, ptr, i32 } %78, ptr noundef nonnull align 8 %8)
  %86 = call { ptr, i160 } %85({ ptr, ptr, ptr, i32 } %78, { ptr, ptr, ptr, i32 } %78, ptr nonnull %8) #34
  %.fca.0.extract28 = extractvalue { ptr, i160 } %86, 0
  %.fca.1.extract29 = extractvalue { ptr, i160 } %86, 1
  store ptr @nil_typ, ptr %16, align 8
  %87 = load ptr, ptr %11, align 8
  %88 = load ptr, ptr %10, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %88)
  %90 = load i32, ptr %13, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = getelementptr i8, ptr %92, i64 48
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %94, align 8
  %96 = call i32 %95(ptr %87) #26
  %97 = add i32 %96, -1
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %88)
  %99 = getelementptr i8, ptr %94, i64 8
  %100 = load ptr, ptr %99, align 8
  call void %100(ptr %87, i32 %97) #25
  br label %.thread

.thread:                                          ; preds = %20, %7, %._crit_edge, %70
  %.reg2mem47.sroa.3.056 = phi i160 [ %.fca.1.extract29, %70 ], [ poison, %._crit_edge ], [ poison, %7 ], [ poison, %20 ]
  %101 = phi ptr [ %.fca.0.extract28, %70 ], [ @nil_typ, %._crit_edge ], [ @nil_typ, %7 ], [ @nil_typ, %20 ]
  %.reload44.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %101, 0
  %.reload44.fca.1.insert = insertvalue { ptr, i160 } %.reload44.fca.0.insert, i160 %.reg2mem47.sroa.3.056, 1
  ret { ptr, i160 } %.reload44.fca.1.insert
}

define void @CuckooMap_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) #3 {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [5 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, ptr, ptr }, align 8
  %11 = alloca [3 x ptr], align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca { ptr }, align 8
  %.fca.0.extract34 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract34, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr %.fca.1.extract35, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr %.fca.2.extract, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %18, i64 24
  store i32 %.fca.3.extract, ptr %21, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %18, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract29 = extractvalue { ptr, i160 } %3, 0
  %.fca.0.extract20 = extractvalue { ptr, i160 } %4, 0
  %22 = load ptr, ptr %18, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = load ptr, ptr %19, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 1
  %26 = load ptr, ptr %20, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %26, 2
  %28 = load i32, ptr %21, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 %28, 3
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %22)
  %31 = sext i32 %28 to i64
  %32 = getelementptr ptr, ptr %22, i64 %31
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @typegetter_wrapper(ptr %33, ptr %24)
  %35 = alloca [1 x ptr], align 8
  store ptr %34, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %22)
  %38 = getelementptr i8, ptr %32, i64 88
  %39 = load ptr, ptr %38, align 8
  %40 = alloca { ptr }, align 8
  store ptr %.fca.0.extract29, ptr %40, align 8
  %41 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %29, ptr noundef nonnull align 8 dereferenceable(8) %40)
  %42 = call i32 %41({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr nonnull %35, { ptr, i160 } %3) #34
  %43 = load ptr, ptr %18, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = load ptr, ptr %19, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 1
  %47 = load ptr, ptr %20, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 2
  %49 = load i32, ptr %21, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %49, 3
  %51 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %51)
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %43)
  %54 = sext i32 %49 to i64
  %55 = getelementptr ptr, ptr %43, i64 %54
  %56 = getelementptr i8, ptr %55, i64 104
  %57 = load ptr, ptr %56, align 8
  %58 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %58, align 8
  %59 = call ptr @behavior_wrapper(ptr %57, { ptr, ptr, ptr, i32 } %50, ptr noundef nonnull align 8 dereferenceable(8) %58)
  %60 = call i32 %59({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %51, i32 %42) #34
  %61 = load ptr, ptr %19, align 8
  %62 = load ptr, ptr %18, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %62)
  %64 = load i32, ptr %21, align 8
  %65 = sext i32 %64 to i64
  %66 = getelementptr ptr, ptr %62, i64 %65
  %67 = getelementptr i8, ptr %66, i64 24
  %68 = load ptr, ptr %67, align 8
  %69 = load ptr, ptr %68, align 8
  %70 = call { ptr } %69(ptr %61) #26
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %61, 1
  %73 = load ptr, ptr %20, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 2
  %75 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %64, 3
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %62)
  %77 = load ptr, ptr %66, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %61)
  %79 = load ptr, ptr %19, align 8
  %80 = load ptr, ptr %18, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %80)
  %82 = load i32, ptr %21, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr ptr, ptr %80, i64 %83
  %85 = getelementptr i8, ptr %84, i64 8
  %86 = load ptr, ptr %85, align 8
  %87 = call ptr @typegetter_wrapper(ptr %86, ptr %79)
  %88 = call ptr @bump_malloc(i64 noundef 16)
  %89 = getelementptr i8, ptr %88, i64 8
  store ptr null, ptr %89, align 8
  store ptr @buffer_typ, ptr %88, align 8
  %90 = alloca [5 x ptr], align 8
  store ptr %78, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %87, ptr %91, align 8
  %92 = getelementptr inbounds i8, ptr %90, i64 16
  store ptr @_parameterization_i32, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %90, i64 24
  store ptr @_parameterization_i32, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %90, i64 32
  store ptr %88, ptr %94, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 noundef 25, ptr nocapture nofree noundef nonnull align 8 dereferenceable(40) %90)
  %96 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %62)
  %97 = getelementptr i8, ptr %66, i64 144
  %98 = load ptr, ptr %97, align 8
  %99 = alloca { ptr, ptr, ptr, ptr, ptr }, align 8
  store ptr %.fca.0.extract29, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %99, i64 8
  store ptr %.fca.0.extract20, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %99, i64 16
  store ptr @i32_typ, ptr %101, align 8
  %102 = getelementptr inbounds i8, ptr %99, i64 24
  store ptr @i32_typ, ptr %102, align 8
  %103 = getelementptr inbounds i8, ptr %99, i64 32
  store ptr @buffer_typ, ptr %103, align 8
  %104 = call ptr @behavior_wrapper(ptr %98, { ptr, ptr, ptr, i32 } %75, ptr noundef nonnull align 8 dereferenceable(40) %99)
  %105 = call i1 %104({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr nonnull %90, { ptr, i160 } %3, { ptr, i160 } %4, i32 %42, i32 %60, { ptr } %70) #34
  br i1 %105, label %.thread, label %106

106:                                              ; preds = %5
  %107 = load ptr, ptr %18, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = load ptr, ptr %19, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 1
  %111 = load ptr, ptr %20, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %111, 2
  %113 = load i32, ptr %21, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %113, 3
  store ptr @_parameterization_i32, ptr %7, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %107)
  %117 = sext i32 %113 to i64
  %118 = getelementptr ptr, ptr %107, i64 %117
  %119 = getelementptr i8, ptr %118, i64 112
  %120 = load ptr, ptr %119, align 8
  store ptr @i32_typ, ptr %8, align 8
  %121 = call ptr @behavior_wrapper(ptr %120, { ptr, ptr, ptr, i32 } %114, ptr noundef nonnull align 8 dereferenceable(8) %8)
  %122 = call i32 %121({ ptr, ptr, ptr, i32 } %114, { ptr, ptr, ptr, i32 } %114, ptr nonnull %7, i32 %42) #34
  %123 = load ptr, ptr %19, align 8
  %124 = load ptr, ptr %18, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %124)
  %126 = load i32, ptr %21, align 8
  %127 = sext i32 %126 to i64
  %128 = getelementptr ptr, ptr %124, i64 %127
  %129 = getelementptr i8, ptr %128, i64 32
  %130 = load ptr, ptr %129, align 8
  %131 = load ptr, ptr %130, align 8
  %132 = call { ptr } %131(ptr %123) #26
  %133 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %124, 0
  %134 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %123, 1
  %135 = load ptr, ptr %20, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %135, 2
  %137 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %126, 3
  %138 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %124)
  %139 = load ptr, ptr %128, align 8
  %140 = call ptr @typegetter_wrapper(ptr %139, ptr %123)
  %141 = load ptr, ptr %19, align 8
  %142 = load ptr, ptr %18, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %142)
  %144 = load i32, ptr %21, align 8
  %145 = sext i32 %144 to i64
  %146 = getelementptr ptr, ptr %142, i64 %145
  %147 = getelementptr i8, ptr %146, i64 8
  %148 = load ptr, ptr %147, align 8
  %149 = call ptr @typegetter_wrapper(ptr %148, ptr %141)
  %150 = call ptr @bump_malloc(i64 noundef 16)
  %151 = getelementptr i8, ptr %150, i64 8
  store ptr null, ptr %151, align 8
  store ptr @buffer_typ, ptr %150, align 8
  store ptr %140, ptr %9, align 8
  %152 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %149, ptr %152, align 8
  %153 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @_parameterization_i32, ptr %153, align 8
  %154 = getelementptr inbounds i8, ptr %9, i64 24
  store ptr @_parameterization_i32, ptr %154, align 8
  %155 = getelementptr inbounds i8, ptr %9, i64 32
  store ptr %150, ptr %155, align 8
  %156 = call ptr @llvm.invariant.start.p0(i64 noundef 25, ptr nocapture nofree noundef nonnull align 8 dereferenceable(40) %9)
  %157 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %124)
  %158 = getelementptr i8, ptr %128, i64 144
  %159 = load ptr, ptr %158, align 8
  store ptr %.fca.0.extract29, ptr %10, align 8
  %160 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.0.extract20, ptr %160, align 8
  %161 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr @i32_typ, ptr %161, align 8
  %162 = getelementptr inbounds i8, ptr %10, i64 24
  store ptr @i32_typ, ptr %162, align 8
  %163 = getelementptr inbounds i8, ptr %10, i64 32
  store ptr @buffer_typ, ptr %163, align 8
  %164 = call ptr @behavior_wrapper(ptr %159, { ptr, ptr, ptr, i32 } %137, ptr noundef nonnull align 8 dereferenceable(40) %10)
  %165 = call i1 %164({ ptr, ptr, ptr, i32 } %137, { ptr, ptr, ptr, i32 } %137, ptr nonnull %9, { ptr, i160 } %3, { ptr, i160 } %4, i32 %42, i32 %122, { ptr } %132) #34
  br i1 %165, label %.thread, label %166

166:                                              ; preds = %106
  %167 = load ptr, ptr %19, align 8
  %168 = load ptr, ptr %18, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %168)
  %170 = load i32, ptr %21, align 8
  %171 = sext i32 %170 to i64
  %172 = getelementptr ptr, ptr %168, i64 %171
  %173 = getelementptr i8, ptr %172, i64 48
  %174 = load ptr, ptr %173, align 8
  %175 = load ptr, ptr %174, align 8
  %176 = call i32 %175(ptr %167) #26
  %177 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %168)
  %178 = getelementptr i8, ptr %172, i64 40
  %179 = load ptr, ptr %178, align 8
  %180 = load ptr, ptr %179, align 8
  %181 = call i32 %180(ptr %167) #26
  %.not = icmp slt i32 %176, %181
  br i1 %.not, label %._crit_edge, label %182

182:                                              ; preds = %166
  %183 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %168, 0
  %184 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %167, 1
  %185 = load ptr, ptr %20, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %185, 2
  %187 = insertvalue { ptr, ptr, ptr, i32 } %186, i32 %170, 3
  %188 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %189 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull %168)
  %190 = getelementptr i8, ptr %172, i64 136
  %191 = load ptr, ptr %190, align 8
  %192 = call ptr @behavior_wrapper(ptr %191, { ptr, ptr, ptr, i32 } %187, ptr noundef nonnull align 8 %6)
  call void %192({ ptr, ptr, ptr, i32 } %187, { ptr, ptr, ptr, i32 } %187, ptr nonnull %6) #34
  %.pre = load ptr, ptr %19, align 8
  %.pre89 = load ptr, ptr %18, align 8
  %.pre90 = load i32, ptr %21, align 8
  %.pre91 = sext i32 %.pre90 to i64
  br label %._crit_edge

._crit_edge:                                      ; preds = %166, %182
  %.pre-phi = phi i64 [ %171, %166 ], [ %.pre91, %182 ]
  %193 = phi ptr [ %168, %166 ], [ %.pre89, %182 ]
  %194 = phi ptr [ %167, %166 ], [ %.pre, %182 ]
  %195 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %193)
  %196 = getelementptr ptr, ptr %193, i64 %.pre-phi
  %197 = load ptr, ptr %196, align 8
  %198 = call ptr @typegetter_wrapper(ptr %197, ptr %194)
  %199 = load ptr, ptr %19, align 8
  %200 = load ptr, ptr %18, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %200)
  %202 = load i32, ptr %21, align 8
  %203 = sext i32 %202 to i64
  %204 = getelementptr ptr, ptr %200, i64 %203
  %205 = getelementptr i8, ptr %204, i64 8
  %206 = load ptr, ptr %205, align 8
  %207 = call ptr @typegetter_wrapper(ptr %206, ptr %199)
  store ptr @Entry, ptr %11, align 8
  %208 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %198, ptr %208, align 8
  %209 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %207, ptr %209, align 8
  %210 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_Entry, ptr noundef nonnull align 8 dereferenceable(24) %11)
  %211 = extractvalue { i64, i64 } %210, 0
  %212 = call ptr @bump_malloc(i64 %211)
  store ptr %198, ptr %212, align 8
  %213 = getelementptr i8, ptr %212, i64 8
  store ptr %207, ptr %213, align 8
  %214 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %212)
  %215 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %212, 1
  %216 = insertvalue { ptr, ptr, ptr, i32 } %215, ptr undef, 2
  %217 = insertvalue { ptr, ptr, ptr, i32 } %216, i32 10, 3
  %218 = load ptr, ptr %19, align 8
  %219 = load ptr, ptr %18, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %219)
  %221 = load i32, ptr %21, align 8
  %222 = sext i32 %221 to i64
  %223 = getelementptr ptr, ptr %219, i64 %222
  %224 = load ptr, ptr %223, align 8
  %225 = call ptr @typegetter_wrapper(ptr %224, ptr %218)
  %226 = load ptr, ptr %19, align 8
  %227 = load ptr, ptr %18, align 8
  %228 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %227)
  %229 = load i32, ptr %21, align 8
  %230 = sext i32 %229 to i64
  %231 = getelementptr ptr, ptr %227, i64 %230
  %232 = getelementptr i8, ptr %231, i64 8
  %233 = load ptr, ptr %232, align 8
  %234 = call ptr @typegetter_wrapper(ptr %233, ptr %226)
  store ptr %225, ptr %12, align 8
  %235 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %234, ptr %235, align 8
  %236 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr @_parameterization_i32, ptr %236, align 8
  %237 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %12)
  %238 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry)
  store ptr %.fca.0.extract29, ptr %13, align 8
  %239 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.0.extract20, ptr %239, align 8
  %240 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr @i32_typ, ptr %240, align 8
  %241 = call ptr @behavior_wrapper(ptr noundef nonnull @Entry_B_init_keyK_valueV_primary_hashi32, { ptr, ptr, ptr, i32 } %217, ptr noundef nonnull align 8 dereferenceable(24) %13)
  call void %241({ ptr, ptr, ptr, i32 } %217, { ptr, ptr, ptr, i32 } %217, ptr nonnull %12, { ptr, i160 } %3, { ptr, i160 } %4, i32 %42) #34
  store ptr @Entry, ptr %14, align 8
  %242 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr %212, ptr %242, align 8
  %243 = getelementptr inbounds i8, ptr %14, i64 16
  %244 = getelementptr inbounds i8, ptr %14, i64 24
  store i32 10, ptr %244, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %245 = load ptr, ptr %14, align 8
  %246 = load ptr, ptr %242, align 8
  %247 = load ptr, ptr %243, align 8
  %248 = load i32, ptr %244, align 8
  %249 = ptrtoint ptr %246 to i64
  %250 = ptrtoint ptr %247 to i64
  %251 = getelementptr inbounds i8, ptr %15, i64 8
  %.sroa_idx76 = getelementptr inbounds i8, ptr %15, i64 16
  %.sroa_idx77 = getelementptr inbounds i8, ptr %15, i64 24
  store ptr %245, ptr %15, align 8
  store i64 %249, ptr %251, align 8
  store i64 %250, ptr %.sroa_idx76, align 8
  store i32 %248, ptr %.sroa_idx77, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %15, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %252 = load ptr, ptr %15, align 8
  %253 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %252, 0
  %254 = load ptr, ptr %251, align 8
  %255 = insertvalue { ptr, ptr, ptr, i32 } %253, ptr %254, 1
  %256 = load ptr, ptr %.sroa_idx76, align 8
  %257 = insertvalue { ptr, ptr, ptr, i32 } %255, ptr %256, 2
  %258 = load i32, ptr %.sroa_idx77, align 8
  %259 = insertvalue { ptr, ptr, ptr, i32 } %257, i32 %258, 3
  %260 = load ptr, ptr %18, align 8
  %261 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %260, 0
  %262 = load ptr, ptr %19, align 8
  %263 = insertvalue { ptr, ptr, ptr, i32 } %261, ptr %262, 1
  %264 = load ptr, ptr %20, align 8
  %265 = insertvalue { ptr, ptr, ptr, i32 } %263, ptr %264, 2
  %266 = load i32, ptr %21, align 8
  %267 = insertvalue { ptr, ptr, ptr, i32 } %265, i32 %266, 3
  %268 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %260)
  %269 = sext i32 %266 to i64
  %270 = getelementptr ptr, ptr %260, i64 %269
  %271 = load ptr, ptr %270, align 8
  %272 = call ptr @typegetter_wrapper(ptr %271, ptr %262)
  %273 = load ptr, ptr %19, align 8
  %274 = load ptr, ptr %18, align 8
  %275 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %274)
  %276 = load i32, ptr %21, align 8
  %277 = sext i32 %276 to i64
  %278 = getelementptr ptr, ptr %274, i64 %277
  %279 = getelementptr i8, ptr %278, i64 8
  %280 = load ptr, ptr %279, align 8
  %281 = call ptr @typegetter_wrapper(ptr %280, ptr %273)
  %282 = call ptr @bump_malloc(i64 noundef 32)
  %283 = getelementptr i8, ptr %282, i64 16
  store ptr @_parameterization_Nil, ptr %283, align 8
  %284 = call ptr @bump_malloc(i64 noundef 32)
  %285 = getelementptr i8, ptr %284, i64 16
  store ptr %281, ptr %285, align 8
  %286 = getelementptr i8, ptr %284, i64 8
  store ptr %272, ptr %286, align 8
  %287 = getelementptr i8, ptr %284, i64 24
  store ptr null, ptr %287, align 8
  %288 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %284)
  store ptr @Entry, ptr %284, align 8
  %289 = getelementptr i8, ptr %282, i64 8
  store ptr %284, ptr %289, align 8
  %290 = getelementptr i8, ptr %282, i64 24
  store ptr null, ptr %290, align 8
  %291 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %282)
  store ptr @union_typ, ptr %282, align 8
  store ptr %282, ptr %16, align 8
  %292 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %16)
  %293 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %260)
  %294 = getelementptr i8, ptr %270, i64 120
  %295 = load ptr, ptr %294, align 8
  store ptr @union_typ, ptr %17, align 8
  %296 = call ptr @behavior_wrapper(ptr %295, { ptr, ptr, ptr, i32 } %267, ptr noundef nonnull align 8 dereferenceable(8) %17)
  %297 = call { ptr, i160 } %296({ ptr, ptr, ptr, i32 } %267, { ptr, ptr, ptr, i32 } %267, ptr nonnull %16, { ptr, ptr, ptr, i32 } %259) #34
  %.fca.0.extract41 = extractvalue { ptr, i160 } %297, 0
  %298 = icmp eq ptr %.fca.0.extract41, @nil_typ
  %299 = icmp eq ptr %.fca.0.extract41, null
  %300 = or i1 %298, %299
  br i1 %300, label %.thread, label %301

301:                                              ; preds = %._crit_edge
  %.fca.1.extract42 = extractvalue { ptr, i160 } %297, 1
  %302 = load ptr, ptr %18, align 8
  %303 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %302, 0
  %304 = load ptr, ptr %19, align 8
  %305 = insertvalue { ptr, ptr, ptr, i32 } %303, ptr %304, 1
  %306 = load ptr, ptr %20, align 8
  %307 = insertvalue { ptr, ptr, ptr, i32 } %305, ptr %306, 2
  %308 = load i32, ptr %21, align 8
  %309 = insertvalue { ptr, ptr, ptr, i32 } %307, i32 %308, 3
  %310 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %311 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %302)
  %312 = sext i32 %308 to i64
  %313 = getelementptr ptr, ptr %302, i64 %312
  %314 = getelementptr i8, ptr %313, i64 136
  %315 = load ptr, ptr %314, align 8
  %316 = call ptr @behavior_wrapper(ptr %315, { ptr, ptr, ptr, i32 } %309, ptr noundef nonnull align 8 %6)
  call void %316({ ptr, ptr, ptr, i32 } %309, { ptr, ptr, ptr, i32 } %309, ptr nonnull %6) #34
  %.sroa.3.8.extract.trunc = trunc i160 %.fca.1.extract42 to i64
  %.sroa.6.8.extract.shift = lshr i160 %.fca.1.extract42, 64
  %.sroa.6.8.extract.trunc = trunc i160 %.sroa.6.8.extract.shift to i64
  %.sroa.8.8.extract.shift = lshr i160 %.fca.1.extract42, 128
  %.sroa.8.8.extract.trunc = trunc nuw i160 %.sroa.8.8.extract.shift to i32
  store ptr %.fca.0.extract41, ptr %15, align 8
  store i64 %.sroa.3.8.extract.trunc, ptr %251, align 8
  store i64 %.sroa.6.8.extract.trunc, ptr %.sroa_idx76, align 8
  store i32 %.sroa.8.8.extract.trunc, ptr %.sroa_idx77, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %15, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %317 = load ptr, ptr %15, align 8
  %318 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %317, 0
  %319 = load ptr, ptr %251, align 8
  %320 = insertvalue { ptr, ptr, ptr, i32 } %318, ptr %319, 1
  %321 = load ptr, ptr %.sroa_idx76, align 8
  %322 = insertvalue { ptr, ptr, ptr, i32 } %320, ptr %321, 2
  %323 = load i32, ptr %.sroa_idx77, align 8
  %324 = insertvalue { ptr, ptr, ptr, i32 } %322, i32 %323, 3
  %325 = load ptr, ptr %18, align 8
  %326 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %325, 0
  %327 = load ptr, ptr %19, align 8
  %328 = insertvalue { ptr, ptr, ptr, i32 } %326, ptr %327, 1
  %329 = load ptr, ptr %20, align 8
  %330 = insertvalue { ptr, ptr, ptr, i32 } %328, ptr %329, 2
  %331 = load i32, ptr %21, align 8
  %332 = insertvalue { ptr, ptr, ptr, i32 } %330, i32 %331, 3
  %333 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %325)
  %334 = sext i32 %331 to i64
  %335 = getelementptr ptr, ptr %325, i64 %334
  %336 = load ptr, ptr %335, align 8
  %337 = call ptr @typegetter_wrapper(ptr %336, ptr %327)
  %338 = load ptr, ptr %19, align 8
  %339 = load ptr, ptr %18, align 8
  %340 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %339)
  %341 = load i32, ptr %21, align 8
  %342 = sext i32 %341 to i64
  %343 = getelementptr ptr, ptr %339, i64 %342
  %344 = getelementptr i8, ptr %343, i64 8
  %345 = load ptr, ptr %344, align 8
  %346 = call ptr @typegetter_wrapper(ptr %345, ptr %338)
  %347 = call ptr @bump_malloc(i64 noundef 32)
  %348 = getelementptr i8, ptr %347, i64 16
  store ptr @_parameterization_Nil, ptr %348, align 8
  %349 = call ptr @bump_malloc(i64 noundef 32)
  %350 = getelementptr i8, ptr %349, i64 16
  store ptr %346, ptr %350, align 8
  %351 = getelementptr i8, ptr %349, i64 8
  store ptr %337, ptr %351, align 8
  %352 = getelementptr i8, ptr %349, i64 24
  store ptr null, ptr %352, align 8
  %353 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %349)
  store ptr @Entry, ptr %349, align 8
  %354 = getelementptr i8, ptr %347, i64 8
  store ptr %349, ptr %354, align 8
  %355 = getelementptr i8, ptr %347, i64 24
  store ptr null, ptr %355, align 8
  %356 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %347)
  store ptr @union_typ, ptr %347, align 8
  store ptr %347, ptr %16, align 8
  %357 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %16)
  %358 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %325)
  %359 = getelementptr i8, ptr %335, i64 120
  %360 = load ptr, ptr %359, align 8
  store ptr @union_typ, ptr %17, align 8
  %361 = call ptr @behavior_wrapper(ptr %360, { ptr, ptr, ptr, i32 } %332, ptr noundef nonnull align 8 dereferenceable(8) %17)
  %362 = call { ptr, i160 } %361({ ptr, ptr, ptr, i32 } %332, { ptr, ptr, ptr, i32 } %332, ptr nonnull %16, { ptr, ptr, ptr, i32 } %324) #34
  %.fca.0.extract41.1 = extractvalue { ptr, i160 } %362, 0
  %363 = icmp eq ptr %.fca.0.extract41.1, @nil_typ
  %364 = icmp eq ptr %.fca.0.extract41.1, null
  %365 = or i1 %363, %364
  br i1 %365, label %.thread, label %366

366:                                              ; preds = %301
  %367 = load ptr, ptr %18, align 8
  %368 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %367, 0
  %369 = load ptr, ptr %19, align 8
  %370 = insertvalue { ptr, ptr, ptr, i32 } %368, ptr %369, 1
  %371 = load ptr, ptr %20, align 8
  %372 = insertvalue { ptr, ptr, ptr, i32 } %370, ptr %371, 2
  %373 = load i32, ptr %21, align 8
  %374 = insertvalue { ptr, ptr, ptr, i32 } %372, i32 %373, 3
  %375 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %376 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %367)
  %377 = sext i32 %373 to i64
  %378 = getelementptr ptr, ptr %367, i64 %377
  %379 = getelementptr i8, ptr %378, i64 136
  %380 = load ptr, ptr %379, align 8
  %381 = call ptr @behavior_wrapper(ptr %380, { ptr, ptr, ptr, i32 } %374, ptr noundef nonnull align 8 %6)
  call void %381({ ptr, ptr, ptr, i32 } %374, { ptr, ptr, ptr, i32 } %374, ptr nonnull %6) #34
  br label %.thread

.thread:                                          ; preds = %._crit_edge, %301, %366, %106, %5
  ret void
}

define i32 @CuckooMap_size_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 48
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #26
  ret i32 %17
}

define { ptr, i160 } @CuckooMap_get_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #3 {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [4 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr, ptr }, align 8
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract32, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract24 = extractvalue { ptr, i160 } %3, 0
  %13 = load ptr, ptr %9, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %13, 0
  %15 = load ptr, ptr %10, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %15, 1
  %17 = load ptr, ptr %11, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %17, 2
  %19 = load i32, ptr %12, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %19, 3
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %13)
  %22 = sext i32 %19 to i64
  %23 = getelementptr ptr, ptr %13, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %15)
  %26 = alloca [1 x ptr], align 8
  store ptr %25, ptr %26, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %26)
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %13)
  %29 = getelementptr i8, ptr %23, i64 88
  %30 = load ptr, ptr %29, align 8
  %31 = alloca { ptr }, align 8
  store ptr %.fca.0.extract24, ptr %31, align 8
  %32 = call ptr @behavior_wrapper(ptr %30, { ptr, ptr, ptr, i32 } %20, ptr noundef nonnull align 8 dereferenceable(8) %31)
  %33 = call i32 %32({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %26, { ptr, i160 } %3) #34
  %34 = load ptr, ptr %9, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = load ptr, ptr %10, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 1
  %38 = load ptr, ptr %11, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 2
  %40 = load i32, ptr %12, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %40, 3
  %42 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %42)
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %34)
  %45 = sext i32 %40 to i64
  %46 = getelementptr ptr, ptr %34, i64 %45
  %47 = getelementptr i8, ptr %46, i64 104
  %48 = load ptr, ptr %47, align 8
  %49 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %49, align 8
  %50 = call ptr @behavior_wrapper(ptr %48, { ptr, ptr, ptr, i32 } %41, ptr noundef nonnull align 8 dereferenceable(8) %49)
  %51 = call i32 %50({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %42, i32 %33) #34
  %52 = load ptr, ptr %10, align 8
  %53 = load ptr, ptr %9, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %12, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 24
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr } %60(ptr %52) #26
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %63 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %52, 1
  %64 = load ptr, ptr %11, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %55, 3
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %53)
  %68 = load ptr, ptr %57, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %52)
  %70 = call ptr @bump_malloc(i64 noundef 16)
  %71 = getelementptr i8, ptr %70, i64 8
  store ptr null, ptr %71, align 8
  store ptr @buffer_typ, ptr %70, align 8
  %72 = alloca [4 x ptr], align 8
  store ptr %69, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %72, i64 8
  store ptr @_parameterization_i32, ptr %73, align 8
  %74 = getelementptr inbounds i8, ptr %72, i64 16
  store ptr @_parameterization_i32, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %72, i64 24
  store ptr %70, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %72)
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %53)
  %78 = getelementptr i8, ptr %57, i64 152
  %79 = load ptr, ptr %78, align 8
  %80 = alloca { ptr, ptr, ptr, ptr }, align 8
  store ptr %.fca.0.extract24, ptr %80, align 8
  %81 = getelementptr inbounds i8, ptr %80, i64 8
  store ptr @i32_typ, ptr %81, align 8
  %82 = getelementptr inbounds i8, ptr %80, i64 16
  store ptr @i32_typ, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %80, i64 24
  store ptr @buffer_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %66, ptr noundef nonnull align 8 dereferenceable(32) %80)
  %85 = call { ptr, i160 } %84({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr nonnull %72, { ptr, i160 } %3, i32 %33, i32 %51, { ptr } %61) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %85, 0
  %86 = load ptr, ptr %10, align 8
  %87 = load ptr, ptr %9, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %87)
  %89 = load i32, ptr %12, align 8
  %90 = sext i32 %89 to i64
  %91 = getelementptr ptr, ptr %87, i64 %90
  %92 = getelementptr i8, ptr %91, i64 8
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %86)
  %95 = icmp ne ptr %.fca.0.extract, @nil_typ
  %96 = icmp ne ptr %.fca.0.extract, null
  %.not63 = and i1 %95, %96
  br i1 %.not63, label %.thread, label %97

97:                                               ; preds = %4
  %98 = load ptr, ptr %9, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = load ptr, ptr %10, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 1
  %102 = load ptr, ptr %11, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 2
  %104 = load i32, ptr %12, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %104, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5)
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %98)
  %108 = sext i32 %104 to i64
  %109 = getelementptr ptr, ptr %98, i64 %108
  %110 = getelementptr i8, ptr %109, i64 112
  %111 = load ptr, ptr %110, align 8
  store ptr @i32_typ, ptr %6, align 8
  %112 = call ptr @behavior_wrapper(ptr %111, { ptr, ptr, ptr, i32 } %105, ptr noundef nonnull align 8 dereferenceable(8) %6)
  %113 = call i32 %112({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr nonnull %5, i32 %33) #34
  %114 = load ptr, ptr %10, align 8
  %115 = load ptr, ptr %9, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %115)
  %117 = load i32, ptr %12, align 8
  %118 = sext i32 %117 to i64
  %119 = getelementptr ptr, ptr %115, i64 %118
  %120 = getelementptr i8, ptr %119, i64 32
  %121 = load ptr, ptr %120, align 8
  %122 = load ptr, ptr %121, align 8
  %123 = call { ptr } %122(ptr %114) #26
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %115, 0
  %125 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %114, 1
  %126 = load ptr, ptr %11, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %126, 2
  %128 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %117, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %115)
  %130 = load ptr, ptr %119, align 8
  %131 = call ptr @typegetter_wrapper(ptr %130, ptr %114)
  %132 = call ptr @bump_malloc(i64 noundef 16)
  %133 = getelementptr i8, ptr %132, i64 8
  store ptr null, ptr %133, align 8
  store ptr @buffer_typ, ptr %132, align 8
  store ptr %131, ptr %7, align 8
  %134 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %134, align 8
  %135 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %135, align 8
  %136 = getelementptr inbounds i8, ptr %7, i64 24
  store ptr %132, ptr %136, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %7)
  %138 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %115)
  %139 = getelementptr i8, ptr %119, i64 152
  %140 = load ptr, ptr %139, align 8
  store ptr %.fca.0.extract24, ptr %8, align 8
  %141 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %141, align 8
  %142 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %142, align 8
  %143 = getelementptr inbounds i8, ptr %8, i64 24
  store ptr @buffer_typ, ptr %143, align 8
  %144 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %128, ptr noundef nonnull align 8 dereferenceable(32) %8)
  %145 = call { ptr, i160 } %144({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr nonnull %7, { ptr, i160 } %3, i32 %33, i32 %113, { ptr } %123) #34
  %.fca.0.extract51 = extractvalue { ptr, i160 } %145, 0
  %146 = load ptr, ptr %10, align 8
  %147 = load ptr, ptr %9, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %147)
  %149 = load i32, ptr %12, align 8
  %150 = sext i32 %149 to i64
  %151 = getelementptr ptr, ptr %147, i64 %150
  %152 = getelementptr i8, ptr %151, i64 8
  %153 = load ptr, ptr %152, align 8
  %154 = call ptr @typegetter_wrapper(ptr %153, ptr %146)
  %155 = icmp ne ptr %.fca.0.extract51, @nil_typ
  %156 = icmp ne ptr %.fca.0.extract51, null
  %.not65.not.not = and i1 %155, %156
  %cond.fr = freeze i1 %.not65.not.not
  %spec.select = select i1 %cond.fr, ptr %.fca.0.extract51, ptr @nil_typ
  br label %.thread

.thread:                                          ; preds = %97, %4
  %.pn = phi { ptr, i160 } [ %85, %4 ], [ %145, %97 ]
  %157 = phi ptr [ %.fca.0.extract, %4 ], [ %spec.select, %97 ]
  %.fca.1.extract..sroa.354.074 = extractvalue { ptr, i160 } %.pn, 1
  %.reload55.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %157, 0
  %.reload55.fca.1.insert = insertvalue { ptr, i160 } %.reload55.fca.0.insert, i160 %.fca.1.extract..sroa.354.074, 1
  ret { ptr, i160 } %.reload55.fca.1.insert
}

define void @CuckooMap__set_index_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) #3 {
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract12, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract7 = extractvalue { ptr, i160 } %3, 0
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %10)
  %19 = sext i32 %16 to i64
  %20 = getelementptr ptr, ptr %10, i64 %19
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr @typegetter_wrapper(ptr %21, ptr %12)
  %23 = load ptr, ptr %7, align 8
  %24 = load ptr, ptr %6, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %24)
  %26 = load i32, ptr %9, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = call ptr @typegetter_wrapper(ptr %30, ptr %23)
  %32 = alloca [2 x ptr], align 8
  store ptr %22, ptr %32, align 8
  %33 = getelementptr inbounds i8, ptr %32, i64 8
  store ptr %31, ptr %33, align 8
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %32)
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %10)
  %36 = getelementptr i8, ptr %20, i64 168
  %37 = load ptr, ptr %36, align 8
  %38 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract7, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %38, i64 8
  store ptr %.fca.0.extract, ptr %39, align 8
  %40 = call ptr @behavior_wrapper(ptr %37, { ptr, ptr, ptr, i32 } %17, ptr noundef nonnull align 8 dereferenceable(16) %38)
  call void %40({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %32, { ptr, i160 } %3, { ptr, i160 } %4) #34
  ret void
}

define { ptr, i160 } @CuckooMap_remove_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #3 {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [4 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr, ptr }, align 8
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract32, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %.fca.0.extract24 = extractvalue { ptr, i160 } %3, 0
  %13 = load ptr, ptr %9, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %13, 0
  %15 = load ptr, ptr %10, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %15, 1
  %17 = load ptr, ptr %11, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %17, 2
  %19 = load i32, ptr %12, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 %19, 3
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %13)
  %22 = sext i32 %19 to i64
  %23 = getelementptr ptr, ptr %13, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %15)
  %26 = alloca [1 x ptr], align 8
  store ptr %25, ptr %26, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %26)
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %13)
  %29 = getelementptr i8, ptr %23, i64 88
  %30 = load ptr, ptr %29, align 8
  %31 = alloca { ptr }, align 8
  store ptr %.fca.0.extract24, ptr %31, align 8
  %32 = call ptr @behavior_wrapper(ptr %30, { ptr, ptr, ptr, i32 } %20, ptr noundef nonnull align 8 dereferenceable(8) %31)
  %33 = call i32 %32({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %26, { ptr, i160 } %3) #34
  %34 = load ptr, ptr %9, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = load ptr, ptr %10, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 1
  %38 = load ptr, ptr %11, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 2
  %40 = load i32, ptr %12, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %40, 3
  %42 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %42)
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %34)
  %45 = sext i32 %40 to i64
  %46 = getelementptr ptr, ptr %34, i64 %45
  %47 = getelementptr i8, ptr %46, i64 104
  %48 = load ptr, ptr %47, align 8
  %49 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %49, align 8
  %50 = call ptr @behavior_wrapper(ptr %48, { ptr, ptr, ptr, i32 } %41, ptr noundef nonnull align 8 dereferenceable(8) %49)
  %51 = call i32 %50({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %42, i32 %33) #34
  %52 = load ptr, ptr %10, align 8
  %53 = load ptr, ptr %9, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %53)
  %55 = load i32, ptr %12, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 24
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr } %60(ptr %52) #26
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %63 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %52, 1
  %64 = load ptr, ptr %11, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %55, 3
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %53)
  %68 = load ptr, ptr %57, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %52)
  %70 = call ptr @bump_malloc(i64 noundef 16)
  %71 = getelementptr i8, ptr %70, i64 8
  store ptr null, ptr %71, align 8
  store ptr @buffer_typ, ptr %70, align 8
  %72 = alloca [4 x ptr], align 8
  store ptr %69, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %72, i64 8
  store ptr @_parameterization_i32, ptr %73, align 8
  %74 = getelementptr inbounds i8, ptr %72, i64 16
  store ptr @_parameterization_i32, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %72, i64 24
  store ptr %70, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %72)
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %53)
  %78 = getelementptr i8, ptr %57, i64 160
  %79 = load ptr, ptr %78, align 8
  %80 = alloca { ptr, ptr, ptr, ptr }, align 8
  store ptr %.fca.0.extract24, ptr %80, align 8
  %81 = getelementptr inbounds i8, ptr %80, i64 8
  store ptr @i32_typ, ptr %81, align 8
  %82 = getelementptr inbounds i8, ptr %80, i64 16
  store ptr @i32_typ, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %80, i64 24
  store ptr @buffer_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %66, ptr noundef nonnull align 8 dereferenceable(32) %80)
  %85 = call { ptr, i160 } %84({ ptr, ptr, ptr, i32 } %66, { ptr, ptr, ptr, i32 } %66, ptr nonnull %72, { ptr, i160 } %3, i32 %33, i32 %51, { ptr } %61) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %85, 0
  %86 = load ptr, ptr %10, align 8
  %87 = load ptr, ptr %9, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %87)
  %89 = load i32, ptr %12, align 8
  %90 = sext i32 %89 to i64
  %91 = getelementptr ptr, ptr %87, i64 %90
  %92 = getelementptr i8, ptr %91, i64 8
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %86)
  %95 = icmp ne ptr %.fca.0.extract, @nil_typ
  %96 = icmp ne ptr %.fca.0.extract, null
  %.not63 = and i1 %95, %96
  br i1 %.not63, label %.thread, label %97

97:                                               ; preds = %4
  %98 = load ptr, ptr %9, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %100 = load ptr, ptr %10, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 1
  %102 = load ptr, ptr %11, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, ptr %102, 2
  %104 = load i32, ptr %12, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, i32 %104, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5)
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %98)
  %108 = sext i32 %104 to i64
  %109 = getelementptr ptr, ptr %98, i64 %108
  %110 = getelementptr i8, ptr %109, i64 112
  %111 = load ptr, ptr %110, align 8
  store ptr @i32_typ, ptr %6, align 8
  %112 = call ptr @behavior_wrapper(ptr %111, { ptr, ptr, ptr, i32 } %105, ptr noundef nonnull align 8 dereferenceable(8) %6)
  %113 = call i32 %112({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr nonnull %5, i32 %33) #34
  %114 = load ptr, ptr %10, align 8
  %115 = load ptr, ptr %9, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %115)
  %117 = load i32, ptr %12, align 8
  %118 = sext i32 %117 to i64
  %119 = getelementptr ptr, ptr %115, i64 %118
  %120 = getelementptr i8, ptr %119, i64 32
  %121 = load ptr, ptr %120, align 8
  %122 = load ptr, ptr %121, align 8
  %123 = call { ptr } %122(ptr %114) #26
  %124 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %115, 0
  %125 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %114, 1
  %126 = load ptr, ptr %11, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %126, 2
  %128 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %117, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %115)
  %130 = load ptr, ptr %119, align 8
  %131 = call ptr @typegetter_wrapper(ptr %130, ptr %114)
  %132 = call ptr @bump_malloc(i64 noundef 16)
  %133 = getelementptr i8, ptr %132, i64 8
  store ptr null, ptr %133, align 8
  store ptr @buffer_typ, ptr %132, align 8
  store ptr %131, ptr %7, align 8
  %134 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %134, align 8
  %135 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %135, align 8
  %136 = getelementptr inbounds i8, ptr %7, i64 24
  store ptr %132, ptr %136, align 8
  %137 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %7)
  %138 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %115)
  %139 = getelementptr i8, ptr %119, i64 160
  %140 = load ptr, ptr %139, align 8
  store ptr %.fca.0.extract24, ptr %8, align 8
  %141 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %141, align 8
  %142 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %142, align 8
  %143 = getelementptr inbounds i8, ptr %8, i64 24
  store ptr @buffer_typ, ptr %143, align 8
  %144 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %128, ptr noundef nonnull align 8 dereferenceable(32) %8)
  %145 = call { ptr, i160 } %144({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr nonnull %7, { ptr, i160 } %3, i32 %33, i32 %113, { ptr } %123) #34
  %.fca.0.extract51 = extractvalue { ptr, i160 } %145, 0
  %146 = load ptr, ptr %10, align 8
  %147 = load ptr, ptr %9, align 8
  %148 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %147)
  %149 = load i32, ptr %12, align 8
  %150 = sext i32 %149 to i64
  %151 = getelementptr ptr, ptr %147, i64 %150
  %152 = getelementptr i8, ptr %151, i64 8
  %153 = load ptr, ptr %152, align 8
  %154 = call ptr @typegetter_wrapper(ptr %153, ptr %146)
  %155 = icmp ne ptr %.fca.0.extract51, @nil_typ
  %156 = icmp ne ptr %.fca.0.extract51, null
  %.not65.not.not = and i1 %155, %156
  %cond.fr = freeze i1 %.not65.not.not
  %spec.select = select i1 %cond.fr, ptr %.fca.0.extract51, ptr @nil_typ
  br label %.thread

.thread:                                          ; preds = %97, %4
  %.pn = phi { ptr, i160 } [ %85, %4 ], [ %145, %97 ]
  %157 = phi ptr [ %.fca.0.extract, %4 ], [ %spec.select, %97 ]
  %.fca.1.extract..sroa.354.074 = extractvalue { ptr, i160 } %.pn, 1
  %.reload55.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %157, 0
  %.reload55.fca.1.insert = insertvalue { ptr, i160 } %.reload55.fca.0.insert, i160 %.fca.1.extract..sroa.354.074, 1
  ret { ptr, i160 } %.reload55.fca.1.insert
}

define void @CuckooMap_clear_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 40
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %8, i32 8) #25
  %18 = call ptr @bump_malloc(i64 noundef 256)
  %19 = load ptr, ptr %5, align 8
  %20 = load ptr, ptr %4, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %20)
  %22 = load i32, ptr %7, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 24
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr } undef, ptr %18, 0
  call void %28(ptr %19, { ptr } %29) #25
  %30 = call ptr @bump_malloc(i64 noundef 256)
  %31 = load ptr, ptr %5, align 8
  %32 = load ptr, ptr %4, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %32)
  %34 = load i32, ptr %7, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 32
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr } undef, ptr %30, 0
  call void %40(ptr %31, { ptr } %41) #25
  %42 = load ptr, ptr %5, align 8
  %43 = load ptr, ptr %4, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %43)
  %45 = load i32, ptr %7, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = getelementptr i8, ptr %47, i64 48
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  call void %51(ptr %42, i32 0) #25
  ret void
}

define { ptr, i160 } @Map__index_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract12, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract, ptr %16, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %13, ptr noundef nonnull align 16 dereferenceable(80) @Map)
  %.fca.0.extract6 = extractvalue { ptr, i160 } %3, 0
  %17 = load ptr, ptr %13, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %17, 0
  %19 = load ptr, ptr %14, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %19, 1
  %21 = load ptr, ptr %15, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %21, 2
  %23 = load i32, ptr %16, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %23, 3
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 480, ptr nocapture nofree noundef %17)
  %26 = sext i32 %23 to i64
  %27 = getelementptr ptr, ptr %17, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = call ptr @typegetter_wrapper(ptr %28, ptr %19)
  %30 = alloca [1 x ptr], align 8
  store ptr %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %30)
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 480, ptr nocapture nofree noundef %17)
  %33 = getelementptr i8, ptr %27, i64 32
  %34 = load ptr, ptr %33, align 8
  %35 = alloca { ptr }, align 8
  store ptr %.fca.0.extract6, ptr %35, align 8
  %36 = call ptr @behavior_wrapper(ptr %34, { ptr, ptr, ptr, i32 } %24, ptr noundef nonnull align 8 dereferenceable(8) %35)
  %37 = call { ptr, i160 } %36({ ptr, ptr, ptr, i32 } %24, { ptr, ptr, ptr, i32 } %24, ptr nonnull %30, { ptr, i160 } %3) #34
  %.fca.0.extract = extractvalue { ptr, i160 } %37, 0
  %38 = icmp eq ptr %.fca.0.extract, @nil_typ
  %39 = icmp eq ptr %.fca.0.extract, null
  %40 = or i1 %38, %39
  br i1 %40, label %41, label %._crit_edge

41:                                               ; preds = %4
  store ptr @KeyNotFound, ptr %6, align 8
  %42 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_KeyNotFound, ptr noundef nonnull align 8 dereferenceable(8) %6)
  %43 = extractvalue { i64, i64 } %42, 0
  %44 = call ptr @bump_malloc(i64 %43)
  %45 = insertvalue { ptr, ptr, ptr, i32 } { ptr @KeyNotFound, ptr undef, ptr undef, i32 undef }, ptr %44, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr undef, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 10, 3
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 208, ptr nocapture nofree noundef nonnull align 16 dereferenceable(288) @KeyNotFound)
  %50 = call ptr @behavior_wrapper(ptr noundef nonnull @KeyNotFound_B_init_, { ptr, ptr, ptr, i32 } %47, ptr noundef nonnull align 8 %5)
  call void %50({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %5) #34
  %51 = call ptr @bump_malloc(i64 noundef 55)
  %52 = load <54 x i8>, ptr @zvupd_CUsersPaulKOneDriveDocumentsPLPyPLlibmapmini, align 64
  store <54 x i8> %52, ptr %51, align 64
  store ptr @String, ptr %7, align 8
  %53 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %54 = call { i64, i64 } @size_wrapper(ptr %53, ptr noundef nonnull align 8 dereferenceable(8) %7)
  %55 = extractvalue { i64, i64 } %54, 0
  %56 = call ptr @bump_malloc(i64 %55)
  %57 = insertvalue { ptr } undef, ptr %51, 0
  %58 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %56, 1
  %59 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr undef, 2
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %8, align 8
  %61 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %61, align 8
  %62 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_i32, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %8)
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 dereferenceable(688) @String)
  %65 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %9, align 8
  %66 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %67, align 8
  %68 = call ptr @behavior_wrapper(ptr %65, { ptr, ptr, ptr, i32 } %60, ptr noundef nonnull align 8 dereferenceable(24) %9)
  call void %68({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr nonnull %8, { ptr } %57, i32 54, i32 55) #34
  store ptr @String, ptr %10, align 8
  %69 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %56, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %10, i64 16
  %71 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 10, ptr %71, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %10, ptr noundef nonnull align 8 dereferenceable(688) @String)
  %72 = load ptr, ptr %10, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %72, 0
  %74 = load ptr, ptr %69, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 1
  %76 = load ptr, ptr %70, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 2
  %78 = load i32, ptr %71, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %78, 3
  store ptr @_parameterization_i32, ptr %11, align 8
  %80 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @_parameterization_String, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %11)
  %82 = call ptr @llvm.invariant.start.p0(i64 noundef 208, ptr nocapture nofree noundef nonnull align 16 dereferenceable(288) @KeyNotFound)
  store ptr @i32_typ, ptr %12, align 8
  %83 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %72, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr noundef nonnull @KeyNotFound_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %47, ptr noundef nonnull align 8 dereferenceable(16) %12)
  call void %84({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %11, i32 16, { ptr, ptr, ptr, i32 } %79) #34
  %85 = ptrtoint ptr %44 to i64
  %.sroa.444.8.insert.ext = zext i64 %85 to i160
  %.sroa.444.8.insert.insert = or disjoint i160 %.sroa.444.8.insert.ext, 3402823669209384634633746074317682114560
  %86 = insertvalue { ptr, i160 } { ptr @KeyNotFound, i160 undef }, i160 %.sroa.444.8.insert.insert, 1
  %87 = call ptr @get_current_coroutine()
  %88 = getelementptr i8, ptr %87, i64 48
  store { ptr, i160 } %86, ptr %88, align 8
  call void @coroutine_yield(ptr noundef align 8 %87)
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %41
  %.sroa.0.0 = phi ptr [ @nil_typ, %41 ], [ %.fca.0.extract, %4 ]
  %89 = load ptr, ptr %14, align 8
  %90 = load ptr, ptr %13, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 480, ptr nocapture nofree noundef %90)
  %92 = load i32, ptr %16, align 8
  %93 = sext i32 %92 to i64
  %94 = getelementptr ptr, ptr %90, i64 %93
  %95 = getelementptr i8, ptr %94, i64 8
  %96 = load ptr, ptr %95, align 8
  %97 = call ptr @typegetter_wrapper(ptr %96, ptr %89)
  %.fca.1.extract = extractvalue { ptr, i160 } %37, 1
  %.reload13.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.sroa.0.0, 0
  %.reload13.fca.1.insert = insertvalue { ptr, i160 } %.reload13.fca.0.insert, i160 %.fca.1.extract, 1
  ret { ptr, i160 } %.reload13.fca.1.insert
}

define { ptr, ptr, ptr, i32 } @CuckooMap_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract13, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr } %16(ptr %8) #26
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %9)
  %19 = getelementptr i8, ptr %13, i64 32
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call { ptr } %21(ptr %8) #26
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %9)
  %24 = getelementptr i8, ptr %13, i64 40
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %8) #26
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %9)
  %29 = load ptr, ptr %13, align 8
  %30 = call ptr @typegetter_wrapper(ptr %29, ptr %8)
  %31 = load ptr, ptr %5, align 8
  %32 = load ptr, ptr %4, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %32)
  %34 = load i32, ptr %7, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = call ptr @typegetter_wrapper(ptr %38, ptr %31)
  %40 = load ptr, ptr %5, align 8
  %41 = load ptr, ptr %4, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %41)
  %43 = load i32, ptr %7, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = load ptr, ptr %45, align 8
  %47 = call ptr @typegetter_wrapper(ptr %46, ptr %40)
  %48 = load ptr, ptr %5, align 8
  %49 = load ptr, ptr %4, align 8
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %49)
  %51 = load i32, ptr %7, align 8
  %52 = sext i32 %51 to i64
  %53 = getelementptr ptr, ptr %49, i64 %52
  %54 = getelementptr i8, ptr %53, i64 8
  %55 = load ptr, ptr %54, align 8
  %56 = call ptr @typegetter_wrapper(ptr %55, ptr %48)
  %57 = call ptr @bump_malloc(i64 noundef 32)
  %58 = getelementptr i8, ptr %57, i64 16
  store ptr %56, ptr %58, align 8
  %59 = getelementptr i8, ptr %57, i64 8
  store ptr %47, ptr %59, align 8
  %60 = getelementptr i8, ptr %57, i64 24
  store ptr null, ptr %60, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %57)
  store ptr @Pair, ptr %57, align 8
  %62 = alloca [4 x ptr], align 8
  store ptr @CuckooMapIterator, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr %30, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  store ptr %39, ptr %64, align 8
  %65 = getelementptr inbounds i8, ptr %62, i64 24
  store ptr %57, ptr %65, align 8
  %66 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_CuckooMapIterator, ptr noundef nonnull align 8 dereferenceable(32) %62)
  %67 = extractvalue { i64, i64 } %66, 0
  %68 = call ptr @bump_malloc(i64 %67)
  store ptr %30, ptr %68, align 8
  %69 = getelementptr i8, ptr %68, i64 8
  store ptr %39, ptr %69, align 8
  %70 = getelementptr i8, ptr %68, i64 16
  store ptr %57, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %68)
  %72 = load ptr, ptr %5, align 8
  %73 = load ptr, ptr %4, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %73)
  %75 = load i32, ptr %7, align 8
  %76 = sext i32 %75 to i64
  %77 = getelementptr ptr, ptr %73, i64 %76
  %78 = getelementptr i8, ptr %77, i64 24
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %79, align 8
  %81 = call { ptr } %80(ptr %72) #26
  %82 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %73)
  %83 = getelementptr i8, ptr %77, i64 32
  %84 = load ptr, ptr %83, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = call { ptr } %85(ptr %72) #26
  %87 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef %73)
  %88 = getelementptr i8, ptr %77, i64 40
  %89 = load ptr, ptr %88, align 8
  %90 = load ptr, ptr %89, align 8
  %91 = call i32 %90(ptr %72) #26
  %92 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMapIterator, ptr undef, ptr undef, i32 undef }, ptr %68, 1
  %93 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr undef, 2
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, i32 10, 3
  %95 = call ptr @bump_malloc(i64 noundef 16)
  %96 = getelementptr i8, ptr %95, i64 8
  store ptr null, ptr %96, align 8
  store ptr @buffer_typ, ptr %95, align 8
  %97 = call ptr @bump_malloc(i64 noundef 16)
  %98 = getelementptr i8, ptr %97, i64 8
  store ptr null, ptr %98, align 8
  store ptr @buffer_typ, ptr %97, align 8
  %99 = alloca [3 x ptr], align 8
  store ptr %95, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %99, i64 8
  store ptr %97, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %99, i64 16
  store ptr @_parameterization_i32, ptr %101, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %99)
  %103 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 16 dereferenceable(216) @CuckooMapIterator)
  %104 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %104, align 8
  %105 = getelementptr inbounds i8, ptr %104, i64 8
  store ptr @buffer_typ, ptr %105, align 8
  %106 = getelementptr inbounds i8, ptr %104, i64 16
  store ptr @i32_typ, ptr %106, align 8
  %107 = call ptr @behavior_wrapper(ptr noundef nonnull @CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32, { ptr, ptr, ptr, i32 } %94, ptr noundef nonnull align 8 dereferenceable(24) %104)
  call void %107({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr nonnull %99, { ptr } %81, { ptr } %86, i32 %91) #34
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @CuckooMapIterator, ptr %108, align 8
  %109 = getelementptr inbounds i8, ptr %108, i64 8
  store ptr %68, ptr %109, align 8
  %110 = getelementptr inbounds i8, ptr %108, i64 16
  %111 = getelementptr inbounds i8, ptr %108, i64 24
  store i32 10, ptr %111, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %108, ptr noundef nonnull align 8 dereferenceable(56) @Iterator)
  %112 = load ptr, ptr %108, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %112, 0
  %114 = load ptr, ptr %109, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %114, 1
  %116 = load ptr, ptr %110, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %116, 2
  %118 = load i32, ptr %111, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 %118, 3
  ret { ptr, ptr, ptr, i32 } %119
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_CuckooMapIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @CuckooMapIterator_field_CuckooMapIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @CuckooMapIterator_field_CuckooMapIterator_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @CuckooMapIterator_field_CuckooMapIterator_2(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMapIterator_B_next_from_table_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @CuckooMapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @CuckooMapIterator_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, { ptr } %4, i32 %5) #3 {
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(216) @CuckooMapIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  call void %20(ptr %11, { ptr } %3) #25
  %21 = load ptr, ptr %8, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %22)
  %24 = load i32, ptr %10, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 32
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, { ptr } %4) #25
  %31 = load ptr, ptr %8, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %32)
  %34 = load i32, ptr %10, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 40
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  call void %40(ptr %31, i32 %5) #25
  %41 = load ptr, ptr %8, align 8
  %42 = load ptr, ptr %7, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %42)
  %44 = load i32, ptr %10, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr ptr, ptr %42, i64 %45
  %47 = getelementptr i8, ptr %46, i64 48
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  call void %50(ptr %41, i32 0) #25
  %51 = load ptr, ptr %8, align 8
  %52 = load ptr, ptr %7, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %52)
  %54 = load i32, ptr %10, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 56
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  call void %60(ptr %51, i1 false) #25
  ret void
}

define { ptr, i160 } @CuckooMapIterator_next_from_table_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #3 {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract6, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract, ptr %11, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %8, ptr noundef nonnull align 16 dereferenceable(216) @CuckooMapIterator)
  %.fca.0.extract = extractvalue { ptr } %3, 0
  br label %12

12:                                               ; preds = %29, %4
  %13 = load ptr, ptr %9, align 8
  %14 = load ptr, ptr %8, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %14)
  %16 = load i32, ptr %11, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 48
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call i32 %21(ptr %13) #26
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %14)
  %24 = getelementptr i8, ptr %18, i64 40
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %13) #26
  %28 = icmp slt i32 %22, %27
  br i1 %28, label %29, label %.thread38

29:                                               ; preds = %12
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull %14)
  %31 = call i32 %21(ptr %13) #26
  %32 = sext i32 %31 to i64
  %33 = shl nsw i64 %32, 5
  %34 = getelementptr i8, ptr %.fca.0.extract, i64 %33
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr i8, ptr %34, i64 8
  %37 = load i160, ptr %36, align 4
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull %14)
  %39 = call i32 %21(ptr %13) #26
  %40 = add i32 %39, 1
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull %14)
  %42 = getelementptr i8, ptr %20, i64 8
  %43 = load ptr, ptr %42, align 8
  call void %43(ptr %13, i32 %40) #25
  %44 = icmp eq ptr %35, @nil_typ
  %45 = icmp eq ptr %35, null
  %.not30.not = or i1 %44, %45
  br i1 %.not30.not, label %12, label %46

46:                                               ; preds = %29
  store ptr %35, ptr %6, align 8
  %47 = getelementptr inbounds i8, ptr %6, i64 8
  store i160 %37, ptr %47, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %48 = load ptr, ptr %6, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = load ptr, ptr %47, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 1
  %52 = getelementptr inbounds i8, ptr %6, i64 16
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %53, 2
  %55 = getelementptr inbounds i8, ptr %6, i64 24
  %56 = load i32, ptr %55, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %56, 3
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %48)
  %60 = sext i32 %56 to i64
  %61 = getelementptr ptr, ptr %48, i64 %60
  %62 = getelementptr i8, ptr %61, i64 72
  %63 = load ptr, ptr %62, align 8
  %64 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %57, ptr noundef nonnull align 8 %5)
  %65 = call { ptr, ptr, ptr, i32 } %64({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr nonnull %5) #34
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %65, 0
  %.fca.1.extract9 = extractvalue { ptr, ptr, ptr, i32 } %65, 1
  %.fca.2.extract10 = extractvalue { ptr, ptr, ptr, i32 } %65, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %65, 3
  store ptr %.fca.0.extract8, ptr %7, align 8
  %66 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract9, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract10, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract11, ptr %68, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 8 dereferenceable(136) @Pair)
  %69 = load ptr, ptr %7, align 8
  %70 = load i160, ptr %66, align 8
  br label %.thread38

.thread38:                                        ; preds = %12, %46
  %.reg2mem26.sroa.3.0 = phi i160 [ %70, %46 ], [ undef, %12 ]
  %.reg2mem26.sroa.0.0 = phi ptr [ %69, %46 ], [ @nil_typ, %12 ]
  %.reload27.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem26.sroa.0.0, 0
  %.reload27.fca.1.insert = insertvalue { ptr, i160 } %.reload27.fca.0.insert, i160 %.reg2mem26.sroa.3.0, 1
  ret { ptr, i160 } %.reload27.fca.1.insert
}

define { ptr, i160 } @CuckooMapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract6, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %9, ptr noundef nonnull align 16 dereferenceable(216) @CuckooMapIterator)
  %13 = load ptr, ptr %10, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %14)
  %16 = load i32, ptr %12, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 56
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call i1 %21(ptr %13) #26
  br i1 %22, label %69, label %23

23:                                               ; preds = %3
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull %14)
  %25 = getelementptr i8, ptr %18, i64 24
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = call { ptr } %27(ptr %13) #26
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %14, 0
  %30 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %13, 1
  %31 = load ptr, ptr %11, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %16, 3
  %34 = call ptr @bump_malloc(i64 noundef 16)
  %35 = getelementptr i8, ptr %34, i64 8
  store ptr null, ptr %35, align 8
  store ptr @buffer_typ, ptr %34, align 8
  store ptr %34, ptr %4, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %4)
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull %14)
  %38 = getelementptr i8, ptr %18, i64 72
  %39 = load ptr, ptr %38, align 8
  store ptr @buffer_typ, ptr %5, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %33, ptr noundef nonnull align 8 dereferenceable(8) %5)
  %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull %4, { ptr } %28) #34
  %.fca.0.extract15 = extractvalue { ptr, i160 } %41, 0
  %42 = icmp ne ptr %.fca.0.extract15, @nil_typ
  %43 = icmp ne ptr %.fca.0.extract15, null
  %.not22.not.not = and i1 %42, %43
  br i1 %.not22.not.not, label %65, label %44

44:                                               ; preds = %23
  %45 = load ptr, ptr %10, align 8
  %46 = load ptr, ptr %9, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %46)
  %48 = load i32, ptr %12, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = getelementptr i8, ptr %50, i64 48
  %52 = load ptr, ptr %51, align 8
  %53 = getelementptr i8, ptr %52, i64 8
  %54 = load ptr, ptr %53, align 8
  call void %54(ptr %45, i32 0) #25
  %55 = load ptr, ptr %10, align 8
  %56 = load ptr, ptr %9, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %56)
  %58 = load i32, ptr %12, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = getelementptr i8, ptr %60, i64 56
  %62 = load ptr, ptr %61, align 8
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  call void %64(ptr %55, i1 true) #25
  %.pre = load ptr, ptr %10, align 8
  %.pre28 = load ptr, ptr %9, align 8
  %.pre29 = load i32, ptr %12, align 8
  %.pre30 = sext i32 %.pre29 to i64
  br label %69

65:                                               ; preds = %23
  %.fca.1.extract16 = extractvalue { ptr, i160 } %41, 1
  store ptr %.fca.0.extract15, ptr %6, align 8
  %66 = getelementptr inbounds i8, ptr %6, i64 8
  store i160 %.fca.1.extract16, ptr %66, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 8 dereferenceable(136) @Pair)
  %67 = load ptr, ptr %6, align 8
  %68 = load i160, ptr %66, align 8
  br label %92

69:                                               ; preds = %44, %3
  %.pre-phi = phi i64 [ %.pre30, %44 ], [ %17, %3 ]
  %70 = phi i32 [ %.pre29, %44 ], [ %16, %3 ]
  %71 = phi ptr [ %.pre28, %44 ], [ %14, %3 ]
  %72 = phi ptr [ %.pre, %44 ], [ %13, %3 ]
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %71)
  %74 = getelementptr ptr, ptr %71, i64 %.pre-phi
  %75 = getelementptr i8, ptr %74, i64 32
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = call { ptr } %77(ptr %72) #26
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %72, 1
  %81 = load ptr, ptr %11, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 2
  %83 = insertvalue { ptr, ptr, ptr, i32 } %82, i32 %70, 3
  %84 = call ptr @bump_malloc(i64 noundef 16)
  %85 = getelementptr i8, ptr %84, i64 8
  store ptr null, ptr %85, align 8
  store ptr @buffer_typ, ptr %84, align 8
  store ptr %84, ptr %7, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  %87 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef %71)
  %88 = getelementptr i8, ptr %74, i64 72
  %89 = load ptr, ptr %88, align 8
  store ptr @buffer_typ, ptr %8, align 8
  %90 = call ptr @behavior_wrapper(ptr %89, { ptr, ptr, ptr, i32 } %83, ptr noundef nonnull align 8 dereferenceable(8) %8)
  %91 = call { ptr, i160 } %90({ ptr, ptr, ptr, i32 } %83, { ptr, ptr, ptr, i32 } %83, ptr nonnull %7, { ptr } %78) #34
  %.fca.0.extract7 = extractvalue { ptr, i160 } %91, 0
  %.fca.1.extract8 = extractvalue { ptr, i160 } %91, 1
  br label %92

92:                                               ; preds = %65, %69
  %.reg2mem37.sroa.0.0 = phi ptr [ %.fca.0.extract7, %69 ], [ %67, %65 ]
  %.reg2mem37.sroa.3.0 = phi i160 [ %.fca.1.extract8, %69 ], [ %68, %65 ]
  %.reload38.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem37.sroa.0.0, 0
  %.reload38.fca.1.insert = insertvalue { ptr, i160 } %.reload38.fca.0.insert, i160 %.reg2mem37.sroa.3.0, 1
  ret { ptr, i160 } %.reload38.fca.1.insert
}

define { i64, i64 } @_data_size_Entry(ptr nocapture nofree readonly align 8 %0) #3 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr %6, ptr noundef nonnull align 8 dereferenceable(8) %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 20, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 20
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = call { i64, i64 } @size_wrapper(ptr %20, ptr noundef nonnull align 8 dereferenceable(8) %17)
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = call i64 @llvm.umax.i64(i64 %9, i64 %23)
  %25 = call i64 @llvm.umax.i64(i64 %24, i64 noundef 8), !range !1
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Entry_field_Entry_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #6 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Entry_field_Entry_1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Entry_B_init_keyK_valueV_primary_hashi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = getelementptr inbounds i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 %13, i64 noundef ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr i8, ptr %26, i64 160
  %28 = load ptr, ptr %27, align 8
  ret ptr %28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_key_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_primary_hash_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Entry_B_to_pair_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Entry_init_keyK_valueV_primary_hashi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) #3 {
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract13, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  call void %20(ptr %11, { ptr, i160 } %3) #25
  %21 = load ptr, ptr %8, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %22)
  %24 = load i32, ptr %10, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 32
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, { ptr, i160 } %4) #25
  %31 = load ptr, ptr %8, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %32)
  %34 = load i32, ptr %10, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 16
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  call void %40(ptr %31, i32 %5) #25
  ret void
}

define { ptr, i160 } @Entry_key_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #26
  ret { ptr, i160 } %17
}

define { ptr, i160 } @Entry_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 32
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #26
  ret { ptr, i160 } %17
}

define i32 @Entry_primary_hash_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #26
  ret i32 %17
}

define { ptr, ptr, ptr, i32 } @Entry_to_pair_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #3 {
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract27, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract28, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 16 dereferenceable(200) @Entry)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #26
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %9)
  %19 = getelementptr i8, ptr %13, i64 32
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call { ptr, i160 } %21(ptr %8) #26
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %9)
  %24 = load ptr, ptr %13, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %8)
  %26 = load ptr, ptr %5, align 8
  %27 = load ptr, ptr %4, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %27)
  %29 = load i32, ptr %7, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @typegetter_wrapper(ptr %33, ptr %26)
  %35 = alloca [3 x ptr], align 8
  store ptr @Pair, ptr %35, align 8
  %36 = getelementptr inbounds i8, ptr %35, i64 8
  store ptr %25, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %35, i64 16
  store ptr %34, ptr %37, align 8
  %38 = load ptr, ptr getelementptr inbounds (i8, ptr @Pair, i64 48), align 8
  %39 = call { i64, i64 } @size_wrapper(ptr %38, ptr noundef nonnull align 8 dereferenceable(24) %35)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  store ptr %25, ptr %41, align 8
  %42 = getelementptr i8, ptr %41, i64 8
  store ptr %34, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %41)
  %44 = load ptr, ptr %5, align 8
  %45 = load ptr, ptr %4, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %45)
  %47 = load i32, ptr %7, align 8
  %48 = sext i32 %47 to i64
  %49 = getelementptr ptr, ptr %45, i64 %48
  %50 = getelementptr i8, ptr %49, i64 24
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr, i160 } %52(ptr %44) #26
  %.fca.0.extract7 = extractvalue { ptr, i160 } %53, 0
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %45)
  %55 = getelementptr i8, ptr %49, i64 32
  %56 = load ptr, ptr %55, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call { ptr, i160 } %57(ptr %44) #26
  %.fca.0.extract = extractvalue { ptr, i160 } %58, 0
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Pair, ptr undef, ptr undef, i32 undef }, ptr %41, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %45)
  %63 = load ptr, ptr %49, align 8
  %64 = call ptr @typegetter_wrapper(ptr %63, ptr %44)
  %65 = load ptr, ptr %5, align 8
  %66 = load ptr, ptr %4, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef %66)
  %68 = load i32, ptr %7, align 8
  %69 = sext i32 %68 to i64
  %70 = getelementptr ptr, ptr %66, i64 %69
  %71 = getelementptr i8, ptr %70, i64 8
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @typegetter_wrapper(ptr %72, ptr %65)
  %74 = alloca [2 x ptr], align 8
  store ptr %64, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %74, i64 8
  store ptr %73, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %74)
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(136) @Pair)
  %78 = load ptr, ptr getelementptr inbounds (i8, ptr @Pair, i64 112), align 8
  %79 = alloca { ptr, ptr }, align 8
  store ptr %.fca.0.extract7, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %.fca.0.extract, ptr %80, align 8
  %81 = call ptr @behavior_wrapper(ptr %78, { ptr, ptr, ptr, i32 } %61, ptr noundef nonnull align 8 dereferenceable(16) %79)
  call void %81({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %74, { ptr, i160 } %53, { ptr, i160 } %58) #34
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Pair, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %82, i64 8
  store ptr %41, ptr %83, align 8
  %84 = getelementptr inbounds i8, ptr %82, i64 16
  %85 = getelementptr inbounds i8, ptr %82, i64 24
  store i32 10, ptr %85, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %82, ptr noundef nonnull align 8 dereferenceable(136) @Pair)
  %86 = load ptr, ptr %82, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %88 = load ptr, ptr %83, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 1
  %90 = load ptr, ptr %84, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 2
  %92 = load i32, ptr %85, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  ret { ptr, ptr, ptr, i32 } %93
}

define { ptr, i160 } @Entry_getter_value(ptr noundef nonnull align 8 dereferenceable(8) %0) #3 {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } @size_wrapper(ptr %5, ptr noundef nonnull align 8 dereferenceable(8) %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 20, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 20
  %14 = add i64 %13, %12
  %15 = getelementptr inbounds i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 72
  %19 = load ptr, ptr %18, align 8
  %20 = call { i64, i64 } @size_wrapper(ptr %19, ptr noundef nonnull align 8 dereferenceable(8) %16)
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = load ptr, ptr %15, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 56
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr, i160 } @box_wrapper(ptr %31, ptr %27, ptr noundef nonnull align 8 dereferenceable(8) %28)
  ret { ptr, i160 } %32
}

define void @Entry_setter_value(ptr noundef nonnull align 8 dereferenceable(8) %0, { ptr, i160 } %1) #3 {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr %6, ptr noundef nonnull align 8 dereferenceable(8) %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 20, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 20
  %15 = add i64 %14, %13
  %16 = getelementptr inbounds i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = call { i64, i64 } @size_wrapper(ptr %20, ptr noundef nonnull align 8 dereferenceable(8) %17)
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = load ptr, ptr %16, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 64
  %32 = load ptr, ptr %31, align 8
  call void @unbox_wrapper(ptr %32, { ptr, i160 } %1, ptr noundef nonnull align 8 dereferenceable(8) %29, ptr %28)
  ret void
}

define { ptr, i160 } @Entry_getter_key(ptr noundef nonnull align 8 dereferenceable(8) %0) #3 {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } @size_wrapper(ptr %5, ptr noundef nonnull align 8 dereferenceable(8) %2)
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 20, %7
  %9 = icmp eq i64 %8, 0
  %reass.sub = sub i64 %7, %8
  %10 = add i64 %reass.sub, 20
  %11 = select i1 %9, i64 20, i64 %10
  %12 = getelementptr i8, ptr %0, i64 %11
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } @box_wrapper(ptr %16, ptr %12, ptr noundef nonnull align 8 dereferenceable(8) %13)
  ret { ptr, i160 } %17
}

define void @Entry_setter_key(ptr noundef nonnull align 8 dereferenceable(8) %0, { ptr, i160 } %1) #3 {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } @size_wrapper(ptr %6, ptr noundef nonnull align 8 dereferenceable(8) %3)
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 20, %8
  %10 = icmp eq i64 %9, 0
  %reass.sub = sub i64 %8, %9
  %11 = add i64 %reass.sub, 20
  %12 = select i1 %10, i64 20, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 64
  %17 = load ptr, ptr %16, align 8
  call void @unbox_wrapper(ptr %17, { ptr, i160 } %1, ptr noundef nonnull align 8 dereferenceable(8) %14, ptr %13)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Entry_getter_primary_hash(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Entry_setter_primary_hash(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @CuckooMapIterator_getter_on_second(ptr nocapture nofree readonly %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMapIterator_setter_on_second(ptr nocapture nofree writeonly %0, i1 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 48
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @CuckooMapIterator_getter_index(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 44
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMapIterator_setter_index(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 44
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @CuckooMapIterator_getter_table_len(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMapIterator_setter_table_len(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @CuckooMapIterator_getter_map_table2(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMapIterator_setter_map_table2(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 32
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @CuckooMapIterator_getter_map_table1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMapIterator_setter_map_table1(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_KeyNotFound(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @KeyNotFound_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @KeyNotFound_B_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #24
  %4 = getelementptr inbounds i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @String, align 8
  %15 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 noundef ptrtoint (ptr @String to i64), ptr %13)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr i8, ptr %16, i64 160
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

define ptr @KeyNotFound_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #3 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #24
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @String, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 noundef ptrtoint (ptr @String to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 144
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @KeyNotFound_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @KeyNotFound_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #2 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @KeyNotFound_getter_message(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @KeyNotFound_setter_message(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @KeyNotFound_getter_file_name(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @KeyNotFound_setter_file_name(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @KeyNotFound_getter_line_number(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %0) #6 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @KeyNotFound_setter_line_number(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %0, i32 %1) #7 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Map(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 24, i64 8 }
}

define { ptr, i160 } @_box_union_typ(ptr nocapture nofree readonly %0, ptr %1) #3 {
  %.sroa.3 = alloca [24 x i8], align 8
  %3 = call { i64, i64 } @size_wrapper(ptr noundef nonnull @_data_size_union_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp eq i64 %4, 32
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = load ptr, ptr %0, align 8
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i160, ptr %8, align 4
  store i160 %9, ptr %.sroa.3, align 8
  br label %15

10:                                               ; preds = %2
  %11 = icmp slt i64 %4, 17
  br i1 %11, label %14, label %12

12:                                               ; preds = %10
  %13 = call ptr @bump_malloc(i64 %4)
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %13, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  store ptr %13, ptr %.sroa.3, align 8
  br label %15

14:                                               ; preds = %10
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %.sroa.3, ptr nocapture nofree readonly align 1 %0, i64 %4, i1 noundef false)
  br label %15

15:                                               ; preds = %14, %12, %6
  %.sroa.0.0 = phi ptr [ %7, %6 ], [ @union_typ, %14 ], [ @union_typ, %12 ]
  %16 = insertvalue { ptr, i160 } undef, ptr %.sroa.0.0, 0
  %.sroa.3.0..sroa.3.0..sroa.3.0..sroa.3.8. = load i160, ptr %.sroa.3, align 8
  %17 = insertvalue { ptr, i160 } %16, i160 %.sroa.3.0..sroa.3.0..sroa.3.0..sroa.3.8., 1
  ret { ptr, i160 } %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @i32_hasher(i32 %0) #1 {
  %2 = add i32 %0, 2127912214
  %3 = shl i32 %0, 12
  %4 = add i32 %2, %3
  %5 = ashr i32 %4, 19
  %6 = xor i32 %4, %5
  %7 = xor i32 %6, -949894596
  %8 = add i32 %7, 374761393
  %9 = shl i32 %7, 5
  %10 = add i32 %8, %9
  %11 = add i32 %10, -744332180
  %12 = shl i32 %10, 9
  %13 = xor i32 %11, %12
  %14 = add i32 %13, -42973499
  %15 = shl i32 %13, 3
  %16 = add i32 %14, %15
  %17 = ashr i32 %16, 16
  %18 = xor i32 %16, %17
  %19 = xor i32 %18, -1252372727
  ret i32 %19
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @CuckooMap_getter_eq(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMap_setter_eq(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @CuckooMap_getter_hasher(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMap_setter_hasher(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @CuckooMap_getter_size(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 44
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMap_setter_size(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 44
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @CuckooMap_getter_table_len(ptr nocapture nofree readonly align 4 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMap_setter_table_len(ptr nocapture nofree writeonly align 4 %0, i32 %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @CuckooMap_getter_table2(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMap_setter_table2(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 32
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @CuckooMap_getter_table1(ptr nocapture nofree readonly align 8 %0) #6 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @CuckooMap_setter_table1(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #7 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_HashMap(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 24, i64 8 }
}

define void @report_exception({ ptr } %0) #3 {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr } %0, 0
  %4 = getelementptr i8, ptr %.fca.0.extract2, i64 48
  %5 = load { ptr, i160 }, ptr %4, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %5, 0
  %6 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %7 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %8 = getelementptr i8, ptr %.fca.0.extract, i64 24
  %9 = getelementptr i8, ptr %.fca.0.extract, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 noundef 9027164862567808692, i64 noundef ptrtoint (ptr @Exception to i64), ptr %13)
  br i1 %14, label %15, label %._crit_edge

15:                                               ; preds = %1
  %.fca.1.extract = extractvalue { ptr, i160 } %5, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %16 = getelementptr inbounds i8, ptr %3, i64 8
  store i160 %.fca.1.extract, ptr %16, align 8
  call void @set_offset(ptr noundef nonnull align 8 dereferenceable(32) %3, ptr noundef nonnull align 16 dereferenceable(184) @Exception)
  %17 = load ptr, ptr %3, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %17, 0
  %19 = load ptr, ptr %16, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %19, 1
  %21 = getelementptr inbounds i8, ptr %3, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 2
  %24 = getelementptr inbounds i8, ptr %3, i64 24
  %25 = load i32, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %25, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef %17)
  %29 = sext i32 %25 to i64
  %30 = getelementptr ptr, ptr %17, i64 %29
  %31 = getelementptr i8, ptr %30, i64 48
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @behavior_wrapper(ptr %32, { ptr, ptr, ptr, i32 } %26, ptr noundef nonnull align 8 %2)
  call void %33({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull %2) #34
  br label %._crit_edge

._crit_edge:                                      ; preds = %1, %15
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i1 @i32_eq(i32 %0, i32 %1) #1 {
  %3 = icmp eq i32 %0, %1
  ret i1 %3
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) "disable-tail-calls"="true" }
attributes #2 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #3 = { "disable-tail-calls"="true" }
attributes #4 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) "disable-tail-calls"="true" }
attributes #7 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) "disable-tail-calls"="true" }
attributes #8 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #9 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #10 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #11 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #12 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #13 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #14 = { noinline }
attributes #15 = { noreturn nounwind }
attributes #16 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #17 = { nocallback nofree nosync nounwind willreturn }
attributes #18 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #19 = { noinline nounwind memory(readwrite) }
attributes #20 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #21 = { nofree nounwind "disable-tail-calls"="true" }
attributes #22 = { nofree nounwind }
attributes #23 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) "disable-tail-calls"="true" }
attributes #24 = { nofree willreturn }
attributes #25 = { nounwind willreturn memory(argmem: readwrite) }
attributes #26 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #27 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #28 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #29 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #30 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #31 = { mustprogress nofree nosync nounwind willreturn }
attributes #32 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #33 = { nounwind memory(readwrite) }
attributes #34 = { nounwind }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i64 8, i64 0}
