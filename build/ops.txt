def main():
    r0, source_text, r1 :: object
    r2 :: str
    r3, r4 :: object
    r5 :: str
    r6 :: dict
    r7 :: str
    r8 :: object
    r9 :: float
    r10 :: bit
    r11, r12, r13 :: object
    r14, r15, r16 :: str
    r17 :: object
    r18 :: str
    r19 :: object
    r20 :: object[1]
    r21 :: object_ptr
    r22 :: object
    r23 :: str
    r24 :: dict
    r25 :: str
    r26 :: object
    r27 :: list
    r28 :: object
    r29, r30 :: str
    r31 :: object
    r32 :: str
    r33 :: object
    r34 :: object[1]
    r35 :: object_ptr
    r36 :: object
    r37 :: dict
    r38 :: str
    r39 :: object
    r40 :: list
    r41, r42 :: object
    r43 :: str
    r44 :: object
    r45 :: object[1]
    r46 :: object_ptr
    r47, r48 :: object
    r49 :: str
    r50 :: object
    r51 :: str
    r52 :: object
    r53 :: object[1]
    r54 :: object_ptr
    r55 :: object
    r56 :: bool
    r57 :: str
    r58 :: object[1]
    r59 :: object_ptr
    r60 :: object
    r61, r62 :: tuple[object, object, object]
    r63, r64, r65 :: object
    r66 :: object[4]
    r67 :: object_ptr
    r68 :: object
    r69 :: i32
    r70 :: bit
    r71 :: bool
    r72 :: bit
    r73, r74, r75 :: tuple[object, object, object]
    r76 :: object
    r77 :: object[4]
    r78 :: object_ptr
    r79 :: object
    r80 :: bit
    r81 :: dict
    r82 :: str
    r83 :: object
    r84, r85, r86 :: str
    r87 :: object
    r88 :: object[4]
    r89 :: object_ptr
    r90, r91 :: object
    r92 :: str
    r93 :: bool
    r94 :: object[2]
    r95 :: object_ptr
    r96 :: object
    r97 :: bool
    r98 :: dict
    r99 :: str
    r100, r101 :: object
    r102 :: str
    r103 :: object[2]
    r104 :: object_ptr
    r105 :: object
    r106 :: str
    r107 :: object[1]
    r108 :: object_ptr
    r109, module :: object
    r110 :: dict
    r111 :: str
    r112, r113, stringio :: object
    r114 :: dict
    r115 :: str
    r116 :: object
    r117 :: object[1]
    r118 :: object_ptr
    r119 :: object
    r120 :: str
    r121 :: object[2]
    r122 :: object_ptr
    r123 :: object
    r124 :: str
    r125 :: object[1]
    r126 :: object_ptr
    r127 :: object
    r128 :: str
    r129 :: object[1]
    r130 :: object_ptr
    r131 :: object
    r132, r133 :: str
    r134 :: object[2]
    r135 :: object_ptr
    r136, module_str :: object
    r137, r138 :: str
    r139 :: object
    r140 :: str
    r141 :: object
    r142 :: object[2]
    r143 :: object_ptr
    r144, r145 :: object
    r146 :: str
    r147 :: object
    r148 :: str
    r149 :: object
    r150 :: object[1]
    r151 :: object_ptr
    r152 :: object
    r153 :: bool
    r154 :: str
    r155 :: object[2]
    r156 :: object_ptr
    r157 :: object
    r158, r159 :: tuple[object, object, object]
    r160, r161, r162 :: object
    r163 :: object[4]
    r164 :: object_ptr
    r165 :: object
    r166 :: i32
    r167 :: bit
    r168 :: bool
    r169 :: bit
    r170, r171, r172 :: tuple[object, object, object]
    r173 :: object
    r174 :: object[4]
    r175 :: object_ptr
    r176 :: object
    r177 :: bit
    r178 :: object
    r179 :: str
    r180, r181 :: object
    r182 :: str
    r183 :: object
    r184, r185, r186 :: str
    r187 :: object
    r188 :: str
    r189 :: object
    r190 :: object[1]
    r191 :: object_ptr
    r192 :: object
    r193 :: dict
    r194 :: str
    r195 :: object
    r196 :: object[1]
    r197 :: object_ptr
    r198 :: object
    r199 :: dict
    r200 :: str
    r201, r202 :: object
    r203 :: dict
    r204 :: str
    r205 :: object
    r206 :: object[1]
    r207 :: object_ptr
    r208 :: object
    r209 :: str
    r210 :: object[2]
    r211 :: object_ptr
    r212 :: object
    r213 :: str
    r214 :: object[1]
    r215 :: object_ptr
    r216 :: object
    r217 :: str
    r218 :: object[1]
    r219 :: object_ptr
    r220 :: object
    r221, r222 :: str
    r223 :: object[2]
    r224 :: object_ptr
    r225 :: object
    r226, r227 :: str
    r228 :: object
    r229 :: str
    r230 :: object
    r231 :: object[2]
    r232 :: object_ptr
    r233, r234 :: object
    r235 :: str
    r236 :: object
    r237 :: str
    r238 :: object
    r239 :: object[1]
    r240 :: object_ptr
    r241 :: object
    r242 :: bool
    r243 :: str
    r244 :: object[2]
    r245 :: object_ptr
    r246 :: object
    r247, r248 :: tuple[object, object, object]
    r249, r250, r251 :: object
    r252 :: object[4]
    r253 :: object_ptr
    r254 :: object
    r255 :: i32
    r256 :: bit
    r257 :: bool
    r258 :: bit
    r259, r260, r261 :: tuple[object, object, object]
    r262 :: object
    r263 :: object[4]
    r264 :: object_ptr
    r265 :: object
    r266 :: bit
    r267, r268, r269, r270, r271, r272, r273, r274, r275, r276, r277, r278, r279 :: str
    r280 :: list
    r281 :: str
    cmd, r282 :: object
    r283 :: str
    r284, r285 :: object
    r286 :: str
    r287 :: object
    r288, r289, r290 :: str
    r291 :: object
    r292 :: str
    r293 :: object
    r294 :: object[1]
    r295 :: object_ptr
    r296, r297 :: object
    r298 :: str
    r299, r300, r301, r302 :: object
    r303 :: object[4]
    r304 :: object_ptr
    r305, r306 :: object
    r307 :: str
    r308, parsed_module_str, r309 :: object
    r310 :: str
    r311, r312 :: object
    r313 :: str
    r314 :: object
    r315, r316, r317 :: str
    r318 :: object
    r319 :: str
    r320 :: object
    r321 :: object[1]
    r322 :: object_ptr
    r323 :: object
    r324 :: dict
    r325 :: str
    r326, r327 :: object
    r328 :: dict
    r329 :: str
    r330 :: object
    r331 :: dict
    r332 :: str
    r333 :: object
    r334 :: str
    r335 :: object
    r336 :: dict
    r337 :: str
    r338 :: object
    r339 :: str
    r340 :: object
    r341 :: dict
    r342 :: str
    r343 :: object
    r344 :: str
    r345 :: object
    r346 :: dict
    r347 :: str
    r348 :: object
    r349 :: str
    r350 :: object
    r351 :: dict
    r352 :: str
    r353 :: object
    r354 :: str
    r355 :: object
    r356 :: dict
    r357 :: str
    r358 :: object
    r359 :: str
    r360 :: object
    r361 :: dict
    r362 :: str
    r363 :: object
    r364 :: str
    r365 :: object
    r366 :: list
    r367, r368, r369, r370, r371, r372, r373, r374, r375 :: ptr
    r376 :: short_int
    r377 :: ptr
    r378 :: native_int
    r379 :: short_int
    r380 :: bit
    r381 :: object
    r382 :: str
    r383 :: object[2]
    r384 :: object_ptr
    r385 :: object
    r386 :: short_int
    r387, r388, r389 :: str
    r390 :: object[3]
    r391 :: object_ptr
    r392 :: object
    r393, r394, r395 :: str
    r396 :: object[3]
    r397 :: object_ptr
    r398 :: object
    r399, r400, r401 :: str
    r402 :: object[3]
    r403 :: object_ptr
    r404 :: object
    r405, r406, r407 :: str
    r408 :: object[3]
    r409 :: object_ptr
    r410 :: object
    r411, r412, r413 :: str
    r414 :: object[3]
    r415 :: object_ptr
    r416 :: object
    r417, r418, r419 :: str
    r420 :: object[3]
    r421 :: object_ptr
    r422 :: object
    r423, r424, r425 :: str
    r426 :: object[3]
    r427 :: object_ptr
    r428 :: object
    r429, r430, r431 :: str
    r432 :: object[3]
    r433 :: object_ptr
    r434 :: object
    r435, r436, r437 :: str
    r438 :: object[3]
    r439 :: object_ptr
    r440 :: object
    r441 :: dict
    r442 :: str
    r443 :: object
    r444 :: object[2]
    r445 :: object_ptr
    r446 :: object
    r447 :: str
    r448 :: object[1]
    r449 :: object_ptr
    r450, parsed_module :: object
    r451 :: dict
    r452 :: str
    r453 :: object
    r454 :: object[1]
    r455 :: object_ptr
    r456 :: object
    r457 :: dict
    r458 :: str
    r459, r460 :: object
    r461 :: dict
    r462 :: str
    r463 :: object
    r464 :: object[1]
    r465 :: object_ptr
    r466 :: object
    r467 :: str
    r468 :: object[2]
    r469 :: object_ptr
    r470 :: object
    r471, r472 :: str
    r473 :: object
    r474 :: str
    r475 :: object
    r476 :: object[2]
    r477 :: object_ptr
    r478, r479 :: object
    r480 :: str
    r481 :: object
    r482 :: str
    r483 :: object
    r484 :: object[1]
    r485 :: object_ptr
    r486 :: object
    r487 :: bool
    r488 :: str
    r489 :: object[1]
    r490 :: object_ptr
    r491 :: object
    r492 :: str
    r493 :: object[1]
    r494 :: object_ptr
    r495 :: object
    r496, r497 :: str
    r498 :: object[2]
    r499 :: object_ptr
    r500 :: object
    r501 :: str
    r502 :: object[2]
    r503 :: object_ptr
    r504 :: object
    r505, r506 :: tuple[object, object, object]
    r507, r508, r509 :: object
    r510 :: object[4]
    r511 :: object_ptr
    r512 :: object
    r513 :: i32
    r514 :: bit
    r515 :: bool
    r516 :: bit
    r517, r518, r519 :: tuple[object, object, object]
    r520 :: object
    r521 :: object[4]
    r522 :: object_ptr
    r523 :: object
    r524 :: bit
    r525, r526, r527, r528, r529, r530, r531, r532, r533, r534, r535, r536, r537, r538, r539, r540 :: str
    r541 :: list
    r542 :: str
    cmd1 :: object
    r543, r544, r545, r546, r547 :: str
    r548 :: list
    r549, r550, r551, r552, r553, r554 :: ptr
    cmd2 :: object
    r555, r556, r557, r558, r559 :: str
    r560 :: list
    r561, r562, r563, r564, r565, r566 :: ptr
    cmd3 :: object
    r567, r568, r569, r570, r571, r572, r573 :: str
    r574 :: list
    r575, r576, r577, r578, r579, r580, r581, r582 :: ptr
    cmd4 :: object
    r583, r584, r585, r586, r587, r588, r589, r590, r591, r592 :: str
    r593 :: list
    r594, r595, r596, r597, r598, r599, r600, r601, r602, r603 :: ptr
    r604 :: str
    cmd5, r605 :: object
    r606 :: str
    r607, r608 :: object
    r609 :: str
    r610 :: object
    r611, r612, r613 :: str
    r614 :: object
    r615 :: str
    r616 :: object
    r617 :: object[1]
    r618 :: object_ptr
    r619, r620 :: object
    r621 :: str
    r622, r623, r624 :: object
    r625 :: object[3]
    r626 :: object_ptr
    r627, r628, r629 :: object
    r630 :: str
    r631, r632 :: object
    r633 :: str
    r634 :: object
    r635, r636, r637 :: str
    r638 :: object
    r639 :: str
    r640 :: object
    r641 :: object[1]
    r642 :: object_ptr
    r643, r644 :: object
    r645 :: str
    r646 :: object
    r647 :: object[1]
    r648 :: object_ptr
    r649, r650 :: object
    r651 :: str
    r652, r653 :: object
    r654 :: str
    r655 :: object
    r656, r657, r658 :: str
    r659 :: object
    r660 :: str
    r661 :: object
    r662 :: object[1]
    r663 :: object_ptr
    r664, r665 :: object
    r666 :: str
    r667 :: object
    r668 :: object[1]
    r669 :: object_ptr
    r670, r671 :: object
    r672 :: str
    r673, r674 :: object
    r675 :: str
    r676 :: object
    r677, r678, r679 :: str
    r680 :: object
    r681 :: str
    r682 :: object
    r683 :: object[1]
    r684 :: object_ptr
    r685, r686 :: object
    r687 :: str
    r688 :: object
    r689 :: object[1]
    r690 :: object_ptr
    r691, r692 :: object
    r693 :: str
    r694, r695 :: object
    r696 :: str
    r697 :: object
    r698, r699, r700 :: str
    r701 :: object
    r702 :: str
    r703 :: object
    r704 :: object[1]
    r705 :: object_ptr
    r706, r707 :: object
    r708 :: str
    r709, r710, r711 :: object
    r712 :: object[3]
    r713 :: object_ptr
    r714, r715, r716 :: object
    r717 :: str
    r718, r719 :: object
    r720 :: str
    r721 :: object
    r722, r723, r724 :: str
    r725 :: object
    r726 :: str
    r727 :: object
    r728 :: object[1]
    r729 :: object_ptr
    r730 :: object
    r731 :: str
    r732 :: dict
    r733 :: str
    r734 :: object
    r735 :: float
    r736 :: bit
    r737, r738, r739 :: object
    r740, r741, r742 :: str
    r743 :: object
    r744 :: str
    r745 :: object
    r746 :: object[1]
    r747 :: object_ptr
    r748 :: object
    r749 :: str
    r750 :: object
    r751 :: str
    r752 :: object
    r753 :: object[1]
    r754 :: object_ptr
    r755, r756, r757 :: object
L0:
    r0 = <error> :: object
    source_text = r0
    r1 = time :: module
    r2 = 'time'
    r3 = CPyObject_GetAttr(r1, r2)
    if is_error(r3) goto L305 (error at main:18) else goto L1
L1:
    r4 = _PyObject_Vectorcall(r3, 0, 0, 0)
    dec_ref r3
    if is_error(r4) goto L305 (error at main:18) else goto L2
L2:
    r5 = 'Time to import: '
    r6 = compiler.globals :: static
    r7 = 'start_time'
    r8 = CPyDict_GetItem(r6, r7)
    if is_error(r8) goto L306 (error at main:19) else goto L3
L3:
    r9 = unbox(float, r8)
    dec_ref r8
    r10 = r9 == -113.0
    if r10 goto L5 else goto L4 :: bool
L4:
    r11 = box(float, r9)
    r12 = PyNumber_Subtract(r4, r11)
    dec_ref r11
    if is_error(r12) goto L306 (error at main:19) else goto L6
L5:
    r13 = PyErr_Occurred()
    if not is_error(r13) goto L306 (error at main:19) else goto L4
L6:
    r14 = PyObject_Str(r12)
    dec_ref r12
    if is_error(r14) goto L306 (error at main:19) else goto L7
L7:
    r15 = ' seconds'
    r16 = CPyStr_Build(3, r5, r14, r15)
    dec_ref r14
    if is_error(r16) goto L306 (error at main:19) else goto L8
L8:
    r17 = builtins :: module
    r18 = 'print'
    r19 = CPyObject_GetAttr(r17, r18)
    if is_error(r19) goto L307 (error at main:19) else goto L9
L9:
    r20 = [r16]
    r21 = load_address r20
    r22 = _PyObject_Vectorcall(r19, r21, 1, 0)
    dec_ref r19
    if is_error(r22) goto L307 (error at main:19) else goto L308
L10:
    dec_ref r16
    r23 = 'compiling '
    r24 = compiler.globals :: static
    r25 = 'argv'
    r26 = CPyDict_GetItem(r24, r25)
    if is_error(r26) goto L306 (error at main:20) else goto L11
L11:
    r27 = borrow cast(list, r26)
    if is_error(r27) goto L309 (error at main:20) else goto L12
L12:
    r28 = CPyList_GetItemShort(r27, 2)
    if is_error(r28) goto L309 (error at main:20) else goto L13
L13:
    dec_ref r26
    r29 = PyObject_Str(r28)
    dec_ref r28
    if is_error(r29) goto L306 (error at main:20) else goto L14
L14:
    r30 = CPyStr_Build(2, r23, r29)
    dec_ref r29
    if is_error(r30) goto L306 (error at main:20) else goto L15
L15:
    r31 = builtins :: module
    r32 = 'print'
    r33 = CPyObject_GetAttr(r31, r32)
    if is_error(r33) goto L310 (error at main:20) else goto L16
L16:
    r34 = [r30]
    r35 = load_address r34
    r36 = _PyObject_Vectorcall(r33, r35, 1, 0)
    dec_ref r33
    if is_error(r36) goto L310 (error at main:20) else goto L311
L17:
    dec_ref r30
    r37 = compiler.globals :: static
    r38 = 'argv'
    r39 = CPyDict_GetItem(r37, r38)
    if is_error(r39) goto L306 (error at main:21) else goto L18
L18:
    r40 = borrow cast(list, r39)
    if is_error(r40) goto L312 (error at main:21) else goto L19
L19:
    r41 = CPyList_GetItemShort(r40, 2)
    if is_error(r41) goto L312 (error at main:21) else goto L20
L20:
    dec_ref r39
    r42 = builtins :: module
    r43 = 'open'
    r44 = CPyObject_GetAttr(r42, r43)
    if is_error(r44) goto L313 (error at main:21) else goto L21
L21:
    r45 = [r41]
    r46 = load_address r45
    r47 = _PyObject_Vectorcall(r44, r46, 1, 0)
    dec_ref r44
    if is_error(r47) goto L313 (error at main:21) else goto L22
L22:
    dec_ref r41
    r48 = PyObject_Type(r47)
    r49 = '__exit__'
    r50 = CPyObject_GetAttr(r48, r49)
    if is_error(r50) goto L314 (error at main:21) else goto L23
L23:
    r51 = '__enter__'
    r52 = CPyObject_GetAttr(r48, r51)
    dec_ref r48
    if is_error(r52) goto L315 (error at main:21) else goto L24
L24:
    r53 = [r47]
    r54 = load_address r53
    r55 = _PyObject_Vectorcall(r52, r54, 1, 0)
    dec_ref r52
    if is_error(r55) goto L315 (error at main:21) else goto L25
L25:
    r56 = 1
L26:
    r57 = 'read'
    r58 = [r55]
    r59 = load_address r58
    r60 = PyObject_VectorcallMethod(r57, r59, 9223372036854775809, 0)
    if is_error(r60) goto L316 (error at main:21) else goto L317
L27:
    dec_ref r55
    source_text = r60
    goto L36
L28:
    r61 = CPy_CatchError()
    r56 = 0
    r62 = CPy_GetExcInfo()
    r63 = r62[0]
    r64 = r62[1]
    r65 = r62[2]
    dec_ref r62
    r66 = [r47, r63, r64, r65]
    r67 = load_address r66
    r68 = _PyObject_Vectorcall(r50, r67, 4, 0)
    if is_error(r68) goto L318 (error at main:21) else goto L29
L29:
    dec_ref r63
    dec_ref r64
    dec_ref r65
    r69 = PyObject_IsTrue(r68)
    dec_ref r68
    r70 = r69 >= 0 :: signed
    if not r70 goto L34 (error at main:21) else goto L30 :: bool
L30:
    r71 = truncate r69: i32 to builtins.bool
    if r71 goto L33 else goto L31 :: bool
L31:
    CPy_Reraise()
    if not 0 goto L34 else goto L319 :: bool
L32:
    unreachable
L33:
    CPy_RestoreExcInfo(r61)
    dec_ref r61
    goto L36
L34:
    CPy_RestoreExcInfo(r61)
    dec_ref r61
    r72 = CPy_KeepPropagating()
    if not r72 goto L37 else goto L320 :: bool
L35:
    unreachable
L36:
    r73 = <error> :: tuple[object, object, object]
    r74 = r73
    goto L38
L37:
    r75 = CPy_CatchError()
    r74 = r75
L38:
    if r56 goto L39 else goto L321 :: bool
L39:
    r76 = load_address _Py_NoneStruct
    r77 = [r47, r76, r76, r76]
    r78 = load_address r77
    r79 = _PyObject_Vectorcall(r50, r78, 4, 0)
    dec_ref r50
    if is_error(r79) goto L322 (error at main:21) else goto L323
L40:
    dec_ref r47
L41:
    if is_error(r74) goto L48 else goto L324
L42:
    CPy_Reraise()
    if not 0 goto L44 else goto L325 :: bool
L43:
    unreachable
L44:
    if is_error(r74) goto L46 else goto L45
L45:
    CPy_RestoreExcInfo(r74)
    xdec_ref r74
L46:
    r80 = CPy_KeepPropagating()
    if not r80 goto L304 else goto L47 :: bool
L47:
    unreachable
L48:
    r81 = compiler.globals :: static
    r82 = 'Lark'
    r83 = CPyDict_GetItem(r81, r82)
    if is_error(r83) goto L306 (error at main:23) else goto L49
L49:
    r84 = 'grammar.lark'
    r85 = 'lalr'
    r86 = 'open'
    r87 = box(bool, 1)
    r88 = [r83, r84, r85, r87]
    r89 = load_address r88
    r90 = ('parser', 'propagate_positions')
    r91 = PyObject_VectorcallMethod(r86, r89, 9223372036854775810, r90)
    if is_error(r91) goto L326 (error at main:23) else goto L50
L50:
    dec_ref r83
    r92 = 'parse'
    if is_error(source_text) goto L327 else goto L53
L51:
    r93 = raise UnboundLocalError('local variable "source_text" referenced before assignment')
    if not r93 goto L304 (error at main:-1) else goto L52 :: bool
L52:
    unreachable
L53:
    r94 = [r91, source_text]
    r95 = load_address r94
    r96 = PyObject_VectorcallMethod(r92, r95, 9223372036854775810, 0)
    if is_error(r96) goto L328 (error at main:24) else goto L54
L54:
    if is_error(source_text) goto L329 else goto L57
L55:
    r97 = raise UnboundLocalError('local variable "source_text" referenced before assignment')
    if not r97 goto L304 (error at main:-1) else goto L56 :: bool
L56:
    unreachable
L57:
    dec_ref r91
    xdec_ref source_text
    r98 = compiler.globals :: static
    r99 = 'CSTTransformer'
    r100 = CPyDict_GetItem(r98, r99)
    if is_error(r100) goto L330 (error at main:26) else goto L58
L58:
    r101 = _PyObject_Vectorcall(r100, 0, 0, 0)
    dec_ref r100
    if is_error(r101) goto L330 (error at main:26) else goto L59
L59:
    r102 = 'transform'
    r103 = [r101, r96]
    r104 = load_address r103
    r105 = PyObject_VectorcallMethod(r102, r104, 9223372036854775810, 0)
    if is_error(r105) goto L331 (error at main:26) else goto L60
L60:
    dec_ref r101
    dec_ref r96
    r106 = 'codegen'
    r107 = [r105]
    r108 = load_address r107
    r109 = PyObject_VectorcallMethod(r106, r108, 9223372036854775809, 0)
    if is_error(r109) goto L332 (error at main:27) else goto L61
L61:
    dec_ref r105
    module = r109
    r110 = compiler.globals :: static
    r111 = 'StringIO'
    r112 = CPyDict_GetItem(r110, r111)
    if is_error(r112) goto L333 (error at main:29) else goto L62
L62:
    r113 = _PyObject_Vectorcall(r112, 0, 0, 0)
    dec_ref r112
    if is_error(r113) goto L333 (error at main:29) else goto L63
L63:
    stringio = r113
    r114 = compiler.globals :: static
    r115 = 'Printer'
    r116 = CPyDict_GetItem(r114, r115)
    if is_error(r116) goto L334 (error at main:30) else goto L64
L64:
    r117 = [stringio]
    r118 = load_address r117
    r119 = _PyObject_Vectorcall(r116, r118, 1, 0)
    dec_ref r116
    if is_error(r119) goto L334 (error at main:30) else goto L65
L65:
    r120 = 'print'
    r121 = [r119, module]
    r122 = load_address r121
    r123 = PyObject_VectorcallMethod(r120, r122, 9223372036854775810, 0)
    if is_error(r123) goto L335 (error at main:30) else goto L336
L66:
    dec_ref r119
    r124 = 'getvalue'
    r125 = [stringio]
    r126 = load_address r125
    r127 = PyObject_VectorcallMethod(r124, r126, 9223372036854775809, 0)
    if is_error(r127) goto L334 (error at main:31) else goto L67
L67:
    dec_ref stringio
    r128 = 'encode'
    r129 = [r127]
    r130 = load_address r129
    r131 = PyObject_VectorcallMethod(r128, r130, 9223372036854775809, 0)
    if is_error(r131) goto L337 (error at main:31) else goto L68
L68:
    dec_ref r127
    r132 = 'unicode_escape'
    r133 = 'decode'
    r134 = [r131, r132]
    r135 = load_address r134
    r136 = PyObject_VectorcallMethod(r133, r135, 9223372036854775810, 0)
    if is_error(r136) goto L338 (error at main:31) else goto L69
L69:
    dec_ref r131
    module_str = r136
    r137 = 'in.mlir'
    r138 = 'w'
    r139 = builtins :: module
    r140 = 'open'
    r141 = CPyObject_GetAttr(r139, r140)
    if is_error(r141) goto L339 (error at main:32) else goto L70
L70:
    r142 = [r137, r138]
    r143 = load_address r142
    r144 = _PyObject_Vectorcall(r141, r143, 2, 0)
    dec_ref r141
    if is_error(r144) goto L339 (error at main:32) else goto L71
L71:
    r145 = PyObject_Type(r144)
    r146 = '__exit__'
    r147 = CPyObject_GetAttr(r145, r146)
    if is_error(r147) goto L340 (error at main:32) else goto L72
L72:
    r148 = '__enter__'
    r149 = CPyObject_GetAttr(r145, r148)
    dec_ref r145
    if is_error(r149) goto L341 (error at main:32) else goto L73
L73:
    r150 = [r144]
    r151 = load_address r150
    r152 = _PyObject_Vectorcall(r149, r151, 1, 0)
    dec_ref r149
    if is_error(r152) goto L341 (error at main:32) else goto L74
L74:
    r153 = 1
L75:
    r154 = 'write'
    r155 = [r152, module_str]
    r156 = load_address r155
    r157 = PyObject_VectorcallMethod(r154, r156, 9223372036854775810, 0)
    if is_error(r157) goto L342 (error at main:32) else goto L343
L76:
    dec_ref r152
    dec_ref module_str
    goto L85
L77:
    r158 = CPy_CatchError()
    r153 = 0
    r159 = CPy_GetExcInfo()
    r160 = r159[0]
    r161 = r159[1]
    r162 = r159[2]
    dec_ref r159
    r163 = [r144, r160, r161, r162]
    r164 = load_address r163
    r165 = _PyObject_Vectorcall(r147, r164, 4, 0)
    if is_error(r165) goto L344 (error at main:32) else goto L78
L78:
    dec_ref r160
    dec_ref r161
    dec_ref r162
    r166 = PyObject_IsTrue(r165)
    dec_ref r165
    r167 = r166 >= 0 :: signed
    if not r167 goto L83 (error at main:32) else goto L79 :: bool
L79:
    r168 = truncate r166: i32 to builtins.bool
    if r168 goto L82 else goto L80 :: bool
L80:
    CPy_Reraise()
    if not 0 goto L83 else goto L345 :: bool
L81:
    unreachable
L82:
    CPy_RestoreExcInfo(r158)
    dec_ref r158
    goto L85
L83:
    CPy_RestoreExcInfo(r158)
    dec_ref r158
    r169 = CPy_KeepPropagating()
    if not r169 goto L86 else goto L346 :: bool
L84:
    unreachable
L85:
    r170 = <error> :: tuple[object, object, object]
    r171 = r170
    goto L87
L86:
    r172 = CPy_CatchError()
    r171 = r172
L87:
    if r153 goto L88 else goto L347 :: bool
L88:
    r173 = load_address _Py_NoneStruct
    r174 = [r144, r173, r173, r173]
    r175 = load_address r174
    r176 = _PyObject_Vectorcall(r147, r175, 4, 0)
    dec_ref r147
    if is_error(r176) goto L348 (error at main:32) else goto L349
L89:
    dec_ref r144
L90:
    if is_error(r171) goto L97 else goto L350
L91:
    CPy_Reraise()
    if not 0 goto L93 else goto L351 :: bool
L92:
    unreachable
L93:
    if is_error(r171) goto L95 else goto L94
L94:
    CPy_RestoreExcInfo(r171)
    xdec_ref r171
L95:
    r177 = CPy_KeepPropagating()
    if not r177 goto L304 else goto L96 :: bool
L96:
    unreachable
L97:
    r178 = time :: module
    r179 = 'time'
    r180 = CPyObject_GetAttr(r178, r179)
    if is_error(r180) goto L333 (error at main:33) else goto L98
L98:
    r181 = _PyObject_Vectorcall(r180, 0, 0, 0)
    dec_ref r180
    if is_error(r181) goto L333 (error at main:33) else goto L99
L99:
    r182 = 'Time to type check + codegen: '
    r183 = PyNumber_Subtract(r181, r4)
    dec_ref r4
    if is_error(r183) goto L352 (error at main:34) else goto L100
L100:
    r184 = PyObject_Str(r183)
    dec_ref r183
    if is_error(r184) goto L352 (error at main:34) else goto L101
L101:
    r185 = ' seconds'
    r186 = CPyStr_Build(3, r182, r184, r185)
    dec_ref r184
    if is_error(r186) goto L352 (error at main:34) else goto L102
L102:
    r187 = builtins :: module
    r188 = 'print'
    r189 = CPyObject_GetAttr(r187, r188)
    if is_error(r189) goto L353 (error at main:34) else goto L103
L103:
    r190 = [r186]
    r191 = load_address r190
    r192 = _PyObject_Vectorcall(r189, r191, 1, 0)
    dec_ref r189
    if is_error(r192) goto L353 (error at main:34) else goto L354
L104:
    dec_ref r186
    r193 = compiler.globals :: static
    r194 = 'first_pass'
    r195 = CPyDict_GetItem(r193, r194)
    if is_error(r195) goto L352 (error at main:35) else goto L105
L105:
    r196 = [module]
    r197 = load_address r196
    r198 = _PyObject_Vectorcall(r195, r197, 1, 0)
    dec_ref r195
    if is_error(r198) goto L352 (error at main:35) else goto L106
L106:
    dec_ref module
    module = r198
    r199 = compiler.globals :: static
    r200 = 'StringIO'
    r201 = CPyDict_GetItem(r199, r200)
    if is_error(r201) goto L352 (error at main:36) else goto L107
L107:
    r202 = _PyObject_Vectorcall(r201, 0, 0, 0)
    dec_ref r201
    if is_error(r202) goto L352 (error at main:36) else goto L108
L108:
    stringio = r202
    r203 = compiler.globals :: static
    r204 = 'Printer'
    r205 = CPyDict_GetItem(r203, r204)
    if is_error(r205) goto L355 (error at main:37) else goto L109
L109:
    r206 = [stringio]
    r207 = load_address r206
    r208 = _PyObject_Vectorcall(r205, r207, 1, 0)
    dec_ref r205
    if is_error(r208) goto L355 (error at main:37) else goto L110
L110:
    r209 = 'print'
    r210 = [r208, module]
    r211 = load_address r210
    r212 = PyObject_VectorcallMethod(r209, r211, 9223372036854775810, 0)
    if is_error(r212) goto L356 (error at main:37) else goto L357
L111:
    dec_ref r208
    dec_ref module
    r213 = 'getvalue'
    r214 = [stringio]
    r215 = load_address r214
    r216 = PyObject_VectorcallMethod(r213, r215, 9223372036854775809, 0)
    if is_error(r216) goto L358 (error at main:38) else goto L112
L112:
    dec_ref stringio
    r217 = 'encode'
    r218 = [r216]
    r219 = load_address r218
    r220 = PyObject_VectorcallMethod(r217, r219, 9223372036854775809, 0)
    if is_error(r220) goto L359 (error at main:38) else goto L113
L113:
    dec_ref r216
    r221 = 'unicode_escape'
    r222 = 'decode'
    r223 = [r220, r221]
    r224 = load_address r223
    r225 = PyObject_VectorcallMethod(r222, r224, 9223372036854775810, 0)
    if is_error(r225) goto L360 (error at main:38) else goto L114
L114:
    dec_ref r220
    module_str = r225
    r226 = 'out.mlir'
    r227 = 'w'
    r228 = builtins :: module
    r229 = 'open'
    r230 = CPyObject_GetAttr(r228, r229)
    if is_error(r230) goto L361 (error at main:39) else goto L115
L115:
    r231 = [r226, r227]
    r232 = load_address r231
    r233 = _PyObject_Vectorcall(r230, r232, 2, 0)
    dec_ref r230
    if is_error(r233) goto L361 (error at main:39) else goto L116
L116:
    r234 = PyObject_Type(r233)
    r235 = '__exit__'
    r236 = CPyObject_GetAttr(r234, r235)
    if is_error(r236) goto L362 (error at main:39) else goto L117
L117:
    r237 = '__enter__'
    r238 = CPyObject_GetAttr(r234, r237)
    dec_ref r234
    if is_error(r238) goto L363 (error at main:39) else goto L118
L118:
    r239 = [r233]
    r240 = load_address r239
    r241 = _PyObject_Vectorcall(r238, r240, 1, 0)
    dec_ref r238
    if is_error(r241) goto L363 (error at main:39) else goto L119
L119:
    r242 = 1
L120:
    r243 = 'write'
    r244 = [r241, module_str]
    r245 = load_address r244
    r246 = PyObject_VectorcallMethod(r243, r245, 9223372036854775810, 0)
    if is_error(r246) goto L364 (error at main:39) else goto L365
L121:
    dec_ref r241
    dec_ref module_str
    goto L130
L122:
    r247 = CPy_CatchError()
    r242 = 0
    r248 = CPy_GetExcInfo()
    r249 = r248[0]
    r250 = r248[1]
    r251 = r248[2]
    dec_ref r248
    r252 = [r233, r249, r250, r251]
    r253 = load_address r252
    r254 = _PyObject_Vectorcall(r236, r253, 4, 0)
    if is_error(r254) goto L366 (error at main:39) else goto L123
L123:
    dec_ref r249
    dec_ref r250
    dec_ref r251
    r255 = PyObject_IsTrue(r254)
    dec_ref r254
    r256 = r255 >= 0 :: signed
    if not r256 goto L128 (error at main:39) else goto L124 :: bool
L124:
    r257 = truncate r255: i32 to builtins.bool
    if r257 goto L127 else goto L125 :: bool
L125:
    CPy_Reraise()
    if not 0 goto L128 else goto L367 :: bool
L126:
    unreachable
L127:
    CPy_RestoreExcInfo(r247)
    dec_ref r247
    goto L130
L128:
    CPy_RestoreExcInfo(r247)
    dec_ref r247
    r258 = CPy_KeepPropagating()
    if not r258 goto L131 else goto L368 :: bool
L129:
    unreachable
L130:
    r259 = <error> :: tuple[object, object, object]
    r260 = r259
    goto L132
L131:
    r261 = CPy_CatchError()
    r260 = r261
L132:
    if r242 goto L133 else goto L369 :: bool
L133:
    r262 = load_address _Py_NoneStruct
    r263 = [r233, r262, r262, r262]
    r264 = load_address r263
    r265 = _PyObject_Vectorcall(r236, r264, 4, 0)
    dec_ref r236
    if is_error(r265) goto L370 (error at main:39) else goto L371
L134:
    dec_ref r233
L135:
    if is_error(r260) goto L142 else goto L372
L136:
    CPy_Reraise()
    if not 0 goto L138 else goto L373 :: bool
L137:
    unreachable
L138:
    if is_error(r260) goto L140 else goto L139
L139:
    CPy_RestoreExcInfo(r260)
    xdec_ref r260
L140:
    r266 = CPy_KeepPropagating()
    if not r266 goto L304 else goto L141 :: bool
L141:
    unreachable
L142:
    r267 = ' '
    r268 = 'mlir-opt'
    r269 = '-allow-unregistered-dialect'
    r270 = '--mlir-print-op-generic'
    r271 = '--lift-cf-to-scf'
    r272 = '--canonicalize="region-simplify=true"'
    r273 = '--loop-invariant-code-motion'
    r274 = '--loop-invariant-subset-hoisting'
    r275 = '--control-flow-sink'
    r276 = '--buffer-hoisting'
    r277 = '--buffer-loop-hoisting'
    r278 = '--convert-func-to-llvm'
    r279 = 'out.mlir'
    inc_ref r268
    inc_ref r269
    inc_ref r270
    inc_ref r271
    inc_ref r272
    inc_ref r273
    inc_ref r274
    inc_ref r275
    inc_ref r276
    inc_ref r277
    inc_ref r278
    inc_ref r279
    r280 = CPyList_Build(12, r268, r269, r270, r271, r272, r273, r274, r275, r276, r277, r278, r279)
    if is_error(r280) goto L374 (error at main:41) else goto L143
L143:
    r281 = PyUnicode_Join(r267, r280)
    dec_ref r280
    if is_error(r281) goto L374 (error at main:41) else goto L144
L144:
    cmd = r281
    r282 = time :: module
    r283 = 'time'
    r284 = CPyObject_GetAttr(r282, r283)
    if is_error(r284) goto L375 (error at main:46) else goto L145
L145:
    r285 = _PyObject_Vectorcall(r284, 0, 0, 0)
    dec_ref r284
    if is_error(r285) goto L375 (error at main:46) else goto L146
L146:
    r286 = 'Time to do first pass: '
    r287 = PyNumber_Subtract(r285, r181)
    dec_ref r181
    if is_error(r287) goto L376 (error at main:47) else goto L147
L147:
    r288 = PyObject_Str(r287)
    dec_ref r287
    if is_error(r288) goto L376 (error at main:47) else goto L148
L148:
    r289 = ' seconds'
    r290 = CPyStr_Build(3, r286, r288, r289)
    dec_ref r288
    if is_error(r290) goto L376 (error at main:47) else goto L149
L149:
    r291 = builtins :: module
    r292 = 'print'
    r293 = CPyObject_GetAttr(r291, r292)
    if is_error(r293) goto L377 (error at main:47) else goto L150
L150:
    r294 = [r290]
    r295 = load_address r294
    r296 = _PyObject_Vectorcall(r293, r295, 1, 0)
    dec_ref r293
    if is_error(r296) goto L377 (error at main:47) else goto L378
L151:
    dec_ref r290
    r297 = subprocess :: module
    r298 = 'run'
    r299 = CPyObject_GetAttr(r297, r298)
    if is_error(r299) goto L376 (error at main:48) else goto L152
L152:
    r300 = box(bool, 1)
    r301 = box(bool, 1)
    r302 = box(bool, 1)
    r303 = [cmd, r300, r301, r302]
    r304 = load_address r303
    r305 = ('capture_output', 'shell', 'text')
    r306 = _PyObject_Vectorcall(r299, r304, 1, r305)
    dec_ref r299
    if is_error(r306) goto L376 (error at main:48) else goto L153
L153:
    dec_ref cmd
    r307 = 'stdout'
    r308 = CPyObject_GetAttr(r306, r307)
    dec_ref r306
    if is_error(r308) goto L379 (error at main:48) else goto L154
L154:
    parsed_module_str = r308
    r309 = time :: module
    r310 = 'time'
    r311 = CPyObject_GetAttr(r309, r310)
    if is_error(r311) goto L380 (error at main:49) else goto L155
L155:
    r312 = _PyObject_Vectorcall(r311, 0, 0, 0)
    dec_ref r311
    if is_error(r312) goto L380 (error at main:49) else goto L156
L156:
    r313 = 'Time to do mlir-opt: '
    r314 = PyNumber_Subtract(r312, r285)
    dec_ref r285
    if is_error(r314) goto L381 (error at main:50) else goto L157
L157:
    r315 = PyObject_Str(r314)
    dec_ref r314
    if is_error(r315) goto L381 (error at main:50) else goto L158
L158:
    r316 = ' seconds'
    r317 = CPyStr_Build(3, r313, r315, r316)
    dec_ref r315
    if is_error(r317) goto L381 (error at main:50) else goto L159
L159:
    r318 = builtins :: module
    r319 = 'print'
    r320 = CPyObject_GetAttr(r318, r319)
    if is_error(r320) goto L382 (error at main:50) else goto L160
L160:
    r321 = [r317]
    r322 = load_address r321
    r323 = _PyObject_Vectorcall(r320, r322, 1, 0)
    dec_ref r320
    if is_error(r323) goto L382 (error at main:50) else goto L383
L161:
    dec_ref r317
    r324 = compiler.globals :: static
    r325 = 'MLContext'
    r326 = CPyDict_GetItem(r324, r325)
    if is_error(r326) goto L381 (error at main:52) else goto L162
L162:
    r327 = _PyObject_Vectorcall(r326, 0, 0, 0)
    dec_ref r326
    if is_error(r327) goto L381 (error at main:52) else goto L163
L163:
    r328 = compiler.globals :: static
    r329 = 'MiniLang'
    r330 = CPyDict_GetItem(r328, r329)
    if is_error(r330) goto L384 (error at main:53) else goto L164
L164:
    r331 = compiler.globals :: static
    r332 = 'cf'
    r333 = CPyDict_GetItem(r331, r332)
    if is_error(r333) goto L385 (error at main:53) else goto L165
L165:
    r334 = 'Cf'
    r335 = CPyObject_GetAttr(r333, r334)
    dec_ref r333
    if is_error(r335) goto L385 (error at main:53) else goto L166
L166:
    r336 = compiler.globals :: static
    r337 = 'scf'
    r338 = CPyDict_GetItem(r336, r337)
    if is_error(r338) goto L386 (error at main:53) else goto L167
L167:
    r339 = 'Scf'
    r340 = CPyObject_GetAttr(r338, r339)
    dec_ref r338
    if is_error(r340) goto L386 (error at main:53) else goto L168
L168:
    r341 = compiler.globals :: static
    r342 = 'builtin'
    r343 = CPyDict_GetItem(r341, r342)
    if is_error(r343) goto L387 (error at main:53) else goto L169
L169:
    r344 = 'Builtin'
    r345 = CPyObject_GetAttr(r343, r344)
    dec_ref r343
    if is_error(r345) goto L387 (error at main:53) else goto L170
L170:
    r346 = compiler.globals :: static
    r347 = 'func'
    r348 = CPyDict_GetItem(r346, r347)
    if is_error(r348) goto L388 (error at main:53) else goto L171
L171:
    r349 = 'Func'
    r350 = CPyObject_GetAttr(r348, r349)
    dec_ref r348
    if is_error(r350) goto L388 (error at main:53) else goto L172
L172:
    r351 = compiler.globals :: static
    r352 = 'llvm'
    r353 = CPyDict_GetItem(r351, r352)
    if is_error(r353) goto L389 (error at main:53) else goto L173
L173:
    r354 = 'LLVM'
    r355 = CPyObject_GetAttr(r353, r354)
    dec_ref r353
    if is_error(r355) goto L389 (error at main:53) else goto L174
L174:
    r356 = compiler.globals :: static
    r357 = 'arith'
    r358 = CPyDict_GetItem(r356, r357)
    if is_error(r358) goto L390 (error at main:53) else goto L175
L175:
    r359 = 'Arith'
    r360 = CPyObject_GetAttr(r358, r359)
    dec_ref r358
    if is_error(r360) goto L390 (error at main:53) else goto L176
L176:
    r361 = compiler.globals :: static
    r362 = 'memref'
    r363 = CPyDict_GetItem(r361, r362)
    if is_error(r363) goto L391 (error at main:53) else goto L177
L177:
    r364 = 'MemRef'
    r365 = CPyObject_GetAttr(r363, r364)
    dec_ref r363
    if is_error(r365) goto L391 (error at main:53) else goto L178
L178:
    r366 = PyList_New(8)
    if is_error(r366) goto L392 (error at main:53) else goto L179
L179:
    r367 = get_element_ptr r366 ob_item :: PyListObject
    r368 = load_mem r367 :: ptr*
    set_mem r368, r330 :: builtins.object*
    r369 = r368 + 8
    set_mem r369, r335 :: builtins.object*
    r370 = r368 + 16
    set_mem r370, r340 :: builtins.object*
    r371 = r368 + 24
    set_mem r371, r345 :: builtins.object*
    r372 = r368 + 32
    set_mem r372, r350 :: builtins.object*
    r373 = r368 + 40
    set_mem r373, r355 :: builtins.object*
    r374 = r368 + 48
    set_mem r374, r360 :: builtins.object*
    r375 = r368 + 56
    set_mem r375, r365 :: builtins.object*
    r376 = 0
L180:
    r377 = get_element_ptr r366 ob_size :: PyVarObject
    r378 = load_mem r377 :: native_int*
    r379 = r378 << 1
    r380 = r376 < r379 :: signed
    if r380 goto L181 else goto L393 :: bool
L181:
    r381 = CPyList_GetItemUnsafe(r366, r376)
    r382 = 'load_dialect'
    r383 = [r327, r381]
    r384 = load_address r383
    r385 = PyObject_VectorcallMethod(r382, r384, 9223372036854775810, 0)
    if is_error(r385) goto L394 (error at main:53) else goto L395
L182:
    dec_ref r381
L183:
    r386 = r376 + 2
    r376 = r386
    goto L180
L184:
    r387 = 'struct<'
    r388 = '!llvm.struct<'
    r389 = 'replace'
    r390 = [parsed_module_str, r387, r388]
    r391 = load_address r390
    r392 = PyObject_VectorcallMethod(r389, r391, 9223372036854775811, 0)
    if is_error(r392) goto L384 (error at main:54) else goto L185
L185:
    dec_ref parsed_module_str
    r393 = '!llvm.!llvm'
    r394 = '!llvm'
    r395 = 'replace'
    r396 = [r392, r393, r394]
    r397 = load_address r396
    r398 = PyObject_VectorcallMethod(r395, r397, 9223372036854775811, 0)
    if is_error(r398) goto L396 (error at main:54) else goto L186
L186:
    dec_ref r392
    r399 = 'llvm.br'
    r400 = 'cf.br'
    r401 = 'replace'
    r402 = [r398, r399, r400]
    r403 = load_address r402
    r404 = PyObject_VectorcallMethod(r401, r403, 9223372036854775811, 0)
    if is_error(r404) goto L397 (error at main:54) else goto L187
L187:
    dec_ref r398
    r405 = 'llvm.switch'
    r406 = 'cf.switch'
    r407 = 'replace'
    r408 = [r404, r405, r406]
    r409 = load_address r408
    r410 = PyObject_VectorcallMethod(r407, r409, 9223372036854775811, 0)
    if is_error(r410) goto L398 (error at main:54) else goto L188
L188:
    dec_ref r404
    r411 = 'llvm.cond_br'
    r412 = 'cf.cond_br'
    r413 = 'replace'
    r414 = [r410, r411, r412]
    r415 = load_address r414
    r416 = PyObject_VectorcallMethod(r413, r415, 9223372036854775811, 0)
    if is_error(r416) goto L399 (error at main:54) else goto L189
L189:
    dec_ref r410
    r417 = 'llvm.zext'
    r418 = 'arith.extsi'
    r419 = 'replace'
    r420 = [r416, r417, r418]
    r421 = load_address r420
    r422 = PyObject_VectorcallMethod(r419, r421, 9223372036854775811, 0)
    if is_error(r422) goto L400 (error at main:54) else goto L190
L190:
    dec_ref r416
    r423 = 'llvm.sext'
    r424 = 'arith.extsi'
    r425 = 'replace'
    r426 = [r422, r423, r424]
    r427 = load_address r426
    r428 = PyObject_VectorcallMethod(r425, r427, 9223372036854775811, 0)
    if is_error(r428) goto L401 (error at main:54) else goto L191
L191:
    dec_ref r422
    r429 = 'llvm.trunc'
    r430 = 'arith.trunci'
    r431 = 'replace'
    r432 = [r428, r429, r430]
    r433 = load_address r432
    r434 = PyObject_VectorcallMethod(r431, r433, 9223372036854775811, 0)
    if is_error(r434) goto L402 (error at main:54) else goto L192
L192:
    dec_ref r428
    r435 = 'arith.index_castui'
    r436 = 'arith.index_cast'
    r437 = 'replace'
    r438 = [r434, r435, r436]
    r439 = load_address r438
    r440 = PyObject_VectorcallMethod(r437, r439, 9223372036854775811, 0)
    if is_error(r440) goto L403 (error at main:54) else goto L193
L193:
    dec_ref r434
    parsed_module_str = r440
    r441 = compiler.globals :: static
    r442 = 'Parser'
    r443 = CPyDict_GetItem(r441, r442)
    if is_error(r443) goto L384 (error at main:55) else goto L194
L194:
    r444 = [r327, parsed_module_str]
    r445 = load_address r444
    r446 = _PyObject_Vectorcall(r443, r445, 2, 0)
    dec_ref r443
    if is_error(r446) goto L384 (error at main:55) else goto L195
L195:
    dec_ref r327
    dec_ref parsed_module_str
    r447 = 'parse_module'
    r448 = [r446]
    r449 = load_address r448
    r450 = PyObject_VectorcallMethod(r447, r449, 9223372036854775809, 0)
    if is_error(r450) goto L404 (error at main:55) else goto L196
L196:
    dec_ref r446
    parsed_module = r450
    r451 = compiler.globals :: static
    r452 = 'second_pass'
    r453 = CPyDict_GetItem(r451, r452)
    if is_error(r453) goto L405 (error at main:56) else goto L197
L197:
    r454 = [parsed_module]
    r455 = load_address r454
    r456 = _PyObject_Vectorcall(r453, r455, 1, 0)
    dec_ref r453
    if is_error(r456) goto L405 (error at main:56) else goto L198
L198:
    dec_ref parsed_module
    parsed_module = r456
    r457 = compiler.globals :: static
    r458 = 'StringIO'
    r459 = CPyDict_GetItem(r457, r458)
    if is_error(r459) goto L405 (error at main:57) else goto L199
L199:
    r460 = _PyObject_Vectorcall(r459, 0, 0, 0)
    dec_ref r459
    if is_error(r460) goto L405 (error at main:57) else goto L200
L200:
    stringio = r460
    r461 = compiler.globals :: static
    r462 = 'Printer'
    r463 = CPyDict_GetItem(r461, r462)
    if is_error(r463) goto L406 (error at main:58) else goto L201
L201:
    r464 = [stringio]
    r465 = load_address r464
    r466 = _PyObject_Vectorcall(r463, r465, 1, 0)
    dec_ref r463
    if is_error(r466) goto L406 (error at main:58) else goto L202
L202:
    r467 = 'print'
    r468 = [r466, parsed_module]
    r469 = load_address r468
    r470 = PyObject_VectorcallMethod(r467, r469, 9223372036854775810, 0)
    if is_error(r470) goto L407 (error at main:58) else goto L408
L203:
    dec_ref r466
    dec_ref parsed_module
    r471 = 'out.mlir'
    r472 = 'w'
    r473 = builtins :: module
    r474 = 'open'
    r475 = CPyObject_GetAttr(r473, r474)
    if is_error(r475) goto L409 (error at main:59) else goto L204
L204:
    r476 = [r471, r472]
    r477 = load_address r476
    r478 = _PyObject_Vectorcall(r475, r477, 2, 0)
    dec_ref r475
    if is_error(r478) goto L409 (error at main:59) else goto L205
L205:
    r479 = PyObject_Type(r478)
    r480 = '__exit__'
    r481 = CPyObject_GetAttr(r479, r480)
    if is_error(r481) goto L410 (error at main:59) else goto L206
L206:
    r482 = '__enter__'
    r483 = CPyObject_GetAttr(r479, r482)
    dec_ref r479
    if is_error(r483) goto L411 (error at main:59) else goto L207
L207:
    r484 = [r478]
    r485 = load_address r484
    r486 = _PyObject_Vectorcall(r483, r485, 1, 0)
    dec_ref r483
    if is_error(r486) goto L411 (error at main:59) else goto L208
L208:
    r487 = 1
L209:
    r488 = 'getvalue'
    r489 = [stringio]
    r490 = load_address r489
    r491 = PyObject_VectorcallMethod(r488, r490, 9223372036854775809, 0)
    if is_error(r491) goto L412 (error at main:59) else goto L210
L210:
    dec_ref stringio
    r492 = 'encode'
    r493 = [r491]
    r494 = load_address r493
    r495 = PyObject_VectorcallMethod(r492, r494, 9223372036854775809, 0)
    if is_error(r495) goto L413 (error at main:59) else goto L211
L211:
    dec_ref r491
    r496 = 'unicode_escape'
    r497 = 'decode'
    r498 = [r495, r496]
    r499 = load_address r498
    r500 = PyObject_VectorcallMethod(r497, r499, 9223372036854775810, 0)
    if is_error(r500) goto L414 (error at main:59) else goto L212
L212:
    dec_ref r495
    r501 = 'write'
    r502 = [r486, r500]
    r503 = load_address r502
    r504 = PyObject_VectorcallMethod(r501, r503, 9223372036854775810, 0)
    if is_error(r504) goto L415 (error at main:59) else goto L416
L213:
    dec_ref r486
    dec_ref r500
    goto L222
L214:
    r505 = CPy_CatchError()
    r487 = 0
    r506 = CPy_GetExcInfo()
    r507 = r506[0]
    r508 = r506[1]
    r509 = r506[2]
    dec_ref r506
    r510 = [r478, r507, r508, r509]
    r511 = load_address r510
    r512 = _PyObject_Vectorcall(r481, r511, 4, 0)
    if is_error(r512) goto L417 (error at main:59) else goto L215
L215:
    dec_ref r507
    dec_ref r508
    dec_ref r509
    r513 = PyObject_IsTrue(r512)
    dec_ref r512
    r514 = r513 >= 0 :: signed
    if not r514 goto L220 (error at main:59) else goto L216 :: bool
L216:
    r515 = truncate r513: i32 to builtins.bool
    if r515 goto L219 else goto L217 :: bool
L217:
    CPy_Reraise()
    if not 0 goto L220 else goto L418 :: bool
L218:
    unreachable
L219:
    CPy_RestoreExcInfo(r505)
    dec_ref r505
    goto L222
L220:
    CPy_RestoreExcInfo(r505)
    dec_ref r505
    r516 = CPy_KeepPropagating()
    if not r516 goto L223 else goto L419 :: bool
L221:
    unreachable
L222:
    r517 = <error> :: tuple[object, object, object]
    r518 = r517
    goto L224
L223:
    r519 = CPy_CatchError()
    r518 = r519
L224:
    if r487 goto L225 else goto L420 :: bool
L225:
    r520 = load_address _Py_NoneStruct
    r521 = [r478, r520, r520, r520]
    r522 = load_address r521
    r523 = _PyObject_Vectorcall(r481, r522, 4, 0)
    dec_ref r481
    if is_error(r523) goto L421 (error at main:59) else goto L422
L226:
    dec_ref r478
L227:
    if is_error(r518) goto L234 else goto L423
L228:
    CPy_Reraise()
    if not 0 goto L230 else goto L424 :: bool
L229:
    unreachable
L230:
    if is_error(r518) goto L232 else goto L231
L231:
    CPy_RestoreExcInfo(r518)
    xdec_ref r518
L232:
    r524 = CPy_KeepPropagating()
    if not r524 goto L304 else goto L233 :: bool
L233:
    unreachable
L234:
    r525 = ' '
    r526 = 'mlir-opt'
    r527 = '--convert-scf-to-cf'
    r528 = '--convert-arith-to-llvm'
    r529 = '--convert-func-to-llvm'
    r530 = '--convert-index-to-llvm'
    r531 = '--finalize-memref-to-llvm'
    r532 = '--convert-cf-to-llvm'
    r533 = '--reconcile-unrealized-casts'
    r534 = '--mem2reg'
    r535 = '--sroa'
    r536 = '--cse'
    r537 = '--emit-bytecode'
    r538 = 'out.mlir'
    r539 = '-o'
    r540 = 'out_optimized.mlir'
    inc_ref r526
    inc_ref r527
    inc_ref r528
    inc_ref r529
    inc_ref r530
    inc_ref r531
    inc_ref r532
    inc_ref r533
    inc_ref r534
    inc_ref r535
    inc_ref r536
    inc_ref r537
    inc_ref r538
    inc_ref r539
    inc_ref r540
    r541 = CPyList_Build(15, r526, r527, r528, r529, r530, r531, r532, r533, r534, r535, r536, r537, r538, r539, r540)
    if is_error(r541) goto L425 (error at main:61) else goto L235
L235:
    r542 = PyUnicode_Join(r525, r541)
    dec_ref r541
    if is_error(r542) goto L425 (error at main:61) else goto L236
L236:
    cmd1 = r542
    r543 = 'mlir-translate'
    r544 = '--mlir-to-llvmir'
    r545 = 'out_optimized.mlir'
    r546 = '-o'
    r547 = 'out.ll'
    r548 = PyList_New(5)
    if is_error(r548) goto L426 (error at main:65) else goto L237
L237:
    r549 = get_element_ptr r548 ob_item :: PyListObject
    r550 = load_mem r549 :: ptr*
    inc_ref r543
    set_mem r550, r543 :: builtins.object*
    inc_ref r544
    r551 = r550 + 8
    set_mem r551, r544 :: builtins.object*
    inc_ref r545
    r552 = r550 + 16
    set_mem r552, r545 :: builtins.object*
    inc_ref r546
    r553 = r550 + 24
    set_mem r553, r546 :: builtins.object*
    inc_ref r547
    r554 = r550 + 32
    set_mem r554, r547 :: builtins.object*
    cmd2 = r548
    r555 = 'llvm-link'
    r556 = 'out.ll'
    r557 = 'utils.ll'
    r558 = '-o'
    r559 = 'combined.bc'
    r560 = PyList_New(5)
    if is_error(r560) goto L427 (error at main:66) else goto L238
L238:
    r561 = get_element_ptr r560 ob_item :: PyListObject
    r562 = load_mem r561 :: ptr*
    inc_ref r555
    set_mem r562, r555 :: builtins.object*
    inc_ref r556
    r563 = r562 + 8
    set_mem r563, r556 :: builtins.object*
    inc_ref r557
    r564 = r562 + 16
    set_mem r564, r557 :: builtins.object*
    inc_ref r558
    r565 = r562 + 24
    set_mem r565, r558 :: builtins.object*
    inc_ref r559
    r566 = r562 + 32
    set_mem r566, r559 :: builtins.object*
    cmd3 = r560
    r567 = 'llc'
    r568 = '-filetype=obj'
    r569 = '-incremental-linker-compatible'
    r570 = 'combined.bc'
    r571 = '-O=3'
    r572 = '-o'
    r573 = 'out.obj'
    r574 = PyList_New(7)
    if is_error(r574) goto L428 (error at main:67) else goto L239
L239:
    r575 = get_element_ptr r574 ob_item :: PyListObject
    r576 = load_mem r575 :: ptr*
    inc_ref r567
    set_mem r576, r567 :: builtins.object*
    inc_ref r568
    r577 = r576 + 8
    set_mem r577, r568 :: builtins.object*
    inc_ref r569
    r578 = r576 + 16
    set_mem r578, r569 :: builtins.object*
    inc_ref r570
    r579 = r576 + 24
    set_mem r579, r570 :: builtins.object*
    inc_ref r571
    r580 = r576 + 32
    set_mem r580, r571 :: builtins.object*
    inc_ref r572
    r581 = r576 + 40
    set_mem r581, r572 :: builtins.object*
    inc_ref r573
    r582 = r576 + 48
    set_mem r582, r573 :: builtins.object*
    cmd4 = r574
    r583 = ' '
    r584 = 'lld-link'
    r585 = '/out:out.exe'
    r586 = 'out.obj'
    r587 = '/libpath:"C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.22621.0\\um\\x64"'
    r588 = '/libpath:"C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.22621.0\\ucrt\\x64"'
    r589 = '/libpath:"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.16.27023\\lib\\x64"'
    r590 = '/libpath:"C:\\Windows\\System32\\llvm-project\\build\\Debug\\lib"'
    r591 = 'libcmt.lib'
    r592 = '/debug'
    r593 = PyList_New(9)
    if is_error(r593) goto L429 (error at main:68) else goto L240
L240:
    r594 = get_element_ptr r593 ob_item :: PyListObject
    r595 = load_mem r594 :: ptr*
    inc_ref r584
    set_mem r595, r584 :: builtins.object*
    inc_ref r585
    r596 = r595 + 8
    set_mem r596, r585 :: builtins.object*
    inc_ref r586
    r597 = r595 + 16
    set_mem r597, r586 :: builtins.object*
    inc_ref r587
    r598 = r595 + 24
    set_mem r598, r587 :: builtins.object*
    inc_ref r588
    r599 = r595 + 32
    set_mem r599, r588 :: builtins.object*
    inc_ref r589
    r600 = r595 + 40
    set_mem r600, r589 :: builtins.object*
    inc_ref r590
    r601 = r595 + 48
    set_mem r601, r590 :: builtins.object*
    inc_ref r591
    r602 = r595 + 56
    set_mem r602, r591 :: builtins.object*
    inc_ref r592
    r603 = r595 + 64
    set_mem r603, r592 :: builtins.object*
    r604 = PyUnicode_Join(r583, r593)
    dec_ref r593
    if is_error(r604) goto L429 (error at main:68) else goto L241
L241:
    cmd5 = r604
    r605 = time :: module
    r606 = 'time'
    r607 = CPyObject_GetAttr(r605, r606)
    if is_error(r607) goto L430 (error at main:77) else goto L242
L242:
    r608 = _PyObject_Vectorcall(r607, 0, 0, 0)
    dec_ref r607
    if is_error(r608) goto L430 (error at main:77) else goto L243
L243:
    r609 = 'Time to do second pass: '
    r610 = PyNumber_Subtract(r608, r312)
    dec_ref r312
    if is_error(r610) goto L431 (error at main:78) else goto L244
L244:
    r611 = PyObject_Str(r610)
    dec_ref r610
    if is_error(r611) goto L431 (error at main:78) else goto L245
L245:
    r612 = ' seconds'
    r613 = CPyStr_Build(3, r609, r611, r612)
    dec_ref r611
    if is_error(r613) goto L431 (error at main:78) else goto L246
L246:
    r614 = builtins :: module
    r615 = 'print'
    r616 = CPyObject_GetAttr(r614, r615)
    if is_error(r616) goto L432 (error at main:78) else goto L247
L247:
    r617 = [r613]
    r618 = load_address r617
    r619 = _PyObject_Vectorcall(r616, r618, 1, 0)
    dec_ref r616
    if is_error(r619) goto L432 (error at main:78) else goto L433
L248:
    dec_ref r613
    r620 = subprocess :: module
    r621 = 'run'
    r622 = CPyObject_GetAttr(r620, r621)
    if is_error(r622) goto L431 (error at main:80) else goto L249
L249:
    r623 = box(bool, 1)
    r624 = box(bool, 1)
    r625 = [cmd1, r623, r624]
    r626 = load_address r625
    r627 = ('text', 'shell')
    r628 = _PyObject_Vectorcall(r622, r626, 1, r627)
    dec_ref r622
    if is_error(r628) goto L431 (error at main:80) else goto L434
L250:
    dec_ref cmd1
    r629 = time :: module
    r630 = 'time'
    r631 = CPyObject_GetAttr(r629, r630)
    if is_error(r631) goto L435 (error at main:81) else goto L251
L251:
    r632 = _PyObject_Vectorcall(r631, 0, 0, 0)
    dec_ref r631
    if is_error(r632) goto L435 (error at main:81) else goto L252
L252:
    r633 = 'Time to lower to llvm dialect: '
    r634 = PyNumber_Subtract(r632, r608)
    dec_ref r608
    if is_error(r634) goto L436 (error at main:82) else goto L253
L253:
    r635 = PyObject_Str(r634)
    dec_ref r634
    if is_error(r635) goto L436 (error at main:82) else goto L254
L254:
    r636 = ' seconds'
    r637 = CPyStr_Build(3, r633, r635, r636)
    dec_ref r635
    if is_error(r637) goto L436 (error at main:82) else goto L255
L255:
    r638 = builtins :: module
    r639 = 'print'
    r640 = CPyObject_GetAttr(r638, r639)
    if is_error(r640) goto L437 (error at main:82) else goto L256
L256:
    r641 = [r637]
    r642 = load_address r641
    r643 = _PyObject_Vectorcall(r640, r642, 1, 0)
    dec_ref r640
    if is_error(r643) goto L437 (error at main:82) else goto L438
L257:
    dec_ref r637
    r644 = subprocess :: module
    r645 = 'run'
    r646 = CPyObject_GetAttr(r644, r645)
    if is_error(r646) goto L436 (error at main:83) else goto L258
L258:
    r647 = [cmd2]
    r648 = load_address r647
    r649 = _PyObject_Vectorcall(r646, r648, 1, 0)
    dec_ref r646
    if is_error(r649) goto L436 (error at main:83) else goto L439
L259:
    dec_ref cmd2
    r650 = time :: module
    r651 = 'time'
    r652 = CPyObject_GetAttr(r650, r651)
    if is_error(r652) goto L440 (error at main:84) else goto L260
L260:
    r653 = _PyObject_Vectorcall(r652, 0, 0, 0)
    dec_ref r652
    if is_error(r653) goto L440 (error at main:84) else goto L261
L261:
    r654 = 'Time to translate to llvm ir: '
    r655 = PyNumber_Subtract(r653, r632)
    dec_ref r632
    if is_error(r655) goto L441 (error at main:85) else goto L262
L262:
    r656 = PyObject_Str(r655)
    dec_ref r655
    if is_error(r656) goto L441 (error at main:85) else goto L263
L263:
    r657 = ' seconds'
    r658 = CPyStr_Build(3, r654, r656, r657)
    dec_ref r656
    if is_error(r658) goto L441 (error at main:85) else goto L264
L264:
    r659 = builtins :: module
    r660 = 'print'
    r661 = CPyObject_GetAttr(r659, r660)
    if is_error(r661) goto L442 (error at main:85) else goto L265
L265:
    r662 = [r658]
    r663 = load_address r662
    r664 = _PyObject_Vectorcall(r661, r663, 1, 0)
    dec_ref r661
    if is_error(r664) goto L442 (error at main:85) else goto L443
L266:
    dec_ref r658
    r665 = subprocess :: module
    r666 = 'run'
    r667 = CPyObject_GetAttr(r665, r666)
    if is_error(r667) goto L441 (error at main:86) else goto L267
L267:
    r668 = [cmd3]
    r669 = load_address r668
    r670 = _PyObject_Vectorcall(r667, r669, 1, 0)
    dec_ref r667
    if is_error(r670) goto L441 (error at main:86) else goto L444
L268:
    dec_ref cmd3
    r671 = time :: module
    r672 = 'time'
    r673 = CPyObject_GetAttr(r671, r672)
    if is_error(r673) goto L445 (error at main:87) else goto L269
L269:
    r674 = _PyObject_Vectorcall(r673, 0, 0, 0)
    dec_ref r673
    if is_error(r674) goto L445 (error at main:87) else goto L270
L270:
    r675 = 'Time to llvm-link: '
    r676 = PyNumber_Subtract(r674, r653)
    dec_ref r653
    if is_error(r676) goto L446 (error at main:88) else goto L271
L271:
    r677 = PyObject_Str(r676)
    dec_ref r676
    if is_error(r677) goto L446 (error at main:88) else goto L272
L272:
    r678 = ' seconds'
    r679 = CPyStr_Build(3, r675, r677, r678)
    dec_ref r677
    if is_error(r679) goto L446 (error at main:88) else goto L273
L273:
    r680 = builtins :: module
    r681 = 'print'
    r682 = CPyObject_GetAttr(r680, r681)
    if is_error(r682) goto L447 (error at main:88) else goto L274
L274:
    r683 = [r679]
    r684 = load_address r683
    r685 = _PyObject_Vectorcall(r682, r684, 1, 0)
    dec_ref r682
    if is_error(r685) goto L447 (error at main:88) else goto L448
L275:
    dec_ref r679
    r686 = subprocess :: module
    r687 = 'run'
    r688 = CPyObject_GetAttr(r686, r687)
    if is_error(r688) goto L446 (error at main:89) else goto L276
L276:
    r689 = [cmd4]
    r690 = load_address r689
    r691 = _PyObject_Vectorcall(r688, r690, 1, 0)
    dec_ref r688
    if is_error(r691) goto L446 (error at main:89) else goto L449
L277:
    dec_ref cmd4
    r692 = time :: module
    r693 = 'time'
    r694 = CPyObject_GetAttr(r692, r693)
    if is_error(r694) goto L450 (error at main:90) else goto L278
L278:
    r695 = _PyObject_Vectorcall(r694, 0, 0, 0)
    dec_ref r694
    if is_error(r695) goto L450 (error at main:90) else goto L279
L279:
    r696 = 'Time to llc: '
    r697 = PyNumber_Subtract(r695, r674)
    dec_ref r674
    if is_error(r697) goto L451 (error at main:91) else goto L280
L280:
    r698 = PyObject_Str(r697)
    dec_ref r697
    if is_error(r698) goto L451 (error at main:91) else goto L281
L281:
    r699 = ' seconds'
    r700 = CPyStr_Build(3, r696, r698, r699)
    dec_ref r698
    if is_error(r700) goto L451 (error at main:91) else goto L282
L282:
    r701 = builtins :: module
    r702 = 'print'
    r703 = CPyObject_GetAttr(r701, r702)
    if is_error(r703) goto L452 (error at main:91) else goto L283
L283:
    r704 = [r700]
    r705 = load_address r704
    r706 = _PyObject_Vectorcall(r703, r705, 1, 0)
    dec_ref r703
    if is_error(r706) goto L452 (error at main:91) else goto L453
L284:
    dec_ref r700
    r707 = subprocess :: module
    r708 = 'run'
    r709 = CPyObject_GetAttr(r707, r708)
    if is_error(r709) goto L451 (error at main:92) else goto L285
L285:
    r710 = box(bool, 1)
    r711 = box(bool, 1)
    r712 = [cmd5, r710, r711]
    r713 = load_address r712
    r714 = ('shell', 'text')
    r715 = _PyObject_Vectorcall(r709, r713, 1, r714)
    dec_ref r709
    if is_error(r715) goto L451 (error at main:92) else goto L454
L286:
    dec_ref cmd5
    r716 = time :: module
    r717 = 'time'
    r718 = CPyObject_GetAttr(r716, r717)
    if is_error(r718) goto L455 (error at main:93) else goto L287
L287:
    r719 = _PyObject_Vectorcall(r718, 0, 0, 0)
    dec_ref r718
    if is_error(r719) goto L455 (error at main:93) else goto L288
L288:
    r720 = 'Time to lld-link: '
    r721 = PyNumber_Subtract(r719, r695)
    dec_ref r695
    if is_error(r721) goto L456 (error at main:94) else goto L289
L289:
    r722 = PyObject_Str(r721)
    dec_ref r721
    if is_error(r722) goto L456 (error at main:94) else goto L290
L290:
    r723 = ' seconds'
    r724 = CPyStr_Build(3, r720, r722, r723)
    dec_ref r722
    if is_error(r724) goto L456 (error at main:94) else goto L291
L291:
    r725 = builtins :: module
    r726 = 'print'
    r727 = CPyObject_GetAttr(r725, r726)
    if is_error(r727) goto L457 (error at main:94) else goto L292
L292:
    r728 = [r724]
    r729 = load_address r728
    r730 = _PyObject_Vectorcall(r727, r729, 1, 0)
    dec_ref r727
    if is_error(r730) goto L457 (error at main:94) else goto L458
L293:
    dec_ref r724
    r731 = 'Total time to compile: '
    r732 = compiler.globals :: static
    r733 = 'start_time'
    r734 = CPyDict_GetItem(r732, r733)
    if is_error(r734) goto L456 (error at main:95) else goto L294
L294:
    r735 = unbox(float, r734)
    dec_ref r734
    r736 = r735 == -113.0
    if r736 goto L296 else goto L295 :: bool
L295:
    r737 = box(float, r735)
    r738 = PyNumber_Subtract(r719, r737)
    dec_ref r719
    dec_ref r737
    if is_error(r738) goto L304 (error at main:95) else goto L297
L296:
    r739 = PyErr_Occurred()
    if not is_error(r739) goto L456 (error at main:95) else goto L295
L297:
    r740 = PyObject_Str(r738)
    dec_ref r738
    if is_error(r740) goto L304 (error at main:95) else goto L298
L298:
    r741 = ' seconds'
    r742 = CPyStr_Build(3, r731, r740, r741)
    dec_ref r740
    if is_error(r742) goto L304 (error at main:95) else goto L299
L299:
    r743 = builtins :: module
    r744 = 'print'
    r745 = CPyObject_GetAttr(r743, r744)
    if is_error(r745) goto L459 (error at main:95) else goto L300
L300:
    r746 = [r742]
    r747 = load_address r746
    r748 = _PyObject_Vectorcall(r745, r747, 1, 0)
    dec_ref r745
    if is_error(r748) goto L459 (error at main:95) else goto L460
L301:
    dec_ref r742
    r749 = 'completed'
    r750 = builtins :: module
    r751 = 'print'
    r752 = CPyObject_GetAttr(r750, r751)
    if is_error(r752) goto L304 (error at main:96) else goto L302
L302:
    r753 = [r749]
    r754 = load_address r753
    r755 = _PyObject_Vectorcall(r752, r754, 1, 0)
    dec_ref r752
    if is_error(r755) goto L304 (error at main:96) else goto L461
L303:
    r756 = box(None, 1)
    inc_ref r756
    return r756
L304:
    r757 = <error> :: object
    return r757
L305:
    xdec_ref source_text
    goto L304
L306:
    xdec_ref source_text
    dec_ref r4
    goto L304
L307:
    xdec_ref source_text
    dec_ref r4
    dec_ref r16
    goto L304
L308:
    dec_ref r22
    goto L10
L309:
    xdec_ref source_text
    dec_ref r4
    dec_ref r26
    goto L304
L310:
    xdec_ref source_text
    dec_ref r4
    dec_ref r30
    goto L304
L311:
    dec_ref r36
    goto L17
L312:
    xdec_ref source_text
    dec_ref r4
    dec_ref r39
    goto L304
L313:
    xdec_ref source_text
    dec_ref r4
    dec_ref r41
    goto L304
L314:
    xdec_ref source_text
    dec_ref r4
    dec_ref r47
    dec_ref r48
    goto L304
L315:
    xdec_ref source_text
    dec_ref r4
    dec_ref r47
    dec_ref r50
    goto L304
L316:
    dec_ref r55
    goto L28
L317:
    xdec_ref source_text
    goto L27
L318:
    dec_ref r63
    dec_ref r64
    dec_ref r65
    goto L34
L319:
    xdec_ref source_text
    dec_ref r4
    dec_ref r47
    dec_ref r50
    dec_ref r61
    goto L32
L320:
    xdec_ref source_text
    dec_ref r4
    dec_ref r47
    dec_ref r50
    goto L35
L321:
    dec_ref r47
    dec_ref r50
    goto L41
L322:
    xdec_ref source_text
    dec_ref r4
    dec_ref r47
    goto L44
L323:
    dec_ref r79
    goto L40
L324:
    xdec_ref source_text
    dec_ref r4
    goto L42
L325:
    xdec_ref r74
    goto L43
L326:
    xdec_ref source_text
    dec_ref r4
    dec_ref r83
    goto L304
L327:
    dec_ref r4
    dec_ref r91
    goto L51
L328:
    xdec_ref source_text
    dec_ref r4
    dec_ref r91
    goto L304
L329:
    dec_ref r4
    dec_ref r91
    dec_ref r96
    goto L55
L330:
    dec_ref r4
    dec_ref r96
    goto L304
L331:
    dec_ref r4
    dec_ref r96
    dec_ref r101
    goto L304
L332:
    dec_ref r4
    dec_ref r105
    goto L304
L333:
    dec_ref r4
    dec_ref module
    goto L304
L334:
    dec_ref r4
    dec_ref module
    dec_ref stringio
    goto L304
L335:
    dec_ref r4
    dec_ref module
    dec_ref stringio
    dec_ref r119
    goto L304
L336:
    dec_ref r123
    goto L66
L337:
    dec_ref r4
    dec_ref module
    dec_ref r127
    goto L304
L338:
    dec_ref r4
    dec_ref module
    dec_ref r131
    goto L304
L339:
    dec_ref r4
    dec_ref module
    dec_ref module_str
    goto L304
L340:
    dec_ref r4
    dec_ref module
    dec_ref module_str
    dec_ref r144
    dec_ref r145
    goto L304
L341:
    dec_ref r4
    dec_ref module
    dec_ref module_str
    dec_ref r144
    dec_ref r147
    goto L304
L342:
    dec_ref module_str
    dec_ref r152
    goto L77
L343:
    dec_ref r157
    goto L76
L344:
    dec_ref r160
    dec_ref r161
    dec_ref r162
    goto L83
L345:
    dec_ref r4
    dec_ref module
    dec_ref r144
    dec_ref r147
    dec_ref r158
    goto L81
L346:
    dec_ref r4
    dec_ref module
    dec_ref r144
    dec_ref r147
    goto L84
L347:
    dec_ref r144
    dec_ref r147
    goto L90
L348:
    dec_ref r4
    dec_ref module
    dec_ref r144
    goto L93
L349:
    dec_ref r176
    goto L89
L350:
    dec_ref r4
    dec_ref module
    goto L91
L351:
    xdec_ref r171
    goto L92
L352:
    dec_ref module
    dec_ref r181
    goto L304
L353:
    dec_ref module
    dec_ref r181
    dec_ref r186
    goto L304
L354:
    dec_ref r192
    goto L104
L355:
    dec_ref module
    dec_ref stringio
    dec_ref r181
    goto L304
L356:
    dec_ref module
    dec_ref stringio
    dec_ref r181
    dec_ref r208
    goto L304
L357:
    dec_ref r212
    goto L111
L358:
    dec_ref stringio
    dec_ref r181
    goto L304
L359:
    dec_ref r181
    dec_ref r216
    goto L304
L360:
    dec_ref r181
    dec_ref r220
    goto L304
L361:
    dec_ref module_str
    dec_ref r181
    goto L304
L362:
    dec_ref module_str
    dec_ref r181
    dec_ref r233
    dec_ref r234
    goto L304
L363:
    dec_ref module_str
    dec_ref r181
    dec_ref r233
    dec_ref r236
    goto L304
L364:
    dec_ref module_str
    dec_ref r241
    goto L122
L365:
    dec_ref r246
    goto L121
L366:
    dec_ref r249
    dec_ref r250
    dec_ref r251
    goto L128
L367:
    dec_ref r181
    dec_ref r233
    dec_ref r236
    dec_ref r247
    goto L126
L368:
    dec_ref r181
    dec_ref r233
    dec_ref r236
    goto L129
L369:
    dec_ref r233
    dec_ref r236
    goto L135
L370:
    dec_ref r181
    dec_ref r233
    goto L138
L371:
    dec_ref r265
    goto L134
L372:
    dec_ref r181
    goto L136
L373:
    xdec_ref r260
    goto L137
L374:
    dec_ref r181
    goto L304
L375:
    dec_ref r181
    dec_ref cmd
    goto L304
L376:
    dec_ref cmd
    dec_ref r285
    goto L304
L377:
    dec_ref cmd
    dec_ref r285
    dec_ref r290
    goto L304
L378:
    dec_ref r296
    goto L151
L379:
    dec_ref r285
    goto L304
L380:
    dec_ref r285
    dec_ref parsed_module_str
    goto L304
L381:
    dec_ref parsed_module_str
    dec_ref r312
    goto L304
L382:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r317
    goto L304
L383:
    dec_ref r323
    goto L161
L384:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    goto L304
L385:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r330
    goto L304
L386:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r330
    dec_ref r335
    goto L304
L387:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r330
    dec_ref r335
    dec_ref r340
    goto L304
L388:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r330
    dec_ref r335
    dec_ref r340
    dec_ref r345
    goto L304
L389:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r330
    dec_ref r335
    dec_ref r340
    dec_ref r345
    dec_ref r350
    goto L304
L390:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r330
    dec_ref r335
    dec_ref r340
    dec_ref r345
    dec_ref r350
    dec_ref r355
    goto L304
L391:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r330
    dec_ref r335
    dec_ref r340
    dec_ref r345
    dec_ref r350
    dec_ref r355
    dec_ref r360
    goto L304
L392:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r330
    dec_ref r335
    dec_ref r340
    dec_ref r345
    dec_ref r350
    dec_ref r355
    dec_ref r360
    dec_ref r365
    goto L304
L393:
    dec_ref r366
    goto L184
L394:
    dec_ref parsed_module_str
    dec_ref r312
    dec_ref r327
    dec_ref r366
    dec_ref r381
    goto L304
L395:
    dec_ref r385
    goto L182
L396:
    dec_ref r312
    dec_ref r327
    dec_ref r392
    goto L304
L397:
    dec_ref r312
    dec_ref r327
    dec_ref r398
    goto L304
L398:
    dec_ref r312
    dec_ref r327
    dec_ref r404
    goto L304
L399:
    dec_ref r312
    dec_ref r327
    dec_ref r410
    goto L304
L400:
    dec_ref r312
    dec_ref r327
    dec_ref r416
    goto L304
L401:
    dec_ref r312
    dec_ref r327
    dec_ref r422
    goto L304
L402:
    dec_ref r312
    dec_ref r327
    dec_ref r428
    goto L304
L403:
    dec_ref r312
    dec_ref r327
    dec_ref r434
    goto L304
L404:
    dec_ref r312
    dec_ref r446
    goto L304
L405:
    dec_ref r312
    dec_ref parsed_module
    goto L304
L406:
    dec_ref stringio
    dec_ref r312
    dec_ref parsed_module
    goto L304
L407:
    dec_ref stringio
    dec_ref r312
    dec_ref parsed_module
    dec_ref r466
    goto L304
L408:
    dec_ref r470
    goto L203
L409:
    dec_ref stringio
    dec_ref r312
    goto L304
L410:
    dec_ref stringio
    dec_ref r312
    dec_ref r478
    dec_ref r479
    goto L304
L411:
    dec_ref stringio
    dec_ref r312
    dec_ref r478
    dec_ref r481
    goto L304
L412:
    dec_ref stringio
    dec_ref r486
    goto L214
L413:
    dec_ref r486
    dec_ref r491
    goto L214
L414:
    dec_ref r486
    dec_ref r495
    goto L214
L415:
    dec_ref r486
    dec_ref r500
    goto L214
L416:
    dec_ref r504
    goto L213
L417:
    dec_ref r507
    dec_ref r508
    dec_ref r509
    goto L220
L418:
    dec_ref r312
    dec_ref r478
    dec_ref r481
    dec_ref r505
    goto L218
L419:
    dec_ref r312
    dec_ref r478
    dec_ref r481
    goto L221
L420:
    dec_ref r478
    dec_ref r481
    goto L227
L421:
    dec_ref r312
    dec_ref r478
    goto L230
L422:
    dec_ref r523
    goto L226
L423:
    dec_ref r312
    goto L228
L424:
    xdec_ref r518
    goto L229
L425:
    dec_ref r312
    goto L304
L426:
    dec_ref r312
    dec_ref cmd1
    goto L304
L427:
    dec_ref r312
    dec_ref cmd1
    dec_ref cmd2
    goto L304
L428:
    dec_ref r312
    dec_ref cmd1
    dec_ref cmd2
    dec_ref cmd3
    goto L304
L429:
    dec_ref r312
    dec_ref cmd1
    dec_ref cmd2
    dec_ref cmd3
    dec_ref cmd4
    goto L304
L430:
    dec_ref r312
    dec_ref cmd1
    dec_ref cmd2
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    goto L304
L431:
    dec_ref cmd1
    dec_ref cmd2
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r608
    goto L304
L432:
    dec_ref cmd1
    dec_ref cmd2
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r608
    dec_ref r613
    goto L304
L433:
    dec_ref r619
    goto L248
L434:
    dec_ref r628
    goto L250
L435:
    dec_ref cmd2
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r608
    goto L304
L436:
    dec_ref cmd2
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r632
    goto L304
L437:
    dec_ref cmd2
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r632
    dec_ref r637
    goto L304
L438:
    dec_ref r643
    goto L257
L439:
    dec_ref r649
    goto L259
L440:
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r632
    goto L304
L441:
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r653
    goto L304
L442:
    dec_ref cmd3
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r653
    dec_ref r658
    goto L304
L443:
    dec_ref r664
    goto L266
L444:
    dec_ref r670
    goto L268
L445:
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r653
    goto L304
L446:
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r674
    goto L304
L447:
    dec_ref cmd4
    dec_ref cmd5
    dec_ref r674
    dec_ref r679
    goto L304
L448:
    dec_ref r685
    goto L275
L449:
    dec_ref r691
    goto L277
L450:
    dec_ref cmd5
    dec_ref r674
    goto L304
L451:
    dec_ref cmd5
    dec_ref r695
    goto L304
L452:
    dec_ref cmd5
    dec_ref r695
    dec_ref r700
    goto L304
L453:
    dec_ref r706
    goto L284
L454:
    dec_ref r715
    goto L286
L455:
    dec_ref r695
    goto L304
L456:
    dec_ref r719
    goto L304
L457:
    dec_ref r719
    dec_ref r724
    goto L304
L458:
    dec_ref r730
    goto L293
L459:
    dec_ref r742
    goto L304
L460:
    dec_ref r748
    goto L301
L461:
    dec_ref r755
    goto L303

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: object_ptr
    r6 :: object_ptr[1]
    r7 :: c_ptr
    r8 :: native_int[1]
    r9 :: c_ptr
    r10 :: object
    r11 :: dict
    r12, r13 :: str
    r14 :: bit
    r15 :: object
    r16 :: str
    r17, r18 :: object
    r19 :: float
    r20 :: bit
    r21 :: dict
    r22 :: str
    r23 :: object
    r24 :: i32
    r25 :: bit
    r26, r27 :: object
    r28 :: str
    r29 :: dict
    r30, r31 :: object
    r32 :: str
    r33 :: dict
    r34, r35 :: object
    r36 :: str
    r37 :: dict
    r38, r39 :: object
    r40 :: str
    r41 :: dict
    r42, r43 :: object
    r44 :: str
    r45 :: dict
    r46, r47 :: object
    r48 :: str
    r49 :: dict
    r50, r51 :: object
    r52 :: str
    r53 :: dict
    r54, r55 :: object
    r56 :: str
    r57 :: dict
    r58, r59 :: object
    r60 :: str
    r61 :: dict
    r62, r63 :: object
    r64 :: str
    r65 :: dict
    r66 :: object
    r67 :: object_ptr
    r68 :: object_ptr[1]
    r69 :: c_ptr
    r70 :: native_int[1]
    r71 :: c_ptr
    r72 :: object
    r73 :: dict
    r74, r75 :: str
    r76 :: bit
    r77 :: object
    r78 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L22 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address time :: module
    r6 = [r5]
    r7 = load_address r6
    r8 = [1]
    r9 = load_address r8
    r10 = (('time', 'time', 'time'),)
    r11 = compiler.globals :: static
    r12 = 'compiler.py'
    r13 = '<module>'
    r14 = CPyImport_ImportMany(r10, r7, r11, r12, r13, r9)
    if not r14 goto L22 else goto L4 :: bool
L4:
    r15 = time :: module
    r16 = 'time'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L22 (error at <module>:3) else goto L5
L5:
    r18 = _PyObject_Vectorcall(r17, 0, 0, 0)
    dec_ref r17
    if is_error(r18) goto L22 (error at <module>:3) else goto L6
L6:
    r19 = unbox(float, r18)
    dec_ref r18
    r20 = r19 == -113.0
    if r20 goto L8 else goto L7 :: bool
L7:
    r21 = compiler.globals :: static
    r22 = 'start_time'
    r23 = box(float, r19)
    r24 = CPyDict_SetItem(r21, r22, r23)
    dec_ref r23
    r25 = r24 >= 0 :: signed
    if not r25 goto L22 (error at <module>:3) else goto L9 :: bool
L8:
    r26 = PyErr_Occurred()
    if not is_error(r26) goto L22 (error at <module>:3) else goto L7
L9:
    r27 = ('Lark',)
    r28 = 'lark'
    r29 = compiler.globals :: static
    r30 = CPyImport_ImportFromMany(r28, r27, r27, r29)
    if is_error(r30) goto L22 (error at <module>:5) else goto L10
L10:
    lark = r30 :: module
    dec_ref r30
    r31 = ('llvm', 'cf', 'scf', 'builtin', 'arith', 'func', 'memref')
    r32 = 'xdsl.dialects'
    r33 = compiler.globals :: static
    r34 = CPyImport_ImportFromMany(r32, r31, r31, r33)
    if is_error(r34) goto L22 (error at <module>:6) else goto L11
L11:
    xdsl.dialects = r34 :: module
    dec_ref r34
    r35 = ('MiniLang',)
    r36 = 'core_dialect'
    r37 = compiler.globals :: static
    r38 = CPyImport_ImportFromMany(r36, r35, r35, r37)
    if is_error(r38) goto L22 (error at <module>:7) else goto L12
L12:
    core_dialect = r38 :: module
    dec_ref r38
    r39 = ('MLContext',)
    r40 = 'xdsl.context'
    r41 = compiler.globals :: static
    r42 = CPyImport_ImportFromMany(r40, r39, r39, r41)
    if is_error(r42) goto L22 (error at <module>:8) else goto L13
L13:
    xdsl.context = r42 :: module
    dec_ref r42
    r43 = ('Printer',)
    r44 = 'xdsl.printer'
    r45 = compiler.globals :: static
    r46 = CPyImport_ImportFromMany(r44, r43, r43, r45)
    if is_error(r46) goto L22 (error at <module>:9) else goto L14
L14:
    xdsl.printer = r46 :: module
    dec_ref r46
    r47 = ('Parser',)
    r48 = 'xdsl.parser'
    r49 = compiler.globals :: static
    r50 = CPyImport_ImportFromMany(r48, r47, r47, r49)
    if is_error(r50) goto L22 (error at <module>:10) else goto L15
L15:
    xdsl.parser = r50 :: module
    dec_ref r50
    r51 = ('StringIO',)
    r52 = 'io'
    r53 = compiler.globals :: static
    r54 = CPyImport_ImportFromMany(r52, r51, r51, r53)
    if is_error(r54) goto L22 (error at <module>:11) else goto L16
L16:
    io = r54 :: module
    dec_ref r54
    r55 = ('first_pass', 'second_pass')
    r56 = 'lower'
    r57 = compiler.globals :: static
    r58 = CPyImport_ImportFromMany(r56, r55, r55, r57)
    if is_error(r58) goto L22 (error at <module>:12) else goto L17
L17:
    lower = r58 :: module
    dec_ref r58
    r59 = ('argv',)
    r60 = 'sys'
    r61 = compiler.globals :: static
    r62 = CPyImport_ImportFromMany(r60, r59, r59, r61)
    if is_error(r62) goto L22 (error at <module>:13) else goto L18
L18:
    sys = r62 :: module
    dec_ref r62
    r63 = ('CSTTransformer',)
    r64 = 'parser'
    r65 = compiler.globals :: static
    r66 = CPyImport_ImportFromMany(r64, r63, r63, r65)
    if is_error(r66) goto L22 (error at <module>:14) else goto L19
L19:
    parser = r66 :: module
    dec_ref r66
    r67 = load_address subprocess :: module
    r68 = [r67]
    r69 = load_address r68
    r70 = [15]
    r71 = load_address r70
    r72 = (('subprocess', 'subprocess', 'subprocess'),)
    r73 = compiler.globals :: static
    r74 = 'compiler.py'
    r75 = '<module>'
    r76 = CPyImport_ImportMany(r72, r69, r73, r74, r75, r71)
    if not r76 goto L22 else goto L20 :: bool
L20:
    r77 = main()
    if is_error(r77) goto L22 (error at <module>:98) else goto L23
L21:
    return 1
L22:
    r78 = <error> :: None
    return r78
L23:
    dec_ref r77
    goto L21
