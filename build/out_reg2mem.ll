; ModuleID = 'llvm-link'
source_filename = "llvm-link"

@Integer_field_value = internal constant { ptr, ptr } { ptr @Integer_getter_value, ptr @Integer_setter_value }
@Integer2_field_value = internal constant { ptr, ptr } { ptr @Integer2_getter_value, ptr @Integer2_setter_value }
@Animal_field_age = internal constant { ptr, ptr } { ptr @Animal_getter_age, ptr @Animal_setter_age }
@Animal_field_hp = internal constant { ptr, ptr } { ptr @Animal_getter_hp, ptr @Animal_setter_hp }
@Animal_field_skill = internal constant { ptr, ptr } { ptr @Animal_getter_skill, ptr @Animal_setter_skill }
@Beaver_field_color = internal constant { ptr, ptr } { ptr @Beaver_getter_color, ptr @Beaver_setter_color }
@Beaver_field_name = internal constant { ptr, ptr } { ptr @Beaver_getter_name, ptr @Beaver_setter_name }
@ListNode_field_data = internal constant { ptr, ptr } { ptr @ListNode_getter_data, ptr @ListNode_setter_data }
@ListNode_field_next = internal constant { ptr, ptr } { ptr @ListNode_getter_next, ptr @ListNode_setter_next }
@ListIterator_field_node = internal constant { ptr, ptr } { ptr @ListIterator_getter_node, ptr @ListIterator_setter_node }
@string_string = internal constant [4 x i8] c"%s\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null
@bool_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i8_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i32_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i64_typ_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@f64_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@nil_typ_hashtbl = constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@any_typ_hashtbl = constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = constant [1 x i32] [i32 10]
@nothing_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @nothing_typ]
@nothing_typ_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 10]
@function_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@buffer_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@union_typ_hashtbl = constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 10]
@Object_hashtbl = constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@Pair_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = constant [4 x i32] [i32 20, i32 10, i32 10, i32 0]
@Pair = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_data_size_Pair, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@Iterator_hashtbl = constant [4 x ptr] [ptr @Iterator, ptr @any_typ, ptr @Container, ptr @Object]
@Iterator_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 13, i32 13]
@Iterable_hashtbl = constant [4 x ptr] [ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 33, i32 33]
@MapIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@MapIterable_offset_tbl = constant [8 x i32] [i32 0, i32 61, i32 10, i32 38, i32 61, i32 0, i32 0, i32 10]
@MapIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @Container, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 10, i32 21, i32 0, i32 18, i32 0, i32 0]
@MapIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr @_data_size_MapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @MapIterator_field_MapIterator_0, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_next_, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @FilterIterable, ptr null, ptr @Container, ptr @Iterable, ptr null]
@FilterIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 10, i32 0, i32 60, i32 37, i32 0]
@FilterIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@FilterIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr @_data_size_FilterIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1, ptr @FilterIterator_next_, ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr @ChainIterable, ptr @Container, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = constant [8 x i32] [i32 10, i32 37, i32 0, i32 10, i32 60, i32 0, i32 0, i32 60]
@ChainIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr @_data_size_ChainIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIterableT_secondIterableT, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_i1, ptr @ChainIterable_B_any_fFunctionT_to_i1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_i1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_init_firstIterableT_secondIterableT, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_i1, ptr @ChainIterable_B_any_fFunctionT_to_i1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_i1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ChainIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ChainIterator]
@ChainIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 21, i32 18, i32 21, i32 0, i32 10, i32 10]
@ChainIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr @_data_size_ChainIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_next_, ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @InterleaveIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@InterleaveIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 37, i32 60, i32 0, i32 0, i32 10]
@InterleaveIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr @_data_size_InterleaveIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_i1, ptr @InterleaveIterable_B_any_fFunctionT_to_i1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_i1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_i1, ptr @InterleaveIterable_B_any_fFunctionT_to_i1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_i1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@InterleaveIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @InterleaveIterator, ptr @Iterator, ptr null, ptr null]
@InterleaveIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 0, i32 21, i32 10, i32 18, i32 0, i32 0]
@InterleaveIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr @_data_size_InterleaveIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@ZipIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr null, ptr @Container, ptr null, ptr @ZipIterable, ptr @Object]
@ZipIterable_offset_tbl = constant [8 x i32] [i32 10, i32 39, i32 0, i32 0, i32 62, i32 0, i32 10, i32 62]
@ZipIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr @_data_size_ZipIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ZipIterable_field_ZipIterable_0, ptr @ZipIterable_field_ZipIterable_1, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIterableT_secondIterableU, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_i1, ptr @ZipIterable_B_any_fFunctionT_to_i1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_i1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_init_firstIterableT_secondIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_i1, ptr @ZipIterable_B_any_fFunctionT_to_i1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_i1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ZipIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 22, i32 19, i32 22, i32 0, i32 10, i32 10]
@ZipIterator = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr @_data_size_ZipIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ZipIterator_field_ZipIterator_0, ptr @ZipIterator_field_ZipIterator_1, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_next_, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ProductIterable, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr null]
@ProductIterable_offset_tbl = constant [8 x i32] [i32 62, i32 10, i32 10, i32 62, i32 0, i32 39, i32 0, i32 0]
@ProductIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr @_data_size_ProductIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ProductIterable_field_ProductIterable_0, ptr @ProductIterable_field_ProductIterable_1, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIterableT_secondIterableU, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_i1, ptr @ProductIterable_B_any_fFunctionT_to_i1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_i1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_init_firstIterableT_secondIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_i1, ptr @ProductIterable_B_any_fFunctionT_to_i1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_i1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ProductIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr null, ptr @Container, ptr @Object, ptr null, ptr @ProductIterator]
@ProductIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 21, i32 0, i32 24, i32 24, i32 0, i32 10]
@ProductIterator = constant { [3 x i64], [7 x ptr], [14 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr @_data_size_ProductIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [14 x ptr] [ptr @ProductIterator_field_ProductIterator_0, ptr @ProductIterator_field_ProductIterator_1, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_next_, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_B_next_, ptr @ProductIterator_next_] }
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@Representable_hashtbl = constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 12]
@String_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @Representable, ptr @Container, ptr @Object, ptr null, ptr null, ptr @String]
@String_offset_tbl = constant [8 x i32] [i32 10, i32 64, i32 87, i32 87, i32 87, i32 0, i32 0, i32 10]
@Character_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = constant [4 x i32] [i32 15, i32 0, i32 10, i32 10]
@StringIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @StringIterator, ptr null]
@StringIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@Exception_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@IO_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 20]
@_parameterization_FileWriter = linkonce_odr constant [2 x ptr] [ptr @FileWriter, ptr null]
@_parameterization_FileReader = linkonce_odr constant [2 x ptr] [ptr @FileReader, ptr null]
@_parameterization_File = linkonce_odr constant [2 x ptr] [ptr @File, ptr null]
@FileSystemError_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @FileSystemError, ptr @Object, ptr @Exception]
@FileSystemError_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 36, i32 23]
@FileSystemError = constant { [3 x i64], [7 x ptr], [26 x ptr] } { [3 x i64] [i64 -4504708879057548074, i64 4611686018427388291, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileSystemError_hashtbl, ptr @FileSystemError_offset_tbl, ptr @_data_size_FileSystemError, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [26 x ptr] [ptr @FileSystemError_field_line_number, ptr @FileSystemError_field_file_name, ptr @FileSystemError_field_message, ptr @FileSystemError_B_init_messageString, ptr @FileSystemError_B_init_, ptr @FileSystemError_B_set_info_line_numberi32_file_nameString, ptr @FileSystemError_B_report_, ptr @FileSystemError_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_, ptr @FileSystemError_field_line_number, ptr @FileSystemError_field_file_name, ptr @FileSystemError_field_message, ptr @FileSystemError_B_init_messageString, ptr @FileSystemError_B_init_, ptr @FileSystemError_B_set_info_line_numberi32_file_nameString, ptr @FileSystemError_B_report_, ptr @FileSystemError_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@File_hashtbl = constant [4 x ptr] [ptr @File, ptr null, ptr @any_typ, ptr @Object]
@File_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 30]
@File = constant { [3 x i64], [7 x ptr], [20 x ptr] } { [3 x i64] [i64 -2227788838181535664, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @File_hashtbl, ptr @File_offset_tbl, ptr @_data_size_File, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [20 x ptr] [ptr @File_field_name, ptr @File_field_mode, ptr @File_field_handle, ptr @File_field_open, ptr @File_B_init_nameString_modeString, ptr @File_B__set_mode_modeString, ptr @File_B_reopen_, ptr @File_B_close_, ptr @File_B_size_, ptr @File_B_read_, ptr @File_B_read_byte_, ptr @File_B_write_textString, ptr @File_init_nameString_modeString, ptr @File__set_mode_modeString, ptr @File_reopen_, ptr @File_close_, ptr @File_size_, ptr @File_read_, ptr @File_read_byte_, ptr @File_write_textString] }
@FileProcessor_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr null]
@FileProcessor_offset_tbl = constant [4 x i32] [i32 13, i32 10, i32 10, i32 0]
@FileProcessor = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 4146660827496349788, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileProcessor_hashtbl, ptr @FileProcessor_offset_tbl, ptr @_data_size_FileProcessor, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@FileReader_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr @FileReader]
@FileReader_offset_tbl = constant [4 x i32] [i32 18, i32 10, i32 15, i32 10]
@FileReader = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 5641023583277533454, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileReader_hashtbl, ptr @FileReader_offset_tbl, ptr @_data_size_FileReader, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @FileReader_field_FileReader_0, ptr @FileReader_B_init_, ptr @FileReader_B_process_fileFile, ptr @FileReader_init_, ptr @FileReader_process_fileFile, ptr @FileReader_field_FileReader_0, ptr @FileReader_B_process_fileFile, ptr @FileReader_process_fileFile] }
@FileWriter_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr @FileWriter]
@FileWriter_offset_tbl = constant [4 x i32] [i32 19, i32 10, i32 16, i32 10]
@FileWriter = constant { [3 x i64], [7 x ptr], [9 x ptr] } { [3 x i64] [i64 2522433070607690589, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileWriter_hashtbl, ptr @FileWriter_offset_tbl, ptr @_data_size_FileWriter, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [9 x ptr] [ptr @FileWriter_field_text, ptr @FileWriter_field_FileWriter_0, ptr @FileWriter_B_init_textString, ptr @FileWriter_B_process_fileFile, ptr @FileWriter_init_textString, ptr @FileWriter_process_fileFile, ptr @FileWriter_field_FileWriter_0, ptr @FileWriter_B_process_fileFile, ptr @FileWriter_process_fileFile] }
@FileSystem_hashtbl = constant [4 x ptr] [ptr @Object, ptr @FileSystem, ptr @any_typ, ptr null]
@FileSystem_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 10, i32 0]
@FileSystemError_field_line_number = internal constant { ptr, ptr } { ptr @FileSystemError_getter_line_number, ptr @FileSystemError_setter_line_number }
@FileSystemError_field_file_name = internal constant { ptr, ptr } { ptr @FileSystemError_getter_file_name, ptr @FileSystemError_setter_file_name }
@FileSystemError_field_message = internal constant { ptr, ptr } { ptr @FileSystemError_getter_message, ptr @FileSystemError_setter_message }
@File_field_name = internal constant { ptr, ptr } { ptr @File_getter_name, ptr @File_setter_name }
@File_field_mode = internal constant { ptr, ptr } { ptr @File_getter_mode, ptr @File_setter_mode }
@File_field_handle = internal constant { ptr, ptr } { ptr @File_getter_handle, ptr @File_setter_handle }
@File_field_open = internal constant { ptr, ptr } { ptr @File_getter_open, ptr @File_setter_open }
@FileWriter_field_text = internal constant { ptr, ptr } { ptr @FileWriter_getter_text, ptr @FileWriter_setter_text }
@Array_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Array, ptr @Representable, ptr @Object]
@Array_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 68, i32 10, i32 91, i32 10, i32 91, i32 91]
@ArrayIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr @Iterator, ptr null, ptr null]
@ArrayIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 10, i32 17, i32 0, i32 0]
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@Blocking_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Blocking, ptr null]
@Blocking_offset_tbl = constant [4 x i32] [i32 12, i32 10, i32 10, i32 0]
@Blocking = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 847773162914674935, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Blocking_hashtbl, ptr @Blocking_offset_tbl, ptr @_data_size_Blocking, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Blocking_B_init_, ptr @Blocking_init_] }
@Channel_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Channel]
@Channel_offset_tbl = constant [4 x i32] [i32 18, i32 10, i32 0, i32 10]
@Channel_field_value = internal constant { ptr, ptr } { ptr @Channel_getter_value, ptr @Channel_setter_value }
@Container = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_data_size_Container, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterator = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388349, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_data_size_Iterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterable = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388477, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_data_size_Iterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Range_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr @Range]
@Range_offset_tbl = constant [8 x i32] [i32 65, i32 10, i32 0, i32 65, i32 0, i32 42, i32 0, i32 10]
@RangeIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr @RangeIterator, ptr @Container, ptr @Object, ptr null, ptr null]
@RangeIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 18, i32 10, i32 21, i32 21, i32 0, i32 0]
@Range_field_start = internal constant { ptr, ptr } { ptr @Range_getter_start, ptr @Range_setter_start }
@Range_field_end = internal constant { ptr, ptr } { ptr @Range_getter_end, ptr @Range_setter_end }
@Range_field_step = internal constant { ptr, ptr } { ptr @Range_getter_step, ptr @Range_setter_step }
@RangeIterator_field_counter = internal constant { ptr, ptr } { ptr @RangeIterator_getter_counter, ptr @RangeIterator_setter_counter }
@RangeIterator_field_end = internal constant { ptr, ptr } { ptr @RangeIterator_getter_end, ptr @RangeIterator_setter_end }
@RangeIterator_field_step = internal constant { ptr, ptr } { ptr @RangeIterator_getter_step, ptr @RangeIterator_setter_step }
@Math_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Math]
@Math_offset_tbl = constant [4 x i32] [i32 27, i32 0, i32 10, i32 10]
@_parameterization_Nothing = linkonce_odr constant [2 x ptr] [ptr @nothing_typ, ptr null]
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@_parameterization_i1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@_parameterization_Functioni32_to_i1 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_i1, ptr @_parameterization_i32, ptr null]
@_parameterization_i32_or_Nil = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_i32, ptr @_parameterization_Nil, ptr null]
@_parameterization_Functioni32_to_Nothing = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Nothing, ptr @_parameterization_i32, ptr null]
@_parameterization_Functioni32._i32_to_i32 = linkonce_odr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@_parameterization_Functioni32_to_i32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@_parameterization_Integer2 = linkonce_odr constant [2 x ptr] [ptr @Integer2, ptr null]
@_parameterization_Character = linkonce_odr constant [2 x ptr] [ptr @Character, ptr null]
@_parameterization_i8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@_parameterization_Arrayi32 = linkonce_odr constant [3 x ptr] [ptr @Array, ptr @_parameterization_i32, ptr null]
@_parameterization_Bufferi32 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@_parameterization_Beaver = linkonce_odr constant [2 x ptr] [ptr @Beaver, ptr null]
@_parameterization_Animal = linkonce_odr constant [2 x ptr] [ptr @Animal, ptr null]
@_parameterization_i32_or_f64 = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_i32, ptr @_parameterization_f64, ptr null]
@_parameterization_i64 = linkonce_odr constant [2 x ptr] [ptr @i64_typ, ptr null]
@_parameterization_ListNode = linkonce_odr constant [2 x ptr] [ptr @ListNode, ptr null]
@_parameterization_f64 = linkonce_odr constant [2 x ptr] [ptr @f64_typ, ptr null]
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@_parameterization_i32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@_parameterization_Bufferi8 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@bool_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_data_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ, ptr @_data_size_bool_typ], [0 x ptr] undef }
@i8_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_data_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ, ptr @_data_size_i8_typ], [0 x ptr] undef }
@i32_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_data_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ, ptr @_data_size_i32_typ], [0 x ptr] undef }
@i64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_data_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ, ptr @_data_size_i64_typ], [0 x ptr] undef }
@f64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_data_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ, ptr @_data_size_f64_typ], [0 x ptr] undef }
@nil_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_data_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ, ptr @_data_size_nil_typ], [0 x ptr] undef }
@any_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [7 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_data_size_any_typ, ptr @_box_Default, ptr @_unbox_Default, ptr @_data_size_any_typ], [0 x ptr] undef }
@nothing_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr @_data_size_nothing_typ, ptr @_box_nothing_typ, ptr @_unbox_nothing_typ, ptr @_data_size_nothing_typ], [0 x ptr] undef }
@function_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_data_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ, ptr @_data_size_function_typ], [0 x ptr] undef }
@buffer_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_data_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ, ptr @_data_size_buffer_typ], [0 x ptr] undef }
@union_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_data_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ, ptr @_data_size_union_typ], [0 x ptr] undef }
@Object = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_data_size_Object, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@MapIterable = constant { [3 x i64], [7 x ptr], [51 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr @_data_size_MapIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [51 x ptr] [ptr @MapIterable_field_MapIterable_0, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_i1, ptr @MapIterable_B_any_fFunctionT_to_i1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_i1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_i1, ptr @MapIterable_B_any_fFunctionT_to_i1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_i1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@FilterIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388319, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr @_data_size_FilterIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_i1, ptr @FilterIterable_B_any_fFunctionT_to_i1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_i1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_init_iterableIterableT_fFunctionT_to_i1, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_i1, ptr @FilterIterable_B_any_fFunctionT_to_i1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_i1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@Representable = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_data_size_Representable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String = constant { [3 x i64], [7 x ptr], [79 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388601, i64 7], [7 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_data_size_String, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [79 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_field_String_0, ptr @String_B__Self_from_c_string_c_stringBufferi8, ptr @String_B_init_, ptr @String_B_init_bytesBufferi8_lengthi32_capacityi32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_c_string_, ptr @String_B_append_xi8, ptr @String_B_extend_strString, ptr @String_B__index_xi32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_i1, ptr @String_B_any_fFunctionT_to_i1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_i1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_B_repr_, ptr @String__Self_from_c_string_c_stringBufferi8, ptr @String_init_, ptr @String_init_bytesBufferi8_lengthi32_capacityi32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_c_string_, ptr @String_append_xi8, ptr @String_extend_strString, ptr @String__index_xi32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_repr_, ptr @String_field_String_0, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_i1, ptr @String_B_any_fFunctionT_to_i1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_i1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_B_repr_, ptr @String_repr_] }
@Character = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_data_size_Character, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytei8, ptr @Character_byte_, ptr @Character_init_bytei8] }
@StringIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_data_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_next_, ptr @StringIterator_next_] }
@Exception = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_data_size_Exception, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberi32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@Math = constant { [3 x i64], [7 x ptr], [17 x ptr] } { [3 x i64] [i64 8094150130346788308, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Math_hashtbl, ptr @Math_offset_tbl, ptr @_data_size_Math, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [17 x ptr] [ptr @Math_B__Self_sqrt_xf64, ptr @Math_B__Self_abs_xf64__Self_abs_xi32, ptr @Math_B__Self_max_af64_bf64__Self_max_ai32_bi32, ptr @Math_B__Self_min_ai32_bi32__Self_min_af64_bf64, ptr @Math_B__Self_round_xf64, ptr @Math_B__Self_floor_xf64, ptr @Math_B__Self_ceiling_xf64, ptr @Math__Self_sqrt_xf64, ptr @Math__Self_abs_xf64, ptr @Math__Self_abs_xi32, ptr @Math__Self_max_af64_bf64, ptr @Math__Self_max_ai32_bi32, ptr @Math__Self_min_ai32_bi32, ptr @Math__Self_min_af64_bf64, ptr @Math__Self_round_xf64, ptr @Math__Self_floor_xf64, ptr @Math__Self_ceiling_xf64] }
@Range = constant { [3 x i64], [7 x ptr], [55 x ptr] } { [3 x i64] [i64 5490049236840671069, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Range_hashtbl, ptr @Range_offset_tbl, ptr @_data_size_Range, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [55 x ptr] [ptr @Range_field_start, ptr @Range_field_end, ptr @Range_field_step, ptr @Range_field_Range_0, ptr @Range_B_init_endi32, ptr @Range_B_init_starti32_endi32, ptr @Range_B_step_stepi32, ptr @Range_B_iterator_, ptr @Range_B_each_fFunctionT_to_Nothing, ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Range_B_all_fFunctionT_to_i1, ptr @Range_B_any_fFunctionT_to_i1, ptr @Range_B_map_fFunctionT_to_U, ptr @Range_B_filter_fFunctionT_to_i1, ptr @Range_B_chain_otherIterableT, ptr @Range_B_interleave_otherIterableT, ptr @Range_B_zip_otherIterableU, ptr @Range_B_product_otherIterableU, ptr @Range_init_endi32, ptr @Range_init_starti32_endi32, ptr @Range_step_stepi32, ptr @Range_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Range_field_Range_0, ptr @Range_B_iterator_, ptr @Range_B_each_fFunctionT_to_Nothing, ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Range_B_all_fFunctionT_to_i1, ptr @Range_B_any_fFunctionT_to_i1, ptr @Range_B_map_fFunctionT_to_U, ptr @Range_B_filter_fFunctionT_to_i1, ptr @Range_B_chain_otherIterableT, ptr @Range_B_interleave_otherIterableT, ptr @Range_B_zip_otherIterableU, ptr @Range_B_product_otherIterableU, ptr @Range_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@RangeIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -913562485944406675, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @RangeIterator_hashtbl, ptr @RangeIterator_offset_tbl, ptr @_data_size_RangeIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @RangeIterator_field_counter, ptr @RangeIterator_field_end, ptr @RangeIterator_field_step, ptr @RangeIterator_field_RangeIterator_0, ptr @RangeIterator_B_init_counteri32_endi32_stepi32, ptr @RangeIterator_B_next_, ptr @RangeIterator_init_counteri32_endi32_stepi32, ptr @RangeIterator_next_, ptr @RangeIterator_field_RangeIterator_0, ptr @RangeIterator_B_next_, ptr @RangeIterator_next_] }
@IO = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_data_size_IO, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @IO_B__Self_print_xString__Self_print_xCharacter__Self_print_xNil__Self_print_xi8__Self_print_xi64__Self_print_xi1__Self_print_xRepresentable__Self_print_xi32__Self_print_xf64, ptr @IO__Self_print_xString, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xi8, ptr @IO__Self_print_xi64, ptr @IO__Self_print_xi1, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xi32, ptr @IO__Self_print_xf64] }
@Channel = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -3668118116639750450, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Channel_hashtbl, ptr @Channel_offset_tbl, ptr @_data_size_Channel, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @Channel_field_Channel_0, ptr @Channel_field_value, ptr @Channel_B_init_, ptr @Channel_B_get_, ptr @Channel_B_put_new_valueT, ptr @Channel_init_, ptr @Channel_get_, ptr @Channel_put_new_valueT] }
@Array = constant { [3 x i64], [7 x ptr], [83 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_data_size_Array, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [83 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterableT, ptr @Array_B_init_, ptr @Array_B_init_capacityi32, ptr @Array_B_init_lengthi32_capacityi32, ptr @Array_B_init_bufferBufferT_lengthi32_capacityi32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_extend_otherArrayT, ptr @Array_B_reserve_new_capacityi32, ptr @Array_B__index_xi32, ptr @Array_B__set_index_xi32_valueT, ptr @Array_B_throw_oob_xi32, ptr @Array_B_unchecked_index_xi32, ptr @Array_B_unchecked_insert_xi32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_i1, ptr @Array_B_any_fFunctionT_to_i1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_i1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_B_repr_, ptr @Array__Self_from_iterable_iterableIterableT, ptr @Array_init_, ptr @Array_init_capacityi32, ptr @Array_init_lengthi32_capacityi32, ptr @Array_init_bufferBufferT_lengthi32_capacityi32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_extend_otherArrayT, ptr @Array_reserve_new_capacityi32, ptr @Array__index_xi32, ptr @Array__set_index_xi32_valueT, ptr @Array_throw_oob_xi32, ptr @Array_unchecked_index_xi32, ptr @Array_unchecked_insert_xi32_valueT, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_repr_, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_i1, ptr @Array_B_any_fFunctionT_to_i1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_i1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_B_repr_, ptr @Array_repr_] }
@ArrayIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_data_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@FileSystem = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 5344209596779946859, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileSystem_hashtbl, ptr @FileSystem_offset_tbl, ptr @_data_size_FileSystem, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @FileSystem_B__Self_process_file_file_nameString_modeString_processorFileProcessorT__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, ptr @FileSystem_B__Self_read_file_file_nameString, ptr @FileSystem_B__Self_write_file_file_nameString_textString, ptr @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, ptr @FileSystem__Self_read_file_file_nameString, ptr @FileSystem__Self_write_file_file_nameString_textString] }
@Integer_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Integer]
@Integer_offset_tbl = constant [4 x i32] [i32 23, i32 10, i32 0, i32 10]
@Integer = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 -735147942809078232, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Integer_hashtbl, ptr @Integer_offset_tbl, ptr @_data_size_Integer, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Integer_field_value, ptr @Integer_B_init_valuei32, ptr @Integer_B__ADD_otheri32, ptr @Integer_B__SUB_otheri32, ptr @Integer_B__MUL_otheri32, ptr @Integer_B__DIV_otheri32, ptr @Integer_B_print_, ptr @Integer_init_valuei32, ptr @Integer__ADD_otheri32, ptr @Integer__SUB_otheri32, ptr @Integer__MUL_otheri32, ptr @Integer__DIV_otheri32, ptr @Integer_print_] }
@BigBoy_hashtbl = constant [4 x ptr] [ptr @Representable, ptr @Object, ptr @any_typ, ptr @BigBoy]
@BigBoy_offset_tbl = constant [4 x i32] [i32 14, i32 16, i32 10, i32 10]
@BigBoy = constant { [3 x i64], [7 x ptr], [6 x ptr] } { [3 x i64] [i64 3069357308562348185, i64 4611686018427388361, i64 3], [7 x ptr] [ptr @subtype_test, ptr @BigBoy_hashtbl, ptr @BigBoy_offset_tbl, ptr @_data_size_BigBoy, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [6 x ptr] [ptr @BigBoy_B_introduce_, ptr @BigBoy_B_repr_, ptr @BigBoy_introduce_, ptr @Representable_repr_, ptr @BigBoy_B_repr_, ptr @Representable_repr_] }
@Integer2_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Integer2, ptr @Integer, ptr @Representable, ptr null, ptr @BigBoy]
@Integer2_offset_tbl = constant [8 x i32] [i32 0, i32 42, i32 10, i32 10, i32 29, i32 48, i32 0, i32 42]
@Integer2 = constant { [3 x i64], [7 x ptr], [40 x ptr] } { [3 x i64] [i64 1844024195090879880, i64 4611686018427388181, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Integer2_hashtbl, ptr @Integer2_offset_tbl, ptr @_data_size_Integer2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [40 x ptr] [ptr @Integer2_field_value, ptr @Integer2_B_value_, ptr @Integer2_B_init_valuei32, ptr @Integer2_B__ADD_otheri32, ptr @Integer2_B__SUB_otheri32, ptr @Integer2_B__MUL_otheri32, ptr @Integer2_B__DIV_otheri32, ptr @Integer2_B_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @Integer2_value_, ptr @Integer_init_valuei32, ptr @Integer__ADD_otheri32, ptr @Integer__SUB_otheri32, ptr @Integer__MUL_otheri32, ptr @Integer__DIV_otheri32, ptr @Integer_print_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_field_value, ptr @Integer2_B_init_valuei32, ptr @Integer2_B__ADD_otheri32, ptr @Integer2_B__SUB_otheri32, ptr @Integer2_B__MUL_otheri32, ptr @Integer2_B__DIV_otheri32, ptr @Integer2_B_print_, ptr @Integer_init_valuei32, ptr @Integer__ADD_otheri32, ptr @Integer__SUB_otheri32, ptr @Integer__MUL_otheri32, ptr @Integer__DIV_otheri32, ptr @Integer_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_] }
@Animal_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Animal]
@Animal_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@Animal = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 1075018126824711487, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Animal_hashtbl, ptr @Animal_offset_tbl, ptr @_data_size_Animal, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Animal_field_age, ptr @Animal_field_hp, ptr @Animal_field_skill, ptr @Animal_B_init_agei32_hpf64_skilli32, ptr @Animal_B_say_age_, ptr @Animal_B_say_skill_, ptr @Animal_B_say_messagei32, ptr @Animal_B_do_nothing_, ptr @Animal_init_agei32_hpf64_skilli32, ptr @Animal_say_age_, ptr @Animal_say_skill_, ptr @Animal_say_messagei32, ptr @Animal_do_nothing_] }
@Beaver_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Beaver]
@Beaver_offset_tbl = constant [4 x i32] [i32 0, i32 18, i32 10, i32 10]
@Beaver = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -6124772949900838462, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Beaver_hashtbl, ptr @Beaver_offset_tbl, ptr @_data_size_Beaver, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @Beaver_field_color, ptr @Beaver_field_name, ptr @Beaver_B_init_colori32_namef64, ptr @Beaver_B__ADD_xi32, ptr @Beaver_B_say_color_, ptr @Beaver_init_colori32_namef64, ptr @Beaver__ADD_xi32, ptr @Beaver_say_color_] }
@ListNode_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @ListNode]
@ListNode_offset_tbl = constant [4 x i32] [i32 22, i32 10, i32 0, i32 10]
@ListNode = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -1756024950533091476, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ListNode_hashtbl, ptr @ListNode_offset_tbl, ptr @_data_size_ListNode, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ListNode_field_data, ptr @ListNode_field_next, ptr @ListNode_B_init_datai32, ptr @ListNode_B_push_nextListNode, ptr @ListNode_B_next_, ptr @ListNode_B_data_, ptr @ListNode_B_iterator_, ptr @ListNode_init_datai32, ptr @ListNode_push_nextListNode, ptr @ListNode_next_, ptr @ListNode_data_, ptr @ListNode_iterator_] }
@ListIterator_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @ListIterator, ptr null]
@ListIterator_offset_tbl = constant [4 x i32] [i32 15, i32 10, i32 10, i32 0]
@ListIterator = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 -5838699946612561379, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ListIterator_hashtbl, ptr @ListIterator_offset_tbl, ptr @_data_size_ListIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @ListIterator_field_node, ptr @ListIterator_B_init_nodeListNode, ptr @ListIterator_B_next_, ptr @ListIterator_init_nodeListNode, ptr @ListIterator_next_] }
@Bard_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Bard, ptr null]
@Bard_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 10, i32 0]
@Bard = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 -7979915337087193093, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Bard_hashtbl, ptr @Bard_offset_tbl, ptr @_data_size_Bard, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @Bard_B_init_, ptr @Bard_B_take_ai32_bi32_take_ai32_bf64_take_aAnimal_bBeaver_take_af64_bf64, ptr @Bard_init_, ptr @Bard_take_ai32_bi32, ptr @Bard_take_ai32_bf64, ptr @Bard_take_aAnimal_bBeaver, ptr @Bard_take_af64_bf64] }

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #0 {
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Integer(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 4, i64 4 }
}

define { ptr, i160 } @_box_Default(ptr %fat_ptr, ptr %parameterization) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr %parameterization, ptr %destination) {
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

define { i64, i64 } @_size_Default(ptr %parameterization) {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B_init_valuei32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B__ADD_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B__SUB_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B__MUL_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B__DIV_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B_print_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Integer_init_valuei32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %9, i32 %3) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @Integer__ADD_otheri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %6, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %8, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %22) #24
  %31 = add i32 %30, %3
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  %38 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %34, ptr nonnull %38)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %35, i32 %31) #25
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Integer, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Integer)
  %44 = load ptr, ptr %40, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %41, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %42, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %43, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  ret { ptr, ptr, ptr, i32 } %51
}

define { ptr, ptr, ptr, i32 } @Integer__SUB_otheri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %6, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %8, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %22) #24
  %31 = sub i32 %30, %3
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  %38 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %34, ptr nonnull %38)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %35, i32 %31) #25
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Integer, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Integer)
  %44 = load ptr, ptr %40, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %41, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %42, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %43, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  ret { ptr, ptr, ptr, i32 } %51
}

define { ptr, ptr, ptr, i32 } @Integer__MUL_otheri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %6, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %8, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %22) #24
  %31 = mul i32 %30, %3
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  %38 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %34, ptr nonnull %38)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %35, i32 %31) #25
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Integer, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Integer)
  %44 = load ptr, ptr %40, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %41, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %42, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %43, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  ret { ptr, ptr, ptr, i32 } %51
}

define { ptr, ptr, ptr, i32 } @Integer__DIV_otheri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %6, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %8, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %22) #24
  %31 = sdiv i32 %30, %3
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  %38 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %34, ptr nonnull %38)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %35, i32 %31) #25
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Integer, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Integer)
  %44 = load ptr, ptr %40, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %41, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %42, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %43, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  ret { ptr, ptr, ptr, i32 } %51
}

define void @Integer_print_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Integer)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 104, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %.sroa.0.0.insert.ext = zext i32 %16 to i160
  %17 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %18 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %21 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %22 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %22, align 8
  %23 = call ptr @class_behavior_wrapper(ptr %21, ptr nonnull %22)
  call void %23(ptr nonnull %18, { ptr, i160 } %17) #25
  ret void
}

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @class_behavior_wrapper(ptr %f, ptr nocapture nofree noundef nonnull %0) #4 {
  %result = call ptr %f(ptr nocapture nofree noundef nonnull %0) #26
  ret ptr %result
}

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { i64, i64 } @size_wrapper(ptr %f, ptr nocapture nofree readonly %0) #0 {
  %result = call { i64, i64 } %f(ptr nocapture nofree readonly %0) #7
  ret { i64, i64 } %result
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #5 {
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #5
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @behavior_wrapper(ptr %f, { ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #4 {
  %result = call ptr %f({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #26
  ret ptr %result
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #6 {
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Integer_getter_value(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Integer_setter_value(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_BigBoy(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @BigBoy_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @BigBoy_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @BigBoy_introduce_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @BigBoy)
  %8 = call ptr @bump_malloc(i64 11)
  store <10 x i8> <i8 72, i8 101, i8 114, i8 101, i8 32, i8 73, i8 32, i8 97, i8 109, i8 33>, ptr %8, align 16
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %11 = call { i64, i64 } @size_wrapper(ptr %10, ptr nonnull %9)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr } undef, ptr %8, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %18)
  %22 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %23 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %24 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr @i32_typ, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr @i32_typ, ptr %26, align 8
  %27 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %24)
  call void %27({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %18, { ptr } %14, i32 10, i32 11) #25
  %28 = ptrtoint ptr %13 to i64
  %.sroa.3.8.insert.ext = zext i64 %28 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %29 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %30 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %30)
  %32 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %33 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %34 = alloca { ptr }, align 8
  store ptr @String, ptr %34, align 8
  %35 = call ptr @class_behavior_wrapper(ptr %33, ptr nonnull %34)
  call void %35(ptr nonnull %30, { ptr, i160 } %29) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Integer2(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 4, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_init_valuei32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B__ADD_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B__SUB_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B__MUL_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B__DIV_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_print_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define i32 @Integer2_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Integer2)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 320, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  ret i32 %16
}

define { ptr, ptr, ptr, i32 } @Integer2_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Integer2)
  %8 = call ptr @bump_malloc(i64 9)
  store <8 x i8> <i8 73, i8 110, i8 116, i8 101, i8 103, i8 101, i8 114, i8 50>, ptr %8, align 8
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %11 = call { i64, i64 } @size_wrapper(ptr %10, ptr nonnull %9)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr } undef, ptr %8, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %18)
  %22 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %23 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %24 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr @i32_typ, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr @i32_typ, ptr %26, align 8
  %27 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %24)
  call void %27({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %18, { ptr } %14, i32 8, i32 9) #25
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %13, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 16
  %31 = getelementptr inbounds i8, ptr %28, i64 24
  store i32 10, ptr %31, align 8
  call void @set_offset(ptr nonnull %28, ptr nonnull @String)
  %32 = load ptr, ptr %28, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %29, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %30, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %31, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  ret { ptr, ptr, ptr, i32 } %39
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Integer2_getter_value(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Integer2_setter_value(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Animal(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_init_agei32_hpf64_skilli32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_say_age_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_say_skill_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_say_messagei32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_do_nothing_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Animal_init_agei32_hpf64_skilli32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, double %4, i32 %5) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Animal)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 104, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %11, i32 %3) #23
  %20 = load ptr, ptr %8, align 8
  %21 = load ptr, ptr %7, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %10, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, double %4) #23
  %30 = load ptr, ptr %8, align 8
  %31 = load ptr, ptr %7, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 104, ptr %31)
  %33 = load i32, ptr %10, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 16
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %30, i32 %5) #23
  ret void
}

define void @Animal_say_age_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Animal)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 104, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %8, 1
  %19 = load ptr, ptr %6, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %19, 2
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 %11, 3
  %22 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %22)
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %9)
  %25 = getelementptr i8, ptr %13, i64 48
  %26 = load ptr, ptr %25, align 8
  %27 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %27, align 8
  %28 = call ptr @behavior_wrapper(ptr %26, { ptr, ptr, ptr, i32 } %21, ptr nonnull %27)
  call void %28({ ptr, ptr, ptr, i32 } %21, { ptr, ptr, ptr, i32 } %21, ptr nonnull %22, i32 %16) #25
  %29 = load ptr, ptr %5, align 8
  %30 = load ptr, ptr %4, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 104, ptr %30)
  %32 = load i32, ptr %7, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr ptr, ptr %30, i64 %33
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %29) #24
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %29, 1
  %40 = load ptr, ptr %6, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %32, 3
  %43 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %30)
  %46 = getelementptr i8, ptr %34, i64 48
  %47 = load ptr, ptr %46, align 8
  %48 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %42, ptr nonnull %48)
  call void %49({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr nonnull %43, i32 %37) #25
  ret void
}

define void @Animal_say_skill_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
._crit_edge:
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Animal)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #24
  %.sroa.03.0.insert.ext = zext i32 %18 to i160
  %19 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.03.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %3, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %21 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %22 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @i32_typ, ptr %4, align 8
  %23 = call ptr @class_behavior_wrapper(ptr %22, ptr nonnull %4)
  call void %23(ptr nonnull %3, { ptr, i160 } %19) #25
  ret void
}

define void @Animal_say_messagei32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Animal)
  %.sroa.0.0.insert.ext = zext i32 %3 to i160
  %9 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %10 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %13 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %14 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %14, align 8
  %15 = call ptr @class_behavior_wrapper(ptr %13, ptr nonnull %14)
  call void %15(ptr nonnull %10, { ptr, i160 } %9) #25
  ret void
}

define { ptr, i160 } @Animal_do_nothing_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Animal)
  %8 = alloca [1 x ptr], align 8
  store ptr @Animal, ptr %8, align 8
  %9 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Animal, ptr nonnull %8)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = call ptr @bump_malloc(i64 %10)
  %12 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Animal, ptr undef, ptr undef, i32 undef }, ptr %11, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr undef, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 10, 3
  %15 = alloca [3 x ptr], align 8
  store ptr @_parameterization_i32, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @_parameterization_f64, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr @_parameterization_i32, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %15)
  %19 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Animal)
  %20 = alloca { ptr, ptr, ptr }, align 8
  store ptr @i32_typ, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr @f64_typ, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr @i32_typ, ptr %22, align 8
  %23 = call ptr @behavior_wrapper(ptr nonnull @Animal_B_init_agei32_hpf64_skilli32, { ptr, ptr, ptr, i32 } %14, ptr nonnull %20)
  call void %23({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %15, i32 5, double 5.000000e+00, i32 5) #25
  %24 = ptrtoint ptr %11 to i64
  %.sroa.3.8.insert.ext = zext i64 %24 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %25 = insertvalue { ptr, i160 } { ptr @Animal, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  ret { ptr, i160 } %25
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Animal_getter_skill(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Animal_setter_skill(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define double @Animal_getter_hp(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load double, ptr %2, align 8
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Animal_setter_hp(ptr nocapture writeonly %0, double %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  store double %1, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Animal_getter_age(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Animal_setter_age(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Beaver(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 16, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Beaver_B_init_colori32_namef64({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Beaver_B__ADD_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Beaver_B_say_color_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Beaver_init_colori32_namef64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, double %4) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Beaver)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 64, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %10, i32 %3) #23
  %19 = load ptr, ptr %7, align 8
  %20 = load ptr, ptr %6, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 64, ptr %20)
  %22 = load i32, ptr %9, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %19, double %4) #23
  ret void
}

define void @Beaver__ADD_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Beaver)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 64, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = add i32 %17, %3
  %19 = call ptr @llvm.invariant.start.p0(i64 64, ptr %10)
  %20 = getelementptr i8, ptr %15, i64 8
  %21 = load ptr, ptr %20, align 8
  call void %21(ptr %9, i32 %18) #23
  ret void
}

define void @Beaver_say_color_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Beaver)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 64, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %.sroa.0.0.insert.ext = zext i32 %16 to i160
  %17 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %18 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %21 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %22 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %22, align 8
  %23 = call ptr @class_behavior_wrapper(ptr %21, ptr nonnull %22)
  call void %23(ptr nonnull %18, { ptr, i160 } %17) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define double @Beaver_getter_name(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load double, ptr %2, align 8
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Beaver_setter_name(ptr nocapture writeonly %0, double %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  store double %1, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Beaver_getter_color(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Beaver_setter_color(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ListNode(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 40, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListNode_B_init_datai32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ListNode_B_push_nextListNode({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 144
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListNode_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListNode_B_data_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListNode_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ListNode_init_datai32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ListNode)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 96, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %9, i32 %3) #23
  %18 = load ptr, ptr %6, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 96, ptr %19)
  %21 = load i32, ptr %8, align 8
  %22 = sext i32 %21 to i64
  %23 = getelementptr ptr, ptr %19, i64 %22
  %24 = getelementptr i8, ptr %23, i64 8
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  call void %27(ptr %18, { ptr, i160 } { ptr @nil_typ, i160 undef }) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @ListNode_push_nextListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ListNode)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @ListNode)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 96, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %9, align 8
  %24 = insertvalue { ptr, i160 } undef, ptr %23, 0
  %25 = load i160, ptr %10, align 8
  %26 = insertvalue { ptr, i160 } %24, i160 %25, 1
  call void %22(ptr %13, { ptr, i160 } %26) #23
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = load ptr, ptr %9, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 8
  %30 = load ptr, ptr %10, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds i8, ptr %27, i64 16
  %32 = load ptr, ptr %11, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %27, i64 24
  %34 = load i32, ptr %12, align 8
  store i32 %34, ptr %33, align 8
  call void @set_offset(ptr nonnull %27, ptr nonnull @ListNode)
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  ret { ptr, ptr, ptr, i32 } %42
}

define { ptr, i160 } @ListNode_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract2, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @ListNode)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 96, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #24
  ret { ptr, i160 } %17
}

define i32 @ListNode_data_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @ListNode)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 96, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  ret i32 %16
}

define { ptr, ptr, ptr, i32 } @ListNode_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract24, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract25, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract26, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract27, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @ListNode)
  %8 = alloca [1 x ptr], align 8
  store ptr @ListNode, ptr %8, align 8
  %9 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ListNode, ptr nonnull %8)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = call ptr @bump_malloc(i64 %10)
  %12 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ListNode, ptr undef, ptr undef, i32 undef }, ptr %11, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr undef, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 10, 3
  %15 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %17 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ListNode)
  %18 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %18, align 8
  %19 = call ptr @behavior_wrapper(ptr nonnull @ListNode_B_init_datai32, { ptr, ptr, ptr, i32 } %14, ptr nonnull %18)
  call void %19({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %15, i32 0) #25
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ListNode, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %11, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  %23 = getelementptr inbounds i8, ptr %20, i64 24
  store i32 10, ptr %23, align 8
  call void @set_offset(ptr nonnull %20, ptr nonnull @ListNode)
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = load i32, ptr %23, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = load ptr, ptr %4, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 8
  %31 = load ptr, ptr %5, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %28, i64 16
  %33 = load ptr, ptr %6, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %28, i64 24
  %35 = load i32, ptr %7, align 8
  store i32 %35, ptr %34, align 8
  call void @set_offset(ptr nonnull %28, ptr nonnull @ListNode)
  %36 = load ptr, ptr %28, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = load i32, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %42, 3
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %24, 0
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %25, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %26, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %27, 3
  %48 = alloca [1 x ptr], align 8
  store ptr @_parameterization_ListNode, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %48)
  %50 = call ptr @llvm.invariant.start.p0(i64 96, ptr %24)
  %51 = sext i32 %27 to i64
  %52 = getelementptr ptr, ptr %24, i64 %51
  %53 = getelementptr i8, ptr %52, i64 24
  %54 = load ptr, ptr %53, align 8
  %55 = alloca { ptr }, align 8
  store ptr %36, ptr %55, align 8
  %56 = call ptr @behavior_wrapper(ptr %54, { ptr, ptr, ptr, i32 } %47, ptr nonnull %55)
  %57 = call { ptr, ptr, ptr, i32 } %56({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %48, { ptr, ptr, ptr, i32 } %43) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %57, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %57, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %57, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %57, 3
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr %.fca.1.extract, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %58, i64 16
  store ptr %.fca.2.extract, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %58, i64 24
  store i32 %.fca.3.extract, ptr %61, align 8
  call void @set_offset(ptr nonnull %58, ptr nonnull @ListNode)
  %62 = alloca [1 x ptr], align 8
  store ptr @ListIterator, ptr %62, align 8
  %63 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ListIterator, ptr nonnull %62)
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = call ptr @bump_malloc(i64 %64)
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %24, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr %25, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr %26, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %66, i64 24
  store i32 %27, ptr %69, align 8
  call void @set_offset(ptr nonnull %66, ptr nonnull @ListNode)
  %70 = load ptr, ptr %66, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %67, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %68, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %69, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ListIterator, ptr undef, ptr undef, i32 undef }, ptr %65, 1
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr undef, 2
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 10, 3
  %81 = alloca [1 x ptr], align 8
  store ptr @_parameterization_ListNode, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %81)
  %83 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @ListIterator)
  %84 = alloca { ptr }, align 8
  store ptr %70, ptr %84, align 8
  %85 = call ptr @behavior_wrapper(ptr nonnull @ListIterator_B_init_nodeListNode, { ptr, ptr, ptr, i32 } %80, ptr nonnull %84)
  call void %85({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr nonnull %81, { ptr, ptr, ptr, i32 } %77) #25
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ListIterator, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %65, ptr %87, align 8
  %88 = getelementptr inbounds i8, ptr %86, i64 16
  %89 = getelementptr inbounds i8, ptr %86, i64 24
  store i32 10, ptr %89, align 8
  call void @set_offset(ptr nonnull %86, ptr nonnull @ListIterator)
  %90 = load ptr, ptr %86, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = load ptr, ptr %87, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 1
  %94 = load ptr, ptr %88, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 2
  %96 = load i32, ptr %89, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  ret { ptr, ptr, ptr, i32 } %97
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ListIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 32, i64 8 }
}

define ptr @ListIterator_B_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 104
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #0 {
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #7
  ret i1 %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ListIterator_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ListIterator)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @ListNode)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @ListNode)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %13, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  call void %29(ptr %21, { ptr, ptr, ptr, i32 } %37) #23
  ret void
}

define { ptr, i160 } @ListIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract14, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract16, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract18, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @ListIterator)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 40, ptr %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call { ptr, ptr, ptr, i32 } %19(ptr %12) #24
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  store ptr %.fca.0.extract2, ptr %21, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %21, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %21, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %21, ptr nonnull @ListNode)
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = load ptr, ptr %.fca.1.gep, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 1
  %26 = load ptr, ptr %.fca.2.gep, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %26, 2
  %28 = load i32, ptr %.fca.3.gep, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 %28, 3
  %30 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 96, ptr %22)
  %32 = sext i32 %28 to i64
  %33 = getelementptr ptr, ptr %22, i64 %32
  %34 = getelementptr i8, ptr %33, i64 32
  %35 = load ptr, ptr %34, align 8
  %36 = call ptr @behavior_wrapper(ptr %35, { ptr, ptr, ptr, i32 } %29, ptr nonnull %4)
  %37 = call { ptr, i160 } %36({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %37, 0
  %38 = icmp ne ptr %.fca.0.extract, @nil_typ
  %39 = icmp ne ptr %.fca.0.extract, null
  %.not31 = and i1 %38, %39
  br i1 %.not31, label %40, label %79

40:                                               ; preds = %3
  %.fca.1.extract = extractvalue { ptr, i160 } %37, 1
  store ptr %.fca.0.extract, ptr %5, align 8
  %41 = getelementptr inbounds i8, ptr %5, i64 8
  store i160 %.fca.1.extract, ptr %41, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ListNode)
  %42 = load ptr, ptr %5, align 8
  store ptr %42, ptr %6, align 8
  %43 = getelementptr inbounds i8, ptr %6, i64 8
  %44 = load ptr, ptr %41, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr inbounds i8, ptr %5, i64 16
  %46 = getelementptr inbounds i8, ptr %6, i64 16
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %5, i64 24
  %49 = getelementptr inbounds i8, ptr %6, i64 24
  %50 = load i32, ptr %48, align 8
  store i32 %50, ptr %49, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ListNode)
  %51 = load ptr, ptr %9, align 8
  %52 = load ptr, ptr %8, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 40, ptr %52)
  %54 = load i32, ptr %11, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %6, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %49, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  call void %59(ptr %51, { ptr, ptr, ptr, i32 } %67) #23
  %68 = load ptr, ptr %9, align 8
  %69 = load ptr, ptr %8, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 40, ptr %69)
  %71 = load i32, ptr %11, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr ptr, ptr %69, i64 %72
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = call { ptr, ptr, ptr, i32 } %75(ptr %68) #24
  %.fca.0.extract22 = extractvalue { ptr, ptr, ptr, i32 } %76, 0
  store ptr %.fca.0.extract22, ptr %7, align 8
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %76, 1
  %.fca.1.gep25 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract24, ptr %.fca.1.gep25, align 8
  %.fca.2.extract26 = extractvalue { ptr, ptr, ptr, i32 } %76, 2
  %.fca.2.gep27 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract26, ptr %.fca.2.gep27, align 8
  %.fca.3.extract28 = extractvalue { ptr, ptr, ptr, i32 } %76, 3
  %.fca.3.gep29 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract28, ptr %.fca.3.gep29, align 8
  call void @assume_offset(ptr nonnull %7, ptr nonnull @ListNode)
  %77 = load ptr, ptr %7, align 8
  %78 = load i160, ptr %.fca.1.gep25, align 8
  br label %79

79:                                               ; preds = %40, %3
  %.reg2mem15.sroa.0.0 = phi ptr [ %77, %40 ], [ @nil_typ, %3 ]
  %.reg2mem15.sroa.3.0 = phi i160 [ %78, %40 ], [ undef, %3 ]
  %.reload16.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem15.sroa.0.0, 0
  %.reload16.fca.1.insert = insertvalue { ptr, i160 } %.reload16.fca.0.insert, i160 %.reg2mem15.sroa.3.0, 1
  ret { ptr, i160 } %.reload16.fca.1.insert
}

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #27
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ListIterator_getter_node(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ListIterator_setter_node(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @ListNode_getter_next(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load i160, ptr %5, align 4
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ListNode_setter_next(ptr nocapture writeonly %0, { ptr, i160 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store i160 %.fca.1.extract, ptr %4, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @ListNode_getter_data(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ListNode_setter_data(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Bard(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Bard_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Bard_B_take_ai32_bi32_take_ai32_bf64_take_aAnimal_bBeaver_take_af64_bf64({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 1075018126824711487, i64 ptrtoint (ptr @Animal to i64), ptr %12)
  br i1 %13, label %14, label %26

14:                                               ; preds = %2
  %15 = getelementptr i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = tail call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 -6124772949900838462, i64 ptrtoint (ptr @Beaver to i64), ptr %24)
  br label %.cont

26:                                               ; preds = %2
  %27 = load ptr, ptr %1, align 8
  %28 = icmp eq ptr %27, @f64_typ
  br i1 %28, label %.cont, label %29

29:                                               ; preds = %26
  %30 = getelementptr i8, ptr %1, i64 8
  %31 = load ptr, ptr %30, align 8
  %.not = icmp eq ptr %31, @i32_typ
  %spec.select = select i1 %.not, i32 3, i32 4
  br label %.cont

.cont:                                            ; preds = %29, %26, %14
  %.reg2mem13.0 = phi i32 [ 5, %14 ], [ 6, %26 ], [ %spec.select, %29 ]
  %32 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %33 = zext nneg i32 %.reg2mem13.0 to i64
  %34 = getelementptr [7 x ptr], ptr %32, i64 0, i64 %33
  %35 = getelementptr i8, ptr %34, i64 80
  %36 = load ptr, ptr %35, align 8
  ret ptr %36
}

define void @Bard_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Bard)
  ret void
}

define void @Bard_take_ai32_bi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract17, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract18, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Bard)
  %.fca.1.extract11 = extractvalue { ptr, i160 } %3, 1
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %.sroa.02.0.insert.ext = and i160 %.fca.1.extract11, 4294967295
  %10 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.02.0.insert.ext, 1
  %11 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %13 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %14 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %15 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %15, align 8
  %16 = call ptr @class_behavior_wrapper(ptr %14, ptr nonnull %15)
  call void %16(ptr nonnull %11, { ptr, i160 } %10) #25
  %.sroa.0.0.insert.ext = and i160 %.fca.1.extract, 4294967295
  %17 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %18 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %21 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %21, align 8
  %22 = call ptr @class_behavior_wrapper(ptr %14, ptr nonnull %21)
  call void %22(ptr nonnull %18, { ptr, i160 } %17) #25
  ret void
}

define void @Bard_take_ai32_bf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract17, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract18, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Bard)
  %.fca.1.extract11 = extractvalue { ptr, i160 } %3, 1
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %.sroa.02.0.insert.ext = and i160 %.fca.1.extract11, 4294967295
  %10 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.02.0.insert.ext, 1
  %11 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %13 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %14 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %15 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %15, align 8
  %16 = call ptr @class_behavior_wrapper(ptr %14, ptr nonnull %15)
  call void %16(ptr nonnull %11, { ptr, i160 } %10) #25
  %.sroa.0.0.insert.ext = and i160 %.fca.1.extract, 18446744073709551615
  %17 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %18 = alloca [1 x ptr], align 8
  store ptr @_parameterization_f64, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %21 = alloca { ptr }, align 8
  store ptr @f64_typ, ptr %21, align 8
  %22 = call ptr @class_behavior_wrapper(ptr %14, ptr nonnull %21)
  call void %22(ptr nonnull %18, { ptr, i160 } %17) #25
  ret void
}

define void @Bard_take_aAnimal_bBeaver({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract27 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract26, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract27, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Bard)
  %.fca.0.extract22 = extractvalue { ptr, i160 } %3, 0
  %.fca.1.extract23 = extractvalue { ptr, i160 } %3, 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract22, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store i160 %.fca.1.extract23, ptr %11, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Animal)
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store i160 %.fca.1.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @Beaver)
  %14 = call ptr @bump_malloc(i64 8)
  store <7 x i8> <i8 97, i8 110, i8 105, i8 109, i8 97, i8 108, i8 33>, ptr %14, align 8
  %15 = alloca [1 x ptr], align 8
  store ptr @String, ptr %15, align 8
  %16 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr nonnull %15)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = call ptr @bump_malloc(i64 %18)
  %20 = insertvalue { ptr } undef, ptr %14, 0
  %21 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %19, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr undef, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 10, 3
  %24 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr @_parameterization_i32, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr @_parameterization_i32, ptr %26, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %24)
  %28 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %29 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %30 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %30, i64 8
  store ptr @i32_typ, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 16
  store ptr @i32_typ, ptr %32, align 8
  %33 = call ptr @behavior_wrapper(ptr %29, { ptr, ptr, ptr, i32 } %23, ptr nonnull %30)
  call void %33({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %24, { ptr } %20, i32 7, i32 8) #25
  %34 = ptrtoint ptr %19 to i64
  %.sroa.312.8.insert.ext = zext i64 %34 to i160
  %.sroa.312.8.insert.insert = or disjoint i160 %.sroa.312.8.insert.ext, 3402823669209384634633746074317682114560
  %35 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.312.8.insert.insert, 1
  %36 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %36, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %36)
  %38 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %39 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %40 = alloca { ptr }, align 8
  store ptr @String, ptr %40, align 8
  %41 = call ptr @class_behavior_wrapper(ptr %39, ptr nonnull %40)
  call void %41(ptr nonnull %36, { ptr, i160 } %35) #25
  %42 = call ptr @bump_malloc(i64 8)
  store <7 x i8> <i8 98, i8 101, i8 97, i8 118, i8 101, i8 114, i8 33>, ptr %42, align 8
  %43 = alloca [1 x ptr], align 8
  store ptr @String, ptr %43, align 8
  %44 = call { i64, i64 } @size_wrapper(ptr %16, ptr nonnull %43)
  %45 = extractvalue { i64, i64 } %44, 0
  %46 = call ptr @bump_malloc(i64 %45)
  %47 = insertvalue { ptr } undef, ptr %42, 0
  %48 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %46, 1
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr undef, 2
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 10, 3
  %51 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %51, align 8
  %52 = getelementptr inbounds i8, ptr %51, i64 8
  store ptr @_parameterization_i32, ptr %52, align 8
  %53 = getelementptr inbounds i8, ptr %51, i64 16
  store ptr @_parameterization_i32, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %51)
  %55 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %56 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %56, align 8
  %57 = getelementptr inbounds i8, ptr %56, i64 8
  store ptr @i32_typ, ptr %57, align 8
  %58 = getelementptr inbounds i8, ptr %56, i64 16
  store ptr @i32_typ, ptr %58, align 8
  %59 = call ptr @behavior_wrapper(ptr %29, { ptr, ptr, ptr, i32 } %50, ptr nonnull %56)
  call void %59({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %51, { ptr } %47, i32 7, i32 8) #25
  %60 = ptrtoint ptr %46 to i64
  %.sroa.3.8.insert.ext = zext i64 %60 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %61 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %62 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %62)
  %64 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %65 = alloca { ptr }, align 8
  store ptr @String, ptr %65, align 8
  %66 = call ptr @class_behavior_wrapper(ptr %39, ptr nonnull %65)
  call void %66(ptr nonnull %62, { ptr, i160 } %61) #25
  ret void
}

define void @Bard_take_af64_bf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract18, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract19, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Bard)
  %.fca.1.extract12 = extractvalue { ptr, i160 } %3, 1
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %.sroa.02.0.insert.ext = and i160 %.fca.1.extract12, 18446744073709551615
  %10 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.02.0.insert.ext, 1
  %11 = alloca [1 x ptr], align 8
  store ptr @_parameterization_f64, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %13 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %14 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %15 = alloca { ptr }, align 8
  store ptr @f64_typ, ptr %15, align 8
  %16 = call ptr @class_behavior_wrapper(ptr %14, ptr nonnull %15)
  call void %16(ptr nonnull %11, { ptr, i160 } %10) #25
  %.sroa.0.0.insert.ext = and i160 %.fca.1.extract, 18446744073709551615
  %17 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %18 = alloca [1 x ptr], align 8
  store ptr @_parameterization_f64, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %21 = alloca { ptr }, align 8
  store ptr @f64_typ, ptr %21, align 8
  %22 = call ptr @class_behavior_wrapper(ptr %14, ptr nonnull %21)
  call void %22(ptr nonnull %18, { ptr, i160 } %17) #25
  ret void
}

define { ptr, i160 } @vujwrmkfxj(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  %.sroa.0.0.insert.ext = zext i32 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define i1 @jvdafelqjx(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i1 %0(i32 %.sroa.1.8.extract.trunc)
  ret i1 %3
}

define { ptr, i160 } @wbgidtiblc(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract5 = extractvalue { ptr, i160 } %1, 1
  %.sroa.17.8.extract.trunc = trunc i160 %.fca.1.extract5 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i32 %0(i32 %.sroa.17.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  %.sroa.0.0.insert.ext = zext i32 %4 to i160
  %5 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %5
}

define void @xybertmcng(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  tail call void %0(i32 %.sroa.1.8.extract.trunc)
  ret void
}

define void @idcfcsmhot(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  tail call void %0(i32 %.sroa.1.8.extract.trunc)
  ret void
}

define { ptr, i160 } @zsgjksqlit(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  %.sroa.0.0.insert.ext = zext i32 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define { ptr, i160 } @dfjfvmeopd(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract5 = extractvalue { ptr, i160 } %1, 1
  %.sroa.17.8.extract.trunc = trunc i160 %.fca.1.extract5 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i32 %0(i32 %.sroa.17.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  %.sroa.0.0.insert.ext = zext i32 %4 to i160
  %5 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %5
}

define void @number_taker({ ptr, i64 } %0) local_unnamed_addr {
  %2 = tail call ptr @bump_malloc(i64 7)
  store <6 x i8> <i8 110, i8 117, i8 109, i8 98, i8 101, i8 114>, ptr %2, align 8
  %3 = alloca [1 x ptr], align 8
  store ptr @String, ptr %3, align 8
  %4 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %5 = call { i64, i64 } @size_wrapper(ptr %4, ptr nonnull %3)
  %6 = extractvalue { i64, i64 } %5, 0
  %7 = call ptr @bump_malloc(i64 %6)
  %8 = insertvalue { ptr } undef, ptr %2, 0
  %9 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %7, 1
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr undef, 2
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 10, 3
  %12 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr @_parameterization_i32, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr @_parameterization_i32, ptr %14, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %12)
  %16 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %17 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %18 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @i32_typ, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @i32_typ, ptr %20, align 8
  %21 = call ptr @behavior_wrapper(ptr %17, { ptr, ptr, ptr, i32 } %11, ptr nonnull %18)
  call void %21({ ptr, ptr, ptr, i32 } %11, { ptr, ptr, ptr, i32 } %11, ptr nonnull %12, { ptr } %8, i32 6, i32 7) #25
  %.fca.1.insert = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr poison, ptr poison, i32 poison }, ptr %7, 1
  %.fca.2.insert = insertvalue { ptr, ptr, ptr, i32 } %.fca.1.insert, ptr undef, 2
  %.fca.3.insert = insertvalue { ptr, ptr, ptr, i32 } %.fca.2.insert, i32 10, 3
  %22 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, { ptr, ptr, ptr, i32 } %.fca.3.insert)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) #10

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef i32 @early_return_in_else() local_unnamed_addr #1 {
.then:
  ret i32 1
}

define void @make_em_speak({ ptr, ptr, ptr, i32 } %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %3, i64 16
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %3, i64 24
  store i32 %.fca.3.extract, ptr %6, align 8
  call void @set_offset(ptr nonnull %3, ptr nonnull @Animal)
  %7 = load ptr, ptr %3, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %9 = load ptr, ptr %4, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %9, 1
  %11 = load ptr, ptr %5, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %11, 2
  %13 = load i32, ptr %6, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %13, 3
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %16 = call ptr @llvm.invariant.start.p0(i64 104, ptr %7)
  %17 = sext i32 %13 to i64
  %18 = getelementptr ptr, ptr %7, i64 %17
  %19 = getelementptr i8, ptr %18, i64 32
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr @behavior_wrapper(ptr %20, { ptr, ptr, ptr, i32 } %14, ptr nonnull %2)
  call void %21({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %2) #25
  ret void
}

; Function Attrs: nofree nosync nounwind memory(none)
define i32 @fibonacci(i32 %0) local_unnamed_addr #11 {
  br label %tailrecurse

tailrecurse:                                      ; preds = %3, %1
  %accumulator.tr = phi i32 [ 0, %1 ], [ %7, %3 ]
  %.tr = phi i32 [ %0, %1 ], [ %6, %3 ]
  %2 = icmp slt i32 %.tr, 2
  br i1 %2, label %8, label %3

3:                                                ; preds = %tailrecurse
  %4 = add nsw i32 %.tr, -2
  %5 = tail call i32 @fibonacci(i32 %4)
  %6 = add nsw i32 %.tr, -1
  %7 = add i32 %accumulator.tr, %5
  br label %tailrecurse

8:                                                ; preds = %tailrecurse
  %accumulator.ret.tr = add i32 %accumulator.tr, %.tr
  ret i32 %accumulator.ret.tr
}

; Function Attrs: nofree nosync nounwind memory(none)
define i32 @factorial(i32 %0) local_unnamed_addr #11 {
  br label %tailrecurse

tailrecurse:                                      ; preds = %3, %1
  %accumulator.tr = phi i32 [ 1, %1 ], [ %5, %3 ]
  %.tr = phi i32 [ %0, %1 ], [ %4, %3 ]
  %2 = icmp slt i32 %.tr, 2
  br i1 %2, label %6, label %3

3:                                                ; preds = %tailrecurse
  %4 = add nsw i32 %.tr, -1
  %5 = mul i32 %accumulator.tr, %.tr
  br label %tailrecurse

6:                                                ; preds = %tailrecurse
  %accumulator.ret.tr = mul i32 %accumulator.tr, 1
  ret i32 %accumulator.ret.tr
}

define void @throw() local_unnamed_addr {
  %1 = alloca [0 x ptr], align 8
  %2 = alloca [1 x ptr], align 8
  store ptr @Exception, ptr %2, align 8
  %3 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 48), align 8
  %4 = call { i64, i64 } @size_wrapper(ptr %3, ptr nonnull %2)
  %5 = extractvalue { i64, i64 } %4, 0
  %6 = call ptr @bump_malloc(i64 %5)
  %7 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Exception, ptr undef, ptr undef, i32 undef }, ptr %6, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr undef, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 10, 3
  %10 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %12 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 112), align 8
  %13 = call ptr @behavior_wrapper(ptr %12, { ptr, ptr, ptr, i32 } %9, ptr nonnull %1)
  call void %13({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %1) #25
  %14 = call ptr @bump_malloc(i64 16)
  store <15 x i8> <i8 108, i8 105, i8 98, i8 92, i8 115, i8 111, i8 117, i8 114, i8 99, i8 101, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %14, align 16
  %15 = alloca [1 x ptr], align 8
  store ptr @String, ptr %15, align 8
  %16 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %17 = call { i64, i64 } @size_wrapper(ptr %16, ptr nonnull %15)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = call ptr @bump_malloc(i64 %18)
  %20 = insertvalue { ptr } undef, ptr %14, 0
  %21 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %19, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr undef, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 10, 3
  %24 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr @_parameterization_i32, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr @_parameterization_i32, ptr %26, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %24)
  %28 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %29 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %30 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %30, i64 8
  store ptr @i32_typ, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 16
  store ptr @i32_typ, ptr %32, align 8
  %33 = call ptr @behavior_wrapper(ptr %29, { ptr, ptr, ptr, i32 } %23, ptr nonnull %30)
  call void %33({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull %24, { ptr } %20, i32 15, i32 16) #25
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %34, align 8
  %35 = getelementptr inbounds i8, ptr %34, i64 8
  store ptr %19, ptr %35, align 8
  %36 = getelementptr inbounds i8, ptr %34, i64 16
  %37 = getelementptr inbounds i8, ptr %34, i64 24
  store i32 10, ptr %37, align 8
  call void @set_offset(ptr nonnull %34, ptr nonnull @String)
  %38 = load ptr, ptr %34, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %40 = load ptr, ptr %35, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 1
  %42 = load ptr, ptr %36, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 2
  %44 = load i32, ptr %37, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %44, 3
  %46 = alloca [2 x ptr], align 8
  store ptr @_parameterization_i32, ptr %46, align 8
  %47 = getelementptr inbounds i8, ptr %46, i64 8
  store ptr @_parameterization_String, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %46)
  %49 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %50 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 120), align 8
  %51 = alloca { ptr, ptr }, align 8
  store ptr @i32_typ, ptr %51, align 8
  %52 = getelementptr inbounds i8, ptr %51, i64 8
  store ptr %38, ptr %52, align 8
  %53 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %9, ptr nonnull %51)
  call void %53({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %46, i32 197, { ptr, ptr, ptr, i32 } %45) #25
  %54 = ptrtoint ptr %6 to i64
  %.sroa.4.8.insert.ext = zext i64 %54 to i160
  %.sroa.4.8.insert.insert = or disjoint i160 %.sroa.4.8.insert.ext, 3402823669209384634633746074317682114560
  %55 = insertvalue { ptr, i160 } { ptr @Exception, i160 undef }, i160 %.sroa.4.8.insert.insert, 1
  %56 = call ptr @get_current_coroutine()
  %57 = getelementptr i8, ptr %56, i64 48
  store { ptr, i160 } %55, ptr %57, align 8
  call void @coroutine_yield(ptr %56)
  ret void
}

define ptr @get_current_coroutine() {
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

define void @coroutine_yield(ptr %current_coroutine) {
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #28
  ret void
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #12 {
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #29
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #14
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #13

define i1 @returns_one() {
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #14

define void @print88() {
  %1 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %1, align 8
  %2 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %1)
  %3 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %4 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %5 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %5, align 8
  %6 = call ptr @class_behavior_wrapper(ptr %4, ptr nonnull %5)
  call void %6(ptr nonnull %1, { ptr, i160 } { ptr @i32_typ, i160 88 }) #25
  %7 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %7)
  %8 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %8, align 8
  %9 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %11 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %11, align 8
  %12 = call ptr @class_behavior_wrapper(ptr %4, ptr nonnull %11)
  call void %12(ptr nonnull %8, { ptr, i160 } { ptr @i32_typ, i160 90 }) #25
  ret void
}

define void @coroutine_omagvxnzsy_passer(ptr nocapture readonly %0) {
  %2 = load ptr, ptr %0, align 8
  tail call void %2()
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define void @coroutine_omagvxnzsy_buffer_filler(ptr nocapture readnone %0) local_unnamed_addr #1 {
  ret void
}

define void @grabo() local_unnamed_addr {
  %1 = tail call ptr @bump_malloc(i64 4)
  store <3 x i8> <i8 111, i8 110, i8 101>, ptr %1, align 4
  %2 = alloca [1 x ptr], align 8
  store ptr @String, ptr %2, align 8
  %3 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %4 = call { i64, i64 } @size_wrapper(ptr %3, ptr nonnull %2)
  %5 = extractvalue { i64, i64 } %4, 0
  %6 = call ptr @bump_malloc(i64 %5)
  %7 = insertvalue { ptr } undef, ptr %1, 0
  %8 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %6, 1
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr undef, 2
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 10, 3
  %11 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @_parameterization_i32, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr @_parameterization_i32, ptr %13, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %11)
  %15 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %16 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %17 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @i32_typ, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @i32_typ, ptr %19, align 8
  %20 = call ptr @behavior_wrapper(ptr %16, { ptr, ptr, ptr, i32 } %10, ptr nonnull %17)
  call void %20({ ptr, ptr, ptr, i32 } %10, { ptr, ptr, ptr, i32 } %10, ptr nonnull %11, { ptr } %7, i32 3, i32 4) #25
  %21 = ptrtoint ptr %6 to i64
  %.sroa.3.8.insert.ext = zext i64 %21 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %22 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %23 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %23)
  %25 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %26 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %27 = alloca { ptr }, align 8
  store ptr @String, ptr %27, align 8
  %28 = call ptr @class_behavior_wrapper(ptr %26, ptr nonnull %27)
  call void %28(ptr nonnull %23, { ptr, i160 } %22) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @_functionliteral_tcdzabihwa(i32 %0, i32 %1) #1 {
  %3 = add i32 %1, %0
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define range(i32 0, -1) i32 @_functionliteral_toxagbzjuc(i32 %0) #1 {
  %2 = shl i32 %0, 1
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef i32 @_functionliteral_jsrohdipjo() #1 {
  ret i32 5
}

define void @_functionliteral_gkccoddqse(i32 %0) {
  %.sroa.0.0.insert.ext = zext i32 %0 to i160
  %2 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %3 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %6 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %7 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %7, align 8
  %8 = call ptr @class_behavior_wrapper(ptr %6, ptr nonnull %7)
  call void %8(ptr nonnull %3, { ptr, i160 } %2) #25
  ret void
}

define void @_functionliteral_skwwjikhdp(i32 %0) {
  %2 = mul i32 %0, %0
  %.sroa.0.0.insert.ext = zext i32 %2 to i160
  %3 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %4 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %4)
  %6 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %7 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  %8 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %8, align 8
  %9 = call ptr @class_behavior_wrapper(ptr %7, ptr nonnull %8)
  call void %9(ptr nonnull %4, { ptr, i160 } %3) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i8 @i32toi8(i32 %0) local_unnamed_addr #1 {
  %2 = trunc i32 %0 to i8
  ret i8 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @_functionliteral_hcbwamfcxw(i32 %0, i32 %1) local_unnamed_addr #1 {
  %3 = add i32 %1, %0
  ret i32 %3
}

; Function Attrs: noreturn
define void @_functionliteral_mlksevdnbl(i32 %0, i32 %1) #15 {
  %3 = add i32 %1, %0
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %._crit_edge2, %2
  %.0 = phi i32 [ 7, %2 ], [ %.1, %._crit_edge2 ]
  %4 = add i32 %3, %.0
  %5 = insertvalue { ptr, i32 } { ptr @i32_typ, i32 undef }, i32 %4, 1
  %6 = tail call ptr @get_current_coroutine()
  %7 = getelementptr i8, ptr %6, i64 48
  store { ptr, i32 } %5, ptr %7, align 8
  tail call void @coroutine_yield(ptr %6)
  %8 = load { ptr, i32 }, ptr %7, align 8
  %.fca.0.extract = extractvalue { ptr, i32 } %8, 0
  %9 = icmp ne ptr %.fca.0.extract, @nil_typ
  %10 = icmp ne ptr %.fca.0.extract, null
  %.not16 = and i1 %9, %10
  %.fca.1.extract = extractvalue { ptr, i32 } %8, 1
  %11 = select i1 %.not16, i32 %.fca.1.extract, i32 0
  %.1 = add i32 %11, %.0
  br label %._crit_edge2
}

define void @coroutine_aajaezpbeb_passer(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 64
  %3 = getelementptr i8, ptr %0, i64 68
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load ptr, ptr %0, align 8
  tail call void %6(i32 %4, i32 %5)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @coroutine_aajaezpbeb_buffer_filler(ptr nocapture writeonly %0, i32 %1, i32 %2) local_unnamed_addr #8 {
  %4 = getelementptr i8, ptr %0, i64 64
  %5 = getelementptr i8, ptr %0, i64 68
  store i32 %1, ptr %4, align 4
  store i32 %2, ptr %5, align 4
  ret void
}

define void @coroutine_jzdojyfeau_passer(ptr nocapture %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = tail call i32 %2()
  %4 = getelementptr i8, ptr %0, i64 56
  store i32 %3, ptr %4, align 4
  %5 = getelementptr i8, ptr %0, i64 48
  store ptr @i32_typ, ptr %5, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define void @coroutine_jzdojyfeau_buffer_filler(ptr nocapture readnone %0) local_unnamed_addr #1 {
  ret void
}

define void @coroutine_ktcgunrfby_passer(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 80
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  tail call void %4({ ptr, ptr, ptr, i32 } %3)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @coroutine_ktcgunrfby_buffer_filler(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) local_unnamed_addr #8 {
  %3 = getelementptr i8, ptr %0, i64 80
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define void @_functionliteral_ykljlibama({ ptr, ptr, ptr, i32 } %0) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %2 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %3 = insertvalue { ptr, ptr, ptr, i32 } %2, ptr %.fca.1.extract, 1
  %4 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %.fca.2.extract, 2
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, i32 %.fca.3.extract, 3
  %6 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %8 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr %.fca.0.extract)
  %9 = sext i32 %.fca.3.extract to i64
  %10 = getelementptr ptr, ptr %.fca.0.extract, i64 %9
  %11 = getelementptr i8, ptr %10, i64 32
  %12 = load ptr, ptr %11, align 8
  %13 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %13, align 8
  %14 = call ptr @behavior_wrapper(ptr %12, { ptr, ptr, ptr, i32 } %5, ptr nonnull %13)
  call void %14({ ptr, ptr, ptr, i32 } %5, { ptr, ptr, ptr, i32 } %5, ptr nonnull %6, { ptr, i160 } { ptr @i32_typ, i160 88 }) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i1 @_functionliteral_ezxmqtmqzv(i32 %0) #1 {
  %2 = and i32 %0, 1
  %3 = icmp eq i32 %2, 0
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @_functionliteral_bzyzrznjkd(i32 %0) #1 {
  %2 = mul i32 %0, %0
  ret i32 %2
}

define noundef i32 @main() local_unnamed_addr {
  %1 = alloca [0 x ptr], align 8
  %2 = alloca { ptr, ptr, ptr, i32 }, align 8
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %12 = alloca [1 x ptr], align 8
  %13 = alloca [3 x ptr], align 8
  %14 = alloca { ptr, ptr, ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca [3 x ptr], align 8
  %19 = alloca { ptr, ptr, ptr }, align 8
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = alloca [1 x ptr], align 8
  %22 = alloca [3 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr }, align 8
  %24 = alloca [1 x ptr], align 8
  %25 = alloca { ptr }, align 8
  %26 = alloca [1 x ptr], align 8
  %27 = alloca [2 x ptr], align 8
  %28 = alloca { ptr, ptr }, align 8
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  %30 = alloca [2 x ptr], align 8
  %31 = alloca { ptr, ptr }, align 8
  %32 = alloca [2 x ptr], align 8
  %33 = alloca { ptr, ptr }, align 8
  %34 = alloca [1 x ptr], align 8
  %35 = alloca [3 x ptr], align 8
  %36 = alloca { ptr, ptr, ptr }, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca { ptr }, align 8
  %39 = alloca [1 x ptr], align 8
  %40 = alloca { ptr }, align 8
  %41 = alloca [1 x ptr], align 8
  %42 = alloca [1 x ptr], align 8
  %43 = alloca { ptr }, align 8
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = alloca [1 x ptr], align 8
  %46 = alloca { ptr }, align 8
  %47 = alloca { ptr, ptr, ptr, i32 }, align 8
  %48 = alloca [1 x ptr], align 8
  %49 = alloca { ptr }, align 8
  %50 = alloca [1 x ptr], align 8
  %51 = alloca { ptr }, align 8
  %52 = alloca [1 x ptr], align 8
  %53 = alloca { ptr }, align 8
  %54 = alloca [1 x ptr], align 8
  %55 = alloca { ptr }, align 8
  %56 = alloca [1 x ptr], align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca [1 x ptr], align 8
  %59 = alloca [3 x ptr], align 8
  %60 = alloca { ptr, ptr, ptr }, align 8
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  %62 = alloca [1 x ptr], align 8
  %63 = alloca { ptr }, align 8
  %64 = alloca { ptr, ptr, ptr, i32 }, align 8
  %65 = alloca [1 x ptr], align 8
  %66 = alloca [1 x ptr], align 8
  %67 = alloca { ptr }, align 8
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %70 = alloca [1 x ptr], align 8
  %71 = alloca [2 x ptr], align 8
  %72 = alloca { ptr, ptr }, align 8
  %73 = alloca { ptr, ptr, ptr, i32 }, align 8
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  %75 = alloca [1 x ptr], align 8
  %76 = alloca [1 x ptr], align 8
  %77 = alloca { ptr }, align 8
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = alloca [1 x ptr], align 8
  %80 = alloca { ptr }, align 8
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  %83 = alloca [1 x ptr], align 8
  %84 = alloca { ptr }, align 8
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  %87 = alloca { ptr, ptr, ptr, i32 }, align 8
  %88 = alloca [1 x ptr], align 8
  %89 = alloca { ptr }, align 8
  %90 = alloca { ptr, ptr, ptr, i32 }, align 8
  %91 = alloca [1 x ptr], align 8
  %92 = alloca { ptr }, align 8
  %93 = alloca [1 x ptr], align 8
  %94 = alloca [2 x ptr], align 8
  %95 = alloca { ptr, ptr }, align 8
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = alloca [1 x ptr], align 8
  %99 = alloca { ptr }, align 8
  %100 = alloca [2 x ptr], align 8
  %101 = alloca [3 x ptr], align 8
  %102 = alloca { ptr, ptr, ptr }, align 8
  %103 = alloca { ptr, ptr, ptr, i32 }, align 8
  %104 = alloca [2 x ptr], align 8
  %105 = alloca [3 x ptr], align 8
  %106 = alloca { ptr, ptr, ptr }, align 8
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  %108 = alloca [1 x ptr], align 8
  %109 = alloca { ptr }, align 8
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %111 = alloca [1 x ptr], align 8
  %112 = alloca { ptr }, align 8
  %113 = alloca [1 x ptr], align 8
  %114 = alloca { ptr }, align 8
  %115 = alloca [2 x ptr], align 8
  %116 = alloca [3 x ptr], align 8
  %117 = alloca { ptr, ptr, ptr }, align 8
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = alloca [2 x ptr], align 8
  %120 = alloca [3 x ptr], align 8
  %121 = alloca { ptr, ptr, ptr }, align 8
  %122 = alloca { ptr, ptr, ptr, i32 }, align 8
  %123 = alloca [1 x ptr], align 8
  %124 = alloca { ptr }, align 8
  %125 = alloca { ptr, ptr, ptr, i32 }, align 8
  %126 = alloca [1 x ptr], align 8
  %127 = alloca { ptr }, align 8
  %128 = alloca [1 x ptr], align 8
  %129 = alloca { ptr }, align 8
  %130 = alloca [1 x ptr], align 8
  %131 = alloca { ptr }, align 8
  %132 = alloca [1 x ptr], align 8
  %133 = alloca [3 x ptr], align 8
  %134 = alloca { ptr, ptr, ptr }, align 8
  %135 = alloca [1 x ptr], align 8
  %136 = alloca { ptr }, align 8
  %137 = alloca [1 x ptr], align 8
  %138 = alloca { ptr }, align 8
  %139 = alloca [1 x ptr], align 8
  %140 = alloca { ptr }, align 8
  %141 = alloca [1 x ptr], align 8
  %142 = alloca { ptr }, align 8
  %143 = alloca [1 x ptr], align 8
  %144 = alloca [2 x ptr], align 8
  %145 = alloca { ptr, ptr }, align 8
  %146 = alloca { ptr, ptr, ptr, i32 }, align 8
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = alloca [1 x ptr], align 8
  %149 = alloca { ptr }, align 8
  %150 = alloca [2 x ptr], align 8
  %151 = alloca [3 x ptr], align 8
  %152 = alloca { ptr, ptr, ptr }, align 8
  %153 = alloca { ptr, ptr, ptr, i32 }, align 8
  %154 = alloca { ptr, ptr, ptr, i32 }, align 8
  %155 = alloca [1 x ptr], align 8
  %156 = alloca { ptr }, align 8
  %157 = alloca [1 x ptr], align 8
  %158 = alloca { ptr }, align 8
  %159 = alloca [1 x ptr], align 8
  %160 = alloca [3 x ptr], align 8
  %161 = alloca { ptr, ptr, ptr }, align 8
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = alloca { ptr, ptr, ptr, i32 }, align 8
  %165 = alloca [1 x ptr], align 8
  %166 = alloca { ptr }, align 8
  %167 = alloca { ptr, ptr, ptr, i32 }, align 8
  %168 = alloca [2 x ptr], align 8
  %169 = alloca [3 x ptr], align 8
  %170 = alloca { ptr, ptr, ptr }, align 8
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  %172 = alloca [1 x ptr], align 8
  %173 = alloca { ptr }, align 8
  %174 = alloca [1 x ptr], align 8
  %175 = alloca [1 x ptr], align 8
  %176 = alloca { ptr }, align 8
  %177 = alloca { ptr, ptr, ptr, i32 }, align 8
  %178 = alloca [1 x ptr], align 8
  %179 = alloca { ptr }, align 8
  %180 = alloca [1 x ptr], align 8
  %181 = alloca [2 x ptr], align 8
  %182 = alloca { ptr, ptr }, align 8
  %183 = alloca [1 x ptr], align 8
  %184 = alloca { ptr }, align 8
  %185 = alloca { ptr, ptr, ptr, i32 }, align 8
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  %187 = alloca { ptr, ptr, ptr, i32 }, align 8
  %188 = alloca [1 x ptr], align 8
  %189 = alloca { ptr }, align 8
  %190 = alloca [2 x ptr], align 8
  %191 = alloca [3 x ptr], align 8
  %192 = alloca { ptr, ptr, ptr }, align 8
  %193 = alloca [1 x ptr], align 8
  %194 = alloca { ptr }, align 8
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = alloca [2 x ptr], align 8
  %197 = alloca { ptr, ptr }, align 8
  %198 = alloca [1 x ptr], align 8
  %199 = alloca { ptr }, align 8
  %200 = alloca [2 x ptr], align 8
  %201 = alloca [3 x ptr], align 8
  %202 = alloca { ptr, ptr, ptr }, align 8
  %203 = alloca [1 x ptr], align 8
  %204 = alloca { ptr }, align 8
  %205 = alloca [1 x ptr], align 8
  %206 = alloca [3 x ptr], align 8
  %207 = alloca { ptr, ptr, ptr }, align 8
  %208 = alloca [1 x ptr], align 8
  %209 = alloca [3 x ptr], align 8
  %210 = alloca { ptr, ptr, ptr }, align 8
  %211 = alloca { ptr, ptr, ptr, i32 }, align 8
  %212 = alloca { ptr, ptr, ptr, i32 }, align 8
  %213 = alloca [2 x ptr], align 8
  %214 = alloca { ptr, ptr }, align 8
  %215 = alloca [1 x ptr], align 8
  %216 = alloca [3 x ptr], align 8
  %217 = alloca { ptr, ptr, ptr }, align 8
  %218 = alloca { ptr, ptr, ptr, i32 }, align 8
  %219 = alloca [1 x ptr], align 8
  %220 = alloca { ptr }, align 8
  %221 = alloca { ptr, ptr, ptr, i32 }, align 8
  %222 = alloca [1 x ptr], align 8
  %223 = alloca { ptr }, align 8
  %224 = alloca [1 x ptr], align 8
  %225 = alloca [2 x ptr], align 8
  %226 = alloca { ptr, ptr }, align 8
  %227 = alloca [1 x ptr], align 8
  %228 = alloca { ptr }, align 8
  %229 = alloca [1 x ptr], align 8
  %230 = alloca { ptr }, align 8
  %231 = alloca [1 x ptr], align 8
  %232 = alloca { ptr }, align 8
  %233 = alloca [1 x ptr], align 8
  %234 = alloca { ptr }, align 8
  %235 = alloca [1 x ptr], align 8
  %236 = alloca { ptr }, align 8
  %237 = alloca [2 x ptr], align 8
  %238 = alloca { ptr, ptr, ptr, i32 }, align 8
  %239 = alloca [1 x ptr], align 8
  %240 = alloca { ptr }, align 8
  %241 = alloca [1 x ptr], align 8
  %242 = alloca [2 x ptr], align 8
  %243 = alloca { ptr, ptr }, align 8
  %244 = alloca [1 x ptr], align 8
  %245 = alloca { ptr }, align 8
  %246 = alloca { ptr, ptr, ptr, i32 }, align 8
  %247 = alloca [1 x ptr], align 8
  %248 = alloca { ptr }, align 8
  %249 = alloca { ptr, ptr, ptr, i32 }, align 8
  %250 = alloca [2 x ptr], align 8
  %251 = alloca { ptr, ptr }, align 8
  %252 = alloca [1 x ptr], align 8
  %253 = alloca { ptr }, align 8
  %254 = alloca [1 x ptr], align 8
  %255 = alloca { ptr }, align 8
  %256 = alloca [1 x ptr], align 8
  %257 = alloca { ptr }, align 8
  %258 = alloca [2 x ptr], align 8
  %259 = alloca [3 x ptr], align 8
  %260 = alloca { ptr, ptr, ptr }, align 8
  %261 = alloca [1 x ptr], align 8
  %262 = alloca { ptr }, align 8
  tail call void @setup_landing_pad()
  %263 = tail call i64 @clock()
  %.sroa.01146.0.insert.ext = zext i64 %263 to i160
  %264 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %.sroa.01146.0.insert.ext, 1
  store ptr @_parameterization_i64, ptr %4, align 8
  %265 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %4)
  %266 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %267 = load ptr, ptr getelementptr inbounds (i8, ptr @IO, i64 80), align 8
  store ptr @i64_typ, ptr %5, align 8
  %268 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %5)
  call void %268(ptr nonnull %4, { ptr, i160 } %264) #25
  store ptr @Bard, ptr %6, align 8
  %269 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Bard, ptr nonnull %6)
  %270 = extractvalue { i64, i64 } %269, 0
  %271 = call ptr @bump_malloc(i64 %270)
  %272 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Bard, ptr undef, ptr undef, i32 undef }, ptr %271, 1
  %273 = insertvalue { ptr, ptr, ptr, i32 } %272, ptr undef, 2
  %274 = insertvalue { ptr, ptr, ptr, i32 } %273, i32 10, 3
  %275 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %276 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @Bard)
  %277 = call ptr @behavior_wrapper(ptr nonnull @Bard_B_init_, { ptr, ptr, ptr, i32 } %274, ptr nonnull %1)
  call void %277({ ptr, ptr, ptr, i32 } %274, { ptr, ptr, ptr, i32 } %274, ptr nonnull %1) #25
  store ptr @Bard, ptr %7, align 8
  %278 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %271, ptr %278, align 8
  %279 = getelementptr inbounds i8, ptr %7, i64 16
  %280 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 10, ptr %280, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Bard)
  %281 = load ptr, ptr %7, align 8
  %282 = load ptr, ptr %278, align 8
  %283 = load ptr, ptr %279, align 8
  %284 = load i32, ptr %280, align 8
  %285 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %281, 0
  %286 = insertvalue { ptr, ptr, ptr, i32 } %285, ptr %282, 1
  %287 = insertvalue { ptr, ptr, ptr, i32 } %286, ptr %283, 2
  %288 = insertvalue { ptr, ptr, ptr, i32 } %287, i32 %284, 3
  store ptr @_parameterization_i32, ptr %8, align 8
  %289 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %289, align 8
  %290 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %8)
  %291 = call ptr @llvm.invariant.start.p0(i64 56, ptr %281)
  %292 = sext i32 %284 to i64
  %293 = getelementptr ptr, ptr %281, i64 %292
  %294 = getelementptr i8, ptr %293, i64 8
  %295 = load ptr, ptr %294, align 8
  store ptr @i32_typ, ptr %9, align 8
  %296 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %296, align 8
  %297 = call ptr @behavior_wrapper(ptr %295, { ptr, ptr, ptr, i32 } %288, ptr nonnull %9)
  call void %297({ ptr, ptr, ptr, i32 } %288, { ptr, ptr, ptr, i32 } %288, ptr nonnull %8, { ptr, i160 } { ptr @i32_typ, i160 5 }, { ptr, i160 } { ptr @i32_typ, i160 10 }) #25
  store ptr @_parameterization_i32_or_f64, ptr %10, align 8
  %298 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @_parameterization_f64, ptr %298, align 8
  %299 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %300 = call ptr @llvm.invariant.start.p0(i64 56, ptr %281)
  %301 = load ptr, ptr %294, align 8
  store ptr @f64_typ, ptr %11, align 8
  %302 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @f64_typ, ptr %302, align 8
  %303 = call ptr @behavior_wrapper(ptr %301, { ptr, ptr, ptr, i32 } %288, ptr nonnull %11)
  call void %303({ ptr, ptr, ptr, i32 } %288, { ptr, ptr, ptr, i32 } %288, ptr nonnull %10, { ptr, i160 } { ptr @f64_typ, i160 4619567317775286272 }, { ptr, i160 } { ptr @f64_typ, i160 4624070917402656768 }) #25
  %304 = call ptr @bump_malloc(i64 6)
  store <5 x i8> <i8 115, i8 116, i8 97, i8 114, i8 116>, ptr %304, align 8
  store ptr @String, ptr %12, align 8
  %305 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %306 = call { i64, i64 } @size_wrapper(ptr %305, ptr nonnull %12)
  %307 = extractvalue { i64, i64 } %306, 0
  %308 = call ptr @bump_malloc(i64 %307)
  %309 = insertvalue { ptr } undef, ptr %304, 0
  %310 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %308, 1
  %311 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr undef, 2
  %312 = insertvalue { ptr, ptr, ptr, i32 } %311, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %13, align 8
  %313 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr @_parameterization_i32, ptr %313, align 8
  %314 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr @_parameterization_i32, ptr %314, align 8
  %315 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %13)
  %316 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %317 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %14, align 8
  %318 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr @i32_typ, ptr %318, align 8
  %319 = getelementptr inbounds i8, ptr %14, i64 16
  store ptr @i32_typ, ptr %319, align 8
  %320 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %312, ptr nonnull %14)
  call void %320({ ptr, ptr, ptr, i32 } %312, { ptr, ptr, ptr, i32 } %312, ptr nonnull %13, { ptr } %309, i32 5, i32 6) #25
  %321 = ptrtoint ptr %308 to i64
  %.sroa.31093.8.insert.ext = zext i64 %321 to i160
  %.sroa.31093.8.insert.insert = or disjoint i160 %.sroa.31093.8.insert.ext, 3402823669209384634633746074317682114560
  %322 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.31093.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %15, align 8
  %323 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %324 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %16, align 8
  %325 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %16)
  call void %325(ptr nonnull %15, { ptr, i160 } %322) #25
  store ptr @Animal, ptr %17, align 8
  %326 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Animal, ptr nonnull %17)
  %327 = extractvalue { i64, i64 } %326, 0
  %328 = call ptr @bump_malloc(i64 %327)
  %329 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Animal, ptr undef, ptr undef, i32 undef }, ptr %328, 1
  %330 = insertvalue { ptr, ptr, ptr, i32 } %329, ptr undef, 2
  %331 = insertvalue { ptr, ptr, ptr, i32 } %330, i32 10, 3
  store ptr @_parameterization_i32, ptr %18, align 8
  %332 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_f64, ptr %332, align 8
  %333 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %333, align 8
  %334 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %18)
  %335 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Animal)
  store ptr @i32_typ, ptr %19, align 8
  %336 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr @f64_typ, ptr %336, align 8
  %337 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr @i32_typ, ptr %337, align 8
  %338 = call ptr @behavior_wrapper(ptr nonnull @Animal_B_init_agei32_hpf64_skilli32, { ptr, ptr, ptr, i32 } %331, ptr nonnull %19)
  call void %338({ ptr, ptr, ptr, i32 } %331, { ptr, ptr, ptr, i32 } %331, ptr nonnull %18, i32 55, double 8.000000e+00, i32 13) #25
  store ptr @Animal, ptr %20, align 8
  %339 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %328, ptr %339, align 8
  %340 = getelementptr inbounds i8, ptr %20, i64 16
  %341 = getelementptr inbounds i8, ptr %20, i64 24
  store i32 10, ptr %341, align 8
  call void @set_offset(ptr nonnull %20, ptr nonnull @Animal)
  %342 = load ptr, ptr %20, align 8
  %343 = load ptr, ptr %339, align 8
  %344 = load ptr, ptr %340, align 8
  %345 = load i32, ptr %341, align 8
  %346 = call ptr @bump_malloc(i64 14)
  store <13 x i8> <i8 100, i8 105, i8 100, i8 32, i8 103, i8 101, i8 116, i8 32, i8 104, i8 101, i8 114, i8 101, i8 33>, ptr %346, align 16
  store ptr @String, ptr %21, align 8
  %347 = call { i64, i64 } @size_wrapper(ptr %305, ptr nonnull %21)
  %348 = extractvalue { i64, i64 } %347, 0
  %349 = call ptr @bump_malloc(i64 %348)
  %350 = insertvalue { ptr } undef, ptr %346, 0
  %351 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %349, 1
  %352 = insertvalue { ptr, ptr, ptr, i32 } %351, ptr undef, 2
  %353 = insertvalue { ptr, ptr, ptr, i32 } %352, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %22, align 8
  %354 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @_parameterization_i32, ptr %354, align 8
  %355 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @_parameterization_i32, ptr %355, align 8
  %356 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %22)
  %357 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %23, align 8
  %358 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr @i32_typ, ptr %358, align 8
  %359 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr @i32_typ, ptr %359, align 8
  %360 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %353, ptr nonnull %23)
  call void %360({ ptr, ptr, ptr, i32 } %353, { ptr, ptr, ptr, i32 } %353, ptr nonnull %22, { ptr } %350, i32 13, i32 14) #25
  %361 = ptrtoint ptr %349 to i64
  %.sroa.31069.8.insert.ext = zext i64 %361 to i160
  %.sroa.31069.8.insert.insert = or disjoint i160 %.sroa.31069.8.insert.ext, 3402823669209384634633746074317682114560
  %362 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.31069.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %24, align 8
  %363 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %24)
  %364 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %25, align 8
  %365 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %25)
  call void %365(ptr nonnull %24, { ptr, i160 } %362) #25
  store ptr @Beaver, ptr %26, align 8
  %366 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Beaver, ptr nonnull %26)
  %367 = extractvalue { i64, i64 } %366, 0
  %368 = call ptr @bump_malloc(i64 %367)
  %369 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Beaver, ptr undef, ptr undef, i32 undef }, ptr %368, 1
  %370 = insertvalue { ptr, ptr, ptr, i32 } %369, ptr undef, 2
  %371 = insertvalue { ptr, ptr, ptr, i32 } %370, i32 10, 3
  store ptr @_parameterization_i32, ptr %27, align 8
  %372 = getelementptr inbounds i8, ptr %27, i64 8
  store ptr @_parameterization_f64, ptr %372, align 8
  %373 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %27)
  %374 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @Beaver)
  store ptr @i32_typ, ptr %28, align 8
  %375 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr @f64_typ, ptr %375, align 8
  %376 = call ptr @behavior_wrapper(ptr nonnull @Beaver_B_init_colori32_namef64, { ptr, ptr, ptr, i32 } %371, ptr nonnull %28)
  call void %376({ ptr, ptr, ptr, i32 } %371, { ptr, ptr, ptr, i32 } %371, ptr nonnull %27, i32 10, double 1.000000e+01) #25
  store ptr @Beaver, ptr %29, align 8
  %377 = getelementptr inbounds i8, ptr %29, i64 8
  store ptr %368, ptr %377, align 8
  %378 = getelementptr inbounds i8, ptr %29, i64 16
  %379 = getelementptr inbounds i8, ptr %29, i64 24
  store i32 10, ptr %379, align 8
  call void @set_offset(ptr nonnull %29, ptr nonnull @Beaver)
  %380 = load ptr, ptr %29, align 8
  %381 = load ptr, ptr %377, align 8
  %382 = load ptr, ptr %378, align 8
  %383 = load i32, ptr %379, align 8
  %384 = insertvalue { ptr, i160 } undef, ptr %342, 0
  %385 = ptrtoint ptr %343 to i64
  %386 = ptrtoint ptr %344 to i64
  %.sroa.14.8.insert.ext1218 = zext i32 %345 to i160
  %.sroa.14.8.insert.shift1219 = shl nuw i160 %.sroa.14.8.insert.ext1218, 128
  %.sroa.10.8.insert.ext1213 = zext i64 %386 to i160
  %.sroa.10.8.insert.shift1214 = shl nuw nsw i160 %.sroa.10.8.insert.ext1213, 64
  %.sroa.10.8.insert.insert1215 = or disjoint i160 %.sroa.14.8.insert.shift1219, %.sroa.10.8.insert.shift1214
  %.sroa.5.8.insert.ext1211 = zext i64 %385 to i160
  %.sroa.5.8.insert.insert1212 = or disjoint i160 %.sroa.10.8.insert.insert1215, %.sroa.5.8.insert.ext1211
  %387 = insertvalue { ptr, i160 } %384, i160 %.sroa.5.8.insert.insert1212, 1
  %388 = insertvalue { ptr, i160 } undef, ptr %380, 0
  %389 = ptrtoint ptr %381 to i64
  %390 = ptrtoint ptr %382 to i64
  %.sroa.14.8.insert.ext = zext i32 %383 to i160
  %.sroa.14.8.insert.shift = shl nuw i160 %.sroa.14.8.insert.ext, 128
  %.sroa.10.8.insert.ext = zext i64 %390 to i160
  %.sroa.10.8.insert.shift = shl nuw nsw i160 %.sroa.10.8.insert.ext, 64
  %.sroa.10.8.insert.insert = or disjoint i160 %.sroa.14.8.insert.shift, %.sroa.10.8.insert.shift
  %.sroa.5.8.insert.ext = zext i64 %389 to i160
  %.sroa.5.8.insert.insert = or disjoint i160 %.sroa.10.8.insert.insert, %.sroa.5.8.insert.ext
  %391 = insertvalue { ptr, i160 } %388, i160 %.sroa.5.8.insert.insert, 1
  store ptr @_parameterization_Animal, ptr %30, align 8
  %392 = getelementptr inbounds i8, ptr %30, i64 8
  store ptr @_parameterization_Beaver, ptr %392, align 8
  %393 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %30)
  %394 = call ptr @llvm.invariant.start.p0(i64 56, ptr %281)
  %395 = load ptr, ptr %294, align 8
  store ptr %342, ptr %31, align 8
  %396 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr %380, ptr %396, align 8
  %397 = call ptr @behavior_wrapper(ptr %395, { ptr, ptr, ptr, i32 } %288, ptr nonnull %31)
  call void %397({ ptr, ptr, ptr, i32 } %288, { ptr, ptr, ptr, i32 } %288, ptr nonnull %30, { ptr, i160 } %387, { ptr, i160 } %391) #25
  store ptr @_parameterization_i32, ptr %32, align 8
  %398 = getelementptr inbounds i8, ptr %32, i64 8
  store ptr @_parameterization_i32_or_f64, ptr %398, align 8
  %399 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %32)
  %400 = call ptr @llvm.invariant.start.p0(i64 56, ptr %281)
  %401 = load ptr, ptr %294, align 8
  store ptr @i32_typ, ptr %33, align 8
  %402 = getelementptr inbounds i8, ptr %33, i64 8
  store ptr @f64_typ, ptr %402, align 8
  %403 = call ptr @behavior_wrapper(ptr %401, { ptr, ptr, ptr, i32 } %288, ptr nonnull %33)
  call void %403({ ptr, ptr, ptr, i32 } %288, { ptr, ptr, ptr, i32 } %288, ptr nonnull %32, { ptr, i160 } { ptr @i32_typ, i160 7 }, { ptr, i160 } { ptr @f64_typ, i160 4619567317775286272 }) #25
  %404 = call ptr @bump_malloc(i64 17)
  store <16 x i8> <i8 98, i8 97, i8 114, i8 114, i8 121, i8 39, i8 115, i8 32, i8 99, i8 111, i8 108, i8 111, i8 114, i8 32, i8 105, i8 115>, ptr %404, align 16
  store ptr @String, ptr %34, align 8
  %405 = call { i64, i64 } @size_wrapper(ptr %305, ptr nonnull %34)
  %406 = extractvalue { i64, i64 } %405, 0
  %407 = call ptr @bump_malloc(i64 %406)
  %408 = insertvalue { ptr } undef, ptr %404, 0
  %409 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %407, 1
  %410 = insertvalue { ptr, ptr, ptr, i32 } %409, ptr undef, 2
  %411 = insertvalue { ptr, ptr, ptr, i32 } %410, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %35, align 8
  %412 = getelementptr inbounds i8, ptr %35, i64 8
  store ptr @_parameterization_i32, ptr %412, align 8
  %413 = getelementptr inbounds i8, ptr %35, i64 16
  store ptr @_parameterization_i32, ptr %413, align 8
  %414 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %35)
  %415 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %36, align 8
  %416 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr @i32_typ, ptr %416, align 8
  %417 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr @i32_typ, ptr %417, align 8
  %418 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %411, ptr nonnull %36)
  call void %418({ ptr, ptr, ptr, i32 } %411, { ptr, ptr, ptr, i32 } %411, ptr nonnull %35, { ptr } %408, i32 16, i32 17) #25
  %419 = ptrtoint ptr %407 to i64
  %.sroa.31029.8.insert.ext = zext i64 %419 to i160
  %.sroa.31029.8.insert.insert = or disjoint i160 %.sroa.31029.8.insert.ext, 3402823669209384634633746074317682114560
  %420 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.31029.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %37, align 8
  %421 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %37)
  %422 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %38, align 8
  %423 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %38)
  call void %423(ptr nonnull %37, { ptr, i160 } %420) #25
  %424 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %380, 0
  %425 = insertvalue { ptr, ptr, ptr, i32 } %424, ptr %381, 1
  %426 = insertvalue { ptr, ptr, ptr, i32 } %425, ptr %382, 2
  %427 = insertvalue { ptr, ptr, ptr, i32 } %426, i32 %383, 3
  %428 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %429 = call ptr @llvm.invariant.start.p0(i64 64, ptr %380)
  %430 = sext i32 %383 to i64
  %431 = getelementptr ptr, ptr %380, i64 %430
  %432 = getelementptr i8, ptr %431, i64 32
  %433 = load ptr, ptr %432, align 8
  %434 = call ptr @behavior_wrapper(ptr %433, { ptr, ptr, ptr, i32 } %427, ptr nonnull %1)
  call void %434({ ptr, ptr, ptr, i32 } %427, { ptr, ptr, ptr, i32 } %427, ptr nonnull %1) #25
  store ptr @_parameterization_i32, ptr %39, align 8
  %435 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %39)
  %436 = call ptr @llvm.invariant.start.p0(i64 64, ptr %380)
  %437 = getelementptr i8, ptr %431, i64 24
  %438 = load ptr, ptr %437, align 8
  store ptr @i32_typ, ptr %40, align 8
  %439 = call ptr @behavior_wrapper(ptr %438, { ptr, ptr, ptr, i32 } %427, ptr nonnull %40)
  call void %439({ ptr, ptr, ptr, i32 } %427, { ptr, ptr, ptr, i32 } %427, ptr nonnull %39, i32 5) #25
  %440 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %441 = call ptr @llvm.invariant.start.p0(i64 64, ptr %380)
  %442 = load ptr, ptr %432, align 8
  %443 = call ptr @behavior_wrapper(ptr %442, { ptr, ptr, ptr, i32 } %427, ptr nonnull %1)
  call void %443({ ptr, ptr, ptr, i32 } %427, { ptr, ptr, ptr, i32 } %427, ptr nonnull %1) #25
  store ptr @Integer, ptr %41, align 8
  %444 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %41)
  %445 = extractvalue { i64, i64 } %444, 0
  %446 = call ptr @bump_malloc(i64 %445)
  %447 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %446, 1
  %448 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr undef, 2
  %449 = insertvalue { ptr, ptr, ptr, i32 } %448, i32 10, 3
  store ptr @_parameterization_i32, ptr %42, align 8
  %450 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %42)
  %451 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  store ptr @i32_typ, ptr %43, align 8
  %452 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %449, ptr nonnull %43)
  call void %452({ ptr, ptr, ptr, i32 } %449, { ptr, ptr, ptr, i32 } %449, ptr nonnull %42, i32 89) #25
  store ptr @Integer, ptr %44, align 8
  %453 = getelementptr inbounds i8, ptr %44, i64 8
  store ptr %446, ptr %453, align 8
  %454 = getelementptr inbounds i8, ptr %44, i64 16
  %455 = getelementptr inbounds i8, ptr %44, i64 24
  store i32 10, ptr %455, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Integer)
  %456 = load ptr, ptr %44, align 8
  %457 = load ptr, ptr %453, align 8
  %458 = load ptr, ptr %454, align 8
  %459 = load i32, ptr %455, align 8
  %460 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %456, 0
  %461 = insertvalue { ptr, ptr, ptr, i32 } %460, ptr %457, 1
  %462 = insertvalue { ptr, ptr, ptr, i32 } %461, ptr %458, 2
  %463 = insertvalue { ptr, ptr, ptr, i32 } %462, i32 %459, 3
  store ptr @_parameterization_i32, ptr %45, align 8
  %464 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %45)
  %465 = call ptr @llvm.invariant.start.p0(i64 104, ptr %456)
  %466 = sext i32 %459 to i64
  %467 = getelementptr ptr, ptr %456, i64 %466
  %468 = getelementptr i8, ptr %467, i64 24
  %469 = load ptr, ptr %468, align 8
  store ptr @i32_typ, ptr %46, align 8
  %470 = call ptr @behavior_wrapper(ptr %469, { ptr, ptr, ptr, i32 } %463, ptr nonnull %46)
  %471 = call { ptr, ptr, ptr, i32 } %470({ ptr, ptr, ptr, i32 } %463, { ptr, ptr, ptr, i32 } %463, ptr nonnull %45, i32 7) #25
  %.fca.0.extract1000 = extractvalue { ptr, ptr, ptr, i32 } %471, 0
  %.fca.1.extract1002 = extractvalue { ptr, ptr, ptr, i32 } %471, 1
  %.fca.2.extract1004 = extractvalue { ptr, ptr, ptr, i32 } %471, 2
  %.fca.3.extract1005 = extractvalue { ptr, ptr, ptr, i32 } %471, 3
  store ptr %.fca.0.extract1000, ptr %47, align 8
  %472 = getelementptr inbounds i8, ptr %47, i64 8
  store ptr %.fca.1.extract1002, ptr %472, align 8
  %473 = getelementptr inbounds i8, ptr %47, i64 16
  store ptr %.fca.2.extract1004, ptr %473, align 8
  %474 = getelementptr inbounds i8, ptr %47, i64 24
  store i32 %.fca.3.extract1005, ptr %474, align 8
  call void @set_offset(ptr nonnull %47, ptr nonnull @Integer)
  %475 = load ptr, ptr %47, align 8
  %476 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %475, 0
  %477 = load ptr, ptr %472, align 8
  %478 = insertvalue { ptr, ptr, ptr, i32 } %476, ptr %477, 1
  %479 = load ptr, ptr %473, align 8
  %480 = insertvalue { ptr, ptr, ptr, i32 } %478, ptr %479, 2
  %481 = load i32, ptr %474, align 8
  %482 = insertvalue { ptr, ptr, ptr, i32 } %480, i32 %481, 3
  %483 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %484 = call ptr @llvm.invariant.start.p0(i64 104, ptr %475)
  %485 = sext i32 %481 to i64
  %486 = getelementptr ptr, ptr %475, i64 %485
  %487 = getelementptr i8, ptr %486, i64 48
  %488 = load ptr, ptr %487, align 8
  %489 = call ptr @behavior_wrapper(ptr %488, { ptr, ptr, ptr, i32 } %482, ptr nonnull %1)
  call void %489({ ptr, ptr, ptr, i32 } %482, { ptr, ptr, ptr, i32 } %482, ptr nonnull %1) #25
  store ptr @_parameterization_f64, ptr %48, align 8
  %490 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %48)
  %491 = call ptr @llvm.invariant.start.p0(i64 136, ptr nonnull @Math)
  %492 = load ptr, ptr getelementptr inbounds (i8, ptr @Math, i64 80), align 8
  store ptr @f64_typ, ptr %49, align 8
  %493 = call ptr @class_behavior_wrapper(ptr %492, ptr nonnull %49)
  %494 = call double %493(ptr nonnull %48, double 9.000000e+00) #25
  store ptr @_parameterization_i32, ptr %50, align 8
  %495 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %50)
  %496 = call ptr @llvm.invariant.start.p0(i64 136, ptr nonnull @Math)
  %497 = load ptr, ptr getelementptr inbounds (i8, ptr @Math, i64 88), align 8
  store ptr @i32_typ, ptr %51, align 8
  %498 = call ptr @class_behavior_wrapper(ptr %497, ptr nonnull %51)
  %499 = call { ptr, i64 } %498(ptr nonnull %50, { ptr, i64 } { ptr @i32_typ, i64 4294967287 }) #25
  %.fca.1.extract989 = extractvalue { ptr, i64 } %499, 1
  %.sroa.1992.8.extract.trunc.mask = and i64 %.fca.1.extract989, 4294967295
  %.sroa.0984.0.insert.ext = zext nneg i64 %.sroa.1992.8.extract.trunc.mask to i160
  %500 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0984.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %52, align 8
  %501 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %52)
  %502 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %53, align 8
  %503 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %53)
  call void %503(ptr nonnull %52, { ptr, i160 } %500) #25
  %504 = bitcast double %494 to i64
  %.sroa.0981.0.insert.ext = zext i64 %504 to i160
  %505 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.0981.0.insert.ext, 1
  store ptr @_parameterization_f64, ptr %54, align 8
  %506 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %54)
  %507 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @f64_typ, ptr %55, align 8
  %508 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %55)
  call void %508(ptr nonnull %54, { ptr, i160 } %505) #25
  %509 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %342, 0
  %510 = insertvalue { ptr, ptr, ptr, i32 } %509, ptr %343, 1
  %511 = insertvalue { ptr, ptr, ptr, i32 } %510, ptr %344, 2
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %1)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3)
  store ptr %342, ptr %3, align 8
  %512 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr %343, ptr %512, align 8
  %513 = getelementptr inbounds i8, ptr %3, i64 16
  store ptr %344, ptr %513, align 8
  %514 = getelementptr inbounds i8, ptr %3, i64 24
  store i32 %345, ptr %514, align 8
  call void @set_offset(ptr nonnull %3, ptr nonnull @Animal)
  %515 = load ptr, ptr %3, align 8
  %516 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %515, 0
  %517 = load ptr, ptr %512, align 8
  %518 = insertvalue { ptr, ptr, ptr, i32 } %516, ptr %517, 1
  %519 = load ptr, ptr %513, align 8
  %520 = insertvalue { ptr, ptr, ptr, i32 } %518, ptr %519, 2
  %521 = load i32, ptr %514, align 8
  %522 = insertvalue { ptr, ptr, ptr, i32 } %520, i32 %521, 3
  %523 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %524 = call ptr @llvm.invariant.start.p0(i64 104, ptr %515)
  %525 = sext i32 %521 to i64
  %526 = getelementptr ptr, ptr %515, i64 %525
  %527 = getelementptr i8, ptr %526, i64 32
  %528 = load ptr, ptr %527, align 8
  %529 = call ptr @behavior_wrapper(ptr %528, { ptr, ptr, ptr, i32 } %522, ptr nonnull %1)
  call void %529({ ptr, ptr, ptr, i32 } %522, { ptr, ptr, ptr, i32 } %522, ptr nonnull %1) #25
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %1)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3)
  %530 = insertvalue { ptr, ptr, ptr, i32 } %511, i32 %345, 3
  %531 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %532 = call ptr @llvm.invariant.start.p0(i64 104, ptr %342)
  %533 = sext i32 %345 to i64
  %534 = getelementptr ptr, ptr %342, i64 %533
  %535 = getelementptr i8, ptr %534, i64 56
  %536 = load ptr, ptr %535, align 8
  %537 = call ptr @behavior_wrapper(ptr %536, { ptr, ptr, ptr, i32 } %530, ptr nonnull %1)
  %538 = call { ptr, i160 } %537({ ptr, ptr, ptr, i32 } %530, { ptr, ptr, ptr, i32 } %530, ptr nonnull %1) #25
  %539 = getelementptr inbounds i8, ptr %59, i64 8
  %540 = getelementptr inbounds i8, ptr %59, i64 16
  %541 = getelementptr inbounds i8, ptr %60, i64 8
  %542 = getelementptr inbounds i8, ptr %60, i64 16
  %543 = getelementptr inbounds i8, ptr %61, i64 8
  %544 = getelementptr inbounds i8, ptr %61, i64 16
  %545 = getelementptr inbounds i8, ptr %61, i64 24
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %._crit_edge, %0
  %.sroa.3945.0 = phi i64 [ undef, %0 ], [ %.sroa.3945.2, %._crit_edge ]
  %.sroa.4946.0 = phi i32 [ undef, %0 ], [ %.sroa.4946.2, %._crit_edge ]
  %.sroa.0944.sroa.3.sroa.0.0 = phi i32 [ undef, %0 ], [ %.sroa.0944.sroa.3.sroa.0.2, %._crit_edge ]
  %.0 = phi ptr [ @i32_typ, %0 ], [ %.1, %._crit_edge ]
  %.sroa.0963.0 = phi i32 [ 5, %0 ], [ %.sroa.0963.1, %._crit_edge ]
  %.sroa.7968.sroa.0.0 = phi i128 [ undef, %0 ], [ %.sroa.7968.sroa.0.1, %._crit_edge ]
  %546 = icmp eq ptr %.0, @i32_typ
  br i1 %546, label %547, label %._crit_edge

547:                                              ; preds = %._crit_edge2
  %.sroa.0952.0.insert.ext = zext i32 %.sroa.0963.0 to i160
  %548 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0952.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %56, align 8
  %549 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %56)
  %550 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %57, align 8
  %551 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %57)
  call void %551(ptr nonnull %56, { ptr, i160 } %548) #25
  %552 = add i32 %.sroa.0963.0, 1
  %553 = icmp eq i32 %552, 9
  br i1 %553, label %554, label %._crit_edge1

554:                                              ; preds = %547
  store ptr @Animal, ptr %58, align 8
  %555 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Animal, ptr nonnull %58)
  %556 = extractvalue { i64, i64 } %555, 0
  %557 = call ptr @bump_malloc(i64 %556)
  %558 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Animal, ptr undef, ptr undef, i32 undef }, ptr %557, 1
  %559 = insertvalue { ptr, ptr, ptr, i32 } %558, ptr undef, 2
  %560 = insertvalue { ptr, ptr, ptr, i32 } %559, i32 10, 3
  store ptr @_parameterization_i32, ptr %59, align 8
  store ptr @_parameterization_f64, ptr %539, align 8
  store ptr @_parameterization_i32, ptr %540, align 8
  %561 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %59)
  %562 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Animal)
  store ptr @i32_typ, ptr %60, align 8
  store ptr @f64_typ, ptr %541, align 8
  store ptr @i32_typ, ptr %542, align 8
  %563 = call ptr @behavior_wrapper(ptr nonnull @Animal_B_init_agei32_hpf64_skilli32, { ptr, ptr, ptr, i32 } %560, ptr nonnull %60)
  call void %563({ ptr, ptr, ptr, i32 } %560, { ptr, ptr, ptr, i32 } %560, ptr nonnull %59, i32 65, double 1.800000e+01, i32 23) #25
  store ptr @Animal, ptr %61, align 8
  store ptr %557, ptr %543, align 8
  store i32 10, ptr %545, align 8
  call void @set_offset(ptr nonnull %61, ptr nonnull @Animal)
  %564 = load ptr, ptr %61, align 8
  %565 = load ptr, ptr %543, align 8
  %566 = load ptr, ptr %544, align 8
  %567 = load i32, ptr %545, align 8
  %568 = ptrtoint ptr %565 to i64
  %569 = ptrtoint ptr %566 to i64
  %.sroa.0944.sroa.0.0.extract.trunc = trunc i64 %568 to i32
  %.sroa.0944.sroa.3.0.extract.shift = lshr i64 %568, 32
  %.sroa.0944.sroa.3.0.extract.trunc = trunc nuw i64 %.sroa.0944.sroa.3.0.extract.shift to i32
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %554, %547
  %.01149 = phi ptr [ %564, %554 ], [ @i32_typ, %547 ]
  %.sroa.3945.1 = phi i64 [ %569, %554 ], [ %.sroa.3945.0, %547 ]
  %.sroa.4946.1 = phi i32 [ %567, %554 ], [ %.sroa.4946.0, %547 ]
  %.sroa.0944.sroa.0.0 = phi i32 [ %.sroa.0944.sroa.0.0.extract.trunc, %554 ], [ %552, %547 ]
  %.sroa.0944.sroa.3.sroa.0.1 = phi i32 [ %.sroa.0944.sroa.3.0.extract.trunc, %554 ], [ %.sroa.0944.sroa.3.sroa.0.0, %547 ]
  %.sroa.0944.sroa.3.0.insert.ext = zext i32 %.sroa.0944.sroa.3.sroa.0.1 to i64
  %.sroa.0944.sroa.3.0.insert.shift = shl nuw i64 %.sroa.0944.sroa.3.0.insert.ext, 32
  %.sroa.4946.0.insert.ext = zext i32 %.sroa.4946.1 to i160
  %.sroa.4946.0.insert.shift = shl nuw i160 %.sroa.4946.0.insert.ext, 128
  %.sroa.3945.0.insert.ext = zext i64 %.sroa.3945.1 to i160
  %.sroa.3945.0.insert.shift = shl nuw nsw i160 %.sroa.3945.0.insert.ext, 64
  %.sroa.3945.0.insert.insert = or disjoint i160 %.sroa.4946.0.insert.shift, %.sroa.3945.0.insert.shift
  %.sroa.0944.0.insert.ext = zext i64 %.sroa.0944.sroa.3.0.insert.shift to i160
  %.sroa.0944.0.insert.insert = or disjoint i160 %.sroa.3945.0.insert.insert, %.sroa.0944.0.insert.ext
  %.sroa.7968.0.extract.shift = lshr exact i160 %.sroa.0944.0.insert.insert, 32
  %.sroa.7968.0.extract.trunc = trunc nuw i160 %.sroa.7968.0.extract.shift to i128
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %._crit_edge2
  %.sroa.3945.2 = phi i64 [ %.sroa.3945.1, %._crit_edge1 ], [ %.sroa.3945.0, %._crit_edge2 ]
  %.sroa.4946.2 = phi i32 [ %.sroa.4946.1, %._crit_edge1 ], [ %.sroa.4946.0, %._crit_edge2 ]
  %.sroa.0944.sroa.3.sroa.0.2 = phi i32 [ %.sroa.0944.sroa.3.sroa.0.1, %._crit_edge1 ], [ %.sroa.0944.sroa.3.sroa.0.0, %._crit_edge2 ]
  %.1 = phi ptr [ %.01149, %._crit_edge1 ], [ %.0, %._crit_edge2 ]
  %.sroa.0963.1 = phi i32 [ %.sroa.0944.sroa.0.0, %._crit_edge1 ], [ %.sroa.0963.0, %._crit_edge2 ]
  %.sroa.7968.sroa.0.1 = phi i128 [ %.sroa.7968.0.extract.trunc, %._crit_edge1 ], [ %.sroa.7968.sroa.0.0, %._crit_edge2 ]
  br i1 %546, label %._crit_edge2, label %570

570:                                              ; preds = %._crit_edge
  %571 = icmp eq ptr %.1, @i32_typ
  br i1 %571, label %572, label %._crit_edge3

572:                                              ; preds = %570
  %.sroa.0920.0.insert.ext = zext i32 %.sroa.0963.1 to i160
  %573 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0920.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %62, align 8
  %574 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %62)
  %575 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %63, align 8
  %576 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %63)
  call void %576(ptr nonnull %62, { ptr, i160 } %573) #25
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %572, %570
  %.2 = phi ptr [ @i32_typ, %572 ], [ %.1, %570 ]
  %.sroa.7968.sroa.0.2 = phi i128 [ 0, %572 ], [ %.sroa.7968.sroa.0.1, %570 ]
  %577 = getelementptr i8, ptr %.2, i64 8
  %578 = getelementptr i8, ptr %.2, i64 16
  %579 = getelementptr i8, ptr %.2, i64 24
  %580 = getelementptr i8, ptr %.2, i64 32
  %581 = load i64, ptr %577, align 4
  %582 = load i64, ptr %578, align 4
  %583 = load ptr, ptr %579, align 8
  %584 = load ptr, ptr %580, align 8
  %585 = call i1 @subtype_test_wrapper(ptr %583, i64 %582, i64 %581, i64 1075018126824711487, i64 ptrtoint (ptr @Animal to i64), ptr %584)
  br i1 %585, label %586, label %._crit_edge4

586:                                              ; preds = %._crit_edge3
  store ptr %.2, ptr %64, align 8
  %587 = getelementptr inbounds i8, ptr %64, i64 8
  %.sroa.7968.0.insert.ext = zext i128 %.sroa.7968.sroa.0.2 to i160
  %.sroa.7968.0.insert.shift = shl nuw i160 %.sroa.7968.0.insert.ext, 32
  %.sroa.0963.0.insert.ext = zext i32 %.sroa.0963.1 to i160
  %.sroa.0963.0.insert.insert = or disjoint i160 %.sroa.7968.0.insert.shift, %.sroa.0963.0.insert.ext
  store i160 %.sroa.0963.0.insert.insert, ptr %587, align 8
  call void @set_offset(ptr nonnull %64, ptr nonnull @Animal)
  %588 = load ptr, ptr %64, align 8
  %589 = load ptr, ptr %587, align 8
  %590 = getelementptr inbounds i8, ptr %64, i64 16
  %591 = load ptr, ptr %590, align 8
  %592 = getelementptr inbounds i8, ptr %64, i64 24
  %593 = load i32, ptr %592, align 8
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %1)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %2)
  store ptr %588, ptr %2, align 8
  %594 = getelementptr inbounds i8, ptr %2, i64 8
  store ptr %589, ptr %594, align 8
  %595 = getelementptr inbounds i8, ptr %2, i64 16
  store ptr %591, ptr %595, align 8
  %596 = getelementptr inbounds i8, ptr %2, i64 24
  store i32 %593, ptr %596, align 8
  call void @set_offset(ptr nonnull %2, ptr nonnull @Animal)
  %597 = load ptr, ptr %2, align 8
  %598 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %597, 0
  %599 = load ptr, ptr %594, align 8
  %600 = insertvalue { ptr, ptr, ptr, i32 } %598, ptr %599, 1
  %601 = load ptr, ptr %595, align 8
  %602 = insertvalue { ptr, ptr, ptr, i32 } %600, ptr %601, 2
  %603 = load i32, ptr %596, align 8
  %604 = insertvalue { ptr, ptr, ptr, i32 } %602, i32 %603, 3
  %605 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %606 = call ptr @llvm.invariant.start.p0(i64 104, ptr %597)
  %607 = sext i32 %603 to i64
  %608 = getelementptr ptr, ptr %597, i64 %607
  %609 = getelementptr i8, ptr %608, i64 32
  %610 = load ptr, ptr %609, align 8
  %611 = call ptr @behavior_wrapper(ptr %610, { ptr, ptr, ptr, i32 } %604, ptr nonnull %1)
  call void %611({ ptr, ptr, ptr, i32 } %604, { ptr, ptr, ptr, i32 } %604, ptr nonnull %1) #25
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %1)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %2)
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %586, %._crit_edge3
  %612 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %613 = call ptr @llvm.invariant.start.p0(i64 104, ptr %342)
  %614 = getelementptr i8, ptr %534, i64 40
  %615 = load ptr, ptr %614, align 8
  %616 = call ptr @behavior_wrapper(ptr %615, { ptr, ptr, ptr, i32 } %530, ptr nonnull %1)
  call void %616({ ptr, ptr, ptr, i32 } %530, { ptr, ptr, ptr, i32 } %530, ptr nonnull %1) #25
  store ptr @ListNode, ptr %65, align 8
  %617 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ListNode, ptr nonnull %65)
  %618 = extractvalue { i64, i64 } %617, 0
  %619 = call ptr @bump_malloc(i64 %618)
  %620 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ListNode, ptr undef, ptr undef, i32 undef }, ptr %619, 1
  %621 = insertvalue { ptr, ptr, ptr, i32 } %620, ptr undef, 2
  %622 = insertvalue { ptr, ptr, ptr, i32 } %621, i32 10, 3
  store ptr @_parameterization_i32, ptr %66, align 8
  %623 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %66)
  %624 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ListNode)
  store ptr @i32_typ, ptr %67, align 8
  %625 = call ptr @behavior_wrapper(ptr nonnull @ListNode_B_init_datai32, { ptr, ptr, ptr, i32 } %622, ptr nonnull %67)
  call void %625({ ptr, ptr, ptr, i32 } %622, { ptr, ptr, ptr, i32 } %622, ptr nonnull %66, i32 0) #25
  store ptr @ListNode, ptr %68, align 8
  %626 = getelementptr inbounds i8, ptr %68, i64 8
  store ptr %619, ptr %626, align 8
  %627 = getelementptr inbounds i8, ptr %68, i64 16
  %628 = getelementptr inbounds i8, ptr %68, i64 24
  store i32 10, ptr %628, align 8
  call void @set_offset(ptr nonnull %68, ptr nonnull @ListNode)
  %629 = load ptr, ptr %68, align 8
  %630 = load ptr, ptr %626, align 8
  %631 = load ptr, ptr %627, align 8
  %632 = load i32, ptr %628, align 8
  store ptr %629, ptr %69, align 8
  %633 = getelementptr inbounds i8, ptr %69, i64 8
  store ptr %630, ptr %633, align 8
  %634 = getelementptr inbounds i8, ptr %69, i64 16
  store ptr %631, ptr %634, align 8
  %635 = getelementptr inbounds i8, ptr %69, i64 24
  store i32 %632, ptr %635, align 8
  call void @set_offset(ptr nonnull %69, ptr nonnull @ListNode)
  %636 = load ptr, ptr %69, align 8
  %637 = load ptr, ptr %633, align 8
  %638 = load ptr, ptr %634, align 8
  %639 = load i32, ptr %635, align 8
  store ptr @Range, ptr %70, align 8
  %640 = load ptr, ptr getelementptr inbounds (i8, ptr @Range, i64 48), align 8
  %641 = call { i64, i64 } @size_wrapper(ptr %640, ptr nonnull %70)
  %642 = extractvalue { i64, i64 } %641, 0
  %643 = call ptr @bump_malloc(i64 %642)
  %644 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %643, 1
  %645 = insertvalue { ptr, ptr, ptr, i32 } %644, ptr undef, 2
  %646 = insertvalue { ptr, ptr, ptr, i32 } %645, i32 10, 3
  store ptr @_parameterization_i32, ptr %71, align 8
  %647 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr @_parameterization_i32, ptr %647, align 8
  %648 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %71)
  %649 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %650 = load ptr, ptr getelementptr inbounds (i8, ptr @Range, i64 120), align 8
  store ptr @i32_typ, ptr %72, align 8
  %651 = getelementptr inbounds i8, ptr %72, i64 8
  store ptr @i32_typ, ptr %651, align 8
  %652 = call ptr @behavior_wrapper(ptr %650, { ptr, ptr, ptr, i32 } %646, ptr nonnull %72)
  call void %652({ ptr, ptr, ptr, i32 } %646, { ptr, ptr, ptr, i32 } %646, ptr nonnull %71, i32 1, i32 10) #25
  %653 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %654 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %655 = load ptr, ptr getelementptr inbounds (i8, ptr @Range, i64 136), align 8
  %656 = call ptr @behavior_wrapper(ptr %655, { ptr, ptr, ptr, i32 } %646, ptr nonnull %1)
  %657 = call { ptr, ptr, ptr, i32 } %656({ ptr, ptr, ptr, i32 } %646, { ptr, ptr, ptr, i32 } %646, ptr nonnull %1) #25
  %.fca.0.extract870 = extractvalue { ptr, ptr, ptr, i32 } %657, 0
  %.fca.1.extract872 = extractvalue { ptr, ptr, ptr, i32 } %657, 1
  %.fca.2.extract874 = extractvalue { ptr, ptr, ptr, i32 } %657, 2
  %.fca.3.extract875 = extractvalue { ptr, ptr, ptr, i32 } %657, 3
  store ptr %.fca.0.extract870, ptr %73, align 8
  %658 = getelementptr inbounds i8, ptr %73, i64 8
  store ptr %.fca.1.extract872, ptr %658, align 8
  %659 = getelementptr inbounds i8, ptr %73, i64 16
  store ptr %.fca.2.extract874, ptr %659, align 8
  %660 = getelementptr inbounds i8, ptr %73, i64 24
  store i32 %.fca.3.extract875, ptr %660, align 8
  call void @set_offset(ptr nonnull %73, ptr nonnull @RangeIterator)
  %661 = load ptr, ptr %73, align 8
  store ptr %661, ptr %74, align 8
  %662 = getelementptr inbounds i8, ptr %74, i64 8
  %663 = load ptr, ptr %658, align 8
  store ptr %663, ptr %662, align 8
  %664 = getelementptr inbounds i8, ptr %74, i64 16
  %665 = load ptr, ptr %659, align 8
  store ptr %665, ptr %664, align 8
  %666 = getelementptr inbounds i8, ptr %74, i64 24
  %667 = load i32, ptr %660, align 8
  store i32 %667, ptr %666, align 8
  call void @set_offset(ptr nonnull %74, ptr nonnull @RangeIterator)
  %668 = load ptr, ptr %74, align 8
  %669 = load ptr, ptr %662, align 8
  %670 = load ptr, ptr %664, align 8
  %671 = load i32, ptr %666, align 8
  %672 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %668, 0
  %673 = insertvalue { ptr, ptr, ptr, i32 } %672, ptr %669, 1
  %674 = insertvalue { ptr, ptr, ptr, i32 } %673, ptr %670, 2
  %675 = insertvalue { ptr, ptr, ptr, i32 } %674, i32 %671, 3
  %676 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %677 = call ptr @llvm.invariant.start.p0(i64 88, ptr %668)
  %678 = sext i32 %671 to i64
  %679 = getelementptr ptr, ptr %668, i64 %678
  %680 = getelementptr i8, ptr %679, i64 40
  %681 = getelementptr inbounds i8, ptr %78, i64 8
  %682 = getelementptr inbounds i8, ptr %78, i64 16
  %683 = getelementptr inbounds i8, ptr %78, i64 24
  %684 = getelementptr inbounds i8, ptr %81, i64 8
  %685 = getelementptr inbounds i8, ptr %81, i64 16
  %686 = getelementptr inbounds i8, ptr %81, i64 24
  %687 = getelementptr inbounds i8, ptr %82, i64 8
  %688 = getelementptr inbounds i8, ptr %82, i64 16
  %689 = getelementptr inbounds i8, ptr %82, i64 24
  br label %._crit_edge6

._crit_edge6:                                     ; preds = %._crit_edge5, %._crit_edge4
  %.01156 = phi ptr [ %636, %._crit_edge4 ], [ %.11157, %._crit_edge5 ]
  %.01154 = phi ptr [ %637, %._crit_edge4 ], [ %.11155, %._crit_edge5 ]
  %.01152 = phi ptr [ %638, %._crit_edge4 ], [ %.11153, %._crit_edge5 ]
  %.01150 = phi i32 [ %639, %._crit_edge4 ], [ %.11151, %._crit_edge5 ]
  %690 = load ptr, ptr %680, align 8
  %691 = call ptr @behavior_wrapper(ptr %690, { ptr, ptr, ptr, i32 } %675, ptr nonnull %1)
  %692 = call { ptr, i160 } %691({ ptr, ptr, ptr, i32 } %675, { ptr, ptr, ptr, i32 } %675, ptr nonnull %1) #25
  %.fca.0.extract862 = extractvalue { ptr, i160 } %692, 0
  %693 = icmp ne ptr %.fca.0.extract862, @nil_typ
  %694 = icmp ne ptr %.fca.0.extract862, null
  %.not1163 = and i1 %693, %694
  br i1 %.not1163, label %695, label %._crit_edge5

695:                                              ; preds = %._crit_edge6
  %.fca.1.extract864 = extractvalue { ptr, i160 } %692, 1
  %.sroa.11200.8.extract.trunc = trunc i160 %.fca.1.extract864 to i32
  store ptr @ListNode, ptr %75, align 8
  %696 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ListNode, ptr nonnull %75)
  %697 = extractvalue { i64, i64 } %696, 0
  %698 = call ptr @bump_malloc(i64 %697)
  %699 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ListNode, ptr undef, ptr undef, i32 undef }, ptr %698, 1
  %700 = insertvalue { ptr, ptr, ptr, i32 } %699, ptr undef, 2
  %701 = insertvalue { ptr, ptr, ptr, i32 } %700, i32 10, 3
  store ptr @_parameterization_i32, ptr %76, align 8
  %702 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %76)
  %703 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ListNode)
  store ptr @i32_typ, ptr %77, align 8
  %704 = call ptr @behavior_wrapper(ptr nonnull @ListNode_B_init_datai32, { ptr, ptr, ptr, i32 } %701, ptr nonnull %77)
  call void %704({ ptr, ptr, ptr, i32 } %701, { ptr, ptr, ptr, i32 } %701, ptr nonnull %76, i32 %.sroa.11200.8.extract.trunc) #25
  store ptr @ListNode, ptr %78, align 8
  store ptr %698, ptr %681, align 8
  store i32 10, ptr %683, align 8
  call void @set_offset(ptr nonnull %78, ptr nonnull @ListNode)
  %705 = load ptr, ptr %78, align 8
  %706 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %705, 0
  %707 = load ptr, ptr %681, align 8
  %708 = insertvalue { ptr, ptr, ptr, i32 } %706, ptr %707, 1
  %709 = load ptr, ptr %682, align 8
  %710 = insertvalue { ptr, ptr, ptr, i32 } %708, ptr %709, 2
  %711 = load i32, ptr %683, align 8
  %712 = insertvalue { ptr, ptr, ptr, i32 } %710, i32 %711, 3
  %713 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.01156, 0
  %714 = insertvalue { ptr, ptr, ptr, i32 } %713, ptr %.01154, 1
  %715 = insertvalue { ptr, ptr, ptr, i32 } %714, ptr %.01152, 2
  %716 = insertvalue { ptr, ptr, ptr, i32 } %715, i32 %.01150, 3
  store ptr @_parameterization_ListNode, ptr %79, align 8
  %717 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %79)
  %718 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.01156)
  %719 = sext i32 %.01150 to i64
  %720 = getelementptr ptr, ptr %.01156, i64 %719
  %721 = getelementptr i8, ptr %720, i64 24
  %722 = load ptr, ptr %721, align 8
  store ptr %705, ptr %80, align 8
  %723 = call ptr @behavior_wrapper(ptr %722, { ptr, ptr, ptr, i32 } %716, ptr nonnull %80)
  %724 = call { ptr, ptr, ptr, i32 } %723({ ptr, ptr, ptr, i32 } %716, { ptr, ptr, ptr, i32 } %716, ptr nonnull %79, { ptr, ptr, ptr, i32 } %712) #25
  %.fca.0.extract835 = extractvalue { ptr, ptr, ptr, i32 } %724, 0
  %.fca.1.extract837 = extractvalue { ptr, ptr, ptr, i32 } %724, 1
  %.fca.2.extract839 = extractvalue { ptr, ptr, ptr, i32 } %724, 2
  %.fca.3.extract840 = extractvalue { ptr, ptr, ptr, i32 } %724, 3
  store ptr %.fca.0.extract835, ptr %81, align 8
  store ptr %.fca.1.extract837, ptr %684, align 8
  store ptr %.fca.2.extract839, ptr %685, align 8
  store i32 %.fca.3.extract840, ptr %686, align 8
  call void @set_offset(ptr nonnull %81, ptr nonnull @ListNode)
  %725 = load ptr, ptr %81, align 8
  store ptr %725, ptr %82, align 8
  %726 = load ptr, ptr %684, align 8
  store ptr %726, ptr %687, align 8
  %727 = load ptr, ptr %685, align 8
  store ptr %727, ptr %688, align 8
  %728 = load i32, ptr %686, align 8
  store i32 %728, ptr %689, align 8
  call void @set_offset(ptr nonnull %82, ptr nonnull @ListNode)
  %729 = load ptr, ptr %82, align 8
  %730 = load ptr, ptr %687, align 8
  %731 = load ptr, ptr %688, align 8
  %732 = load i32, ptr %689, align 8
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %695, %._crit_edge6
  %.11157 = phi ptr [ %729, %695 ], [ %.01156, %._crit_edge6 ]
  %.11155 = phi ptr [ %730, %695 ], [ %.01154, %._crit_edge6 ]
  %.11153 = phi ptr [ %731, %695 ], [ %.01152, %._crit_edge6 ]
  %.11151 = phi i32 [ %732, %695 ], [ %.01150, %._crit_edge6 ]
  br i1 %.not1163, label %._crit_edge6, label %733

733:                                              ; preds = %._crit_edge5
  %734 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %629, 0
  %735 = insertvalue { ptr, ptr, ptr, i32 } %734, ptr %630, 1
  %736 = insertvalue { ptr, ptr, ptr, i32 } %735, ptr %631, 2
  %737 = insertvalue { ptr, ptr, ptr, i32 } %736, i32 %632, 3
  %738 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %739 = call ptr @llvm.invariant.start.p0(i64 96, ptr %629)
  %740 = sext i32 %632 to i64
  %741 = getelementptr ptr, ptr %629, i64 %740
  %742 = getelementptr i8, ptr %741, i64 40
  %743 = load ptr, ptr %742, align 8
  %744 = call ptr @behavior_wrapper(ptr %743, { ptr, ptr, ptr, i32 } %737, ptr nonnull %1)
  %745 = call i32 %744({ ptr, ptr, ptr, i32 } %737, { ptr, ptr, ptr, i32 } %737, ptr nonnull %1) #25
  %.sroa.0832.0.insert.ext = zext i32 %745 to i160
  %746 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0832.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %83, align 8
  %747 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %83)
  %748 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %84, align 8
  %749 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %84)
  call void %749(ptr nonnull %83, { ptr, i160 } %746) #25
  %750 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %751 = call ptr @llvm.invariant.start.p0(i64 96, ptr %629)
  %752 = getelementptr i8, ptr %741, i64 48
  %753 = load ptr, ptr %752, align 8
  %754 = call ptr @behavior_wrapper(ptr %753, { ptr, ptr, ptr, i32 } %737, ptr nonnull %1)
  %755 = call { ptr, ptr, ptr, i32 } %754({ ptr, ptr, ptr, i32 } %737, { ptr, ptr, ptr, i32 } %737, ptr nonnull %1) #25
  %.fca.0.extract821 = extractvalue { ptr, ptr, ptr, i32 } %755, 0
  %.fca.1.extract823 = extractvalue { ptr, ptr, ptr, i32 } %755, 1
  %.fca.2.extract825 = extractvalue { ptr, ptr, ptr, i32 } %755, 2
  %.fca.3.extract826 = extractvalue { ptr, ptr, ptr, i32 } %755, 3
  store ptr %.fca.0.extract821, ptr %85, align 8
  %756 = getelementptr inbounds i8, ptr %85, i64 8
  store ptr %.fca.1.extract823, ptr %756, align 8
  %757 = getelementptr inbounds i8, ptr %85, i64 16
  store ptr %.fca.2.extract825, ptr %757, align 8
  %758 = getelementptr inbounds i8, ptr %85, i64 24
  store i32 %.fca.3.extract826, ptr %758, align 8
  call void @set_offset(ptr nonnull %85, ptr nonnull @ListIterator)
  %759 = load ptr, ptr %85, align 8
  store ptr %759, ptr %86, align 8
  %760 = getelementptr inbounds i8, ptr %86, i64 8
  %761 = load ptr, ptr %756, align 8
  store ptr %761, ptr %760, align 8
  %762 = getelementptr inbounds i8, ptr %86, i64 16
  %763 = load ptr, ptr %757, align 8
  store ptr %763, ptr %762, align 8
  %764 = getelementptr inbounds i8, ptr %86, i64 24
  %765 = load i32, ptr %758, align 8
  store i32 %765, ptr %764, align 8
  call void @set_offset(ptr nonnull %86, ptr nonnull @ListIterator)
  %766 = load ptr, ptr %86, align 8
  %767 = load ptr, ptr %760, align 8
  %768 = load ptr, ptr %762, align 8
  %769 = load i32, ptr %764, align 8
  %770 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %766, 0
  %771 = insertvalue { ptr, ptr, ptr, i32 } %770, ptr %767, 1
  %772 = insertvalue { ptr, ptr, ptr, i32 } %771, ptr %768, 2
  %773 = insertvalue { ptr, ptr, ptr, i32 } %772, i32 %769, 3
  %774 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %775 = call ptr @llvm.invariant.start.p0(i64 40, ptr %766)
  %776 = sext i32 %769 to i64
  %777 = getelementptr ptr, ptr %766, i64 %776
  %778 = getelementptr i8, ptr %777, i64 16
  %779 = load ptr, ptr %778, align 8
  %780 = call ptr @behavior_wrapper(ptr %779, { ptr, ptr, ptr, i32 } %773, ptr nonnull %1)
  %781 = call { ptr, i160 } %780({ ptr, ptr, ptr, i32 } %773, { ptr, ptr, ptr, i32 } %773, ptr nonnull %1) #25
  %.fca.0.extract8051222 = extractvalue { ptr, i160 } %781, 0
  %782 = icmp ne ptr %.fca.0.extract8051222, @nil_typ
  %783 = icmp ne ptr %.fca.0.extract8051222, null
  %.not11651223 = and i1 %782, %783
  br i1 %.not11651223, label %._crit_edge7.lr.ph, label %.critedge

._crit_edge7.lr.ph:                               ; preds = %733
  %784 = getelementptr inbounds i8, ptr %87, i64 8
  %.sroa_idx810 = getelementptr inbounds i8, ptr %87, i64 16
  %.sroa_idx811 = getelementptr inbounds i8, ptr %87, i64 24
  %785 = getelementptr inbounds i8, ptr %90, i64 8
  %786 = getelementptr inbounds i8, ptr %90, i64 16
  %787 = getelementptr inbounds i8, ptr %90, i64 24
  br label %._crit_edge7

._crit_edge7:                                     ; preds = %._crit_edge7, %._crit_edge7.lr.ph
  %.fca.0.extract8051224 = phi ptr [ %.fca.0.extract8051222, %._crit_edge7.lr.ph ], [ %.fca.0.extract805, %._crit_edge7 ]
  %788 = phi { ptr, i160 } [ %781, %._crit_edge7.lr.ph ], [ %815, %._crit_edge7 ]
  %.fca.1.extract807 = extractvalue { ptr, i160 } %788, 1
  %.sroa.9816.8.extract.shift = lshr i160 %.fca.1.extract807, 128
  %.sroa.9816.8.extract.trunc = trunc nuw i160 %.sroa.9816.8.extract.shift to i32
  %.sroa.7815.8.extract.shift = lshr i160 %.fca.1.extract807, 64
  %.sroa.7815.8.extract.trunc = trunc i160 %.sroa.7815.8.extract.shift to i64
  %.sroa.4814.8.extract.trunc = trunc i160 %.fca.1.extract807 to i64
  store ptr %.fca.0.extract8051224, ptr %87, align 8
  store i64 %.sroa.4814.8.extract.trunc, ptr %784, align 8
  store i64 %.sroa.7815.8.extract.trunc, ptr %.sroa_idx810, align 8
  store i32 %.sroa.9816.8.extract.trunc, ptr %.sroa_idx811, align 8
  call void @set_offset(ptr nonnull %87, ptr nonnull @ListNode)
  %789 = load ptr, ptr %87, align 8
  %790 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %789, 0
  %791 = load ptr, ptr %784, align 8
  %792 = insertvalue { ptr, ptr, ptr, i32 } %790, ptr %791, 1
  %793 = load ptr, ptr %.sroa_idx810, align 8
  %794 = insertvalue { ptr, ptr, ptr, i32 } %792, ptr %793, 2
  %795 = load i32, ptr %.sroa_idx811, align 8
  %796 = insertvalue { ptr, ptr, ptr, i32 } %794, i32 %795, 3
  %797 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %798 = call ptr @llvm.invariant.start.p0(i64 96, ptr %789)
  %799 = sext i32 %795 to i64
  %800 = getelementptr ptr, ptr %789, i64 %799
  %801 = getelementptr i8, ptr %800, i64 40
  %802 = load ptr, ptr %801, align 8
  %803 = call ptr @behavior_wrapper(ptr %802, { ptr, ptr, ptr, i32 } %796, ptr nonnull %1)
  %804 = call i32 %803({ ptr, ptr, ptr, i32 } %796, { ptr, ptr, ptr, i32 } %796, ptr nonnull %1) #25
  %.sroa.0801.0.insert.ext = zext i32 %804 to i160
  %805 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0801.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %88, align 8
  %806 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %88)
  %807 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %89, align 8
  %808 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %89)
  call void %808(ptr nonnull %88, { ptr, i160 } %805) #25
  %809 = load ptr, ptr %87, align 8
  store ptr %809, ptr %90, align 8
  %810 = load ptr, ptr %784, align 8
  store ptr %810, ptr %785, align 8
  %811 = load ptr, ptr %.sroa_idx810, align 8
  store ptr %811, ptr %786, align 8
  %812 = load i32, ptr %.sroa_idx811, align 8
  store i32 %812, ptr %787, align 8
  call void @set_offset(ptr nonnull %90, ptr nonnull @ListNode)
  %813 = load ptr, ptr %778, align 8
  %814 = call ptr @behavior_wrapper(ptr %813, { ptr, ptr, ptr, i32 } %773, ptr nonnull %1)
  %815 = call { ptr, i160 } %814({ ptr, ptr, ptr, i32 } %773, { ptr, ptr, ptr, i32 } %773, ptr nonnull %1) #25
  %.fca.0.extract805 = extractvalue { ptr, i160 } %815, 0
  %816 = icmp ne ptr %.fca.0.extract805, @nil_typ
  %817 = icmp ne ptr %.fca.0.extract805, null
  %.not1165 = and i1 %816, %817
  br i1 %.not1165, label %._crit_edge7, label %.critedge

.critedge:                                        ; preds = %._crit_edge7, %733
  %818 = call ptr @coroutine_create(ptr nonnull @print88, ptr nonnull @coroutine_omagvxnzsy_passer)
  call void @coroutine_call(ptr %818)
  store ptr @_parameterization_i32, ptr %91, align 8
  %819 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %91)
  %820 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %92, align 8
  %821 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %92)
  call void %821(ptr nonnull %91, { ptr, i160 } { ptr @i32_typ, i160 89 }) #25
  call void @coroutine_call(ptr %818)
  store ptr @Range, ptr %93, align 8
  %822 = call { i64, i64 } @size_wrapper(ptr %640, ptr nonnull %93)
  %823 = extractvalue { i64, i64 } %822, 0
  %824 = call ptr @bump_malloc(i64 %823)
  %825 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %824, 1
  %826 = insertvalue { ptr, ptr, ptr, i32 } %825, ptr undef, 2
  %827 = insertvalue { ptr, ptr, ptr, i32 } %826, i32 10, 3
  store ptr @_parameterization_i32, ptr %94, align 8
  %828 = getelementptr inbounds i8, ptr %94, i64 8
  store ptr @_parameterization_i32, ptr %828, align 8
  %829 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %94)
  %830 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %95, align 8
  %831 = getelementptr inbounds i8, ptr %95, i64 8
  store ptr @i32_typ, ptr %831, align 8
  %832 = call ptr @behavior_wrapper(ptr %650, { ptr, ptr, ptr, i32 } %827, ptr nonnull %95)
  call void %832({ ptr, ptr, ptr, i32 } %827, { ptr, ptr, ptr, i32 } %827, ptr nonnull %94, i32 1, i32 10) #25
  %833 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %834 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %835 = call ptr @behavior_wrapper(ptr %655, { ptr, ptr, ptr, i32 } %827, ptr nonnull %1)
  %836 = call { ptr, ptr, ptr, i32 } %835({ ptr, ptr, ptr, i32 } %827, { ptr, ptr, ptr, i32 } %827, ptr nonnull %1) #25
  %.fca.0.extract760 = extractvalue { ptr, ptr, ptr, i32 } %836, 0
  %.fca.1.extract762 = extractvalue { ptr, ptr, ptr, i32 } %836, 1
  %.fca.2.extract764 = extractvalue { ptr, ptr, ptr, i32 } %836, 2
  %.fca.3.extract765 = extractvalue { ptr, ptr, ptr, i32 } %836, 3
  store ptr %.fca.0.extract760, ptr %96, align 8
  %837 = getelementptr inbounds i8, ptr %96, i64 8
  store ptr %.fca.1.extract762, ptr %837, align 8
  %838 = getelementptr inbounds i8, ptr %96, i64 16
  store ptr %.fca.2.extract764, ptr %838, align 8
  %839 = getelementptr inbounds i8, ptr %96, i64 24
  store i32 %.fca.3.extract765, ptr %839, align 8
  call void @set_offset(ptr nonnull %96, ptr nonnull @RangeIterator)
  %840 = load ptr, ptr %96, align 8
  store ptr %840, ptr %97, align 8
  %841 = getelementptr inbounds i8, ptr %97, i64 8
  %842 = load ptr, ptr %837, align 8
  store ptr %842, ptr %841, align 8
  %843 = getelementptr inbounds i8, ptr %97, i64 16
  %844 = load ptr, ptr %838, align 8
  store ptr %844, ptr %843, align 8
  %845 = getelementptr inbounds i8, ptr %97, i64 24
  %846 = load i32, ptr %839, align 8
  store i32 %846, ptr %845, align 8
  call void @set_offset(ptr nonnull %97, ptr nonnull @RangeIterator)
  %847 = load ptr, ptr %97, align 8
  %848 = load ptr, ptr %841, align 8
  %849 = load ptr, ptr %843, align 8
  %850 = load i32, ptr %845, align 8
  %851 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %847, 0
  %852 = insertvalue { ptr, ptr, ptr, i32 } %851, ptr %848, 1
  %853 = insertvalue { ptr, ptr, ptr, i32 } %852, ptr %849, 2
  %854 = insertvalue { ptr, ptr, ptr, i32 } %853, i32 %850, 3
  %855 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %856 = call ptr @llvm.invariant.start.p0(i64 88, ptr %847)
  %857 = sext i32 %850 to i64
  %858 = getelementptr ptr, ptr %847, i64 %857
  %859 = getelementptr i8, ptr %858, i64 40
  %860 = load ptr, ptr %859, align 8
  %861 = call ptr @behavior_wrapper(ptr %860, { ptr, ptr, ptr, i32 } %854, ptr nonnull %1)
  %862 = call { ptr, i160 } %861({ ptr, ptr, ptr, i32 } %854, { ptr, ptr, ptr, i32 } %854, ptr nonnull %1) #25
  %.fca.0.extract7521225 = extractvalue { ptr, i160 } %862, 0
  %.fca.1.extract7541226 = extractvalue { ptr, i160 } %862, 1
  %.sroa.11195.8.extract.trunc1227 = trunc i160 %.fca.1.extract7541226 to i32
  %863 = icmp ne ptr %.fca.0.extract7521225, @nil_typ
  %864 = icmp ne ptr %.fca.0.extract7521225, null
  %.not11671228 = and i1 %863, %864
  %865 = icmp ne i32 %.sroa.11195.8.extract.trunc1227, 5
  %or.cond1229 = select i1 %.not11671228, i1 %865, i1 false
  br i1 %or.cond1229, label %._crit_edge9, label %.critedge1177

._crit_edge9:                                     ; preds = %._crit_edge9, %.critedge
  %.fca.1.extract7541230 = phi i160 [ %.fca.1.extract754, %._crit_edge9 ], [ %.fca.1.extract7541226, %.critedge ]
  %.sroa.0738.0.insert.ext = and i160 %.fca.1.extract7541230, 4294967295
  %866 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0738.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %98, align 8
  %867 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %98)
  %868 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %99, align 8
  %869 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %99)
  call void %869(ptr nonnull %98, { ptr, i160 } %866) #25
  %870 = load ptr, ptr %859, align 8
  %871 = call ptr @behavior_wrapper(ptr %870, { ptr, ptr, ptr, i32 } %854, ptr nonnull %1)
  %872 = call { ptr, i160 } %871({ ptr, ptr, ptr, i32 } %854, { ptr, ptr, ptr, i32 } %854, ptr nonnull %1) #25
  %.fca.0.extract752 = extractvalue { ptr, i160 } %872, 0
  %.fca.1.extract754 = extractvalue { ptr, i160 } %872, 1
  %.sroa.11195.8.extract.trunc = trunc i160 %.fca.1.extract754 to i32
  %873 = icmp ne ptr %.fca.0.extract752, @nil_typ
  %874 = icmp ne ptr %.fca.0.extract752, null
  %.not1167 = and i1 %873, %874
  %875 = icmp ne i32 %.sroa.11195.8.extract.trunc, 5
  %or.cond = select i1 %.not1167, i1 %875, i1 false
  br i1 %or.cond, label %._crit_edge9, label %.critedge1177

.critedge1177:                                    ; preds = %._crit_edge9, %.critedge
  %876 = call ptr @bump_malloc(i64 20)
  store i32 1, ptr %876, align 4
  %877 = getelementptr i8, ptr %876, i64 4
  store i32 2, ptr %877, align 4
  %878 = getelementptr i8, ptr %876, i64 8
  store i32 3, ptr %878, align 4
  %879 = getelementptr i8, ptr %876, i64 12
  store i32 4, ptr %879, align 4
  store ptr @Array, ptr %100, align 8
  %880 = getelementptr inbounds i8, ptr %100, i64 8
  store ptr @_parameterization_i32, ptr %880, align 8
  %881 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 48), align 8
  %882 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %100)
  %883 = extractvalue { i64, i64 } %882, 0
  %884 = call ptr @bump_malloc(i64 %883)
  store ptr @_parameterization_i32, ptr %884, align 8
  %885 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %884)
  %886 = insertvalue { ptr } undef, ptr %876, 0
  %887 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %884, 1
  %888 = insertvalue { ptr, ptr, ptr, i32 } %887, ptr undef, 2
  %889 = insertvalue { ptr, ptr, ptr, i32 } %888, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %101, align 8
  %890 = getelementptr inbounds i8, ptr %101, i64 8
  store ptr @_parameterization_i32, ptr %890, align 8
  %891 = getelementptr inbounds i8, ptr %101, i64 16
  store ptr @_parameterization_i32, ptr %891, align 8
  %892 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %101)
  %893 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %894 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 144), align 8
  store ptr @buffer_typ, ptr %102, align 8
  %895 = getelementptr inbounds i8, ptr %102, i64 8
  store ptr @i32_typ, ptr %895, align 8
  %896 = getelementptr inbounds i8, ptr %102, i64 16
  store ptr @i32_typ, ptr %896, align 8
  %897 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %889, ptr nonnull %102)
  call void %897({ ptr, ptr, ptr, i32 } %889, { ptr, ptr, ptr, i32 } %889, ptr nonnull %101, { ptr } %886, i32 4, i32 5) #25
  store ptr @Array, ptr %103, align 8
  %898 = getelementptr inbounds i8, ptr %103, i64 8
  store ptr %884, ptr %898, align 8
  %899 = getelementptr inbounds i8, ptr %103, i64 16
  %900 = getelementptr inbounds i8, ptr %103, i64 24
  store i32 10, ptr %900, align 8
  call void @set_offset(ptr nonnull %103, ptr nonnull @Array)
  %901 = load ptr, ptr %103, align 8
  %902 = load ptr, ptr %898, align 8
  %903 = load ptr, ptr %899, align 8
  %904 = load i32, ptr %900, align 8
  %905 = call ptr @bump_malloc(i64 28)
  store i32 5, ptr %905, align 4
  %906 = getelementptr i8, ptr %905, i64 4
  store i32 6, ptr %906, align 4
  %907 = getelementptr i8, ptr %905, i64 8
  store i32 7, ptr %907, align 4
  %908 = getelementptr i8, ptr %905, i64 12
  store i32 8, ptr %908, align 4
  %909 = getelementptr i8, ptr %905, i64 16
  store i32 9, ptr %909, align 4
  %910 = getelementptr i8, ptr %905, i64 20
  store i32 10, ptr %910, align 4
  store ptr @Array, ptr %104, align 8
  %911 = getelementptr inbounds i8, ptr %104, i64 8
  store ptr @_parameterization_i32, ptr %911, align 8
  %912 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %104)
  %913 = extractvalue { i64, i64 } %912, 0
  %914 = call ptr @bump_malloc(i64 %913)
  store ptr @_parameterization_i32, ptr %914, align 8
  %915 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %914)
  %916 = insertvalue { ptr } undef, ptr %905, 0
  %917 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %914, 1
  %918 = insertvalue { ptr, ptr, ptr, i32 } %917, ptr undef, 2
  %919 = insertvalue { ptr, ptr, ptr, i32 } %918, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %105, align 8
  %920 = getelementptr inbounds i8, ptr %105, i64 8
  store ptr @_parameterization_i32, ptr %920, align 8
  %921 = getelementptr inbounds i8, ptr %105, i64 16
  store ptr @_parameterization_i32, ptr %921, align 8
  %922 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %105)
  %923 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %106, align 8
  %924 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr @i32_typ, ptr %924, align 8
  %925 = getelementptr inbounds i8, ptr %106, i64 16
  store ptr @i32_typ, ptr %925, align 8
  %926 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %919, ptr nonnull %106)
  call void %926({ ptr, ptr, ptr, i32 } %919, { ptr, ptr, ptr, i32 } %919, ptr nonnull %105, { ptr } %916, i32 6, i32 7) #25
  store ptr @Array, ptr %107, align 8
  %927 = getelementptr inbounds i8, ptr %107, i64 8
  store ptr %914, ptr %927, align 8
  %928 = getelementptr inbounds i8, ptr %107, i64 16
  %929 = getelementptr inbounds i8, ptr %107, i64 24
  store i32 10, ptr %929, align 8
  call void @set_offset(ptr nonnull %107, ptr nonnull @Array)
  %930 = load ptr, ptr %107, align 8
  %931 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %930, 0
  %932 = load ptr, ptr %927, align 8
  %933 = insertvalue { ptr, ptr, ptr, i32 } %931, ptr %932, 1
  %934 = load ptr, ptr %928, align 8
  %935 = insertvalue { ptr, ptr, ptr, i32 } %933, ptr %934, 2
  %936 = load i32, ptr %929, align 8
  %937 = insertvalue { ptr, ptr, ptr, i32 } %935, i32 %936, 3
  %938 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %901, 0
  %939 = insertvalue { ptr, ptr, ptr, i32 } %938, ptr %902, 1
  %940 = insertvalue { ptr, ptr, ptr, i32 } %939, ptr %903, 2
  %941 = insertvalue { ptr, ptr, ptr, i32 } %940, i32 %904, 3
  store ptr @_parameterization_Arrayi32, ptr %108, align 8
  %942 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %108)
  %943 = call ptr @llvm.invariant.start.p0(i64 664, ptr %901)
  %944 = sext i32 %904 to i64
  %945 = getelementptr ptr, ptr %901, i64 %944
  %946 = getelementptr i8, ptr %945, i64 96
  %947 = load ptr, ptr %946, align 8
  store ptr %930, ptr %109, align 8
  %948 = call ptr @behavior_wrapper(ptr %947, { ptr, ptr, ptr, i32 } %941, ptr nonnull %109)
  %949 = call { ptr, ptr, ptr, i32 } %948({ ptr, ptr, ptr, i32 } %941, { ptr, ptr, ptr, i32 } %941, ptr nonnull %108, { ptr, ptr, ptr, i32 } %937) #25
  %.fca.0.extract658 = extractvalue { ptr, ptr, ptr, i32 } %949, 0
  %.fca.1.extract660 = extractvalue { ptr, ptr, ptr, i32 } %949, 1
  %.fca.2.extract662 = extractvalue { ptr, ptr, ptr, i32 } %949, 2
  %.fca.3.extract663 = extractvalue { ptr, ptr, ptr, i32 } %949, 3
  store ptr %.fca.0.extract658, ptr %110, align 8
  %950 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %.fca.1.extract660, ptr %950, align 8
  %951 = getelementptr inbounds i8, ptr %110, i64 16
  store ptr %.fca.2.extract662, ptr %951, align 8
  %952 = getelementptr inbounds i8, ptr %110, i64 24
  store i32 %.fca.3.extract663, ptr %952, align 8
  call void @set_offset(ptr nonnull %110, ptr nonnull @Array)
  store ptr @_parameterization_i32, ptr %111, align 8
  %953 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %111)
  %954 = call ptr @llvm.invariant.start.p0(i64 664, ptr %901)
  %955 = getelementptr i8, ptr %945, i64 112
  %956 = load ptr, ptr %955, align 8
  store ptr @i32_typ, ptr %112, align 8
  %957 = call ptr @behavior_wrapper(ptr %956, { ptr, ptr, ptr, i32 } %941, ptr nonnull %112)
  %958 = call { ptr, i160 } %957({ ptr, ptr, ptr, i32 } %941, { ptr, ptr, ptr, i32 } %941, ptr nonnull %111, i32 7) #25
  %.fca.1.extract652 = extractvalue { ptr, i160 } %958, 1
  %.sroa.0647.0.insert.ext = and i160 %.fca.1.extract652, 4294967295
  %959 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0647.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %113, align 8
  %960 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %113)
  %961 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %114, align 8
  %962 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %114)
  call void %962(ptr nonnull %113, { ptr, i160 } %959) #25
  %963 = call ptr @bump_malloc(i64 4)
  store ptr @Array, ptr %115, align 8
  %964 = getelementptr inbounds i8, ptr %115, i64 8
  store ptr @_parameterization_i32, ptr %964, align 8
  %965 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %115)
  %966 = extractvalue { i64, i64 } %965, 0
  %967 = call ptr @bump_malloc(i64 %966)
  store ptr @_parameterization_i32, ptr %967, align 8
  %968 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %967)
  %969 = insertvalue { ptr } undef, ptr %963, 0
  %970 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %967, 1
  %971 = insertvalue { ptr, ptr, ptr, i32 } %970, ptr undef, 2
  %972 = insertvalue { ptr, ptr, ptr, i32 } %971, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %116, align 8
  %973 = getelementptr inbounds i8, ptr %116, i64 8
  store ptr @_parameterization_i32, ptr %973, align 8
  %974 = getelementptr inbounds i8, ptr %116, i64 16
  store ptr @_parameterization_i32, ptr %974, align 8
  %975 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %116)
  %976 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %117, align 8
  %977 = getelementptr inbounds i8, ptr %117, i64 8
  store ptr @i32_typ, ptr %977, align 8
  %978 = getelementptr inbounds i8, ptr %117, i64 16
  store ptr @i32_typ, ptr %978, align 8
  %979 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %972, ptr nonnull %117)
  call void %979({ ptr, ptr, ptr, i32 } %972, { ptr, ptr, ptr, i32 } %972, ptr nonnull %116, { ptr } %969, i32 0, i32 1) #25
  store ptr @Array, ptr %118, align 8
  %980 = getelementptr inbounds i8, ptr %118, i64 8
  store ptr %967, ptr %980, align 8
  %981 = getelementptr inbounds i8, ptr %118, i64 16
  %982 = getelementptr inbounds i8, ptr %118, i64 24
  store i32 10, ptr %982, align 8
  call void @set_offset(ptr nonnull %118, ptr nonnull @Array)
  %983 = load ptr, ptr %118, align 8
  %984 = load ptr, ptr %980, align 8
  %985 = load ptr, ptr %981, align 8
  %986 = load i32, ptr %982, align 8
  %987 = call ptr @bump_malloc(i64 20)
  store i32 8, ptr %987, align 4
  %988 = getelementptr i8, ptr %987, i64 4
  store i32 7, ptr %988, align 4
  %989 = getelementptr i8, ptr %987, i64 8
  store i32 6, ptr %989, align 4
  %990 = getelementptr i8, ptr %987, i64 12
  store i32 5, ptr %990, align 4
  store ptr @Array, ptr %119, align 8
  %991 = getelementptr inbounds i8, ptr %119, i64 8
  store ptr @_parameterization_i32, ptr %991, align 8
  %992 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %119)
  %993 = extractvalue { i64, i64 } %992, 0
  %994 = call ptr @bump_malloc(i64 %993)
  store ptr @_parameterization_i32, ptr %994, align 8
  %995 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %994)
  %996 = insertvalue { ptr } undef, ptr %987, 0
  %997 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %994, 1
  %998 = insertvalue { ptr, ptr, ptr, i32 } %997, ptr undef, 2
  %999 = insertvalue { ptr, ptr, ptr, i32 } %998, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %120, align 8
  %1000 = getelementptr inbounds i8, ptr %120, i64 8
  store ptr @_parameterization_i32, ptr %1000, align 8
  %1001 = getelementptr inbounds i8, ptr %120, i64 16
  store ptr @_parameterization_i32, ptr %1001, align 8
  %1002 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %120)
  %1003 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %121, align 8
  %1004 = getelementptr inbounds i8, ptr %121, i64 8
  store ptr @i32_typ, ptr %1004, align 8
  %1005 = getelementptr inbounds i8, ptr %121, i64 16
  store ptr @i32_typ, ptr %1005, align 8
  %1006 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %999, ptr nonnull %121)
  call void %1006({ ptr, ptr, ptr, i32 } %999, { ptr, ptr, ptr, i32 } %999, ptr nonnull %120, { ptr } %996, i32 4, i32 5) #25
  store ptr @Array, ptr %122, align 8
  %1007 = getelementptr inbounds i8, ptr %122, i64 8
  store ptr %994, ptr %1007, align 8
  %1008 = getelementptr inbounds i8, ptr %122, i64 16
  %1009 = getelementptr inbounds i8, ptr %122, i64 24
  store i32 10, ptr %1009, align 8
  call void @set_offset(ptr nonnull %122, ptr nonnull @Array)
  %1010 = load ptr, ptr %122, align 8
  %1011 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1010, 0
  %1012 = load ptr, ptr %1007, align 8
  %1013 = insertvalue { ptr, ptr, ptr, i32 } %1011, ptr %1012, 1
  %1014 = load ptr, ptr %1008, align 8
  %1015 = insertvalue { ptr, ptr, ptr, i32 } %1013, ptr %1014, 2
  %1016 = load i32, ptr %1009, align 8
  %1017 = insertvalue { ptr, ptr, ptr, i32 } %1015, i32 %1016, 3
  %1018 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %983, 0
  %1019 = insertvalue { ptr, ptr, ptr, i32 } %1018, ptr %984, 1
  %1020 = insertvalue { ptr, ptr, ptr, i32 } %1019, ptr %985, 2
  %1021 = insertvalue { ptr, ptr, ptr, i32 } %1020, i32 %986, 3
  store ptr @_parameterization_Arrayi32, ptr %123, align 8
  %1022 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %123)
  %1023 = call ptr @llvm.invariant.start.p0(i64 664, ptr %983)
  %1024 = sext i32 %986 to i64
  %1025 = getelementptr ptr, ptr %983, i64 %1024
  %1026 = getelementptr i8, ptr %1025, i64 96
  %1027 = load ptr, ptr %1026, align 8
  store ptr %1010, ptr %124, align 8
  %1028 = call ptr @behavior_wrapper(ptr %1027, { ptr, ptr, ptr, i32 } %1021, ptr nonnull %124)
  %1029 = call { ptr, ptr, ptr, i32 } %1028({ ptr, ptr, ptr, i32 } %1021, { ptr, ptr, ptr, i32 } %1021, ptr nonnull %123, { ptr, ptr, ptr, i32 } %1017) #25
  %.fca.0.extract590 = extractvalue { ptr, ptr, ptr, i32 } %1029, 0
  %.fca.1.extract592 = extractvalue { ptr, ptr, ptr, i32 } %1029, 1
  %.fca.2.extract594 = extractvalue { ptr, ptr, ptr, i32 } %1029, 2
  %.fca.3.extract595 = extractvalue { ptr, ptr, ptr, i32 } %1029, 3
  store ptr %.fca.0.extract590, ptr %125, align 8
  %1030 = getelementptr inbounds i8, ptr %125, i64 8
  store ptr %.fca.1.extract592, ptr %1030, align 8
  %1031 = getelementptr inbounds i8, ptr %125, i64 16
  store ptr %.fca.2.extract594, ptr %1031, align 8
  %1032 = getelementptr inbounds i8, ptr %125, i64 24
  store i32 %.fca.3.extract595, ptr %1032, align 8
  call void @set_offset(ptr nonnull %125, ptr nonnull @Array)
  store ptr @_parameterization_i32, ptr %126, align 8
  %1033 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %126)
  %1034 = call ptr @llvm.invariant.start.p0(i64 664, ptr %983)
  %1035 = getelementptr i8, ptr %1025, i64 112
  %1036 = load ptr, ptr %1035, align 8
  store ptr @i32_typ, ptr %127, align 8
  %1037 = call ptr @behavior_wrapper(ptr %1036, { ptr, ptr, ptr, i32 } %1021, ptr nonnull %127)
  %1038 = call { ptr, i160 } %1037({ ptr, ptr, ptr, i32 } %1021, { ptr, ptr, ptr, i32 } %1021, ptr nonnull %126, i32 3) #25
  %.fca.1.extract584 = extractvalue { ptr, i160 } %1038, 1
  %.sroa.0579.0.insert.ext = and i160 %.fca.1.extract584, 4294967295
  %1039 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0579.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %128, align 8
  %1040 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %128)
  %1041 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %129, align 8
  %1042 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %129)
  call void %1042(ptr nonnull %128, { ptr, i160 } %1039) #25
  call void @grabo()
  %1043 = getelementptr i8, ptr %901, i64 8
  %1044 = getelementptr i8, ptr %901, i64 16
  %1045 = getelementptr i8, ptr %901, i64 24
  %1046 = getelementptr i8, ptr %901, i64 32
  %1047 = load i64, ptr %1043, align 4
  %1048 = load i64, ptr %1044, align 4
  %1049 = load ptr, ptr %1045, align 8
  %1050 = load ptr, ptr %1046, align 8
  %1051 = load i64, ptr @Array, align 8
  %1052 = call i1 @subtype_test_wrapper(ptr %1049, i64 %1048, i64 %1047, i64 %1051, i64 ptrtoint (ptr @Array to i64), ptr %1050)
  br i1 %1052, label %._crit_edge10, label %._crit_edge11

._crit_edge10:                                    ; preds = %.critedge1177
  store ptr @_parameterization_i32, ptr %130, align 8
  %1053 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %130)
  %1054 = call ptr @llvm.invariant.start.p0(i64 664, ptr %901)
  %1055 = load ptr, ptr %955, align 8
  store ptr @i32_typ, ptr %131, align 8
  %1056 = call ptr @behavior_wrapper(ptr %1055, { ptr, ptr, ptr, i32 } %941, ptr nonnull %131)
  %1057 = call { ptr, i160 } %1056({ ptr, ptr, ptr, i32 } %941, { ptr, ptr, ptr, i32 } %941, ptr nonnull %130, i32 0) #25
  %.fca.1.extract570 = extractvalue { ptr, i160 } %1057, 1
  %.sroa.1573.8.extract.trunc = trunc i160 %.fca.1.extract570 to i32
  %1058 = icmp eq i32 %.sroa.1573.8.extract.trunc, 5
  br i1 %1058, label %1059, label %._crit_edge11

1059:                                             ; preds = %._crit_edge10
  %1060 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 115, i8 111, i8 32, i8 105, i8 116, i8 32, i8 105, i8 115, i8 32, i8 116, i8 114, i8 117, i8 101, i8 33>, ptr %1060, align 16
  store ptr @String, ptr %132, align 8
  %1061 = call { i64, i64 } @size_wrapper(ptr %305, ptr nonnull %132)
  %1062 = extractvalue { i64, i64 } %1061, 0
  %1063 = call ptr @bump_malloc(i64 %1062)
  %1064 = insertvalue { ptr } undef, ptr %1060, 0
  %1065 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1063, 1
  %1066 = insertvalue { ptr, ptr, ptr, i32 } %1065, ptr undef, 2
  %1067 = insertvalue { ptr, ptr, ptr, i32 } %1066, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %133, align 8
  %1068 = getelementptr inbounds i8, ptr %133, i64 8
  store ptr @_parameterization_i32, ptr %1068, align 8
  %1069 = getelementptr inbounds i8, ptr %133, i64 16
  store ptr @_parameterization_i32, ptr %1069, align 8
  %1070 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %133)
  %1071 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %134, align 8
  %1072 = getelementptr inbounds i8, ptr %134, i64 8
  store ptr @i32_typ, ptr %1072, align 8
  %1073 = getelementptr inbounds i8, ptr %134, i64 16
  store ptr @i32_typ, ptr %1073, align 8
  %1074 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %1067, ptr nonnull %134)
  call void %1074({ ptr, ptr, ptr, i32 } %1067, { ptr, ptr, ptr, i32 } %1067, ptr nonnull %133, { ptr } %1064, i32 14, i32 15) #25
  %1075 = ptrtoint ptr %1063 to i64
  %.sroa.3.8.insert.ext = zext i64 %1075 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %1076 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %135, align 8
  %1077 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %135)
  %1078 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %136, align 8
  %1079 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %136)
  call void %1079(ptr nonnull %135, { ptr, i160 } %1076) #25
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %1059, %._crit_edge10, %.critedge1177
  %1080 = call i64 @clock()
  %.sroa.0549.0.insert.ext = zext i64 %1080 to i160
  %1081 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %.sroa.0549.0.insert.ext, 1
  store ptr @_parameterization_i64, ptr %137, align 8
  %1082 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %137)
  %1083 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i64_typ, ptr %138, align 8
  %1084 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %138)
  call void %1084(ptr nonnull %137, { ptr, i160 } %1081) #25
  store ptr @_parameterization_i64, ptr %139, align 8
  %1085 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %139)
  %1086 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i64_typ, ptr %140, align 8
  %1087 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %140)
  call void %1087(ptr nonnull %139, { ptr, i160 } { ptr @i64_typ, i160 5 }) #25
  store ptr @_parameterization_f64, ptr %141, align 8
  %1088 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %141)
  %1089 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @f64_typ, ptr %142, align 8
  %1090 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %142)
  call void %1090(ptr nonnull %141, { ptr, i160 } { ptr @f64_typ, i160 4617315517961601024 }) #25
  store ptr @Range, ptr %143, align 8
  %1091 = call { i64, i64 } @size_wrapper(ptr %640, ptr nonnull %143)
  %1092 = extractvalue { i64, i64 } %1091, 0
  %1093 = call ptr @bump_malloc(i64 %1092)
  %1094 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %1093, 1
  %1095 = insertvalue { ptr, ptr, ptr, i32 } %1094, ptr undef, 2
  %1096 = insertvalue { ptr, ptr, ptr, i32 } %1095, i32 10, 3
  store ptr @_parameterization_i32, ptr %144, align 8
  %1097 = getelementptr inbounds i8, ptr %144, i64 8
  store ptr @_parameterization_i32, ptr %1097, align 8
  %1098 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %144)
  %1099 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %145, align 8
  %1100 = getelementptr inbounds i8, ptr %145, i64 8
  store ptr @i32_typ, ptr %1100, align 8
  %1101 = call ptr @behavior_wrapper(ptr %650, { ptr, ptr, ptr, i32 } %1096, ptr nonnull %145)
  call void %1101({ ptr, ptr, ptr, i32 } %1096, { ptr, ptr, ptr, i32 } %1096, ptr nonnull %144, i32 11, i32 14) #25
  %1102 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1103 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %1104 = call ptr @behavior_wrapper(ptr %655, { ptr, ptr, ptr, i32 } %1096, ptr nonnull %1)
  %1105 = call { ptr, ptr, ptr, i32 } %1104({ ptr, ptr, ptr, i32 } %1096, { ptr, ptr, ptr, i32 } %1096, ptr nonnull %1) #25
  %.fca.0.extract519 = extractvalue { ptr, ptr, ptr, i32 } %1105, 0
  %.fca.1.extract521 = extractvalue { ptr, ptr, ptr, i32 } %1105, 1
  %.fca.2.extract523 = extractvalue { ptr, ptr, ptr, i32 } %1105, 2
  %.fca.3.extract524 = extractvalue { ptr, ptr, ptr, i32 } %1105, 3
  store ptr %.fca.0.extract519, ptr %146, align 8
  %1106 = getelementptr inbounds i8, ptr %146, i64 8
  store ptr %.fca.1.extract521, ptr %1106, align 8
  %1107 = getelementptr inbounds i8, ptr %146, i64 16
  store ptr %.fca.2.extract523, ptr %1107, align 8
  %1108 = getelementptr inbounds i8, ptr %146, i64 24
  store i32 %.fca.3.extract524, ptr %1108, align 8
  call void @set_offset(ptr nonnull %146, ptr nonnull @RangeIterator)
  %1109 = load ptr, ptr %146, align 8
  store ptr %1109, ptr %147, align 8
  %1110 = getelementptr inbounds i8, ptr %147, i64 8
  %1111 = load ptr, ptr %1106, align 8
  store ptr %1111, ptr %1110, align 8
  %1112 = getelementptr inbounds i8, ptr %147, i64 16
  %1113 = load ptr, ptr %1107, align 8
  store ptr %1113, ptr %1112, align 8
  %1114 = getelementptr inbounds i8, ptr %147, i64 24
  %1115 = load i32, ptr %1108, align 8
  store i32 %1115, ptr %1114, align 8
  call void @set_offset(ptr nonnull %147, ptr nonnull @RangeIterator)
  %1116 = load ptr, ptr %147, align 8
  %1117 = load ptr, ptr %1110, align 8
  %1118 = load ptr, ptr %1112, align 8
  %1119 = load i32, ptr %1114, align 8
  %1120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1116, 0
  %1121 = insertvalue { ptr, ptr, ptr, i32 } %1120, ptr %1117, 1
  %1122 = insertvalue { ptr, ptr, ptr, i32 } %1121, ptr %1118, 2
  %1123 = insertvalue { ptr, ptr, ptr, i32 } %1122, i32 %1119, 3
  %1124 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1125 = call ptr @llvm.invariant.start.p0(i64 88, ptr %1116)
  %1126 = sext i32 %1119 to i64
  %1127 = getelementptr ptr, ptr %1116, i64 %1126
  %1128 = getelementptr i8, ptr %1127, i64 40
  %1129 = load ptr, ptr %1128, align 8
  %1130 = call ptr @behavior_wrapper(ptr %1129, { ptr, ptr, ptr, i32 } %1123, ptr nonnull %1)
  %1131 = call { ptr, i160 } %1130({ ptr, ptr, ptr, i32 } %1123, { ptr, ptr, ptr, i32 } %1123, ptr nonnull %1) #25
  %.fca.0.extract5111231 = extractvalue { ptr, i160 } %1131, 0
  %1132 = icmp ne ptr %.fca.0.extract5111231, @nil_typ
  %1133 = icmp ne ptr %.fca.0.extract5111231, null
  %.not11691232 = and i1 %1132, %1133
  br i1 %.not11691232, label %._crit_edge12, label %.critedge1180

._crit_edge12:                                    ; preds = %._crit_edge12, %._crit_edge11
  %1134 = phi { ptr, i160 } [ %1141, %._crit_edge12 ], [ %1131, %._crit_edge11 ]
  %.fca.1.extract513 = extractvalue { ptr, i160 } %1134, 1
  %.sroa.0500.0.insert.ext = and i160 %.fca.1.extract513, 4294967295
  %1135 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0500.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %148, align 8
  %1136 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %148)
  %1137 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %149, align 8
  %1138 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %149)
  call void %1138(ptr nonnull %148, { ptr, i160 } %1135) #25
  %1139 = load ptr, ptr %1128, align 8
  %1140 = call ptr @behavior_wrapper(ptr %1139, { ptr, ptr, ptr, i32 } %1123, ptr nonnull %1)
  %1141 = call { ptr, i160 } %1140({ ptr, ptr, ptr, i32 } %1123, { ptr, ptr, ptr, i32 } %1123, ptr nonnull %1) #25
  %.fca.0.extract511 = extractvalue { ptr, i160 } %1141, 0
  %1142 = icmp ne ptr %.fca.0.extract511, @nil_typ
  %1143 = icmp ne ptr %.fca.0.extract511, null
  %.not1169 = and i1 %1142, %1143
  br i1 %.not1169, label %._crit_edge12, label %.critedge1180

.critedge1180:                                    ; preds = %._crit_edge12, %._crit_edge11
  %1144 = call ptr @bump_malloc(i64 16)
  store i32 44, ptr %1144, align 4
  %1145 = getelementptr i8, ptr %1144, i64 4
  store i32 55, ptr %1145, align 4
  %1146 = getelementptr i8, ptr %1144, i64 8
  store i32 66, ptr %1146, align 4
  store ptr @Array, ptr %150, align 8
  %1147 = getelementptr inbounds i8, ptr %150, i64 8
  store ptr @_parameterization_i32, ptr %1147, align 8
  %1148 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %150)
  %1149 = extractvalue { i64, i64 } %1148, 0
  %1150 = call ptr @bump_malloc(i64 %1149)
  store ptr @_parameterization_i32, ptr %1150, align 8
  %1151 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1150)
  %1152 = insertvalue { ptr } undef, ptr %1144, 0
  %1153 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1150, 1
  %1154 = insertvalue { ptr, ptr, ptr, i32 } %1153, ptr undef, 2
  %1155 = insertvalue { ptr, ptr, ptr, i32 } %1154, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %151, align 8
  %1156 = getelementptr inbounds i8, ptr %151, i64 8
  store ptr @_parameterization_i32, ptr %1156, align 8
  %1157 = getelementptr inbounds i8, ptr %151, i64 16
  store ptr @_parameterization_i32, ptr %1157, align 8
  %1158 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %151)
  %1159 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %152, align 8
  %1160 = getelementptr inbounds i8, ptr %152, i64 8
  store ptr @i32_typ, ptr %1160, align 8
  %1161 = getelementptr inbounds i8, ptr %152, i64 16
  store ptr @i32_typ, ptr %1161, align 8
  %1162 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %1155, ptr nonnull %152)
  call void %1162({ ptr, ptr, ptr, i32 } %1155, { ptr, ptr, ptr, i32 } %1155, ptr nonnull %151, { ptr } %1152, i32 3, i32 4) #25
  %1163 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1164 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %1165 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 232), align 8
  %1166 = call ptr @behavior_wrapper(ptr %1165, { ptr, ptr, ptr, i32 } %1155, ptr nonnull %1)
  %1167 = call { ptr, ptr, ptr, i32 } %1166({ ptr, ptr, ptr, i32 } %1155, { ptr, ptr, ptr, i32 } %1155, ptr nonnull %1) #25
  %.fca.0.extract467 = extractvalue { ptr, ptr, ptr, i32 } %1167, 0
  %.fca.1.extract469 = extractvalue { ptr, ptr, ptr, i32 } %1167, 1
  %.fca.2.extract471 = extractvalue { ptr, ptr, ptr, i32 } %1167, 2
  %.fca.3.extract472 = extractvalue { ptr, ptr, ptr, i32 } %1167, 3
  store ptr %.fca.0.extract467, ptr %153, align 8
  %1168 = getelementptr inbounds i8, ptr %153, i64 8
  store ptr %.fca.1.extract469, ptr %1168, align 8
  %1169 = getelementptr inbounds i8, ptr %153, i64 16
  store ptr %.fca.2.extract471, ptr %1169, align 8
  %1170 = getelementptr inbounds i8, ptr %153, i64 24
  store i32 %.fca.3.extract472, ptr %1170, align 8
  call void @set_offset(ptr nonnull %153, ptr nonnull @ArrayIterator)
  %1171 = load ptr, ptr %153, align 8
  store ptr %1171, ptr %154, align 8
  %1172 = getelementptr inbounds i8, ptr %154, i64 8
  %1173 = load ptr, ptr %1168, align 8
  store ptr %1173, ptr %1172, align 8
  %1174 = getelementptr inbounds i8, ptr %154, i64 16
  %1175 = load ptr, ptr %1169, align 8
  store ptr %1175, ptr %1174, align 8
  %1176 = getelementptr inbounds i8, ptr %154, i64 24
  %1177 = load i32, ptr %1170, align 8
  store i32 %1177, ptr %1176, align 8
  call void @set_offset(ptr nonnull %154, ptr nonnull @ArrayIterator)
  %1178 = load ptr, ptr %154, align 8
  %1179 = load ptr, ptr %1172, align 8
  %1180 = load ptr, ptr %1174, align 8
  %1181 = load i32, ptr %1176, align 8
  %1182 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1178, 0
  %1183 = insertvalue { ptr, ptr, ptr, i32 } %1182, ptr %1179, 1
  %1184 = insertvalue { ptr, ptr, ptr, i32 } %1183, ptr %1180, 2
  %1185 = insertvalue { ptr, ptr, ptr, i32 } %1184, i32 %1181, 3
  %1186 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1187 = call ptr @llvm.invariant.start.p0(i64 80, ptr %1178)
  %1188 = sext i32 %1181 to i64
  %1189 = getelementptr ptr, ptr %1178, i64 %1188
  %1190 = getelementptr i8, ptr %1189, i64 32
  %1191 = load ptr, ptr %1190, align 8
  %1192 = call ptr @behavior_wrapper(ptr %1191, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %1)
  %1193 = call { ptr, i160 } %1192({ ptr, ptr, ptr, i32 } %1185, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %1) #25
  %.fca.0.extract4591233 = extractvalue { ptr, i160 } %1193, 0
  %1194 = icmp ne ptr %.fca.0.extract4591233, @nil_typ
  %1195 = icmp ne ptr %.fca.0.extract4591233, null
  %.not11711234 = and i1 %1194, %1195
  br i1 %.not11711234, label %._crit_edge14, label %.critedge1181

._crit_edge14:                                    ; preds = %._crit_edge14, %.critedge1180
  %1196 = phi { ptr, i160 } [ %1203, %._crit_edge14 ], [ %1193, %.critedge1180 ]
  %.fca.1.extract461 = extractvalue { ptr, i160 } %1196, 1
  %.sroa.0448.0.insert.ext = and i160 %.fca.1.extract461, 4294967295
  %1197 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0448.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %155, align 8
  %1198 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %155)
  %1199 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %156, align 8
  %1200 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %156)
  call void %1200(ptr nonnull %155, { ptr, i160 } %1197) #25
  %1201 = load ptr, ptr %1190, align 8
  %1202 = call ptr @behavior_wrapper(ptr %1201, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %1)
  %1203 = call { ptr, i160 } %1202({ ptr, ptr, ptr, i32 } %1185, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %1) #25
  %.fca.0.extract459 = extractvalue { ptr, i160 } %1203, 0
  %1204 = icmp ne ptr %.fca.0.extract459, @nil_typ
  %1205 = icmp ne ptr %.fca.0.extract459, null
  %.not1171 = and i1 %1204, %1205
  br i1 %.not1171, label %._crit_edge14, label %.critedge1181

.critedge1181:                                    ; preds = %._crit_edge14, %.critedge1180
  store ptr @_parameterization_i8, ptr %157, align 8
  %1206 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %157)
  %1207 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i8_typ, ptr %158, align 8
  %1208 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %158)
  call void %1208(ptr nonnull %157, { ptr, i160 } { ptr @i8_typ, i160 3 }) #25
  %1209 = call ptr @bump_malloc(i64 6)
  store <5 x i8> <i8 98, i8 111, i8 111, i8 109, i8 33>, ptr %1209, align 8
  store ptr @String, ptr %159, align 8
  %1210 = call { i64, i64 } @size_wrapper(ptr %305, ptr nonnull %159)
  %1211 = extractvalue { i64, i64 } %1210, 0
  %1212 = call ptr @bump_malloc(i64 %1211)
  %1213 = insertvalue { ptr } undef, ptr %1209, 0
  %1214 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1212, 1
  %1215 = insertvalue { ptr, ptr, ptr, i32 } %1214, ptr undef, 2
  %1216 = insertvalue { ptr, ptr, ptr, i32 } %1215, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %160, align 8
  %1217 = getelementptr inbounds i8, ptr %160, i64 8
  store ptr @_parameterization_i32, ptr %1217, align 8
  %1218 = getelementptr inbounds i8, ptr %160, i64 16
  store ptr @_parameterization_i32, ptr %1218, align 8
  %1219 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %160)
  %1220 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %161, align 8
  %1221 = getelementptr inbounds i8, ptr %161, i64 8
  store ptr @i32_typ, ptr %1221, align 8
  %1222 = getelementptr inbounds i8, ptr %161, i64 16
  store ptr @i32_typ, ptr %1222, align 8
  %1223 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %1216, ptr nonnull %161)
  call void %1223({ ptr, ptr, ptr, i32 } %1216, { ptr, ptr, ptr, i32 } %1216, ptr nonnull %160, { ptr } %1213, i32 5, i32 6) #25
  %1224 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1225 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %1226 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 216), align 8
  %1227 = call ptr @behavior_wrapper(ptr %1226, { ptr, ptr, ptr, i32 } %1216, ptr nonnull %1)
  %1228 = call { ptr, ptr, ptr, i32 } %1227({ ptr, ptr, ptr, i32 } %1216, { ptr, ptr, ptr, i32 } %1216, ptr nonnull %1) #25
  %.fca.0.extract418 = extractvalue { ptr, ptr, ptr, i32 } %1228, 0
  %.fca.1.extract420 = extractvalue { ptr, ptr, ptr, i32 } %1228, 1
  %.fca.2.extract422 = extractvalue { ptr, ptr, ptr, i32 } %1228, 2
  %.fca.3.extract423 = extractvalue { ptr, ptr, ptr, i32 } %1228, 3
  store ptr %.fca.0.extract418, ptr %162, align 8
  %1229 = getelementptr inbounds i8, ptr %162, i64 8
  store ptr %.fca.1.extract420, ptr %1229, align 8
  %1230 = getelementptr inbounds i8, ptr %162, i64 16
  store ptr %.fca.2.extract422, ptr %1230, align 8
  %1231 = getelementptr inbounds i8, ptr %162, i64 24
  store i32 %.fca.3.extract423, ptr %1231, align 8
  call void @set_offset(ptr nonnull %162, ptr nonnull @StringIterator)
  %1232 = load ptr, ptr %162, align 8
  store ptr %1232, ptr %163, align 8
  %1233 = getelementptr inbounds i8, ptr %163, i64 8
  %1234 = load ptr, ptr %1229, align 8
  store ptr %1234, ptr %1233, align 8
  %1235 = getelementptr inbounds i8, ptr %163, i64 16
  %1236 = load ptr, ptr %1230, align 8
  store ptr %1236, ptr %1235, align 8
  %1237 = getelementptr inbounds i8, ptr %163, i64 24
  %1238 = load i32, ptr %1231, align 8
  store i32 %1238, ptr %1237, align 8
  call void @set_offset(ptr nonnull %163, ptr nonnull @StringIterator)
  %1239 = load ptr, ptr %163, align 8
  %1240 = load ptr, ptr %1233, align 8
  %1241 = load ptr, ptr %1235, align 8
  %1242 = load i32, ptr %1237, align 8
  %1243 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1239, 0
  %1244 = insertvalue { ptr, ptr, ptr, i32 } %1243, ptr %1240, 1
  %1245 = insertvalue { ptr, ptr, ptr, i32 } %1244, ptr %1241, 2
  %1246 = insertvalue { ptr, ptr, ptr, i32 } %1245, i32 %1242, 3
  %1247 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1248 = call ptr @llvm.invariant.start.p0(i64 80, ptr %1239)
  %1249 = sext i32 %1242 to i64
  %1250 = getelementptr ptr, ptr %1239, i64 %1249
  %1251 = getelementptr i8, ptr %1250, i64 32
  %1252 = load ptr, ptr %1251, align 8
  %1253 = call ptr @behavior_wrapper(ptr %1252, { ptr, ptr, ptr, i32 } %1246, ptr nonnull %1)
  %1254 = call { ptr, i160 } %1253({ ptr, ptr, ptr, i32 } %1246, { ptr, ptr, ptr, i32 } %1246, ptr nonnull %1) #25
  %.fca.0.extract4041235 = extractvalue { ptr, i160 } %1254, 0
  %1255 = icmp ne ptr %.fca.0.extract4041235, @nil_typ
  %1256 = icmp ne ptr %.fca.0.extract4041235, null
  %.not11731236 = and i1 %1255, %1256
  br i1 %.not11731236, label %._crit_edge16.lr.ph, label %.critedge1182

._crit_edge16.lr.ph:                              ; preds = %.critedge1181
  %1257 = getelementptr inbounds i8, ptr %164, i64 8
  %.sroa_idx409 = getelementptr inbounds i8, ptr %164, i64 16
  %.sroa_idx410 = getelementptr inbounds i8, ptr %164, i64 24
  %1258 = getelementptr inbounds i8, ptr %167, i64 8
  %1259 = getelementptr inbounds i8, ptr %167, i64 16
  %1260 = getelementptr inbounds i8, ptr %167, i64 24
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16, %._crit_edge16.lr.ph
  %.fca.0.extract4041237 = phi ptr [ %.fca.0.extract4041235, %._crit_edge16.lr.ph ], [ %.fca.0.extract404, %._crit_edge16 ]
  %1261 = phi { ptr, i160 } [ %1254, %._crit_edge16.lr.ph ], [ %1275, %._crit_edge16 ]
  %.fca.1.extract406 = extractvalue { ptr, i160 } %1261, 1
  %.sroa.9.8.extract.shift = lshr i160 %.fca.1.extract406, 128
  %.sroa.9.8.extract.trunc = trunc nuw i160 %.sroa.9.8.extract.shift to i32
  %.sroa.7.8.extract.shift = lshr i160 %.fca.1.extract406, 64
  %.sroa.7.8.extract.trunc = trunc i160 %.sroa.7.8.extract.shift to i64
  %.sroa.4413.8.extract.trunc = trunc i160 %.fca.1.extract406 to i64
  store ptr %.fca.0.extract4041237, ptr %164, align 8
  store i64 %.sroa.4413.8.extract.trunc, ptr %1257, align 8
  store i64 %.sroa.7.8.extract.trunc, ptr %.sroa_idx409, align 8
  store i32 %.sroa.9.8.extract.trunc, ptr %.sroa_idx410, align 8
  call void @set_offset(ptr nonnull %164, ptr nonnull @Character)
  %1262 = load ptr, ptr %164, align 8
  %1263 = insertvalue { ptr, i160 } undef, ptr %1262, 0
  %1264 = load i160, ptr %1257, align 8
  %1265 = insertvalue { ptr, i160 } %1263, i160 %1264, 1
  store ptr @_parameterization_Character, ptr %165, align 8
  %1266 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %165)
  %1267 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %1262, ptr %166, align 8
  %1268 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %166)
  call void %1268(ptr nonnull %165, { ptr, i160 } %1265) #25
  %1269 = load ptr, ptr %164, align 8
  store ptr %1269, ptr %167, align 8
  %1270 = load ptr, ptr %1257, align 8
  store ptr %1270, ptr %1258, align 8
  %1271 = load ptr, ptr %.sroa_idx409, align 8
  store ptr %1271, ptr %1259, align 8
  %1272 = load i32, ptr %.sroa_idx410, align 8
  store i32 %1272, ptr %1260, align 8
  call void @set_offset(ptr nonnull %167, ptr nonnull @Character)
  %1273 = load ptr, ptr %1251, align 8
  %1274 = call ptr @behavior_wrapper(ptr %1273, { ptr, ptr, ptr, i32 } %1246, ptr nonnull %1)
  %1275 = call { ptr, i160 } %1274({ ptr, ptr, ptr, i32 } %1246, { ptr, ptr, ptr, i32 } %1246, ptr nonnull %1) #25
  %.fca.0.extract404 = extractvalue { ptr, i160 } %1275, 0
  %1276 = icmp ne ptr %.fca.0.extract404, @nil_typ
  %1277 = icmp ne ptr %.fca.0.extract404, null
  %.not1173 = and i1 %1276, %1277
  br i1 %.not1173, label %._crit_edge16, label %.critedge1182

.critedge1182:                                    ; preds = %._crit_edge16, %.critedge1181
  %1278 = call ptr @bump_malloc(i64 16)
  store i32 1, ptr %1278, align 4
  %1279 = getelementptr i8, ptr %1278, i64 4
  store i32 2, ptr %1279, align 4
  %1280 = getelementptr i8, ptr %1278, i64 8
  store i32 3, ptr %1280, align 4
  store ptr @Array, ptr %168, align 8
  %1281 = getelementptr inbounds i8, ptr %168, i64 8
  store ptr @_parameterization_i32, ptr %1281, align 8
  %1282 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %168)
  %1283 = extractvalue { i64, i64 } %1282, 0
  %1284 = call ptr @bump_malloc(i64 %1283)
  store ptr @_parameterization_i32, ptr %1284, align 8
  %1285 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1284)
  %1286 = insertvalue { ptr } undef, ptr %1278, 0
  %1287 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1284, 1
  %1288 = insertvalue { ptr, ptr, ptr, i32 } %1287, ptr undef, 2
  %1289 = insertvalue { ptr, ptr, ptr, i32 } %1288, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %169, align 8
  %1290 = getelementptr inbounds i8, ptr %169, i64 8
  store ptr @_parameterization_i32, ptr %1290, align 8
  %1291 = getelementptr inbounds i8, ptr %169, i64 16
  store ptr @_parameterization_i32, ptr %1291, align 8
  %1292 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %169)
  %1293 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %170, align 8
  %1294 = getelementptr inbounds i8, ptr %170, i64 8
  store ptr @i32_typ, ptr %1294, align 8
  %1295 = getelementptr inbounds i8, ptr %170, i64 16
  store ptr @i32_typ, ptr %1295, align 8
  %1296 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %1289, ptr nonnull %170)
  call void %1296({ ptr, ptr, ptr, i32 } %1289, { ptr, ptr, ptr, i32 } %1289, ptr nonnull %169, { ptr } %1286, i32 3, i32 4) #25
  %1297 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1298 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %1299 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 320), align 8
  %1300 = call ptr @behavior_wrapper(ptr %1299, { ptr, ptr, ptr, i32 } %1289, ptr nonnull %1)
  %1301 = call { ptr, ptr, ptr, i32 } %1300({ ptr, ptr, ptr, i32 } %1289, { ptr, ptr, ptr, i32 } %1289, ptr nonnull %1) #25
  %.fca.0.extract371 = extractvalue { ptr, ptr, ptr, i32 } %1301, 0
  %.fca.1.extract373 = extractvalue { ptr, ptr, ptr, i32 } %1301, 1
  %.fca.2.extract375 = extractvalue { ptr, ptr, ptr, i32 } %1301, 2
  %.fca.3.extract376 = extractvalue { ptr, ptr, ptr, i32 } %1301, 3
  store ptr %.fca.0.extract371, ptr %171, align 8
  %1302 = getelementptr inbounds i8, ptr %171, i64 8
  store ptr %.fca.1.extract373, ptr %1302, align 8
  %1303 = getelementptr inbounds i8, ptr %171, i64 16
  store ptr %.fca.2.extract375, ptr %1303, align 8
  %1304 = getelementptr inbounds i8, ptr %171, i64 24
  store i32 %.fca.3.extract376, ptr %1304, align 8
  call void @set_offset(ptr nonnull %171, ptr nonnull @String)
  %1305 = load ptr, ptr %171, align 8
  %1306 = insertvalue { ptr, i160 } undef, ptr %1305, 0
  %1307 = load i160, ptr %1302, align 8
  %1308 = insertvalue { ptr, i160 } %1306, i160 %1307, 1
  store ptr @_parameterization_String, ptr %172, align 8
  %1309 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %172)
  %1310 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %1305, ptr %173, align 8
  %1311 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %173)
  call void %1311(ptr nonnull %172, { ptr, i160 } %1308) #25
  store ptr @Integer2, ptr %174, align 8
  %1312 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer2, ptr nonnull %174)
  %1313 = extractvalue { i64, i64 } %1312, 0
  %1314 = call ptr @bump_malloc(i64 %1313)
  %1315 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer2, ptr undef, ptr undef, i32 undef }, ptr %1314, 1
  %1316 = insertvalue { ptr, ptr, ptr, i32 } %1315, ptr undef, 2
  %1317 = insertvalue { ptr, ptr, ptr, i32 } %1316, i32 10, 3
  store ptr @_parameterization_i32, ptr %175, align 8
  %1318 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %175)
  %1319 = call ptr @llvm.invariant.start.p0(i64 320, ptr nonnull @Integer2)
  store ptr @i32_typ, ptr %176, align 8
  %1320 = call ptr @behavior_wrapper(ptr nonnull @Integer2_B_init_valuei32, { ptr, ptr, ptr, i32 } %1317, ptr nonnull %176)
  call void %1320({ ptr, ptr, ptr, i32 } %1317, { ptr, ptr, ptr, i32 } %1317, ptr nonnull %175, i32 77) #25
  store ptr @Integer2, ptr %177, align 8
  %1321 = getelementptr inbounds i8, ptr %177, i64 8
  store ptr %1314, ptr %1321, align 8
  %1322 = getelementptr inbounds i8, ptr %177, i64 16
  %1323 = getelementptr inbounds i8, ptr %177, i64 24
  store i32 10, ptr %1323, align 8
  call void @set_offset(ptr nonnull %177, ptr nonnull @Integer2)
  %1324 = load ptr, ptr %177, align 8
  %1325 = load ptr, ptr %1321, align 8
  %1326 = load ptr, ptr %1322, align 8
  %1327 = load i32, ptr %1323, align 8
  %1328 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1324, 0
  %1329 = insertvalue { ptr, ptr, ptr, i32 } %1328, ptr %1325, 1
  %1330 = insertvalue { ptr, ptr, ptr, i32 } %1329, ptr %1326, 2
  %1331 = insertvalue { ptr, ptr, ptr, i32 } %1330, i32 %1327, 3
  %1332 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1333 = call ptr @llvm.invariant.start.p0(i64 320, ptr %1324)
  %1334 = sext i32 %1327 to i64
  %1335 = getelementptr ptr, ptr %1324, i64 %1334
  %1336 = getelementptr i8, ptr %1335, i64 56
  %1337 = load ptr, ptr %1336, align 8
  %1338 = call ptr @behavior_wrapper(ptr %1337, { ptr, ptr, ptr, i32 } %1331, ptr nonnull %1)
  call void %1338({ ptr, ptr, ptr, i32 } %1331, { ptr, ptr, ptr, i32 } %1331, ptr nonnull %1) #25
  %1339 = insertvalue { ptr, i160 } undef, ptr %1324, 0
  %1340 = ptrtoint ptr %1325 to i64
  %1341 = ptrtoint ptr %1326 to i64
  %.sroa.11.8.insert.ext = zext i32 %1327 to i160
  %.sroa.11.8.insert.shift = shl nuw i160 %.sroa.11.8.insert.ext, 128
  %.sroa.8.8.insert.ext = zext i64 %1341 to i160
  %.sroa.8.8.insert.shift = shl nuw nsw i160 %.sroa.8.8.insert.ext, 64
  %.sroa.8.8.insert.insert = or disjoint i160 %.sroa.11.8.insert.shift, %.sroa.8.8.insert.shift
  %.sroa.4357.8.insert.ext = zext i64 %1340 to i160
  %.sroa.4357.8.insert.insert = or disjoint i160 %.sroa.8.8.insert.insert, %.sroa.4357.8.insert.ext
  %1342 = insertvalue { ptr, i160 } %1339, i160 %.sroa.4357.8.insert.insert, 1
  store ptr @_parameterization_Integer2, ptr %178, align 8
  %1343 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %178)
  %1344 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %1324, ptr %179, align 8
  %1345 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %179)
  call void %1345(ptr nonnull %178, { ptr, i160 } %1342) #25
  %1346 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1347 = call ptr @llvm.invariant.start.p0(i64 320, ptr %1324)
  %1348 = getelementptr i8, ptr %1335, i64 64
  %1349 = load ptr, ptr %1348, align 8
  %1350 = call ptr @behavior_wrapper(ptr %1349, { ptr, ptr, ptr, i32 } %1331, ptr nonnull %1)
  call void %1350({ ptr, ptr, ptr, i32 } %1331, { ptr, ptr, ptr, i32 } %1331, ptr nonnull %1) #25
  store ptr @Range, ptr %180, align 8
  %1351 = call { i64, i64 } @size_wrapper(ptr %640, ptr nonnull %180)
  %1352 = extractvalue { i64, i64 } %1351, 0
  %1353 = call ptr @bump_malloc(i64 %1352)
  %1354 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %1353, 1
  %1355 = insertvalue { ptr, ptr, ptr, i32 } %1354, ptr undef, 2
  %1356 = insertvalue { ptr, ptr, ptr, i32 } %1355, i32 10, 3
  store ptr @_parameterization_i32, ptr %181, align 8
  %1357 = getelementptr inbounds i8, ptr %181, i64 8
  store ptr @_parameterization_i32, ptr %1357, align 8
  %1358 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %181)
  %1359 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %182, align 8
  %1360 = getelementptr inbounds i8, ptr %182, i64 8
  store ptr @i32_typ, ptr %1360, align 8
  %1361 = call ptr @behavior_wrapper(ptr %650, { ptr, ptr, ptr, i32 } %1356, ptr nonnull %182)
  call void %1361({ ptr, ptr, ptr, i32 } %1356, { ptr, ptr, ptr, i32 } %1356, ptr nonnull %181, i32 0, i32 25) #25
  store ptr @_parameterization_i32, ptr %183, align 8
  %1362 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %183)
  %1363 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %1364 = load ptr, ptr getelementptr inbounds (i8, ptr @Range, i64 128), align 8
  store ptr @i32_typ, ptr %184, align 8
  %1365 = call ptr @behavior_wrapper(ptr %1364, { ptr, ptr, ptr, i32 } %1356, ptr nonnull %184)
  %1366 = call { ptr, ptr, ptr, i32 } %1365({ ptr, ptr, ptr, i32 } %1356, { ptr, ptr, ptr, i32 } %1356, ptr nonnull %183, i32 5) #25
  %.fca.0.extract333 = extractvalue { ptr, ptr, ptr, i32 } %1366, 0
  %.fca.1.extract335 = extractvalue { ptr, ptr, ptr, i32 } %1366, 1
  %.fca.2.extract337 = extractvalue { ptr, ptr, ptr, i32 } %1366, 2
  %.fca.3.extract338 = extractvalue { ptr, ptr, ptr, i32 } %1366, 3
  store ptr %.fca.0.extract333, ptr %185, align 8
  %1367 = getelementptr inbounds i8, ptr %185, i64 8
  store ptr %.fca.1.extract335, ptr %1367, align 8
  %1368 = getelementptr inbounds i8, ptr %185, i64 16
  store ptr %.fca.2.extract337, ptr %1368, align 8
  %1369 = getelementptr inbounds i8, ptr %185, i64 24
  store i32 %.fca.3.extract338, ptr %1369, align 8
  call void @set_offset(ptr nonnull %185, ptr nonnull @Range)
  %1370 = load ptr, ptr %185, align 8
  %1371 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1370, 0
  %1372 = load ptr, ptr %1367, align 8
  %1373 = insertvalue { ptr, ptr, ptr, i32 } %1371, ptr %1372, 1
  %1374 = load ptr, ptr %1368, align 8
  %1375 = insertvalue { ptr, ptr, ptr, i32 } %1373, ptr %1374, 2
  %1376 = load i32, ptr %1369, align 8
  %1377 = insertvalue { ptr, ptr, ptr, i32 } %1375, i32 %1376, 3
  %1378 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1379 = call ptr @llvm.invariant.start.p0(i64 440, ptr %1370)
  %1380 = sext i32 %1376 to i64
  %1381 = getelementptr ptr, ptr %1370, i64 %1380
  %1382 = getelementptr i8, ptr %1381, i64 56
  %1383 = load ptr, ptr %1382, align 8
  %1384 = call ptr @behavior_wrapper(ptr %1383, { ptr, ptr, ptr, i32 } %1377, ptr nonnull %1)
  %1385 = call { ptr, ptr, ptr, i32 } %1384({ ptr, ptr, ptr, i32 } %1377, { ptr, ptr, ptr, i32 } %1377, ptr nonnull %1) #25
  %.fca.0.extract323 = extractvalue { ptr, ptr, ptr, i32 } %1385, 0
  %.fca.1.extract325 = extractvalue { ptr, ptr, ptr, i32 } %1385, 1
  %.fca.2.extract327 = extractvalue { ptr, ptr, ptr, i32 } %1385, 2
  %.fca.3.extract328 = extractvalue { ptr, ptr, ptr, i32 } %1385, 3
  store ptr %.fca.0.extract323, ptr %186, align 8
  %1386 = getelementptr inbounds i8, ptr %186, i64 8
  store ptr %.fca.1.extract325, ptr %1386, align 8
  %1387 = getelementptr inbounds i8, ptr %186, i64 16
  store ptr %.fca.2.extract327, ptr %1387, align 8
  %1388 = getelementptr inbounds i8, ptr %186, i64 24
  store i32 %.fca.3.extract328, ptr %1388, align 8
  call void @set_offset(ptr nonnull %186, ptr nonnull @RangeIterator)
  %1389 = load ptr, ptr %186, align 8
  store ptr %1389, ptr %187, align 8
  %1390 = getelementptr inbounds i8, ptr %187, i64 8
  %1391 = load ptr, ptr %1386, align 8
  store ptr %1391, ptr %1390, align 8
  %1392 = getelementptr inbounds i8, ptr %187, i64 16
  %1393 = load ptr, ptr %1387, align 8
  store ptr %1393, ptr %1392, align 8
  %1394 = getelementptr inbounds i8, ptr %187, i64 24
  %1395 = load i32, ptr %1388, align 8
  store i32 %1395, ptr %1394, align 8
  call void @set_offset(ptr nonnull %187, ptr nonnull @RangeIterator)
  %1396 = load ptr, ptr %187, align 8
  %1397 = load ptr, ptr %1390, align 8
  %1398 = load ptr, ptr %1392, align 8
  %1399 = load i32, ptr %1394, align 8
  %1400 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1396, 0
  %1401 = insertvalue { ptr, ptr, ptr, i32 } %1400, ptr %1397, 1
  %1402 = insertvalue { ptr, ptr, ptr, i32 } %1401, ptr %1398, 2
  %1403 = insertvalue { ptr, ptr, ptr, i32 } %1402, i32 %1399, 3
  %1404 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1405 = call ptr @llvm.invariant.start.p0(i64 88, ptr %1396)
  %1406 = sext i32 %1399 to i64
  %1407 = getelementptr ptr, ptr %1396, i64 %1406
  %1408 = getelementptr i8, ptr %1407, i64 40
  %1409 = load ptr, ptr %1408, align 8
  %1410 = call ptr @behavior_wrapper(ptr %1409, { ptr, ptr, ptr, i32 } %1403, ptr nonnull %1)
  %1411 = call { ptr, i160 } %1410({ ptr, ptr, ptr, i32 } %1403, { ptr, ptr, ptr, i32 } %1403, ptr nonnull %1) #25
  %.fca.0.extract3171238 = extractvalue { ptr, i160 } %1411, 0
  %1412 = icmp ne ptr %.fca.0.extract3171238, @nil_typ
  %1413 = icmp ne ptr %.fca.0.extract3171238, null
  %.not11751239 = and i1 %1412, %1413
  br i1 %.not11751239, label %._crit_edge18, label %.critedge1183

._crit_edge18:                                    ; preds = %._crit_edge18, %.critedge1182
  %1414 = phi { ptr, i160 } [ %1421, %._crit_edge18 ], [ %1411, %.critedge1182 ]
  %.fca.1.extract318 = extractvalue { ptr, i160 } %1414, 1
  %.sroa.0310.0.insert.ext = and i160 %.fca.1.extract318, 4294967295
  %1415 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0310.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %188, align 8
  %1416 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %188)
  %1417 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %189, align 8
  %1418 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %189)
  call void %1418(ptr nonnull %188, { ptr, i160 } %1415) #25
  %1419 = load ptr, ptr %1408, align 8
  %1420 = call ptr @behavior_wrapper(ptr %1419, { ptr, ptr, ptr, i32 } %1403, ptr nonnull %1)
  %1421 = call { ptr, i160 } %1420({ ptr, ptr, ptr, i32 } %1403, { ptr, ptr, ptr, i32 } %1403, ptr nonnull %1) #25
  %.fca.0.extract317 = extractvalue { ptr, i160 } %1421, 0
  %1422 = icmp ne ptr %.fca.0.extract317, @nil_typ
  %1423 = icmp ne ptr %.fca.0.extract317, null
  %.not1175 = and i1 %1422, %1423
  br i1 %.not1175, label %._crit_edge18, label %.critedge1183

.critedge1183:                                    ; preds = %._crit_edge18, %.critedge1182
  %1424 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1424)
  call void @llvm.init.trampoline(ptr %1424, ptr nonnull @dfjfvmeopd, ptr nonnull @_functionliteral_tcdzabihwa)
  %1425 = call ptr @adjust_trampoline(ptr %1424)
  %1426 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1424)
  %1427 = insertvalue { ptr } undef, ptr %1425, 0
  %1428 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1428)
  call void @llvm.init.trampoline(ptr %1428, ptr nonnull @zsgjksqlit, ptr nonnull @_functionliteral_toxagbzjuc)
  %1429 = call ptr @adjust_trampoline(ptr %1428)
  %1430 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1428)
  %1431 = insertvalue { ptr } undef, ptr %1429, 0
  %1432 = call ptr @bump_malloc(i64 20)
  store i32 1, ptr %1432, align 4
  %1433 = getelementptr i8, ptr %1432, i64 4
  store i32 2, ptr %1433, align 4
  %1434 = getelementptr i8, ptr %1432, i64 8
  store i32 3, ptr %1434, align 4
  %1435 = getelementptr i8, ptr %1432, i64 12
  store i32 4, ptr %1435, align 4
  store ptr @Array, ptr %190, align 8
  %1436 = getelementptr inbounds i8, ptr %190, i64 8
  store ptr @_parameterization_i32, ptr %1436, align 8
  %1437 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %190)
  %1438 = extractvalue { i64, i64 } %1437, 0
  %1439 = call ptr @bump_malloc(i64 %1438)
  store ptr @_parameterization_i32, ptr %1439, align 8
  %1440 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1439)
  %1441 = insertvalue { ptr } undef, ptr %1432, 0
  %1442 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1439, 1
  %1443 = insertvalue { ptr, ptr, ptr, i32 } %1442, ptr undef, 2
  %1444 = insertvalue { ptr, ptr, ptr, i32 } %1443, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %191, align 8
  %1445 = getelementptr inbounds i8, ptr %191, i64 8
  store ptr @_parameterization_i32, ptr %1445, align 8
  %1446 = getelementptr inbounds i8, ptr %191, i64 16
  store ptr @_parameterization_i32, ptr %1446, align 8
  %1447 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %191)
  %1448 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %192, align 8
  %1449 = getelementptr inbounds i8, ptr %192, i64 8
  store ptr @i32_typ, ptr %1449, align 8
  %1450 = getelementptr inbounds i8, ptr %192, i64 16
  store ptr @i32_typ, ptr %1450, align 8
  %1451 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %1444, ptr nonnull %192)
  call void %1451({ ptr, ptr, ptr, i32 } %1444, { ptr, ptr, ptr, i32 } %1444, ptr nonnull %191, { ptr } %1441, i32 4, i32 5) #25
  store ptr @_parameterization_Functioni32_to_i32, ptr %193, align 8
  %1452 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %193)
  %1453 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %1454 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 272), align 8
  store ptr @function_typ, ptr %194, align 8
  %1455 = call ptr @behavior_wrapper(ptr %1454, { ptr, ptr, ptr, i32 } %1444, ptr nonnull %194)
  %1456 = call { ptr, ptr, ptr, i32 } %1455({ ptr, ptr, ptr, i32 } %1444, { ptr, ptr, ptr, i32 } %1444, ptr nonnull %193, { ptr } %1431) #25
  %.fca.0.extract266 = extractvalue { ptr, ptr, ptr, i32 } %1456, 0
  %.fca.1.extract267 = extractvalue { ptr, ptr, ptr, i32 } %1456, 1
  %.fca.2.extract268 = extractvalue { ptr, ptr, ptr, i32 } %1456, 2
  %.fca.3.extract269 = extractvalue { ptr, ptr, ptr, i32 } %1456, 3
  store ptr %.fca.0.extract266, ptr %195, align 8
  %1457 = getelementptr inbounds i8, ptr %195, i64 8
  store ptr %.fca.1.extract267, ptr %1457, align 8
  %1458 = getelementptr inbounds i8, ptr %195, i64 16
  store ptr %.fca.2.extract268, ptr %1458, align 8
  %1459 = getelementptr inbounds i8, ptr %195, i64 24
  store i32 %.fca.3.extract269, ptr %1459, align 8
  call void @set_offset(ptr nonnull %195, ptr nonnull @MapIterable)
  %1460 = load ptr, ptr %195, align 8
  %1461 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1460, 0
  %1462 = load ptr, ptr %1457, align 8
  %1463 = insertvalue { ptr, ptr, ptr, i32 } %1461, ptr %1462, 1
  %1464 = load ptr, ptr %1458, align 8
  %1465 = insertvalue { ptr, ptr, ptr, i32 } %1463, ptr %1464, 2
  %1466 = load i32, ptr %1459, align 8
  %1467 = insertvalue { ptr, ptr, ptr, i32 } %1465, i32 %1466, 3
  store ptr @_parameterization_i32, ptr %196, align 8
  %1468 = getelementptr inbounds i8, ptr %196, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i32, ptr %1468, align 8
  %1469 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %196)
  %1470 = call ptr @llvm.invariant.start.p0(i64 408, ptr %1460)
  %1471 = sext i32 %1466 to i64
  %1472 = getelementptr ptr, ptr %1460, i64 %1471
  %1473 = getelementptr i8, ptr %1472, i64 56
  %1474 = load ptr, ptr %1473, align 8
  store ptr @i32_typ, ptr %197, align 8
  %1475 = getelementptr inbounds i8, ptr %197, i64 8
  store ptr @function_typ, ptr %1475, align 8
  %1476 = call ptr @behavior_wrapper(ptr %1474, { ptr, ptr, ptr, i32 } %1467, ptr nonnull %197)
  %1477 = call { ptr, i160 } %1476({ ptr, ptr, ptr, i32 } %1467, { ptr, ptr, ptr, i32 } %1467, ptr nonnull %196, { ptr, i160 } { ptr @i32_typ, i160 0 }, { ptr } %1427) #25
  %.fca.1.extract260 = extractvalue { ptr, i160 } %1477, 1
  %.sroa.0256.0.insert.ext = and i160 %.fca.1.extract260, 4294967295
  %1478 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0256.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %198, align 8
  %1479 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %198)
  %1480 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %199, align 8
  %1481 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %199)
  call void %1481(ptr nonnull %198, { ptr, i160 } %1478) #25
  %1482 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1482)
  call void @llvm.init.trampoline(ptr %1482, ptr nonnull @idcfcsmhot, ptr nonnull @_functionliteral_gkccoddqse)
  %1483 = call ptr @adjust_trampoline(ptr %1482)
  %1484 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1482)
  %1485 = insertvalue { ptr } undef, ptr %1483, 0
  %1486 = call ptr @bump_malloc(i64 20)
  store i32 5, ptr %1486, align 4
  %1487 = getelementptr i8, ptr %1486, i64 4
  store i32 6, ptr %1487, align 4
  %1488 = getelementptr i8, ptr %1486, i64 8
  store i32 7, ptr %1488, align 4
  %1489 = getelementptr i8, ptr %1486, i64 12
  store i32 8, ptr %1489, align 4
  store ptr @Array, ptr %200, align 8
  %1490 = getelementptr inbounds i8, ptr %200, i64 8
  store ptr @_parameterization_i32, ptr %1490, align 8
  %1491 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %200)
  %1492 = extractvalue { i64, i64 } %1491, 0
  %1493 = call ptr @bump_malloc(i64 %1492)
  store ptr @_parameterization_i32, ptr %1493, align 8
  %1494 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1493)
  %1495 = insertvalue { ptr } undef, ptr %1486, 0
  %1496 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1493, 1
  %1497 = insertvalue { ptr, ptr, ptr, i32 } %1496, ptr undef, 2
  %1498 = insertvalue { ptr, ptr, ptr, i32 } %1497, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %201, align 8
  %1499 = getelementptr inbounds i8, ptr %201, i64 8
  store ptr @_parameterization_i32, ptr %1499, align 8
  %1500 = getelementptr inbounds i8, ptr %201, i64 16
  store ptr @_parameterization_i32, ptr %1500, align 8
  %1501 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %201)
  %1502 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %202, align 8
  %1503 = getelementptr inbounds i8, ptr %202, i64 8
  store ptr @i32_typ, ptr %1503, align 8
  %1504 = getelementptr inbounds i8, ptr %202, i64 16
  store ptr @i32_typ, ptr %1504, align 8
  %1505 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %1498, ptr nonnull %202)
  call void %1505({ ptr, ptr, ptr, i32 } %1498, { ptr, ptr, ptr, i32 } %1498, ptr nonnull %201, { ptr } %1495, i32 4, i32 5) #25
  store ptr @_parameterization_Functioni32_to_Nothing, ptr %203, align 8
  %1506 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %203)
  %1507 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %1508 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 240), align 8
  store ptr @function_typ, ptr %204, align 8
  %1509 = call ptr @behavior_wrapper(ptr %1508, { ptr, ptr, ptr, i32 } %1498, ptr nonnull %204)
  call void %1509({ ptr, ptr, ptr, i32 } %1498, { ptr, ptr, ptr, i32 } %1498, ptr nonnull %203, { ptr } %1485) #25
  %1510 = call ptr @bump_malloc(i64 13)
  store <12 x i8> <i8 98, i8 105, i8 103, i8 116, i8 105, i8 110, i8 103, i8 115, i8 46, i8 116, i8 120, i8 116>, ptr %1510, align 16
  store ptr @String, ptr %205, align 8
  %1511 = call { i64, i64 } @size_wrapper(ptr %305, ptr nonnull %205)
  %1512 = extractvalue { i64, i64 } %1511, 0
  %1513 = call ptr @bump_malloc(i64 %1512)
  %1514 = insertvalue { ptr } undef, ptr %1510, 0
  %1515 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1513, 1
  %1516 = insertvalue { ptr, ptr, ptr, i32 } %1515, ptr undef, 2
  %1517 = insertvalue { ptr, ptr, ptr, i32 } %1516, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %206, align 8
  %1518 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr @_parameterization_i32, ptr %1518, align 8
  %1519 = getelementptr inbounds i8, ptr %206, i64 16
  store ptr @_parameterization_i32, ptr %1519, align 8
  %1520 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %206)
  %1521 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %207, align 8
  %1522 = getelementptr inbounds i8, ptr %207, i64 8
  store ptr @i32_typ, ptr %1522, align 8
  %1523 = getelementptr inbounds i8, ptr %207, i64 16
  store ptr @i32_typ, ptr %1523, align 8
  %1524 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %1517, ptr nonnull %207)
  call void %1524({ ptr, ptr, ptr, i32 } %1517, { ptr, ptr, ptr, i32 } %1517, ptr nonnull %206, { ptr } %1514, i32 12, i32 13) #25
  %1525 = call ptr @bump_malloc(i64 21)
  store <20 x i8> <i8 116, i8 104, i8 105, i8 115, i8 10, i8 105, i8 115, i8 32, i8 104, i8 111, i8 119, i8 10, i8 119, i8 101, i8 32, i8 100, i8 111, i8 10, i8 105, i8 116>, ptr %1525, align 32
  store ptr @String, ptr %208, align 8
  %1526 = call { i64, i64 } @size_wrapper(ptr %305, ptr nonnull %208)
  %1527 = extractvalue { i64, i64 } %1526, 0
  %1528 = call ptr @bump_malloc(i64 %1527)
  %1529 = insertvalue { ptr } undef, ptr %1525, 0
  %1530 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1528, 1
  %1531 = insertvalue { ptr, ptr, ptr, i32 } %1530, ptr undef, 2
  %1532 = insertvalue { ptr, ptr, ptr, i32 } %1531, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %209, align 8
  %1533 = getelementptr inbounds i8, ptr %209, i64 8
  store ptr @_parameterization_i32, ptr %1533, align 8
  %1534 = getelementptr inbounds i8, ptr %209, i64 16
  store ptr @_parameterization_i32, ptr %1534, align 8
  %1535 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %209)
  %1536 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %210, align 8
  %1537 = getelementptr inbounds i8, ptr %210, i64 8
  store ptr @i32_typ, ptr %1537, align 8
  %1538 = getelementptr inbounds i8, ptr %210, i64 16
  store ptr @i32_typ, ptr %1538, align 8
  %1539 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %1532, ptr nonnull %210)
  call void %1539({ ptr, ptr, ptr, i32 } %1532, { ptr, ptr, ptr, i32 } %1532, ptr nonnull %209, { ptr } %1529, i32 20, i32 21) #25
  store ptr @String, ptr %211, align 8
  %1540 = getelementptr inbounds i8, ptr %211, i64 8
  store ptr %1513, ptr %1540, align 8
  %1541 = getelementptr inbounds i8, ptr %211, i64 16
  %1542 = getelementptr inbounds i8, ptr %211, i64 24
  store i32 10, ptr %1542, align 8
  call void @set_offset(ptr nonnull %211, ptr nonnull @String)
  %1543 = load ptr, ptr %211, align 8
  %1544 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1543, 0
  %1545 = load ptr, ptr %1540, align 8
  %1546 = insertvalue { ptr, ptr, ptr, i32 } %1544, ptr %1545, 1
  %1547 = load ptr, ptr %1541, align 8
  %1548 = insertvalue { ptr, ptr, ptr, i32 } %1546, ptr %1547, 2
  %1549 = load i32, ptr %1542, align 8
  %1550 = insertvalue { ptr, ptr, ptr, i32 } %1548, i32 %1549, 3
  store ptr @String, ptr %212, align 8
  %1551 = getelementptr inbounds i8, ptr %212, i64 8
  store ptr %1528, ptr %1551, align 8
  %1552 = getelementptr inbounds i8, ptr %212, i64 16
  %1553 = getelementptr inbounds i8, ptr %212, i64 24
  store i32 10, ptr %1553, align 8
  call void @set_offset(ptr nonnull %212, ptr nonnull @String)
  %1554 = load ptr, ptr %212, align 8
  %1555 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1554, 0
  %1556 = load ptr, ptr %1551, align 8
  %1557 = insertvalue { ptr, ptr, ptr, i32 } %1555, ptr %1556, 1
  %1558 = load ptr, ptr %1552, align 8
  %1559 = insertvalue { ptr, ptr, ptr, i32 } %1557, ptr %1558, 2
  %1560 = load i32, ptr %1553, align 8
  %1561 = insertvalue { ptr, ptr, ptr, i32 } %1559, i32 %1560, 3
  store ptr @_parameterization_String, ptr %213, align 8
  %1562 = getelementptr inbounds i8, ptr %213, i64 8
  store ptr @_parameterization_String, ptr %1562, align 8
  %1563 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %213)
  %1564 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @FileSystem)
  %1565 = load ptr, ptr getelementptr inbounds (i8, ptr @FileSystem, i64 96), align 8
  store ptr %1543, ptr %214, align 8
  %1566 = getelementptr inbounds i8, ptr %214, i64 8
  store ptr %1554, ptr %1566, align 8
  %1567 = call ptr @class_behavior_wrapper(ptr %1565, ptr nonnull %214)
  call void %1567(ptr nonnull %213, { ptr, ptr, ptr, i32 } %1550, { ptr, ptr, ptr, i32 } %1561) #25
  %1568 = call ptr @bump_malloc(i64 13)
  store <12 x i8> <i8 98, i8 105, i8 103, i8 116, i8 105, i8 110, i8 103, i8 115, i8 46, i8 116, i8 120, i8 116>, ptr %1568, align 16
  store ptr @String, ptr %215, align 8
  %1569 = call { i64, i64 } @size_wrapper(ptr %305, ptr nonnull %215)
  %1570 = extractvalue { i64, i64 } %1569, 0
  %1571 = call ptr @bump_malloc(i64 %1570)
  %1572 = insertvalue { ptr } undef, ptr %1568, 0
  %1573 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1571, 1
  %1574 = insertvalue { ptr, ptr, ptr, i32 } %1573, ptr undef, 2
  %1575 = insertvalue { ptr, ptr, ptr, i32 } %1574, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %216, align 8
  %1576 = getelementptr inbounds i8, ptr %216, i64 8
  store ptr @_parameterization_i32, ptr %1576, align 8
  %1577 = getelementptr inbounds i8, ptr %216, i64 16
  store ptr @_parameterization_i32, ptr %1577, align 8
  %1578 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %216)
  %1579 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %217, align 8
  %1580 = getelementptr inbounds i8, ptr %217, i64 8
  store ptr @i32_typ, ptr %1580, align 8
  %1581 = getelementptr inbounds i8, ptr %217, i64 16
  store ptr @i32_typ, ptr %1581, align 8
  %1582 = call ptr @behavior_wrapper(ptr %317, { ptr, ptr, ptr, i32 } %1575, ptr nonnull %217)
  call void %1582({ ptr, ptr, ptr, i32 } %1575, { ptr, ptr, ptr, i32 } %1575, ptr nonnull %216, { ptr } %1572, i32 12, i32 13) #25
  store ptr @String, ptr %218, align 8
  %1583 = getelementptr inbounds i8, ptr %218, i64 8
  store ptr %1571, ptr %1583, align 8
  %1584 = getelementptr inbounds i8, ptr %218, i64 16
  %1585 = getelementptr inbounds i8, ptr %218, i64 24
  store i32 10, ptr %1585, align 8
  call void @set_offset(ptr nonnull %218, ptr nonnull @String)
  %1586 = load ptr, ptr %218, align 8
  %1587 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1586, 0
  %1588 = load ptr, ptr %1583, align 8
  %1589 = insertvalue { ptr, ptr, ptr, i32 } %1587, ptr %1588, 1
  %1590 = load ptr, ptr %1584, align 8
  %1591 = insertvalue { ptr, ptr, ptr, i32 } %1589, ptr %1590, 2
  %1592 = load i32, ptr %1585, align 8
  %1593 = insertvalue { ptr, ptr, ptr, i32 } %1591, i32 %1592, 3
  store ptr @_parameterization_String, ptr %219, align 8
  %1594 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %219)
  %1595 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @FileSystem)
  %1596 = load ptr, ptr getelementptr inbounds (i8, ptr @FileSystem, i64 88), align 8
  store ptr %1586, ptr %220, align 8
  %1597 = call ptr @class_behavior_wrapper(ptr %1596, ptr nonnull %220)
  %1598 = call { ptr, ptr, ptr, i32 } %1597(ptr nonnull %219, { ptr, ptr, ptr, i32 } %1593) #25
  %.fca.0.extract175 = extractvalue { ptr, ptr, ptr, i32 } %1598, 0
  %.fca.1.extract176 = extractvalue { ptr, ptr, ptr, i32 } %1598, 1
  %.fca.2.extract177 = extractvalue { ptr, ptr, ptr, i32 } %1598, 2
  %.fca.3.extract178 = extractvalue { ptr, ptr, ptr, i32 } %1598, 3
  store ptr %.fca.0.extract175, ptr %221, align 8
  %1599 = getelementptr inbounds i8, ptr %221, i64 8
  store ptr %.fca.1.extract176, ptr %1599, align 8
  %1600 = getelementptr inbounds i8, ptr %221, i64 16
  store ptr %.fca.2.extract177, ptr %1600, align 8
  %1601 = getelementptr inbounds i8, ptr %221, i64 24
  store i32 %.fca.3.extract178, ptr %1601, align 8
  call void @set_offset(ptr nonnull %221, ptr nonnull @String)
  %1602 = load ptr, ptr %221, align 8
  %1603 = insertvalue { ptr, i160 } undef, ptr %1602, 0
  %1604 = load i160, ptr %1599, align 8
  %1605 = insertvalue { ptr, i160 } %1603, i160 %1604, 1
  store ptr @_parameterization_String, ptr %222, align 8
  %1606 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %222)
  %1607 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %1602, ptr %223, align 8
  %1608 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %223)
  call void %1608(ptr nonnull %222, { ptr, i160 } %1605) #25
  %1609 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1609)
  call void @llvm.init.trampoline(ptr %1609, ptr nonnull @xybertmcng, ptr nonnull @_functionliteral_skwwjikhdp)
  %1610 = call ptr @adjust_trampoline(ptr %1609)
  %1611 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1609)
  %1612 = insertvalue { ptr } undef, ptr %1610, 0
  store ptr @Range, ptr %224, align 8
  %1613 = call { i64, i64 } @size_wrapper(ptr %640, ptr nonnull %224)
  %1614 = extractvalue { i64, i64 } %1613, 0
  %1615 = call ptr @bump_malloc(i64 %1614)
  %1616 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %1615, 1
  %1617 = insertvalue { ptr, ptr, ptr, i32 } %1616, ptr undef, 2
  %1618 = insertvalue { ptr, ptr, ptr, i32 } %1617, i32 10, 3
  store ptr @_parameterization_i32, ptr %225, align 8
  %1619 = getelementptr inbounds i8, ptr %225, i64 8
  store ptr @_parameterization_i32, ptr %1619, align 8
  %1620 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %225)
  %1621 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %226, align 8
  %1622 = getelementptr inbounds i8, ptr %226, i64 8
  store ptr @i32_typ, ptr %1622, align 8
  %1623 = call ptr @behavior_wrapper(ptr %650, { ptr, ptr, ptr, i32 } %1618, ptr nonnull %226)
  call void %1623({ ptr, ptr, ptr, i32 } %1618, { ptr, ptr, ptr, i32 } %1618, ptr nonnull %225, i32 2, i32 5) #25
  store ptr @_parameterization_Functioni32_to_Nothing, ptr %227, align 8
  %1624 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %227)
  %1625 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %1626 = load ptr, ptr getelementptr inbounds (i8, ptr @Range, i64 144), align 8
  store ptr @function_typ, ptr %228, align 8
  %1627 = call ptr @behavior_wrapper(ptr %1626, { ptr, ptr, ptr, i32 } %1618, ptr nonnull %228)
  call void %1627({ ptr, ptr, ptr, i32 } %1618, { ptr, ptr, ptr, i32 } %1618, ptr nonnull %227, { ptr } %1612) #25
  store ptr @_parameterization_i8, ptr %229, align 8
  %1628 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %229)
  %1629 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i8_typ, ptr %230, align 8
  %1630 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %230)
  call void %1630(ptr nonnull %229, { ptr, i160 } { ptr @i8_typ, i160 5 }) #25
  %1631 = call ptr @coroutine_create(ptr nonnull @_functionliteral_mlksevdnbl, ptr nonnull @coroutine_aajaezpbeb_passer)
  %1632 = getelementptr i8, ptr %1631, i64 64
  %1633 = getelementptr i8, ptr %1631, i64 68
  store i32 6, ptr %1632, align 4
  store i32 4, ptr %1633, align 4
  %1634 = getelementptr i8, ptr %1631, i64 48
  store { ptr, i32 } { ptr @i32_typ, i32 2 }, ptr %1634, align 8
  call void @coroutine_call(ptr %1631)
  %1635 = load { ptr, i32 }, ptr %1634, align 8
  %.fca.0.extract142 = extractvalue { ptr, i32 } %1635, 0
  %.fca.1.extract143 = extractvalue { ptr, i32 } %1635, 1
  %1636 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract142, 0
  %.sroa.2140.8.insert.ext = zext i32 %.fca.1.extract143 to i160
  %1637 = insertvalue { ptr, i160 } %1636, i160 %.sroa.2140.8.insert.ext, 1
  store ptr @_parameterization_i32_or_Nil, ptr %231, align 8
  %1638 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %231)
  %1639 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %.fca.0.extract142, ptr %232, align 8
  %1640 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %232)
  call void %1640(ptr nonnull %231, { ptr, i160 } %1637) #25
  store { ptr, i32 } { ptr @i32_typ, i32 3 }, ptr %1634, align 8
  call void @coroutine_call(ptr %1631)
  %1641 = load { ptr, i32 }, ptr %1634, align 8
  %.fca.0.extract132 = extractvalue { ptr, i32 } %1641, 0
  %.fca.1.extract133 = extractvalue { ptr, i32 } %1641, 1
  %1642 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract132, 0
  %.sroa.2130.8.insert.ext = zext i32 %.fca.1.extract133 to i160
  %1643 = insertvalue { ptr, i160 } %1642, i160 %.sroa.2130.8.insert.ext, 1
  store ptr @_parameterization_i32_or_Nil, ptr %233, align 8
  %1644 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %233)
  %1645 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %.fca.0.extract132, ptr %234, align 8
  %1646 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %234)
  call void %1646(ptr nonnull %233, { ptr, i160 } %1643) #25
  %1647 = call ptr @coroutine_create(ptr nonnull @_functionliteral_jsrohdipjo, ptr nonnull @coroutine_jzdojyfeau_passer)
  call void @coroutine_call(ptr %1647)
  %1648 = getelementptr i8, ptr %1647, i64 48
  %1649 = load { ptr, i32 }, ptr %1648, align 8
  %.fca.0.extract118 = extractvalue { ptr, i32 } %1649, 0
  %.fca.1.extract119 = extractvalue { ptr, i32 } %1649, 1
  %1650 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract118, 0
  %.sroa.2116.8.insert.ext = zext i32 %.fca.1.extract119 to i160
  %1651 = insertvalue { ptr, i160 } %1650, i160 %.sroa.2116.8.insert.ext, 1
  store ptr @_parameterization_i32_or_Nil, ptr %235, align 8
  %1652 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %235)
  %1653 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %.fca.0.extract118, ptr %236, align 8
  %1654 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %236)
  call void %1654(ptr nonnull %235, { ptr, i160 } %1651) #25
  store ptr @Channel, ptr %237, align 8
  %1655 = getelementptr inbounds i8, ptr %237, i64 8
  store ptr @_parameterization_i32, ptr %1655, align 8
  %1656 = load ptr, ptr getelementptr inbounds (i8, ptr @Channel, i64 48), align 8
  %1657 = call { i64, i64 } @size_wrapper(ptr %1656, ptr nonnull %237)
  %1658 = extractvalue { i64, i64 } %1657, 0
  %1659 = call ptr @bump_malloc(i64 %1658)
  store ptr @_parameterization_i32, ptr %1659, align 8
  %1660 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1659)
  %1661 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Channel, ptr undef, ptr undef, i32 undef }, ptr %1659, 1
  %1662 = insertvalue { ptr, ptr, ptr, i32 } %1661, ptr undef, 2
  %1663 = insertvalue { ptr, ptr, ptr, i32 } %1662, i32 10, 3
  %1664 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1665 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @Channel)
  %1666 = load ptr, ptr getelementptr inbounds (i8, ptr @Channel, i64 96), align 8
  %1667 = call ptr @behavior_wrapper(ptr %1666, { ptr, ptr, ptr, i32 } %1663, ptr nonnull %1)
  call void %1667({ ptr, ptr, ptr, i32 } %1663, { ptr, ptr, ptr, i32 } %1663, ptr nonnull %1) #25
  store ptr @Channel, ptr %238, align 8
  %1668 = getelementptr inbounds i8, ptr %238, i64 8
  store ptr %1659, ptr %1668, align 8
  %1669 = getelementptr inbounds i8, ptr %238, i64 16
  %1670 = getelementptr inbounds i8, ptr %238, i64 24
  store i32 10, ptr %1670, align 8
  call void @set_offset(ptr nonnull %238, ptr nonnull @Channel)
  %1671 = load ptr, ptr %238, align 8
  %1672 = load ptr, ptr %1668, align 8
  %1673 = load ptr, ptr %1669, align 8
  %1674 = load i32, ptr %1670, align 8
  %1675 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1671, 0
  %1676 = insertvalue { ptr, ptr, ptr, i32 } %1675, ptr %1672, 1
  %1677 = insertvalue { ptr, ptr, ptr, i32 } %1676, ptr %1673, 2
  %1678 = insertvalue { ptr, ptr, ptr, i32 } %1677, i32 %1674, 3
  %1679 = call ptr @coroutine_create(ptr nonnull @_functionliteral_ykljlibama, ptr nonnull @coroutine_ktcgunrfby_passer)
  %1680 = getelementptr i8, ptr %1679, i64 80
  store { ptr, ptr, ptr, i32 } %1678, ptr %1680, align 8
  call void @coroutine_call(ptr %1679)
  %1681 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %1682 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1671)
  %1683 = sext i32 %1674 to i64
  %1684 = getelementptr ptr, ptr %1671, i64 %1683
  %1685 = getelementptr i8, ptr %1684, i64 24
  %1686 = load ptr, ptr %1685, align 8
  %1687 = call ptr @behavior_wrapper(ptr %1686, { ptr, ptr, ptr, i32 } %1678, ptr nonnull %1)
  %1688 = call { ptr, i160 } %1687({ ptr, ptr, ptr, i32 } %1678, { ptr, ptr, ptr, i32 } %1678, ptr nonnull %1) #25
  %.fca.1.extract86 = extractvalue { ptr, i160 } %1688, 1
  %.sroa.082.0.insert.ext = and i160 %.fca.1.extract86, 4294967295
  %1689 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.082.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %239, align 8
  %1690 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %239)
  %1691 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %240, align 8
  %1692 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %240)
  call void %1692(ptr nonnull %239, { ptr, i160 } %1689) #25
  %1693 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1693)
  call void @llvm.init.trampoline(ptr %1693, ptr nonnull @wbgidtiblc, ptr nonnull @_functionliteral_tcdzabihwa)
  %1694 = call ptr @adjust_trampoline(ptr %1693)
  %1695 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1693)
  %1696 = insertvalue { ptr } undef, ptr %1694, 0
  %1697 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1697)
  call void @llvm.init.trampoline(ptr %1697, ptr nonnull @jvdafelqjx, ptr nonnull @_functionliteral_ezxmqtmqzv)
  %1698 = call ptr @adjust_trampoline(ptr %1697)
  %1699 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1697)
  %1700 = insertvalue { ptr } undef, ptr %1698, 0
  %1701 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1701)
  call void @llvm.init.trampoline(ptr %1701, ptr nonnull @vujwrmkfxj, ptr nonnull @_functionliteral_bzyzrznjkd)
  %1702 = call ptr @adjust_trampoline(ptr %1701)
  %1703 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1701)
  %1704 = insertvalue { ptr } undef, ptr %1702, 0
  store ptr @Range, ptr %241, align 8
  %1705 = call { i64, i64 } @size_wrapper(ptr %640, ptr nonnull %241)
  %1706 = extractvalue { i64, i64 } %1705, 0
  %1707 = call ptr @bump_malloc(i64 %1706)
  %1708 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %1707, 1
  %1709 = insertvalue { ptr, ptr, ptr, i32 } %1708, ptr undef, 2
  %1710 = insertvalue { ptr, ptr, ptr, i32 } %1709, i32 10, 3
  store ptr @_parameterization_i32, ptr %242, align 8
  %1711 = getelementptr inbounds i8, ptr %242, i64 8
  store ptr @_parameterization_i32, ptr %1711, align 8
  %1712 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %242)
  %1713 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %243, align 8
  %1714 = getelementptr inbounds i8, ptr %243, i64 8
  store ptr @i32_typ, ptr %1714, align 8
  %1715 = call ptr @behavior_wrapper(ptr %650, { ptr, ptr, ptr, i32 } %1710, ptr nonnull %243)
  call void %1715({ ptr, ptr, ptr, i32 } %1710, { ptr, ptr, ptr, i32 } %1710, ptr nonnull %242, i32 1, i32 15) #25
  store ptr @_parameterization_Functioni32_to_i32, ptr %244, align 8
  %1716 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %244)
  %1717 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %1718 = load ptr, ptr getelementptr inbounds (i8, ptr @Range, i64 176), align 8
  store ptr @function_typ, ptr %245, align 8
  %1719 = call ptr @behavior_wrapper(ptr %1718, { ptr, ptr, ptr, i32 } %1710, ptr nonnull %245)
  %1720 = call { ptr, ptr, ptr, i32 } %1719({ ptr, ptr, ptr, i32 } %1710, { ptr, ptr, ptr, i32 } %1710, ptr nonnull %244, { ptr } %1704) #25
  %.fca.0.extract54 = extractvalue { ptr, ptr, ptr, i32 } %1720, 0
  %.fca.1.extract55 = extractvalue { ptr, ptr, ptr, i32 } %1720, 1
  %.fca.2.extract56 = extractvalue { ptr, ptr, ptr, i32 } %1720, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %1720, 3
  store ptr %.fca.0.extract54, ptr %246, align 8
  %1721 = getelementptr inbounds i8, ptr %246, i64 8
  store ptr %.fca.1.extract55, ptr %1721, align 8
  %1722 = getelementptr inbounds i8, ptr %246, i64 16
  store ptr %.fca.2.extract56, ptr %1722, align 8
  %1723 = getelementptr inbounds i8, ptr %246, i64 24
  store i32 %.fca.3.extract57, ptr %1723, align 8
  call void @set_offset(ptr nonnull %246, ptr nonnull @MapIterable)
  %1724 = load ptr, ptr %246, align 8
  %1725 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1724, 0
  %1726 = load ptr, ptr %1721, align 8
  %1727 = insertvalue { ptr, ptr, ptr, i32 } %1725, ptr %1726, 1
  %1728 = load ptr, ptr %1722, align 8
  %1729 = insertvalue { ptr, ptr, ptr, i32 } %1727, ptr %1728, 2
  %1730 = load i32, ptr %1723, align 8
  %1731 = insertvalue { ptr, ptr, ptr, i32 } %1729, i32 %1730, 3
  store ptr @_parameterization_Functioni32_to_i1, ptr %247, align 8
  %1732 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %247)
  %1733 = call ptr @llvm.invariant.start.p0(i64 408, ptr %1724)
  %1734 = sext i32 %1730 to i64
  %1735 = getelementptr ptr, ptr %1724, i64 %1734
  %1736 = getelementptr i8, ptr %1735, i64 88
  %1737 = load ptr, ptr %1736, align 8
  store ptr @function_typ, ptr %248, align 8
  %1738 = call ptr @behavior_wrapper(ptr %1737, { ptr, ptr, ptr, i32 } %1731, ptr nonnull %248)
  %1739 = call { ptr, ptr, ptr, i32 } %1738({ ptr, ptr, ptr, i32 } %1731, { ptr, ptr, ptr, i32 } %1731, ptr nonnull %247, { ptr } %1700) #25
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %1739, 0
  %.fca.1.extract52 = extractvalue { ptr, ptr, ptr, i32 } %1739, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1739, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1739, 3
  store ptr %.fca.0.extract51, ptr %249, align 8
  %1740 = getelementptr inbounds i8, ptr %249, i64 8
  store ptr %.fca.1.extract52, ptr %1740, align 8
  %1741 = getelementptr inbounds i8, ptr %249, i64 16
  store ptr %.fca.2.extract, ptr %1741, align 8
  %1742 = getelementptr inbounds i8, ptr %249, i64 24
  store i32 %.fca.3.extract, ptr %1742, align 8
  call void @set_offset(ptr nonnull %249, ptr nonnull @FilterIterable)
  %1743 = load ptr, ptr %249, align 8
  %1744 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1743, 0
  %1745 = load ptr, ptr %1740, align 8
  %1746 = insertvalue { ptr, ptr, ptr, i32 } %1744, ptr %1745, 1
  %1747 = load ptr, ptr %1741, align 8
  %1748 = insertvalue { ptr, ptr, ptr, i32 } %1746, ptr %1747, 2
  %1749 = load i32, ptr %1742, align 8
  %1750 = insertvalue { ptr, ptr, ptr, i32 } %1748, i32 %1749, 3
  store ptr @_parameterization_i32, ptr %250, align 8
  %1751 = getelementptr inbounds i8, ptr %250, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i32, ptr %1751, align 8
  %1752 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %250)
  %1753 = call ptr @llvm.invariant.start.p0(i64 400, ptr %1743)
  %1754 = sext i32 %1749 to i64
  %1755 = getelementptr ptr, ptr %1743, i64 %1754
  %1756 = getelementptr i8, ptr %1755, i64 48
  %1757 = load ptr, ptr %1756, align 8
  store ptr @i32_typ, ptr %251, align 8
  %1758 = getelementptr inbounds i8, ptr %251, i64 8
  store ptr @function_typ, ptr %1758, align 8
  %1759 = call ptr @behavior_wrapper(ptr %1757, { ptr, ptr, ptr, i32 } %1750, ptr nonnull %251)
  %1760 = call { ptr, i160 } %1759({ ptr, ptr, ptr, i32 } %1750, { ptr, ptr, ptr, i32 } %1750, ptr nonnull %250, { ptr, i160 } { ptr @i32_typ, i160 0 }, { ptr } %1696) #25
  %.fca.1.extract45 = extractvalue { ptr, i160 } %1760, 1
  %.sroa.037.0.insert.ext = and i160 %.fca.1.extract45, 4294967295
  %1761 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.037.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %252, align 8
  %1762 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %252)
  %1763 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %253, align 8
  %1764 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %253)
  call void %1764(ptr nonnull %252, { ptr, i160 } %1761) #25
  store ptr @_parameterization_i32, ptr %254, align 8
  %1765 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %254)
  %1766 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %255, align 8
  %1767 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %255)
  call void %1767(ptr nonnull %254, { ptr, i160 } { ptr @i32_typ, i160 256 }) #25
  store ptr @_parameterization_i32, ptr %256, align 8
  %1768 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %256)
  %1769 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %257, align 8
  %1770 = call ptr @class_behavior_wrapper(ptr %267, ptr nonnull %257)
  call void %1770(ptr nonnull %256, { ptr, i160 } { ptr @i32_typ, i160 5 }) #25
  %1771 = call ptr @bump_malloc(i64 16)
  store i32 4, ptr %1771, align 4
  %1772 = getelementptr i8, ptr %1771, i64 4
  store i32 5, ptr %1772, align 4
  %1773 = getelementptr i8, ptr %1771, i64 8
  store i32 6, ptr %1773, align 4
  store ptr @Array, ptr %258, align 8
  %1774 = getelementptr inbounds i8, ptr %258, i64 8
  store ptr @_parameterization_i32, ptr %1774, align 8
  %1775 = call { i64, i64 } @size_wrapper(ptr %881, ptr nonnull %258)
  %1776 = extractvalue { i64, i64 } %1775, 0
  %1777 = call ptr @bump_malloc(i64 %1776)
  store ptr @_parameterization_i32, ptr %1777, align 8
  %1778 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1777)
  %1779 = insertvalue { ptr } undef, ptr %1771, 0
  %1780 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1777, 1
  %1781 = insertvalue { ptr, ptr, ptr, i32 } %1780, ptr undef, 2
  %1782 = insertvalue { ptr, ptr, ptr, i32 } %1781, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %259, align 8
  %1783 = getelementptr inbounds i8, ptr %259, i64 8
  store ptr @_parameterization_i32, ptr %1783, align 8
  %1784 = getelementptr inbounds i8, ptr %259, i64 16
  store ptr @_parameterization_i32, ptr %1784, align 8
  %1785 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %259)
  %1786 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %260, align 8
  %1787 = getelementptr inbounds i8, ptr %260, i64 8
  store ptr @i32_typ, ptr %1787, align 8
  %1788 = getelementptr inbounds i8, ptr %260, i64 16
  store ptr @i32_typ, ptr %1788, align 8
  %1789 = call ptr @behavior_wrapper(ptr %894, { ptr, ptr, ptr, i32 } %1782, ptr nonnull %260)
  call void %1789({ ptr, ptr, ptr, i32 } %1782, { ptr, ptr, ptr, i32 } %1782, ptr nonnull %259, { ptr } %1779, i32 3, i32 4) #25
  store ptr @_parameterization_i32, ptr %261, align 8
  %1790 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %261)
  %1791 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %1792 = load ptr, ptr getelementptr inbounds (i8, ptr @Array, i64 192), align 8
  store ptr @i32_typ, ptr %262, align 8
  %1793 = call ptr @behavior_wrapper(ptr %1792, { ptr, ptr, ptr, i32 } %1782, ptr nonnull %262)
  %1794 = call { ptr, i160 } %1793({ ptr, ptr, ptr, i32 } %1782, { ptr, ptr, ptr, i32 } %1782, ptr nonnull %261, i32 4) #25
  ret i32 0
}

define void @setup_landing_pad() {
  %region = call noalias ptr @VirtualAlloc(ptr null, i64 5368709120, i32 12288, i32 4) #30
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #29
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

declare i64 @clock() local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %stack = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #30
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

define void @coroutine_call(ptr %coroutine) {
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #28
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect) #17
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #3

define ptr @adjust_trampoline(ptr %tramp) {
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #31
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #16

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #17

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #18

declare void @coroutine_trampoline(ptr)

define void @arg_passer(ptr %current_coroutine) {
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

declare void @exit()

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define ptr @typegetter_wrapper(ptr %f, ptr nocapture nofree noundef nonnull readonly %0) #0 {
  %result = call ptr %f(ptr nocapture nofree noundef nonnull readonly %0) #7
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { ptr, i160 } @box_wrapper(ptr %f, ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #0 {
  %result = call { ptr, i160 } %f(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #7
  ret { ptr, i160 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @unbox_wrapper(ptr %f, { ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #19 {
  call void %f({ ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #2
  ret void
}

define { i64, i64 } @_data_size_tuple_typ(ptr %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %1
  %.in = phi i64 [ %22, %.lr.ph ], [ %3, %1 ]
  %5 = phi i64 [ %20, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011 = phi i64 [ %19, %.lr.ph ], [ 0, %1 ]
  %.reg2mem20.010 = phi i64 [ %13, %.lr.ph ], [ 1, %1 ]
  %6 = inttoptr i64 %.in to ptr
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { i64, i64 } %9(ptr nonnull %6)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = extractvalue { i64, i64 } %10, 1
  %13 = tail call i64 @llvm.umax.i64(i64 %12, i64 %.reg2mem20.010)
  %14 = urem i64 %.reg2mem22.011, %12
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %12, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %11, %.reg2mem22.011
  %19 = add i64 %18, %17
  %20 = add i64 %5, 1
  %21 = getelementptr ptr, ptr %0, i64 %20
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %1
  %.reg2mem20.0.lcssa = phi i64 [ 1, %1 ], [ %13, %.lr.ph ]
  %.reg2mem22.0.lcssa = phi i64 [ 0, %1 ], [ %19, %.lr.ph ]
  %24 = urem i64 %.reg2mem22.0.lcssa, %.reg2mem20.0.lcssa
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %.reg2mem20.0.lcssa, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = add i64 %27, %.reg2mem22.0.lcssa
  %29 = insertvalue { i64, i64 } undef, i64 %28, 0
  %30 = insertvalue { i64, i64 } %29, i64 %.reg2mem20.0.lcssa, 1
  ret { i64, i64 } %30
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #20

define { i64, i64 } @_data_size_union_typ(ptr %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %1
  %.in = phi i64 [ %22, %.lr.ph ], [ %3, %1 ]
  %5 = phi i64 [ %20, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011 = phi i64 [ %19, %.lr.ph ], [ 0, %1 ]
  %.reg2mem20.010 = phi i64 [ %13, %.lr.ph ], [ 1, %1 ]
  %6 = inttoptr i64 %.in to ptr
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { i64, i64 } %9(ptr nonnull %6)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = extractvalue { i64, i64 } %10, 1
  %13 = tail call i64 @llvm.umax.i64(i64 noundef %12, i64 noundef %.reg2mem20.010)
  %14 = urem i64 %.reg2mem22.011, %12
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %12, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = tail call i64 @llvm.umax.i64(i64 noundef %11, i64 noundef %.reg2mem22.011)
  %19 = tail call i64 @llvm.umax.i64(i64 noundef %18, i64 noundef %17)
  %20 = add i64 %5, 1
  %21 = getelementptr ptr, ptr %0, i64 %20
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %1
  %.reg2mem20.0.lcssa = phi i64 [ 1, %1 ], [ %13, %.lr.ph ]
  %.reg2mem22.0.lcssa = phi i64 [ 0, %1 ], [ %19, %.lr.ph ]
  %right_size = icmp eq i64 %.reg2mem22.0.lcssa, 32
  %flag_size = select i1 %right_size, i64 0, i64 8
  %final_size = add i64 %.reg2mem22.0.lcssa, %flag_size
  %24 = urem i64 %final_size, %.reg2mem20.0.lcssa
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %.reg2mem20.0.lcssa, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = add i64 %27, %final_size
  %29 = insertvalue { i64, i64 } undef, i64 %28, 0
  %30 = insertvalue { i64, i64 } %29, i64 %.reg2mem20.0.lcssa, 1
  ret { i64, i64 } %30
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr %1, ptr %dest) {
  %3 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %0, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } @_data_size_union_typ(ptr %1)
  %size = extractvalue { i64, i64 } %6, 0
  %7 = icmp sle i64 %size, 16
  %8 = icmp eq i64 %size, 32
  %9 = select i1 %7, ptr %4, ptr %5
  %source = select i1 %8, ptr %3, ptr %9
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %dest, ptr %source, i64 %size, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #21

define void @arg_buffer_filler(ptr %coroutine) {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_bool_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_bool_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_bool_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_bool_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_any_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Object(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i8_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_i8_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i8_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i8_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i8_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i32_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 4, i64 4 }
}

define { ptr, i160 } @_box_i32_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i32_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i32_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i64_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 4 }
}

define { ptr, i160 } @_box_i64_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i64_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i64_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i64_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_f64_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_f64_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_f64_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_f64_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_nil_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_nil_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_nil_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @nil_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_nil_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_nothing_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_nothing_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_nothing_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @nothing_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_nothing_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_nothing_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_function_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_function_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_function_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @function_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_function_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_buffer_typ(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_buffer_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_buffer_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @buffer_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_buffer_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_buffer_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

define { ptr, i160 } @_box_union_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.3 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_union_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp eq i64 %4, 32
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = load ptr, ptr %0, align 8
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i160, ptr %8, align 4
  store i160 %9, ptr %.sroa.3, align 8
  br label %15

10:                                               ; preds = %2
  %11 = icmp slt i64 %4, 17
  br i1 %11, label %14, label %12

12:                                               ; preds = %10
  %13 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %13, ptr align 1 %0, i64 %4, i1 false)
  store ptr %13, ptr %.sroa.3, align 8
  br label %15

14:                                               ; preds = %10
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.3, ptr align 1 %0, i64 %4, i1 false)
  br label %15

15:                                               ; preds = %14, %12, %6
  %.sroa.0.0 = phi ptr [ %7, %6 ], [ @union_typ, %14 ], [ @union_typ, %12 ]
  %16 = insertvalue { ptr, i160 } undef, ptr %.sroa.0.0, 0
  %.sroa.3.0..sroa.3.0..sroa.3.0..sroa.3.8. = load i160, ptr %.sroa.3, align 8
  %17 = insertvalue { ptr, i160 } %16, i160 %.sroa.3.0..sroa.3.0..sroa.3.0..sroa.3.8., 1
  ret { ptr, i160 } %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_MapIterable(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable_field_MapIterable_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable_field_MapIterable_1(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 208
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 232
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @MapIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @MapIterable_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @MapIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 408, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 408, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract35, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract37, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract39, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract41, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @MapIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 408, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract27, ptr %19, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep30, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep32, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep34, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract15 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract19 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract21 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract15, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract17, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract19, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract21, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 408, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr } %48(ptr %40) #24
  %50 = call ptr @llvm.invariant.start.p0(i64 408, ptr %41)
  %51 = load ptr, ptr %45, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %40)
  %53 = load ptr, ptr %6, align 8
  %54 = load ptr, ptr %5, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 408, ptr %54)
  %56 = load i32, ptr %8, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %53)
  %62 = alloca [3 x ptr], align 8
  store ptr @MapIterator, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr %52, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  store ptr %61, ptr %64, align 8
  %65 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_MapIterator, ptr nonnull %62)
  %66 = extractvalue { i64, i64 } %65, 0
  %67 = call ptr @bump_malloc(i64 %66)
  store ptr %52, ptr %67, align 8
  %68 = getelementptr i8, ptr %67, i64 8
  store ptr %61, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %67)
  %70 = load ptr, ptr %6, align 8
  %71 = load ptr, ptr %5, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 408, ptr %71)
  %73 = load i32, ptr %8, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 16
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %70) #24
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  store ptr %.fca.0.extract2, ptr %80, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %80, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %79, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %80, i64 16
  store ptr %.fca.2.extract4, ptr %.fca.2.gep, align 8
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %80, i64 24
  store i32 %.fca.3.extract5, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %80, ptr nonnull @Iterable)
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = load ptr, ptr %.fca.1.gep, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %85 = load ptr, ptr %.fca.2.gep, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %87 = load i32, ptr %.fca.3.gep, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %90 = call ptr @llvm.invariant.start.p0(i64 184, ptr %81)
  %91 = sext i32 %87 to i64
  %92 = getelementptr ptr, ptr %81, i64 %91
  %93 = getelementptr i8, ptr %92, i64 8
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4)
  %96 = call { ptr, ptr, ptr, i32 } %95({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4) #25
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %96, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 3
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %97, i64 8
  store ptr %.fca.1.extract, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %97, i64 16
  store ptr %.fca.2.extract, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %97, i64 24
  store i32 %.fca.3.extract, ptr %100, align 8
  call void @set_offset(ptr nonnull %97, ptr nonnull @Iterator)
  %101 = load ptr, ptr %6, align 8
  %102 = load ptr, ptr %5, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 408, ptr %102)
  %104 = load i32, ptr %8, align 8
  %105 = sext i32 %104 to i64
  %106 = getelementptr ptr, ptr %102, i64 %105
  %107 = getelementptr i8, ptr %106, i64 24
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %108, align 8
  %110 = call { ptr } %109(ptr %101) #24
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = load ptr, ptr %97, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr inbounds i8, ptr %111, i64 8
  %114 = load ptr, ptr %98, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr inbounds i8, ptr %111, i64 16
  %116 = load ptr, ptr %99, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr inbounds i8, ptr %111, i64 24
  %118 = load i32, ptr %100, align 8
  store i32 %118, ptr %117, align 8
  call void @set_offset(ptr nonnull %111, ptr nonnull @Iterator)
  %119 = load ptr, ptr %111, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = load ptr, ptr %113, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %123 = load ptr, ptr %115, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 2
  %125 = load i32, ptr %117, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %125, 3
  %127 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterator, ptr undef, ptr undef, i32 undef }, ptr %67, 1
  %128 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr undef, 2
  %129 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 10, 3
  %130 = load ptr, ptr %6, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 408, ptr %131)
  %133 = load i32, ptr %8, align 8
  %134 = sext i32 %133 to i64
  %135 = getelementptr ptr, ptr %131, i64 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %130)
  %138 = call ptr @bump_malloc(i64 24)
  %139 = getelementptr i8, ptr %138, i64 8
  store ptr %137, ptr %139, align 8
  %140 = getelementptr i8, ptr %138, i64 16
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  store ptr @Iterator, ptr %138, align 8
  %142 = load ptr, ptr %6, align 8
  %143 = load ptr, ptr %5, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 408, ptr %143)
  %145 = load i32, ptr %8, align 8
  %146 = sext i32 %145 to i64
  %147 = getelementptr ptr, ptr %143, i64 %146
  %148 = getelementptr i8, ptr %147, i64 8
  %149 = load ptr, ptr %148, align 8
  %150 = call ptr @typegetter_wrapper(ptr %149, ptr %142)
  %151 = load ptr, ptr %6, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 408, ptr %152)
  %154 = load i32, ptr %8, align 8
  %155 = sext i32 %154 to i64
  %156 = getelementptr ptr, ptr %152, i64 %155
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @typegetter_wrapper(ptr %157, ptr %151)
  %159 = call ptr @bump_malloc(i64 32)
  %160 = getelementptr i8, ptr %159, i64 16
  store ptr %158, ptr %160, align 8
  %161 = getelementptr i8, ptr %159, i64 8
  store ptr %150, ptr %161, align 8
  %162 = getelementptr i8, ptr %159, i64 24
  store ptr null, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 24, ptr %159)
  store ptr @function_typ, ptr %159, align 8
  %164 = alloca [2 x ptr], align 8
  store ptr %138, ptr %164, align 8
  %165 = getelementptr inbounds i8, ptr %164, i64 8
  store ptr %159, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %164)
  %167 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator)
  %168 = alloca { ptr, ptr }, align 8
  store ptr %119, ptr %168, align 8
  %169 = getelementptr inbounds i8, ptr %168, i64 8
  store ptr @function_typ, ptr %169, align 8
  %170 = call ptr @behavior_wrapper(ptr nonnull @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, { ptr, ptr, ptr, i32 } %129, ptr nonnull %168)
  call void %170({ ptr, ptr, ptr, i32 } %129, { ptr, ptr, ptr, i32 } %129, ptr nonnull %164, { ptr, ptr, ptr, i32 } %126, { ptr } %110) #25
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @MapIterator, ptr %171, align 8
  %172 = getelementptr inbounds i8, ptr %171, i64 8
  store ptr %67, ptr %172, align 8
  %173 = getelementptr inbounds i8, ptr %171, i64 16
  %174 = getelementptr inbounds i8, ptr %171, i64 24
  store i32 10, ptr %174, align 8
  call void @set_offset(ptr nonnull %171, ptr nonnull @Iterator)
  %175 = load ptr, ptr %171, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = load ptr, ptr %172, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 1
  %179 = load ptr, ptr %173, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 2
  %181 = load i32, ptr %174, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %181, 3
  ret { ptr, ptr, ptr, i32 } %182
}

define void @Iterable_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr nonnull %30, ptr nonnull @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr @behavior_wrapper(ptr %51, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5)
  %53 = call { ptr, i160 } %52({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #25
  %.fca.0.extract22 = extractvalue { ptr, i160 } %53, 0
  %54 = load ptr, ptr %7, align 8
  %55 = load ptr, ptr %6, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %55)
  %57 = load i32, ptr %9, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr ptr, ptr %55, i64 %58
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %54)
  %62 = icmp ne ptr %.fca.0.extract22, @nil_typ
  %63 = icmp ne ptr %.fca.0.extract22, null
  %.not28 = and i1 %62, %63
  br i1 %.not28, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %._crit_edge1
  call void %.fca.0.extract3({ ptr, i160 } %53)
  br label %._crit_edge1

.critedge:                                        ; preds = %._crit_edge1
  ret void
}

define { ptr, i160 } @Iterable_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract13, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract14, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract15, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract16, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Iterable)
  %.fca.0.extract9 = extractvalue { ptr, i160 } %3, 0
  %.fca.1.extract10 = extractvalue { ptr, i160 } %3, 1
  %.fca.0.extract3 = extractvalue { ptr } %4, 0
  %11 = load ptr, ptr %7, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %11, 0
  %13 = load ptr, ptr %8, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %13, 1
  %15 = load ptr, ptr %9, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %15, 2
  %17 = load i32, ptr %10, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %17, 3
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %20 = call ptr @llvm.invariant.start.p0(i64 184, ptr %11)
  %21 = sext i32 %17 to i64
  %22 = getelementptr ptr, ptr %11, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @behavior_wrapper(ptr %24, { ptr, ptr, ptr, i32 } %18, ptr nonnull %6)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %6) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %27, i64 8
  store ptr %.fca.1.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  store ptr %.fca.2.extract, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %27, i64 24
  store i32 %.fca.3.extract, ptr %30, align 8
  call void @set_offset(ptr nonnull %27, ptr nonnull @Iterator)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = load ptr, ptr %27, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %31, i64 8
  %34 = load ptr, ptr %28, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr inbounds i8, ptr %31, i64 16
  %36 = load ptr, ptr %29, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr inbounds i8, ptr %31, i64 24
  %38 = load i32, ptr %30, align 8
  store i32 %38, ptr %37, align 8
  call void @set_offset(ptr nonnull %31, ptr nonnull @Iterator)
  %39 = load ptr, ptr %31, align 8
  %40 = load ptr, ptr %33, align 8
  %41 = load ptr, ptr %35, align 8
  %42 = load i32, ptr %37, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %41, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %42, 3
  %47 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %48 = call ptr @llvm.invariant.start.p0(i64 24, ptr %39)
  %49 = sext i32 %42 to i64
  %50 = getelementptr ptr, ptr %39, i64 %49
  %51 = getelementptr i8, ptr %50, i64 8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %5
  %.045 = phi ptr [ %.fca.0.extract9, %5 ], [ %.146, %._crit_edge ]
  %.0 = phi i160 [ %.fca.1.extract10, %5 ], [ %.1, %._crit_edge ]
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %46, ptr nonnull %6)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %6) #25
  %.fca.0.extract40 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %8, align 8
  %56 = load ptr, ptr %7, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 184, ptr %56)
  %58 = load i32, ptr %10, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp ne ptr %.fca.0.extract40, @nil_typ
  %64 = icmp ne ptr %.fca.0.extract40, null
  %.not48 = and i1 %63, %64
  br i1 %.not48, label %65, label %._crit_edge

65:                                               ; preds = %._crit_edge1
  %66 = insertvalue { ptr, i160 } undef, ptr %.045, 0
  %67 = insertvalue { ptr, i160 } %66, i160 %.0, 1
  %68 = call { ptr, i160 } %.fca.0.extract3({ ptr, i160 } %67, { ptr, i160 } %54)
  %.fca.0.extract27 = extractvalue { ptr, i160 } %68, 0
  %.fca.1.extract28 = extractvalue { ptr, i160 } %68, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %65
  %.146 = phi ptr [ %.fca.0.extract27, %65 ], [ %.045, %._crit_edge1 ]
  %.1 = phi i160 [ %.fca.1.extract28, %65 ], [ %.0, %._crit_edge1 ]
  br i1 %.not48, label %._crit_edge1, label %69

69:                                               ; preds = %._crit_edge
  %70 = insertvalue { ptr, i160 } undef, ptr %.146, 0
  %71 = insertvalue { ptr, i160 } %70, i160 %.1, 1
  ret { ptr, i160 } %71
}

define noundef i1 @Iterable_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr nonnull %30, ptr nonnull @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %51

51:                                               ; preds = %65, %4
  %52 = load ptr, ptr %50, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #25
  %.fca.0.extract25 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %7, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 184, ptr %56)
  %58 = load i32, ptr %9, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp eq ptr %.fca.0.extract25, @nil_typ
  %64 = icmp eq ptr %.fca.0.extract25, null
  %.not28.not = or i1 %63, %64
  br i1 %.not28.not, label %.critedge.cont, label %65

65:                                               ; preds = %51
  %66 = call i1 %.fca.0.extract3({ ptr, i160 } %54)
  br i1 %66, label %51, label %.critedge.cont

.critedge.cont:                                   ; preds = %51, %65
  ret i1 %.not28.not
}

define noundef i1 @Iterable_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr nonnull %30, ptr nonnull @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %51

51:                                               ; preds = %65, %4
  %52 = load ptr, ptr %50, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #25
  %.fca.0.extract23 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %7, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 184, ptr %56)
  %58 = load i32, ptr %9, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp ne ptr %.fca.0.extract23, @nil_typ
  %64 = icmp ne ptr %.fca.0.extract23, null
  %.not26 = and i1 %63, %64
  br i1 %.not26, label %65, label %.critedge.cont

65:                                               ; preds = %51
  %66 = call i1 %.fca.0.extract3({ ptr, i160 } %54)
  br i1 %66, label %.critedge.cont, label %51

.critedge.cont:                                   ; preds = %65, %51
  ret i1 %.not26
}

define { ptr, ptr, ptr, i32 } @Iterable_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readonly %2, { ptr } %3) {
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %9)
  %17 = load ptr, ptr %2, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = alloca [3 x ptr], align 8
  store ptr @MapIterable, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %16, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr %19, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_MapIterable, ptr nonnull %20)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %16, ptr %25, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  store ptr %19, ptr %26, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %25)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = load ptr, ptr %5, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 8
  %31 = load ptr, ptr %6, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %28, i64 16
  %33 = load ptr, ptr %7, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %28, i64 24
  %35 = load i32, ptr %8, align 8
  store i32 %35, ptr %34, align 8
  call void @set_offset(ptr nonnull %28, ptr nonnull @Iterable)
  %36 = load ptr, ptr %28, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = load i32, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %42, 3
  %44 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr undef, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 10, 3
  %47 = load ptr, ptr %6, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 184, ptr %48)
  %50 = load i32, ptr %8, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = call ptr @bump_malloc(i64 24)
  %56 = getelementptr i8, ptr %55, i64 8
  store ptr %54, ptr %56, align 8
  %57 = getelementptr i8, ptr %55, i64 16
  store ptr null, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  store ptr @Iterable, ptr %55, align 8
  %59 = load ptr, ptr %2, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 184, ptr %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 32)
  %71 = getelementptr i8, ptr %70, i64 16
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 8
  store ptr %61, ptr %72, align 8
  %73 = getelementptr i8, ptr %70, i64 24
  store ptr null, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %70)
  store ptr @function_typ, ptr %70, align 8
  %75 = alloca [2 x ptr], align 8
  store ptr %55, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  store ptr %70, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %75)
  %78 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable)
  %79 = alloca { ptr, ptr }, align 8
  store ptr %36, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr @function_typ, ptr %80, align 8
  %81 = call ptr @behavior_wrapper(ptr nonnull @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, { ptr, ptr, ptr, i32 } %46, ptr nonnull %79)
  call void %81({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %75, { ptr, ptr, ptr, i32 } %43, { ptr } %3) #25
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @MapIterable, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %82, i64 8
  store ptr %25, ptr %83, align 8
  %84 = getelementptr inbounds i8, ptr %82, i64 16
  %85 = getelementptr inbounds i8, ptr %82, i64 24
  store i32 10, ptr %85, align 8
  call void @set_offset(ptr nonnull %82, ptr nonnull @MapIterable)
  %86 = load ptr, ptr %82, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %88 = load ptr, ptr %83, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 1
  %90 = load ptr, ptr %84, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 2
  %92 = load i32, ptr %85, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  ret { ptr, ptr, ptr, i32 } %93
}

define { ptr, ptr, ptr, i32 } @Iterable_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %9)
  %17 = alloca [2 x ptr], align 8
  store ptr @FilterIterable, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %16, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FilterIterable, ptr nonnull %17)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  store ptr %16, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %5, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %6, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %7, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %8, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @Iterable)
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  %39 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterable, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr undef, 2
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 10, 3
  %42 = load ptr, ptr %6, align 8
  %43 = load ptr, ptr %5, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %43)
  %45 = load i32, ptr %8, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = call ptr @bump_malloc(i64 24)
  %51 = getelementptr i8, ptr %50, i64 8
  store ptr %49, ptr %51, align 8
  %52 = getelementptr i8, ptr %50, i64 16
  store ptr null, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 16, ptr %50)
  store ptr @Iterable, ptr %50, align 8
  %54 = load ptr, ptr %6, align 8
  %55 = load ptr, ptr %5, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %55)
  %57 = load i32, ptr %8, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr ptr, ptr %55, i64 %58
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %54)
  %62 = call ptr @bump_malloc(i64 32)
  %63 = getelementptr i8, ptr %62, i64 16
  store ptr %61, ptr %63, align 8
  %64 = getelementptr i8, ptr %62, i64 8
  store ptr @_parameterization_i1, ptr %64, align 8
  %65 = getelementptr i8, ptr %62, i64 24
  store ptr null, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr %62)
  store ptr @function_typ, ptr %62, align 8
  %67 = alloca [2 x ptr], align 8
  store ptr %50, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %62, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %67)
  %70 = call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @FilterIterable)
  %71 = alloca { ptr, ptr }, align 8
  store ptr %31, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr @function_typ, ptr %72, align 8
  %73 = call ptr @behavior_wrapper(ptr nonnull @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1, { ptr, ptr, ptr, i32 } %41, ptr nonnull %71)
  call void %73({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %67, { ptr, ptr, ptr, i32 } %38, { ptr } %3) #25
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @FilterIterable, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %74, i64 8
  store ptr %21, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %74, i64 16
  %77 = getelementptr inbounds i8, ptr %74, i64 24
  store i32 10, ptr %77, align 8
  call void @set_offset(ptr nonnull %74, ptr nonnull @FilterIterable)
  %78 = load ptr, ptr %74, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %75, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %76, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %77, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  ret { ptr, ptr, ptr, i32 } %85
}

define { ptr, ptr, ptr, i32 } @Iterable_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract7, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract8, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract9, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract10, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 184, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = alloca [2 x ptr], align 8
  store ptr @ChainIterable, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %20, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ChainIterable, ptr nonnull %21)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %20, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = load ptr, ptr %5, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 8
  %30 = load ptr, ptr %6, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds i8, ptr %27, i64 16
  %32 = load ptr, ptr %7, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %27, i64 24
  %34 = load i32, ptr %8, align 8
  store i32 %34, ptr %33, align 8
  call void @set_offset(ptr nonnull %27, ptr nonnull @Iterable)
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = load ptr, ptr %9, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 8
  %46 = load ptr, ptr %10, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %43, i64 16
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %43, i64 24
  %50 = load i32, ptr %12, align 8
  store i32 %50, ptr %49, align 8
  call void @set_offset(ptr nonnull %43, ptr nonnull @Iterable)
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 184, ptr %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 24)
  %71 = getelementptr i8, ptr %70, i64 8
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 16
  store ptr null, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  store ptr @Iterable, ptr %70, align 8
  %74 = load ptr, ptr %6, align 8
  %75 = load ptr, ptr %5, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 184, ptr %75)
  %77 = load i32, ptr %8, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %74)
  %82 = call ptr @bump_malloc(i64 24)
  %83 = getelementptr i8, ptr %82, i64 8
  store ptr %81, ptr %83, align 8
  %84 = getelementptr i8, ptr %82, i64 16
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 16, ptr %82)
  store ptr @Iterable, ptr %82, align 8
  %86 = alloca [2 x ptr], align 8
  store ptr %70, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %82, ptr %87, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %86)
  %89 = call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @ChainIterable)
  %90 = alloca { ptr, ptr }, align 8
  store ptr %35, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %51, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr nonnull @ChainIterable_B_init_firstIterableT_secondIterableT, { ptr, ptr, ptr, i32 } %61, ptr nonnull %90)
  call void %92({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %86, { ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %58) #25
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ChainIterable, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %93, i64 8
  store ptr %25, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %93, i64 16
  %96 = getelementptr inbounds i8, ptr %93, i64 24
  store i32 10, ptr %96, align 8
  call void @set_offset(ptr nonnull %93, ptr nonnull @ChainIterable)
  %97 = load ptr, ptr %93, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %94, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %95, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %96, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @Iterable_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract7, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract8, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract9, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract10, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 184, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterable, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %20, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_InterleaveIterable, ptr nonnull %21)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %20, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = load ptr, ptr %5, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 8
  %30 = load ptr, ptr %6, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds i8, ptr %27, i64 16
  %32 = load ptr, ptr %7, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %27, i64 24
  %34 = load i32, ptr %8, align 8
  store i32 %34, ptr %33, align 8
  call void @set_offset(ptr nonnull %27, ptr nonnull @Iterable)
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = load ptr, ptr %9, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 8
  %46 = load ptr, ptr %10, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %43, i64 16
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %43, i64 24
  %50 = load i32, ptr %12, align 8
  store i32 %50, ptr %49, align 8
  call void @set_offset(ptr nonnull %43, ptr nonnull @Iterable)
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 184, ptr %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 24)
  %71 = getelementptr i8, ptr %70, i64 8
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 16
  store ptr null, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  store ptr @Iterable, ptr %70, align 8
  %74 = load ptr, ptr %6, align 8
  %75 = load ptr, ptr %5, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 184, ptr %75)
  %77 = load i32, ptr %8, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %74)
  %82 = call ptr @bump_malloc(i64 24)
  %83 = getelementptr i8, ptr %82, i64 8
  store ptr %81, ptr %83, align 8
  %84 = getelementptr i8, ptr %82, i64 16
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 16, ptr %82)
  store ptr @Iterable, ptr %82, align 8
  %86 = alloca [2 x ptr], align 8
  store ptr %70, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %82, ptr %87, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %86)
  %89 = call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @InterleaveIterable)
  %90 = alloca { ptr, ptr }, align 8
  store ptr %35, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %51, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr nonnull @InterleaveIterable_B_init_firstIterableT_secondIterableT, { ptr, ptr, ptr, i32 } %61, ptr nonnull %90)
  call void %92({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %86, { ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %58) #25
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @InterleaveIterable, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %93, i64 8
  store ptr %25, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %93, i64 16
  %96 = getelementptr inbounds i8, ptr %93, i64 24
  store i32 10, ptr %96, align 8
  call void @set_offset(ptr nonnull %93, ptr nonnull @InterleaveIterable)
  %97 = load ptr, ptr %93, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %94, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %95, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %96, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @Iterable_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract30, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract31, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract32, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract33, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract23, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract24, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract25, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract26, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 184, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %22 = sext i32 %.fca.3.extract26 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract23, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %.fca.1.extract24)
  %26 = load ptr, ptr %6, align 8
  %27 = load ptr, ptr %5, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 184, ptr %27)
  %29 = load i32, ptr %8, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @typegetter_wrapper(ptr %32, ptr %26)
  %34 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %35 = load ptr, ptr %23, align 8
  %36 = call ptr @typegetter_wrapper(ptr %35, ptr %.fca.1.extract24)
  %37 = call ptr @bump_malloc(i64 32)
  %38 = getelementptr i8, ptr %37, i64 16
  store ptr %36, ptr %38, align 8
  %39 = getelementptr i8, ptr %37, i64 8
  store ptr %33, ptr %39, align 8
  %40 = getelementptr i8, ptr %37, i64 24
  store ptr null, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 24, ptr %37)
  store ptr @Pair, ptr %37, align 8
  %42 = alloca [4 x ptr], align 8
  store ptr @ZipIterable, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %20, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %42, i64 16
  store ptr %25, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %42, i64 24
  store ptr %37, ptr %45, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ZipIterable, ptr nonnull %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %20, ptr %48, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  store ptr %25, ptr %49, align 8
  %50 = getelementptr i8, ptr %48, i64 16
  store ptr %37, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %48)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = load ptr, ptr %5, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr inbounds i8, ptr %52, i64 8
  %55 = load ptr, ptr %6, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr inbounds i8, ptr %52, i64 16
  %57 = load ptr, ptr %7, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr inbounds i8, ptr %52, i64 24
  %59 = load i32, ptr %8, align 8
  store i32 %59, ptr %58, align 8
  call void @set_offset(ptr nonnull %52, ptr nonnull @Iterable)
  %60 = load ptr, ptr %52, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = load ptr, ptr %9, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr inbounds i8, ptr %68, i64 8
  %71 = load ptr, ptr %10, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr inbounds i8, ptr %68, i64 16
  %73 = load ptr, ptr %11, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr inbounds i8, ptr %68, i64 24
  %75 = load i32, ptr %12, align 8
  store i32 %75, ptr %74, align 8
  call void @set_offset(ptr nonnull %68, ptr nonnull @Iterable)
  %76 = load ptr, ptr %68, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %70, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %72, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %74, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterable, ptr undef, ptr undef, i32 undef }, ptr %48, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr undef, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 10, 3
  %87 = load ptr, ptr %6, align 8
  %88 = load ptr, ptr %5, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %88)
  %90 = load i32, ptr %8, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %87)
  %95 = call ptr @bump_malloc(i64 24)
  %96 = getelementptr i8, ptr %95, i64 8
  store ptr %94, ptr %96, align 8
  %97 = getelementptr i8, ptr %95, i64 16
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  store ptr @Iterable, ptr %95, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %100 = load ptr, ptr %23, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %.fca.1.extract24)
  %102 = call ptr @bump_malloc(i64 24)
  %103 = getelementptr i8, ptr %102, i64 8
  store ptr %101, ptr %103, align 8
  %104 = getelementptr i8, ptr %102, i64 16
  store ptr null, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  store ptr @Iterable, ptr %102, align 8
  %106 = alloca [2 x ptr], align 8
  store ptr %95, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr %102, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %106)
  %109 = call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable)
  %110 = alloca { ptr, ptr }, align 8
  store ptr %60, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %76, ptr %111, align 8
  %112 = call ptr @behavior_wrapper(ptr nonnull @ZipIterable_B_init_firstIterableT_secondIterableU, { ptr, ptr, ptr, i32 } %86, ptr nonnull %110)
  call void %112({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %83) #25
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ZipIterable, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %113, i64 8
  store ptr %48, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %113, i64 16
  %116 = getelementptr inbounds i8, ptr %113, i64 24
  store i32 10, ptr %116, align 8
  call void @set_offset(ptr nonnull %113, ptr nonnull @ZipIterable)
  %117 = load ptr, ptr %113, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %114, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = load ptr, ptr %115, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %123 = load i32, ptr %116, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  ret { ptr, ptr, ptr, i32 } %124
}

define { ptr, ptr, ptr, i32 } @Iterable_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract30, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract31, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract32, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract33, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract23, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract24, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract25, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract26, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 184, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %22 = sext i32 %.fca.3.extract26 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract23, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %.fca.1.extract24)
  %26 = load ptr, ptr %6, align 8
  %27 = load ptr, ptr %5, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 184, ptr %27)
  %29 = load i32, ptr %8, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @typegetter_wrapper(ptr %32, ptr %26)
  %34 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %35 = load ptr, ptr %23, align 8
  %36 = call ptr @typegetter_wrapper(ptr %35, ptr %.fca.1.extract24)
  %37 = call ptr @bump_malloc(i64 32)
  %38 = getelementptr i8, ptr %37, i64 16
  store ptr %36, ptr %38, align 8
  %39 = getelementptr i8, ptr %37, i64 8
  store ptr %33, ptr %39, align 8
  %40 = getelementptr i8, ptr %37, i64 24
  store ptr null, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 24, ptr %37)
  store ptr @Pair, ptr %37, align 8
  %42 = alloca [4 x ptr], align 8
  store ptr @ProductIterable, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %20, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %42, i64 16
  store ptr %25, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %42, i64 24
  store ptr %37, ptr %45, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ProductIterable, ptr nonnull %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %20, ptr %48, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  store ptr %25, ptr %49, align 8
  %50 = getelementptr i8, ptr %48, i64 16
  store ptr %37, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %48)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = load ptr, ptr %5, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr inbounds i8, ptr %52, i64 8
  %55 = load ptr, ptr %6, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr inbounds i8, ptr %52, i64 16
  %57 = load ptr, ptr %7, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr inbounds i8, ptr %52, i64 24
  %59 = load i32, ptr %8, align 8
  store i32 %59, ptr %58, align 8
  call void @set_offset(ptr nonnull %52, ptr nonnull @Iterable)
  %60 = load ptr, ptr %52, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = load ptr, ptr %9, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr inbounds i8, ptr %68, i64 8
  %71 = load ptr, ptr %10, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr inbounds i8, ptr %68, i64 16
  %73 = load ptr, ptr %11, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr inbounds i8, ptr %68, i64 24
  %75 = load i32, ptr %12, align 8
  store i32 %75, ptr %74, align 8
  call void @set_offset(ptr nonnull %68, ptr nonnull @Iterable)
  %76 = load ptr, ptr %68, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %70, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %72, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %74, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterable, ptr undef, ptr undef, i32 undef }, ptr %48, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr undef, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 10, 3
  %87 = load ptr, ptr %6, align 8
  %88 = load ptr, ptr %5, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %88)
  %90 = load i32, ptr %8, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %87)
  %95 = call ptr @bump_malloc(i64 24)
  %96 = getelementptr i8, ptr %95, i64 8
  store ptr %94, ptr %96, align 8
  %97 = getelementptr i8, ptr %95, i64 16
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  store ptr @Iterable, ptr %95, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %100 = load ptr, ptr %23, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %.fca.1.extract24)
  %102 = call ptr @bump_malloc(i64 24)
  %103 = getelementptr i8, ptr %102, i64 8
  store ptr %101, ptr %103, align 8
  %104 = getelementptr i8, ptr %102, i64 16
  store ptr null, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  store ptr @Iterable, ptr %102, align 8
  %106 = alloca [2 x ptr], align 8
  store ptr %95, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr %102, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %106)
  %109 = call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ProductIterable)
  %110 = alloca { ptr, ptr }, align 8
  store ptr %60, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %76, ptr %111, align 8
  %112 = call ptr @behavior_wrapper(ptr nonnull @ProductIterable_B_init_firstIterableT_secondIterableU, { ptr, ptr, ptr, i32 } %86, ptr nonnull %110)
  call void %112({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %83) #25
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ProductIterable, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %113, i64 8
  store ptr %48, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %113, i64 16
  %116 = getelementptr inbounds i8, ptr %113, i64 24
  store i32 10, ptr %116, align 8
  call void @set_offset(ptr nonnull %113, ptr nonnull @ProductIterable)
  %117 = load ptr, ptr %113, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %114, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = load ptr, ptr %115, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %123 = load i32, ptr %116, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  ret { ptr, ptr, ptr, i32 } %124
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ProductIterable(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ProductIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 216
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_1(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_2(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 240
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ProductIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 304
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ProductIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ProductIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 416, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 416, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract53, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract55, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract57, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ProductIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 416, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract43, ptr %19, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep46, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep48, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep50, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract33, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract35, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract37, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 416, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 32
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #24
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract23, ptr %50, align 8
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep26 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract25, ptr %.fca.1.gep26, align 8
  %.fca.2.extract27 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep28 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract27, ptr %.fca.2.gep28, align 8
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep30 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract29, ptr %.fca.3.gep30, align 8
  call void @assume_offset(ptr nonnull %50, ptr nonnull @Iterable)
  %51 = load ptr, ptr %6, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 416, ptr %52)
  %54 = load i32, ptr %8, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = load ptr, ptr %56, align 8
  %58 = call ptr @typegetter_wrapper(ptr %57, ptr %51)
  %59 = load ptr, ptr %6, align 8
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 416, ptr %60)
  %62 = load i32, ptr %8, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = call ptr @typegetter_wrapper(ptr %66, ptr %59)
  %68 = load ptr, ptr %6, align 8
  %69 = load ptr, ptr %5, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 416, ptr %69)
  %71 = load i32, ptr %8, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr ptr, ptr %69, i64 %72
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @typegetter_wrapper(ptr %74, ptr %68)
  %76 = load ptr, ptr %6, align 8
  %77 = load ptr, ptr %5, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 416, ptr %77)
  %79 = load i32, ptr %8, align 8
  %80 = sext i32 %79 to i64
  %81 = getelementptr ptr, ptr %77, i64 %80
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @typegetter_wrapper(ptr %83, ptr %76)
  %85 = call ptr @bump_malloc(i64 32)
  %86 = getelementptr i8, ptr %85, i64 16
  store ptr %84, ptr %86, align 8
  %87 = getelementptr i8, ptr %85, i64 8
  store ptr %75, ptr %87, align 8
  %88 = getelementptr i8, ptr %85, i64 24
  store ptr null, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 24, ptr %85)
  store ptr @Pair, ptr %85, align 8
  %90 = alloca [4 x ptr], align 8
  store ptr @ProductIterator, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %58, ptr %91, align 8
  %92 = getelementptr inbounds i8, ptr %90, i64 16
  store ptr %67, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %90, i64 24
  store ptr %85, ptr %93, align 8
  %94 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ProductIterator, ptr nonnull %90)
  %95 = extractvalue { i64, i64 } %94, 0
  %96 = call ptr @bump_malloc(i64 %95)
  store ptr %58, ptr %96, align 8
  %97 = getelementptr i8, ptr %96, i64 8
  store ptr %67, ptr %97, align 8
  %98 = getelementptr i8, ptr %96, i64 16
  store ptr %85, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %96)
  %100 = load ptr, ptr %6, align 8
  %101 = load ptr, ptr %5, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 416, ptr %101)
  %103 = load i32, ptr %8, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr ptr, ptr %101, i64 %104
  %106 = getelementptr i8, ptr %105, i64 24
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %107, align 8
  %109 = call { ptr, ptr, ptr, i32 } %108(ptr %100) #24
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %109, 0
  store ptr %.fca.0.extract9, ptr %110, align 8
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %109, 1
  %.fca.1.gep12 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %.fca.1.extract11, ptr %.fca.1.gep12, align 8
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %109, 2
  %.fca.2.gep14 = getelementptr inbounds i8, ptr %110, i64 16
  store ptr %.fca.2.extract13, ptr %.fca.2.gep14, align 8
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %109, 3
  %.fca.3.gep16 = getelementptr inbounds i8, ptr %110, i64 24
  store i32 %.fca.3.extract15, ptr %.fca.3.gep16, align 8
  call void @assume_offset(ptr nonnull %110, ptr nonnull @Iterable)
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = load ptr, ptr %.fca.1.gep12, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %113, 1
  %115 = load ptr, ptr %.fca.2.gep14, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %115, 2
  %117 = load i32, ptr %.fca.3.gep16, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %117, 3
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %111)
  %121 = sext i32 %117 to i64
  %122 = getelementptr ptr, ptr %111, i64 %121
  %123 = getelementptr i8, ptr %122, i64 8
  %124 = load ptr, ptr %123, align 8
  %125 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %118, ptr nonnull %4)
  %126 = call { ptr, ptr, ptr, i32 } %125({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr nonnull %4) #25
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %126, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %126, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %126, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %126, 3
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %127, i64 8
  store ptr %.fca.1.extract3, ptr %128, align 8
  %129 = getelementptr inbounds i8, ptr %127, i64 16
  store ptr %.fca.2.extract5, ptr %129, align 8
  %130 = getelementptr inbounds i8, ptr %127, i64 24
  store i32 %.fca.3.extract7, ptr %130, align 8
  call void @set_offset(ptr nonnull %127, ptr nonnull @Iterator)
  %131 = load ptr, ptr %6, align 8
  %132 = load ptr, ptr %5, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 416, ptr %132)
  %134 = load i32, ptr %8, align 8
  %135 = sext i32 %134 to i64
  %136 = getelementptr ptr, ptr %132, i64 %135
  %137 = getelementptr i8, ptr %136, i64 32
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %138, align 8
  %140 = call { ptr, ptr, ptr, i32 } %139(ptr %131) #24
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 0
  store ptr %.fca.0.extract, ptr %141, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %141, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %141, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %141, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %141, ptr nonnull @Iterable)
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  %143 = load ptr, ptr %127, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr inbounds i8, ptr %142, i64 8
  %145 = load ptr, ptr %128, align 8
  store ptr %145, ptr %144, align 8
  %146 = getelementptr inbounds i8, ptr %142, i64 16
  %147 = load ptr, ptr %129, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr inbounds i8, ptr %142, i64 24
  %149 = load i32, ptr %130, align 8
  store i32 %149, ptr %148, align 8
  call void @set_offset(ptr nonnull %142, ptr nonnull @Iterator)
  %150 = load ptr, ptr %142, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
  %152 = load ptr, ptr %144, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 1
  %154 = load ptr, ptr %146, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 2
  %156 = load i32, ptr %148, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %156, 3
  %158 = alloca { ptr, ptr, ptr, i32 }, align 8
  %159 = load ptr, ptr %141, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr inbounds i8, ptr %158, i64 8
  %161 = load ptr, ptr %.fca.1.gep, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr inbounds i8, ptr %158, i64 16
  %163 = load ptr, ptr %.fca.2.gep, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr inbounds i8, ptr %158, i64 24
  %165 = load i32, ptr %.fca.3.gep, align 8
  store i32 %165, ptr %164, align 8
  call void @set_offset(ptr nonnull %158, ptr nonnull @Iterable)
  %166 = load ptr, ptr %158, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %166, 0
  %168 = load ptr, ptr %160, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 1
  %170 = load ptr, ptr %162, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %170, 2
  %172 = load i32, ptr %164, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %171, i32 %172, 3
  %174 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterator, ptr undef, ptr undef, i32 undef }, ptr %96, 1
  %175 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr undef, 2
  %176 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 10, 3
  %177 = load ptr, ptr %6, align 8
  %178 = load ptr, ptr %5, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 416, ptr %178)
  %180 = load i32, ptr %8, align 8
  %181 = sext i32 %180 to i64
  %182 = getelementptr ptr, ptr %178, i64 %181
  %183 = load ptr, ptr %182, align 8
  %184 = call ptr @typegetter_wrapper(ptr %183, ptr %177)
  %185 = call ptr @bump_malloc(i64 24)
  %186 = getelementptr i8, ptr %185, i64 8
  store ptr %184, ptr %186, align 8
  %187 = getelementptr i8, ptr %185, i64 16
  store ptr null, ptr %187, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 16, ptr %185)
  store ptr @Iterator, ptr %185, align 8
  %189 = load ptr, ptr %6, align 8
  %190 = load ptr, ptr %5, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 416, ptr %190)
  %192 = load i32, ptr %8, align 8
  %193 = sext i32 %192 to i64
  %194 = getelementptr ptr, ptr %190, i64 %193
  %195 = getelementptr i8, ptr %194, i64 8
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @typegetter_wrapper(ptr %196, ptr %189)
  %198 = call ptr @bump_malloc(i64 24)
  %199 = getelementptr i8, ptr %198, i64 8
  store ptr %197, ptr %199, align 8
  %200 = getelementptr i8, ptr %198, i64 16
  store ptr null, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 16, ptr %198)
  store ptr @Iterable, ptr %198, align 8
  %202 = alloca [2 x ptr], align 8
  store ptr %185, ptr %202, align 8
  %203 = getelementptr inbounds i8, ptr %202, i64 8
  store ptr %198, ptr %203, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %202)
  %205 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @ProductIterator)
  %206 = alloca { ptr, ptr }, align 8
  store ptr %150, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %166, ptr %207, align 8
  %208 = call ptr @behavior_wrapper(ptr nonnull @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, { ptr, ptr, ptr, i32 } %176, ptr nonnull %206)
  call void %208({ ptr, ptr, ptr, i32 } %176, { ptr, ptr, ptr, i32 } %176, ptr nonnull %202, { ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %173) #25
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ProductIterator, ptr %209, align 8
  %210 = getelementptr inbounds i8, ptr %209, i64 8
  store ptr %96, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %209, i64 16
  %212 = getelementptr inbounds i8, ptr %209, i64 24
  store i32 10, ptr %212, align 8
  call void @set_offset(ptr nonnull %209, ptr nonnull @Iterator)
  %213 = load ptr, ptr %209, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = load ptr, ptr %210, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %215, 1
  %217 = load ptr, ptr %211, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %217, 2
  %219 = load i32, ptr %212, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, i32 %219, 3
  ret { ptr, ptr, ptr, i32 } %220
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ProductIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 152, i64 8 }
}

define ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 152
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_1(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_2(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract45 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract47 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract49 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract51 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract45, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract47, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract49, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract51, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @ProductIterator)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract33, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %.fca.1.extract35, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %.fca.2.extract37, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %11, i64 24
  store i32 %.fca.3.extract39, ptr %14, align 8
  call void @set_offset(ptr nonnull %11, ptr nonnull @Iterator)
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = load ptr, ptr %11, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 8
  %18 = load ptr, ptr %12, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %15, i64 16
  %20 = load ptr, ptr %13, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %15, i64 24
  %22 = load i32, ptr %14, align 8
  store i32 %22, ptr %21, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @Iterator)
  %23 = load ptr, ptr %8, align 8
  %24 = load ptr, ptr %7, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 112, ptr %24)
  %26 = load i32, ptr %10, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = getelementptr i8, ptr %28, i64 24
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 1
  %37 = load ptr, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 2
  %39 = load i32, ptr %21, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %39, 3
  call void %32(ptr %23, { ptr, ptr, ptr, i32 } %40) #23
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract23 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %41, i64 8
  store ptr %.fca.1.extract23, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %41, i64 16
  store ptr %.fca.2.extract25, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %41, i64 24
  store i32 %.fca.3.extract27, ptr %44, align 8
  call void @set_offset(ptr nonnull %41, ptr nonnull @Iterable)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = load ptr, ptr %41, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %45, i64 8
  %48 = load ptr, ptr %42, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %45, i64 16
  %50 = load ptr, ptr %43, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr inbounds i8, ptr %45, i64 24
  %52 = load i32, ptr %44, align 8
  store i32 %52, ptr %51, align 8
  call void @set_offset(ptr nonnull %45, ptr nonnull @Iterable)
  %53 = load ptr, ptr %8, align 8
  %54 = load ptr, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 112, ptr %54)
  %56 = load i32, ptr %10, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 40
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr i8, ptr %60, i64 8
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %45, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %47, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = load ptr, ptr %49, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 2
  %69 = load i32, ptr %51, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %69, 3
  call void %62(ptr %53, { ptr, ptr, ptr, i32 } %70) #23
  %71 = load ptr, ptr %8, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 112, ptr %72)
  %74 = load i32, ptr %10, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = getelementptr i8, ptr %76, i64 40
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = call { ptr, ptr, ptr, i32 } %79(ptr %71) #24
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %80, 0
  store ptr %.fca.0.extract13, ptr %81, align 8
  %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %80, 1
  %.fca.1.gep16 = getelementptr inbounds i8, ptr %81, i64 8
  store ptr %.fca.1.extract15, ptr %.fca.1.gep16, align 8
  %.fca.2.extract17 = extractvalue { ptr, ptr, ptr, i32 } %80, 2
  %.fca.2.gep18 = getelementptr inbounds i8, ptr %81, i64 16
  store ptr %.fca.2.extract17, ptr %.fca.2.gep18, align 8
  %.fca.3.extract19 = extractvalue { ptr, ptr, ptr, i32 } %80, 3
  %.fca.3.gep20 = getelementptr inbounds i8, ptr %81, i64 24
  store i32 %.fca.3.extract19, ptr %.fca.3.gep20, align 8
  call void @assume_offset(ptr nonnull %81, ptr nonnull @Iterable)
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = load ptr, ptr %.fca.1.gep16, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 1
  %86 = load ptr, ptr %.fca.2.gep18, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 2
  %88 = load i32, ptr %.fca.3.gep20, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 %88, 3
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %91 = call ptr @llvm.invariant.start.p0(i64 184, ptr %82)
  %92 = sext i32 %88 to i64
  %93 = getelementptr ptr, ptr %82, i64 %92
  %94 = getelementptr i8, ptr %93, i64 8
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %89, ptr nonnull %6)
  %97 = call { ptr, ptr, ptr, i32 } %96({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr nonnull %6) #25
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %97, 2
  %.fca.3.extract9 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %98, i64 8
  store ptr %.fca.1.extract5, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %98, i64 16
  store ptr %.fca.2.extract7, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %98, i64 24
  store i32 %.fca.3.extract9, ptr %101, align 8
  call void @set_offset(ptr nonnull %98, ptr nonnull @Iterator)
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = load ptr, ptr %98, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr inbounds i8, ptr %102, i64 8
  %105 = load ptr, ptr %99, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr inbounds i8, ptr %102, i64 16
  %107 = load ptr, ptr %100, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr inbounds i8, ptr %102, i64 24
  %109 = load i32, ptr %101, align 8
  store i32 %109, ptr %108, align 8
  call void @set_offset(ptr nonnull %102, ptr nonnull @Iterator)
  %110 = load ptr, ptr %8, align 8
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 112, ptr %111)
  %113 = load i32, ptr %10, align 8
  %114 = sext i32 %113 to i64
  %115 = getelementptr ptr, ptr %111, i64 %114
  %116 = getelementptr i8, ptr %115, i64 32
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr i8, ptr %117, i64 8
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %102, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = load ptr, ptr %104, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %122, 1
  %124 = load ptr, ptr %106, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 2
  %126 = load i32, ptr %108, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  call void %119(ptr %110, { ptr, ptr, ptr, i32 } %127) #23
  %128 = load ptr, ptr %8, align 8
  %129 = load ptr, ptr %7, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 112, ptr %129)
  %131 = load i32, ptr %10, align 8
  %132 = sext i32 %131 to i64
  %133 = getelementptr ptr, ptr %129, i64 %132
  %134 = getelementptr i8, ptr %133, i64 24
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %135, align 8
  %137 = call { ptr, ptr, ptr, i32 } %136(ptr %128) #24
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %137, 0
  store ptr %.fca.0.extract1, ptr %138, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %137, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %138, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %137, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %138, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %137, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %138, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %138, ptr nonnull @Iterator)
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %139, 0
  %141 = load ptr, ptr %.fca.1.gep, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %141, 1
  %143 = load ptr, ptr %.fca.2.gep, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %143, 2
  %145 = load i32, ptr %.fca.3.gep, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %145, 3
  %147 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %148 = call ptr @llvm.invariant.start.p0(i64 24, ptr %139)
  %149 = sext i32 %145 to i64
  %150 = getelementptr ptr, ptr %139, i64 %149
  %151 = getelementptr i8, ptr %150, i64 8
  %152 = load ptr, ptr %151, align 8
  %153 = call ptr @behavior_wrapper(ptr %152, { ptr, ptr, ptr, i32 } %146, ptr nonnull %6)
  %154 = call { ptr, i160 } %153({ ptr, ptr, ptr, i32 } %146, { ptr, ptr, ptr, i32 } %146, ptr nonnull %6) #25
  %155 = load ptr, ptr %8, align 8
  %156 = load ptr, ptr %7, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 112, ptr %156)
  %158 = load i32, ptr %10, align 8
  %159 = sext i32 %158 to i64
  %160 = getelementptr ptr, ptr %156, i64 %159
  %161 = getelementptr i8, ptr %160, i64 48
  %162 = load ptr, ptr %161, align 8
  %163 = getelementptr i8, ptr %162, i64 8
  %164 = load ptr, ptr %163, align 8
  call void %164(ptr %155, { ptr, i160 } %154) #23
  ret void
}

define { ptr, i160 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [3 x ptr], align 8
  %7 = alloca [2 x ptr], align 8
  %8 = alloca { ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract12, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract, ptr %16, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @ProductIterator)
  %17 = load ptr, ptr %14, align 8
  %18 = load ptr, ptr %13, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 112, ptr %18)
  %20 = load i32, ptr %16, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr ptr, ptr %18, i64 %21
  %23 = getelementptr i8, ptr %22, i64 48
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, i160 } %25(ptr %17) #24
  %.fca.0.extract = extractvalue { ptr, i160 } %26, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %26, 1
  %.fca.1.gep71 = getelementptr inbounds i8, ptr %5, i64 8
  %.fca.2.gep73 = getelementptr inbounds i8, ptr %5, i64 16
  %.fca.3.gep75 = getelementptr inbounds i8, ptr %5, i64 24
  %.fca.1.gep45 = getelementptr inbounds i8, ptr %9, i64 8
  %.fca.2.gep47 = getelementptr inbounds i8, ptr %9, i64 16
  %.fca.3.gep49 = getelementptr inbounds i8, ptr %9, i64 24
  %.fca.1.gep33 = getelementptr inbounds i8, ptr %10, i64 8
  %.fca.2.gep = getelementptr inbounds i8, ptr %10, i64 16
  %.fca.3.gep = getelementptr inbounds i8, ptr %10, i64 24
  %27 = getelementptr inbounds i8, ptr %11, i64 8
  %28 = getelementptr inbounds i8, ptr %11, i64 16
  %29 = getelementptr inbounds i8, ptr %11, i64 24
  %30 = getelementptr inbounds i8, ptr %12, i64 8
  %31 = getelementptr inbounds i8, ptr %12, i64 16
  %32 = getelementptr inbounds i8, ptr %12, i64 24
  br label %33

33:                                               ; preds = %177, %3
  %.sroa.3.0 = phi i160 [ %.fca.1.extract, %3 ], [ %.sroa.3.1, %177 ]
  %.sroa.0.0 = phi ptr [ %.fca.0.extract, %3 ], [ %.sroa.0.1, %177 ]
  %.sroa.065.0 = phi ptr [ undef, %3 ], [ %.sroa.065.1, %177 ]
  %.sroa.367.0 = phi i160 [ undef, %3 ], [ %.sroa.367.1, %177 ]
  %.079 = phi ptr [ undef, %3 ], [ %.180, %177 ]
  %.0 = phi i160 [ undef, %3 ], [ %.1, %177 ]
  %34 = load ptr, ptr %14, align 8
  %35 = load ptr, ptr %13, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 112, ptr %35)
  %37 = load i32, ptr %16, align 8
  %38 = sext i32 %37 to i64
  %39 = getelementptr ptr, ptr %35, i64 %38
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @typegetter_wrapper(ptr %40, ptr %34)
  %42 = icmp ne ptr %.sroa.0.0, @nil_typ
  %43 = icmp ne ptr %.sroa.0.0, null
  %.not82 = and i1 %42, %43
  br i1 %.not82, label %44, label %177

44:                                               ; preds = %33
  %45 = load ptr, ptr %14, align 8
  %46 = load ptr, ptr %13, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 112, ptr %46)
  %48 = load i32, ptr %16, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = getelementptr i8, ptr %50, i64 32
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr, ptr, ptr, i32 } %53(ptr %45) #24
  %.fca.0.extract68 = extractvalue { ptr, ptr, ptr, i32 } %54, 0
  store ptr %.fca.0.extract68, ptr %5, align 8
  %.fca.1.extract70 = extractvalue { ptr, ptr, ptr, i32 } %54, 1
  store ptr %.fca.1.extract70, ptr %.fca.1.gep71, align 8
  %.fca.2.extract72 = extractvalue { ptr, ptr, ptr, i32 } %54, 2
  store ptr %.fca.2.extract72, ptr %.fca.2.gep73, align 8
  %.fca.3.extract74 = extractvalue { ptr, ptr, ptr, i32 } %54, 3
  store i32 %.fca.3.extract74, ptr %.fca.3.gep75, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @Iterator)
  %55 = load ptr, ptr %5, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = load ptr, ptr %.fca.1.gep71, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 1
  %59 = load ptr, ptr %.fca.2.gep73, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 2
  %61 = load i32, ptr %.fca.3.gep75, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %61, 3
  %63 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  %65 = sext i32 %61 to i64
  %66 = getelementptr ptr, ptr %55, i64 %65
  %67 = getelementptr i8, ptr %66, i64 8
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @behavior_wrapper(ptr %68, { ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %70 = call { ptr, i160 } %69({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %4) #25
  %.fca.0.extract61 = extractvalue { ptr, i160 } %70, 0
  %.fca.1.extract63 = extractvalue { ptr, i160 } %70, 1
  %71 = load ptr, ptr %14, align 8
  %72 = load ptr, ptr %13, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 112, ptr %72)
  %74 = load i32, ptr %16, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr @typegetter_wrapper(ptr %78, ptr %71)
  %80 = icmp eq ptr %.fca.0.extract61, @nil_typ
  %81 = icmp eq ptr %.fca.0.extract61, null
  %.not84.not = or i1 %80, %81
  br i1 %.not84.not, label %82, label %177

82:                                               ; preds = %44
  %83 = load ptr, ptr %14, align 8
  %84 = load ptr, ptr %13, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 112, ptr %84)
  %86 = load i32, ptr %16, align 8
  %87 = sext i32 %86 to i64
  %88 = getelementptr ptr, ptr %84, i64 %87
  %89 = getelementptr i8, ptr %88, i64 24
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = call { ptr, ptr, ptr, i32 } %91(ptr %83) #24
  %.fca.0.extract42 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  store ptr %.fca.0.extract42, ptr %9, align 8
  %.fca.1.extract44 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  store ptr %.fca.1.extract44, ptr %.fca.1.gep45, align 8
  %.fca.2.extract46 = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  store ptr %.fca.2.extract46, ptr %.fca.2.gep47, align 8
  %.fca.3.extract48 = extractvalue { ptr, ptr, ptr, i32 } %92, 3
  store i32 %.fca.3.extract48, ptr %.fca.3.gep49, align 8
  call void @assume_offset(ptr nonnull %9, ptr nonnull @Iterator)
  %93 = load ptr, ptr %9, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = load ptr, ptr %.fca.1.gep45, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %97 = load ptr, ptr %.fca.2.gep47, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %99 = load i32, ptr %.fca.3.gep49, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %101 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %102 = call ptr @llvm.invariant.start.p0(i64 24, ptr %93)
  %103 = sext i32 %99 to i64
  %104 = getelementptr ptr, ptr %93, i64 %103
  %105 = getelementptr i8, ptr %104, i64 8
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %100, ptr nonnull %4)
  %108 = call { ptr, i160 } %107({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr nonnull %4) #25
  %109 = load ptr, ptr %14, align 8
  %110 = load ptr, ptr %13, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr %110)
  %112 = load i32, ptr %16, align 8
  %113 = sext i32 %112 to i64
  %114 = getelementptr ptr, ptr %110, i64 %113
  %115 = getelementptr i8, ptr %114, i64 48
  %116 = load ptr, ptr %115, align 8
  %117 = getelementptr i8, ptr %116, i64 8
  %118 = load ptr, ptr %117, align 8
  call void %118(ptr %109, { ptr, i160 } %108) #23
  %119 = load ptr, ptr %14, align 8
  %120 = load ptr, ptr %13, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 112, ptr %120)
  %122 = load i32, ptr %16, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr ptr, ptr %120, i64 %123
  %125 = getelementptr i8, ptr %124, i64 40
  %126 = load ptr, ptr %125, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = call { ptr, ptr, ptr, i32 } %127(ptr %119) #24
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %128, 0
  store ptr %.fca.0.extract30, ptr %10, align 8
  %.fca.1.extract32 = extractvalue { ptr, ptr, ptr, i32 } %128, 1
  store ptr %.fca.1.extract32, ptr %.fca.1.gep33, align 8
  %.fca.2.extract34 = extractvalue { ptr, ptr, ptr, i32 } %128, 2
  store ptr %.fca.2.extract34, ptr %.fca.2.gep, align 8
  %.fca.3.extract35 = extractvalue { ptr, ptr, ptr, i32 } %128, 3
  store i32 %.fca.3.extract35, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %129 = load ptr, ptr %10, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %129, 0
  %131 = load ptr, ptr %.fca.1.gep33, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 1
  %133 = load ptr, ptr %.fca.2.gep, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %133, 2
  %135 = load i32, ptr %.fca.3.gep, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, i32 %135, 3
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %138 = call ptr @llvm.invariant.start.p0(i64 184, ptr %129)
  %139 = sext i32 %135 to i64
  %140 = getelementptr ptr, ptr %129, i64 %139
  %141 = getelementptr i8, ptr %140, i64 8
  %142 = load ptr, ptr %141, align 8
  %143 = call ptr @behavior_wrapper(ptr %142, { ptr, ptr, ptr, i32 } %136, ptr nonnull %4)
  %144 = call { ptr, ptr, ptr, i32 } %143({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr nonnull %4) #25
  %.fca.0.extract20 = extractvalue { ptr, ptr, ptr, i32 } %144, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %144, 1
  %.fca.2.extract24 = extractvalue { ptr, ptr, ptr, i32 } %144, 2
  %.fca.3.extract25 = extractvalue { ptr, ptr, ptr, i32 } %144, 3
  store ptr %.fca.0.extract20, ptr %11, align 8
  store ptr %.fca.1.extract22, ptr %27, align 8
  store ptr %.fca.2.extract24, ptr %28, align 8
  store i32 %.fca.3.extract25, ptr %29, align 8
  call void @set_offset(ptr nonnull %11, ptr nonnull @Iterator)
  %145 = load ptr, ptr %11, align 8
  store ptr %145, ptr %12, align 8
  %146 = load ptr, ptr %27, align 8
  store ptr %146, ptr %30, align 8
  %147 = load ptr, ptr %28, align 8
  store ptr %147, ptr %31, align 8
  %148 = load i32, ptr %29, align 8
  store i32 %148, ptr %32, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @Iterator)
  %149 = load ptr, ptr %14, align 8
  %150 = load ptr, ptr %13, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 112, ptr %150)
  %152 = load i32, ptr %16, align 8
  %153 = sext i32 %152 to i64
  %154 = getelementptr ptr, ptr %150, i64 %153
  %155 = getelementptr i8, ptr %154, i64 32
  %156 = load ptr, ptr %155, align 8
  %157 = getelementptr i8, ptr %156, i64 8
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %12, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %159, 0
  %161 = load ptr, ptr %30, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %161, 1
  %163 = load ptr, ptr %31, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %163, 2
  %165 = load i32, ptr %32, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, i32 %165, 3
  call void %158(ptr %149, { ptr, ptr, ptr, i32 } %166) #23
  %167 = load ptr, ptr %14, align 8
  %168 = load ptr, ptr %13, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 112, ptr %168)
  %170 = load i32, ptr %16, align 8
  %171 = sext i32 %170 to i64
  %172 = getelementptr ptr, ptr %168, i64 %171
  %173 = getelementptr i8, ptr %172, i64 48
  %174 = load ptr, ptr %173, align 8
  %175 = load ptr, ptr %174, align 8
  %176 = call { ptr, i160 } %175(ptr %167) #24
  %.fca.0.extract14 = extractvalue { ptr, i160 } %176, 0
  %.fca.1.extract16 = extractvalue { ptr, i160 } %176, 1
  br label %177

177:                                              ; preds = %33, %82, %44
  %.sroa.3.1 = phi i160 [ %.sroa.3.0, %44 ], [ %.fca.1.extract16, %82 ], [ %.sroa.3.0, %33 ]
  %.sroa.0.1 = phi ptr [ %.sroa.0.0, %44 ], [ %.fca.0.extract14, %82 ], [ %.sroa.0.0, %33 ]
  %.sroa.065.1 = phi ptr [ %.fca.0.extract61, %44 ], [ %.fca.0.extract61, %82 ], [ %.sroa.065.0, %33 ]
  %.sroa.367.1 = phi i160 [ %.fca.1.extract63, %44 ], [ %.fca.1.extract63, %82 ], [ %.sroa.367.0, %33 ]
  %.180 = phi ptr [ %.sroa.0.0, %44 ], [ %.sroa.0.0, %82 ], [ %.079, %33 ]
  %.1 = phi i160 [ %.sroa.3.0, %44 ], [ %.sroa.3.0, %82 ], [ %.0, %33 ]
  %.reg2mem50.0.off0 = phi i1 [ false, %44 ], [ true, %82 ], [ false, %33 ]
  %.reg2mem52.0 = phi i1 [ true, %44 ], [ false, %82 ], [ false, %33 ]
  br i1 %.reg2mem50.0.off0, label %33, label %178

178:                                              ; preds = %177
  br i1 %.reg2mem52.0, label %179, label %234

179:                                              ; preds = %178
  %180 = load ptr, ptr %14, align 8
  %181 = load ptr, ptr %13, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 112, ptr %181)
  %183 = load i32, ptr %16, align 8
  %184 = sext i32 %183 to i64
  %185 = getelementptr ptr, ptr %181, i64 %184
  %186 = load ptr, ptr %185, align 8
  %187 = call ptr @typegetter_wrapper(ptr %186, ptr %180)
  %188 = load ptr, ptr %14, align 8
  %189 = load ptr, ptr %13, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 112, ptr %189)
  %191 = load i32, ptr %16, align 8
  %192 = sext i32 %191 to i64
  %193 = getelementptr ptr, ptr %189, i64 %192
  %194 = getelementptr i8, ptr %193, i64 8
  %195 = load ptr, ptr %194, align 8
  %196 = call ptr @typegetter_wrapper(ptr %195, ptr %188)
  store ptr @Pair, ptr %6, align 8
  %197 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %187, ptr %197, align 8
  %198 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %196, ptr %198, align 8
  %199 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Pair, ptr nonnull %6)
  %200 = extractvalue { i64, i64 } %199, 0
  %201 = call ptr @bump_malloc(i64 %200)
  store ptr %187, ptr %201, align 8
  %202 = getelementptr i8, ptr %201, i64 8
  store ptr %196, ptr %202, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %201)
  %204 = insertvalue { ptr, i160 } undef, ptr %.180, 0
  %205 = insertvalue { ptr, i160 } %204, i160 %.1, 1
  %206 = insertvalue { ptr, i160 } undef, ptr %.sroa.065.1, 0
  %207 = insertvalue { ptr, i160 } %206, i160 %.sroa.367.1, 1
  %208 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Pair, ptr undef, ptr undef, i32 undef }, ptr %201, 1
  %209 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr undef, 2
  %210 = insertvalue { ptr, ptr, ptr, i32 } %209, i32 10, 3
  %211 = load ptr, ptr %14, align 8
  %212 = load ptr, ptr %13, align 8
  %213 = call ptr @llvm.invariant.start.p0(i64 112, ptr %212)
  %214 = load i32, ptr %16, align 8
  %215 = sext i32 %214 to i64
  %216 = getelementptr ptr, ptr %212, i64 %215
  %217 = load ptr, ptr %216, align 8
  %218 = call ptr @typegetter_wrapper(ptr %217, ptr %211)
  %219 = load ptr, ptr %14, align 8
  %220 = load ptr, ptr %13, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 112, ptr %220)
  %222 = load i32, ptr %16, align 8
  %223 = sext i32 %222 to i64
  %224 = getelementptr ptr, ptr %220, i64 %223
  %225 = getelementptr i8, ptr %224, i64 8
  %226 = load ptr, ptr %225, align 8
  %227 = call ptr @typegetter_wrapper(ptr %226, ptr %219)
  store ptr %218, ptr %7, align 8
  %228 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %227, ptr %228, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %7)
  %230 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  store ptr %.180, ptr %8, align 8
  %231 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.sroa.065.1, ptr %231, align 8
  %232 = call ptr @behavior_wrapper(ptr nonnull @Pair_B_init_firstT_secondU, { ptr, ptr, ptr, i32 } %210, ptr nonnull %8)
  call void %232({ ptr, ptr, ptr, i32 } %210, { ptr, ptr, ptr, i32 } %210, ptr nonnull %7, { ptr, i160 } %205, { ptr, i160 } %207) #25
  %233 = ptrtoint ptr %201 to i64
  %.sroa.3.8.insert.ext = zext i64 %233 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  br label %234

234:                                              ; preds = %178, %179
  %.reg2mem48.sroa.3.0 = phi i160 [ %.sroa.3.8.insert.insert, %179 ], [ undef, %178 ]
  %.reg2mem48.sroa.0.0 = phi ptr [ @Pair, %179 ], [ @nil_typ, %178 ]
  %.reload49.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem48.sroa.0.0, 0
  %.reload49.fca.1.insert = insertvalue { ptr, i160 } %.reload49.fca.0.insert, i160 %.reg2mem48.sroa.3.0, 1
  ret { ptr, i160 } %.reload49.fca.1.insert
}

define { i64, i64 } @_data_size_Pair(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } @size_wrapper(ptr %6, ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } @size_wrapper(ptr %20, ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = tail call i64 @llvm.umax.i64(i64 %9, i64 %23)
  %25 = tail call i64 @llvm.umax.i64(i64 %24, i64 8)
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = getelementptr i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = tail call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr i8, ptr %26, i64 136
  %28 = load ptr, ptr %27, align 8
  ret ptr %28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @ProductIterator_getter_current_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 120
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 128
  %6 = load i160, ptr %5, align 4
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_current_first(ptr nocapture writeonly %0, { ptr, i160 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 120
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 128
  store i160 %.fca.1.extract, ptr %4, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 88
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 96
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 104
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 112
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_second_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 88
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 96
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 104
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 112
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_second_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_first_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Container(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Iterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_1(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract12, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Pair)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %10, { ptr, i160 } %3) #23
  %20 = load ptr, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = load i32, ptr %9, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 24
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, { ptr, i160 } %4) #23
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Pair)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #24
  ret { ptr, i160 } %17
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Pair)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #24
  ret { ptr, i160 } %17
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr %5, ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 16
  %14 = add i64 %13, %12
  %15 = getelementptr i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 72
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { i64, i64 } @size_wrapper(ptr %19, ptr nonnull %16)
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = load ptr, ptr %15, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 56
  %31 = load ptr, ptr %30, align 8
  %32 = tail call { ptr, i160 } @box_wrapper(ptr %31, ptr %27, ptr nonnull %28)
  ret { ptr, i160 } %32
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } @size_wrapper(ptr %6, ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } @size_wrapper(ptr %20, ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = load ptr, ptr %16, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 64
  %32 = load ptr, ptr %31, align 8
  tail call void @unbox_wrapper(ptr %32, { ptr, i160 } %1, ptr nonnull %29, ptr %28)
  ret void
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr %5, ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 16, %7
  %9 = icmp eq i64 %8, 0
  %reass.sub = sub i64 %7, %8
  %10 = add i64 %reass.sub, 16
  %11 = select i1 %9, i64 16, i64 %10
  %12 = getelementptr i8, ptr %0, i64 %11
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, i160 } @box_wrapper(ptr %16, ptr %12, ptr nonnull %13)
  ret { ptr, i160 } %17
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } @size_wrapper(ptr %6, ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %reass.sub = sub i64 %8, %9
  %11 = add i64 %reass.sub, 16
  %12 = select i1 %10, i64 16, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 64
  %17 = load ptr, ptr %16, align 8
  tail call void @unbox_wrapper(ptr %17, { ptr, i160 } %1, ptr nonnull %14, ptr %13)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Iterable(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ZipIterable(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ZipIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 216
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_1(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_2(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 240
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ZipIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 304
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ZipIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ZipIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 416, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 416, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ZipIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 416, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 416, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 32
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #24
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr nonnull %50, ptr nonnull @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4) #25
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr nonnull %67, ptr nonnull @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 416, ptr %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = load ptr, ptr %6, align 8
  %80 = load ptr, ptr %5, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 416, ptr %80)
  %82 = load i32, ptr %8, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr ptr, ptr %80, i64 %83
  %85 = getelementptr i8, ptr %84, i64 8
  %86 = load ptr, ptr %85, align 8
  %87 = call ptr @typegetter_wrapper(ptr %86, ptr %79)
  %88 = load ptr, ptr %6, align 8
  %89 = load ptr, ptr %5, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %89)
  %91 = load i32, ptr %8, align 8
  %92 = sext i32 %91 to i64
  %93 = getelementptr ptr, ptr %89, i64 %92
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @typegetter_wrapper(ptr %94, ptr %88)
  %96 = load ptr, ptr %6, align 8
  %97 = load ptr, ptr %5, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 416, ptr %97)
  %99 = load i32, ptr %8, align 8
  %100 = sext i32 %99 to i64
  %101 = getelementptr ptr, ptr %97, i64 %100
  %102 = getelementptr i8, ptr %101, i64 8
  %103 = load ptr, ptr %102, align 8
  %104 = call ptr @typegetter_wrapper(ptr %103, ptr %96)
  %105 = call ptr @bump_malloc(i64 32)
  %106 = getelementptr i8, ptr %105, i64 16
  store ptr %104, ptr %106, align 8
  %107 = getelementptr i8, ptr %105, i64 8
  store ptr %95, ptr %107, align 8
  %108 = getelementptr i8, ptr %105, i64 24
  store ptr null, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 24, ptr %105)
  store ptr @Pair, ptr %105, align 8
  %110 = alloca [4 x ptr], align 8
  store ptr @ZipIterator, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %78, ptr %111, align 8
  %112 = getelementptr inbounds i8, ptr %110, i64 16
  store ptr %87, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %110, i64 24
  store ptr %105, ptr %113, align 8
  %114 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ZipIterator, ptr nonnull %110)
  %115 = extractvalue { i64, i64 } %114, 0
  %116 = call ptr @bump_malloc(i64 %115)
  store ptr %78, ptr %116, align 8
  %117 = getelementptr i8, ptr %116, i64 8
  store ptr %87, ptr %117, align 8
  %118 = getelementptr i8, ptr %116, i64 16
  store ptr %105, ptr %118, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %116)
  %120 = load ptr, ptr %6, align 8
  %121 = load ptr, ptr %5, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 416, ptr %121)
  %123 = load i32, ptr %8, align 8
  %124 = sext i32 %123 to i64
  %125 = getelementptr ptr, ptr %121, i64 %124
  %126 = getelementptr i8, ptr %125, i64 24
  %127 = load ptr, ptr %126, align 8
  %128 = load ptr, ptr %127, align 8
  %129 = call { ptr, ptr, ptr, i32 } %128(ptr %120) #24
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %129, 0
  store ptr %.fca.0.extract17, ptr %130, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %129, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %130, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %129, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %130, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %129, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %130, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr nonnull %130, ptr nonnull @Iterable)
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = load ptr, ptr %.fca.1.gep20, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %133, 1
  %135 = load ptr, ptr %.fca.2.gep22, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %135, 2
  %137 = load i32, ptr %.fca.3.gep24, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %137, 3
  %139 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %140 = call ptr @llvm.invariant.start.p0(i64 184, ptr %131)
  %141 = sext i32 %137 to i64
  %142 = getelementptr ptr, ptr %131, i64 %141
  %143 = getelementptr i8, ptr %142, i64 8
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @behavior_wrapper(ptr %144, { ptr, ptr, ptr, i32 } %138, ptr nonnull %4)
  %146 = call { ptr, ptr, ptr, i32 } %145({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr nonnull %4) #25
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %146, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %146, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %146, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %146, 3
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %147, align 8
  %148 = getelementptr inbounds i8, ptr %147, i64 8
  store ptr %.fca.1.extract7, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 16
  store ptr %.fca.2.extract9, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %147, i64 24
  store i32 %.fca.3.extract11, ptr %150, align 8
  call void @set_offset(ptr nonnull %147, ptr nonnull @Iterator)
  %151 = load ptr, ptr %6, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 416, ptr %152)
  %154 = load i32, ptr %8, align 8
  %155 = sext i32 %154 to i64
  %156 = getelementptr ptr, ptr %152, i64 %155
  %157 = getelementptr i8, ptr %156, i64 32
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %158, align 8
  %160 = call { ptr, ptr, ptr, i32 } %159(ptr %151) #24
  %161 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %160, 0
  store ptr %.fca.0.extract1, ptr %161, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %160, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %161, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %160, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %161, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %160, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %161, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %161, ptr nonnull @Iterable)
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = load ptr, ptr %.fca.1.gep, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 1
  %166 = load ptr, ptr %.fca.2.gep, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 2
  %168 = load i32, ptr %.fca.3.gep, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %168, 3
  %170 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %171 = call ptr @llvm.invariant.start.p0(i64 184, ptr %162)
  %172 = sext i32 %168 to i64
  %173 = getelementptr ptr, ptr %162, i64 %172
  %174 = getelementptr i8, ptr %173, i64 8
  %175 = load ptr, ptr %174, align 8
  %176 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %169, ptr nonnull %4)
  %177 = call { ptr, ptr, ptr, i32 } %176({ ptr, ptr, ptr, i32 } %169, { ptr, ptr, ptr, i32 } %169, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 3
  %178 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %178, align 8
  %179 = getelementptr inbounds i8, ptr %178, i64 8
  store ptr %.fca.1.extract, ptr %179, align 8
  %180 = getelementptr inbounds i8, ptr %178, i64 16
  store ptr %.fca.2.extract, ptr %180, align 8
  %181 = getelementptr inbounds i8, ptr %178, i64 24
  store i32 %.fca.3.extract, ptr %181, align 8
  call void @set_offset(ptr nonnull %178, ptr nonnull @Iterator)
  %182 = alloca { ptr, ptr, ptr, i32 }, align 8
  %183 = load ptr, ptr %147, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr inbounds i8, ptr %182, i64 8
  %185 = load ptr, ptr %148, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr inbounds i8, ptr %182, i64 16
  %187 = load ptr, ptr %149, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr inbounds i8, ptr %182, i64 24
  %189 = load i32, ptr %150, align 8
  store i32 %189, ptr %188, align 8
  call void @set_offset(ptr nonnull %182, ptr nonnull @Iterator)
  %190 = load ptr, ptr %182, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %190, 0
  %192 = load ptr, ptr %184, align 8
  %193 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %192, 1
  %194 = load ptr, ptr %186, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %193, ptr %194, 2
  %196 = load i32, ptr %188, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %196, 3
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = load ptr, ptr %178, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr inbounds i8, ptr %198, i64 8
  %201 = load ptr, ptr %179, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr inbounds i8, ptr %198, i64 16
  %203 = load ptr, ptr %180, align 8
  store ptr %203, ptr %202, align 8
  %204 = getelementptr inbounds i8, ptr %198, i64 24
  %205 = load i32, ptr %181, align 8
  store i32 %205, ptr %204, align 8
  call void @set_offset(ptr nonnull %198, ptr nonnull @Iterator)
  %206 = load ptr, ptr %198, align 8
  %207 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %206, 0
  %208 = load ptr, ptr %200, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %207, ptr %208, 1
  %210 = load ptr, ptr %202, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %210, 2
  %212 = load i32, ptr %204, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %211, i32 %212, 3
  %214 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterator, ptr undef, ptr undef, i32 undef }, ptr %116, 1
  %215 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr undef, 2
  %216 = insertvalue { ptr, ptr, ptr, i32 } %215, i32 10, 3
  %217 = load ptr, ptr %6, align 8
  %218 = load ptr, ptr %5, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 416, ptr %218)
  %220 = load i32, ptr %8, align 8
  %221 = sext i32 %220 to i64
  %222 = getelementptr ptr, ptr %218, i64 %221
  %223 = load ptr, ptr %222, align 8
  %224 = call ptr @typegetter_wrapper(ptr %223, ptr %217)
  %225 = call ptr @bump_malloc(i64 24)
  %226 = getelementptr i8, ptr %225, i64 8
  store ptr %224, ptr %226, align 8
  %227 = getelementptr i8, ptr %225, i64 16
  store ptr null, ptr %227, align 8
  %228 = call ptr @llvm.invariant.start.p0(i64 16, ptr %225)
  store ptr @Iterator, ptr %225, align 8
  %229 = load ptr, ptr %6, align 8
  %230 = load ptr, ptr %5, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 416, ptr %230)
  %232 = load i32, ptr %8, align 8
  %233 = sext i32 %232 to i64
  %234 = getelementptr ptr, ptr %230, i64 %233
  %235 = getelementptr i8, ptr %234, i64 8
  %236 = load ptr, ptr %235, align 8
  %237 = call ptr @typegetter_wrapper(ptr %236, ptr %229)
  %238 = call ptr @bump_malloc(i64 24)
  %239 = getelementptr i8, ptr %238, i64 8
  store ptr %237, ptr %239, align 8
  %240 = getelementptr i8, ptr %238, i64 16
  store ptr null, ptr %240, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 16, ptr %238)
  store ptr @Iterator, ptr %238, align 8
  %242 = alloca [2 x ptr], align 8
  store ptr %225, ptr %242, align 8
  %243 = getelementptr inbounds i8, ptr %242, i64 8
  store ptr %238, ptr %243, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %242)
  %245 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ZipIterator)
  %246 = alloca { ptr, ptr }, align 8
  store ptr %190, ptr %246, align 8
  %247 = getelementptr inbounds i8, ptr %246, i64 8
  store ptr %206, ptr %247, align 8
  %248 = call ptr @behavior_wrapper(ptr nonnull @ZipIterator_B_init_firstIteratorT_secondIteratorU, { ptr, ptr, ptr, i32 } %216, ptr nonnull %246)
  call void %248({ ptr, ptr, ptr, i32 } %216, { ptr, ptr, ptr, i32 } %216, ptr nonnull %242, { ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %213) #25
  %249 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ZipIterator, ptr %249, align 8
  %250 = getelementptr inbounds i8, ptr %249, i64 8
  store ptr %116, ptr %250, align 8
  %251 = getelementptr inbounds i8, ptr %249, i64 16
  %252 = getelementptr inbounds i8, ptr %249, i64 24
  store i32 10, ptr %252, align 8
  call void @set_offset(ptr nonnull %249, ptr nonnull @Iterator)
  %253 = load ptr, ptr %249, align 8
  %254 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %253, 0
  %255 = load ptr, ptr %250, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } %254, ptr %255, 1
  %257 = load ptr, ptr %251, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %256, ptr %257, 2
  %259 = load i32, ptr %252, align 8
  %260 = insertvalue { ptr, ptr, ptr, i32 } %258, i32 %259, 3
  ret { ptr, ptr, ptr, i32 } %260
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ZipIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 136
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_1(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_2(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ZipIterator_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ZipIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 96, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 96, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, i160 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract28, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract30, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract32, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract34, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @ZipIterator)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 96, ptr %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call { ptr, ptr, ptr, i32 } %20(ptr %12) #24
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  store ptr %.fca.0.extract8, ptr %22, align 8
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %.fca.1.gep11 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr %.fca.1.extract10, ptr %.fca.1.gep11, align 8
  %.fca.2.extract12 = extractvalue { ptr, ptr, ptr, i32 } %21, 2
  %.fca.2.gep13 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr %.fca.2.extract12, ptr %.fca.2.gep13, align 8
  %.fca.3.extract14 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %.fca.3.gep15 = getelementptr inbounds i8, ptr %22, i64 24
  store i32 %.fca.3.extract14, ptr %.fca.3.gep15, align 8
  call void @assume_offset(ptr nonnull %22, ptr nonnull @Iterator)
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = load ptr, ptr %.fca.1.gep11, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %25, 1
  %27 = load ptr, ptr %.fca.2.gep13, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %27, 2
  %29 = load i32, ptr %.fca.3.gep15, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %29, 3
  %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %32 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %33 = sext i32 %29 to i64
  %34 = getelementptr ptr, ptr %23, i64 %33
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  %37 = call ptr @behavior_wrapper(ptr %36, { ptr, ptr, ptr, i32 } %30, ptr nonnull %4)
  %38 = call { ptr, i160 } %37({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull %4) #25
  %.fca.0.extract4 = extractvalue { ptr, i160 } %38, 0
  %39 = load ptr, ptr %9, align 8
  %40 = load ptr, ptr %8, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 96, ptr %40)
  %42 = load i32, ptr %11, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 32
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call { ptr, ptr, ptr, i32 } %47(ptr %39) #24
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %48, 0
  store ptr %.fca.0.extract2, ptr %49, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %48, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %49, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %48, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %49, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %48, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %49, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %49, ptr nonnull @Iterator)
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %.fca.1.gep, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %.fca.2.gep, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %.fca.3.gep, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  %58 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %50)
  %60 = sext i32 %56 to i64
  %61 = getelementptr ptr, ptr %50, i64 %60
  %62 = getelementptr i8, ptr %61, i64 8
  %63 = load ptr, ptr %62, align 8
  %64 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %57, ptr nonnull %4)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %65, 0
  %66 = load ptr, ptr %9, align 8
  %67 = load ptr, ptr %8, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 96, ptr %67)
  %69 = load i32, ptr %11, align 8
  %70 = sext i32 %69 to i64
  %71 = getelementptr ptr, ptr %67, i64 %70
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @typegetter_wrapper(ptr %72, ptr %66)
  %74 = icmp ne ptr %.fca.0.extract4, @nil_typ
  %75 = icmp ne ptr %.fca.0.extract4, null
  %.not55 = and i1 %74, %75
  br i1 %.not55, label %76, label %139

76:                                               ; preds = %3
  %77 = load ptr, ptr %9, align 8
  %78 = load ptr, ptr %8, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 96, ptr %78)
  %80 = load i32, ptr %11, align 8
  %81 = sext i32 %80 to i64
  %82 = getelementptr ptr, ptr %78, i64 %81
  %83 = getelementptr i8, ptr %82, i64 8
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @typegetter_wrapper(ptr %84, ptr %77)
  %86 = icmp ne ptr %.fca.0.extract, @nil_typ
  %87 = icmp ne ptr %.fca.0.extract, null
  %.not57.not.not = and i1 %86, %87
  br i1 %.not57.not.not, label %88, label %139

88:                                               ; preds = %76
  %89 = load ptr, ptr %9, align 8
  %90 = load ptr, ptr %8, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 96, ptr %90)
  %92 = load i32, ptr %11, align 8
  %93 = sext i32 %92 to i64
  %94 = getelementptr ptr, ptr %90, i64 %93
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @typegetter_wrapper(ptr %95, ptr %89)
  %97 = load ptr, ptr %9, align 8
  %98 = load ptr, ptr %8, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 96, ptr %98)
  %100 = load i32, ptr %11, align 8
  %101 = sext i32 %100 to i64
  %102 = getelementptr ptr, ptr %98, i64 %101
  %103 = getelementptr i8, ptr %102, i64 8
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @typegetter_wrapper(ptr %104, ptr %97)
  store ptr @Pair, ptr %5, align 8
  %106 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %96, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %105, ptr %107, align 8
  %108 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Pair, ptr nonnull %5)
  %109 = extractvalue { i64, i64 } %108, 0
  %110 = call ptr @bump_malloc(i64 %109)
  store ptr %96, ptr %110, align 8
  %111 = getelementptr i8, ptr %110, i64 8
  store ptr %105, ptr %111, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %110)
  %113 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Pair, ptr undef, ptr undef, i32 undef }, ptr %110, 1
  %114 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr undef, 2
  %115 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 10, 3
  %116 = load ptr, ptr %9, align 8
  %117 = load ptr, ptr %8, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 96, ptr %117)
  %119 = load i32, ptr %11, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = load ptr, ptr %121, align 8
  %123 = call ptr @typegetter_wrapper(ptr %122, ptr %116)
  %124 = load ptr, ptr %9, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 96, ptr %125)
  %127 = load i32, ptr %11, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr ptr, ptr %125, i64 %128
  %130 = getelementptr i8, ptr %129, i64 8
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %124)
  store ptr %123, ptr %6, align 8
  %133 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %132, ptr %133, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %6)
  %135 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  store ptr %.fca.0.extract4, ptr %7, align 8
  %136 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.0.extract, ptr %136, align 8
  %137 = call ptr @behavior_wrapper(ptr nonnull @Pair_B_init_firstT_secondU, { ptr, ptr, ptr, i32 } %115, ptr nonnull %7)
  call void %137({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull %6, { ptr, i160 } %38, { ptr, i160 } %65) #25
  %138 = ptrtoint ptr %110 to i64
  %.sroa.344.8.insert.ext = zext i64 %138 to i160
  %.sroa.344.8.insert.insert = or disjoint i160 %.sroa.344.8.insert.ext, 3402823669209384634633746074317682114560
  br label %139

139:                                              ; preds = %76, %3, %88
  %.reg2mem41.sroa.3.0 = phi i160 [ %.sroa.344.8.insert.insert, %88 ], [ poison, %3 ], [ poison, %76 ]
  %.reg2mem39.0 = phi ptr [ @Pair, %88 ], [ @nil_typ, %3 ], [ @nil_typ, %76 ]
  %.reload38.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem39.0, 0
  %.reload38.fca.1.insert = insertvalue { ptr, i160 } %.reload38.fca.0.insert, i160 %.reg2mem41.sroa.3.0, 1
  ret { ptr, i160 } %.reload38.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_InterleaveIterable(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 200
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterable_field_InterleaveIterable_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @InterleaveIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @InterleaveIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @InterleaveIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 400, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 400, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @InterleaveIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 400, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #24
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr nonnull %50, ptr nonnull @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4) #25
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr nonnull %67, ptr nonnull @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 400, ptr %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterator, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %78, ptr %80, align 8
  %81 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_InterleaveIterator, ptr nonnull %79)
  %82 = extractvalue { i64, i64 } %81, 0
  %83 = call ptr @bump_malloc(i64 %82)
  store ptr %78, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %83)
  %85 = load ptr, ptr %6, align 8
  %86 = load ptr, ptr %5, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 400, ptr %86)
  %88 = load i32, ptr %8, align 8
  %89 = sext i32 %88 to i64
  %90 = getelementptr ptr, ptr %86, i64 %89
  %91 = getelementptr i8, ptr %90, i64 8
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr, ptr, ptr, i32 } %93(ptr %85) #24
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  store ptr %.fca.0.extract17, ptr %95, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %95, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %94, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %95, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %95, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr nonnull %95, ptr nonnull @Iterable)
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %.fca.1.gep20, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %.fca.2.gep22, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %.fca.3.gep24, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %105 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %106 = sext i32 %102 to i64
  %107 = getelementptr ptr, ptr %96, i64 %106
  %108 = getelementptr i8, ptr %107, i64 8
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @behavior_wrapper(ptr %109, { ptr, ptr, ptr, i32 } %103, ptr nonnull %4)
  %111 = call { ptr, ptr, ptr, i32 } %110({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr nonnull %4) #25
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %111, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %111, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %111, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %111, 3
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %112, i64 8
  store ptr %.fca.1.extract7, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %112, i64 16
  store ptr %.fca.2.extract9, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %112, i64 24
  store i32 %.fca.3.extract11, ptr %115, align 8
  call void @set_offset(ptr nonnull %112, ptr nonnull @Iterator)
  %116 = load ptr, ptr %6, align 8
  %117 = load ptr, ptr %5, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 400, ptr %117)
  %119 = load i32, ptr %8, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = getelementptr i8, ptr %121, i64 16
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = call { ptr, ptr, ptr, i32 } %124(ptr %116) #24
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %125, 0
  store ptr %.fca.0.extract1, ptr %126, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %125, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %126, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %125, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %126, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %125, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %126, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %126, ptr nonnull @Iterable)
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %.fca.1.gep, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %.fca.2.gep, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %.fca.3.gep, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %136 = call ptr @llvm.invariant.start.p0(i64 184, ptr %127)
  %137 = sext i32 %133 to i64
  %138 = getelementptr ptr, ptr %127, i64 %137
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4)
  %142 = call { ptr, ptr, ptr, i32 } %141({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %143, align 8
  %144 = getelementptr inbounds i8, ptr %143, i64 8
  store ptr %.fca.1.extract, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %143, i64 16
  store ptr %.fca.2.extract, ptr %145, align 8
  %146 = getelementptr inbounds i8, ptr %143, i64 24
  store i32 %.fca.3.extract, ptr %146, align 8
  call void @set_offset(ptr nonnull %143, ptr nonnull @Iterator)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = load ptr, ptr %112, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 8
  %150 = load ptr, ptr %113, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr inbounds i8, ptr %147, i64 16
  %152 = load ptr, ptr %114, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr inbounds i8, ptr %147, i64 24
  %154 = load i32, ptr %115, align 8
  store i32 %154, ptr %153, align 8
  call void @set_offset(ptr nonnull %147, ptr nonnull @Iterator)
  %155 = load ptr, ptr %147, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %149, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %151, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = load ptr, ptr %143, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 8
  %166 = load ptr, ptr %144, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr inbounds i8, ptr %163, i64 16
  %168 = load ptr, ptr %145, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr inbounds i8, ptr %163, i64 24
  %170 = load i32, ptr %146, align 8
  store i32 %170, ptr %169, align 8
  call void @set_offset(ptr nonnull %163, ptr nonnull @Iterator)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterator, ptr undef, ptr undef, i32 undef }, ptr %83, 1
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr undef, 2
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 10, 3
  %182 = load ptr, ptr %6, align 8
  %183 = load ptr, ptr %5, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 400, ptr %183)
  %185 = load i32, ptr %8, align 8
  %186 = sext i32 %185 to i64
  %187 = getelementptr ptr, ptr %183, i64 %186
  %188 = load ptr, ptr %187, align 8
  %189 = call ptr @typegetter_wrapper(ptr %188, ptr %182)
  %190 = call ptr @bump_malloc(i64 24)
  %191 = getelementptr i8, ptr %190, i64 8
  store ptr %189, ptr %191, align 8
  %192 = getelementptr i8, ptr %190, i64 16
  store ptr null, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  store ptr @Iterator, ptr %190, align 8
  %194 = load ptr, ptr %6, align 8
  %195 = load ptr, ptr %5, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 400, ptr %195)
  %197 = load i32, ptr %8, align 8
  %198 = sext i32 %197 to i64
  %199 = getelementptr ptr, ptr %195, i64 %198
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @typegetter_wrapper(ptr %200, ptr %194)
  %202 = call ptr @bump_malloc(i64 24)
  %203 = getelementptr i8, ptr %202, i64 8
  store ptr %201, ptr %203, align 8
  %204 = getelementptr i8, ptr %202, i64 16
  store ptr null, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 16, ptr %202)
  store ptr @Iterator, ptr %202, align 8
  %206 = alloca [2 x ptr], align 8
  store ptr %190, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %202, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %206)
  %209 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @InterleaveIterator)
  %210 = alloca { ptr, ptr }, align 8
  store ptr %155, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %210, i64 8
  store ptr %171, ptr %211, align 8
  %212 = call ptr @behavior_wrapper(ptr nonnull @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, { ptr, ptr, ptr, i32 } %181, ptr nonnull %210)
  call void %212({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr nonnull %206, { ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %178) #25
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @InterleaveIterator, ptr %213, align 8
  %214 = getelementptr inbounds i8, ptr %213, i64 8
  store ptr %83, ptr %214, align 8
  %215 = getelementptr inbounds i8, ptr %213, i64 16
  %216 = getelementptr inbounds i8, ptr %213, i64 24
  store i32 10, ptr %216, align 8
  call void @set_offset(ptr nonnull %213, ptr nonnull @Iterator)
  %217 = load ptr, ptr %213, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = load ptr, ptr %214, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 1
  %221 = load ptr, ptr %215, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 2
  %223 = load i32, ptr %216, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %223, 3
  ret { ptr, ptr, ptr, i32 } %224
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_InterleaveIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 80, i64 8 }
}

define ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 128
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterator_field_InterleaveIterator_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @InterleaveIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @InterleaveIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 88, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  %70 = load ptr, ptr %7, align 8
  %71 = load ptr, ptr %6, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 88, ptr %71)
  %73 = load i32, ptr %9, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 24
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  call void %79(ptr %70, i1 true) #23
  ret void
}

define { ptr, i160 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @InterleaveIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call i1 %19(ptr %11) #24
  %21 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  %22 = getelementptr i8, ptr %18, i64 8
  %23 = load ptr, ptr %22, align 8
  %not. = xor i1 %20, true
  %.68 = select i1 %20, i64 8, i64 16
  %.69 = select i1 %20, ptr %5, ptr %6
  call void %23(ptr %11, i1 %not.) #23
  %24 = load ptr, ptr %8, align 8
  %25 = load ptr, ptr %7, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 88, ptr %25)
  %27 = load i32, ptr %10, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr ptr, ptr %25, i64 %28
  %30 = getelementptr i8, ptr %29, i64 %.68
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr, ptr, ptr, i32 } %32(ptr %24) #24
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  store ptr %.fca.0.extract9, ptr %.69, align 8
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %.69.sroa.sel.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel = getelementptr inbounds i8, ptr %.69.sroa.sel.v, i64 8
  store ptr %.fca.1.extract10, ptr %.69.sroa.sel, align 8
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %33, 2
  %.69.sroa.sel73.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel73 = getelementptr inbounds i8, ptr %.69.sroa.sel73.v, i64 16
  store ptr %.fca.2.extract11, ptr %.69.sroa.sel73, align 8
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %33, 3
  %.69.sroa.sel76.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel76 = getelementptr inbounds i8, ptr %.69.sroa.sel76.v, i64 24
  store i32 %.fca.3.extract12, ptr %.69.sroa.sel76, align 8
  call void @assume_offset(ptr nonnull %.69, ptr nonnull @Iterator)
  %34 = load ptr, ptr %.69, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = load ptr, ptr %.69.sroa.sel, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 1
  %38 = load ptr, ptr %.69.sroa.sel73, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 2
  %40 = load i32, ptr %.69.sroa.sel76, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %40, 3
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %43 = call ptr @llvm.invariant.start.p0(i64 24, ptr %34)
  %44 = sext i32 %40 to i64
  %45 = getelementptr ptr, ptr %34, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4)
  %49 = call { ptr, i160 } %48({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4) #25
  ret { ptr, i160 } %49
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @InterleaveIterator_getter_on_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_on_first(ptr nocapture writeonly %0, i1 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ChainIterable(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @ChainIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 200
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterable_field_ChainIterable_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ChainIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ChainIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ChainIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 400, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 400, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ChainIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 400, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #24
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr nonnull %50, ptr nonnull @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4) #25
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr nonnull %67, ptr nonnull @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 400, ptr %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = alloca [2 x ptr], align 8
  store ptr @ChainIterator, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %78, ptr %80, align 8
  %81 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ChainIterator, ptr nonnull %79)
  %82 = extractvalue { i64, i64 } %81, 0
  %83 = call ptr @bump_malloc(i64 %82)
  store ptr %78, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %83)
  %85 = load ptr, ptr %6, align 8
  %86 = load ptr, ptr %5, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 400, ptr %86)
  %88 = load i32, ptr %8, align 8
  %89 = sext i32 %88 to i64
  %90 = getelementptr ptr, ptr %86, i64 %89
  %91 = getelementptr i8, ptr %90, i64 8
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr, ptr, ptr, i32 } %93(ptr %85) #24
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  store ptr %.fca.0.extract17, ptr %95, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %95, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %94, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %95, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %95, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr nonnull %95, ptr nonnull @Iterable)
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %.fca.1.gep20, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %.fca.2.gep22, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %.fca.3.gep24, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %105 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %106 = sext i32 %102 to i64
  %107 = getelementptr ptr, ptr %96, i64 %106
  %108 = getelementptr i8, ptr %107, i64 8
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @behavior_wrapper(ptr %109, { ptr, ptr, ptr, i32 } %103, ptr nonnull %4)
  %111 = call { ptr, ptr, ptr, i32 } %110({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr nonnull %4) #25
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %111, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %111, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %111, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %111, 3
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %112, i64 8
  store ptr %.fca.1.extract7, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %112, i64 16
  store ptr %.fca.2.extract9, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %112, i64 24
  store i32 %.fca.3.extract11, ptr %115, align 8
  call void @set_offset(ptr nonnull %112, ptr nonnull @Iterator)
  %116 = load ptr, ptr %6, align 8
  %117 = load ptr, ptr %5, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 400, ptr %117)
  %119 = load i32, ptr %8, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = getelementptr i8, ptr %121, i64 16
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = call { ptr, ptr, ptr, i32 } %124(ptr %116) #24
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %125, 0
  store ptr %.fca.0.extract1, ptr %126, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %125, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %126, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %125, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %126, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %125, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %126, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %126, ptr nonnull @Iterable)
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %.fca.1.gep, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %.fca.2.gep, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %.fca.3.gep, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %136 = call ptr @llvm.invariant.start.p0(i64 184, ptr %127)
  %137 = sext i32 %133 to i64
  %138 = getelementptr ptr, ptr %127, i64 %137
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4)
  %142 = call { ptr, ptr, ptr, i32 } %141({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %143, align 8
  %144 = getelementptr inbounds i8, ptr %143, i64 8
  store ptr %.fca.1.extract, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %143, i64 16
  store ptr %.fca.2.extract, ptr %145, align 8
  %146 = getelementptr inbounds i8, ptr %143, i64 24
  store i32 %.fca.3.extract, ptr %146, align 8
  call void @set_offset(ptr nonnull %143, ptr nonnull @Iterator)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = load ptr, ptr %112, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 8
  %150 = load ptr, ptr %113, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr inbounds i8, ptr %147, i64 16
  %152 = load ptr, ptr %114, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr inbounds i8, ptr %147, i64 24
  %154 = load i32, ptr %115, align 8
  store i32 %154, ptr %153, align 8
  call void @set_offset(ptr nonnull %147, ptr nonnull @Iterator)
  %155 = load ptr, ptr %147, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %149, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %151, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = load ptr, ptr %143, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 8
  %166 = load ptr, ptr %144, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr inbounds i8, ptr %163, i64 16
  %168 = load ptr, ptr %145, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr inbounds i8, ptr %163, i64 24
  %170 = load i32, ptr %146, align 8
  store i32 %170, ptr %169, align 8
  call void @set_offset(ptr nonnull %163, ptr nonnull @Iterator)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterator, ptr undef, ptr undef, i32 undef }, ptr %83, 1
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr undef, 2
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 10, 3
  %182 = load ptr, ptr %6, align 8
  %183 = load ptr, ptr %5, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 400, ptr %183)
  %185 = load i32, ptr %8, align 8
  %186 = sext i32 %185 to i64
  %187 = getelementptr ptr, ptr %183, i64 %186
  %188 = load ptr, ptr %187, align 8
  %189 = call ptr @typegetter_wrapper(ptr %188, ptr %182)
  %190 = call ptr @bump_malloc(i64 24)
  %191 = getelementptr i8, ptr %190, i64 8
  store ptr %189, ptr %191, align 8
  %192 = getelementptr i8, ptr %190, i64 16
  store ptr null, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  store ptr @Iterator, ptr %190, align 8
  %194 = load ptr, ptr %6, align 8
  %195 = load ptr, ptr %5, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 400, ptr %195)
  %197 = load i32, ptr %8, align 8
  %198 = sext i32 %197 to i64
  %199 = getelementptr ptr, ptr %195, i64 %198
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @typegetter_wrapper(ptr %200, ptr %194)
  %202 = call ptr @bump_malloc(i64 24)
  %203 = getelementptr i8, ptr %202, i64 8
  store ptr %201, ptr %203, align 8
  %204 = getelementptr i8, ptr %202, i64 16
  store ptr null, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 16, ptr %202)
  store ptr @Iterator, ptr %202, align 8
  %206 = alloca [2 x ptr], align 8
  store ptr %190, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %202, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %206)
  %209 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @ChainIterator)
  %210 = alloca { ptr, ptr }, align 8
  store ptr %155, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %210, i64 8
  store ptr %171, ptr %211, align 8
  %212 = call ptr @behavior_wrapper(ptr nonnull @ChainIterator_B_init_firstIteratorT_secondIteratorT, { ptr, ptr, ptr, i32 } %181, ptr nonnull %210)
  call void %212({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr nonnull %206, { ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %178) #25
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ChainIterator, ptr %213, align 8
  %214 = getelementptr inbounds i8, ptr %213, i64 8
  store ptr %83, ptr %214, align 8
  %215 = getelementptr inbounds i8, ptr %213, i64 16
  %216 = getelementptr inbounds i8, ptr %213, i64 24
  store i32 10, ptr %216, align 8
  call void @set_offset(ptr nonnull %213, ptr nonnull @Iterator)
  %217 = load ptr, ptr %213, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = load ptr, ptr %214, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 1
  %221 = load ptr, ptr %215, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 2
  %223 = load i32, ptr %216, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %223, 3
  ret { ptr, ptr, ptr, i32 } %224
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ChainIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 80, i64 8 }
}

define ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 128
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterator_field_ChainIterator_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ChainIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ChainIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 88, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  %70 = load ptr, ptr %7, align 8
  %71 = load ptr, ptr %6, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 88, ptr %71)
  %73 = load i32, ptr %9, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 24
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  call void %79(ptr %70, i1 true) #23
  ret void
}

define { ptr, i160 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract6, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @ChainIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call i1 %19(ptr %11) #24
  %21 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  br i1 %20, label %43, label %22

22:                                               ; preds = %3
  %23 = getelementptr i8, ptr %16, i64 16
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %11) #24
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  store ptr %.fca.0.extract24, ptr %5, align 8
  %.fca.1.extract26 = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.1.gep27 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract26, ptr %.fca.1.gep27, align 8
  %.fca.2.extract28 = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.2.gep29 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract28, ptr %.fca.2.gep29, align 8
  %.fca.3.extract30 = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %.fca.3.gep31 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract30, ptr %.fca.3.gep31, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @Iterator)
  %27 = load ptr, ptr %5, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %.fca.1.gep27, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %.fca.2.gep29, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %.fca.3.gep31, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %27)
  %37 = sext i32 %33 to i64
  %38 = getelementptr ptr, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %34, ptr nonnull %4)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %4) #25
  %.fca.0.extract18 = extractvalue { ptr, i160 } %42, 0
  br label %84

43:                                               ; preds = %3
  %44 = getelementptr i8, ptr %16, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call { ptr, ptr, ptr, i32 } %46(ptr %11) #24
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %47, 0
  store ptr %.fca.0.extract14, ptr %6, align 8
  %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %47, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract15, ptr %.fca.1.gep, align 8
  %.fca.2.extract16 = extractvalue { ptr, ptr, ptr, i32 } %47, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract16, ptr %.fca.2.gep, align 8
  %.fca.3.extract17 = extractvalue { ptr, ptr, ptr, i32 } %47, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract17, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %6, ptr nonnull @Iterator)
  %48 = load ptr, ptr %6, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = load ptr, ptr %.fca.1.gep, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 1
  %52 = load ptr, ptr %.fca.2.gep, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 2
  %54 = load i32, ptr %.fca.3.gep, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %54, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %57 = call ptr @llvm.invariant.start.p0(i64 24, ptr %48)
  %58 = sext i32 %54 to i64
  %59 = getelementptr ptr, ptr %48, i64 %58
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @behavior_wrapper(ptr %61, { ptr, ptr, ptr, i32 } %55, ptr nonnull %4)
  %63 = call { ptr, i160 } %62({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %4) #25
  %.fca.0.extract10 = extractvalue { ptr, i160 } %63, 0
  %64 = load ptr, ptr %8, align 8
  %65 = load ptr, ptr %7, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 88, ptr %65)
  %67 = load i32, ptr %10, align 8
  %68 = sext i32 %67 to i64
  %69 = getelementptr ptr, ptr %65, i64 %68
  %70 = load ptr, ptr %69, align 8
  %71 = call ptr @typegetter_wrapper(ptr %70, ptr %64)
  %72 = icmp eq ptr %.fca.0.extract10, @nil_typ
  %73 = icmp eq ptr %.fca.0.extract10, null
  %.not33.not = or i1 %72, %73
  br i1 %.not33.not, label %._crit_edge, label %84

._crit_edge:                                      ; preds = %43, %._crit_edge
  %74 = load ptr, ptr %8, align 8
  %75 = load ptr, ptr %7, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 88, ptr %75)
  %77 = load i32, ptr %10, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = getelementptr i8, ptr %79, i64 24
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  call void %83(ptr %74, i1 false) #23
  br label %._crit_edge

84:                                               ; preds = %43, %22
  %.reg2mem29.sroa.0.0 = phi ptr [ %.fca.0.extract18, %22 ], [ %.fca.0.extract10, %43 ]
  %.pn = phi { ptr, i160 } [ %42, %22 ], [ %63, %43 ]
  %.reload30.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem29.sroa.0.0, 0
  %.reg2mem29.sroa.3.0 = extractvalue { ptr, i160 } %.pn, 1
  %.reload30.fca.1.insert = insertvalue { ptr, i160 } %.reload30.fca.0.insert, i160 %.reg2mem29.sroa.3.0, 1
  ret { ptr, i160 } %.reload30.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @ChainIterator_getter_on_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_on_first(ptr nocapture writeonly %0, i1 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FilterIterable(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 200
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterable_field_FilterIterable_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FilterIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @FilterIterable_init_iterableIterableT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @FilterIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 400, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract35, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract37, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract39, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract41, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @FilterIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 400, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract27, ptr %19, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep30, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep32, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep34, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract15 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract19 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract21 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract15, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract17, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract19, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract21, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr } %48(ptr %40) #24
  %50 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %51 = load ptr, ptr %45, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %40)
  %53 = alloca [2 x ptr], align 8
  store ptr @FilterIterator, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr %52, ptr %54, align 8
  %55 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FilterIterator, ptr nonnull %53)
  %56 = extractvalue { i64, i64 } %55, 0
  %57 = call ptr @bump_malloc(i64 %56)
  store ptr %52, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %57)
  %59 = load ptr, ptr %6, align 8
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 400, ptr %60)
  %62 = load i32, ptr %8, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr, ptr, ptr, i32 } %67(ptr %59) #24
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  store ptr %.fca.0.extract2, ptr %69, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %69, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %68, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %69, i64 16
  store ptr %.fca.2.extract4, ptr %.fca.2.gep, align 8
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %69, i64 24
  store i32 %.fca.3.extract5, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %69, ptr nonnull @Iterable)
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %.fca.1.gep, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %.fca.2.gep, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %.fca.3.gep, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %79 = call ptr @llvm.invariant.start.p0(i64 184, ptr %70)
  %80 = sext i32 %76 to i64
  %81 = getelementptr ptr, ptr %70, i64 %80
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4)
  %85 = call { ptr, ptr, ptr, i32 } %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4) #25
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %85, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 3
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %.fca.1.extract, ptr %87, align 8
  %88 = getelementptr inbounds i8, ptr %86, i64 16
  store ptr %.fca.2.extract, ptr %88, align 8
  %89 = getelementptr inbounds i8, ptr %86, i64 24
  store i32 %.fca.3.extract, ptr %89, align 8
  call void @set_offset(ptr nonnull %86, ptr nonnull @Iterator)
  %90 = load ptr, ptr %6, align 8
  %91 = load ptr, ptr %5, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 400, ptr %91)
  %93 = load i32, ptr %8, align 8
  %94 = sext i32 %93 to i64
  %95 = getelementptr ptr, ptr %91, i64 %94
  %96 = getelementptr i8, ptr %95, i64 16
  %97 = load ptr, ptr %96, align 8
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr } %98(ptr %90) #24
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  %101 = load ptr, ptr %86, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr inbounds i8, ptr %100, i64 8
  %103 = load ptr, ptr %87, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr inbounds i8, ptr %100, i64 16
  %105 = load ptr, ptr %88, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr inbounds i8, ptr %100, i64 24
  %107 = load i32, ptr %89, align 8
  store i32 %107, ptr %106, align 8
  call void @set_offset(ptr nonnull %100, ptr nonnull @Iterator)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterator, ptr undef, ptr undef, i32 undef }, ptr %57, 1
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr undef, 2
  %118 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 10, 3
  %119 = load ptr, ptr %6, align 8
  %120 = load ptr, ptr %5, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 400, ptr %120)
  %122 = load i32, ptr %8, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr ptr, ptr %120, i64 %123
  %125 = load ptr, ptr %124, align 8
  %126 = call ptr @typegetter_wrapper(ptr %125, ptr %119)
  %127 = call ptr @bump_malloc(i64 24)
  %128 = getelementptr i8, ptr %127, i64 8
  store ptr %126, ptr %128, align 8
  %129 = getelementptr i8, ptr %127, i64 16
  store ptr null, ptr %129, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  store ptr @Iterator, ptr %127, align 8
  %131 = load ptr, ptr %6, align 8
  %132 = load ptr, ptr %5, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 400, ptr %132)
  %134 = load i32, ptr %8, align 8
  %135 = sext i32 %134 to i64
  %136 = getelementptr ptr, ptr %132, i64 %135
  %137 = load ptr, ptr %136, align 8
  %138 = call ptr @typegetter_wrapper(ptr %137, ptr %131)
  %139 = call ptr @bump_malloc(i64 32)
  %140 = getelementptr i8, ptr %139, i64 16
  store ptr %138, ptr %140, align 8
  %141 = getelementptr i8, ptr %139, i64 8
  store ptr @_parameterization_i1, ptr %141, align 8
  %142 = getelementptr i8, ptr %139, i64 24
  store ptr null, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 24, ptr %139)
  store ptr @function_typ, ptr %139, align 8
  %144 = alloca [2 x ptr], align 8
  store ptr %127, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %144, i64 8
  store ptr %139, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %144)
  %147 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @FilterIterator)
  %148 = alloca { ptr, ptr }, align 8
  store ptr %108, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %148, i64 8
  store ptr @function_typ, ptr %149, align 8
  %150 = call ptr @behavior_wrapper(ptr nonnull @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1, { ptr, ptr, ptr, i32 } %118, ptr nonnull %148)
  call void %150({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr nonnull %144, { ptr, ptr, ptr, i32 } %115, { ptr } %99) #25
  %151 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @FilterIterator, ptr %151, align 8
  %152 = getelementptr inbounds i8, ptr %151, i64 8
  store ptr %57, ptr %152, align 8
  %153 = getelementptr inbounds i8, ptr %151, i64 16
  %154 = getelementptr inbounds i8, ptr %151, i64 24
  store i32 10, ptr %154, align 8
  call void @set_offset(ptr nonnull %151, ptr nonnull @Iterator)
  %155 = load ptr, ptr %151, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %152, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %153, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %154, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  ret { ptr, ptr, ptr, i32 } %162
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FilterIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterator_field_FilterIterator_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @FilterIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 80, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 80, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #23
  ret void
}

define { ptr, i160 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract20 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract16, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract18, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract20, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @FilterIterator)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = call { ptr, ptr, ptr, i32 } %18(ptr %10) #24
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %19, 0
  store ptr %.fca.0.extract1, ptr %20, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %19, 1
  %.fca.1.gep4 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep4, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %20, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %20, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %20, ptr nonnull @Iterator)
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = load ptr, ptr %.fca.1.gep4, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %23, 1
  %25 = load ptr, ptr %.fca.2.gep, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %25, 2
  %27 = load i32, ptr %.fca.3.gep, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %27, 3
  %29 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %30 = call ptr @llvm.invariant.start.p0(i64 24, ptr %21)
  %31 = sext i32 %27 to i64
  %32 = getelementptr ptr, ptr %21, i64 %31
  %33 = getelementptr i8, ptr %32, i64 8
  %34 = load ptr, ptr %33, align 8
  %35 = call ptr @behavior_wrapper(ptr %34, { ptr, ptr, ptr, i32 } %28, ptr nonnull %4)
  %36 = call { ptr, i160 } %35({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %36, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %36, 1
  %.fca.1.gep31 = getelementptr inbounds i8, ptr %5, i64 8
  %.fca.2.gep33 = getelementptr inbounds i8, ptr %5, i64 16
  %.fca.3.gep35 = getelementptr inbounds i8, ptr %5, i64 24
  br label %37

37:                                               ; preds = %90, %3
  %.sroa.3.0 = phi i160 [ %.fca.1.extract, %3 ], [ %.sroa.3.1, %90 ]
  %.sroa.0.0 = phi ptr [ %.fca.0.extract, %3 ], [ %.sroa.0.1, %90 ]
  %.0 = phi i160 [ undef, %3 ], [ %.1, %90 ]
  %38 = load ptr, ptr %7, align 8
  %39 = load ptr, ptr %6, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr %39)
  %41 = load i32, ptr %9, align 8
  %42 = sext i32 %41 to i64
  %43 = getelementptr ptr, ptr %39, i64 %42
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr @typegetter_wrapper(ptr %44, ptr %38)
  %46 = icmp ne ptr %.sroa.0.0, @nil_typ
  %47 = icmp ne ptr %.sroa.0.0, null
  %.not50 = and i1 %46, %47
  br i1 %.not50, label %48, label %90

48:                                               ; preds = %37
  %49 = insertvalue { ptr, i160 } undef, ptr %.sroa.0.0, 0
  %50 = insertvalue { ptr, i160 } %49, i160 %.sroa.3.0, 1
  %51 = load ptr, ptr %7, align 8
  %52 = load ptr, ptr %6, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 80, ptr %52)
  %54 = load i32, ptr %9, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 16
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %58, align 8
  %60 = call { ptr } %59(ptr %51) #24
  %.fca.0.extract37 = extractvalue { ptr } %60, 0
  %61 = call i1 %.fca.0.extract37({ ptr, i160 } %50)
  %62 = xor i1 %61, true
  br i1 %61, label %90, label %63

63:                                               ; preds = %48
  %64 = load ptr, ptr %7, align 8
  %65 = load ptr, ptr %6, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 80, ptr %65)
  %67 = load i32, ptr %9, align 8
  %68 = sext i32 %67 to i64
  %69 = getelementptr ptr, ptr %65, i64 %68
  %70 = getelementptr i8, ptr %69, i64 8
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #24
  %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  store ptr %.fca.0.extract28, ptr %5, align 8
  %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  store ptr %.fca.1.extract30, ptr %.fca.1.gep31, align 8
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %73, 2
  store ptr %.fca.2.extract32, ptr %.fca.2.gep33, align 8
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  store i32 %.fca.3.extract34, ptr %.fca.3.gep35, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @Iterator)
  %74 = load ptr, ptr %5, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %.fca.1.gep31, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = load ptr, ptr %.fca.2.gep33, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 2
  %80 = load i32, ptr %.fca.3.gep35, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %80, 3
  %82 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %83 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %84 = sext i32 %80 to i64
  %85 = getelementptr ptr, ptr %74, i64 %84
  %86 = getelementptr i8, ptr %85, i64 8
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr @behavior_wrapper(ptr %87, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %89 = call { ptr, i160 } %88({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4) #25
  %.fca.0.extract22 = extractvalue { ptr, i160 } %89, 0
  %.fca.1.extract24 = extractvalue { ptr, i160 } %89, 1
  br label %90

90:                                               ; preds = %37, %63, %48
  %.sroa.3.1 = phi i160 [ %.sroa.3.0, %48 ], [ %.fca.1.extract24, %63 ], [ %.sroa.3.0, %37 ]
  %.sroa.0.1 = phi ptr [ %.sroa.0.0, %48 ], [ %.fca.0.extract22, %63 ], [ %.sroa.0.0, %37 ]
  %.1 = phi i160 [ %.sroa.3.0, %48 ], [ %.sroa.3.0, %63 ], [ %.0, %37 ]
  %.reg2mem32.0.off0 = phi i1 [ %62, %48 ], [ %62, %63 ], [ false, %37 ]
  %.reg2mem34.0 = phi ptr [ %.sroa.0.0, %48 ], [ @nil_typ, %63 ], [ @nil_typ, %37 ]
  br i1 %.reg2mem32.0.off0, label %37, label %91

91:                                               ; preds = %90
  %.reload31.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem34.0, 0
  %.reload31.fca.1.insert = insertvalue { ptr, i160 } %.reload31.fca.0.insert, i160 %.1, 1
  ret { ptr, i160 } %.reload31.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterator_getter_f(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator_setter_f(ptr nocapture writeonly %0, { ptr } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterable_getter_f(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable_setter_f(ptr nocapture writeonly %0, { ptr } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_MapIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 56, i64 8 }
}

define ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 128
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator_field_MapIterator_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator_field_MapIterator_1(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @MapIterator_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @MapIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 88, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #23
  ret void
}

define { ptr, i160 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract16, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract18, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @MapIterator)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 88, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract2, ptr %19, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterator)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 24, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, i160 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %35, 0
  %36 = load ptr, ptr %6, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 88, ptr %37)
  %39 = load i32, ptr %8, align 8
  %40 = sext i32 %39 to i64
  %41 = getelementptr ptr, ptr %37, i64 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = icmp ne ptr %.fca.0.extract, @nil_typ
  %45 = icmp ne ptr %.fca.0.extract, null
  %.not36 = and i1 %44, %45
  br i1 %.not36, label %46, label %58

46:                                               ; preds = %3
  %47 = load ptr, ptr %6, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 88, ptr %48)
  %50 = load i32, ptr %8, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 24
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call { ptr } %55(ptr %47) #24
  %.fca.0.extract28 = extractvalue { ptr } %56, 0
  %57 = call { ptr, i160 } %.fca.0.extract28({ ptr, i160 } %35)
  %.fca.0.extract22 = extractvalue { ptr, i160 } %57, 0
  %.fca.1.extract24 = extractvalue { ptr, i160 } %57, 1
  br label %58

58:                                               ; preds = %3, %46
  %.reg2mem15.sroa.0.0 = phi ptr [ %.fca.0.extract22, %46 ], [ @nil_typ, %3 ]
  %.reg2mem15.sroa.3.0 = phi i160 [ %.fca.1.extract24, %46 ], [ undef, %3 ]
  %.reload16.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem15.sroa.0.0, 0
  %.reload16.fca.1.insert = insertvalue { ptr, i160 } %.reload16.fca.0.insert, i160 %.reg2mem15.sroa.3.0, 1
  ret { ptr, i160 } %.reload16.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterator_getter_f(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator_setter_f(ptr nocapture writeonly %0, { ptr } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterable_getter_f(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable_setter_f(ptr nocapture writeonly %0, { ptr } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Representable(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 88
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Representable)
  %8 = call ptr @bump_malloc(i64 7)
  store <6 x i8> <i8 79, i8 98, i8 106, i8 101, i8 99, i8 116>, ptr %8, align 8
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %9)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = call ptr @bump_malloc(i64 %11)
  %13 = insertvalue { ptr } undef, ptr %8, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr undef, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 10, 3
  %17 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %17)
  %21 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %22 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %16, ptr nonnull %22)
  call void %25({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %17, { ptr } %13, i32 6, i32 7) #25
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %12, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 10, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @String)
  %30 = load ptr, ptr %26, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %27, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %28, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %29, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_String(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 16, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_bytesBufferi8_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 328
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @String_field_String_0(ptr nocapture readnone %0) #1 {
  ret ptr @_parameterization_Character
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @String_B__Self_from_c_string_c_stringBufferi8(ptr nocapture %0) #22 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @String__Self_from_c_string_c_stringBufferi8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 320
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_append_xi8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 376
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B__index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 392
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 432
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 464
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 472
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @String_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 480
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @String_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 488
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @String_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 496
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 504
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @String__Self_from_c_string_c_stringBufferi8(ptr nocapture readnone %0, { ptr } %1) {
  %3 = alloca [1 x ptr], align 8
  %4 = alloca [3 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr } %1, 0
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge, %2
  %.0 = phi i32 [ 0, %2 ], [ %.1, %._crit_edge ]
  %7 = sext i32 %.0 to i64
  %8 = getelementptr i8, ptr %.fca.0.extract, i64 %7
  %9 = load i8, ptr %8, align 1
  %.not = icmp ne i8 %9, 0
  %10 = zext i1 %.not to i32
  %.1 = add i32 %.0, %10
  br i1 %.not, label %._crit_edge, label %11

11:                                               ; preds = %._crit_edge
  store ptr @String, ptr %3, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %3)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = call ptr @bump_malloc(i64 %13)
  %15 = add i32 %.1, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %14, 1
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr undef, 2
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %4, align 8
  %19 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %4)
  %22 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %5, align 8
  %23 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %18, ptr nonnull %5)
  call void %25({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %4, { ptr } %1, i32 %.1, i32 %15) #25
  store ptr @String, ptr %6, align 8
  %26 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %14, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %6, i64 16
  %28 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 10, ptr %28, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @String)
  %29 = load ptr, ptr %6, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = load ptr, ptr %26, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 1
  %33 = load ptr, ptr %27, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = load i32, ptr %28, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %35, 3
  ret { ptr, ptr, ptr, i32 } %36
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = call ptr @bump_malloc(i64 1)
  %9 = load ptr, ptr %5, align 8
  %10 = load ptr, ptr %4, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 632, ptr %10)
  %12 = load i32, ptr %7, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = insertvalue { ptr } undef, ptr %8, 0
  call void %17(ptr %9, { ptr } %18) #23
  %19 = load ptr, ptr %5, align 8
  %20 = load ptr, ptr %4, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 632, ptr %20)
  %22 = load i32, ptr %7, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 16
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %19, i32 1) #23
  %29 = load ptr, ptr %5, align 8
  %30 = load ptr, ptr %4, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 632, ptr %30)
  %32 = load i32, ptr %7, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr ptr, ptr %30, i64 %33
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  call void %38(ptr %29, i32 0) #23
  ret void
}

define void @String_init_bytesBufferi8_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, i32 %4, i32 %5) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @String)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 632, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %11, { ptr } %3) #23
  %20 = load ptr, ptr %8, align 8
  %21 = load ptr, ptr %7, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 632, ptr %21)
  %23 = load i32, ptr %10, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, i32 %4) #23
  %30 = load ptr, ptr %8, align 8
  %31 = load ptr, ptr %7, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 632, ptr %31)
  %33 = load i32, ptr %10, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 16
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %30, i32 %5) #23
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 632, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  ret i32 %17
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 632, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  ret i32 %17
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 632, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call { ptr } %15(ptr %8) #24
  ret { ptr } %16
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 632, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  %18 = add i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = call ptr @bump_malloc(i64 %19)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %3
  %.0 = phi i32 [ 0, %3 ], [ %.1, %._crit_edge ]
  %21 = load ptr, ptr %5, align 8
  %22 = load ptr, ptr %4, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 632, ptr %22)
  %24 = load i32, ptr %7, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21) #24
  %31 = icmp slt i32 %.0, %30
  br i1 %31, label %32, label %._crit_edge

32:                                               ; preds = %._crit_edge1
  %33 = call ptr @llvm.invariant.start.p0(i64 632, ptr %22)
  %34 = load ptr, ptr %26, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr } %35(ptr %21) #24
  %.fca.0.extract15 = extractvalue { ptr } %36, 0
  %37 = sext i32 %.0 to i64
  %38 = getelementptr i8, ptr %.fca.0.extract15, i64 %37
  %39 = load i8, ptr %38, align 1
  %40 = getelementptr i8, ptr %20, i64 %37
  store i8 %39, ptr %40, align 1
  %41 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %32
  %.1 = phi i32 [ %41, %32 ], [ %.0, %._crit_edge1 ]
  br i1 %31, label %._crit_edge1, label %42

42:                                               ; preds = %._crit_edge
  %43 = load ptr, ptr %5, align 8
  %44 = load ptr, ptr %4, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 632, ptr %44)
  %46 = load i32, ptr %7, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #24
  %53 = sext i32 %52 to i64
  %54 = getelementptr i8, ptr %20, i64 %53
  store i8 0, ptr %54, align 1
  %55 = insertvalue { ptr } undef, ptr %20, 0
  ret { ptr } %55
}

define { ptr, ptr, ptr, i32 } @String_append_xi8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
  %.sroa.029 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr %.fca.1.extract, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr %.fca.2.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %15, i64 24
  store i32 %.fca.3.extract, ptr %18, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @String)
  %19 = load ptr, ptr %16, align 8
  %20 = load ptr, ptr %15, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 632, ptr %20)
  %22 = load i32, ptr %18, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %19) #24
  %29 = call ptr @llvm.invariant.start.p0(i64 632, ptr %20)
  %30 = getelementptr i8, ptr %24, i64 16
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %19) #24
  %34 = icmp slt i32 %28, %33
  %.sroa.gep = getelementptr inbounds i8, ptr %14, i64 8
  %.sroa.gep22 = getelementptr inbounds i8, ptr %9, i64 8
  %.sroa.gep24 = getelementptr inbounds i8, ptr %14, i64 16
  %.sroa.gep25 = getelementptr inbounds i8, ptr %9, i64 16
  %.sroa.gep27 = getelementptr inbounds i8, ptr %14, i64 24
  %.sroa.gep28 = getelementptr inbounds i8, ptr %9, i64 24
  br i1 %34, label %.loopexit, label %35

35:                                               ; preds = %4
  %36 = call ptr @llvm.invariant.start.p0(i64 632, ptr %20)
  %37 = call i32 %32(ptr %19) #24
  %38 = shl i32 %37, 1
  %39 = call ptr @llvm.invariant.start.p0(i64 632, ptr %20)
  %40 = getelementptr i8, ptr %31, i64 8
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %19, i32 %38) #23
  %42 = load ptr, ptr %16, align 8
  %43 = load ptr, ptr %15, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 632, ptr %43)
  %45 = load i32, ptr %18, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = call { ptr } %49(ptr %42) #24
  %.fca.0.extract17 = extractvalue { ptr } %50, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 632, ptr %43)
  %52 = getelementptr i8, ptr %47, i64 16
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %42) #24
  %56 = sext i32 %55 to i64
  %57 = call ptr @bump_malloc(i64 %56)
  %58 = load ptr, ptr %16, align 8
  %59 = load ptr, ptr %15, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 632, ptr %59)
  %61 = load i32, ptr %18, align 8
  %62 = sext i32 %61 to i64
  %63 = getelementptr ptr, ptr %59, i64 %62
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr } undef, ptr %57, 0
  call void %66(ptr %58, { ptr } %67) #23
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %35
  %.0 = phi i32 [ 0, %35 ], [ %.1, %._crit_edge ]
  %68 = load ptr, ptr %16, align 8
  %69 = load ptr, ptr %15, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 632, ptr %69)
  %71 = load i32, ptr %18, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr ptr, ptr %69, i64 %72
  %74 = getelementptr i8, ptr %73, i64 8
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = call i32 %76(ptr %68) #24
  %78 = icmp slt i32 %.0, %77
  br i1 %78, label %79, label %._crit_edge

79:                                               ; preds = %._crit_edge1
  %80 = sext i32 %.0 to i64
  %81 = getelementptr i8, ptr %.fca.0.extract17, i64 %80
  %82 = load i8, ptr %81, align 1
  %83 = call ptr @llvm.invariant.start.p0(i64 632, ptr %69)
  %84 = load ptr, ptr %73, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = call { ptr } %85(ptr %68) #24
  %.fca.0.extract5 = extractvalue { ptr } %86, 0
  %87 = getelementptr i8, ptr %.fca.0.extract5, i64 %80
  store i8 %82, ptr %87, align 1
  %88 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %79
  %.1 = phi i32 [ %88, %79 ], [ %.0, %._crit_edge1 ]
  br i1 %78, label %._crit_edge1, label %.loopexit

.loopexit:                                        ; preds = %._crit_edge, %4
  %.sroa.phi = phi ptr [ %.sroa.gep22, %4 ], [ %.sroa.gep, %._crit_edge ]
  %.sroa.phi23 = phi ptr [ %.sroa.gep25, %4 ], [ %.sroa.gep24, %._crit_edge ]
  %.sroa.phi26 = phi ptr [ %.sroa.gep28, %4 ], [ %.sroa.gep27, %._crit_edge ]
  %89 = phi ptr [ %9, %4 ], [ %14, %._crit_edge ]
  %90 = phi ptr [ %8, %4 ], [ %13, %._crit_edge ]
  %91 = phi ptr [ %7, %4 ], [ %12, %._crit_edge ]
  %92 = phi ptr [ %6, %4 ], [ %11, %._crit_edge ]
  %93 = phi ptr [ %5, %4 ], [ %10, %._crit_edge ]
  %94 = phi ptr [ %.sroa.029, %4 ], [ %.sroa.0, %._crit_edge ]
  %95 = load ptr, ptr %16, align 8
  %96 = load ptr, ptr %15, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 632, ptr %96)
  %98 = load i32, ptr %18, align 8
  %99 = sext i32 %98 to i64
  %100 = getelementptr ptr, ptr %96, i64 %99
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %95) #24
  %104 = extractvalue { ptr } %103, 0
  store ptr %104, ptr %94, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 632, ptr %96)
  %106 = getelementptr i8, ptr %100, i64 8
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %107, align 8
  %109 = call i32 %108(ptr %95) #24
  store i32 %109, ptr %93, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr i8, ptr %104, i64 %110
  store i8 %3, ptr %111, align 1
  %112 = load ptr, ptr %16, align 8
  %113 = load ptr, ptr %15, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 632, ptr %113)
  %115 = load i32, ptr %18, align 8
  %116 = sext i32 %115 to i64
  %117 = getelementptr ptr, ptr %113, i64 %116
  %118 = getelementptr i8, ptr %117, i64 8
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %119, align 8
  %121 = call i32 %120(ptr %112) #24
  store i32 %121, ptr %92, align 4
  store i32 1, ptr %91, align 4
  %122 = add i32 %121, 1
  store i32 %122, ptr %90, align 4
  %123 = call ptr @llvm.invariant.start.p0(i64 632, ptr %113)
  %124 = getelementptr i8, ptr %119, i64 8
  %125 = load ptr, ptr %124, align 8
  call void %125(ptr %112, i32 %122) #23
  %126 = load ptr, ptr %15, align 8
  store ptr %126, ptr %89, align 8
  %127 = load ptr, ptr %16, align 8
  store ptr %127, ptr %.sroa.phi, align 8
  %128 = load ptr, ptr %17, align 8
  store ptr %128, ptr %.sroa.phi23, align 8
  %129 = load i32, ptr %18, align 8
  store i32 %129, ptr %.sroa.phi26, align 4
  call void @set_offset(ptr nonnull %89, ptr nonnull @String)
  %130 = load ptr, ptr %89, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = load ptr, ptr %.sroa.phi, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 1
  %134 = load ptr, ptr %.sroa.phi23, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %134, 2
  %136 = load i32, ptr %.sroa.phi26, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %136, 3
  ret { ptr, ptr, ptr, i32 } %137
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %.fca.1.extract13, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr %.fca.2.extract14, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %12, i64 24
  store i32 %.fca.3.extract15, ptr %15, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @String)
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr %.fca.1.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %16, i64 16
  store ptr %.fca.2.extract, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %16, i64 24
  store i32 %.fca.3.extract, ptr %19, align 8
  call void @set_offset(ptr nonnull %16, ptr nonnull @String)
  %20 = load ptr, ptr %16, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %17, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %18, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %19, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %29 = call ptr @llvm.invariant.start.p0(i64 632, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 72
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %5)
  %35 = call { ptr } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr } %35, 0
  %36 = load ptr, ptr %16, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %17, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = load ptr, ptr %18, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = load i32, ptr %19, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %42, 3
  %44 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %45 = call ptr @llvm.invariant.start.p0(i64 632, ptr %36)
  %46 = sext i32 %42 to i64
  %47 = getelementptr ptr, ptr %36, i64 %46
  %48 = getelementptr i8, ptr %47, i64 56
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr @behavior_wrapper(ptr %49, { ptr, ptr, ptr, i32 } %43, ptr nonnull %5)
  %51 = call i32 %50({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull %5) #25
  %52 = load ptr, ptr %13, align 8
  %53 = load ptr, ptr %12, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 632, ptr %53)
  %55 = load i32, ptr %15, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %52) #24
  %62 = add i32 %61, %51
  %63 = call ptr @llvm.invariant.start.p0(i64 632, ptr %53)
  %64 = getelementptr i8, ptr %57, i64 16
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %65, align 8
  %67 = call i32 %66(ptr %52) #24
  %68 = icmp slt i32 %62, %67
  %.sroa.gep = getelementptr inbounds i8, ptr %11, i64 8
  %.sroa.gep74 = getelementptr inbounds i8, ptr %8, i64 8
  %.sroa.gep76 = getelementptr inbounds i8, ptr %11, i64 16
  %.sroa.gep77 = getelementptr inbounds i8, ptr %8, i64 16
  %.sroa.gep79 = getelementptr inbounds i8, ptr %11, i64 24
  %.sroa.gep80 = getelementptr inbounds i8, ptr %8, i64 24
  %69 = call ptr @llvm.invariant.start.p0(i64 632, ptr %53)
  %70 = call i32 %60(ptr %52) #24
  br i1 %68, label %._crit_edge1, label %95

._crit_edge1:                                     ; preds = %4, %._crit_edge
  %.068 = phi i32 [ %.169, %._crit_edge ], [ 0, %4 ]
  %.0 = phi i32 [ %.1, %._crit_edge ], [ %70, %4 ]
  %71 = load ptr, ptr %13, align 8
  %72 = load ptr, ptr %12, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 632, ptr %72)
  %74 = load i32, ptr %15, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %71) #24
  %81 = add i32 %80, %51
  %82 = icmp slt i32 %.0, %81
  br i1 %82, label %83, label %._crit_edge

83:                                               ; preds = %._crit_edge1
  %84 = sext i32 %.068 to i64
  %85 = getelementptr i8, ptr %.fca.0.extract, i64 %84
  %86 = load i8, ptr %85, align 1
  %87 = call ptr @llvm.invariant.start.p0(i64 632, ptr %72)
  %88 = load ptr, ptr %76, align 8
  %89 = load ptr, ptr %88, align 8
  %90 = call { ptr } %89(ptr %71) #24
  %.fca.0.extract57 = extractvalue { ptr } %90, 0
  %91 = sext i32 %.0 to i64
  %92 = getelementptr i8, ptr %.fca.0.extract57, i64 %91
  store i8 %86, ptr %92, align 1
  %93 = add nsw i32 %.0, 1
  %94 = add i32 %.068, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %83
  %.169 = phi i32 [ %94, %83 ], [ %.068, %._crit_edge1 ]
  %.1 = phi i32 [ %93, %83 ], [ %.0, %._crit_edge1 ]
  br i1 %82, label %._crit_edge1, label %.loopexit

95:                                               ; preds = %4
  %96 = add i32 %70, %51
  %97 = call ptr @llvm.invariant.start.p0(i64 632, ptr %53)
  %98 = getelementptr i8, ptr %65, i64 8
  %99 = load ptr, ptr %98, align 8
  call void %99(ptr %52, i32 %96) #23
  %100 = load ptr, ptr %13, align 8
  %101 = load ptr, ptr %12, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 632, ptr %101)
  %103 = load i32, ptr %15, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr ptr, ptr %101, i64 %104
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %106, align 8
  %108 = call { ptr } %107(ptr %100) #24
  %.fca.0.extract49 = extractvalue { ptr } %108, 0
  %109 = call ptr @llvm.invariant.start.p0(i64 632, ptr %101)
  %110 = getelementptr i8, ptr %105, i64 16
  %111 = load ptr, ptr %110, align 8
  %112 = load ptr, ptr %111, align 8
  %113 = call i32 %112(ptr %100) #24
  %114 = sext i32 %113 to i64
  %115 = call ptr @bump_malloc(i64 %114)
  %116 = load ptr, ptr %13, align 8
  %117 = load ptr, ptr %12, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 632, ptr %117)
  %119 = load i32, ptr %15, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr i8, ptr %122, i64 8
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr } undef, ptr %115, 0
  call void %124(ptr %116, { ptr } %125) #23
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %._crit_edge2, %95
  %.072 = phi i32 [ 0, %95 ], [ %.173, %._crit_edge2 ]
  %.070 = phi i32 [ 0, %95 ], [ %.171, %._crit_edge2 ]
  %126 = load ptr, ptr %13, align 8
  %127 = load ptr, ptr %12, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 632, ptr %127)
  %129 = load i32, ptr %15, align 8
  %130 = sext i32 %129 to i64
  %131 = getelementptr ptr, ptr %127, i64 %130
  %132 = getelementptr i8, ptr %131, i64 8
  %133 = load ptr, ptr %132, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %126) #24
  %136 = add i32 %135, %51
  %137 = icmp slt i32 %.070, %136
  br i1 %137, label %138, label %._crit_edge2

138:                                              ; preds = %._crit_edge3
  %139 = call ptr @llvm.invariant.start.p0(i64 632, ptr %127)
  %140 = call i32 %134(ptr %126) #24
  %141 = icmp slt i32 %.070, %140
  br i1 %141, label %142, label %152

142:                                              ; preds = %138
  %143 = sext i32 %.070 to i64
  %144 = getelementptr i8, ptr %.fca.0.extract49, i64 %143
  %145 = load i8, ptr %144, align 1
  %146 = call ptr @llvm.invariant.start.p0(i64 632, ptr %127)
  %147 = load ptr, ptr %131, align 8
  %148 = load ptr, ptr %147, align 8
  %149 = call { ptr } %148(ptr %126) #24
  %.fca.0.extract29 = extractvalue { ptr } %149, 0
  %150 = getelementptr i8, ptr %.fca.0.extract29, i64 %143
  store i8 %145, ptr %150, align 1
  %151 = add nsw i32 %.070, 1
  br label %._crit_edge2

152:                                              ; preds = %138
  %153 = sext i32 %.072 to i64
  %154 = getelementptr i8, ptr %.fca.0.extract, i64 %153
  %155 = load i8, ptr %154, align 1
  %156 = call ptr @llvm.invariant.start.p0(i64 632, ptr %127)
  %157 = load ptr, ptr %131, align 8
  %158 = load ptr, ptr %157, align 8
  %159 = call { ptr } %158(ptr %126) #24
  %.fca.0.extract24 = extractvalue { ptr } %159, 0
  %160 = sext i32 %.070 to i64
  %161 = getelementptr i8, ptr %.fca.0.extract24, i64 %160
  store i8 %155, ptr %161, align 1
  %162 = add nsw i32 %.070, 1
  %163 = add i32 %.072, 1
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %142, %152, %._crit_edge3
  %.173 = phi i32 [ %.072, %142 ], [ %163, %152 ], [ %.072, %._crit_edge3 ]
  %.171 = phi i32 [ %151, %142 ], [ %162, %152 ], [ %.070, %._crit_edge3 ]
  br i1 %137, label %._crit_edge3, label %.loopexit

.loopexit:                                        ; preds = %._crit_edge2, %._crit_edge
  %.sroa.phi = phi ptr [ %.sroa.gep74, %._crit_edge ], [ %.sroa.gep, %._crit_edge2 ]
  %.sroa.phi75 = phi ptr [ %.sroa.gep77, %._crit_edge ], [ %.sroa.gep76, %._crit_edge2 ]
  %.sroa.phi78 = phi ptr [ %.sroa.gep80, %._crit_edge ], [ %.sroa.gep79, %._crit_edge2 ]
  %164 = phi ptr [ %8, %._crit_edge ], [ %11, %._crit_edge2 ]
  %165 = phi ptr [ %7, %._crit_edge ], [ %10, %._crit_edge2 ]
  %166 = phi ptr [ %6, %._crit_edge ], [ %9, %._crit_edge2 ]
  %167 = load ptr, ptr %13, align 8
  %168 = load ptr, ptr %12, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 632, ptr %168)
  %170 = load i32, ptr %15, align 8
  %171 = sext i32 %170 to i64
  %172 = getelementptr ptr, ptr %168, i64 %171
  %173 = getelementptr i8, ptr %172, i64 8
  %174 = load ptr, ptr %173, align 8
  %175 = load ptr, ptr %174, align 8
  %176 = call i32 %175(ptr %167) #24
  store i32 %176, ptr %166, align 4
  %177 = add i32 %176, %51
  store i32 %177, ptr %165, align 4
  %178 = call ptr @llvm.invariant.start.p0(i64 632, ptr %168)
  %179 = getelementptr i8, ptr %174, i64 8
  %180 = load ptr, ptr %179, align 8
  call void %180(ptr %167, i32 %177) #23
  %181 = load ptr, ptr %12, align 8
  store ptr %181, ptr %164, align 8
  %182 = load ptr, ptr %13, align 8
  store ptr %182, ptr %.sroa.phi, align 8
  %183 = load ptr, ptr %14, align 8
  store ptr %183, ptr %.sroa.phi75, align 8
  %184 = load i32, ptr %15, align 8
  store i32 %184, ptr %.sroa.phi78, align 4
  call void @set_offset(ptr nonnull %164, ptr nonnull @String)
  %185 = load ptr, ptr %164, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %185, 0
  %187 = load ptr, ptr %.sroa.phi, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %187, 1
  %189 = load ptr, ptr %.sroa.phi75, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %189, 2
  %191 = load i32, ptr %.sroa.phi78, align 4
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, i32 %191, 3
  ret { ptr, ptr, ptr, i32 } %192
}

define i8 @String__index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @String)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 632, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #24
  %19 = add i32 %18, -1
  %20 = icmp sgt i32 %3, %19
  br i1 %20, label %21, label %._crit_edge

21:                                               ; preds = %4
  %22 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %22)
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %21
  %23 = icmp sgt i32 %3, -1
  %24 = load ptr, ptr %6, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 632, ptr %25)
  %27 = load i32, ptr %8, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr ptr, ptr %25, i64 %28
  br i1 %23, label %30, label %36

30:                                               ; preds = %._crit_edge
  %31 = load ptr, ptr %29, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr } %32(ptr %24) #24
  %.fca.0.extract18 = extractvalue { ptr } %33, 0
  %34 = zext nneg i32 %3 to i64
  %35 = getelementptr i8, ptr %.fca.0.extract18, i64 %34
  br label %62

36:                                               ; preds = %._crit_edge
  %37 = getelementptr i8, ptr %29, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = call i32 %39(ptr %24) #24
  %41 = add i32 %40, %3
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %43, label %._crit_edge1

43:                                               ; preds = %36
  %44 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %44)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %36, %43
  %45 = load ptr, ptr %6, align 8
  %46 = load ptr, ptr %5, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 632, ptr %46)
  %48 = load i32, ptr %8, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr } %52(ptr %45) #24
  %.fca.0.extract11 = extractvalue { ptr } %53, 0
  %54 = call ptr @llvm.invariant.start.p0(i64 632, ptr %46)
  %55 = getelementptr i8, ptr %50, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call i32 %57(ptr %45) #24
  %59 = add i32 %58, %3
  %60 = sext i32 %59 to i64
  %61 = getelementptr i8, ptr %.fca.0.extract11, i64 %60
  br label %62

62:                                               ; preds = %._crit_edge1, %30
  %.reg2mem20.0.in = phi ptr [ %35, %30 ], [ %61, %._crit_edge1 ]
  %.reg2mem20.0 = load i8, ptr %.reg2mem20.0.in, align 1
  ret i8 %.reg2mem20.0
}

define noundef i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract3, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract4, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract5, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract, ptr %16, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @String)
  %17 = load ptr, ptr %10, align 8
  %18 = load ptr, ptr %9, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 632, ptr %18)
  %20 = load i32, ptr %12, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr ptr, ptr %18, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %17) #24
  %27 = load ptr, ptr %13, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %14, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %15, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %16, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %36 = call ptr @llvm.invariant.start.p0(i64 632, ptr %27)
  %37 = sext i32 %33 to i64
  %38 = getelementptr ptr, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %38, i64 56
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %42 = call i32 %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5) #25
  %.not = icmp eq i32 %26, %42
  br i1 %.not, label %.preheader, label %83

.preheader:                                       ; preds = %4, %81
  %.0 = phi i32 [ %.2, %81 ], [ 0, %4 ]
  %43 = load ptr, ptr %10, align 8
  %44 = load ptr, ptr %9, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 632, ptr %44)
  %46 = load i32, ptr %12, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #24
  %53 = icmp sge i32 %.0, %52
  br i1 %53, label %81, label %54

54:                                               ; preds = %.preheader
  %55 = call ptr @llvm.invariant.start.p0(i64 632, ptr %44)
  %56 = load ptr, ptr %48, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call { ptr } %57(ptr %43) #24
  %.fca.0.extract17 = extractvalue { ptr } %58, 0
  %59 = sext i32 %.0 to i64
  %60 = getelementptr i8, ptr %.fca.0.extract17, i64 %59
  %61 = load i8, ptr %60, align 1
  %62 = load ptr, ptr %13, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %14, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %15, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %16, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %71 = call ptr @llvm.invariant.start.p0(i64 632, ptr %62)
  %72 = sext i32 %68 to i64
  %73 = getelementptr ptr, ptr %62, i64 %72
  %74 = getelementptr i8, ptr %73, i64 72
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %69, ptr nonnull %5)
  %77 = call { ptr } %76({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr nonnull %5) #25
  %.fca.0.extract14 = extractvalue { ptr } %77, 0
  %78 = getelementptr i8, ptr %.fca.0.extract14, i64 %59
  %79 = load i8, ptr %78, align 1
  %.not25 = icmp eq i8 %61, %79
  %80 = zext i1 %.not25 to i32
  %spec.select = add i32 %.0, %80
  br label %81

81:                                               ; preds = %.preheader, %54
  %.reg2mem44.0.off0 = phi i1 [ %.not25, %54 ], [ false, %.preheader ]
  %.2 = phi i32 [ %spec.select, %54 ], [ %.0, %.preheader ]
  br i1 %.reg2mem44.0.off0, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %81
  %82 = select i1 %53, ptr %8, ptr %7
  br label %83

83:                                               ; preds = %.loopexit, %4
  %.reg2mem42.0 = phi i1 [ false, %4 ], [ %53, %.loopexit ]
  %.reg2mem40.0 = phi ptr [ %6, %4 ], [ %82, %.loopexit ]
  store i1 %.reg2mem42.0, ptr %.reg2mem40.0, align 1
  ret i1 %.reg2mem42.0
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract5, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 632, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %43, label %19

19:                                               ; preds = %3
  %20 = call ptr @llvm.invariant.start.p0(i64 632, ptr %9)
  %21 = call i32 %16(ptr %8) #24
  %22 = add i32 %21, -1
  %23 = call ptr @llvm.invariant.start.p0(i64 632, ptr %9)
  %24 = getelementptr i8, ptr %15, i64 8
  %25 = load ptr, ptr %24, align 8
  call void %25(ptr %8, i32 %22) #23
  %26 = load ptr, ptr %5, align 8
  %27 = load ptr, ptr %4, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 632, ptr %27)
  %29 = load i32, ptr %7, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call { ptr } %33(ptr %26) #24
  %.fca.0.extract10 = extractvalue { ptr } %34, 0
  %35 = call ptr @llvm.invariant.start.p0(i64 632, ptr %27)
  %36 = getelementptr i8, ptr %31, i64 8
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %26) #24
  %40 = sext i32 %39 to i64
  %41 = getelementptr i8, ptr %.fca.0.extract10, i64 %40
  %42 = load i8, ptr %41, align 1
  br label %43

43:                                               ; preds = %3, %19
  %.reg2mem19.sroa.0.0 = phi ptr [ @i8_typ, %19 ], [ @nil_typ, %3 ]
  %.reg2mem19.sroa.3.0 = phi i8 [ %42, %19 ], [ undef, %3 ]
  %.reload20.fca.0.insert = insertvalue { ptr, i8 } poison, ptr %.reg2mem19.sroa.0.0, 0
  %.reload20.fca.1.insert = insertvalue { ptr, i8 } %.reload20.fca.0.insert, i8 %.reg2mem19.sroa.3.0, 1
  ret { ptr, i8 } %.reload20.fca.1.insert
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %13 = load ptr, ptr %10, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 632, ptr %14)
  %16 = load i32, ptr %12, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call i32 %21(ptr %13) #24
  %23 = sext i32 %22 to i64
  %24 = call ptr @bump_malloc(i64 %23)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %3
  %.0 = phi i32 [ 0, %3 ], [ %.1, %._crit_edge ]
  %25 = load ptr, ptr %10, align 8
  %26 = load ptr, ptr %9, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 632, ptr %26)
  %28 = load i32, ptr %12, align 8
  %29 = sext i32 %28 to i64
  %30 = getelementptr ptr, ptr %26, i64 %29
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 %33(ptr %25) #24
  %35 = icmp slt i32 %.0, %34
  br i1 %35, label %36, label %._crit_edge

36:                                               ; preds = %._crit_edge1
  %37 = call ptr @llvm.invariant.start.p0(i64 632, ptr %26)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = call { ptr } %39(ptr %25) #24
  %.fca.0.extract24 = extractvalue { ptr } %40, 0
  %41 = sext i32 %.0 to i64
  %42 = getelementptr i8, ptr %.fca.0.extract24, i64 %41
  %43 = load i8, ptr %42, align 1
  %44 = getelementptr i8, ptr %24, i64 %41
  store i8 %43, ptr %44, align 1
  %45 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %36
  %.1 = phi i32 [ %45, %36 ], [ %.0, %._crit_edge1 ]
  br i1 %35, label %._crit_edge1, label %46

46:                                               ; preds = %._crit_edge
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %9, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 632, ptr %48)
  %50 = load i32, ptr %12, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 8
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 %55(ptr %47) #24
  %57 = call ptr @llvm.invariant.start.p0(i64 632, ptr %48)
  %58 = call i32 %55(ptr %47) #24
  store ptr @String, ptr %4, align 8
  %59 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %4)
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = call ptr @bump_malloc(i64 %60)
  %62 = load ptr, ptr %10, align 8
  %63 = load ptr, ptr %9, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 632, ptr %63)
  %65 = load i32, ptr %12, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = getelementptr i8, ptr %67, i64 8
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %69, align 8
  %71 = call i32 %70(ptr %62) #24
  %72 = call ptr @llvm.invariant.start.p0(i64 632, ptr %63)
  %73 = call i32 %70(ptr %62) #24
  %74 = insertvalue { ptr } undef, ptr %24, 0
  %75 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %61, 1
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr undef, 2
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %5, align 8
  %78 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @_parameterization_i32, ptr %78, align 8
  %79 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @_parameterization_i32, ptr %79, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %5)
  %81 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  store ptr @buffer_typ, ptr %6, align 8
  %82 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @i32_typ, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr @i32_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %77, ptr nonnull %6)
  call void %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %5, { ptr } %74, i32 %71, i32 %73) #25
  store ptr @String, ptr %7, align 8
  %85 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %61, ptr %85, align 8
  %86 = getelementptr inbounds i8, ptr %7, i64 16
  %87 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 10, ptr %87, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @String)
  %88 = load ptr, ptr %7, align 8
  %89 = load ptr, ptr %85, align 8
  %90 = load ptr, ptr %86, align 8
  %91 = load i32, ptr %87, align 8
  store ptr %88, ptr %8, align 8
  %92 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %89, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %90, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %91, ptr %94, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @String)
  %95 = load ptr, ptr %8, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = load ptr, ptr %92, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %99 = load ptr, ptr %93, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %101 = load i32, ptr %94, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  ret { ptr, ptr, ptr, i32 } %102
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = alloca [1 x ptr], align 8
  store ptr @StringIterator, ptr %8, align 8
  %9 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_StringIterator, ptr nonnull %8)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = call ptr @bump_malloc(i64 %10)
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = load ptr, ptr %4, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 8
  %15 = load ptr, ptr %5, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %12, i64 16
  %17 = load ptr, ptr %6, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %12, i64 24
  %19 = load i32, ptr %7, align 8
  store i32 %19, ptr %18, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @String)
  %20 = load ptr, ptr %12, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %14, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %16, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %18, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = insertvalue { ptr, ptr, ptr, i32 } { ptr @StringIterator, ptr undef, ptr undef, i32 undef }, ptr %11, 1
  %29 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr undef, 2
  %30 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 10, 3
  %31 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %31)
  %33 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @StringIterator)
  %34 = alloca { ptr }, align 8
  store ptr %20, ptr %34, align 8
  %35 = call ptr @behavior_wrapper(ptr nonnull @StringIterator_B_init_strString, { ptr, ptr, ptr, i32 } %30, ptr nonnull %34)
  call void %35({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull %31, { ptr, ptr, ptr, i32 } %27) #25
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @StringIterator, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %11, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 10, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %36, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = load ptr, ptr %37, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 1
  %44 = load ptr, ptr %38, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 2
  %46 = load i32, ptr %39, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %46, 3
  ret { ptr, ptr, ptr, i32 } %47
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = load ptr, ptr %4, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 8
  %11 = load ptr, ptr %5, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr inbounds i8, ptr %8, i64 16
  %13 = load ptr, ptr %6, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %8, i64 24
  %15 = load i32, ptr %7, align 8
  store i32 %15, ptr %14, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @String)
  %16 = load ptr, ptr %8, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %16, 0
  %18 = load ptr, ptr %10, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %18, 1
  %20 = load ptr, ptr %12, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 2
  %22 = load i32, ptr %14, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %22, 3
  ret { ptr, ptr, ptr, i32 } %23
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_StringIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 40, i64 8 }
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @StringIterator_field_StringIterator_0(ptr nocapture readnone %0) #1 {
  ret ptr @_parameterization_Character
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @StringIterator)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @String)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 80, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %13, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  call void %29(ptr %21, { ptr, ptr, ptr, i32 } %37) #23
  %38 = load ptr, ptr %6, align 8
  %39 = load ptr, ptr %5, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr %39)
  %41 = load i32, ptr %8, align 8
  %42 = sext i32 %41 to i64
  %43 = getelementptr ptr, ptr %39, i64 %42
  %44 = getelementptr i8, ptr %43, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %38, i32 0) #23
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract12, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract14, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract16, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @StringIterator)
  %14 = load ptr, ptr %11, align 8
  %15 = load ptr, ptr %10, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 80, ptr %15)
  %17 = load i32, ptr %13, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr ptr, ptr %15, i64 %18
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i32 %22(ptr %14) #24
  %24 = call ptr @llvm.invariant.start.p0(i64 80, ptr %15)
  %25 = load ptr, ptr %19, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %14) #24
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 0
  store ptr %.fca.0.extract, ptr %28, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %28, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %28, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %28, ptr nonnull @String)
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = load ptr, ptr %.fca.1.gep, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 1
  %33 = load ptr, ptr %.fca.2.gep, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = load i32, ptr %.fca.3.gep, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %35, 3
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %38 = call ptr @llvm.invariant.start.p0(i64 632, ptr %29)
  %39 = sext i32 %35 to i64
  %40 = getelementptr ptr, ptr %29, i64 %39
  %41 = getelementptr i8, ptr %40, i64 56
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @behavior_wrapper(ptr %42, { ptr, ptr, ptr, i32 } %36, ptr nonnull %4)
  %44 = call i32 %43({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr nonnull %4) #25
  %45 = icmp slt i32 %23, %44
  br i1 %45, label %46, label %145

46:                                               ; preds = %3
  %47 = load ptr, ptr %11, align 8
  %48 = load ptr, ptr %10, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 80, ptr %48)
  %50 = load i32, ptr %13, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 8
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 %55(ptr %47) #24
  %57 = add i32 %56, 1
  %58 = call ptr @llvm.invariant.start.p0(i64 80, ptr %48)
  %59 = getelementptr i8, ptr %54, i64 8
  %60 = load ptr, ptr %59, align 8
  call void %60(ptr %47, i32 %57) #23
  %61 = load ptr, ptr %11, align 8
  %62 = load ptr, ptr %10, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 80, ptr %62)
  %64 = load i32, ptr %13, align 8
  %65 = sext i32 %64 to i64
  %66 = getelementptr ptr, ptr %62, i64 %65
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call { ptr, ptr, ptr, i32 } %68(ptr %61) #24
  %.fca.0.extract45 = extractvalue { ptr, ptr, ptr, i32 } %69, 0
  store ptr %.fca.0.extract45, ptr %5, align 8
  %.fca.1.extract47 = extractvalue { ptr, ptr, ptr, i32 } %69, 1
  %.fca.1.gep48 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract47, ptr %.fca.1.gep48, align 8
  %.fca.2.extract49 = extractvalue { ptr, ptr, ptr, i32 } %69, 2
  %.fca.2.gep50 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract49, ptr %.fca.2.gep50, align 8
  %.fca.3.extract51 = extractvalue { ptr, ptr, ptr, i32 } %69, 3
  %.fca.3.gep52 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract51, ptr %.fca.3.gep52, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @String)
  %70 = load ptr, ptr %5, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %.fca.1.gep48, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %.fca.2.gep50, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %.fca.3.gep52, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %79 = call ptr @llvm.invariant.start.p0(i64 632, ptr %70)
  %80 = sext i32 %76 to i64
  %81 = getelementptr ptr, ptr %70, i64 %80
  %82 = getelementptr i8, ptr %81, i64 72
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4)
  %85 = call { ptr } %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4) #25
  %86 = load ptr, ptr %11, align 8
  %87 = load ptr, ptr %10, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 80, ptr %87)
  %89 = load i32, ptr %13, align 8
  %90 = sext i32 %89 to i64
  %91 = getelementptr ptr, ptr %87, i64 %90
  %92 = getelementptr i8, ptr %91, i64 8
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %86) #24
  store ptr @Character, ptr %6, align 8
  %96 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Character, ptr nonnull %6)
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = call ptr @bump_malloc(i64 %97)
  %99 = load ptr, ptr %11, align 8
  %100 = load ptr, ptr %10, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 80, ptr %100)
  %102 = load i32, ptr %13, align 8
  %103 = sext i32 %102 to i64
  %104 = getelementptr ptr, ptr %100, i64 %103
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr, ptr, ptr, i32 } %106(ptr %99) #24
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %107, 0
  store ptr %.fca.0.extract27, ptr %7, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %107, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %107, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %107, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr nonnull %7, ptr nonnull @String)
  %108 = load ptr, ptr %7, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %.fca.1.gep30, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %.fca.2.gep32, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %.fca.3.gep34, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %117 = call ptr @llvm.invariant.start.p0(i64 632, ptr %108)
  %118 = sext i32 %114 to i64
  %119 = getelementptr ptr, ptr %108, i64 %118
  %120 = getelementptr i8, ptr %119, i64 72
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr @behavior_wrapper(ptr %121, { ptr, ptr, ptr, i32 } %115, ptr nonnull %4)
  %123 = call { ptr } %122({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull %4) #25
  %.fca.0.extract24 = extractvalue { ptr } %123, 0
  %124 = load ptr, ptr %11, align 8
  %125 = load ptr, ptr %10, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 80, ptr %125)
  %127 = load i32, ptr %13, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr ptr, ptr %125, i64 %128
  %130 = getelementptr i8, ptr %129, i64 8
  %131 = load ptr, ptr %130, align 8
  %132 = load ptr, ptr %131, align 8
  %133 = call i32 %132(ptr %124) #24
  %134 = add i32 %133, -1
  %135 = sext i32 %134 to i64
  %136 = getelementptr i8, ptr %.fca.0.extract24, i64 %135
  %137 = load i8, ptr %136, align 1
  %138 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Character, ptr undef, ptr undef, i32 undef }, ptr %98, 1
  %139 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr undef, 2
  %140 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 10, 3
  store ptr @_parameterization_i8, ptr %8, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %142 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @Character)
  store ptr @i8_typ, ptr %9, align 8
  %143 = call ptr @behavior_wrapper(ptr nonnull @Character_B_init_bytei8, { ptr, ptr, ptr, i32 } %140, ptr nonnull %9)
  call void %143({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr nonnull %8, i8 %137) #25
  %144 = ptrtoint ptr %98 to i64
  %.sroa.3.8.insert.ext = zext i64 %144 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  br label %145

145:                                              ; preds = %3, %46
  %.reg2mem25.sroa.0.0 = phi ptr [ @Character, %46 ], [ @nil_typ, %3 ]
  %.reg2mem25.sroa.3.0 = phi i160 [ %.sroa.3.8.insert.insert, %46 ], [ undef, %3 ]
  %.reload26.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem25.sroa.0.0, 0
  %.reload26.fca.1.insert = insertvalue { ptr, i160 } %.reload26.fca.0.insert, i160 %.reg2mem25.sroa.3.0, 1
  ret { ptr, i160 } %.reload26.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Character(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_init_bytei8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Character)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 40, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i8 %15(ptr %8) #24
  ret i8 %16
}

define void @Character_init_bytei8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Character)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 40, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %9, i8 %3) #23
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i8 @Character_getter_byte(ptr nocapture readonly %0) #7 {
  %2 = load i8, ptr %0, align 1
  ret i8 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Character_setter_byte(ptr nocapture writeonly %0, i8 %1) #8 {
  store i8 %1, ptr %0, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @StringIterator_getter_index(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 32
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_str(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_capacity(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 12
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_capacity(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 12
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_length(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_length(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @String_getter_bytes(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr } undef, ptr %2, 0
  ret { ptr } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_bytes(ptr nocapture writeonly %0, { ptr } %1) #8 {
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %0, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Exception(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 144
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Exception_B_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 160
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract13, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract15, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract16, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Exception)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @String)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %13, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  call void %30(ptr %21, { ptr, ptr, ptr, i32 } %38) #23
  %39 = load ptr, ptr %6, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 104, ptr %40)
  %42 = load i32, ptr %8, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %39, i32 0) #23
  %48 = call ptr @bump_malloc(i64 1)
  %49 = alloca [1 x ptr], align 8
  store ptr @String, ptr %49, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %49)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = insertvalue { ptr } undef, ptr %48, 0
  %54 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %52, 1
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr undef, 2
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 10, 3
  %57 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %57, align 8
  %58 = getelementptr inbounds i8, ptr %57, i64 8
  store ptr @_parameterization_i32, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %57, i64 16
  store ptr @_parameterization_i32, ptr %59, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %57)
  %61 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %62 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr @i32_typ, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  store ptr @i32_typ, ptr %64, align 8
  %65 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %56, ptr nonnull %62)
  call void %65({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull %57, { ptr } %53, i32 0, i32 1) #25
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr %52, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  %69 = getelementptr inbounds i8, ptr %66, i64 24
  store i32 10, ptr %69, align 8
  call void @set_offset(ptr nonnull %66, ptr nonnull @String)
  %70 = load ptr, ptr %6, align 8
  %71 = load ptr, ptr %5, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 104, ptr %71)
  %73 = load i32, ptr %8, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 8
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %66, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = load ptr, ptr %67, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %84 = load ptr, ptr %68, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %86 = load i32, ptr %69, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  call void %79(ptr %70, { ptr, ptr, ptr, i32 } %87) #23
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Exception)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 104, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  call void %16(ptr %8, i32 0) #23
  %17 = call ptr @bump_malloc(i64 7)
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %17, align 8
  %18 = alloca [1 x ptr], align 8
  store ptr @String, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = insertvalue { ptr } undef, ptr %17, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr undef, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 10, 3
  %26 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr @_parameterization_i32, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr @_parameterization_i32, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %26)
  %30 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %31 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr @i32_typ, ptr %32, align 8
  %33 = getelementptr inbounds i8, ptr %31, i64 16
  store ptr @i32_typ, ptr %33, align 8
  %34 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %25, ptr nonnull %31)
  call void %34({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %26, { ptr } %22, i32 6, i32 7) #25
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %35, align 8
  %36 = getelementptr inbounds i8, ptr %35, i64 8
  store ptr %21, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %35, i64 16
  %38 = getelementptr inbounds i8, ptr %35, i64 24
  store i32 10, ptr %38, align 8
  call void @set_offset(ptr nonnull %35, ptr nonnull @String)
  %39 = load ptr, ptr %5, align 8
  %40 = load ptr, ptr %4, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 104, ptr %40)
  %42 = load i32, ptr %7, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 16
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %35, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = load ptr, ptr %36, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = load i32, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  call void %48(ptr %39, { ptr, ptr, ptr, i32 } %56) #23
  %57 = call ptr @bump_malloc(i64 1)
  %58 = alloca [1 x ptr], align 8
  store ptr @String, ptr %58, align 8
  %59 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %58)
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = call ptr @bump_malloc(i64 %60)
  %62 = insertvalue { ptr } undef, ptr %57, 0
  %63 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %61, 1
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr undef, 2
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 10, 3
  %66 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr @_parameterization_i32, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr @_parameterization_i32, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %66)
  %70 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %71 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %71, i64 16
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %65, ptr nonnull %71)
  call void %74({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr nonnull %66, { ptr } %62, i32 0, i32 1) #25
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  store ptr %61, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %75, i64 16
  %78 = getelementptr inbounds i8, ptr %75, i64 24
  store i32 10, ptr %78, align 8
  call void @set_offset(ptr nonnull %75, ptr nonnull @String)
  %79 = load ptr, ptr %5, align 8
  %80 = load ptr, ptr %4, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 104, ptr %80)
  %82 = load i32, ptr %7, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr ptr, ptr %80, i64 %83
  %85 = getelementptr i8, ptr %84, i64 8
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr i8, ptr %86, i64 8
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %75, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %91 = load ptr, ptr %76, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 1
  %93 = load ptr, ptr %77, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 2
  %95 = load i32, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %95, 3
  call void %88(ptr %79, { ptr, ptr, ptr, i32 } %96) #23
  ret void
}

define void @Exception_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract3, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract4, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Exception)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 104, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %10, i32 %3) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %22, align 8
  call void @set_offset(ptr nonnull %19, ptr nonnull @String)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %19, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %20, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %21, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %22, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @String)
  %31 = load ptr, ptr %7, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 104, ptr %32)
  %34 = load i32, ptr %9, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %23, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %41, 0
  %43 = load ptr, ptr %25, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 1
  %45 = load ptr, ptr %27, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 2
  %47 = load i32, ptr %29, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %47, 3
  call void %40(ptr %31, { ptr, ptr, ptr, i32 } %48) #23
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract89 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract91 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract93 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract95 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract89, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract91, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract93, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract95, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Exception)
  %9 = call ptr @bump_malloc(i64 10)
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %9, align 16
  %10 = alloca [1 x ptr], align 8
  store ptr @String, ptr %10, align 8
  %11 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %10)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr } undef, ptr %9, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %18)
  %22 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %23 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr @i32_typ, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr @i32_typ, ptr %25, align 8
  %26 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %17, ptr nonnull %23)
  call void %26({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %18, { ptr } %14, i32 9, i32 10) #25
  %27 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %28 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %29 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %17, ptr nonnull %4)
  %30 = call { ptr } %29({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %4) #25
  %.fca.0.extract71 = extractvalue { ptr } %30, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract71)
  %31 = call ptr @bump_malloc(i64 27)
  store <26 x i8> <i8 69, i8 120, i8 99, i8 101, i8 112, i8 116, i8 105, i8 111, i8 110, i8 32, i8 116, i8 104, i8 114, i8 111, i8 119, i8 110, i8 32, i8 102, i8 114, i8 111, i8 109, i8 32, i8 102, i8 105, i8 108, i8 101>, ptr %31, align 32
  %32 = alloca [1 x ptr], align 8
  store ptr @String, ptr %32, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %32)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = call ptr @bump_malloc(i64 %34)
  %36 = insertvalue { ptr } undef, ptr %31, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %35, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr undef, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 10, 3
  %40 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr @_parameterization_i32, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %40)
  %44 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %45 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %45, align 8
  %46 = getelementptr inbounds i8, ptr %45, i64 8
  store ptr @i32_typ, ptr %46, align 8
  %47 = getelementptr inbounds i8, ptr %45, i64 16
  store ptr @i32_typ, ptr %47, align 8
  %48 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %39, ptr nonnull %45)
  call void %48({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %40, { ptr } %36, i32 26, i32 27) #25
  %49 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %50 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %51 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
  %52 = call { ptr } %51({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4) #25
  %.fca.0.extract53 = extractvalue { ptr } %52, 0
  %puts97 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract53)
  %53 = load ptr, ptr %6, align 8
  %54 = load ptr, ptr %5, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 104, ptr %54)
  %56 = load i32, ptr %8, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr, ptr, ptr, i32 } %61(ptr %53) #24
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract52 = extractvalue { ptr, ptr, ptr, i32 } %62, 0
  store ptr %.fca.0.extract52, ptr %63, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %63, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %63, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %63, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %63, ptr nonnull @String)
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %.fca.1.gep, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %.fca.2.gep, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %.fca.3.gep, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %73 = call ptr @llvm.invariant.start.p0(i64 632, ptr %64)
  %74 = sext i32 %70 to i64
  %75 = getelementptr ptr, ptr %64, i64 %74
  %76 = getelementptr i8, ptr %75, i64 80
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %71, ptr nonnull %4)
  %79 = call { ptr } %78({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr nonnull %4) #25
  %.fca.0.extract50 = extractvalue { ptr } %79, 0
  %puts98 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract50)
  %80 = call ptr @bump_malloc(i64 8)
  store <7 x i8> <i8 65, i8 116, i8 32, i8 108, i8 105, i8 110, i8 101>, ptr %80, align 8
  %81 = alloca [1 x ptr], align 8
  store ptr @String, ptr %81, align 8
  %82 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %81)
  %83 = extractvalue { i64, i64 } %82, 0
  %84 = call ptr @bump_malloc(i64 %83)
  %85 = insertvalue { ptr } undef, ptr %80, 0
  %86 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %84, 1
  %87 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr undef, 2
  %88 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 10, 3
  %89 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %89, align 8
  %90 = getelementptr inbounds i8, ptr %89, i64 8
  store ptr @_parameterization_i32, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %89, i64 16
  store ptr @_parameterization_i32, ptr %91, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %89)
  %93 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %94 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %94, i64 8
  store ptr @i32_typ, ptr %95, align 8
  %96 = getelementptr inbounds i8, ptr %94, i64 16
  store ptr @i32_typ, ptr %96, align 8
  %97 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %88, ptr nonnull %94)
  call void %97({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull %89, { ptr } %85, i32 7, i32 8) #25
  %98 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %99 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %100 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4)
  %101 = call { ptr } %100({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4) #25
  %.fca.0.extract33 = extractvalue { ptr } %101, 0
  %puts99 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract33)
  %102 = load ptr, ptr %6, align 8
  %103 = load ptr, ptr %5, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 104, ptr %103)
  %105 = load i32, ptr %8, align 8
  %106 = sext i32 %105 to i64
  %107 = getelementptr ptr, ptr %103, i64 %106
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %108, align 8
  %110 = call i32 %109(ptr %102) #24
  %111 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %110)
  %112 = call ptr @bump_malloc(i64 13)
  store <12 x i8> <i8 87, i8 105, i8 116, i8 104, i8 32, i8 109, i8 101, i8 115, i8 115, i8 97, i8 103, i8 101>, ptr %112, align 16
  %113 = alloca [1 x ptr], align 8
  store ptr @String, ptr %113, align 8
  %114 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %113)
  %115 = extractvalue { i64, i64 } %114, 0
  %116 = call ptr @bump_malloc(i64 %115)
  %117 = insertvalue { ptr } undef, ptr %112, 0
  %118 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %116, 1
  %119 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr undef, 2
  %120 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 10, 3
  %121 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %121, align 8
  %122 = getelementptr inbounds i8, ptr %121, i64 8
  store ptr @_parameterization_i32, ptr %122, align 8
  %123 = getelementptr inbounds i8, ptr %121, i64 16
  store ptr @_parameterization_i32, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %121)
  %125 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %126 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %126, align 8
  %127 = getelementptr inbounds i8, ptr %126, i64 8
  store ptr @i32_typ, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %126, i64 16
  store ptr @i32_typ, ptr %128, align 8
  %129 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %120, ptr nonnull %126)
  call void %129({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull %121, { ptr } %117, i32 12, i32 13) #25
  %130 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %131 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %132 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %120, ptr nonnull %4)
  %133 = call { ptr } %132({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull %4) #25
  %.fca.0.extract15 = extractvalue { ptr } %133, 0
  %puts100 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract15)
  %134 = load ptr, ptr %5, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = load ptr, ptr %6, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %136, 1
  %138 = load ptr, ptr %7, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %138, 2
  %140 = load i32, ptr %8, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 %140, 3
  %142 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %143 = call ptr @llvm.invariant.start.p0(i64 104, ptr %134)
  %144 = sext i32 %140 to i64
  %145 = getelementptr ptr, ptr %134, i64 %144
  %146 = getelementptr i8, ptr %145, i64 56
  %147 = load ptr, ptr %146, align 8
  %148 = call ptr @behavior_wrapper(ptr %147, { ptr, ptr, ptr, i32 } %141, ptr nonnull %4)
  call void %148({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr nonnull %4) #25
  %149 = call ptr @bump_malloc(i64 10)
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %149, align 16
  %150 = alloca [1 x ptr], align 8
  store ptr @String, ptr %150, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %150)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  %154 = insertvalue { ptr } undef, ptr %149, 0
  %155 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %153, 1
  %156 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr undef, 2
  %157 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 10, 3
  %158 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %158, align 8
  %159 = getelementptr inbounds i8, ptr %158, i64 8
  store ptr @_parameterization_i32, ptr %159, align 8
  %160 = getelementptr inbounds i8, ptr %158, i64 16
  store ptr @_parameterization_i32, ptr %160, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %158)
  %162 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %163 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %163, align 8
  %164 = getelementptr inbounds i8, ptr %163, i64 8
  store ptr @i32_typ, ptr %164, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 16
  store ptr @i32_typ, ptr %165, align 8
  %166 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %157, ptr nonnull %163)
  call void %166({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr nonnull %158, { ptr } %154, i32 9, i32 10) #25
  %167 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %168 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %169 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %157, ptr nonnull %4)
  %170 = call { ptr } %169({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr } %170, 0
  %puts101 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract4, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract8, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Exception)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract1, ptr %19, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @String)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 632, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 80
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr } %35, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #10

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_message(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_file_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Exception_getter_line_number(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_line_number(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Math(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Math_B__Self_sqrt_xf64(ptr nocapture %0) #22 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Math__Self_sqrt_xf64
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define ptr @Math_B__Self_abs_xf64__Self_abs_xi32(ptr nocapture %0) #22 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @f64_typ
  %5 = select i1 %4, i64 8, i64 9
  %6 = getelementptr [17 x ptr], ptr @Math, i64 0, i64 %5
  %7 = getelementptr i8, ptr %6, i64 80
  %8 = load ptr, ptr %7, align 8
  ret ptr %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define ptr @Math_B__Self_max_af64_bf64__Self_max_ai32_bi32(ptr nocapture %0) #22 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @i32_typ
  %5 = select i1 %4, i64 11, i64 10
  %6 = getelementptr [17 x ptr], ptr @Math, i64 0, i64 %5
  %7 = getelementptr i8, ptr %6, i64 80
  %8 = load ptr, ptr %7, align 8
  ret ptr %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define ptr @Math_B__Self_min_ai32_bi32__Self_min_af64_bf64(ptr nocapture %0) #22 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @f64_typ
  %5 = select i1 %4, i64 13, i64 12
  %6 = getelementptr [17 x ptr], ptr @Math, i64 0, i64 %5
  %7 = getelementptr i8, ptr %6, i64 80
  %8 = load ptr, ptr %7, align 8
  ret ptr %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Math_B__Self_round_xf64(ptr nocapture %0) #22 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Math__Self_round_xf64
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Math_B__Self_floor_xf64(ptr nocapture %0) #22 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Math__Self_floor_xf64
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Math_B__Self_ceiling_xf64(ptr nocapture %0) #22 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Math__Self_ceiling_xf64
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define double @Math__Self_sqrt_xf64(ptr nocapture readnone %0, double %1) #1 {
  %3 = tail call double @llvm.sqrt.f64(double %1)
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_abs_xf64(ptr nocapture readnone %0, { ptr, i64 } %1) #1 {
  %.fca.1.extract8 = extractvalue { ptr, i64 } %1, 1
  %3 = bitcast i64 %.fca.1.extract8 to double
  %4 = fcmp ult double %3, 0.000000e+00
  %5 = fneg double %3
  %6 = bitcast double %5 to i64
  %.reg2mem5.sroa.3.0 = select i1 %4, i64 %6, i64 %.fca.1.extract8
  %.reload6.fca.1.insert = insertvalue { ptr, i64 } { ptr @f64_typ, i64 undef }, i64 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i64 } %.reload6.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_abs_xi32(ptr nocapture readnone %0, { ptr, i64 } %1) #1 {
  %.fca.1.extract7 = extractvalue { ptr, i64 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i64 %.fca.1.extract7 to i32
  %.sroa.013.0.insert.ext = and i64 %.fca.1.extract7, 2147483647
  %3 = sub i32 0, %.sroa.1.8.extract.trunc
  %.sroa.09.0.insert.ext = zext i32 %3 to i64
  %4 = icmp slt i32 %.sroa.1.8.extract.trunc, 0
  %.reg2mem5.sroa.3.0 = select i1 %4, i64 %.sroa.09.0.insert.ext, i64 %.sroa.013.0.insert.ext
  %.reload6.fca.1.insert = insertvalue { ptr, i64 } { ptr @i32_typ, i64 undef }, i64 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i64 } %.reload6.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_max_af64_bf64(ptr nocapture readnone %0, { ptr, i64 } %1, { ptr, i64 } %2) #1 {
.cont:
  %.fca.1.extract4 = extractvalue { ptr, i64 } %1, 1
  %3 = bitcast i64 %.fca.1.extract4 to double
  %.fca.1.extract = extractvalue { ptr, i64 } %2, 1
  %4 = bitcast i64 %.fca.1.extract to double
  %5 = fcmp ogt double %3, %4
  %.sroa.speculated = select i1 %5, double %3, double %4
  %6 = bitcast double %.sroa.speculated to i64
  %7 = insertvalue { ptr, i64 } { ptr @f64_typ, i64 undef }, i64 %6, 1
  ret { ptr, i64 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_max_ai32_bi32(ptr nocapture readnone %0, { ptr, i64 } %1, { ptr, i64 } %2) #1 {
.cont:
  %.fca.1.extract6 = extractvalue { ptr, i64 } %1, 1
  %.sroa.18.8.extract.trunc = trunc i64 %.fca.1.extract6 to i32
  %.fca.1.extract = extractvalue { ptr, i64 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i64 %.fca.1.extract to i32
  %.sroa.speculated = tail call i32 @llvm.smax.i32(i32 %.sroa.18.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  %.sroa.2.8.insert.ext = zext i32 %.sroa.speculated to i64
  %3 = insertvalue { ptr, i64 } { ptr @i32_typ, i64 undef }, i64 %.sroa.2.8.insert.ext, 1
  ret { ptr, i64 } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_min_ai32_bi32(ptr nocapture readnone %0, { ptr, i64 } %1, { ptr, i64 } %2) #1 {
.cont:
  %.fca.1.extract6 = extractvalue { ptr, i64 } %1, 1
  %.sroa.18.8.extract.trunc = trunc i64 %.fca.1.extract6 to i32
  %.fca.1.extract = extractvalue { ptr, i64 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i64 %.fca.1.extract to i32
  %.sroa.speculated = tail call i32 @llvm.smin.i32(i32 %.sroa.18.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  %.sroa.2.8.insert.ext = zext i32 %.sroa.speculated to i64
  %3 = insertvalue { ptr, i64 } { ptr @i32_typ, i64 undef }, i64 %.sroa.2.8.insert.ext, 1
  ret { ptr, i64 } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_min_af64_bf64(ptr nocapture readnone %0, { ptr, i64 } %1, { ptr, i64 } %2) #1 {
.cont:
  %.fca.1.extract4 = extractvalue { ptr, i64 } %1, 1
  %3 = bitcast i64 %.fca.1.extract4 to double
  %.fca.1.extract = extractvalue { ptr, i64 } %2, 1
  %4 = bitcast i64 %.fca.1.extract to double
  %5 = fcmp olt double %3, %4
  %.sroa.speculated = select i1 %5, double %3, double %4
  %6 = bitcast double %.sroa.speculated to i64
  %7 = insertvalue { ptr, i64 } { ptr @f64_typ, i64 undef }, i64 %6, 1
  ret { ptr, i64 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define double @Math__Self_round_xf64(ptr nocapture readnone %0, double %1) #1 {
  %3 = tail call double @llvm.round.f64(double %1)
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define double @Math__Self_floor_xf64(ptr nocapture readnone %0, double %1) #1 {
  %3 = tail call double @llvm.floor.f64(double %1)
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define double @Math__Self_ceiling_xf64(ptr nocapture readnone %0, double %1) #1 {
  %3 = tail call double @llvm.ceil.f64(double %1)
  ret double %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #20

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #20

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.round.f64(double) #20

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #20

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #20

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #20

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Range(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 12, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @Range_field_Range_0(ptr nocapture readnone %0) #1 {
  ret ptr @_parameterization_i32
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_init_endi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_init_starti32_endi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_step_stepi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Range_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 304
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Range_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 312
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Range_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 320
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Range_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 328
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define void @Range_init_endi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Range)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 440, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %9, i32 %3) #23
  %19 = load ptr, ptr %6, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 440, ptr %20)
  %22 = load i32, ptr %8, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  call void %27(ptr %19, i32 0) #23
  %28 = load ptr, ptr %6, align 8
  %29 = load ptr, ptr %5, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 440, ptr %29)
  %31 = load i32, ptr %8, align 8
  %32 = sext i32 %31 to i64
  %33 = getelementptr ptr, ptr %29, i64 %32
  %34 = getelementptr i8, ptr %33, i64 16
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr i8, ptr %35, i64 8
  %37 = load ptr, ptr %36, align 8
  call void %37(ptr %28, i32 1) #23
  ret void
}

define void @Range_init_starti32_endi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, i32 %4) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Range)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 440, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %10, i32 %3) #23
  %19 = load ptr, ptr %7, align 8
  %20 = load ptr, ptr %6, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 440, ptr %20)
  %22 = load i32, ptr %9, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %19, i32 %4) #23
  %29 = load ptr, ptr %7, align 8
  %30 = load ptr, ptr %6, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 440, ptr %30)
  %32 = load i32, ptr %9, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr ptr, ptr %30, i64 %33
  %35 = getelementptr i8, ptr %34, i64 16
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  call void %38(ptr %29, i32 1) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @Range_step_stepi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Range)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 440, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %9, i32 %3) #23
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = load ptr, ptr %5, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 8
  %22 = load ptr, ptr %6, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr inbounds i8, ptr %19, i64 16
  %24 = load ptr, ptr %7, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %19, i64 24
  %26 = load i32, ptr %8, align 8
  store i32 %26, ptr %25, align 8
  call void @set_offset(ptr nonnull %19, ptr nonnull @Range)
  %27 = load ptr, ptr %19, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %21, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  ret { ptr, ptr, ptr, i32 } %34
}

define { ptr, ptr, ptr, i32 } @Range_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Range)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 440, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %17 = call ptr @llvm.invariant.start.p0(i64 440, ptr %9)
  %18 = getelementptr i8, ptr %13, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %8) #24
  %22 = call ptr @llvm.invariant.start.p0(i64 440, ptr %9)
  %23 = getelementptr i8, ptr %13, i64 16
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %8) #24
  %27 = alloca [1 x ptr], align 8
  store ptr @RangeIterator, ptr %27, align 8
  %28 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_RangeIterator, ptr nonnull %27)
  %29 = extractvalue { i64, i64 } %28, 0
  %30 = call ptr @bump_malloc(i64 %29)
  %31 = load ptr, ptr %5, align 8
  %32 = load ptr, ptr %4, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %34 = load i32, ptr %7, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %31) #24
  %40 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %41 = getelementptr i8, ptr %36, i64 8
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %31) #24
  %45 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %46 = getelementptr i8, ptr %36, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call i32 %48(ptr %31) #24
  %50 = insertvalue { ptr, ptr, ptr, i32 } { ptr @RangeIterator, ptr undef, ptr undef, i32 undef }, ptr %30, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr undef, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 10, 3
  %53 = alloca [3 x ptr], align 8
  store ptr @_parameterization_i32, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr @_parameterization_i32, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %53, i64 16
  store ptr @_parameterization_i32, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %53)
  %57 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @RangeIterator)
  %58 = alloca { ptr, ptr, ptr }, align 8
  store ptr @i32_typ, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr @i32_typ, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %58, i64 16
  store ptr @i32_typ, ptr %60, align 8
  %61 = call ptr @behavior_wrapper(ptr nonnull @RangeIterator_B_init_counteri32_endi32_stepi32, { ptr, ptr, ptr, i32 } %52, ptr nonnull %58)
  call void %61({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull %53, i32 %39, i32 %44, i32 %49) #25
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @RangeIterator, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr %30, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  %65 = getelementptr inbounds i8, ptr %62, i64 24
  store i32 10, ptr %65, align 8
  call void @set_offset(ptr nonnull %62, ptr nonnull @Iterator)
  %66 = load ptr, ptr %62, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = load ptr, ptr %63, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %64, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %72 = load i32, ptr %65, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  ret { ptr, ptr, ptr, i32 } %73
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_RangeIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 12, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @RangeIterator_B_init_counteri32_endi32_stepi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @RangeIterator_field_RangeIterator_0(ptr nocapture readnone %0) #1 {
  ret ptr @_parameterization_i32
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @RangeIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @RangeIterator_init_counteri32_endi32_stepi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, i32 %4, i32 %5) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @RangeIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %11, i32 %3) #23
  %20 = load ptr, ptr %8, align 8
  %21 = load ptr, ptr %7, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 88, ptr %21)
  %23 = load i32, ptr %10, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, i32 %4) #23
  %30 = load ptr, ptr %8, align 8
  %31 = load ptr, ptr %7, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 88, ptr %31)
  %33 = load i32, ptr %10, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 16
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %30, i32 %5) #23
  ret void
}

define { ptr, i160 } @RangeIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract5, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @RangeIterator)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %17 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %18 = getelementptr i8, ptr %13, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %8) #24
  %22 = icmp sgt i32 %16, %21
  br i1 %22, label %37, label %23

23:                                               ; preds = %3
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %25 = call i32 %15(ptr %8) #24
  %26 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %27 = call i32 %15(ptr %8) #24
  %28 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %29 = getelementptr i8, ptr %13, i64 16
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call i32 %31(ptr %8) #24
  %33 = add i32 %32, %27
  %34 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %35 = getelementptr i8, ptr %14, i64 8
  %36 = load ptr, ptr %35, align 8
  call void %36(ptr %8, i32 %33) #23
  %.sroa.07.0.insert.ext = zext i32 %25 to i160
  br label %37

37:                                               ; preds = %3, %23
  %.reg2mem21.sroa.0.0 = phi ptr [ @i32_typ, %23 ], [ @nil_typ, %3 ]
  %.reg2mem21.sroa.3.0 = phi i160 [ %.sroa.07.0.insert.ext, %23 ], [ undef, %3 ]
  %.reload22.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem21.sroa.0.0, 0
  %.reload22.fca.1.insert = insertvalue { ptr, i160 } %.reload22.fca.0.insert, i160 %.reg2mem21.sroa.3.0, 1
  ret { ptr, i160 } %.reload22.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @RangeIterator_getter_step(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @RangeIterator_setter_step(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @RangeIterator_getter_end(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 4
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @RangeIterator_setter_end(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 4
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @RangeIterator_getter_counter(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @RangeIterator_setter_counter(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Range_getter_step(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Range_setter_step(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Range_getter_end(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 4
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Range_setter_end(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 4
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Range_getter_start(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Range_setter_start(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_IO(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @IO_B__Self_print_xString__Self_print_xCharacter__Self_print_xNil__Self_print_xi8__Self_print_xi64__Self_print_xi1__Self_print_xRepresentable__Self_print_xi32__Self_print_xf64(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @bool_typ
  br i1 %4, label %._crit_edge, label %5

5:                                                ; preds = %1
  %6 = icmp eq ptr %3, @i8_typ
  br i1 %6, label %._crit_edge, label %7

7:                                                ; preds = %5
  %8 = getelementptr i8, ptr %3, i64 8
  %9 = getelementptr i8, ptr %3, i64 16
  %10 = getelementptr i8, ptr %3, i64 24
  %11 = getelementptr i8, ptr %3, i64 32
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = load i64, ptr @Representable, align 8
  %17 = tail call i1 @subtype_test_wrapper(ptr %14, i64 %13, i64 %12, i64 %16, i64 ptrtoint (ptr @Representable to i64), ptr %15)
  br i1 %17, label %18, label %.critedge

18:                                               ; preds = %7
  %19 = load i64, ptr %8, align 4
  %20 = load i64, ptr %9, align 4
  %21 = load ptr, ptr %10, align 8
  %22 = load ptr, ptr %11, align 8
  %23 = load i64, ptr @String, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %21, i64 %20, i64 %19, i64 %23, i64 ptrtoint (ptr @String to i64), ptr %22)
  br i1 %24, label %.critedge, label %25

25:                                               ; preds = %18
  %26 = load i64, ptr %8, align 4
  %27 = load i64, ptr %9, align 4
  %28 = load ptr, ptr %10, align 8
  %29 = load ptr, ptr %11, align 8
  %30 = load i64, ptr @Character, align 8
  %31 = tail call i1 @subtype_test_wrapper(ptr %28, i64 %27, i64 %26, i64 %30, i64 ptrtoint (ptr @Character to i64), ptr %29)
  br i1 %31, label %.critedge, label %._crit_edge

.critedge:                                        ; preds = %18, %7, %25
  %32 = load i64, ptr %8, align 4
  %33 = load i64, ptr %9, align 4
  %34 = load ptr, ptr %10, align 8
  %35 = load ptr, ptr %11, align 8
  %36 = load i64, ptr @String, align 8
  %37 = tail call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 %36, i64 ptrtoint (ptr @String to i64), ptr %35)
  br i1 %37, label %38, label %.critedge14

38:                                               ; preds = %.critedge
  %39 = load i64, ptr %8, align 4
  %40 = load i64, ptr %9, align 4
  %41 = load ptr, ptr %10, align 8
  %42 = load ptr, ptr %11, align 8
  %43 = load i64, ptr @Character, align 8
  %44 = tail call i1 @subtype_test_wrapper(ptr %41, i64 %40, i64 %39, i64 %43, i64 ptrtoint (ptr @Character to i64), ptr %42)
  br i1 %44, label %.critedge14, label %._crit_edge

.critedge14:                                      ; preds = %.critedge, %38
  %45 = icmp eq ptr %3, @i64_typ
  br i1 %45, label %._crit_edge, label %46

46:                                               ; preds = %.critedge14
  %47 = icmp eq ptr %3, @i32_typ
  br i1 %47, label %._crit_edge, label %48

48:                                               ; preds = %46
  %49 = icmp eq ptr %3, @f64_typ
  br i1 %49, label %._crit_edge, label %50

50:                                               ; preds = %48
  %51 = icmp eq ptr %3, @nil_typ
  %52 = icmp eq ptr %3, null
  %53 = or i1 %51, %52
  %54 = select i1 %53, i32 3, i32 2
  br i1 %53, label %._crit_edge, label %55

55:                                               ; preds = %50
  %56 = load i64, ptr %8, align 4
  %57 = load i64, ptr %9, align 4
  %58 = load ptr, ptr %10, align 8
  %59 = load ptr, ptr %11, align 8
  %60 = load i64, ptr @Character, align 8
  %61 = tail call i1 @subtype_test_wrapper(ptr %58, i64 %57, i64 %56, i64 %60, i64 ptrtoint (ptr @Character to i64), ptr %59)
  br i1 %61, label %62, label %._crit_edge

62:                                               ; preds = %55
  %63 = load i64, ptr %8, align 4
  %64 = load i64, ptr %9, align 4
  %65 = load ptr, ptr %10, align 8
  %66 = load ptr, ptr %11, align 8
  %67 = tail call i1 @subtype_test_wrapper(ptr %65, i64 %64, i64 %63, i64 %36, i64 ptrtoint (ptr @String to i64), ptr %66)
  br label %._crit_edge

._crit_edge:                                      ; preds = %5, %25, %46, %50, %55, %62, %48, %.critedge14, %38, %1
  %.reg2mem25.0 = phi i32 [ 6, %1 ], [ 4, %5 ], [ 5, %.critedge14 ], [ 8, %46 ], [ 9, %48 ], [ %54, %62 ], [ %54, %55 ], [ %54, %50 ], [ 1, %38 ], [ 7, %25 ]
  %68 = zext nneg i32 %.reg2mem25.0 to i64
  %69 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %68
  %70 = getelementptr i8, ptr %69, i64 80
  %71 = load ptr, ptr %70, align 8
  ret ptr %71
}

define void @IO__Self_print_xString(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %5, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %6 = load ptr, ptr %4, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %8 = load ptr, ptr %5, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %8, 1
  %10 = getelementptr inbounds i8, ptr %4, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr inbounds i8, ptr %4, i64 24
  %14 = load i32, ptr %13, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %17 = call ptr @llvm.invariant.start.p0(i64 632, ptr %6)
  %18 = sext i32 %14 to i64
  %19 = getelementptr ptr, ptr %6, i64 %18
  %20 = getelementptr i8, ptr %19, i64 80
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr @behavior_wrapper(ptr %21, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3)
  %23 = call { ptr } %22({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3) #25
  %.fca.0.extract = extractvalue { ptr } %23, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

define void @IO__Self_print_xCharacter(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %5, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Character)
  %6 = call ptr @bump_malloc(i64 2)
  %7 = load ptr, ptr %4, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %9 = load ptr, ptr %5, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %9, 1
  %11 = getelementptr inbounds i8, ptr %4, i64 16
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 2
  %14 = getelementptr inbounds i8, ptr %4, i64 24
  %15 = load i32, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %15, 3
  %17 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %18 = call ptr @llvm.invariant.start.p0(i64 40, ptr %7)
  %19 = sext i32 %15 to i64
  %20 = getelementptr ptr, ptr %7, i64 %19
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = call ptr @behavior_wrapper(ptr %22, { ptr, ptr, ptr, i32 } %16, ptr nonnull %3)
  %24 = call i8 %23({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %3) #25
  store i8 %24, ptr %6, align 1
  %25 = getelementptr i8, ptr %6, i64 1
  store i8 0, ptr %25, align 1
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %6)
  ret void
}

define void @IO__Self_print_xNil(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = tail call ptr @bump_malloc(i64 4)
  store <3 x i8> <i8 110, i8 105, i8 108>, ptr %4, align 4
  %5 = alloca [1 x ptr], align 8
  store ptr @String, ptr %5, align 8
  %6 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %7 = call { i64, i64 } @size_wrapper(ptr %6, ptr nonnull %5)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = call ptr @bump_malloc(i64 %8)
  %10 = insertvalue { ptr } undef, ptr %4, 0
  %11 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %9, 1
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr undef, 2
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 10, 3
  %14 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr @_parameterization_i32, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 16
  store ptr @_parameterization_i32, ptr %16, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %14)
  %18 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %19 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %20 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr @i32_typ, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr @i32_typ, ptr %22, align 8
  %23 = call ptr @behavior_wrapper(ptr %19, { ptr, ptr, ptr, i32 } %13, ptr nonnull %20)
  call void %23({ ptr, ptr, ptr, i32 } %13, { ptr, ptr, ptr, i32 } %13, ptr nonnull %14, { ptr } %10, i32 3, i32 4) #25
  %24 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %25 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %26 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 160), align 8
  %27 = call ptr @behavior_wrapper(ptr %26, { ptr, ptr, ptr, i32 } %13, ptr nonnull %3)
  %28 = call { ptr } %27({ ptr, ptr, ptr, i32 } %13, { ptr, ptr, ptr, i32 } %13, ptr nonnull %3) #25
  %.fca.0.extract = extractvalue { ptr } %28, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi8(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  %3 = sext i8 %.sroa.1.8.extract.trunc to i32
  %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %3)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi64(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %.sroa.1.8.extract.trunc)
  ret void
}

define void @IO__Self_print_xi1(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %.sroa.1.sroa.0 = alloca i8, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  store i8 %.sroa.1.8.extract.trunc, ptr %.sroa.1.sroa.0, align 8
  %.sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.8. = load i1, ptr %.sroa.1.sroa.0, align 8
  br i1 %.sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.8., label %10, label %33

10:                                               ; preds = %2
  %11 = tail call ptr @bump_malloc(i64 5)
  store <4 x i8> <i8 116, i8 114, i8 117, i8 101>, ptr %11, align 4
  store ptr @String, ptr %4, align 8
  %12 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %13 = call { i64, i64 } @size_wrapper(ptr %12, ptr nonnull %4)
  %14 = extractvalue { i64, i64 } %13, 0
  %15 = call ptr @bump_malloc(i64 %14)
  %16 = insertvalue { ptr } undef, ptr %11, 0
  %17 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %15, 1
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr undef, 2
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %5, align 8
  %20 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @_parameterization_i32, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %5)
  %23 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %24 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %6, align 8
  %25 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @i32_typ, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr @i32_typ, ptr %26, align 8
  %27 = call ptr @behavior_wrapper(ptr %24, { ptr, ptr, ptr, i32 } %19, ptr nonnull %6)
  call void %27({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %5, { ptr } %16, i32 4, i32 5) #25
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %29 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %30 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 160), align 8
  %31 = call ptr @behavior_wrapper(ptr %30, { ptr, ptr, ptr, i32 } %19, ptr nonnull %3)
  %32 = call { ptr } %31({ ptr, ptr, ptr, i32 } %19, { ptr, ptr, ptr, i32 } %19, ptr nonnull %3) #25
  br label %56

33:                                               ; preds = %2
  %34 = tail call ptr @bump_malloc(i64 6)
  store <5 x i8> <i8 102, i8 97, i8 108, i8 115, i8 101>, ptr %34, align 8
  store ptr @String, ptr %7, align 8
  %35 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %36 = call { i64, i64 } @size_wrapper(ptr %35, ptr nonnull %7)
  %37 = extractvalue { i64, i64 } %36, 0
  %38 = call ptr @bump_malloc(i64 %37)
  %39 = insertvalue { ptr } undef, ptr %34, 0
  %40 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %38, 1
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr undef, 2
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %8, align 8
  %43 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_i32, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %8)
  %46 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %47 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %9, align 8
  %48 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %48, align 8
  %49 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %49, align 8
  %50 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %42, ptr nonnull %9)
  call void %50({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr nonnull %8, { ptr } %39, i32 5, i32 6) #25
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %52 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %53 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 160), align 8
  %54 = call ptr @behavior_wrapper(ptr %53, { ptr, ptr, ptr, i32 } %42, ptr nonnull %3)
  %55 = call { ptr } %54({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr nonnull %3) #25
  br label %56

56:                                               ; preds = %33, %10
  %.sink = phi { ptr } [ %55, %33 ], [ %32, %10 ]
  %.fca.0.extract1 = extractvalue { ptr } %.sink, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract1)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract3, ptr %5, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Representable)
  %6 = load ptr, ptr %4, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %8 = load ptr, ptr %5, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %8, 1
  %10 = getelementptr inbounds i8, ptr %4, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr inbounds i8, ptr %4, i64 24
  %14 = load i32, ptr %13, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %18 = sext i32 %14 to i64
  %19 = getelementptr ptr, ptr %6, i64 %18
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr @behavior_wrapper(ptr %20, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3)
  %22 = call { ptr, ptr, ptr, i32 } %21({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3) #25
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr %.fca.1.extract, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr %.fca.2.extract, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %23, i64 24
  store i32 %.fca.3.extract, ptr %26, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @String)
  %27 = load ptr, ptr %23, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %24, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %25, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %26, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %36 = call ptr @llvm.invariant.start.p0(i64 632, ptr %27)
  %37 = sext i32 %33 to i64
  %38 = getelementptr ptr, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %38, i64 80
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %34, ptr nonnull %3)
  %42 = call { ptr } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %3) #25
  %.fca.0.extract = extractvalue { ptr } %42, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi32(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.1.8.extract.trunc)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xf64(ptr nocapture readnone %0, { ptr, i160 } %1) #10 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = bitcast i64 %.sroa.1.8.extract.trunc to double
  %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %3)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Channel(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 40, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Channel_field_Channel_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Channel_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Channel_B_get_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Channel_B_put_new_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 136
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define void @Channel_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Channel)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 64, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %8, { ptr, i160 } { ptr @nil_typ, i160 undef }) #23
  ret void
}

define { ptr, i160 } @Channel_get_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Channel)
  br label %10

10:                                               ; preds = %26, %3
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %6, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 64, ptr %12)
  %14 = load i32, ptr %9, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call { ptr, i160 } %19(ptr %11) #24
  %.fca.0.extract16 = extractvalue { ptr, i160 } %20, 0
  %21 = call ptr @llvm.invariant.start.p0(i64 64, ptr %12)
  %22 = load ptr, ptr %16, align 8
  %23 = call ptr @typegetter_wrapper(ptr %22, ptr %11)
  %24 = icmp ne ptr %.fca.0.extract16, @nil_typ
  %25 = icmp ne ptr %.fca.0.extract16, null
  %.not23 = and i1 %24, %25
  br i1 %.not23, label %.critedge, label %26

26:                                               ; preds = %10
  store ptr @Blocking, ptr %5, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Blocking, ptr nonnull %5)
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = call ptr @bump_malloc(i64 %28)
  %30 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Blocking, ptr undef, ptr undef, i32 undef }, ptr %29, 1
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr undef, 2
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, i32 10, 3
  %33 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @Blocking)
  %35 = call ptr @behavior_wrapper(ptr nonnull @Blocking_B_init_, { ptr, ptr, ptr, i32 } %32, ptr nonnull %4)
  call void %35({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr nonnull %4) #25
  %36 = ptrtoint ptr %29 to i64
  %.sroa.3.8.insert.ext = zext i64 %36 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %37 = insertvalue { ptr, i160 } { ptr @Blocking, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %38 = call ptr @get_current_coroutine()
  %39 = getelementptr i8, ptr %38, i64 48
  store { ptr, i160 } %37, ptr %39, align 8
  call void @coroutine_yield(ptr %38)
  br label %10

.critedge:                                        ; preds = %10
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 64, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr, i160 } { ptr @nil_typ, i160 undef }) #23
  ret { ptr, i160 } %20
}

define void @Channel_put_new_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract6, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Channel)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 64, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call { ptr, i160 } %19(ptr %11) #24
  %.fca.0.extract = extractvalue { ptr, i160 } %20, 0
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %.sroa.0.0 = phi ptr [ %.fca.0.extract, %4 ], [ %.sroa.0.1, %._crit_edge ]
  %21 = load ptr, ptr %8, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 64, ptr %22)
  %24 = load i32, ptr %10, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = call ptr @typegetter_wrapper(ptr %27, ptr %21)
  %29 = icmp ne ptr %.sroa.0.0, @nil_typ
  %30 = icmp ne ptr %.sroa.0.0, null
  %.not23 = and i1 %29, %30
  br i1 %.not23, label %31, label %._crit_edge

31:                                               ; preds = %._crit_edge1
  store ptr @Blocking, ptr %6, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Blocking, ptr nonnull %6)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Blocking, ptr undef, ptr undef, i32 undef }, ptr %34, 1
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr undef, 2
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 10, 3
  %38 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @Blocking)
  %40 = call ptr @behavior_wrapper(ptr nonnull @Blocking_B_init_, { ptr, ptr, ptr, i32 } %37, ptr nonnull %5)
  call void %40({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr nonnull %5) #25
  %41 = ptrtoint ptr %34 to i64
  %.sroa.3.8.insert.ext = zext i64 %41 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %42 = insertvalue { ptr, i160 } { ptr @Blocking, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %43 = call ptr @get_current_coroutine()
  %44 = getelementptr i8, ptr %43, i64 48
  store { ptr, i160 } %42, ptr %44, align 8
  call void @coroutine_yield(ptr %43)
  %45 = load ptr, ptr %8, align 8
  %46 = load ptr, ptr %7, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 64, ptr %46)
  %48 = load i32, ptr %10, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = getelementptr i8, ptr %50, i64 8
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr, i160 } %53(ptr %45) #24
  %.fca.0.extract10 = extractvalue { ptr, i160 } %54, 0
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %31
  %.sroa.0.1 = phi ptr [ %.fca.0.extract10, %31 ], [ %.sroa.0.0, %._crit_edge1 ]
  br i1 %.not23, label %._crit_edge1, label %55

55:                                               ; preds = %._crit_edge
  %56 = load ptr, ptr %8, align 8
  %57 = load ptr, ptr %7, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 64, ptr %57)
  %59 = load i32, ptr %10, align 8
  %60 = sext i32 %59 to i64
  %61 = getelementptr ptr, ptr %57, i64 %60
  %62 = getelementptr i8, ptr %61, i64 8
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  call void %65(ptr %56, { ptr, i160 } %3) #23
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Blocking(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Blocking_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 88
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Blocking_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Blocking)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @Channel_getter_value(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load i160, ptr %5, align 4
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Channel_setter_value(ptr nocapture writeonly %0, { ptr, i160 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store i160 %.fca.1.extract, ptr %4, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Array(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Array_field_Array_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define noundef nonnull ptr @Array_B__Self_from_iterable_iterableIterableT(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = load i64, ptr @Iterable, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 %12, i64 ptrtoint (ptr @Iterable to i64), ptr %11)
  ret ptr @Array__Self_from_iterable_iterableIterableT
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_bufferBufferT_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 384
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 392
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_reserve_new_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B__index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B__set_index_xi32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @any_typ, align 8
  %15 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr i8, ptr %16, i64 416
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_throw_oob_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_unchecked_index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_unchecked_insert_xi32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @any_typ, align 8
  %15 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr i8, ptr %16, i64 440
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 464
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 488
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 496
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 504
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 512
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 520
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @Iterable, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 528
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 536
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterableT(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract27 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract28 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract26, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract27, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract28, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract29, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @Iterable)
  %12 = call ptr @llvm.invariant.start.p0(i64 664, ptr %.fca.0.extract26)
  %13 = sext i32 %.fca.3.extract29 to i64
  %14 = getelementptr ptr, ptr %.fca.0.extract26, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %.fca.1.extract27)
  %17 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %16, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %17)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  store ptr %16, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %21)
  %23 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr undef, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 10, 3
  %26 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %27 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %28 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_, { ptr, ptr, ptr, i32 } %25, ptr nonnull %3)
  call void %28({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %3) #25
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Array, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %29, i64 8
  store ptr %21, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = getelementptr inbounds i8, ptr %29, i64 24
  store i32 10, ptr %32, align 8
  call void @set_offset(ptr nonnull %29, ptr nonnull @Array)
  %33 = load ptr, ptr %29, align 8
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = load i32, ptr %32, align 8
  %37 = load ptr, ptr %8, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %37, 0
  %39 = load ptr, ptr %9, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 1
  %41 = load ptr, ptr %10, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 2
  %43 = load i32, ptr %11, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %43, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %46 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %47 = sext i32 %43 to i64
  %48 = getelementptr ptr, ptr %37, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %44, ptr nonnull %3)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %3) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 3
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr %.fca.1.extract, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %53, i64 16
  store ptr %.fca.2.extract, ptr %55, align 8
  %56 = getelementptr inbounds i8, ptr %53, i64 24
  store i32 %.fca.3.extract, ptr %56, align 8
  call void @set_offset(ptr nonnull %53, ptr nonnull @Iterator)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = load ptr, ptr %53, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr inbounds i8, ptr %57, i64 8
  %60 = load ptr, ptr %54, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr inbounds i8, ptr %57, i64 16
  %62 = load ptr, ptr %55, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr inbounds i8, ptr %57, i64 24
  %64 = load i32, ptr %56, align 8
  store i32 %64, ptr %63, align 8
  call void @set_offset(ptr nonnull %57, ptr nonnull @Iterator)
  %65 = load ptr, ptr %57, align 8
  %66 = load ptr, ptr %59, align 8
  %67 = load ptr, ptr %61, align 8
  %68 = load i32, ptr %63, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %66, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %67, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %68, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %65)
  %75 = sext i32 %68 to i64
  %76 = getelementptr ptr, ptr %65, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %invariant.gep = getelementptr i8, ptr %33, i64 88
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %34, 1
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %35, 2
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %36, 3
  %82 = sext i32 %36 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %82
  %83 = getelementptr inbounds i8, ptr %6, i64 8
  %84 = getelementptr inbounds i8, ptr %6, i64 16
  %85 = getelementptr inbounds i8, ptr %6, i64 24
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %2
  %86 = load ptr, ptr %77, align 8
  %87 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %72, ptr nonnull %3)
  %88 = call { ptr, i160 } %87({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %3) #25
  %.fca.0.extract63 = extractvalue { ptr, i160 } %88, 0
  %89 = call ptr @llvm.invariant.start.p0(i64 664, ptr %.fca.0.extract26)
  %90 = load ptr, ptr %14, align 8
  %91 = call ptr @typegetter_wrapper(ptr %90, ptr %.fca.1.extract27)
  %92 = icmp ne ptr %.fca.0.extract63, @nil_typ
  %93 = icmp ne ptr %.fca.0.extract63, null
  %.not71 = and i1 %92, %93
  br i1 %.not71, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %._crit_edge1
  %94 = call ptr @llvm.invariant.start.p0(i64 664, ptr %.fca.0.extract26)
  %95 = load ptr, ptr %14, align 8
  %96 = call ptr @typegetter_wrapper(ptr %95, ptr %.fca.1.extract27)
  store ptr %96, ptr %4, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %4)
  %98 = call ptr @llvm.invariant.start.p0(i64 664, ptr %33)
  %99 = load ptr, ptr %gep, align 8
  store ptr %.fca.0.extract63, ptr %5, align 8
  %100 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %81, ptr nonnull %5)
  %101 = call { ptr, ptr, ptr, i32 } %100({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4, { ptr, i160 } %88) #25
  %.fca.0.extract36 = extractvalue { ptr, ptr, ptr, i32 } %101, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %101, 1
  %.fca.2.extract38 = extractvalue { ptr, ptr, ptr, i32 } %101, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %101, 3
  store ptr %.fca.0.extract36, ptr %6, align 8
  store ptr %.fca.1.extract37, ptr %83, align 8
  store ptr %.fca.2.extract38, ptr %84, align 8
  store i32 %.fca.3.extract39, ptr %85, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Array)
  br label %._crit_edge1

.critedge:                                        ; preds = %._crit_edge1
  store ptr %33, ptr %7, align 8
  %102 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %34, ptr %102, align 8
  %103 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %35, ptr %103, align 8
  %104 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %36, ptr %104, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Array)
  %105 = load ptr, ptr %7, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = load ptr, ptr %102, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 1
  %109 = load ptr, ptr %103, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 2
  %111 = load i32, ptr %104, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %111, 3
  ret { ptr, ptr, ptr, i32 } %112
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 664, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr @typegetter_wrapper(ptr %14, ptr %8)
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 72
  %18 = load ptr, ptr %17, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr %18, ptr nonnull %15)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %5, align 8
  %23 = load ptr, ptr %4, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 664, ptr %23)
  %25 = load i32, ptr %7, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %21, 0
  call void %31(ptr %22, { ptr } %32) #23
  %33 = load ptr, ptr %5, align 8
  %34 = load ptr, ptr %4, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 664, ptr %34)
  %36 = load i32, ptr %7, align 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr ptr, ptr %34, i64 %37
  %39 = getelementptr i8, ptr %38, i64 16
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, i32 0) #23
  %43 = load ptr, ptr %5, align 8
  %44 = load ptr, ptr %4, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 664, ptr %44)
  %46 = load i32, ptr %7, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 24
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr i8, ptr %50, i64 8
  %52 = load ptr, ptr %51, align 8
  call void %52(ptr %43, i32 1) #23
  ret void
}

define void @Array_init_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %9, i32 %3) #23
  %19 = load ptr, ptr %6, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 664, ptr %20)
  %22 = load i32, ptr %8, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 24
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %19) #24
  %29 = call ptr @llvm.invariant.start.p0(i64 664, ptr %20)
  %30 = load ptr, ptr %24, align 8
  %31 = call ptr @typegetter_wrapper(ptr %30, ptr %19)
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr i8, ptr %32, i64 72
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr nonnull %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = sext i32 %28 to i64
  %38 = mul i64 %36, %37
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 664, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr } undef, ptr %39, 0
  call void %49(ptr %40, { ptr } %50) #23
  %51 = load ptr, ptr %6, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 664, ptr %52)
  %54 = load i32, ptr %8, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 16
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  call void %60(ptr %51, i32 0) #23
  ret void
}

define void @Array_init_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, i32 %4) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Array)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 664, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %10, i32 %3) #23
  %20 = load ptr, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 664, ptr %21)
  %23 = load i32, ptr %9, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 24
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, i32 %4) #23
  %30 = load ptr, ptr %7, align 8
  %31 = load ptr, ptr %6, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 664, ptr %31)
  %33 = load i32, ptr %9, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 24
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %30) #24
  %40 = call ptr @llvm.invariant.start.p0(i64 664, ptr %31)
  %41 = load ptr, ptr %35, align 8
  %42 = call ptr @typegetter_wrapper(ptr %41, ptr %30)
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr i8, ptr %43, i64 72
  %45 = load ptr, ptr %44, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr %45, ptr nonnull %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = sext i32 %39 to i64
  %49 = mul i64 %47, %48
  %50 = call ptr @bump_malloc(i64 %49)
  %51 = load ptr, ptr %7, align 8
  %52 = load ptr, ptr %6, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 664, ptr %52)
  %54 = load i32, ptr %9, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr } undef, ptr %50, 0
  call void %60(ptr %51, { ptr } %61) #23
  ret void
}

define void @Array_init_bufferBufferT_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, i32 %4, i32 %5) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Array)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 664, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  call void %20(ptr %11, { ptr } %3) #23
  %21 = load ptr, ptr %8, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 664, ptr %22)
  %24 = load i32, ptr %10, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %4) #23
  %31 = load ptr, ptr %8, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 664, ptr %32)
  %34 = load i32, ptr %10, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 24
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  call void %40(ptr %31, i32 %5) #23
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 664, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  ret i32 %17
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 664, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  ret i32 %17
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract5, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @Array)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 664, ptr %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %12) #24
  %22 = call ptr @llvm.invariant.start.p0(i64 664, ptr %13)
  %23 = getelementptr i8, ptr %17, i64 24
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %12) #24
  %.not = icmp slt i32 %21, %26
  br i1 %.not, label %._crit_edge, label %27

27:                                               ; preds = %4
  %28 = call ptr @llvm.invariant.start.p0(i64 664, ptr %13)
  %29 = call i32 %25(ptr %12) #24
  %30 = shl i32 %29, 1
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %13, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %12, 1
  %33 = load ptr, ptr %10, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %15, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %37 = call ptr @llvm.invariant.start.p0(i64 664, ptr %13)
  %38 = getelementptr i8, ptr %17, i64 104
  %39 = load ptr, ptr %38, align 8
  store ptr @i32_typ, ptr %6, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %35, ptr nonnull %6)
  call void %40({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %5, i32 %30) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %27
  %41 = load ptr, ptr %9, align 8
  %42 = load ptr, ptr %8, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %44 = load i32, ptr %11, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr ptr, ptr %42, i64 %45
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = call { ptr } %49(ptr %41) #24
  %.fca.0.extract14 = extractvalue { ptr } %50, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %52 = getelementptr i8, ptr %46, i64 16
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %41) #24
  %56 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %57 = load ptr, ptr %46, align 8
  %58 = call ptr @typegetter_wrapper(ptr %57, ptr %41)
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 72
  %61 = load ptr, ptr %60, align 8
  %62 = call { i64, i64 } @size_wrapper(ptr %61, ptr nonnull %58)
  %63 = extractvalue { i64, i64 } %62, 0
  %64 = sext i32 %55 to i64
  %65 = mul i64 %63, %64
  %66 = getelementptr i8, ptr %.fca.0.extract14, i64 %65
  %67 = load ptr, ptr %58, align 8
  %68 = getelementptr i8, ptr %67, i64 64
  %69 = load ptr, ptr %68, align 8
  call void @unbox_wrapper(ptr %69, { ptr, i160 } %3, ptr nonnull %58, ptr %66)
  %70 = load ptr, ptr %9, align 8
  %71 = load ptr, ptr %8, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 664, ptr %71)
  %73 = load i32, ptr %11, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 16
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = call i32 %78(ptr %70) #24
  %80 = add i32 %79, 1
  %81 = call ptr @llvm.invariant.start.p0(i64 664, ptr %71)
  %82 = getelementptr i8, ptr %77, i64 8
  %83 = load ptr, ptr %82, align 8
  call void %83(ptr %70, i32 %80) #23
  %84 = load ptr, ptr %8, align 8
  store ptr %84, ptr %7, align 8
  %85 = getelementptr inbounds i8, ptr %7, i64 8
  %86 = load ptr, ptr %9, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr inbounds i8, ptr %7, i64 16
  %88 = load ptr, ptr %10, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr inbounds i8, ptr %7, i64 24
  %90 = load i32, ptr %11, align 8
  store i32 %90, ptr %89, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Array)
  %91 = load ptr, ptr %7, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %85, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %87, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %89, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  ret { ptr, ptr, ptr, i32 } %98
}

define { ptr, ptr, ptr, i32 } @Array_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %.fca.1.extract11, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %.fca.2.extract12, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %11, i64 24
  store i32 %.fca.3.extract13, ptr %14, align 8
  call void @set_offset(ptr nonnull %11, ptr nonnull @Array)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr %.fca.1.extract, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr %.fca.2.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %15, i64 24
  store i32 %.fca.3.extract, ptr %18, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @Array)
  %19 = load ptr, ptr %15, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %21 = load ptr, ptr %16, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %21, 1
  %23 = load ptr, ptr %17, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %23, 2
  %25 = load i32, ptr %18, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %25, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %28 = call ptr @llvm.invariant.start.p0(i64 664, ptr %19)
  %29 = sext i32 %25 to i64
  %30 = getelementptr ptr, ptr %19, i64 %29
  %31 = getelementptr i8, ptr %30, i64 72
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @behavior_wrapper(ptr %32, { ptr, ptr, ptr, i32 } %26, ptr nonnull %5)
  %34 = call i32 %33({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull %5) #25
  %35 = load ptr, ptr %12, align 8
  %36 = load ptr, ptr %11, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 664, ptr %36)
  %38 = load i32, ptr %14, align 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr ptr, ptr %36, i64 %39
  %41 = getelementptr i8, ptr %40, i64 16
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %35) #24
  %45 = add i32 %44, %34
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %35, 1
  %48 = load ptr, ptr %13, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %38, 3
  %51 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %51)
  %53 = call ptr @llvm.invariant.start.p0(i64 664, ptr %36)
  %54 = getelementptr i8, ptr %40, i64 104
  %55 = load ptr, ptr %54, align 8
  %56 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %56, align 8
  %57 = call ptr @behavior_wrapper(ptr %55, { ptr, ptr, ptr, i32 } %50, ptr nonnull %56)
  call void %57({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %51, i32 %45) #25
  %58 = getelementptr inbounds i8, ptr %8, i64 8
  %59 = getelementptr inbounds i8, ptr %9, i64 8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %.0 = phi i32 [ 0, %4 ], [ %.1, %._crit_edge ]
  %60 = icmp slt i32 %.0, %34
  br i1 %60, label %61, label %._crit_edge

61:                                               ; preds = %._crit_edge1
  %62 = add i32 %.0, %44
  %63 = load ptr, ptr %15, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %16, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = load ptr, ptr %17, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 2
  %69 = load i32, ptr %18, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %69, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %72 = call ptr @llvm.invariant.start.p0(i64 664, ptr %63)
  %73 = sext i32 %69 to i64
  %74 = getelementptr ptr, ptr %63, i64 %73
  %75 = getelementptr i8, ptr %74, i64 136
  %76 = load ptr, ptr %75, align 8
  store ptr @i32_typ, ptr %7, align 8
  %77 = call ptr @behavior_wrapper(ptr %76, { ptr, ptr, ptr, i32 } %70, ptr nonnull %7)
  %78 = call { ptr, i160 } %77({ ptr, ptr, ptr, i32 } %70, { ptr, ptr, ptr, i32 } %70, ptr nonnull %6, i32 %.0) #25
  %.fca.0.extract23 = extractvalue { ptr, i160 } %78, 0
  %79 = load ptr, ptr %11, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %79, 0
  %81 = load ptr, ptr %12, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %81, 1
  %83 = load ptr, ptr %13, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 2
  %85 = load i32, ptr %14, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %85, 3
  %87 = call ptr @llvm.invariant.start.p0(i64 664, ptr %79)
  %88 = sext i32 %85 to i64
  %89 = getelementptr ptr, ptr %79, i64 %88
  %90 = load ptr, ptr %89, align 8
  %91 = call ptr @typegetter_wrapper(ptr %90, ptr %81)
  store ptr @_parameterization_i32, ptr %8, align 8
  store ptr %91, ptr %58, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %8)
  %93 = call ptr @llvm.invariant.start.p0(i64 664, ptr %79)
  %94 = getelementptr i8, ptr %89, i64 144
  %95 = load ptr, ptr %94, align 8
  store ptr @i32_typ, ptr %9, align 8
  store ptr %.fca.0.extract23, ptr %59, align 8
  %96 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %86, ptr nonnull %9)
  call void %96({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %8, i32 %62, { ptr, i160 } %78) #25
  %97 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %61
  %.1 = phi i32 [ %97, %61 ], [ %.0, %._crit_edge1 ]
  br i1 %60, label %._crit_edge1, label %98

98:                                               ; preds = %._crit_edge
  %99 = load ptr, ptr %12, align 8
  %100 = load ptr, ptr %11, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 664, ptr %100)
  %102 = load i32, ptr %14, align 8
  %103 = sext i32 %102 to i64
  %104 = getelementptr ptr, ptr %100, i64 %103
  %105 = getelementptr i8, ptr %104, i64 16
  %106 = load ptr, ptr %105, align 8
  %107 = getelementptr i8, ptr %106, i64 8
  %108 = load ptr, ptr %107, align 8
  call void %108(ptr %99, i32 %45) #23
  %109 = load ptr, ptr %11, align 8
  store ptr %109, ptr %10, align 8
  %110 = getelementptr inbounds i8, ptr %10, i64 8
  %111 = load ptr, ptr %12, align 8
  store ptr %111, ptr %110, align 8
  %112 = getelementptr inbounds i8, ptr %10, i64 16
  %113 = load ptr, ptr %13, align 8
  store ptr %113, ptr %112, align 8
  %114 = getelementptr inbounds i8, ptr %10, i64 24
  %115 = load i32, ptr %14, align 8
  store i32 %115, ptr %114, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Array)
  %116 = load ptr, ptr %10, align 8
  %117 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %116, 0
  %118 = load ptr, ptr %110, align 8
  %119 = insertvalue { ptr, ptr, ptr, i32 } %117, ptr %118, 1
  %120 = load ptr, ptr %112, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } %119, ptr %120, 2
  %122 = load i32, ptr %114, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 %122, 3
  ret { ptr, ptr, ptr, i32 } %123
}

define void @Array_reserve_new_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #24
  %.not = icmp sgt i32 %3, %18
  br i1 %.not, label %19, label %.loopexit

19:                                               ; preds = %4
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %21 = getelementptr i8, ptr %16, i64 8
  %22 = load ptr, ptr %21, align 8
  call void %22(ptr %9, i32 %3) #23
  %23 = load ptr, ptr %6, align 8
  %24 = load ptr, ptr %5, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 664, ptr %24)
  %26 = load i32, ptr %8, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr } %31(ptr %23) #24
  %.fca.0.extract22 = extractvalue { ptr } %32, 0
  %33 = call ptr @llvm.invariant.start.p0(i64 664, ptr %24)
  %34 = getelementptr i8, ptr %28, i64 24
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %23) #24
  %38 = call ptr @llvm.invariant.start.p0(i64 664, ptr %24)
  %39 = load ptr, ptr %28, align 8
  %40 = call ptr @typegetter_wrapper(ptr %39, ptr %23)
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr i8, ptr %41, i64 72
  %43 = load ptr, ptr %42, align 8
  %44 = call { i64, i64 } @size_wrapper(ptr %43, ptr nonnull %40)
  %45 = extractvalue { i64, i64 } %44, 0
  %46 = sext i32 %37 to i64
  %47 = mul i64 %45, %46
  %48 = call ptr @bump_malloc(i64 %47)
  %49 = load ptr, ptr %6, align 8
  %50 = load ptr, ptr %5, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 664, ptr %50)
  %52 = load i32, ptr %8, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr ptr, ptr %50, i64 %53
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr } undef, ptr %48, 0
  call void %58(ptr %49, { ptr } %59) #23
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %19
  %.0 = phi i32 [ 0, %19 ], [ %.1, %._crit_edge ]
  %60 = load ptr, ptr %6, align 8
  %61 = load ptr, ptr %5, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 664, ptr %61)
  %63 = load i32, ptr %8, align 8
  %64 = sext i32 %63 to i64
  %65 = getelementptr ptr, ptr %61, i64 %64
  %66 = getelementptr i8, ptr %65, i64 16
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %60) #24
  %70 = icmp slt i32 %.0, %69
  br i1 %70, label %71, label %._crit_edge

71:                                               ; preds = %._crit_edge1
  %72 = call ptr @llvm.invariant.start.p0(i64 664, ptr %61)
  %73 = load ptr, ptr %65, align 8
  %74 = call ptr @typegetter_wrapper(ptr %73, ptr %60)
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr i8, ptr %75, i64 72
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr nonnull %74)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = sext i32 %.0 to i64
  %81 = mul i64 %79, %80
  %82 = getelementptr i8, ptr %.fca.0.extract22, i64 %81
  %83 = load ptr, ptr %74, align 8
  %84 = getelementptr i8, ptr %83, i64 56
  %85 = load ptr, ptr %84, align 8
  %86 = call { ptr, i160 } @box_wrapper(ptr %85, ptr %82, ptr nonnull %74)
  %87 = load ptr, ptr %6, align 8
  %88 = load ptr, ptr %5, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 664, ptr %88)
  %90 = load i32, ptr %8, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = getelementptr i8, ptr %92, i64 8
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %94, align 8
  %96 = call { ptr } %95(ptr %87) #24
  %.fca.0.extract7 = extractvalue { ptr } %96, 0
  %97 = call ptr @llvm.invariant.start.p0(i64 664, ptr %88)
  %98 = load ptr, ptr %92, align 8
  %99 = call ptr @typegetter_wrapper(ptr %98, ptr %87)
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr i8, ptr %100, i64 72
  %102 = load ptr, ptr %101, align 8
  %103 = call { i64, i64 } @size_wrapper(ptr %102, ptr nonnull %99)
  %104 = extractvalue { i64, i64 } %103, 0
  %105 = mul i64 %104, %80
  %106 = getelementptr i8, ptr %.fca.0.extract7, i64 %105
  %107 = load ptr, ptr %99, align 8
  %108 = getelementptr i8, ptr %107, i64 64
  %109 = load ptr, ptr %108, align 8
  call void @unbox_wrapper(ptr %109, { ptr, i160 } %86, ptr nonnull %99, ptr %106)
  %110 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge1, %71
  %.1 = phi i32 [ %110, %71 ], [ %.0, %._crit_edge1 ]
  br i1 %70, label %._crit_edge1, label %.loopexit

.loopexit:                                        ; preds = %._crit_edge, %4
  ret void
}

define { ptr, i160 } @Array__index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Array)
  %13 = load ptr, ptr %10, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 664, ptr %14)
  %16 = load i32, ptr %12, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 16
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call i32 %21(ptr %13) #24
  %23 = add i32 %22, -1
  %24 = icmp sgt i32 %3, %23
  %25 = call ptr @llvm.invariant.start.p0(i64 664, ptr %14)
  %26 = call i32 %21(ptr %13) #24
  %27 = add i32 %26, %3
  %28 = icmp slt i32 %27, 0
  %.0 = select i1 %24, i1 true, i1 %28
  br i1 %.0, label %29, label %._crit_edge

29:                                               ; preds = %4
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %14, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %13, 1
  %32 = load ptr, ptr %11, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %16, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %36 = call ptr @llvm.invariant.start.p0(i64 664, ptr %14)
  %37 = getelementptr i8, ptr %18, i64 128
  %38 = load ptr, ptr %37, align 8
  store ptr @i32_typ, ptr %6, align 8
  %39 = call ptr @behavior_wrapper(ptr %38, { ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5, i32 %3) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %29
  %40 = icmp slt i32 %3, 0
  br i1 %40, label %41, label %._crit_edge1

41:                                               ; preds = %._crit_edge
  %42 = load ptr, ptr %10, align 8
  %43 = load ptr, ptr %9, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 664, ptr %43)
  %45 = load i32, ptr %12, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = getelementptr i8, ptr %47, i64 16
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = call i32 %50(ptr %42) #24
  %52 = add i32 %51, %3
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %41
  %.027 = phi i32 [ %52, %41 ], [ %3, %._crit_edge ]
  %53 = load ptr, ptr %9, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %10, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %11, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %12, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  store ptr @_parameterization_i32, ptr %7, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %62 = call ptr @llvm.invariant.start.p0(i64 664, ptr %53)
  %63 = sext i32 %59 to i64
  %64 = getelementptr ptr, ptr %53, i64 %63
  %65 = getelementptr i8, ptr %64, i64 136
  %66 = load ptr, ptr %65, align 8
  store ptr @i32_typ, ptr %8, align 8
  %67 = call ptr @behavior_wrapper(ptr %66, { ptr, ptr, ptr, i32 } %60, ptr nonnull %8)
  %68 = call { ptr, i160 } %67({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr nonnull %7, i32 %.027) #25
  ret { ptr, i160 } %68
}

define void @Array__set_index_xi32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %.fca.0.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract16, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract17, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Array)
  %14 = load ptr, ptr %11, align 8
  %15 = load ptr, ptr %10, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 664, ptr %15)
  %17 = load i32, ptr %13, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr ptr, ptr %15, i64 %18
  %20 = getelementptr i8, ptr %19, i64 16
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i32 %22(ptr %14) #24
  %24 = add i32 %23, -1
  %25 = icmp sgt i32 %3, %24
  %26 = call ptr @llvm.invariant.start.p0(i64 664, ptr %15)
  %27 = call i32 %22(ptr %14) #24
  %28 = add i32 %27, %3
  %29 = icmp slt i32 %28, 0
  %.0 = select i1 %25, i1 true, i1 %29
  br i1 %.0, label %30, label %._crit_edge

30:                                               ; preds = %5
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %14, 1
  %33 = load ptr, ptr %12, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %17, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %37 = call ptr @llvm.invariant.start.p0(i64 664, ptr %15)
  %38 = getelementptr i8, ptr %19, i64 128
  %39 = load ptr, ptr %38, align 8
  store ptr @i32_typ, ptr %7, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %35, ptr nonnull %7)
  call void %40({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %6, i32 %3) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %5, %30
  %41 = icmp slt i32 %3, 0
  br i1 %41, label %42, label %._crit_edge1

42:                                               ; preds = %._crit_edge
  %43 = load ptr, ptr %11, align 8
  %44 = load ptr, ptr %10, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 664, ptr %44)
  %46 = load i32, ptr %13, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 16
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #24
  %53 = add i32 %52, %3
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %42
  %.027 = phi i32 [ %53, %42 ], [ %3, %._crit_edge ]
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %54 = load ptr, ptr %10, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = load ptr, ptr %11, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 1
  %58 = load ptr, ptr %12, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 2
  %60 = load i32, ptr %13, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %60, 3
  %62 = call ptr @llvm.invariant.start.p0(i64 664, ptr %54)
  %63 = sext i32 %60 to i64
  %64 = getelementptr ptr, ptr %54, i64 %63
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %56)
  store ptr @_parameterization_i32, ptr %8, align 8
  %67 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %66, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %8)
  %69 = call ptr @llvm.invariant.start.p0(i64 664, ptr %54)
  %70 = getelementptr i8, ptr %64, i64 144
  %71 = load ptr, ptr %70, align 8
  store ptr @i32_typ, ptr %9, align 8
  %72 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.0.extract, ptr %72, align 8
  %73 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %61, ptr nonnull %9)
  call void %73({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %8, i32 %.027, { ptr, i160 } %4) #25
  ret void
}

define void @Array_throw_oob_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract23 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract22, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract23, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Array)
  %10 = alloca [1 x ptr], align 8
  store ptr @Exception, ptr %10, align 8
  %11 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 48), align 8
  %12 = call { i64, i64 } @size_wrapper(ptr %11, ptr nonnull %10)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = call ptr @bump_malloc(i64 %13)
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Exception, ptr undef, ptr undef, i32 undef }, ptr %14, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %20 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 112), align 8
  %21 = call ptr @behavior_wrapper(ptr %20, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
  call void %21({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5) #25
  %22 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 97, i8 114, i8 114, i8 97, i8 121, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %22, align 16
  %23 = alloca [1 x ptr], align 8
  store ptr @String, ptr %23, align 8
  %24 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr nonnull %23)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = call ptr @bump_malloc(i64 %26)
  %28 = insertvalue { ptr } undef, ptr %22, 0
  %29 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %27, 1
  %30 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr undef, 2
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, i32 10, 3
  %32 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %32, align 8
  %33 = getelementptr inbounds i8, ptr %32, i64 8
  store ptr @_parameterization_i32, ptr %33, align 8
  %34 = getelementptr inbounds i8, ptr %32, i64 16
  store ptr @_parameterization_i32, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %32)
  %36 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %37 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %38 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %38, i64 8
  store ptr @i32_typ, ptr %39, align 8
  %40 = getelementptr inbounds i8, ptr %38, i64 16
  store ptr @i32_typ, ptr %40, align 8
  %41 = call ptr @behavior_wrapper(ptr %37, { ptr, ptr, ptr, i32 } %31, ptr nonnull %38)
  call void %41({ ptr, ptr, ptr, i32 } %31, { ptr, ptr, ptr, i32 } %31, ptr nonnull %32, { ptr } %28, i32 14, i32 15) #25
  %42 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %27, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %42, i64 16
  %45 = getelementptr inbounds i8, ptr %42, i64 24
  store i32 10, ptr %45, align 8
  call void @set_offset(ptr nonnull %42, ptr nonnull @String)
  %46 = load ptr, ptr %42, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = load ptr, ptr %43, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 1
  %50 = load ptr, ptr %44, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 2
  %52 = load i32, ptr %45, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %52, 3
  %54 = alloca [2 x ptr], align 8
  store ptr @_parameterization_i32, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %54, i64 8
  store ptr @_parameterization_String, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %58 = load ptr, ptr getelementptr inbounds (i8, ptr @Exception, i64 120), align 8
  %59 = alloca { ptr, ptr }, align 8
  store ptr @i32_typ, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %59, i64 8
  store ptr %46, ptr %60, align 8
  %61 = call ptr @behavior_wrapper(ptr %58, { ptr, ptr, ptr, i32 } %17, ptr nonnull %59)
  call void %61({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %54, i32 89, { ptr, ptr, ptr, i32 } %53) #25
  %62 = ptrtoint ptr %14 to i64
  %.sroa.4.8.insert.ext = zext i64 %62 to i160
  %.sroa.4.8.insert.insert = or disjoint i160 %.sroa.4.8.insert.ext, 3402823669209384634633746074317682114560
  %63 = insertvalue { ptr, i160 } { ptr @Exception, i160 undef }, i160 %.sroa.4.8.insert.insert, 1
  %64 = call ptr @get_current_coroutine()
  %65 = getelementptr i8, ptr %64, i64 48
  store { ptr, i160 } %63, ptr %65, align 8
  call void @coroutine_yield(ptr %64)
  ret void
}

define { ptr, i160 } @Array_unchecked_index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr } %17(ptr %9) #24
  %.fca.0.extract1 = extractvalue { ptr } %18, 0
  %19 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %20 = load ptr, ptr %14, align 8
  %21 = call ptr @typegetter_wrapper(ptr %20, ptr %9)
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i8, ptr %22, i64 72
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr nonnull %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = sext i32 %3 to i64
  %28 = mul i64 %26, %27
  %29 = getelementptr i8, ptr %.fca.0.extract1, i64 %28
  %30 = load ptr, ptr %21, align 8
  %31 = getelementptr i8, ptr %30, i64 56
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr, i160 } @box_wrapper(ptr %32, ptr %29, ptr nonnull %21)
  ret { ptr, i160 } %33
}

define void @Array_unchecked_insert_xi32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, i160 } %4) {
  %.fca.0.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract6, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract7, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Array)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 664, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = call { ptr } %18(ptr %10) #24
  %.fca.0.extract = extractvalue { ptr } %19, 0
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %11)
  %21 = load ptr, ptr %15, align 8
  %22 = call ptr @typegetter_wrapper(ptr %21, ptr %10)
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr i8, ptr %23, i64 72
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr nonnull %22)
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = sext i32 %3 to i64
  %29 = mul i64 %27, %28
  %30 = getelementptr i8, ptr %.fca.0.extract, i64 %29
  %31 = load ptr, ptr %22, align 8
  %32 = getelementptr i8, ptr %31, i64 64
  %33 = load ptr, ptr %32, align 8
  call void @unbox_wrapper(ptr %33, { ptr, i160 } %4, ptr nonnull %22, ptr %30)
  ret void
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 664, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr @typegetter_wrapper(ptr %14, ptr %8)
  %16 = alloca [2 x ptr], align 8
  store ptr @ArrayIterator, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr %15, ptr %17, align 8
  %18 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ArrayIterator, ptr nonnull %16)
  %19 = extractvalue { i64, i64 } %18, 0
  %20 = call ptr @bump_malloc(i64 %19)
  store ptr %15, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = load ptr, ptr %4, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 8
  %25 = load ptr, ptr %5, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr inbounds i8, ptr %22, i64 16
  %27 = load ptr, ptr %6, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr inbounds i8, ptr %22, i64 24
  %29 = load i32, ptr %7, align 8
  store i32 %29, ptr %28, align 8
  call void @set_offset(ptr nonnull %22, ptr nonnull @Array)
  %30 = load ptr, ptr %22, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %24, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %26, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %28, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  %38 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ArrayIterator, ptr undef, ptr undef, i32 undef }, ptr %20, 1
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr undef, 2
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 10, 3
  %41 = load ptr, ptr %5, align 8
  %42 = load ptr, ptr %4, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %44 = load i32, ptr %7, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr ptr, ptr %42, i64 %45
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr @typegetter_wrapper(ptr %47, ptr %41)
  %49 = call ptr @bump_malloc(i64 24)
  %50 = getelementptr i8, ptr %49, i64 8
  store ptr %48, ptr %50, align 8
  %51 = getelementptr i8, ptr %49, i64 16
  store ptr null, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  store ptr @Array, ptr %49, align 8
  %53 = alloca [1 x ptr], align 8
  store ptr %49, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
  %56 = alloca { ptr }, align 8
  store ptr %30, ptr %56, align 8
  %57 = call ptr @behavior_wrapper(ptr nonnull @ArrayIterator_B_init_arrayArrayT, { ptr, ptr, ptr, i32 } %40, ptr nonnull %56)
  call void %57({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr nonnull %53, { ptr, ptr, ptr, i32 } %37) #25
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ArrayIterator, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr %20, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %58, i64 16
  %61 = getelementptr inbounds i8, ptr %58, i64 24
  store i32 10, ptr %61, align 8
  call void @set_offset(ptr nonnull %58, ptr nonnull @Iterator)
  %62 = load ptr, ptr %58, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %59, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %60, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %61, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  ret { ptr, ptr, ptr, i32 } %69
}

define { ptr, ptr, ptr, i32 } @Array_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = call ptr @bump_malloc(i64 6)
  store <5 x i8> <i8 65, i8 114, i8 114, i8 97, i8 121>, ptr %8, align 8
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %11 = call { i64, i64 } @size_wrapper(ptr %10, ptr nonnull %9)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr } undef, ptr %8, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %18)
  %22 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %23 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %24 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr @i32_typ, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr @i32_typ, ptr %26, align 8
  %27 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %24)
  call void %27({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %18, { ptr } %14, i32 5, i32 6) #25
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %13, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 16
  %31 = getelementptr inbounds i8, ptr %28, i64 24
  store i32 10, ptr %31, align 8
  call void @set_offset(ptr nonnull %28, ptr nonnull @String)
  %32 = load ptr, ptr %28, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %29, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %30, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %31, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  ret { ptr, ptr, ptr, i32 } %39
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ArrayIterator(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ArrayIterator_field_ArrayIterator_0(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ArrayIterator)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Array)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @Array)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 80, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %13, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  call void %30(ptr %21, { ptr, ptr, ptr, i32 } %38) #23
  %39 = load ptr, ptr %6, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 80, ptr %40)
  %42 = load i32, ptr %8, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 16
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  call void %48(ptr %39, i32 0) #23
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract12, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract14, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract16, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @ArrayIterator)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 80, ptr %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %12) #24
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %13)
  %23 = getelementptr i8, ptr %17, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %12) #24
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  store ptr %.fca.0.extract, ptr %27, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %27, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %27, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %27, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %27, ptr nonnull @Array)
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = load ptr, ptr %.fca.1.gep, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 1
  %32 = load ptr, ptr %.fca.2.gep, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = load i32, ptr %.fca.3.gep, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %34, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %37 = call ptr @llvm.invariant.start.p0(i64 664, ptr %28)
  %38 = sext i32 %34 to i64
  %39 = getelementptr ptr, ptr %28, i64 %38
  %40 = getelementptr i8, ptr %39, i64 72
  %41 = load ptr, ptr %40, align 8
  %42 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %43 = call i32 %42({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4) #25
  %.not = icmp slt i32 %21, %43
  br i1 %.not, label %44, label %91

44:                                               ; preds = %3
  %45 = load ptr, ptr %9, align 8
  %46 = load ptr, ptr %8, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 80, ptr %46)
  %48 = load i32, ptr %11, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = getelementptr i8, ptr %50, i64 16
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %45) #24
  %55 = add i32 %54, 1
  %56 = call ptr @llvm.invariant.start.p0(i64 80, ptr %46)
  %57 = getelementptr i8, ptr %52, i64 8
  %58 = load ptr, ptr %57, align 8
  call void %58(ptr %45, i32 %55) #23
  %59 = load ptr, ptr %9, align 8
  %60 = load ptr, ptr %8, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %62 = load i32, ptr %11, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 16
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call i32 %67(ptr %59) #24
  %69 = add i32 %68, -1
  %70 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %71 = getelementptr i8, ptr %64, i64 8
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = call { ptr, ptr, ptr, i32 } %73(ptr %59) #24
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  store ptr %.fca.0.extract26, ptr %5, align 8
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %.fca.1.gep29 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract28, ptr %.fca.1.gep29, align 8
  %.fca.2.extract30 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %.fca.2.gep31 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract30, ptr %.fca.2.gep31, align 8
  %.fca.3.extract32 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %.fca.3.gep33 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract32, ptr %.fca.3.gep33, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @Array)
  %75 = load ptr, ptr %5, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %.fca.1.gep29, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = load ptr, ptr %.fca.2.gep31, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 2
  %81 = load i32, ptr %.fca.3.gep33, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %84 = call ptr @llvm.invariant.start.p0(i64 664, ptr %75)
  %85 = sext i32 %81 to i64
  %86 = getelementptr ptr, ptr %75, i64 %85
  %87 = getelementptr i8, ptr %86, i64 136
  %88 = load ptr, ptr %87, align 8
  store ptr @i32_typ, ptr %7, align 8
  %89 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %82, ptr nonnull %7)
  %90 = call { ptr, i160 } %89({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr nonnull %6, i32 %69) #25
  %.fca.0.extract20 = extractvalue { ptr, i160 } %90, 0
  %.fca.1.extract22 = extractvalue { ptr, i160 } %90, 1
  br label %91

91:                                               ; preds = %3, %44
  %.reg2mem21.sroa.0.0 = phi ptr [ %.fca.0.extract20, %44 ], [ @nil_typ, %3 ]
  %.reg2mem21.sroa.3.0 = phi i160 [ %.fca.1.extract22, %44 ], [ undef, %3 ]
  %.reload22.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem21.sroa.0.0, 0
  %.reload22.fca.1.insert = insertvalue { ptr, i160 } %.reload22.fca.0.insert, i160 %.reg2mem21.sroa.3.0, 1
  ret { ptr, i160 } %.reload22.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @ArrayIterator_getter_index(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_array(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_capacity(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 20
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_capacity(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 20
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_length(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_length(ptr nocapture writeonly %0, i32 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @Array_getter_buffer(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_buffer(ptr nocapture writeonly %0, { ptr } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileSystem(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @FileSystem_B__Self_process_file_file_nameString_modeString_processorFileProcessorT__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = load i64, ptr @String, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 %12, i64 ptrtoint (ptr @String to i64), ptr %11)
  %14 = getelementptr i8, ptr %0, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 %12, i64 ptrtoint (ptr @String to i64), ptr %23)
  %25 = getelementptr i8, ptr %0, i64 16
  %26 = load ptr, ptr %25, align 8
  %27 = icmp eq ptr %26, @function_typ
  br i1 %27, label %38, label %28

28:                                               ; preds = %1
  %29 = getelementptr i8, ptr %26, i64 8
  %30 = getelementptr i8, ptr %26, i64 16
  %31 = getelementptr i8, ptr %26, i64 24
  %32 = getelementptr i8, ptr %26, i64 32
  %33 = load i64, ptr %29, align 4
  %34 = load i64, ptr %30, align 4
  %35 = load ptr, ptr %31, align 8
  %36 = load ptr, ptr %32, align 8
  %37 = tail call i1 @subtype_test_wrapper(ptr %35, i64 %34, i64 %33, i64 4146660827496349788, i64 ptrtoint (ptr @FileProcessor to i64), ptr %36)
  br label %38

38:                                               ; preds = %1, %28
  %39 = phi i32 [ 4, %1 ], [ 3, %28 ]
  %40 = zext nneg i32 %39 to i64
  %41 = getelementptr [7 x ptr], ptr @FileSystem, i64 0, i64 %40
  %42 = getelementptr i8, ptr %41, i64 80
  %43 = load ptr, ptr %42, align 8
  ret ptr %43
}

define noundef nonnull ptr @FileSystem_B__Self_read_file_file_nameString(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = load i64, ptr @String, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 %12, i64 ptrtoint (ptr @String to i64), ptr %11)
  ret ptr @FileSystem__Self_read_file_file_nameString
}

define noundef nonnull ptr @FileSystem_B__Self_write_file_file_nameString_textString(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = load i64, ptr @String, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 %12, i64 ptrtoint (ptr @String to i64), ptr %11)
  %14 = getelementptr i8, ptr %0, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 %12, i64 ptrtoint (ptr @String to i64), ptr %23)
  ret ptr @FileSystem__Self_write_file_file_nameString_textString
}

define { ptr, i160 } @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract32 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract33 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract32, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract33, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract34, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @String)
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %2, 0
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %2, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 3
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract24, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %.fca.1.extract25, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %.fca.2.extract, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %11, i64 24
  store i32 %.fca.3.extract, ptr %14, align 8
  call void @set_offset(ptr nonnull %11, ptr nonnull @String)
  %.fca.0.extract21 = extractvalue { ptr, i160 } %3, 0
  %.fca.1.extract22 = extractvalue { ptr, i160 } %3, 1
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract21, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store i160 %.fca.1.extract22, ptr %16, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @FileProcessor)
  %17 = alloca [1 x ptr], align 8
  store ptr @File, ptr %17, align 8
  %18 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_File, ptr nonnull %17)
  %19 = extractvalue { i64, i64 } %18, 0
  %20 = call ptr @bump_malloc(i64 %19)
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %22 = load ptr, ptr %7, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 8
  %24 = load ptr, ptr %8, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %21, i64 16
  %26 = load ptr, ptr %9, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %21, i64 24
  %28 = load i32, ptr %10, align 8
  store i32 %28, ptr %27, align 8
  call void @set_offset(ptr nonnull %21, ptr nonnull @String)
  %29 = load ptr, ptr %21, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 1
  %33 = load ptr, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = load i32, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %35, 3
  %37 = alloca { ptr, ptr, ptr, i32 }, align 8
  %38 = load ptr, ptr %11, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr inbounds i8, ptr %37, i64 8
  %40 = load ptr, ptr %12, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr inbounds i8, ptr %37, i64 16
  %42 = load ptr, ptr %13, align 8
  store ptr %42, ptr %41, align 8
  %43 = getelementptr inbounds i8, ptr %37, i64 24
  %44 = load i32, ptr %14, align 8
  store i32 %44, ptr %43, align 8
  call void @set_offset(ptr nonnull %37, ptr nonnull @String)
  %45 = load ptr, ptr %37, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %45, 0
  %47 = load ptr, ptr %39, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 1
  %49 = load ptr, ptr %41, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr %49, 2
  %51 = load i32, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 %51, 3
  %53 = insertvalue { ptr, ptr, ptr, i32 } { ptr @File, ptr undef, ptr undef, i32 undef }, ptr %20, 1
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr undef, 2
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 10, 3
  %56 = alloca [2 x ptr], align 8
  store ptr @_parameterization_String, ptr %56, align 8
  %57 = getelementptr inbounds i8, ptr %56, i64 8
  store ptr @_parameterization_String, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %56)
  %59 = call ptr @llvm.invariant.start.p0(i64 160, ptr nonnull @File)
  %60 = alloca { ptr, ptr }, align 8
  store ptr %29, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %60, i64 8
  store ptr %45, ptr %61, align 8
  %62 = call ptr @behavior_wrapper(ptr nonnull @File_B_init_nameString_modeString, { ptr, ptr, ptr, i32 } %55, ptr nonnull %60)
  call void %62({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %56, { ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %52) #25
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @File, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %63, i64 8
  store ptr %20, ptr %64, align 8
  %65 = getelementptr inbounds i8, ptr %63, i64 16
  %66 = getelementptr inbounds i8, ptr %63, i64 24
  store i32 10, ptr %66, align 8
  call void @set_offset(ptr nonnull %63, ptr nonnull @File)
  %67 = load ptr, ptr %63, align 8
  %68 = load ptr, ptr %64, align 8
  %69 = load ptr, ptr %65, align 8
  %70 = load i32, ptr %66, align 8
  %71 = load ptr, ptr %15, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %73 = load ptr, ptr %16, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 1
  %75 = getelementptr inbounds i8, ptr %15, i64 16
  %76 = load ptr, ptr %75, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %76, 2
  %78 = getelementptr inbounds i8, ptr %15, i64 24
  %79 = load i32, ptr %78, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %79, 3
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %82 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %68, 1
  %83 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %69, 2
  %84 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %70, 3
  %85 = call ptr @coroutine_create(ptr nonnull @_functionliteral_cthhjacaug, ptr nonnull @coroutine_rfmhtibpno_passer)
  %86 = getelementptr i8, ptr %85, i64 80
  %87 = getelementptr i8, ptr %85, i64 112
  store { ptr, ptr, ptr, i32 } %80, ptr %86, align 8
  store { ptr, ptr, ptr, i32 } %84, ptr %87, align 8
  call void @coroutine_call(ptr %85)
  %88 = getelementptr i8, ptr %85, i64 48
  %89 = load { ptr, i160 }, ptr %88, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %89, 0
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %91 = call ptr @llvm.invariant.start.p0(i64 160, ptr %67)
  %92 = sext i32 %70 to i64
  %93 = getelementptr ptr, ptr %67, i64 %92
  %94 = getelementptr i8, ptr %93, i64 56
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %84, ptr nonnull %5)
  call void %96({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr nonnull %5) #25
  %97 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %98 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %99 = getelementptr i8, ptr %.fca.0.extract, i64 24
  %100 = getelementptr i8, ptr %.fca.0.extract, i64 32
  %101 = load i64, ptr %97, align 4
  %102 = load i64, ptr %98, align 4
  %103 = load ptr, ptr %99, align 8
  %104 = load ptr, ptr %100, align 8
  %105 = load i64, ptr @Exception, align 8
  %106 = call i1 @subtype_test_wrapper(ptr %103, i64 %102, i64 %101, i64 %105, i64 ptrtoint (ptr @Exception to i64), ptr %104)
  br i1 %106, label %107, label %._crit_edge

107:                                              ; preds = %4
  %.fca.1.extract = extractvalue { ptr, i160 } %89, 1
  store ptr %.fca.0.extract, ptr %6, align 8
  %108 = getelementptr inbounds i8, ptr %6, i64 8
  store i160 %.fca.1.extract, ptr %108, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Exception)
  %109 = load ptr, ptr %6, align 8
  %110 = insertvalue { ptr, i160 } undef, ptr %109, 0
  %111 = load i160, ptr %108, align 8
  %112 = insertvalue { ptr, i160 } %110, i160 %111, 1
  %113 = call ptr @get_current_coroutine()
  %114 = getelementptr i8, ptr %113, i64 48
  store { ptr, i160 } %112, ptr %114, align 8
  call void @coroutine_yield(ptr %113)
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %107
  %115 = load { ptr, i160 }, ptr %88, align 8
  %.sroa.247.8.extract.trunc = trunc i160 %.fca.1.extract22 to i64
  %116 = inttoptr i64 %.sroa.247.8.extract.trunc to ptr
  %117 = call ptr @llvm.invariant.start.p0(i64 56, ptr %.fca.0.extract21)
  %118 = ashr i160 %.fca.1.extract22, 128
  %119 = trunc nsw i160 %118 to i64
  %120 = getelementptr ptr, ptr %.fca.0.extract21, i64 %119
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr @typegetter_wrapper(ptr %121, ptr %116)
  ret { ptr, i160 } %115
}

define { ptr, i160 } @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2, { ptr, i160 } %3) {
._crit_edge:
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract32 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract34 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract35 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract32, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract33, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract34, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract35, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @String)
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %2, 0
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %2, 1
  %.fca.2.extract26 = extractvalue { ptr, ptr, ptr, i32 } %2, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %2, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract24, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract25, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract26, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract27, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %.fca.1.extract21 = extractvalue { ptr, i160 } %3, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract21 to i64
  %13 = inttoptr i64 %.sroa.1.8.extract.trunc to ptr
  %14 = alloca [1 x ptr], align 8
  store ptr @File, ptr %14, align 8
  %15 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_File, ptr nonnull %14)
  %16 = extractvalue { i64, i64 } %15, 0
  %17 = call ptr @bump_malloc(i64 %16)
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = load ptr, ptr %5, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 8
  %21 = load ptr, ptr %6, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr inbounds i8, ptr %18, i64 16
  %23 = load ptr, ptr %7, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr inbounds i8, ptr %18, i64 24
  %25 = load i32, ptr %8, align 8
  store i32 %25, ptr %24, align 8
  call void @set_offset(ptr nonnull %18, ptr nonnull @String)
  %26 = load ptr, ptr %18, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %28 = load ptr, ptr %20, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %28, 1
  %30 = load ptr, ptr %22, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 2
  %32 = load i32, ptr %24, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, i32 %32, 3
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = load ptr, ptr %9, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %34, i64 8
  %37 = load ptr, ptr %10, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr inbounds i8, ptr %34, i64 16
  %39 = load ptr, ptr %11, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds i8, ptr %34, i64 24
  %41 = load i32, ptr %12, align 8
  store i32 %41, ptr %40, align 8
  call void @set_offset(ptr nonnull %34, ptr nonnull @String)
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = load ptr, ptr %36, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 1
  %46 = load ptr, ptr %38, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 2
  %48 = load i32, ptr %40, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %48, 3
  %50 = insertvalue { ptr, ptr, ptr, i32 } { ptr @File, ptr undef, ptr undef, i32 undef }, ptr %17, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr undef, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 10, 3
  %53 = alloca [2 x ptr], align 8
  store ptr @_parameterization_String, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr @_parameterization_String, ptr %54, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %53)
  %56 = call ptr @llvm.invariant.start.p0(i64 160, ptr nonnull @File)
  %57 = alloca { ptr, ptr }, align 8
  store ptr %26, ptr %57, align 8
  %58 = getelementptr inbounds i8, ptr %57, i64 8
  store ptr %42, ptr %58, align 8
  %59 = call ptr @behavior_wrapper(ptr nonnull @File_B_init_nameString_modeString, { ptr, ptr, ptr, i32 } %52, ptr nonnull %57)
  call void %59({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull %53, { ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %49) #25
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @File, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %60, i64 8
  store ptr %17, ptr %61, align 8
  %62 = getelementptr inbounds i8, ptr %60, i64 16
  %63 = getelementptr inbounds i8, ptr %60, i64 24
  store i32 10, ptr %63, align 8
  call void @set_offset(ptr nonnull %60, ptr nonnull @File)
  %64 = load ptr, ptr %60, align 8
  %65 = load ptr, ptr %61, align 8
  %66 = load ptr, ptr %62, align 8
  %67 = load i32, ptr %63, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %65, 1
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %66, 2
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, i32 %67, 3
  %72 = call ptr @coroutine_create(ptr %13, ptr nonnull @coroutine_waefmvsity_passer)
  %73 = getelementptr i8, ptr %72, i64 80
  store { ptr, ptr, ptr, i32 } %71, ptr %73, align 8
  call void @coroutine_call(ptr %72)
  %74 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %75 = call ptr @llvm.invariant.start.p0(i64 160, ptr %64)
  %76 = sext i32 %67 to i64
  %77 = getelementptr ptr, ptr %64, i64 %76
  %78 = getelementptr i8, ptr %77, i64 56
  %79 = load ptr, ptr %78, align 8
  %80 = call ptr @behavior_wrapper(ptr %79, { ptr, ptr, ptr, i32 } %71, ptr nonnull %4)
  call void %80({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr nonnull %4) #25
  %81 = getelementptr i8, ptr %72, i64 48
  %82 = load { ptr, i160 }, ptr %81, align 8
  ret { ptr, i160 } %82
}

define { ptr, ptr, ptr, i32 } @FileSystem__Self_read_file_file_nameString(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract17, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract18, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = call ptr @bump_malloc(i64 3)
  store <2 x i8> <i8 114, i8 98>, ptr %8, align 2
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %11 = call { i64, i64 } @size_wrapper(ptr %10, ptr nonnull %9)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr } undef, ptr %8, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %18)
  %22 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %23 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %24 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr @i32_typ, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr @i32_typ, ptr %26, align 8
  %27 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %24)
  call void %27({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %18, { ptr } %14, i32 2, i32 3) #25
  %28 = alloca [1 x ptr], align 8
  store ptr @FileReader, ptr %28, align 8
  %29 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileReader, ptr nonnull %28)
  %30 = extractvalue { i64, i64 } %29, 0
  %31 = call ptr @bump_malloc(i64 %30)
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileReader, ptr undef, ptr undef, i32 undef }, ptr %31, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %36 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @FileReader)
  %37 = call ptr @behavior_wrapper(ptr nonnull @FileReader_B_init_, { ptr, ptr, ptr, i32 } %34, ptr nonnull %3)
  call void %37({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %3) #25
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  %39 = load ptr, ptr %4, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds i8, ptr %38, i64 8
  %41 = load ptr, ptr %5, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr inbounds i8, ptr %38, i64 16
  %43 = load ptr, ptr %6, align 8
  store ptr %43, ptr %42, align 8
  %44 = getelementptr inbounds i8, ptr %38, i64 24
  %45 = load i32, ptr %7, align 8
  store i32 %45, ptr %44, align 8
  call void @set_offset(ptr nonnull %38, ptr nonnull @String)
  %46 = load ptr, ptr %38, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %48 = load ptr, ptr %40, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 1
  %50 = load ptr, ptr %42, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 2
  %52 = load i32, ptr %44, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %52, 3
  %54 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %54, i64 8
  store ptr %13, ptr %55, align 8
  %56 = getelementptr inbounds i8, ptr %54, i64 16
  %57 = getelementptr inbounds i8, ptr %54, i64 24
  store i32 10, ptr %57, align 8
  call void @set_offset(ptr nonnull %54, ptr nonnull @String)
  %58 = load ptr, ptr %54, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %58, 0
  %60 = load ptr, ptr %55, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 1
  %62 = load ptr, ptr %56, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 2
  %64 = load i32, ptr %57, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, i32 %64, 3
  %66 = ptrtoint ptr %31 to i64
  %.sroa.3.8.insert.ext = zext i64 %66 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %67 = insertvalue { ptr, i160 } { ptr @FileReader, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %68 = alloca [3 x ptr], align 8
  store ptr @_parameterization_String, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %68, i64 8
  store ptr @_parameterization_String, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %68, i64 16
  store ptr @_parameterization_FileReader, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %68)
  %72 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @FileSystem)
  %73 = alloca { ptr, ptr, ptr }, align 8
  store ptr %46, ptr %73, align 8
  %74 = getelementptr inbounds i8, ptr %73, i64 8
  store ptr %58, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %73, i64 16
  store ptr @FileReader, ptr %75, align 8
  %76 = call ptr @class_behavior_wrapper(ptr nonnull @FileSystem_B__Self_process_file_file_nameString_modeString_processorFileProcessorT__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, ptr nonnull %73)
  %77 = call { ptr, i160 } %76(ptr nonnull %68, { ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %65, { ptr, i160 } %67) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %77, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %77, 1
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %78, align 8
  %79 = getelementptr inbounds i8, ptr %78, i64 8
  store i160 %.fca.1.extract, ptr %79, align 8
  call void @set_offset(ptr nonnull %78, ptr nonnull @String)
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %81 = load ptr, ptr %78, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr inbounds i8, ptr %80, i64 8
  %83 = load ptr, ptr %79, align 8
  store ptr %83, ptr %82, align 8
  %84 = getelementptr inbounds i8, ptr %78, i64 16
  %85 = getelementptr inbounds i8, ptr %80, i64 16
  %86 = load ptr, ptr %84, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr inbounds i8, ptr %78, i64 24
  %88 = getelementptr inbounds i8, ptr %80, i64 24
  %89 = load i32, ptr %87, align 8
  store i32 %89, ptr %88, align 8
  call void @set_offset(ptr nonnull %80, ptr nonnull @String)
  %90 = load ptr, ptr %80, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = load ptr, ptr %82, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 1
  %94 = load ptr, ptr %85, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 2
  %96 = load i32, ptr %88, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  ret { ptr, ptr, ptr, i32 } %97
}

define void @FileSystem__Self_write_file_file_nameString_textString(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2) {
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract21, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract22, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract23, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract24, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %2, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %2, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract17, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract18, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @String)
  %12 = call ptr @bump_malloc(i64 3)
  store <2 x i8> <i8 119, i8 98>, ptr %12, align 2
  %13 = alloca [1 x ptr], align 8
  store ptr @String, ptr %13, align 8
  %14 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %15 = call { i64, i64 } @size_wrapper(ptr %14, ptr nonnull %13)
  %16 = extractvalue { i64, i64 } %15, 0
  %17 = call ptr @bump_malloc(i64 %16)
  %18 = insertvalue { ptr } undef, ptr %12, 0
  %19 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %17, 1
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr undef, 2
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 10, 3
  %22 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @_parameterization_i32, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @_parameterization_i32, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %22)
  %26 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %27 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  %28 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr @i32_typ, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 16
  store ptr @i32_typ, ptr %30, align 8
  %31 = call ptr @behavior_wrapper(ptr %27, { ptr, ptr, ptr, i32 } %21, ptr nonnull %28)
  call void %31({ ptr, ptr, ptr, i32 } %21, { ptr, ptr, ptr, i32 } %21, ptr nonnull %22, { ptr } %18, i32 2, i32 3) #25
  %32 = alloca [1 x ptr], align 8
  store ptr @FileWriter, ptr %32, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileWriter, ptr nonnull %32)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = call ptr @bump_malloc(i64 %34)
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = load ptr, ptr %8, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 8
  %39 = load ptr, ptr %9, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds i8, ptr %36, i64 16
  %41 = load ptr, ptr %10, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr inbounds i8, ptr %36, i64 24
  %43 = load i32, ptr %11, align 8
  store i32 %43, ptr %42, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @String)
  %44 = load ptr, ptr %36, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %38, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %40, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %42, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  %52 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileWriter, ptr undef, ptr undef, i32 undef }, ptr %35, 1
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr undef, 2
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 10, 3
  %55 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %55)
  %57 = call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @FileWriter)
  %58 = alloca { ptr }, align 8
  store ptr %44, ptr %58, align 8
  %59 = call ptr @behavior_wrapper(ptr nonnull @FileWriter_B_init_textString, { ptr, ptr, ptr, i32 } %54, ptr nonnull %58)
  call void %59({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull %55, { ptr, ptr, ptr, i32 } %51) #25
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %61 = load ptr, ptr %4, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr inbounds i8, ptr %60, i64 8
  %63 = load ptr, ptr %5, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr inbounds i8, ptr %60, i64 16
  %65 = load ptr, ptr %6, align 8
  store ptr %65, ptr %64, align 8
  %66 = getelementptr inbounds i8, ptr %60, i64 24
  %67 = load i32, ptr %7, align 8
  store i32 %67, ptr %66, align 8
  call void @set_offset(ptr nonnull %60, ptr nonnull @String)
  %68 = load ptr, ptr %60, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 1
  %72 = load ptr, ptr %64, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 2
  %74 = load i32, ptr %66, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %74, 3
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %76, i64 8
  store ptr %17, ptr %77, align 8
  %78 = getelementptr inbounds i8, ptr %76, i64 16
  %79 = getelementptr inbounds i8, ptr %76, i64 24
  store i32 10, ptr %79, align 8
  call void @set_offset(ptr nonnull %76, ptr nonnull @String)
  %80 = load ptr, ptr %76, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = load ptr, ptr %77, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %84 = load ptr, ptr %78, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %86 = load i32, ptr %79, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  %88 = ptrtoint ptr %35 to i64
  %.sroa.3.8.insert.ext = zext i64 %88 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %89 = insertvalue { ptr, i160 } { ptr @FileWriter, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %90 = alloca [3 x ptr], align 8
  store ptr @_parameterization_String, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr @_parameterization_String, ptr %91, align 8
  %92 = getelementptr inbounds i8, ptr %90, i64 16
  store ptr @_parameterization_FileWriter, ptr %92, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %90)
  %94 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @FileSystem)
  %95 = alloca { ptr, ptr, ptr }, align 8
  store ptr %68, ptr %95, align 8
  %96 = getelementptr inbounds i8, ptr %95, i64 8
  store ptr %80, ptr %96, align 8
  %97 = getelementptr inbounds i8, ptr %95, i64 16
  store ptr @FileWriter, ptr %97, align 8
  %98 = call ptr @class_behavior_wrapper(ptr nonnull @FileSystem_B__Self_process_file_file_nameString_modeString_processorFileProcessorT__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, ptr nonnull %95)
  %99 = call { ptr, i160 } %98(ptr nonnull %90, { ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %87, { ptr, i160 } %89) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileWriter(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 32, i64 8 }
}

define ptr @FileWriter_B_init_textString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @String, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @String to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 112
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @FileWriter_field_FileWriter_0(ptr nocapture readnone %0) #1 {
  ret ptr @_parameterization_i64
}

define ptr @FileWriter_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -2227788838181535664, i64 ptrtoint (ptr @File to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @FileWriter_init_textString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @FileWriter)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @String)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 72, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %13, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  call void %29(ptr %21, { ptr, ptr, ptr, i32 } %37) #23
  ret void
}

define { ptr, i160 } @FileWriter_process_fileFile({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract12, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract14, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract16, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @FileWriter)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract3, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract5, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract7, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @File)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 72, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call { ptr, ptr, ptr, i32 } %20(ptr %13) #24
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  store ptr %.fca.0.extract, ptr %22, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %22, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %22, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %22, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %22, ptr nonnull @String)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %.fca.1.gep, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %.fca.2.gep, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %.fca.3.gep, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @String)
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  %39 = load ptr, ptr %9, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = load ptr, ptr %10, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 1
  %43 = load ptr, ptr %11, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 2
  %45 = load i32, ptr %12, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  %47 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %47)
  %49 = call ptr @llvm.invariant.start.p0(i64 160, ptr %39)
  %50 = sext i32 %45 to i64
  %51 = getelementptr ptr, ptr %39, i64 %50
  %52 = getelementptr i8, ptr %51, i64 88
  %53 = load ptr, ptr %52, align 8
  %54 = alloca { ptr }, align 8
  store ptr %31, ptr %54, align 8
  %55 = call ptr @behavior_wrapper(ptr %53, { ptr, ptr, ptr, i32 } %46, ptr nonnull %54)
  %56 = call i64 %55({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %47, { ptr, ptr, ptr, i32 } %38) #25
  %.sroa.0.0.insert.ext = zext i64 %56 to i160
  %57 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %57
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_File(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 80, i64 8 }
}

define ptr @File_B_init_nameString_modeString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @String, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @String to i64), ptr %12)
  %15 = getelementptr i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = tail call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 %13, i64 ptrtoint (ptr @String to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr i8, ptr %26, i64 176
  %28 = load ptr, ptr %27, align 8
  ret ptr %28
}

define ptr @File_B__set_mode_modeString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @String, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @String to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 184
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @File_B_reopen_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @File_B_close_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @File_B_size_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @File_B_read_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @File_B_read_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @File_B_write_textString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @String, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @String to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 232
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define void @File_init_nameString_modeString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract43 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract45 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract39, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract41, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract43, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract45, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @File)
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract27, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %.fca.1.extract29, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %.fca.2.extract31, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %11, i64 24
  store i32 %.fca.3.extract33, ptr %14, align 8
  call void @set_offset(ptr nonnull %11, ptr nonnull @String)
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = load ptr, ptr %11, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 8
  %18 = load ptr, ptr %12, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %15, i64 16
  %20 = load ptr, ptr %13, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %15, i64 24
  %22 = load i32, ptr %14, align 8
  store i32 %22, ptr %21, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @String)
  %23 = load ptr, ptr %8, align 8
  %24 = load ptr, ptr %7, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 160, ptr %24)
  %26 = load i32, ptr %10, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %21, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %23, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract19 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract25 = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract19, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract23, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract25, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @String)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @String)
  %52 = load ptr, ptr %8, align 8
  %53 = load ptr, ptr %7, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 160, ptr %53)
  %55 = load i32, ptr %10, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  %70 = load ptr, ptr %8, align 8
  %71 = load ptr, ptr %7, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 160, ptr %71)
  %73 = load i32, ptr %10, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 24
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  call void %79(ptr %70, i1 false) #23
  %80 = load ptr, ptr %8, align 8
  %81 = load ptr, ptr %7, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 160, ptr %81)
  %83 = load i32, ptr %10, align 8
  %84 = sext i32 %83 to i64
  %85 = getelementptr ptr, ptr %81, i64 %84
  %86 = load ptr, ptr %85, align 8
  %87 = load ptr, ptr %86, align 8
  %88 = call { ptr, ptr, ptr, i32 } %87(ptr %80) #24
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %88, 0
  store ptr %.fca.0.extract10, ptr %89, align 8
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %88, 1
  %.fca.1.gep13 = getelementptr inbounds i8, ptr %89, i64 8
  store ptr %.fca.1.extract12, ptr %.fca.1.gep13, align 8
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %88, 2
  %.fca.2.gep15 = getelementptr inbounds i8, ptr %89, i64 16
  store ptr %.fca.2.extract14, ptr %.fca.2.gep15, align 8
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %88, 3
  %.fca.3.gep17 = getelementptr inbounds i8, ptr %89, i64 24
  store i32 %.fca.3.extract16, ptr %.fca.3.gep17, align 8
  call void @assume_offset(ptr nonnull %89, ptr nonnull @String)
  %90 = load ptr, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = load ptr, ptr %.fca.1.gep13, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 1
  %94 = load ptr, ptr %.fca.2.gep15, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 2
  %96 = load i32, ptr %.fca.3.gep17, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  %98 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %99 = call ptr @llvm.invariant.start.p0(i64 632, ptr %90)
  %100 = sext i32 %96 to i64
  %101 = getelementptr ptr, ptr %90, i64 %100
  %102 = getelementptr i8, ptr %101, i64 80
  %103 = load ptr, ptr %102, align 8
  %104 = call ptr @behavior_wrapper(ptr %103, { ptr, ptr, ptr, i32 } %97, ptr nonnull %6)
  %105 = call { ptr } %104({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr nonnull %6) #25
  %106 = load ptr, ptr %8, align 8
  %107 = load ptr, ptr %7, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 160, ptr %107)
  %109 = load i32, ptr %10, align 8
  %110 = sext i32 %109 to i64
  %111 = getelementptr ptr, ptr %107, i64 %110
  %112 = getelementptr i8, ptr %111, i64 8
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %113, align 8
  %115 = call { ptr, ptr, ptr, i32 } %114(ptr %106) #24
  %116 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract6 = extractvalue { ptr, ptr, ptr, i32 } %115, 0
  store ptr %.fca.0.extract6, ptr %116, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %115, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %116, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %115, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %116, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %115, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %116, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %116, ptr nonnull @String)
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %.fca.1.gep, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = load ptr, ptr %.fca.2.gep, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %123 = load i32, ptr %.fca.3.gep, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  %125 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %126 = call ptr @llvm.invariant.start.p0(i64 632, ptr %117)
  %127 = sext i32 %123 to i64
  %128 = getelementptr ptr, ptr %117, i64 %127
  %129 = getelementptr i8, ptr %128, i64 80
  %130 = load ptr, ptr %129, align 8
  %131 = call ptr @behavior_wrapper(ptr %130, { ptr, ptr, ptr, i32 } %124, ptr nonnull %6)
  %132 = call { ptr } %131({ ptr, ptr, ptr, i32 } %124, { ptr, ptr, ptr, i32 } %124, ptr nonnull %6) #25
  %133 = call { ptr } @fopen({ ptr } %105, { ptr } %132)
  %134 = load ptr, ptr %8, align 8
  %135 = load ptr, ptr %7, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 160, ptr %135)
  %137 = load i32, ptr %10, align 8
  %138 = sext i32 %137 to i64
  %139 = getelementptr ptr, ptr %135, i64 %138
  %140 = getelementptr i8, ptr %139, i64 16
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr i8, ptr %141, i64 8
  %143 = load ptr, ptr %142, align 8
  call void %143(ptr %134, { ptr } %133) #23
  %144 = load ptr, ptr %8, align 8
  %145 = load ptr, ptr %7, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 160, ptr %145)
  %147 = load i32, ptr %10, align 8
  %148 = sext i32 %147 to i64
  %149 = getelementptr ptr, ptr %145, i64 %148
  %150 = getelementptr i8, ptr %149, i64 16
  %151 = load ptr, ptr %150, align 8
  %152 = load ptr, ptr %151, align 8
  %153 = call { ptr } %152(ptr %144) #24
  %154 = call ptr @llvm.invariant.start.p0(i64 160, ptr %145)
  %155 = getelementptr i8, ptr %149, i64 24
  %156 = load ptr, ptr %155, align 8
  %157 = getelementptr i8, ptr %156, i64 8
  %158 = load ptr, ptr %157, align 8
  call void %158(ptr %144, i1 true) #23
  ret void
}

define void @File__set_mode_modeString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract4, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract5, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract6, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @File)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @String)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @String)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 160, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 160, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call i1 %48(ptr %40) #24
  br i1 %49, label %50, label %61

50:                                               ; preds = %4
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %41, 0
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %40, 1
  %53 = load ptr, ptr %8, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %43, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %57 = call ptr @llvm.invariant.start.p0(i64 160, ptr %41)
  %58 = getelementptr i8, ptr %45, i64 48
  %59 = load ptr, ptr %58, align 8
  %60 = call ptr @behavior_wrapper(ptr %59, { ptr, ptr, ptr, i32 } %55, ptr nonnull %5)
  call void %60({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %5) #25
  br label %61

61:                                               ; preds = %4, %50
  ret void
}

define void @File_reopen_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract20 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract22 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract18, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract20, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract22, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract24, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @File)
  %9 = load ptr, ptr %5, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %11 = load ptr, ptr %6, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %11, 1
  %13 = load ptr, ptr %7, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %13, 2
  %15 = load i32, ptr %8, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 %15, 3
  %17 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %18 = call ptr @llvm.invariant.start.p0(i64 160, ptr %9)
  %19 = sext i32 %15 to i64
  %20 = getelementptr ptr, ptr %9, i64 %19
  %21 = getelementptr i8, ptr %20, i64 56
  %22 = load ptr, ptr %21, align 8
  %23 = call ptr @behavior_wrapper(ptr %22, { ptr, ptr, ptr, i32 } %16, ptr nonnull %4)
  call void %23({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %4) #25
  %24 = load ptr, ptr %6, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 160, ptr %25)
  %27 = load i32, ptr %8, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr ptr, ptr %25, i64 %28
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr, ptr, ptr, i32 } %31(ptr %24) #24
  %33 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %32, 0
  store ptr %.fca.0.extract10, ptr %33, align 8
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %32, 1
  %.fca.1.gep13 = getelementptr inbounds i8, ptr %33, i64 8
  store ptr %.fca.1.extract12, ptr %.fca.1.gep13, align 8
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %32, 2
  %.fca.2.gep15 = getelementptr inbounds i8, ptr %33, i64 16
  store ptr %.fca.2.extract14, ptr %.fca.2.gep15, align 8
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %32, 3
  %.fca.3.gep17 = getelementptr inbounds i8, ptr %33, i64 24
  store i32 %.fca.3.extract16, ptr %.fca.3.gep17, align 8
  call void @assume_offset(ptr nonnull %33, ptr nonnull @String)
  %34 = load ptr, ptr %33, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = load ptr, ptr %.fca.1.gep13, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 1
  %38 = load ptr, ptr %.fca.2.gep15, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 2
  %40 = load i32, ptr %.fca.3.gep17, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %40, 3
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %43 = call ptr @llvm.invariant.start.p0(i64 632, ptr %34)
  %44 = sext i32 %40 to i64
  %45 = getelementptr ptr, ptr %34, i64 %44
  %46 = getelementptr i8, ptr %45, i64 80
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4)
  %49 = call { ptr } %48({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4) #25
  %50 = load ptr, ptr %6, align 8
  %51 = load ptr, ptr %5, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 160, ptr %51)
  %53 = load i32, ptr %8, align 8
  %54 = sext i32 %53 to i64
  %55 = getelementptr ptr, ptr %51, i64 %54
  %56 = getelementptr i8, ptr %55, i64 8
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr, ptr, ptr, i32 } %58(ptr %50) #24
  %60 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract6 = extractvalue { ptr, ptr, ptr, i32 } %59, 0
  store ptr %.fca.0.extract6, ptr %60, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %59, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %60, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %59, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %60, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %59, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %60, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %60, ptr nonnull @String)
  %61 = load ptr, ptr %60, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %63 = load ptr, ptr %.fca.1.gep, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %63, 1
  %65 = load ptr, ptr %.fca.2.gep, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 2
  %67 = load i32, ptr %.fca.3.gep, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %67, 3
  %69 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %70 = call ptr @llvm.invariant.start.p0(i64 632, ptr %61)
  %71 = sext i32 %67 to i64
  %72 = getelementptr ptr, ptr %61, i64 %71
  %73 = getelementptr i8, ptr %72, i64 80
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @behavior_wrapper(ptr %74, { ptr, ptr, ptr, i32 } %68, ptr nonnull %4)
  %76 = call { ptr } %75({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr nonnull %4) #25
  %77 = call { ptr } @fopen({ ptr } %49, { ptr } %76)
  %78 = load ptr, ptr %6, align 8
  %79 = load ptr, ptr %5, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 160, ptr %79)
  %81 = load i32, ptr %8, align 8
  %82 = sext i32 %81 to i64
  %83 = getelementptr ptr, ptr %79, i64 %82
  %84 = getelementptr i8, ptr %83, i64 16
  %85 = load ptr, ptr %84, align 8
  %86 = getelementptr i8, ptr %85, i64 8
  %87 = load ptr, ptr %86, align 8
  call void %87(ptr %78, { ptr } %77) #23
  %88 = load ptr, ptr %6, align 8
  %89 = load ptr, ptr %5, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 160, ptr %89)
  %91 = load i32, ptr %8, align 8
  %92 = sext i32 %91 to i64
  %93 = getelementptr ptr, ptr %89, i64 %92
  %94 = getelementptr i8, ptr %93, i64 16
  %95 = load ptr, ptr %94, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = call { ptr } %96(ptr %88) #24
  %98 = call ptr @llvm.invariant.start.p0(i64 160, ptr %89)
  %99 = getelementptr i8, ptr %93, i64 24
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr i8, ptr %100, i64 8
  %102 = load ptr, ptr %101, align 8
  call void %102(ptr %88, i1 true) #23
  ret void
}

define void @File_close_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %.fca.1.extract, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr %.fca.2.extract, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %12, i64 24
  store i32 %.fca.3.extract, ptr %15, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @File)
  %16 = load ptr, ptr %13, align 8
  %17 = load ptr, ptr %12, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 160, ptr %17)
  %19 = load i32, ptr %15, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr ptr, ptr %17, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i1 %24(ptr %16) #24
  br i1 %25, label %26, label %._crit_edge

26:                                               ; preds = %3
  %27 = call ptr @llvm.invariant.start.p0(i64 160, ptr %17)
  %28 = getelementptr i8, ptr %21, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr } %30(ptr %16) #24
  %32 = call i32 @fclose({ ptr } %31)
  %33 = load ptr, ptr %13, align 8
  %34 = load ptr, ptr %12, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 160, ptr %34)
  %36 = load i32, ptr %15, align 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr ptr, ptr %34, i64 %37
  %39 = getelementptr i8, ptr %38, i64 24
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, i1 false) #23
  %43 = icmp eq i32 %32, -1
  br i1 %43, label %44, label %._crit_edge

44:                                               ; preds = %26
  store ptr @FileSystemError, ptr %5, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %5)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  %48 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %47, 1
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr undef, 2
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 10, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %52 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %53 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %50, ptr nonnull %4)
  call void %53({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %4) #25
  %54 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 102, i8 105, i8 108, i8 101, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %54, align 16
  store ptr @String, ptr %6, align 8
  %55 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %56 = call { i64, i64 } @size_wrapper(ptr %55, ptr nonnull %6)
  %57 = extractvalue { i64, i64 } %56, 0
  %58 = call ptr @bump_malloc(i64 %57)
  %59 = insertvalue { ptr } undef, ptr %54, 0
  %60 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %58, 1
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr undef, 2
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %7, align 8
  %63 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %7)
  %66 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %67 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %8, align 8
  %68 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %69, align 8
  %70 = call ptr @behavior_wrapper(ptr %67, { ptr, ptr, ptr, i32 } %62, ptr nonnull %8)
  call void %70({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %7, { ptr } %59, i32 14, i32 15) #25
  store ptr @String, ptr %9, align 8
  %71 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %58, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %9, i64 16
  %73 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 10, ptr %73, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %74 = load ptr, ptr %9, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %71, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = load ptr, ptr %72, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 2
  %80 = load i32, ptr %73, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %80, 3
  store ptr @_parameterization_i32, ptr %10, align 8
  %82 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @_parameterization_String, ptr %82, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %84 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %11, align 8
  %85 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %74, ptr %85, align 8
  %86 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %50, ptr nonnull %11)
  call void %86({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %10, i32 47, { ptr, ptr, ptr, i32 } %81) #25
  %87 = ptrtoint ptr %47 to i64
  %.sroa.424.8.insert.ext = zext i64 %87 to i160
  %.sroa.424.8.insert.insert = or disjoint i160 %.sroa.424.8.insert.ext, 3402823669209384634633746074317682114560
  %88 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.424.8.insert.insert, 1
  %89 = call ptr @get_current_coroutine()
  %90 = getelementptr i8, ptr %89, i64 48
  store { ptr, i160 } %88, ptr %90, align 8
  call void @coroutine_yield(ptr %89)
  br label %._crit_edge

._crit_edge:                                      ; preds = %44, %26, %3
  ret void
}

define i64 @File_size_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %.fca.1.extract, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr %.fca.2.extract, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %12, i64 24
  store i32 %.fca.3.extract, ptr %15, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @File)
  %16 = load ptr, ptr %13, align 8
  %17 = load ptr, ptr %12, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 160, ptr %17)
  %19 = load i32, ptr %15, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr ptr, ptr %17, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i1 %24(ptr %16) #24
  br i1 %25, label %._crit_edge, label %26

26:                                               ; preds = %3
  store ptr @FileSystemError, ptr %5, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %5)
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = call ptr @bump_malloc(i64 %28)
  %30 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %29, 1
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr undef, 2
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, i32 10, 3
  %33 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %34 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %35 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %32, ptr nonnull %4)
  call void %35({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr nonnull %4) #25
  %36 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 102, i8 105, i8 108, i8 101, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %36, align 16
  store ptr @String, ptr %6, align 8
  %37 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %38 = call { i64, i64 } @size_wrapper(ptr %37, ptr nonnull %6)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = insertvalue { ptr } undef, ptr %36, 0
  %42 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %40, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr undef, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %7, align 8
  %45 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %45, align 8
  %46 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %7)
  %48 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %49 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %8, align 8
  %50 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %50, align 8
  %51 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %51, align 8
  %52 = call ptr @behavior_wrapper(ptr %49, { ptr, ptr, ptr, i32 } %44, ptr nonnull %8)
  call void %52({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %7, { ptr } %41, i32 14, i32 15) #25
  store ptr @String, ptr %9, align 8
  %53 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %40, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %9, i64 16
  %55 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 10, ptr %55, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %56 = load ptr, ptr %9, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = load ptr, ptr %53, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 1
  %60 = load ptr, ptr %54, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 2
  %62 = load i32, ptr %55, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %62, 3
  store ptr @_parameterization_i32, ptr %10, align 8
  %64 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @_parameterization_String, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %66 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %11, align 8
  %67 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %56, ptr %67, align 8
  %68 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %32, ptr nonnull %11)
  call void %68({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr nonnull %10, i32 50, { ptr, ptr, ptr, i32 } %63) #25
  %69 = ptrtoint ptr %29 to i64
  %.sroa.437.8.insert.ext = zext i64 %69 to i160
  %.sroa.437.8.insert.insert = or disjoint i160 %.sroa.437.8.insert.ext, 3402823669209384634633746074317682114560
  %70 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.437.8.insert.insert, 1
  %71 = call ptr @get_current_coroutine()
  %72 = getelementptr i8, ptr %71, i64 48
  store { ptr, i160 } %70, ptr %72, align 8
  call void @coroutine_yield(ptr %71)
  br label %._crit_edge

._crit_edge:                                      ; preds = %3, %26
  %73 = load ptr, ptr %13, align 8
  %74 = load ptr, ptr %12, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 160, ptr %74)
  %76 = load i32, ptr %15, align 8
  %77 = sext i32 %76 to i64
  %78 = getelementptr ptr, ptr %74, i64 %77
  %79 = getelementptr i8, ptr %78, i64 16
  %80 = load ptr, ptr %79, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = call { ptr } %81(ptr %73) #24
  %83 = call i64 @ftell({ ptr } %82)
  %84 = load ptr, ptr %13, align 8
  %85 = load ptr, ptr %12, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 160, ptr %85)
  %87 = load i32, ptr %15, align 8
  %88 = sext i32 %87 to i64
  %89 = getelementptr ptr, ptr %85, i64 %88
  %90 = getelementptr i8, ptr %89, i64 16
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %91, align 8
  %93 = call { ptr } %92(ptr %84) #24
  %94 = call i32 @fseek({ ptr } %93, i64 0, i32 2)
  %95 = load ptr, ptr %13, align 8
  %96 = load ptr, ptr %12, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 160, ptr %96)
  %98 = load i32, ptr %15, align 8
  %99 = sext i32 %98 to i64
  %100 = getelementptr ptr, ptr %96, i64 %99
  %101 = getelementptr i8, ptr %100, i64 16
  %102 = load ptr, ptr %101, align 8
  %103 = load ptr, ptr %102, align 8
  %104 = call { ptr } %103(ptr %95) #24
  %105 = call i64 @ftell({ ptr } %104)
  %106 = load ptr, ptr %13, align 8
  %107 = load ptr, ptr %12, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 160, ptr %107)
  %109 = load i32, ptr %15, align 8
  %110 = sext i32 %109 to i64
  %111 = getelementptr ptr, ptr %107, i64 %110
  %112 = getelementptr i8, ptr %111, i64 16
  %113 = load ptr, ptr %112, align 8
  %114 = load ptr, ptr %113, align 8
  %115 = call { ptr } %114(ptr %106) #24
  %116 = call i32 @fseek({ ptr } %115, i64 %83, i32 0)
  ret i64 %105
}

define { ptr, ptr, ptr, i32 } @File_read_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %12 = alloca [1 x ptr], align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca [3 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca [2 x ptr], align 8
  %18 = alloca { ptr, ptr }, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca [3 x ptr], align 8
  %21 = alloca { ptr, ptr, ptr }, align 8
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr %.fca.1.extract, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr %.fca.2.extract, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %23, i64 24
  store i32 %.fca.3.extract, ptr %26, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @File)
  %27 = load ptr, ptr %24, align 8
  %28 = load ptr, ptr %23, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 160, ptr %28)
  %30 = load i32, ptr %26, align 8
  %31 = sext i32 %30 to i64
  %32 = getelementptr ptr, ptr %28, i64 %31
  %33 = getelementptr i8, ptr %32, i64 24
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call i1 %35(ptr %27) #24
  br i1 %36, label %._crit_edge, label %37

37:                                               ; preds = %3
  store ptr @FileSystemError, ptr %5, align 8
  %38 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %5)
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = call ptr @bump_malloc(i64 %39)
  %41 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %40, 1
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr undef, 2
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 10, 3
  %44 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %45 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %46 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %43, ptr nonnull %4)
  call void %46({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull %4) #25
  %47 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 102, i8 105, i8 108, i8 101, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %47, align 16
  store ptr @String, ptr %6, align 8
  %48 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %49 = call { i64, i64 } @size_wrapper(ptr %48, ptr nonnull %6)
  %50 = extractvalue { i64, i64 } %49, 0
  %51 = call ptr @bump_malloc(i64 %50)
  %52 = insertvalue { ptr } undef, ptr %47, 0
  %53 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %51, 1
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr undef, 2
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %7, align 8
  %56 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %56, align 8
  %57 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %7)
  %59 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %60 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %8, align 8
  %61 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %61, align 8
  %62 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %62, align 8
  %63 = call ptr @behavior_wrapper(ptr %60, { ptr, ptr, ptr, i32 } %55, ptr nonnull %8)
  call void %63({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %7, { ptr } %52, i32 14, i32 15) #25
  store ptr @String, ptr %9, align 8
  %64 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %51, ptr %64, align 8
  %65 = getelementptr inbounds i8, ptr %9, i64 16
  %66 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 10, ptr %66, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %67 = load ptr, ptr %9, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %67, 0
  %69 = load ptr, ptr %64, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %69, 1
  %71 = load ptr, ptr %65, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %71, 2
  %73 = load i32, ptr %66, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %73, 3
  store ptr @_parameterization_i32, ptr %10, align 8
  %75 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @_parameterization_String, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %77 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %11, align 8
  %78 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %67, ptr %78, align 8
  %79 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %43, ptr nonnull %11)
  call void %79({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull %10, i32 60, { ptr, ptr, ptr, i32 } %74) #25
  %80 = ptrtoint ptr %40 to i64
  %.sroa.482.8.insert.ext = zext i64 %80 to i160
  %.sroa.482.8.insert.insert = or disjoint i160 %.sroa.482.8.insert.ext, 3402823669209384634633746074317682114560
  %81 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.482.8.insert.insert, 1
  %82 = call ptr @get_current_coroutine()
  %83 = getelementptr i8, ptr %82, i64 48
  store { ptr, i160 } %81, ptr %83, align 8
  call void @coroutine_yield(ptr %82)
  br label %._crit_edge

._crit_edge:                                      ; preds = %3, %37
  %84 = load ptr, ptr %24, align 8
  %85 = load ptr, ptr %23, align 8
  %86 = call ptr @llvm.invariant.start.p0(i64 160, ptr %85)
  %87 = load i32, ptr %26, align 8
  %88 = sext i32 %87 to i64
  %89 = getelementptr ptr, ptr %85, i64 %88
  %90 = getelementptr i8, ptr %89, i64 16
  %91 = load ptr, ptr %90, align 8
  %92 = load ptr, ptr %91, align 8
  %93 = call { ptr } %92(ptr %84) #24
  %94 = call i32 @fseek({ ptr } %93, i64 0, i32 0)
  %95 = load ptr, ptr %23, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = load ptr, ptr %24, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %99 = load ptr, ptr %25, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %101 = load i32, ptr %26, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  %103 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %104 = call ptr @llvm.invariant.start.p0(i64 160, ptr %95)
  %105 = sext i32 %101 to i64
  %106 = getelementptr ptr, ptr %95, i64 %105
  %107 = getelementptr i8, ptr %106, i64 64
  %108 = load ptr, ptr %107, align 8
  %109 = call ptr @behavior_wrapper(ptr %108, { ptr, ptr, ptr, i32 } %102, ptr nonnull %4)
  %110 = call i64 %109({ ptr, ptr, ptr, i32 } %102, { ptr, ptr, ptr, i32 } %102, ptr nonnull %4) #25
  %111 = trunc i64 %110 to i32
  %112 = add i32 %111, 1
  %113 = sext i32 %112 to i64
  %114 = call ptr @bump_malloc(i64 %113)
  %115 = load ptr, ptr %24, align 8
  %116 = load ptr, ptr %23, align 8
  %117 = call ptr @llvm.invariant.start.p0(i64 160, ptr %116)
  %118 = load i32, ptr %26, align 8
  %119 = sext i32 %118 to i64
  %120 = getelementptr ptr, ptr %116, i64 %119
  %121 = getelementptr i8, ptr %120, i64 16
  %122 = load ptr, ptr %121, align 8
  %123 = load ptr, ptr %122, align 8
  %124 = call { ptr } %123(ptr %115) #24
  %125 = insertvalue { ptr } undef, ptr %114, 0
  %126 = call i64 @fread({ ptr } %125, i64 1, i64 %110, { ptr } %124)
  %127 = icmp slt i64 %126, %110
  br i1 %127, label %128, label %._crit_edge1

128:                                              ; preds = %._crit_edge
  store ptr @FileSystemError, ptr %12, align 8
  %129 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %12)
  %130 = extractvalue { i64, i64 } %129, 0
  %131 = call ptr @bump_malloc(i64 %130)
  %132 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %131, 1
  %133 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr undef, 2
  %134 = insertvalue { ptr, ptr, ptr, i32 } %133, i32 10, 3
  %135 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %136 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %137 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4)
  call void %137({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4) #25
  %138 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 102, i8 105, i8 108, i8 101, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %138, align 16
  store ptr @String, ptr %13, align 8
  %139 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %140 = call { i64, i64 } @size_wrapper(ptr %139, ptr nonnull %13)
  %141 = extractvalue { i64, i64 } %140, 0
  %142 = call ptr @bump_malloc(i64 %141)
  %143 = insertvalue { ptr } undef, ptr %138, 0
  %144 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %142, 1
  %145 = insertvalue { ptr, ptr, ptr, i32 } %144, ptr undef, 2
  %146 = insertvalue { ptr, ptr, ptr, i32 } %145, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %14, align 8
  %147 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr @_parameterization_i32, ptr %147, align 8
  %148 = getelementptr inbounds i8, ptr %14, i64 16
  store ptr @_parameterization_i32, ptr %148, align 8
  %149 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %14)
  %150 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %151 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %15, align 8
  %152 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @i32_typ, ptr %152, align 8
  %153 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr @i32_typ, ptr %153, align 8
  %154 = call ptr @behavior_wrapper(ptr %151, { ptr, ptr, ptr, i32 } %146, ptr nonnull %15)
  call void %154({ ptr, ptr, ptr, i32 } %146, { ptr, ptr, ptr, i32 } %146, ptr nonnull %14, { ptr } %143, i32 14, i32 15) #25
  store ptr @String, ptr %16, align 8
  %155 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr %142, ptr %155, align 8
  %156 = getelementptr inbounds i8, ptr %16, i64 16
  %157 = getelementptr inbounds i8, ptr %16, i64 24
  store i32 10, ptr %157, align 8
  call void @set_offset(ptr nonnull %16, ptr nonnull @String)
  %158 = load ptr, ptr %16, align 8
  %159 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %158, 0
  %160 = load ptr, ptr %155, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } %159, ptr %160, 1
  %162 = load ptr, ptr %156, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %162, 2
  %164 = load i32, ptr %157, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, i32 %164, 3
  store ptr @_parameterization_i32, ptr %17, align 8
  %166 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_String, ptr %166, align 8
  %167 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %17)
  %168 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %18, align 8
  %169 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr %158, ptr %169, align 8
  %170 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %134, ptr nonnull %18)
  call void %170({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %17, i32 68, { ptr, ptr, ptr, i32 } %165) #25
  %171 = ptrtoint ptr %131 to i64
  %.sroa.433.8.insert.ext = zext i64 %171 to i160
  %.sroa.433.8.insert.insert = or disjoint i160 %.sroa.433.8.insert.ext, 3402823669209384634633746074317682114560
  %172 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.433.8.insert.insert, 1
  %173 = call ptr @get_current_coroutine()
  %174 = getelementptr i8, ptr %173, i64 48
  store { ptr, i160 } %172, ptr %174, align 8
  call void @coroutine_yield(ptr %173)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %128
  store ptr @String, ptr %19, align 8
  %175 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %176 = call { i64, i64 } @size_wrapper(ptr %175, ptr nonnull %19)
  %177 = extractvalue { i64, i64 } %176, 0
  %178 = call ptr @bump_malloc(i64 %177)
  %179 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %178, 1
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr undef, 2
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %20, align 8
  %182 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr @_parameterization_i32, ptr %182, align 8
  %183 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr @_parameterization_i32, ptr %183, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %20)
  %185 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %186 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %21, align 8
  %187 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr @i32_typ, ptr %187, align 8
  %188 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr @i32_typ, ptr %188, align 8
  %189 = call ptr @behavior_wrapper(ptr %186, { ptr, ptr, ptr, i32 } %181, ptr nonnull %21)
  call void %189({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr nonnull %20, { ptr } %125, i32 %111, i32 %112) #25
  store ptr @String, ptr %22, align 8
  %190 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr %178, ptr %190, align 8
  %191 = getelementptr inbounds i8, ptr %22, i64 16
  %192 = getelementptr inbounds i8, ptr %22, i64 24
  store i32 10, ptr %192, align 8
  call void @set_offset(ptr nonnull %22, ptr nonnull @String)
  %193 = load ptr, ptr %22, align 8
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %193, 0
  %195 = load ptr, ptr %190, align 8
  %196 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %195, 1
  %197 = load ptr, ptr %191, align 8
  %198 = insertvalue { ptr, ptr, ptr, i32 } %196, ptr %197, 2
  %199 = load i32, ptr %192, align 8
  %200 = insertvalue { ptr, ptr, ptr, i32 } %198, i32 %199, 3
  ret { ptr, ptr, ptr, i32 } %200
}

define { ptr, i8 } @File_read_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %12 = alloca [1 x ptr], align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca [3 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr }, align 8
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  %17 = alloca [2 x ptr], align 8
  %18 = alloca { ptr, ptr }, align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract6, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %22, align 8
  call void @set_offset(ptr nonnull %19, ptr nonnull @File)
  %23 = load ptr, ptr %20, align 8
  %24 = load ptr, ptr %19, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 160, ptr %24)
  %26 = load i32, ptr %22, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = getelementptr i8, ptr %28, i64 24
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call i1 %31(ptr %23) #24
  br i1 %32, label %._crit_edge, label %33

33:                                               ; preds = %3
  store ptr @FileSystemError, ptr %5, align 8
  %34 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %5)
  %35 = extractvalue { i64, i64 } %34, 0
  %36 = call ptr @bump_malloc(i64 %35)
  %37 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %36, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr undef, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 10, 3
  %40 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %41 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %42 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
  call void %42({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4) #25
  %43 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 102, i8 105, i8 108, i8 101, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %43, align 16
  store ptr @String, ptr %6, align 8
  %44 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %45 = call { i64, i64 } @size_wrapper(ptr %44, ptr nonnull %6)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  %48 = insertvalue { ptr } undef, ptr %43, 0
  %49 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %47, 1
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr undef, 2
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %7, align 8
  %52 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %52, align 8
  %53 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %7)
  %55 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %56 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %8, align 8
  %57 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %57, align 8
  %58 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %58, align 8
  %59 = call ptr @behavior_wrapper(ptr %56, { ptr, ptr, ptr, i32 } %51, ptr nonnull %8)
  call void %59({ ptr, ptr, ptr, i32 } %51, { ptr, ptr, ptr, i32 } %51, ptr nonnull %7, { ptr } %48, i32 14, i32 15) #25
  store ptr @String, ptr %9, align 8
  %60 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %47, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %9, i64 16
  %62 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 10, ptr %62, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %63 = load ptr, ptr %9, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %60, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = load ptr, ptr %61, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 2
  %69 = load i32, ptr %62, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %69, 3
  store ptr @_parameterization_i32, ptr %10, align 8
  %71 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @_parameterization_String, ptr %71, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %73 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %11, align 8
  %74 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %63, ptr %74, align 8
  %75 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %39, ptr nonnull %11)
  call void %75({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %10, i32 72, { ptr, ptr, ptr, i32 } %70) #25
  %76 = ptrtoint ptr %36 to i64
  %.sroa.472.8.insert.ext = zext i64 %76 to i160
  %.sroa.472.8.insert.insert = or disjoint i160 %.sroa.472.8.insert.ext, 3402823669209384634633746074317682114560
  %77 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.472.8.insert.insert, 1
  %78 = call ptr @get_current_coroutine()
  %79 = getelementptr i8, ptr %78, i64 48
  store { ptr, i160 } %77, ptr %79, align 8
  call void @coroutine_yield(ptr %78)
  br label %._crit_edge

._crit_edge:                                      ; preds = %3, %33
  %80 = load ptr, ptr %20, align 8
  %81 = load ptr, ptr %19, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 160, ptr %81)
  %83 = load i32, ptr %22, align 8
  %84 = sext i32 %83 to i64
  %85 = getelementptr ptr, ptr %81, i64 %84
  %86 = getelementptr i8, ptr %85, i64 16
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr } %88(ptr %80) #24
  %90 = call i32 @fgetc({ ptr } %89)
  %91 = icmp eq i32 %90, -1
  br i1 %91, label %92, label %151

92:                                               ; preds = %._crit_edge
  %93 = load ptr, ptr %20, align 8
  %94 = load ptr, ptr %19, align 8
  %95 = call ptr @llvm.invariant.start.p0(i64 160, ptr %94)
  %96 = load i32, ptr %22, align 8
  %97 = sext i32 %96 to i64
  %98 = getelementptr ptr, ptr %94, i64 %97
  %99 = getelementptr i8, ptr %98, i64 16
  %100 = load ptr, ptr %99, align 8
  %101 = load ptr, ptr %100, align 8
  %102 = call { ptr } %101(ptr %93) #24
  %103 = call i32 @ferror({ ptr } %102)
  %.not = icmp eq i32 %103, 0
  br i1 %.not, label %._crit_edge1, label %104

104:                                              ; preds = %92
  store ptr @FileSystemError, ptr %12, align 8
  %105 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %12)
  %106 = extractvalue { i64, i64 } %105, 0
  %107 = call ptr @bump_malloc(i64 %106)
  %108 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %107, 1
  %109 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr undef, 2
  %110 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 10, 3
  %111 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %112 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %113 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %110, ptr nonnull %4)
  call void %113({ ptr, ptr, ptr, i32 } %110, { ptr, ptr, ptr, i32 } %110, ptr nonnull %4) #25
  %114 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 102, i8 105, i8 108, i8 101, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %114, align 16
  store ptr @String, ptr %13, align 8
  %115 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %116 = call { i64, i64 } @size_wrapper(ptr %115, ptr nonnull %13)
  %117 = extractvalue { i64, i64 } %116, 0
  %118 = call ptr @bump_malloc(i64 %117)
  %119 = insertvalue { ptr } undef, ptr %114, 0
  %120 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %118, 1
  %121 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr undef, 2
  %122 = insertvalue { ptr, ptr, ptr, i32 } %121, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %14, align 8
  %123 = getelementptr inbounds i8, ptr %14, i64 8
  store ptr @_parameterization_i32, ptr %123, align 8
  %124 = getelementptr inbounds i8, ptr %14, i64 16
  store ptr @_parameterization_i32, ptr %124, align 8
  %125 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %14)
  %126 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %127 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %15, align 8
  %128 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @i32_typ, ptr %128, align 8
  %129 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr @i32_typ, ptr %129, align 8
  %130 = call ptr @behavior_wrapper(ptr %127, { ptr, ptr, ptr, i32 } %122, ptr nonnull %15)
  call void %130({ ptr, ptr, ptr, i32 } %122, { ptr, ptr, ptr, i32 } %122, ptr nonnull %14, { ptr } %119, i32 14, i32 15) #25
  store ptr @String, ptr %16, align 8
  %131 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr %118, ptr %131, align 8
  %132 = getelementptr inbounds i8, ptr %16, i64 16
  %133 = getelementptr inbounds i8, ptr %16, i64 24
  store i32 10, ptr %133, align 8
  call void @set_offset(ptr nonnull %16, ptr nonnull @String)
  %134 = load ptr, ptr %16, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = load ptr, ptr %131, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %136, 1
  %138 = load ptr, ptr %132, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %138, 2
  %140 = load i32, ptr %133, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 %140, 3
  store ptr @_parameterization_i32, ptr %17, align 8
  %142 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_String, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %17)
  %144 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %18, align 8
  %145 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr %134, ptr %145, align 8
  %146 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %110, ptr nonnull %18)
  call void %146({ ptr, ptr, ptr, i32 } %110, { ptr, ptr, ptr, i32 } %110, ptr nonnull %17, i32 75, { ptr, ptr, ptr, i32 } %141) #25
  %147 = ptrtoint ptr %107 to i64
  %.sroa.433.8.insert.ext = zext i64 %147 to i160
  %.sroa.433.8.insert.insert = or disjoint i160 %.sroa.433.8.insert.ext, 3402823669209384634633746074317682114560
  %148 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.433.8.insert.insert, 1
  %149 = call ptr @get_current_coroutine()
  %150 = getelementptr i8, ptr %149, i64 48
  store { ptr, i160 } %148, ptr %150, align 8
  call void @coroutine_yield(ptr %149)
  br label %._crit_edge1

151:                                              ; preds = %._crit_edge
  %152 = trunc i32 %90 to i8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %104, %92, %151
  %.reg2mem16.sroa.0.0 = phi ptr [ @i8_typ, %151 ], [ @nil_typ, %92 ], [ @nil_typ, %104 ]
  %.reg2mem16.sroa.3.0 = phi i8 [ %152, %151 ], [ undef, %92 ], [ undef, %104 ]
  %.reload17.fca.0.insert = insertvalue { ptr, i8 } poison, ptr %.reg2mem16.sroa.0.0, 0
  %.reload17.fca.1.insert = insertvalue { ptr, i8 } %.reload17.fca.0.insert, i8 %.reg2mem16.sroa.3.0, 1
  ret { ptr, i8 } %.reload17.fca.1.insert
}

define i64 @File_write_textString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca [3 x ptr], align 8
  %16 = alloca { ptr, ptr, ptr }, align 8
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  %18 = alloca [2 x ptr], align 8
  %19 = alloca { ptr, ptr }, align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %.fca.1.extract4, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr %.fca.2.extract5, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %20, i64 24
  store i32 %.fca.3.extract6, ptr %23, align 8
  call void @set_offset(ptr nonnull %20, ptr nonnull @File)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %24 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr %.fca.1.extract, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr %.fca.2.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %24, i64 24
  store i32 %.fca.3.extract, ptr %27, align 8
  call void @set_offset(ptr nonnull %24, ptr nonnull @String)
  %28 = load ptr, ptr %21, align 8
  %29 = load ptr, ptr %20, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 160, ptr %29)
  %31 = load i32, ptr %23, align 8
  %32 = sext i32 %31 to i64
  %33 = getelementptr ptr, ptr %29, i64 %32
  %34 = getelementptr i8, ptr %33, i64 24
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call i1 %36(ptr %28) #24
  br i1 %37, label %._crit_edge, label %38

38:                                               ; preds = %4
  store ptr @FileSystemError, ptr %6, align 8
  %39 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %6)
  %40 = extractvalue { i64, i64 } %39, 0
  %41 = call ptr @bump_malloc(i64 %40)
  %42 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %41, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr undef, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 10, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %46 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %47 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %44, ptr nonnull %5)
  call void %47({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %5) #25
  %48 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 102, i8 105, i8 108, i8 101, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %48, align 16
  store ptr @String, ptr %7, align 8
  %49 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %50 = call { i64, i64 } @size_wrapper(ptr %49, ptr nonnull %7)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = insertvalue { ptr } undef, ptr %48, 0
  %54 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %52, 1
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr undef, 2
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %8, align 8
  %57 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %57, align 8
  %58 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_i32, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %8)
  %60 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %61 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %9, align 8
  %62 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %63, align 8
  %64 = call ptr @behavior_wrapper(ptr %61, { ptr, ptr, ptr, i32 } %56, ptr nonnull %9)
  call void %64({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull %8, { ptr } %53, i32 14, i32 15) #25
  store ptr @String, ptr %10, align 8
  %65 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %52, ptr %65, align 8
  %66 = getelementptr inbounds i8, ptr %10, i64 16
  %67 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 10, ptr %67, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @String)
  %68 = load ptr, ptr %10, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %70 = load ptr, ptr %65, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 1
  %72 = load ptr, ptr %66, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 2
  %74 = load i32, ptr %67, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, i32 %74, 3
  store ptr @_parameterization_i32, ptr %11, align 8
  %76 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @_parameterization_String, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %11)
  %78 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %12, align 8
  %79 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %68, ptr %79, align 8
  %80 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %44, ptr nonnull %12)
  call void %80({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %11, i32 81, { ptr, ptr, ptr, i32 } %75) #25
  %81 = ptrtoint ptr %41 to i64
  %.sroa.471.8.insert.ext = zext i64 %81 to i160
  %.sroa.471.8.insert.insert = or disjoint i160 %.sroa.471.8.insert.ext, 3402823669209384634633746074317682114560
  %82 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.471.8.insert.insert, 1
  %83 = call ptr @get_current_coroutine()
  %84 = getelementptr i8, ptr %83, i64 48
  store { ptr, i160 } %82, ptr %84, align 8
  call void @coroutine_yield(ptr %83)
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %38
  %85 = load ptr, ptr %24, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = load ptr, ptr %25, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %87, 1
  %89 = load ptr, ptr %26, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 2
  %91 = load i32, ptr %27, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %91, 3
  %93 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %94 = call ptr @llvm.invariant.start.p0(i64 632, ptr %85)
  %95 = sext i32 %91 to i64
  %96 = getelementptr ptr, ptr %85, i64 %95
  %97 = getelementptr i8, ptr %96, i64 56
  %98 = load ptr, ptr %97, align 8
  %99 = call ptr @behavior_wrapper(ptr %98, { ptr, ptr, ptr, i32 } %92, ptr nonnull %5)
  %100 = call i32 %99({ ptr, ptr, ptr, i32 } %92, { ptr, ptr, ptr, i32 } %92, ptr nonnull %5) #25
  %101 = sext i32 %100 to i64
  %102 = load ptr, ptr %24, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %104 = load ptr, ptr %25, align 8
  %105 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %104, 1
  %106 = load ptr, ptr %26, align 8
  %107 = insertvalue { ptr, ptr, ptr, i32 } %105, ptr %106, 2
  %108 = load i32, ptr %27, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } %107, i32 %108, 3
  %110 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %111 = call ptr @llvm.invariant.start.p0(i64 632, ptr %102)
  %112 = sext i32 %108 to i64
  %113 = getelementptr ptr, ptr %102, i64 %112
  %114 = getelementptr i8, ptr %113, i64 80
  %115 = load ptr, ptr %114, align 8
  %116 = call ptr @behavior_wrapper(ptr %115, { ptr, ptr, ptr, i32 } %109, ptr nonnull %5)
  %117 = call { ptr } %116({ ptr, ptr, ptr, i32 } %109, { ptr, ptr, ptr, i32 } %109, ptr nonnull %5) #25
  %118 = load ptr, ptr %21, align 8
  %119 = load ptr, ptr %20, align 8
  %120 = call ptr @llvm.invariant.start.p0(i64 160, ptr %119)
  %121 = load i32, ptr %23, align 8
  %122 = sext i32 %121 to i64
  %123 = getelementptr ptr, ptr %119, i64 %122
  %124 = getelementptr i8, ptr %123, i64 16
  %125 = load ptr, ptr %124, align 8
  %126 = load ptr, ptr %125, align 8
  %127 = call { ptr } %126(ptr %118) #24
  %128 = call i64 @fwrite({ ptr } %117, i64 1, i64 %101, { ptr } %127)
  %129 = icmp slt i64 %128, %101
  br i1 %129, label %130, label %._crit_edge1

130:                                              ; preds = %._crit_edge
  store ptr @FileSystemError, ptr %13, align 8
  %131 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %13)
  %132 = extractvalue { i64, i64 } %131, 0
  %133 = call ptr @bump_malloc(i64 %132)
  %134 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %133, 1
  %135 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr undef, 2
  %136 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 10, 3
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %138 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %139 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %136, ptr nonnull %5)
  call void %139({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr nonnull %5) #25
  %140 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 108, i8 105, i8 98, i8 92, i8 102, i8 105, i8 108, i8 101, i8 115, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %140, align 16
  store ptr @String, ptr %14, align 8
  %141 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 48), align 8
  %142 = call { i64, i64 } @size_wrapper(ptr %141, ptr nonnull %14)
  %143 = extractvalue { i64, i64 } %142, 0
  %144 = call ptr @bump_malloc(i64 %143)
  %145 = insertvalue { ptr } undef, ptr %140, 0
  %146 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %144, 1
  %147 = insertvalue { ptr, ptr, ptr, i32 } %146, ptr undef, 2
  %148 = insertvalue { ptr, ptr, ptr, i32 } %147, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %15, align 8
  %149 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @_parameterization_i32, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr @_parameterization_i32, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %15)
  %152 = call ptr @llvm.invariant.start.p0(i64 632, ptr nonnull @String)
  %153 = load ptr, ptr getelementptr inbounds (i8, ptr @String, i64 128), align 8
  store ptr @buffer_typ, ptr %16, align 8
  %154 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr @i32_typ, ptr %154, align 8
  %155 = getelementptr inbounds i8, ptr %16, i64 16
  store ptr @i32_typ, ptr %155, align 8
  %156 = call ptr @behavior_wrapper(ptr %153, { ptr, ptr, ptr, i32 } %148, ptr nonnull %16)
  call void %156({ ptr, ptr, ptr, i32 } %148, { ptr, ptr, ptr, i32 } %148, ptr nonnull %15, { ptr } %145, i32 14, i32 15) #25
  store ptr @String, ptr %17, align 8
  %157 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %144, ptr %157, align 8
  %158 = getelementptr inbounds i8, ptr %17, i64 16
  %159 = getelementptr inbounds i8, ptr %17, i64 24
  store i32 10, ptr %159, align 8
  call void @set_offset(ptr nonnull %17, ptr nonnull @String)
  %160 = load ptr, ptr %17, align 8
  %161 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %160, 0
  %162 = load ptr, ptr %157, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } %161, ptr %162, 1
  %164 = load ptr, ptr %158, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 2
  %166 = load i32, ptr %159, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, i32 %166, 3
  store ptr @_parameterization_i32, ptr %18, align 8
  %168 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_String, ptr %168, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %18)
  %170 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %19, align 8
  %171 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %160, ptr %171, align 8
  %172 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %136, ptr nonnull %19)
  call void %172({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr nonnull %18, i32 85, { ptr, ptr, ptr, i32 } %167) #25
  %173 = ptrtoint ptr %133 to i64
  %.sroa.432.8.insert.ext = zext i64 %173 to i160
  %.sroa.432.8.insert.insert = or disjoint i160 %.sroa.432.8.insert.ext, 3402823669209384634633746074317682114560
  %174 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.432.8.insert.insert, 1
  %175 = call ptr @get_current_coroutine()
  %176 = getelementptr i8, ptr %175, i64 48
  store { ptr, i160 } %174, ptr %176, align 8
  call void @coroutine_yield(ptr %175)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %130
  ret i64 %128
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileSystemError(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FileSystemError_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FileSystemError_B_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @String, align 8
  %15 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @String to i64), ptr %13)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr i8, ptr %16, i64 160
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

declare i64 @fwrite({ ptr }, i64, i64, { ptr }) local_unnamed_addr

define ptr @FileSystemError_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @String, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @String to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 144
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FileSystemError_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FileSystemError_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FileSystemError_getter_message(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FileSystemError_setter_message(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FileSystemError_getter_file_name(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FileSystemError_setter_file_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @FileSystemError_getter_line_number(ptr nocapture readonly %0) #7 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FileSystemError_setter_line_number(ptr nocapture writeonly %0, i32 %1) #8 {
  store i32 %1, ptr %0, align 4
  ret void
}

declare i32 @fgetc({ ptr }) local_unnamed_addr

declare i32 @ferror({ ptr }) local_unnamed_addr

declare i32 @fseek({ ptr }, i64, i32) local_unnamed_addr

declare i64 @fread({ ptr }, i64, i64, { ptr }) local_unnamed_addr

declare i64 @ftell({ ptr }) local_unnamed_addr

declare i32 @fclose({ ptr }) local_unnamed_addr

declare { ptr } @fopen({ ptr }, { ptr }) local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @File_getter_open(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @File_setter_open(ptr nocapture writeonly %0, i1 %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @File_getter_handle(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 64
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @File_setter_handle(ptr nocapture writeonly %0, { ptr } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 64
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @File_getter_mode(ptr nocapture readonly %0) #7 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 40
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 48
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 56
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @File_setter_mode(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %3 = getelementptr i8, ptr %0, i64 32
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 56
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @File_getter_name(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @File_setter_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FileWriter_getter_text(ptr nocapture readonly %0) #7 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FileWriter_setter_text(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #8 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileProcessor(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileReader(ptr nocapture readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FileReader_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @FileReader_field_FileReader_0(ptr nocapture readnone %0) #1 {
  ret ptr @_parameterization_String
}

define ptr @FileReader_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -2227788838181535664, i64 ptrtoint (ptr @File to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 112
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @FileReader_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @FileReader)
  ret void
}

define { ptr, i160 } @FileReader_process_fileFile({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract12, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract13, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract14, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @FileReader)
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract6 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract4, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract5, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract6, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @File)
  %14 = load ptr, ptr %10, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %14, 0
  %16 = load ptr, ptr %11, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %16, 1
  %18 = load ptr, ptr %12, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %18, 2
  %20 = load i32, ptr %13, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 %20, 3
  %22 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %23 = call ptr @llvm.invariant.start.p0(i64 160, ptr %14)
  %24 = sext i32 %20 to i64
  %25 = getelementptr ptr, ptr %14, i64 %24
  %26 = getelementptr i8, ptr %25, i64 72
  %27 = load ptr, ptr %26, align 8
  %28 = call ptr @behavior_wrapper(ptr %27, { ptr, ptr, ptr, i32 } %21, ptr nonnull %5)
  %29 = call { ptr, ptr, ptr, i32 } %28({ ptr, ptr, ptr, i32 } %21, { ptr, ptr, ptr, i32 } %21, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %29, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %29, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %29, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %29, 3
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %30, i64 8
  store ptr %.fca.1.extract, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 16
  store ptr %.fca.2.extract, ptr %32, align 8
  %33 = getelementptr inbounds i8, ptr %30, i64 24
  store i32 %.fca.3.extract, ptr %33, align 8
  call void @set_offset(ptr nonnull %30, ptr nonnull @String)
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = load ptr, ptr %32, align 8
  %37 = load i32, ptr %33, align 8
  %38 = insertvalue { ptr, i160 } undef, ptr %34, 0
  %39 = ptrtoint ptr %35 to i64
  %40 = ptrtoint ptr %36 to i64
  %.sroa.3.0.insert.ext = zext i32 %37 to i160
  %.sroa.3.0.insert.shift = shl nuw i160 %.sroa.3.0.insert.ext, 128
  %.sroa.2.0.insert.ext = zext i64 %40 to i160
  %.sroa.2.0.insert.shift = shl nuw nsw i160 %.sroa.2.0.insert.ext, 64
  %.sroa.2.0.insert.insert = or disjoint i160 %.sroa.3.0.insert.shift, %.sroa.2.0.insert.shift
  %.sroa.0.0.insert.ext = zext i64 %39 to i160
  %.sroa.0.0.insert.insert = or disjoint i160 %.sroa.2.0.insert.insert, %.sroa.0.0.insert.ext
  %41 = insertvalue { ptr, i160 } %38, i160 %.sroa.0.0.insert.insert, 1
  ret { ptr, i160 } %41
}

define void @coroutine_waefmvsity_passer(ptr nocapture %0) {
  %2 = getelementptr i8, ptr %0, i64 80
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  %5 = tail call { ptr, i160 } %4({ ptr, ptr, ptr, i32 } %3)
  %6 = getelementptr i8, ptr %0, i64 48
  store { ptr, i160 } %5, ptr %6, align 8
  ret void
}

define { ptr, i160 } @_functionliteral_cthhjacaug({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1) {
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %3, align 8
  %4 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr %.fca.1.extract4, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %3, i64 16
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %3, i64 24
  store i32 %.fca.3.extract, ptr %6, align 8
  call void @set_offset(ptr nonnull %3, ptr nonnull @File)
  %7 = load ptr, ptr %3, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %9 = load ptr, ptr %4, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %9, 1
  %11 = load ptr, ptr %5, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %11, 2
  %13 = load i32, ptr %6, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %13, 3
  %15 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract7, 0
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr %.fca.1.extract8, 1
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr %.fca.2.extract9, 2
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, i32 %.fca.3.extract10, 3
  %19 = alloca [1 x ptr], align 8
  store ptr @_parameterization_File, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %19)
  %21 = call ptr @llvm.invariant.start.p0(i64 24, ptr %.fca.0.extract7)
  %22 = sext i32 %.fca.3.extract10 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract7, i64 %22
  %24 = getelementptr i8, ptr %23, i64 8
  %25 = load ptr, ptr %24, align 8
  %26 = alloca { ptr }, align 8
  store ptr %7, ptr %26, align 8
  %27 = call ptr @behavior_wrapper(ptr %25, { ptr, ptr, ptr, i32 } %18, ptr nonnull %26)
  %28 = call { ptr, i160 } %27({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %19, { ptr, ptr, ptr, i32 } %14) #25
  ret { ptr, i160 } %28
}

define void @coroutine_rfmhtibpno_passer(ptr nocapture %0) {
  %2 = getelementptr i8, ptr %0, i64 80
  %3 = getelementptr i8, ptr %0, i64 112
  %4 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %5 = load { ptr, ptr, ptr, i32 }, ptr %3, align 8
  %6 = load ptr, ptr %0, align 8
  %7 = tail call { ptr, i160 } %6({ ptr, ptr, ptr, i32 } %4, { ptr, ptr, ptr, i32 } %5)
  %8 = getelementptr i8, ptr %0, i64 48
  store { ptr, i160 } %7, ptr %8, align 8
  ret void
}

define void @report_exception({ ptr } %0) {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr } %0, 0
  %4 = getelementptr i8, ptr %.fca.0.extract2, i64 48
  %5 = load { ptr, i160 }, ptr %4, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %5, 0
  %6 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %7 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %8 = getelementptr i8, ptr %.fca.0.extract, i64 24
  %9 = getelementptr i8, ptr %.fca.0.extract, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 9027164862567808692, i64 ptrtoint (ptr @Exception to i64), ptr %13)
  br i1 %14, label %15, label %._crit_edge

15:                                               ; preds = %1
  %.fca.1.extract = extractvalue { ptr, i160 } %5, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %16 = getelementptr inbounds i8, ptr %3, i64 8
  store i160 %.fca.1.extract, ptr %16, align 8
  call void @set_offset(ptr nonnull %3, ptr nonnull @Exception)
  %17 = load ptr, ptr %3, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %17, 0
  %19 = load ptr, ptr %16, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %19, 1
  %21 = getelementptr inbounds i8, ptr %3, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 2
  %24 = getelementptr inbounds i8, ptr %3, i64 24
  %25 = load i32, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %25, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %28 = call ptr @llvm.invariant.start.p0(i64 104, ptr %17)
  %29 = sext i32 %25 to i64
  %30 = getelementptr ptr, ptr %17, i64 %29
  %31 = getelementptr i8, ptr %30, i64 48
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @behavior_wrapper(ptr %32, { ptr, ptr, ptr, i32 } %26, ptr nonnull %2)
  call void %33({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull %2) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %1, %15
  ret void
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #2 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #5 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #6 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #7 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #8 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
attributes #9 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #10 = { nofree nounwind }
attributes #11 = { nofree nosync nounwind memory(none) }
attributes #12 = { noinline nounwind memory(readwrite) }
attributes #13 = { nocallback nofree nosync nounwind willreturn }
attributes #14 = { noreturn nounwind }
attributes #15 = { noreturn }
attributes #16 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #17 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #18 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #19 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #20 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #21 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #22 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
attributes #23 = { nounwind willreturn memory(argmem: readwrite) }
attributes #24 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #25 = { nounwind }
attributes #26 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #27 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #28 = { nounwind memory(readwrite) }
attributes #29 = { mustprogress nofree nosync nounwind willreturn }
attributes #30 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #31 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
